LavaPack.loadBundle([
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/eth-overview.js", {"../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../ducks/swaps/swaps":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/swaps/swaps.js","../../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../helpers/utils/hardware":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/hardware.js","../../../hooks/useMetricEvent":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useMetricEvent.js","../../../selectors/selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/selectors.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","../../ui/icon-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-button/index.js","../../ui/icon/overview-buy-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/overview-buy-icon.component.js","../../ui/icon/overview-send-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/overview-send-icon.component.js","../../ui/icon/swap-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/swap-icon.component.js","../../ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../ui/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","../user-preferenced-currency-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-display/index.js","./wallet-overview":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/wallet-overview.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/eth-overview.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _classnames = _interopRequireDefault(require("classnames"));

var _reactRouterDom = require("react-router-dom");

var _identicon = _interopRequireDefault(require("../../ui/identicon"));

var _i18n = require("../../../contexts/i18n");

var _routes = require("../../../helpers/constants/routes");

var _useMetricEvent = require("../../../hooks/useMetricEvent");

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));

var _common = require("../../../helpers/constants/common");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors/selectors");

var _swapIcon = _interopRequireDefault(require("../../ui/icon/swap-icon.component"));

var _overviewBuyIcon = _interopRequireDefault(require("../../ui/icon/overview-buy-icon.component"));

var _overviewSendIcon = _interopRequireDefault(require("../../ui/icon/overview-send-icon.component"));

var _swaps = require("../../../ducks/swaps/swaps");

var _iconButton = _interopRequireDefault(require("../../ui/icon-button"));

var _hardware = require("../../../helpers/utils/hardware");

var _walletOverview = _interopRequireDefault(require("./wallet-overview"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const EthOverview = ({
  className
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const sendEvent = (0, _useMetricEvent.useMetricEvent)({
    eventOpts: {
      category: 'Navigation',
      action: 'Home',
      name: 'Clicked Send: Eth'
    }
  });
  const depositEvent = (0, _useMetricEvent.useMetricEvent)({
    eventOpts: {
      category: 'Navigation',
      action: 'Home',
      name: 'Clicked Deposit'
    }
  });
  const history = (0, _reactRouterDom.useHistory)();
  const keyring = (0, _reactRedux.useSelector)(_selectors.getCurrentKeyring);
  const usingHardwareWallet = (0, _hardware.isHardwareKeyring)(keyring.type);
  const balanceIsCached = (0, _reactRedux.useSelector)(_selectors.isBalanceCached);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const selectedAccount = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount);
  const {
    balance
  } = selectedAccount;
  const isMainnetChain = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  const isTestnetChain = (0, _reactRedux.useSelector)(_selectors.getIsTestnet);
  const isSwapsChain = (0, _reactRedux.useSelector)(_selectors.getIsSwapsChain);
  const primaryTokenImage = (0, _reactRedux.useSelector)(_selectors.getNativeCurrencyImage);
  const enteredSwapsEvent = (0, _useMetricEvent.useNewMetricEvent)({
    event: 'Swaps Opened',
    properties: {
      source: 'Main View',
      active_currency: 'ETH'
    },
    category: 'swaps'
  });
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors.getSwapsDefaultToken);
  return /*#__PURE__*/_react.default.createElement(_walletOverview.default, {
    balance: /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "top",
      title: t('balanceOutdated'),
      disabled: !balanceIsCached
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "eth-overview__balance"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "eth-overview__primary-container"
    }, /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: (0, _classnames.default)('eth-overview__primary-balance', {
        'eth-overview__cached-balance': balanceIsCached
      }),
      "data-testid": "eth-overview__primary-currency",
      value: balance,
      type: _common.PRIMARY,
      ethNumberOfDecimals: 4,
      hideTitle: true
    }), balanceIsCached ? /*#__PURE__*/_react.default.createElement("span", {
      className: "eth-overview__cached-star"
    }, "*") : null), showFiat && /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      className: (0, _classnames.default)({
        'eth-overview__cached-secondary-balance': balanceIsCached,
        'eth-overview__secondary-balance': !balanceIsCached
      }),
      "data-testid": "eth-overview__secondary-currency",
      value: balance,
      type: _common.SECONDARY,
      ethNumberOfDecimals: 4,
      hideTitle: true
    }))),
    buttons: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "eth-overview__button",
      Icon: _overviewBuyIcon.default,
      disabled: !(isMainnetChain || isTestnetChain),
      label: t('buy'),
      onClick: () => {
        depositEvent();
        dispatch((0, _actions.showModal)({
          name: 'DEPOSIT_ETHER'
        }));
      }
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "eth-overview__button",
      "data-testid": "eth-overview-send",
      Icon: _overviewSendIcon.default,
      label: t('send'),
      onClick: () => {
        sendEvent();
        history.push(_routes.SEND_ROUTE);
      }
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "eth-overview__button",
      disabled: !isSwapsChain,
      Icon: _swapIcon.default,
      onClick: () => {
        if (isSwapsChain) {
          enteredSwapsEvent();
          dispatch((0, _swaps.setSwapsFromToken)(defaultSwapsToken));

          if (usingHardwareWallet) {
            global.platform.openExtensionInBrowser(_routes.BUILD_QUOTE_ROUTE);
          } else {
            history.push(_routes.BUILD_QUOTE_ROUTE);
          }
        }
      },
      label: t('swap'),
      tooltipRender: contents => /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        title: t('currentlyUnavailable'),
        position: "bottom",
        disabled: isSwapsChain
      }, contents)
    })),
    className: className,
    icon: /*#__PURE__*/_react.default.createElement(_identicon.default, {
      diameter: 32,
      image: primaryTokenImage,
      imageBorder: true
    })
  });
};

EthOverview.propTypes = {
  className: _propTypes.default.string
};
EthOverview.defaultProps = {
  className: undefined
};
var _default = EthOverview;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/eth-overview.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/token-overview.js", {"../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../ducks/send":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/send/index.js","../../../ducks/swaps/swaps":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/swaps/swaps.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../helpers/utils/hardware":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/hardware.js","../../../hooks/useMetricEvent":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useMetricEvent.js","../../../hooks/useTokenFiatAmount":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenFiatAmount.js","../../../hooks/useTokenTracker":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenTracker.js","../../../selectors/selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/selectors.js","../../ui/currency-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/currency-display/index.js","../../ui/icon-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-button/index.js","../../ui/icon/overview-send-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/overview-send-icon.component.js","../../ui/icon/swap-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/swap-icon.component.js","../../ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../ui/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","./wallet-overview":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/wallet-overview.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/token-overview.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _identicon = _interopRequireDefault(require("../../ui/identicon"));

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

var _currencyDisplay = _interopRequireDefault(require("../../ui/currency-display"));

var _i18n = require("../../../contexts/i18n");

var _hardware = require("../../../helpers/utils/hardware");

var _routes = require("../../../helpers/constants/routes");

var _useMetricEvent = require("../../../hooks/useMetricEvent");

var _useTokenTracker = require("../../../hooks/useTokenTracker");

var _useTokenFiatAmount = require("../../../hooks/useTokenFiatAmount");

var _send = require("../../../ducks/send");

var _swaps = require("../../../ducks/swaps/swaps");

var _selectors = require("../../../selectors/selectors");

var _swapIcon = _interopRequireDefault(require("../../ui/icon/swap-icon.component"));

var _overviewSendIcon = _interopRequireDefault(require("../../ui/icon/overview-send-icon.component"));

var _iconButton = _interopRequireDefault(require("../../ui/icon-button"));

var _walletOverview = _interopRequireDefault(require("./wallet-overview"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const TokenOverview = ({
  className,
  token
}) => {
  var _tokensWithBalances$, _tokensWithBalances$2;

  const dispatch = (0, _reactRedux.useDispatch)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const sendTokenEvent = (0, _useMetricEvent.useMetricEvent)({
    eventOpts: {
      category: 'Navigation',
      action: 'Home',
      name: 'Clicked Send: Token'
    }
  });
  const history = (0, _reactRouterDom.useHistory)();
  const keyring = (0, _reactRedux.useSelector)(_selectors.getCurrentKeyring);
  const usingHardwareWallet = (0, _hardware.isHardwareKeyring)(keyring.type);
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)([token]);
  const balanceToRender = (_tokensWithBalances$ = tokensWithBalances[0]) === null || _tokensWithBalances$ === void 0 ? void 0 : _tokensWithBalances$.string;
  const balance = (_tokensWithBalances$2 = tokensWithBalances[0]) === null || _tokensWithBalances$2 === void 0 ? void 0 : _tokensWithBalances$2.balance;
  const formattedFiatBalance = (0, _useTokenFiatAmount.useTokenFiatAmount)(token.address, balanceToRender, token.symbol);
  const isSwapsChain = (0, _reactRedux.useSelector)(_selectors.getIsSwapsChain);
  const enteredSwapsEvent = (0, _useMetricEvent.useNewMetricEvent)({
    event: 'Swaps Opened',
    properties: {
      source: 'Token View',
      active_currency: token.symbol
    },
    category: 'swaps'
  });
  return /*#__PURE__*/_react.default.createElement(_walletOverview.default, {
    balance: /*#__PURE__*/_react.default.createElement("div", {
      className: "token-overview__balance"
    }, /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "token-overview__primary-balance",
      displayValue: balanceToRender,
      suffix: token.symbol
    }), formattedFiatBalance ? /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "token-overview__secondary-balance",
      displayValue: formattedFiatBalance,
      hideLabel: true
    }) : null),
    buttons: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "token-overview__button",
      onClick: () => {
        sendTokenEvent();
        dispatch((0, _send.updateSendAsset)({
          type: _send.ASSET_TYPES.TOKEN,
          details: token
        })).then(() => {
          history.push(_routes.SEND_ROUTE);
        });
      },
      Icon: _overviewSendIcon.default,
      label: t('send'),
      "data-testid": "eth-overview-send",
      disabled: token.isERC721
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      className: "token-overview__button",
      disabled: !isSwapsChain,
      Icon: _swapIcon.default,
      onClick: () => {
        if (isSwapsChain) {
          enteredSwapsEvent();
          dispatch((0, _swaps.setSwapsFromToken)(_objectSpread(_objectSpread({}, token), {}, {
            iconUrl: token.image,
            balance,
            string: balanceToRender
          })));

          if (usingHardwareWallet) {
            global.platform.openExtensionInBrowser(_routes.BUILD_QUOTE_ROUTE);
          } else {
            history.push(_routes.BUILD_QUOTE_ROUTE);
          }
        }
      },
      label: t('swap'),
      tooltipRender: contents => /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        title: t('currentlyUnavailable'),
        position: "bottom",
        disabled: isSwapsChain
      }, contents)
    })),
    className: className,
    icon: /*#__PURE__*/_react.default.createElement(_identicon.default, {
      diameter: 32,
      address: token.address,
      image: token.image
    })
  });
};

TokenOverview.propTypes = {
  className: _propTypes.default.string,
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string,
    image: _propTypes.default.string,
    isERC721: _propTypes.default.bool
  }).isRequired
};
TokenOverview.defaultProps = {
  className: undefined
};
var _default = TokenOverview;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/token-overview.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/card/card.js", {"../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/card/card.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _box = _interopRequireDefault(require("../box"));

var _designSystem = require("../../../helpers/constants/design-system");

const _excluded = ["border", "padding", "backgroundColor", "children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const Card = _ref => {
  let {
    border = true,
    padding = 4,
    backgroundColor = _designSystem.COLORS.WHITE,
    children
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const defaultBorderProps = {
    borderColor: border && _designSystem.COLORS.UI2,
    borderRadius: border && _designSystem.SIZES.MD,
    borderStyle: border && _designSystem.BORDER_STYLE.SOLID
  };
  return /*#__PURE__*/_react.default.createElement(_box.default, _objectSpread(_objectSpread({
    padding,
    backgroundColor
  }, defaultBorderProps), props), children);
};

Card.propTypes = _objectSpread({
  /**
   * Whether the Card has a border or not.
   * Defaults to true
   */
  border: _propTypes.default.bool,

  /**
   * Padding of the Card component accepts number or an array of 2 numbers.
   * Defaults to 4 (16px)
   */
  padding: _box.default.propTypes.padding,

  /**
   * The background color of the card
   * Defaults to COLORS.WHITE
   */
  backgroundColor: _box.default.propTypes.backgroundColor
}, _box.default.propTypes);
var _default = Card;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/card/card.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/loading-indicator/loading-indicator.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/loading-indicator/loading-indicator.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LoadingIndicator;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function LoadingIndicator({
  alt,
  title,
  isLoading,
  children = null
}) {
  return isLoading ? /*#__PURE__*/_react.default.createElement("span", {
    className: "loading-indicator"
  }, /*#__PURE__*/_react.default.createElement("img", {
    className: "loading-indicator__spinner",
    alt: alt,
    title: title,
    src: "images/loading.svg"
  })) : children;
}

LoadingIndicator.propTypes = {
  isLoading: _propTypes.default.bool.isRequired,
  alt: _propTypes.default.string.isRequired,
  title: _propTypes.default.string.isRequired,
  children: _propTypes.default.node
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/loading-indicator/loading-indicator.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/info-icon-inverted.component.js", {"../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/info-icon-inverted.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InfoIconInverted;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _designSystem = require("../../../helpers/constants/design-system");

function InfoIconInverted({
  severity
}) {
  const className = (0, _classnames.default)('info-icon', {
    'info-icon--success': severity === _designSystem.SEVERITIES.SUCCESS,
    'info-icon--warning': severity === _designSystem.SEVERITIES.WARNING,
    'info-icon--danger': severity === _designSystem.SEVERITIES.DANGER,
    'info-icon--info': severity === _designSystem.SEVERITIES.INFO
  });
  return /*#__PURE__*/_react.default.createElement("svg", {
    className: className,
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M15.75 8C15.75 3.75 12.25 0.25 8 0.25C3.71875 0.25 0.25 3.75 0.25 8C0.25 12.2812 3.71875 15.75 8 15.75C12.25 15.75 15.75 12.2812 15.75 8ZM8 9.5625C8.78125 9.5625 9.4375 10.2188 9.4375 11C9.4375 11.8125 8.78125 12.4375 8 12.4375C7.1875 12.4375 6.5625 11.8125 6.5625 11C6.5625 10.2188 7.1875 9.5625 8 9.5625ZM6.625 4.40625C6.59375 4.1875 6.78125 4 7 4H8.96875C9.1875 4 9.375 4.1875 9.34375 4.40625L9.125 8.65625C9.09375 8.875 8.9375 9 8.75 9H7.21875C7.03125 9 6.875 8.875 6.84375 8.65625L6.625 4.40625Z"
  }));
}

InfoIconInverted.propTypes = {
  /**
   * Severity can be 1 of 4 states:'danger', 'warning', 'info' or 'success'
   */
  severity: _propTypes.default.oneOf(Object.values(_designSystem.SEVERITIES))
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/info-icon-inverted.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-border/index.js", {"./icon-border":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-border/icon-border.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-border/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _iconBorder.default;
  }
});

var _iconBorder = _interopRequireDefault(require("./icon-border"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-border/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-with-fallback/index.js", {"./icon-with-fallback.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-with-fallback/icon-with-fallback.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-with-fallback/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _iconWithFallback.default;
  }
});

var _iconWithFallback = _interopRequireDefault(require("./icon-with-fallback.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-with-fallback/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/metamask-template-renderer/safe-component-list.js", {"../../ui/box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/index.js","../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../ui/chip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/chip/index.js","../../ui/definition-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/definition-list/index.js","../../ui/popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/popover/index.js","../../ui/truncated-definition-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/truncated-definition-list/index.js","../../ui/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/index.js","../metamask-translation":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/metamask-translation/index.js","../network-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/network-display/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/metamask-template-renderer/safe-component-list.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeComponentList = void 0;

var _button = _interopRequireDefault(require("../../ui/button"));

var _chip = _interopRequireDefault(require("../../ui/chip"));

var _definitionList = _interopRequireDefault(require("../../ui/definition-list"));

var _truncatedDefinitionList = _interopRequireDefault(require("../../ui/truncated-definition-list"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _typography = _interopRequireDefault(require("../../ui/typography"));

var _box = _interopRequireDefault(require("../../ui/box"));

var _metamaskTranslation = _interopRequireDefault(require("../metamask-translation"));

var _networkDisplay = _interopRequireDefault(require("../network-display"));

const safeComponentList = {
  MetaMaskTranslation: _metamaskTranslation.default,
  a: 'a',
  b: 'b',
  p: 'p',
  div: 'div',
  span: 'span',
  Typography: _typography.default,
  Chip: _chip.default,
  DefinitionList: _definitionList.default,
  TruncatedDefinitionList: _truncatedDefinitionList.default,
  Button: _button.default,
  Popover: _popover.default,
  Box: _box.default,
  NetworkDisplay: _networkDisplay.default
};
exports.safeComponentList = safeComponentList;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/metamask-template-renderer/safe-component-list.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-display/user-preferenced-currency-display.component.js", {"../../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../../hooks/useUserPreferencedCurrency":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useUserPreferencedCurrency.js","../../ui/currency-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/currency-display/index.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-display/user-preferenced-currency-display.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UserPreferencedCurrencyDisplay;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _common = require("../../../helpers/constants/common");

var _currencyDisplay = _interopRequireDefault(require("../../ui/currency-display"));

var _useUserPreferencedCurrency = require("../../../hooks/useUserPreferencedCurrency");

const _excluded = ["data-testid", "ethLogoHeight", "ethNumberOfDecimals", "fiatNumberOfDecimals", "numberOfDecimals", "showEthLogo", "type"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function UserPreferencedCurrencyDisplay(_ref) {
  let {
    'data-testid': dataTestId,
    ethLogoHeight = 12,
    ethNumberOfDecimals,
    fiatNumberOfDecimals,
    numberOfDecimals: propsNumberOfDecimals,
    showEthLogo,
    type
  } = _ref,
      restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const {
    currency,
    numberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(type, {
    ethNumberOfDecimals,
    fiatNumberOfDecimals,
    numberOfDecimals: propsNumberOfDecimals
  });
  const prefixComponent = (0, _react.useMemo)(() => {
    return currency === _common.ETH && showEthLogo && /*#__PURE__*/_react.default.createElement("img", {
      src: "./images/eth.svg",
      height: ethLogoHeight,
      alt: ""
    });
  }, [currency, showEthLogo, ethLogoHeight]);
  return /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, (0, _extends2.default)({}, restProps, {
    currency: currency,
    "data-testid": dataTestId,
    numberOfDecimals: numberOfDecimals,
    prefixComponent: prefixComponent
  }));
}

UserPreferencedCurrencyDisplay.propTypes = {
  className: _propTypes.default.string,
  'data-testid': _propTypes.default.string,
  prefix: _propTypes.default.string,
  value: _propTypes.default.string,
  numberOfDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  hideLabel: _propTypes.default.bool,
  hideTitle: _propTypes.default.bool,
  style: _propTypes.default.object,
  showEthLogo: _propTypes.default.bool,
  ethLogoHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  type: _propTypes.default.oneOf([_common.PRIMARY, _common.SECONDARY]),
  ethNumberOfDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  fiatNumberOfDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-display/user-preferenced-currency-display.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/search-icon/search-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/search-icon/search-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SearchIcon;

var _react = _interopRequireDefault(require("react"));

function SearchIcon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    height: "20",
    width: "20",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "currentColor"
  }, /*#__PURE__*/_react.default.createElement("g", {
    clipRule: "evenodd",
    fillRule: "evenodd"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M9.167 3.333a5.833 5.833 0 100 11.667 5.833 5.833 0 000-11.667zm-7.5 5.834a7.5 7.5 0 1115 0 7.5 7.5 0 01-15 0z"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M13.286 13.286a.833.833 0 011.178 0l3.625 3.625a.833.833 0 11-1.178 1.178l-3.625-3.625a.833.833 0 010-1.178z"
  })));
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/search-icon/search-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputAdornment/InputAdornment.js", {"../FormControl/FormControlContext":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/FormControlContext.js","../Typography":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Typography/index.js","../styles/withStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withStyles.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","clsx":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputAdornment/InputAdornment.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _Typography = _interopRequireDefault(require("../Typography"));

var _withStyles = _interopRequireDefault(require("../styles/withStyles"));

var _FormControlContext = _interopRequireWildcard(require("../FormControl/FormControlContext"));

var styles = {
  /* Styles applied to the root element. */
  root: {
    display: 'flex',
    height: '0.01em',
    // Fix IE 11 flexbox alignment. To remove at some point.
    maxHeight: '2em',
    alignItems: 'center',
    whiteSpace: 'nowrap'
  },

  /* Styles applied to the root element if `variant="filled"`. */
  filled: {
    '&$positionStart:not($hiddenLabel)': {
      marginTop: 16
    }
  },

  /* Styles applied to the root element if `position="start"`. */
  positionStart: {
    marginRight: 8
  },

  /* Styles applied to the root element if `position="end"`. */
  positionEnd: {
    marginLeft: 8
  },

  /* Styles applied to the root element if `disablePointerEvents=true`. */
  disablePointerEvents: {
    pointerEvents: 'none'
  },

  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */
  hiddenLabel: {},

  /* Styles applied if the adornment is used inside <FormControl margin="dense" />. */
  marginDense: {}
};
exports.styles = styles;
var InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(props, ref) {
  var children = props.children,
      classes = props.classes,
      className = props.className,
      _props$component = props.component,
      Component = _props$component === void 0 ? 'div' : _props$component,
      _props$disablePointer = props.disablePointerEvents,
      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,
      _props$disableTypogra = props.disableTypography,
      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
      position = props.position,
      variantProp = props.variant,
      other = (0, _objectWithoutProperties2.default)(props, ["children", "classes", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"]);
  var muiFormControl = (0, _FormControlContext.useFormControl)() || {};
  var variant = variantProp;

  if (variantProp && muiFormControl.variant) {
    if ("development" !== 'production') {
      if (variantProp === muiFormControl.variant) {
        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');
      }
    }
  }

  if (muiFormControl && !variant) {
    variant = muiFormControl.variant;
  }

  return /*#__PURE__*/React.createElement(_FormControlContext.default.Provider, {
    value: null
  }, /*#__PURE__*/React.createElement(Component, (0, _extends2.default)({
    className: (0, _clsx.default)(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, {
      'start': classes.positionStart,
      'end': classes.positionEnd
    }[position], muiFormControl.margin === 'dense' && classes.marginDense),
    ref: ref
  }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React.createElement(_Typography.default, {
    color: "textSecondary"
  }, children) : children));
});
"development" !== "production" ? InputAdornment.propTypes = {
  /**
   * The content of the component, normally an `IconButton` or string.
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: _propTypes.default.object.isRequired,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .elementType,

  /**
   * Disable pointer events on the root.
   * This allows for the content of the adornment to focus the input on click.
   */
  disablePointerEvents: _propTypes.default.bool,

  /**
   * If children is a string then disable wrapping in a Typography component.
   */
  disableTypography: _propTypes.default.bool,

  /**
   * @ignore
   */
  muiFormControl: _propTypes.default.object,

  /**
   * The position this adornment should appear relative to the `Input`.
   */
  position: _propTypes.default.oneOf(['start', 'end']),

  /**
   * The variant to use.
   * Note: If you are using the `TextField` component or the `FormControl` component
   * you do not have to set this manually.
   */
  variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled'])
} : void 0;

var _default = (0, _withStyles.default)(styles, {
  name: 'MuiInputAdornment'
})(InputAdornment);

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputAdornment/InputAdornment.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/permissions-connect/redirect/permissions-redirect.component.js", {"../../../components/ui/site-icon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/site-icon/index.js","../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/permissions-connect/redirect/permissions-redirect.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PermissionsRedirect;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _siteIcon = _interopRequireDefault(require("../../../components/ui/site-icon"));

var _i18n = require("../../../contexts/i18n");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function PermissionsRedirect({
  subjectMetadata
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "permissions-redirect"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "permissions-redirect__result"
  }, t('connecting'), /*#__PURE__*/_react.default.createElement("div", {
    className: "permissions-redirect__icons"
  }, /*#__PURE__*/_react.default.createElement(_siteIcon.default, {
    icon: subjectMetadata.iconUrl,
    name: subjectMetadata.name,
    size: 64
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "permissions-redirect__center-icon"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "permissions-redirect__check"
  }), renderBrokenLine()), /*#__PURE__*/_react.default.createElement(_siteIcon.default, {
    icon: "/images/logo/D-Wallet-Verti.svg",
    size: 64
  }))));

  function renderBrokenLine() {
    return /*#__PURE__*/_react.default.createElement("svg", {
      width: "131",
      height: "2",
      viewBox: "0 0 131 2",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/_react.default.createElement("path", {
      d: "M0 1H134",
      stroke: "#CDD1E4",
      strokeLinejoin: "round",
      strokeDasharray: "8 7"
    }));
  }
}

PermissionsRedirect.propTypes = {
  subjectMetadata: _propTypes.default.shape({
    extensionId: _propTypes.default.string,
    iconUrl: _propTypes.default.string,
    subjectType: _propTypes.default.string,
    name: _propTypes.default.string.isRequired,
    origin: _propTypes.default.string.isRequired
  })
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/permissions-connect/redirect/permissions-redirect.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/permissions-connect/choose-account/choose-account.js", {"../../../components/app/permissions-connect-footer":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-footer/index.js","../../../components/app/permissions-connect-header":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-header/index.js","../../../components/ui/account-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-list/index.js","../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/permissions-connect/choose-account/choose-account.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _permissionsConnectHeader = _interopRequireDefault(require("../../../components/app/permissions-connect-header"));

var _permissionsConnectFooter = _interopRequireDefault(require("../../../components/app/permissions-connect-footer"));

var _accountList = _interopRequireDefault(require("../../../components/ui/account-list"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ChooseAccount = ({
  selectedAccountAddresses,
  addressLastConnectedMap = {},
  accounts,
  selectAccounts,
  selectNewAccountViaModal,
  cancelPermissionsRequest,
  permissionsRequestId,
  targetSubjectMetadata,
  nativeCurrency
}) => {
  const [selectedAccounts, setSelectedAccounts] = (0, _react.useState)(selectedAccountAddresses);
  const t = (0, _useI18nContext.useI18nContext)();

  const handleAccountClick = address => {
    const newSelectedAccounts = new Set(selectedAccounts);

    if (newSelectedAccounts.has(address)) {
      newSelectedAccounts.delete(address);
    } else {
      newSelectedAccounts.add(address);
    }

    setSelectedAccounts(newSelectedAccounts);
  };

  const selectAll = () => {
    const newSelectedAccounts = new Set(accounts.map(account => account.address));
    setSelectedAccounts(newSelectedAccounts);
  };

  const deselectAll = () => {
    setSelectedAccounts(new Set());
  };

  const allAreSelected = () => {
    return accounts.length === selectedAccounts.size;
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "permissions-connect-choose-account"
  }, /*#__PURE__*/_react.default.createElement(_permissionsConnectHeader.default, {
    iconUrl: targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.iconUrl,
    iconName: targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.name,
    headerTitle: t('connectWithMetaMask'),
    headerText: accounts.length > 0 ? t('selectAccounts') : t('connectAccountOrCreate'),
    siteOrigin: targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.origin
  }), /*#__PURE__*/_react.default.createElement(_accountList.default, {
    accounts: accounts,
    selectNewAccountViaModal: selectNewAccountViaModal,
    addressLastConnectedMap: addressLastConnectedMap,
    nativeCurrency: nativeCurrency,
    selectedAccounts: selectedAccounts,
    allAreSelected: allAreSelected,
    deselectAll: deselectAll,
    selectAll: selectAll,
    handleAccountClick: handleAccountClick
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "permissions-connect-choose-account__footer-container"
  }, /*#__PURE__*/_react.default.createElement(_permissionsConnectFooter.default, null), /*#__PURE__*/_react.default.createElement("div", {
    className: "permissions-connect-choose-account__bottom-buttons"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => cancelPermissionsRequest(permissionsRequestId),
    type: "secondary"
  }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => selectAccounts(selectedAccounts),
    type: "primary",
    disabled: selectedAccounts.size === 0
  }, t('next')))));
};

ChooseAccount.propTypes = {
  /**
   * Array of user account objects
   */
  accounts: _propTypes.default.arrayOf(_propTypes.default.shape({
    address: _propTypes.default.string,
    addressLabel: _propTypes.default.string,
    lastConnectedDate: _propTypes.default.string,
    balance: _propTypes.default.string
  })).isRequired,

  /**
   * Function to select an account
   */
  selectAccounts: _propTypes.default.func.isRequired,

  /**
   * Function to select a new account via modal
   */
  selectNewAccountViaModal: _propTypes.default.func.isRequired,

  /**
   * Native currency of current chain
   */
  nativeCurrency: _propTypes.default.string.isRequired,

  /**
   * A map of the last connected addresses
   */
  addressLastConnectedMap: _propTypes.default.object,

  /**
   * Function to cancel permission request
   */
  cancelPermissionsRequest: _propTypes.default.func.isRequired,

  /**
   * Permission request Id
   */
  permissionsRequestId: _propTypes.default.string.isRequired,

  /**
   * Currently selected account addresses
   */
  selectedAccountAddresses: _propTypes.default.object.isRequired,

  /**
   * Domain data used to display site-origin pill
   */
  targetSubjectMetadata: _propTypes.default.shape({
    extensionId: _propTypes.default.string,
    iconUrl: _propTypes.default.string,
    name: _propTypes.default.string.isRequired,
    origin: _propTypes.default.string.isRequired,
    subjectType: _propTypes.default.string
  })
};
var _default = ChooseAccount;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/permissions-connect/choose-account/choose-account.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container.container.js", {"../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","./permission-page-container.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _permissionPageContainer = _interopRequireDefault(require("./permission-page-container.component"));

const mapStateToProps = (state, ownProps) => {
  const {
    selectedIdentities
  } = ownProps;
  const allIdentities = (0, _selectors.getMetaMaskIdentities)(state);
  const allIdentitiesSelected = Object.keys(selectedIdentities).length === Object.keys(allIdentities).length && selectedIdentities.length > 1;
  return {
    allIdentitiesSelected
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_permissionPageContainer.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container-content/index.js", {"./permission-page-container-content.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container-content/permission-page-container-content.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container-content/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionPageContainerContent.default;
  }
});

var _permissionPageContainerContent = _interopRequireDefault(require("./permission-page-container-content.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container-content/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/qr-hardware-sign-request/reader.js", {"../../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../base-reader":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/base-reader.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@keystonehq/bc-ur-registry-eth":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@keystonehq/bc-ur-registry-eth/dist/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","uuid":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/uuid/dist/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/qr-hardware-sign-request/reader.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _bcUrRegistryEth = require("@keystonehq/bc-ur-registry-eth");

var uuid = _interopRequireWildcard(require("uuid"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _baseReader = _interopRequireDefault(require("../base-reader"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Reader = ({
  submitQRHardwareSignature,
  cancelQRHardwareSignRequest,
  requestId,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();

  const cancel = () => {
    cancelQRHardwareSignRequest();
  };

  const handleSuccess = async ur => {
    if (ur.type === 'eth-signature') {
      const ethSignature = _bcUrRegistryEth.ETHSignature.fromCBOR(ur.cbor);

      const buffer = ethSignature.getRequestId();
      const signId = uuid.stringify(buffer);

      if (signId === requestId) {
        return await submitQRHardwareSignature(signId, ur.cbor.toString('hex'));
      }

      setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      throw new Error(t('QRHardwareMismatchedSignId'));
    } else {
      setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      throw new Error(t('unknownQrCode'));
    }
  };

  return /*#__PURE__*/_react.default.createElement(_baseReader.default, {
    isReadingWallet: false,
    handleCancel: cancel,
    handleSuccess: handleSuccess,
    setErrorTitle: setErrorTitle
  });
};

Reader.propTypes = {
  submitQRHardwareSignature: _propTypes.default.func.isRequired,
  cancelQRHardwareSignRequest: _propTypes.default.func.isRequired,
  requestId: _propTypes.default.string.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = Reader;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/qr-hardware-sign-request/reader.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/qr-hardware-sign-request/player.js", {"../../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../ui/box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/index.js","../../../ui/page-container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/index.js","../../../ui/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@ngraveio/bc-ur":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@ngraveio/bc-ur/dist/index.js","buffer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/browserify/node_modules/buffer/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","qrcode.react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/qrcode.react/lib/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/qr-hardware-sign-request/player.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _qrcode = _interopRequireDefault(require("qrcode.react"));

var _bcUr = require("@ngraveio/bc-ur");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _typography = _interopRequireDefault(require("../../../ui/typography"));

var _box = _interopRequireDefault(require("../../../ui/box"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _designSystem = require("../../../../helpers/constants/design-system");

var _pageContainer = require("../../../ui/page-container");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Player = ({
  type,
  cbor,
  cancelQRHardwareSignRequest,
  toRead
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const urEncoder = (0, _react.useMemo)(() => new _bcUr.UREncoder(new _bcUr.UR(Buffer.from(cbor, 'hex'), type), 400), [cbor, type]);
  const [currentQRCode, setCurrentQRCode] = (0, _react.useState)(urEncoder.nextPart());
  (0, _react.useEffect)(() => {
    const id = setInterval(() => {
      setCurrentQRCode(urEncoder.nextPart());
    }, 100);
    return () => {
      clearInterval(id);
    };
  }, [urEncoder]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('QRHardwareSignRequestSubtitle'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 4,
    paddingBottom: 4,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_qrcode.default, {
    value: currentQRCode.toUpperCase(),
    size: 250
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingBottom: 4,
    paddingLeft: 4,
    paddingRight: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('QRHardwareSignRequestDescription'))), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    onCancel: cancelQRHardwareSignRequest,
    onSubmit: toRead,
    cancelText: t('QRHardwareSignRequestCancel'),
    submitText: t('QRHardwareSignRequestGetSignature'),
    submitButtonType: "confirm"
  }));
};

Player.propTypes = {
  type: _propTypes.default.string.isRequired,
  cbor: _propTypes.default.string.isRequired,
  cancelQRHardwareSignRequest: _propTypes.default.func.isRequired,
  toRead: _propTypes.default.func.isRequired
};
var _default = Player;
exports.default = _default;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/qr-hardware-sign-request/player.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/base-reader.js", {"../../../../app/scripts/lib/util":"/home/clarisco/Desktop/metamask-extension-develop/app/scripts/lib/util.js","../../../../shared/constants/app":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/app.js","../../../../shared/constants/time":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/time.js","../../../helpers/utils/webcam-utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/webcam-utils.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../ui/page-container/page-container-footer/page-container-footer.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/page-container-footer/page-container-footer.component.js","./enhanced-reader":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/enhanced-reader.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@ngraveio/bc-ur":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@ngraveio/bc-ur/dist/index.js","loglevel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/loglevel/lib/loglevel.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/base-reader.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _bcUr = require("@ngraveio/bc-ur");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _util = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _webcamUtils = _interopRequireDefault(require("../../../helpers/utils/webcam-utils"));

var _pageContainerFooter = _interopRequireDefault(require("../../ui/page-container/page-container-footer/page-container-footer.component"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _time = require("../../../../shared/constants/time");

var _enhancedReader = _interopRequireDefault(require("./enhanced-reader"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const READY_STATE = {
  ACCESSING_CAMERA: 'ACCESSING_CAMERA',
  NEED_TO_ALLOW_ACCESS: 'NEED_TO_ALLOW_ACCESS',
  READY: 'READY'
};

const BaseReader = ({
  isReadingWallet,
  handleCancel,
  handleSuccess,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [ready, setReady] = (0, _react.useState)(READY_STATE.ACCESSING_CAMERA);
  const [error, setError] = (0, _react.useState)(null);
  const [urDecoder, setURDecoder] = (0, _react.useState)(new _bcUr.URDecoder());
  let permissionChecker = null;
  const mounted = (0, _react.useRef)(false);

  const reset = () => {
    setReady(READY_STATE.ACCESSING_CAMERA);
    setError(null);
    setURDecoder(new _bcUr.URDecoder());
  };

  const checkEnvironment = async () => {
    try {
      const {
        environmentReady
      } = await _webcamUtils.default.checkStatus();

      if (!environmentReady && (0, _util.getEnvironmentType)() !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
        const currentUrl = new URL(window.location.href);
        const currentHash = currentUrl.hash;
        const currentRoute = currentHash ? currentHash.substring(1) : null;
        global.platform.openExtensionInBrowser(currentRoute);
      }
    } catch (e) {
      if (mounted.current) {
        setError(e);
      }
    } // initial attempt is required to trigger permission prompt
    // eslint-disable-next-line no-use-before-define


    return initCamera();
  };

  const checkPermissions = async () => {
    try {
      const {
        permissions
      } = await _webcamUtils.default.checkStatus();

      if (permissions) {
        // Let the video stream load first...
        await new Promise(resolve => setTimeout(resolve, _time.SECOND * 2));

        if (!mounted.current) {
          return;
        }

        setReady(READY_STATE.READY);
      } else if (mounted.current) {
        // Keep checking for permissions
        permissionChecker = setTimeout(checkPermissions, _time.SECOND);
        setReady(READY_STATE.NEED_TO_ALLOW_ACCESS);
      }
    } catch (e) {
      if (mounted.current) {
        setError(e);
      }
    }
  };

  const handleScan = data => {
    try {
      if (!data) {
        return;
      }

      urDecoder.receivePart(data);

      if (urDecoder.isComplete()) {
        const result = urDecoder.resultUR();
        handleSuccess(result).catch(setError);
      }
    } catch (e) {
      if (isReadingWallet) {
        setErrorTitle(t('QRHardwareUnknownQRCodeTitle'));
      } else {
        setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      }

      setError(new Error(t('unknownQrCode')));
    }
  };

  const initCamera = () => {
    try {
      checkPermissions();
    } catch (e) {
      if (!mounted.current) {
        return;
      }

      if (e.name === 'NotAllowedError') {
        _loglevel.default.info(`Permission denied: '${e}'`);

        setReady(READY_STATE.NEED_TO_ALLOW_ACCESS);
      } else {
        setError(e);
      }
    }
  };

  (0, _react.useEffect)(() => {
    mounted.current = true;
    checkEnvironment();
    return () => {
      mounted.current = false;
      clearTimeout(permissionChecker);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _react.useEffect)(() => {
    if (ready === READY_STATE.READY) {
      initCamera();
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      checkPermissions();
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [ready]);

  const tryAgain = () => {
    clearTimeout(permissionChecker);
    reset();
    checkEnvironment();
  };

  const renderError = () => {
    let title, msg;

    if (error.type === 'NO_WEBCAM_FOUND') {
      title = t('noWebcamFoundTitle');
      msg = t('noWebcamFound');
    } else if (error.message === t('unknownQrCode')) {
      if (isReadingWallet) {
        msg = t('QRHardwareUnknownWalletQRCode');
      } else {
        msg = t('unknownQrCode');
      }
    } else if (error.message === t('QRHardwareMismatchedSignId')) {
      msg = t('QRHardwareMismatchedSignId');
    } else {
      title = t('unknownCameraErrorTitle');
      msg = t('unknownCameraError');
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__image"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/webcam.svg",
      width: "70",
      height: "70",
      alt: ""
    })), title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, title) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__error"
    }, msg), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: () => {
        setErrorTitle('');
        handleCancel();
      },
      onSubmit: () => {
        setErrorTitle('');
        tryAgain();
      },
      cancelText: t('cancel'),
      submitText: t('tryAgain'),
      submitButtonType: "confirm"
    }));
  };

  const renderVideo = () => {
    let message;

    if (ready === READY_STATE.ACCESSING_CAMERA) {
      message = t('accessingYourCamera');
    } else if (ready === READY_STATE.READY) {
      message = t('QRHardwareScanInstructions');
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      message = t('youNeedToAllowCameraAccess');
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content"
    }, /*#__PURE__*/_react.default.createElement(_enhancedReader.default, {
      handleScan: handleScan
    })), message && /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__status"
    }, message));
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-scanner"
  }, error ? renderError() : renderVideo());
};

BaseReader.propTypes = {
  isReadingWallet: _propTypes.default.bool.isRequired,
  handleCancel: _propTypes.default.func.isRequired,
  handleSuccess: _propTypes.default.func.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = BaseReader;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/base-reader.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/info-tooltip/info-tooltip-icon.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/info-tooltip/info-tooltip-icon.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InfoTooltipIcon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function InfoTooltipIcon({
  fillColor = '#b8b8b8'
}) {
  return /*#__PURE__*/_react.default.createElement("svg", {
    viewBox: "0 0 10 10",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M5 0C2.2 0 0 2.2 0 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 2c.4 0 .7.3.7.7s-.3.7-.7.7-.7-.2-.7-.6.3-.8.7-.8zm.7 6H4.3V4.3h1.5V8z",
    fill: fillColor
  }));
}

InfoTooltipIcon.propTypes = {
  fillColor: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/info-tooltip/info-tooltip-icon.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/tabs.component.js", {"@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/tabs.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class Tabs extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      activeTabIndex: Math.max(this._findChildByName(this.props.defaultActiveTabName), 0)
    });
  }

  handleTabClick(tabIndex, tabName) {
    const {
      onTabClick
    } = this.props;
    const {
      activeTabIndex
    } = this.state;

    if (tabIndex !== activeTabIndex) {
      this.setState({
        activeTabIndex: tabIndex
      }, () => {
        if (onTabClick) {
          onTabClick(tabName);
        }
      });
    }
  }

  renderTabs() {
    const numberOfTabs = _react.default.Children.count(this._getValidChildren());

    return _react.default.Children.map(this._getValidChildren(), (child, index) => {
      const tabName = child === null || child === void 0 ? void 0 : child.props.name;
      return child && /*#__PURE__*/_react.default.cloneElement(child, {
        onClick: idx => this.handleTabClick(idx, tabName),
        tabIndex: index,
        isActive: numberOfTabs > 1 && index === this.state.activeTabIndex
      });
    });
  }

  renderActiveTabContent() {
    const children = this._getValidChildren();

    const {
      activeTabIndex
    } = this.state;

    if (Array.isArray(children) && !children[activeTabIndex] || !Array.isArray(children) && activeTabIndex !== 0) {
      throw new Error(`Tab at index '${activeTabIndex}' does not exist`);
    }

    return children[activeTabIndex] ? children[activeTabIndex].props.children : children.props.children;
  }

  render() {
    const {
      tabsClassName
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "tabs"
    }, /*#__PURE__*/_react.default.createElement("ul", {
      className: (0, _classnames.default)('tabs__list', tabsClassName)
    }, this.renderTabs()), /*#__PURE__*/_react.default.createElement("div", {
      className: "tabs__content"
    }, this.renderActiveTabContent()));
  }
  /**
   * Returns the index of the child with the given name
   * @param {string} name - the name to search for
   * @returns {number} the index of the child with the given name
   * @private
   */


  _findChildByName(name) {
    return this._getValidChildren().findIndex(c => (c === null || c === void 0 ? void 0 : c.props.name) === name);
  } // This ignores any 'null' child elements that are a result of a conditional
  // based on a feature flag setting.


  _getValidChildren() {
    return _react.default.Children.toArray(this.props.children).filter(Boolean);
  }

}

exports.default = Tabs;
(0, _defineProperty2.default)(Tabs, "defaultProps", {
  defaultActiveTabName: null,
  onTabClick: null,
  tabsClassName: undefined
});
(0, _defineProperty2.default)(Tabs, "propTypes", {
  defaultActiveTabName: _propTypes.default.string,
  onTabClick: _propTypes.default.func,
  children: _propTypes.default.node.isRequired,
  tabsClassName: _propTypes.default.string
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/tabs.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/tab/index.js", {"./tab.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/tab/tab.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/tab/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tab = _interopRequireDefault(require("./tab.component"));

var _default = _tab.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/tab/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-search/token-search.component.js", {"../../../components/ui/text-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/text-field/index.js","../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@material-ui/core/InputAdornment":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputAdornment/index.js","fuse.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/fuse.js/dist/fuse.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-search/token-search.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fuse = _interopRequireDefault(require("fuse.js"));

var _InputAdornment = _interopRequireDefault(require("@material-ui/core/InputAdornment"));

var _textField = _interopRequireDefault(require("../../../components/ui/text-field"));

var _util = require("../../../helpers/utils/util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class TokenSearch extends _react.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "state", {
      searchQuery: ''
    });
    const {
      tokenList
    } = this.props;
    this.tokenList = Object.values(tokenList);
    this.tokenSearchFuse = new _fuse.default(this.tokenList, {
      shouldSort: true,
      threshold: 0.45,
      location: 0,
      distance: 100,
      maxPatternLength: 32,
      minMatchCharLength: 1,
      keys: [{
        name: 'name',
        weight: 0.5
      }, {
        name: 'symbol',
        weight: 0.5
      }]
    });
  }

  handleSearch(searchQuery) {
    this.setState({
      searchQuery
    });
    const fuseSearchResult = this.tokenSearchFuse.search(searchQuery);
    const addressSearchResult = this.tokenList.filter(token => {
      return token.address && searchQuery && (0, _util.isEqualCaseInsensitive)(token.address, searchQuery);
    });
    const results = [...addressSearchResult, ...fuseSearchResult];
    this.props.onSearch({
      searchQuery,
      results
    });
  }

  renderAdornment() {
    return /*#__PURE__*/_react.default.createElement(_InputAdornment.default, {
      position: "start",
      style: {
        marginRight: '12px'
      }
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/search.svg",
      width: "17",
      height: "17",
      alt: ""
    }));
  }

  render() {
    const {
      error
    } = this.props;
    const {
      searchQuery
    } = this.state;
    return /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: "search-tokens",
      placeholder: this.context.t('searchTokens'),
      type: "text",
      value: searchQuery,
      onChange: e => this.handleSearch(e.target.value),
      error: error,
      fullWidth: true,
      autoFocus: true,
      autoComplete: "off",
      startAdornment: this.renderAdornment()
    });
  }

}

exports.default = TokenSearch;
(0, _defineProperty2.default)(TokenSearch, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(TokenSearch, "defaultProps", {
  error: null
});
(0, _defineProperty2.default)(TokenSearch, "propTypes", {
  onSearch: _propTypes.default.func,
  error: _propTypes.default.string,
  tokenList: _propTypes.default.object
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-search/token-search.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-list/token-list.container.js", {"./token-list.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-list/token-list.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-list/token-list.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _tokenList = _interopRequireDefault(require("./token-list.component"));

const mapStateToProps = ({
  metamask
}) => {
  const {
    tokens,
    useTokenDetection
  } = metamask;
  return {
    tokens,
    useTokenDetection
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_tokenList.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-list/token-list.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js", {"./tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/tooltip.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tooltip.default;
  }
});

var _tooltip = _interopRequireDefault(require("./tooltip"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-list/index.js", {"./connected-accounts-list.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-list/connected-accounts-list.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-list/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedAccountsList.default;
  }
});

var _connectedAccountsList = _interopRequireDefault(require("./connected-accounts-list.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-list/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/deposit-ether-modal/deposit-ether-modal.component.js", {"../../../../../shared/constants/network":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/network.js","../../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/deposit-ether-modal/deposit-ether-modal.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _network = require("../../../../../shared/constants/network");

var _button = _interopRequireDefault(require("../../../ui/button"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class DepositEtherModal extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "goToAccountDetailsModal", () => {
      this.props.hideWarning();
      this.props.hideModal();
      this.props.showAccountDetailModal();
    });
  }

  renderRow({
    logo,
    title,
    text,
    buttonLabel,
    onButtonClick,
    hide,
    className,
    hideButton,
    hideTitle,
    onBackClick,
    showBackButton
  }) {
    if (hide) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: className || 'deposit-ether-modal__buy-row'
    }, onBackClick && showBackButton && /*#__PURE__*/_react.default.createElement("div", {
      className: "deposit-ether-modal__buy-row__back",
      onClick: onBackClick
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-arrow-left cursor-pointer"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "deposit-ether-modal__buy-row__logo-container"
    }, logo), /*#__PURE__*/_react.default.createElement("div", {
      className: "deposit-ether-modal__buy-row__description"
    }, !hideTitle && /*#__PURE__*/_react.default.createElement("div", {
      className: "deposit-ether-modal__buy-row__description__title"
    }, title), /*#__PURE__*/_react.default.createElement("div", {
      className: "deposit-ether-modal__buy-row__description__text"
    }, text)), !hideButton && /*#__PURE__*/_react.default.createElement("div", {
      className: "deposit-ether-modal__buy-row__button"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "deposit-ether-modal__deposit-button",
      large: true,
      onClick: onButtonClick
    }, buttonLabel)));
  }

  render() {
    const {
      chainId,
      toWyre,
      toTransak,
      toXanpool,
      toOnramp,
      address,
      toFaucet,
      isTestnet,
      isMainnet
    } = this.props;
    const networkName = _network.NETWORK_TO_NAME_MAP[chainId];
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container page-container--full-width page-container--full-height"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__title"
    }, this.context.t('depositEther')), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__subtitle"
    }, this.context.t('needEtherInWallet')), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__header-close",
      onClick: () => {
        this.props.hideWarning();
        this.props.hideModal();
      }
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "deposit-ether-modal__buy-rows"
    }, this.renderRow({
      logo: /*#__PURE__*/_react.default.createElement("div", {
        className: "deposit-ether-modal__logo",
        style: {
          backgroundImage: "url('./images/wyre.svg')",
          height: '40px'
        }
      }),
      title: this.context.t('buyWithWyre'),
      text: this.context.t('buyWithWyreDescription'),
      buttonLabel: this.context.t('continueToWyre'),
      onButtonClick: () => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Accounts',
            action: 'Deposit Ether',
            name: 'Click buy Ether via Wyre'
          }
        });
        toWyre(address);
      },
      hide: !isMainnet
    }), this.renderRow({
      logo: /*#__PURE__*/_react.default.createElement("div", {
        className: "deposit-ether-modal__logo",
        style: {
          backgroundImage: "url('./images/transak.svg')",
          height: '60px'
        }
      }),
      title: this.context.t('buyWithTransak'),
      text: this.context.t('buyWithTransakDescription'),
      buttonLabel: this.context.t('continueToTransak'),
      onButtonClick: () => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Accounts',
            action: 'Deposit Ether',
            name: 'Click buy Ether via Transak'
          }
        });
        toTransak(address);
      },
      hide: !isMainnet
    }),this.renderRow({
      logo: /*#__PURE__*/_react.default.createElement("div", {
        className: "deposit-ether-modal__logo",
        style: {
          backgroundImage: "url('./images/Xanpool-color-removebg-preview.png')",
          height: '60px'
        }
      }),
      title: this.context.t('buyWithXanpool'),
      text: this.context.t('buyWithXanpoolDescription'),
      buttonLabel: this.context.t('continueToXanpool'),
      onButtonClick: () => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Accounts',
            action: 'Deposit Ether',
            name: 'Click buy Ether via Transak'
          }
        });
        toXanpool(address);
      },
      hide: !isMainnet
    }),this.renderRow({
      logo: /*#__PURE__*/_react.default.createElement("div", {
        className: "deposit-ether-modal__logo",
        style: {
          backgroundImage: "url('./images/onramp.png')",
          height: '60px',
          backgroundColor:"#fff"
        }
      }),
      title: this.context.t('buyWithOnramp'),
      text: this.context.t('buyWithOnrampDescription'),
      buttonLabel: this.context.t('continueToOnramp'),
      onButtonClick: () => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Accounts',
            action: 'Deposit Ether',
            name: 'Click buy Ether via Transak'
          }
        });
        toOnramp(address);
      },
      hide: !isMainnet
    }), this.renderRow({
      logo: /*#__PURE__*/_react.default.createElement("img", {
        alt: "",
        className: "deposit-ether-modal__logo",
        src: "./images/deposit-eth.svg",
        style: {
          height: '75px',
          width: '75px'
        }
      }),
      title: this.context.t('directDepositEther'),
      text: this.context.t('directDepositEtherExplainer'),
      buttonLabel: this.context.t('viewAccount'),
      onButtonClick: () => this.goToAccountDetailsModal()
    }), networkName && this.renderRow({
      logo: /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-tint fa-2x"
      }),
      title: this.context.t('testFaucet'),
      text: this.context.t('getEtherFromFaucet', [networkName]),
      buttonLabel: this.context.t('getEther'),
      onButtonClick: () => toFaucet(chainId),
      hide: !isTestnet
    }))));
  }

}

exports.default = DepositEtherModal;
(0, _defineProperty2.default)(DepositEtherModal, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func.isRequired
});
(0, _defineProperty2.default)(DepositEtherModal, "propTypes", {
  chainId: _propTypes.default.string.isRequired,
  isTestnet: _propTypes.default.bool.isRequired,
  isMainnet: _propTypes.default.bool.isRequired,
  toWyre: _propTypes.default.func.isRequired,
  toTransak: _propTypes.default.func.isRequired,
  toXanpool:_propTypes.default.func.isRequired,
  toOnramp: _propTypes.default.func.isRequired,
  address: _propTypes.default.string.isRequired,
  toFaucet: _propTypes.default.func.isRequired,
  hideWarning: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  showAccountDetailModal: _propTypes.default.func.isRequired
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/deposit-ether-modal/deposit-ether-modal.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/qr-scanner/qr-scanner.component.js", {"../../../../../app/scripts/lib/util":"/home/clarisco/Desktop/metamask-extension-develop/app/scripts/lib/util.js","../../../../../shared/constants/app":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/app.js","../../../../../shared/constants/time":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/time.js","../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../../helpers/utils/webcam-utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/webcam-utils.js","../../../ui/page-container/page-container-footer/page-container-footer.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/page-container-footer/page-container-footer.component.js","../../../ui/spinner":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/spinner/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@zxing/library":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@zxing/library/umd/index.min.js","loglevel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/loglevel/lib/loglevel.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/qr-scanner/qr-scanner.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _library = require("@zxing/library");

var _util = require("../../../../../app/scripts/lib/util");

var _app = require("../../../../../shared/constants/app");

var _time = require("../../../../../shared/constants/time");

var _spinner = _interopRequireDefault(require("../../../ui/spinner"));

var _webcamUtils = _interopRequireDefault(require("../../../../helpers/utils/webcam-utils"));

var _util2 = require("../../../../helpers/utils/util");

var _pageContainerFooter = _interopRequireDefault(require("../../../ui/page-container/page-container-footer/page-container-footer.component"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const READY_STATE = {
  ACCESSING_CAMERA: 'ACCESSING_CAMERA',
  NEED_TO_ALLOW_ACCESS: 'NEED_TO_ALLOW_ACCESS',
  READY: 'READY'
};

class QrScanner extends _react.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "checkEnvironment", async () => {
      try {
        const {
          environmentReady
        } = await _webcamUtils.default.checkStatus();

        if (!environmentReady && (0, _util.getEnvironmentType)() !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
          const currentUrl = (0, _util2.getURL)(window.location.href);
          const currentHash = currentUrl === null || currentUrl === void 0 ? void 0 : currentUrl.hash;
          const currentRoute = currentHash ? currentHash.substring(1) : null;
          global.platform.openExtensionInBrowser(currentRoute);
        }
      } catch (error) {
        if (this.mounted) {
          this.setState({
            error
          });
        }
      } // initial attempt is required to trigger permission prompt


      this.initCamera();
    });
    (0, _defineProperty2.default)(this, "checkPermissions", async () => {
      try {
        const {
          permissions
        } = await _webcamUtils.default.checkStatus();

        if (permissions) {
          // Let the video stream load first...
          await new Promise(resolve => setTimeout(resolve, _time.SECOND * 2));

          if (!this.mounted) {
            return;
          }

          this.setState({
            ready: READY_STATE.READY
          });
        } else if (this.mounted) {
          // Keep checking for permissions
          this.permissionChecker = setTimeout(this.checkPermissions, _time.SECOND);
        }
      } catch (error) {
        if (this.mounted) {
          this.setState({
            error
          });
        }
      }
    });
    (0, _defineProperty2.default)(this, "initCamera", async () => {
      // The `decodeFromInputVideoDevice` call prompts the browser to show
      // the user the camera permission request.  We must then call it again
      // once we receive permission so that the video displays.
      // It's important to prevent this codeReader from being created twice;
      // Firefox otherwise starts 2 video streams, one of which cannot be stopped
      if (!this.codeReader) {
        this.codeReader = new _library.BrowserQRCodeReader();
      }

      try {
        await this.codeReader.getVideoInputDevices();
        this.checkPermissions();
        const content = await this.codeReader.decodeFromInputVideoDevice(undefined, 'video');
        const result = this.parseContent(content.text);

        if (!this.mounted) {
          return;
        } else if (result.type === 'unknown') {
          this.setState({
            error: new Error(this.context.t('unknownQrCode'))
          });
        } else {
          this.props.qrCodeDetected(result);
          this.stopAndClose();
        }
      } catch (error) {
        if (!this.mounted) {
          return;
        }

        if (error.name === 'NotAllowedError') {
          _loglevel.default.info(`Permission denied: '${error}'`);

          this.setState({
            ready: READY_STATE.NEED_TO_ALLOW_ACCESS
          });
        } else {
          this.setState({
            error
          });
        }
      }
    });
    (0, _defineProperty2.default)(this, "stopAndClose", () => {
      if (this.codeReader) {
        this.teardownCodeReader();
      }

      this.props.hideModal();
    });
    (0, _defineProperty2.default)(this, "tryAgain", () => {
      clearTimeout(this.permissionChecker);

      if (this.codeReader) {
        this.teardownCodeReader();
      }

      this.setState(this.getInitialState(), () => {
        this.checkEnvironment();
      });
    });
    this.state = this.getInitialState();
    this.codeReader = null;
    this.permissionChecker = null;
    this.mounted = false; // Clear pre-existing qr code data before scanning

    this.props.qrCodeDetected(null);
  }

  componentDidMount() {
    this.mounted = true;
    this.checkEnvironment();
  }

  componentDidUpdate(_, prevState) {
    const {
      ready
    } = this.state;

    if (prevState.ready !== ready) {
      if (ready === READY_STATE.READY) {
        this.initCamera();
      } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
        this.checkPermissions();
      }
    }
  }

  getInitialState() {
    return {
      ready: READY_STATE.ACCESSING_CAMERA,
      error: null
    };
  }

  componentWillUnmount() {
    this.mounted = false;
    clearTimeout(this.permissionChecker);
    this.teardownCodeReader();
  }

  teardownCodeReader() {
    if (this.codeReader) {
      this.codeReader.reset();
      this.codeReader.stop();
      this.codeReader = null;
    }
  }

  parseContent(content) {
    let type = 'unknown';
    let values = {}; // Here we could add more cases
    // To parse other type of links
    // For ex. EIP-681 (https://eips.ethereum.org/EIPS/eip-681)
    // Ethereum address links - fox ex. ethereum:0x.....1111

    if (content.split('ethereum:').length > 1) {
      type = 'address';
      values = {
        address: content.split('ethereum:')[1]
      }; // Regular ethereum addresses - fox ex. 0x.....1111
    } else if (content.substring(0, 2).toLowerCase() === '0x') {
      type = 'address';
      values = {
        address: content
      };
    }

    return {
      type,
      values
    };
  }

  renderError() {
    const {
      t
    } = this.context;
    const {
      error
    } = this.state;
    let title, msg;

    if (error.type === 'NO_WEBCAM_FOUND') {
      title = t('noWebcamFoundTitle');
      msg = t('noWebcamFound');
    } else if (error.message === t('unknownQrCode')) {
      msg = t('unknownQrCode');
    } else {
      title = t('unknownCameraErrorTitle');
      msg = t('unknownCameraError');
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__image"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/webcam.svg",
      width: "70",
      height: "70",
      alt: ""
    })), title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, title) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__error"
    }, msg), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: this.stopAndClose,
      onSubmit: this.tryAgain,
      cancelText: t('cancel'),
      submitText: t('tryAgain')
    }));
  }

  renderVideo() {
    const {
      t
    } = this.context;
    const {
      ready
    } = this.state;
    let message;

    if (ready === READY_STATE.ACCESSING_CAMERA) {
      message = t('accessingYourCamera');
    } else if (ready === READY_STATE.READY) {
      message = t('scanInstructions');
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      message = t('youNeedToAllowCameraAccess');
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, `${t('scanQrCode')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content__video-wrapper"
    }, /*#__PURE__*/_react.default.createElement("video", {
      id: "video",
      style: {
        display: ready === READY_STATE.READY ? 'block' : 'none'
      }
    }), ready === READY_STATE.READY ? null : /*#__PURE__*/_react.default.createElement(_spinner.default, {
      color: "#3ca7f2"
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__status"
    }, message));
  }

  render() {
    const {
      error
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__close",
      onClick: this.stopAndClose
    }), error ? this.renderError() : this.renderVideo());
  }

}

exports.default = QrScanner;
(0, _defineProperty2.default)(QrScanner, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  qrCodeDetected: _propTypes.default.func.isRequired
});
(0, _defineProperty2.default)(QrScanner, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/qr-scanner/qr-scanner.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/higher-order-components/with-modal-props/index.js", {"./with-modal-props":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/higher-order-components/with-modal-props/with-modal-props.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/higher-order-components/with-modal-props/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _withModalProps.default;
  }
});

var _withModalProps = _interopRequireDefault(require("./with-modal-props"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/higher-order-components/with-modal-props/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/confirm-remove-account/confirm-remove-account.component.js", {"../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@metamask/etherscan-link":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/etherscan-link/dist/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/confirm-remove-account/confirm-remove-account.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _etherscanLink = require("@metamask/etherscan-link");

var _modal = _interopRequireDefault(require("../../modal"));

var _util = require("../../../../helpers/utils/util");

var _identicon = _interopRequireDefault(require("../../../ui/identicon"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ConfirmRemoveAccount extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "handleRemove", () => {
      this.props.removeAccount(this.props.identity.address).then(() => this.props.hideModal());
    });
    (0, _defineProperty2.default)(this, "handleCancel", () => {
      this.props.hideModal();
    });
  }

  renderSelectedAccount() {
    const {
      t
    } = this.context;
    const {
      identity,
      rpcPrefs,
      chainId
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__identicon"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: identity.address,
      diameter: 32
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__name"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-remove-account__account__label"
    }, t('name')), /*#__PURE__*/_react.default.createElement("span", {
      className: "account_value"
    }, identity.name)), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__address"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-remove-account__account__label"
    }, t('publicAddress')), /*#__PURE__*/_react.default.createElement("span", {
      className: "account_value"
    }, (0, _util.addressSummary)(identity.address, 4, 4))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__link"
    }, /*#__PURE__*/_react.default.createElement("a", {
      className: "",
      onClick: () => {
        const accountLink = (0, _etherscanLink.getAccountLink)(identity.address, chainId, rpcPrefs);
        this.context.trackEvent({
          category: 'Accounts',
          event: 'Clicked Block Explorer Link',
          properties: {
            link_type: 'Account Tracker',
            action: 'Remove Account',
            block_explorer_domain: (0, _util.getURLHostName)(accountLink)
          }
        });
        global.platform.openTab({
          url: accountLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer",
      title: t('etherscanView')
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/popout.svg",
      alt: t('etherscanView')
    }))));
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      headerText: `${t('removeAccount')}?`,
      onClose: this.handleCancel,
      onSubmit: this.handleRemove,
      onCancel: this.handleCancel,
      submitText: t('remove'),
      cancelText: t('nevermind')
    }, /*#__PURE__*/_react.default.createElement("div", null, this.renderSelectedAccount(), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__description"
    }, t('removeAccountDescription'), /*#__PURE__*/_react.default.createElement("a", {
      className: "confirm-remove-account__link",
      rel: "noopener noreferrer",
      target: "_blank",
      href: "https://tawk.to/chat/6246d7a60bfe3f4a8770fce8/1fvibkpdo"
    }, t('learnMore')))));
  }

}

exports.default = ConfirmRemoveAccount;
(0, _defineProperty2.default)(ConfirmRemoveAccount, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  removeAccount: _propTypes.default.func.isRequired,
  identity: _propTypes.default.object.isRequired,
  chainId: _propTypes.default.string.isRequired,
  rpcPrefs: _propTypes.default.object.isRequired
});
(0, _defineProperty2.default)(ConfirmRemoveAccount, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/confirm-remove-account/confirm-remove-account.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/reject-transactions/reject-transactions.component.js", {"../../modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/reject-transactions/reject-transactions.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _modal = _interopRequireDefault(require("../../modal"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class RejectTransactionsModal extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onSubmit", async () => {
      const {
        onSubmit,
        hideModal
      } = this.props;
      await onSubmit();
      hideModal();
    });
  }

  render() {
    const {
      t
    } = this.context;
    const {
      hideModal,
      unapprovedTxCount
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      headerText: t('rejectTxsN', [unapprovedTxCount]),
      onClose: hideModal,
      onSubmit: this.onSubmit,
      onCancel: hideModal,
      submitText: t('rejectAll'),
      cancelText: t('cancel')
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "reject-transactions__description"
    }, t('rejectTxsDescription', [unapprovedTxCount]))));
  }

}

exports.default = RejectTransactionsModal;
(0, _defineProperty2.default)(RejectTransactionsModal, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
(0, _defineProperty2.default)(RejectTransactionsModal, "propTypes", {
  onSubmit: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  unapprovedTxCount: _propTypes.default.number.isRequired
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/reject-transactions/reject-transactions.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/confirm-reset-account/confirm-reset-account.component.js", {"../../modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/confirm-reset-account/confirm-reset-account.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _modal = _interopRequireWildcard(require("../../modal"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ConfirmResetAccount extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "handleReset", () => {
      this.props.resetAccount().then(() => this.props.hideModal());
    });
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleReset,
      onCancel: () => this.props.hideModal(),
      submitText: t('reset'),
      cancelText: t('nevermind'),
      submitType: "danger-primary"
    }, /*#__PURE__*/_react.default.createElement(_modal.ModalContent, {
      title: `${t('resetAccount')}?`,
      description: t('resetAccountDescription')
    }));
  }

}

exports.default = ConfirmResetAccount;
(0, _defineProperty2.default)(ConfirmResetAccount, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  resetAccount: _propTypes.default.func.isRequired
});
(0, _defineProperty2.default)(ConfirmResetAccount, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/confirm-reset-account/confirm-reset-account.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/metametrics-opt-in-modal/metametrics-opt-in-modal.component.js", {"../../../ui/metafox-logo":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/metafox-logo/index.js","../../../ui/page-container/page-container-footer":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/page-container-footer/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/metametrics-opt-in-modal/metametrics-opt-in-modal.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _metafoxLogo = _interopRequireDefault(require("../../../ui/metafox-logo"));

var _pageContainerFooter = _interopRequireDefault(require("../../../ui/page-container/page-container-footer"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class MetaMetricsOptInModal extends _react.Component {
  render() {
    const {
      metricsEvent,
      t
    } = this.context;
    const {
      setParticipateInMetaMetrics,
      hideModal
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in metametrics-opt-in-modal"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__main"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__content"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__body-graphic"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "/images/logo/D-Wallet-Verti.svg",
      alt: ""
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__title"
    }, t('metametricsHelpImproveMetaMask')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__description"
    }, t('metametricsOptInDescription')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__description"
    }, t('metametricsCommitmentsIntro')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__committments"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsAllowOptOut'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsSendAnonymizedEvents'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row metametrics-opt-in__break-row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverCollectKeysEtc', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverCollectKeys"
    }, t('metametricsCommitmentsBoldNever'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverCollectIP', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverCollectIP"
    }, t('metametricsCommitmentsBoldNever'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverSellDataForProfit', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverSellData"
    }, t('metametricsCommitmentsBoldNever'))]))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__bottom-text"
    }, t('gdprMessage', [/*#__PURE__*/_react.default.createElement("a", {
      key: "metametrics-bottom-text-wrapper",
      href: "https://d-wallet.io/privacypolicy",
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('gdprMessagePrivacyPolicy'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__footer"
    }, /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: () => {
        setParticipateInMetaMetrics(false).then(() => {
          metricsEvent({
            eventOpts: {
              category: 'Onboarding',
              action: 'Metrics Option',
              name: 'Metrics Opt Out'
            },
            isOptIn: true
          }, {
            excludeMetaMetricsId: true
          });
          hideModal();
        });
      },
      cancelText: t('noThanks'),
      hideCancel: false,
      onSubmit: () => {
        setParticipateInMetaMetrics(true).then(() => {
          metricsEvent({
            eventOpts: {
              category: 'Onboarding',
              action: 'Metrics Option',
              name: 'Metrics Opt In'
            },
            isOptIn: true
          });
          hideModal();
        });
      },
      submitText: t('affirmAgree'),
      disabled: false
    }))));
  }

}

exports.default = MetaMetricsOptInModal;
(0, _defineProperty2.default)(MetaMetricsOptInModal, "propTypes", {
  setParticipateInMetaMetrics: _propTypes.default.func,
  hideModal: _propTypes.default.func
});
(0, _defineProperty2.default)(MetaMetricsOptInModal, "contextTypes", {
  metricsEvent: _propTypes.default.func,
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/metametrics-opt-in-modal/metametrics-opt-in-modal.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/confirm-delete-network/confirm-delete-network.component.js", {"../../modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/confirm-delete-network/confirm-delete-network.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _modal = _interopRequireWildcard(require("../../modal"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ConfirmDeleteNetwork extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "handleDelete", () => {
      this.props.delRpcTarget(this.props.target).then(() => {
        this.props.onConfirm();
        this.props.hideModal();
      });
    });
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleDelete,
      onCancel: () => this.props.hideModal(),
      submitText: t('delete'),
      cancelText: t('cancel'),
      submitType: "danger-primary"
    }, /*#__PURE__*/_react.default.createElement(_modal.ModalContent, {
      title: t('deleteNetwork'),
      description: t('deleteNetworkDescription')
    }));
  }

}

exports.default = ConfirmDeleteNetwork;
(0, _defineProperty2.default)(ConfirmDeleteNetwork, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  delRpcTarget: _propTypes.default.func.isRequired,
  onConfirm: _propTypes.default.func.isRequired,
  target: _propTypes.default.string.isRequired
});
(0, _defineProperty2.default)(ConfirmDeleteNetwork, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/confirm-delete-network/confirm-delete-network.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/add-to-addressbook-modal/add-to-addressbook-modal.component.js", {"../../../ui/button/button.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/button.component.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/add-to-addressbook-modal/add-to-addressbook-modal.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../ui/button/button.component"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class AddToAddressBookModal extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      alias: ''
    });
    (0, _defineProperty2.default)(this, "onSave", async () => {
      const {
        recipient,
        addToAddressBook,
        hideModal
      } = this.props;
      await addToAddressBook(recipient, this.state.alias);
      hideModal();
    });
    (0, _defineProperty2.default)(this, "onChange", e => {
      this.setState({
        alias: e.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onKeyPress", async e => {
      if (e.key === 'Enter' && this.state.alias) {
        this.onSave();
      }
    });
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "add-to-address-book-modal"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "add-to-address-book-modal__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "add-to-address-book-modal__content__header"
    }, t('addToAddressBook')), /*#__PURE__*/_react.default.createElement("div", {
      className: "add-to-address-book-modal__input-label"
    }, t('enterAnAlias')), /*#__PURE__*/_react.default.createElement("input", {
      type: "text",
      className: "add-to-address-book-modal__input",
      placeholder: t('addToAddressBookModalPlaceholder'),
      onChange: this.onChange,
      onKeyPress: this.onKeyPress,
      value: this.state.alias,
      autoFocus: true
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "add-to-address-book-modal__footer"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      onClick: this.props.hideModal
    }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: this.onSave,
      disabled: !this.state.alias
    }, t('save'))));
  }

}

exports.default = AddToAddressBookModal;
(0, _defineProperty2.default)(AddToAddressBookModal, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(AddToAddressBookModal, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  addToAddressBook: _propTypes.default.func.isRequired,
  recipient: _propTypes.default.string.isRequired
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/add-to-addressbook-modal/add-to-addressbook-modal.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/edit-approval-permission/edit-approval-permission.component.js", {"../../../../helpers/utils/token-util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/token-util.js","../../../ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../../ui/text-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/text-field/index.js","../../modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","bignumber.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/bignumber.js/bignumber.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","loglevel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/loglevel/lib/loglevel.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/edit-approval-permission/edit-approval-permission.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _classnames = _interopRequireDefault(require("classnames"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _modal = _interopRequireDefault(require("../../modal"));

var _identicon = _interopRequireDefault(require("../../../ui/identicon"));

var _textField = _interopRequireDefault(require("../../../ui/text-field"));

var _tokenUtil = require("../../../../helpers/utils/token-util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const MAX_UNSIGNED_256_INT = new _bignumber.default(2).pow(256).minus(1).toString(10);

class EditApprovalPermission extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      // This is used as a TextField value, which should be a string.
      customSpendLimit: this.props.customTokenAmount || '',
      selectedOptionIsUnlimited: !this.props.customTokenAmount
    });
  }

  renderModalContent(error) {
    const {
      t
    } = this.context;
    const {
      hideModal,
      selectedIdentity,
      tokenAmount,
      tokenSymbol,
      tokenBalance,
      customTokenAmount,
      origin
    } = this.props;
    const {
      name,
      address
    } = selectedIdentity || {};
    const {
      selectedOptionIsUnlimited
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__title"
    }, t('editPermission')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__header__close",
      onClick: () => hideModal()
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__account"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: address,
      diameter: 32
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__name-and-balance-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__name"
    }, name), /*#__PURE__*/_react.default.createElement("div", null, t('balance')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__balance"
    }, `${Number(tokenBalance).toPrecision(9)} ${tokenSymbol}`)), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__title"
    }, t('spendLimitPermission')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__description"
    }, t('allowWithdrawAndSpend', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button",
      onClick: () => this.setState({
        selectedOptionIsUnlimited: true
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__radio-button-outline': !selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__radio-button-outline--selected': selectedOptionIsUnlimited
      })
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-fill"
    }), selectedOptionIsUnlimited && /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-dot"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-text"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__option-label': !selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__option-label--selected': selectedOptionIsUnlimited
      })
    }, new _bignumber.default(tokenAmount).equals(new _bignumber.default(MAX_UNSIGNED_256_INT)) ? t('unlimited') : t('proposedApprovalLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-description"
    }, t('spendLimitRequestedBy', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-value"
    }, `${Number(tokenAmount)} ${tokenSymbol}`))), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button",
      onClick: () => this.setState({
        selectedOptionIsUnlimited: false
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__radio-button-outline': selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__radio-button-outline--selected': !selectedOptionIsUnlimited
      })
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-fill"
    }), !selectedOptionIsUnlimited && /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-dot"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-text"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__option-label': selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__option-label--selected': !selectedOptionIsUnlimited
      })
    }, t('customSpendLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-description"
    }, t('enterMaxSpendLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-input"
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "number",
      placeholder: `${Number(customTokenAmount || tokenAmount)} ${tokenSymbol}`,
      onChange: event => {
        this.setState({
          customSpendLimit: event.target.value
        });

        if (selectedOptionIsUnlimited) {
          this.setState({
            selectedOptionIsUnlimited: false
          });
        }
      },
      fullWidth: true,
      margin: "dense",
      value: this.state.customSpendLimit,
      error: error
    }))))));
  }

  validateSpendLimit() {
    const {
      t
    } = this.context;
    const {
      decimals,
      requiredMinimum
    } = this.props;
    const {
      selectedOptionIsUnlimited,
      customSpendLimit
    } = this.state;

    if (selectedOptionIsUnlimited || !customSpendLimit) {
      return undefined;
    }

    let customSpendLimitNumber;

    try {
      customSpendLimitNumber = new _bignumber.default(customSpendLimit);
    } catch (error) {
      _loglevel.default.debug(`Error converting '${customSpendLimit}' to BigNumber:`, error);

      return t('spendLimitInvalid');
    }

    if (customSpendLimitNumber.isNegative()) {
      return t('spendLimitInvalid');
    }

    const maxTokenAmount = (0, _tokenUtil.calcTokenAmount)(MAX_UNSIGNED_256_INT, decimals);

    if (customSpendLimitNumber.greaterThan(maxTokenAmount)) {
      return t('spendLimitTooLarge');
    }

    if (requiredMinimum !== undefined && customSpendLimitNumber.lessThan(requiredMinimum)) {
      return t('spendLimitInsufficient');
    }

    return undefined;
  }

  render() {
    const {
      t
    } = this.context;
    const {
      setCustomAmount,
      hideModal,
      customTokenAmount
    } = this.props;
    const {
      selectedOptionIsUnlimited,
      customSpendLimit
    } = this.state;
    const error = this.validateSpendLimit();
    const disabled = Boolean(customSpendLimit === customTokenAmount && !selectedOptionIsUnlimited || error);
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: () => {
        setCustomAmount(selectedOptionIsUnlimited ? '' : customSpendLimit);
        hideModal();
      },
      submitText: t('save'),
      contentClass: "edit-approval-permission-modal-content",
      containerClass: "edit-approval-permission-modal-container",
      submitDisabled: disabled
    }, this.renderModalContent(error));
  }

}

exports.default = EditApprovalPermission;
(0, _defineProperty2.default)(EditApprovalPermission, "propTypes", {
  decimals: _propTypes.default.number,
  hideModal: _propTypes.default.func.isRequired,
  selectedIdentity: _propTypes.default.object,
  tokenAmount: _propTypes.default.string,
  customTokenAmount: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  tokenBalance: _propTypes.default.string,
  setCustomAmount: _propTypes.default.func,
  origin: _propTypes.default.string.isRequired,
  requiredMinimum: _propTypes.default.instanceOf(_bignumber.default)
});
(0, _defineProperty2.default)(EditApprovalPermission, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/edit-approval-permission/edit-approval-permission.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/new-account-modal/new-account-modal.component.js", {"../../../ui/button/button.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/button.component.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/new-account-modal/new-account-modal.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../ui/button/button.component"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class NewAccountModal extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      alias: this.context.t('newAccountNumberName', [this.props.newAccountNumber])
    });
    (0, _defineProperty2.default)(this, "onChange", e => {
      this.setState({
        alias: e.target.value
      });
    });
    (0, _defineProperty2.default)(this, "onSubmit", () => {
      this.props.onSave(this.state.alias).then(this.props.hideModal);
    });
    (0, _defineProperty2.default)(this, "onKeyPress", e => {
      if (e.key === 'Enter' && this.state.alias) {
        this.onSubmit();
      }
    });
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__content__header"
    }, t('newAccount'), /*#__PURE__*/_react.default.createElement("button", {
      className: "fas fa-times new-account-modal__content__header-close",
      title: t('close'),
      onClick: this.props.hideModal
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__input-label"
    }, t('accountName')), /*#__PURE__*/_react.default.createElement("input", {
      type: "text",
      className: "new-account-modal__input",
      onChange: this.onChange,
      onKeyPress: this.onKeyPress,
      value: this.state.alias,
      autoFocus: true
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__footer"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      onClick: this.props.hideModal
    }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: this.onSubmit,
      disabled: !this.state.alias
    }, t('save'))));
  }

}

exports.default = NewAccountModal;
(0, _defineProperty2.default)(NewAccountModal, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(NewAccountModal, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  newAccountNumber: _propTypes.default.number.isRequired,
  onSave: _propTypes.default.func.isRequired
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/new-account-modal/new-account-modal.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/transaction-confirmed/transaction-confirmed.component.js", {"../../modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/transaction-confirmed/transaction-confirmed.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _modal = _interopRequireDefault(require("../../modal"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class TransactionConfirmed extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "handleSubmit", () => {
      const {
        hideModal,
        onSubmit
      } = this.props;
      hideModal();

      if (onSubmit && typeof onSubmit === 'function') {
        onSubmit();
      }
    });
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleSubmit,
      submitText: t('ok')
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__content"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/check-icon.svg",
      alt: ""
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__title"
    }, `${t('confirmed')}!`), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__description"
    }, t('initialTransactionConfirmed'))));
  }

}

exports.default = TransactionConfirmed;
(0, _defineProperty2.default)(TransactionConfirmed, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(TransactionConfirmed, "propTypes", {
  onSubmit: _propTypes.default.func,
  hideModal: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/transaction-confirmed/transaction-confirmed.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/export-private-key-modal/export-private-key-modal.component.js", {"../../../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../ui/readonly-input":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/readonly-input/index.js","../account-modal-container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/account-modal-container/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","copy-to-clipboard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/copy-to-clipboard/index.js","ethereumjs-util":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethereumjs-util/dist.browser/index.js","loglevel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/loglevel/lib/loglevel.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/export-private-key-modal/export-private-key-modal.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _ethereumjsUtil = require("ethereumjs-util");

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _readonlyInput = _interopRequireDefault(require("../../../ui/readonly-input"));

var _button = _interopRequireDefault(require("../../../ui/button"));

var _accountModalContainer = _interopRequireDefault(require("../account-modal-container"));

var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ExportPrivateKeyModal extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      password: '',
      privateKey: null,
      showWarning: true
    });
    (0, _defineProperty2.default)(this, "exportAccountAndGetPrivateKey", (password, address) => {
      const {
        exportAccount
      } = this.props;
      exportAccount(password, address).then(privateKey => this.setState({
        privateKey,
        showWarning: false
      })).catch(e => _loglevel.default.error(e));
    });
  }

  componentWillUnmount() {
    this.props.clearAccountDetails();
    this.props.hideWarning();
  }

  renderPasswordLabel(privateKey) {
    return /*#__PURE__*/_react.default.createElement("span", {
      className: "export-private-key-modal__password-label"
    }, privateKey ? this.context.t('copyPrivateKey') : this.context.t('typePassword'));
  }

  renderPasswordInput(privateKey) {
    const plainKey = privateKey && (0, _ethereumjsUtil.stripHexPrefix)(privateKey);

    if (!privateKey) {
      return /*#__PURE__*/_react.default.createElement("input", {
        type: "password",
        className: "export-private-key-modal__password-input",
        onChange: event => this.setState({
          password: event.target.value
        })
      });
    }

    return /*#__PURE__*/_react.default.createElement(_readonlyInput.default, {
      wrapperClass: "export-private-key-modal__password-display-wrapper",
      inputClass: "export-private-key-modal__password-display-textarea",
      textarea: true,
      value: plainKey,
      onClick: () => (0, _copyToClipboard.default)(plainKey)
    });
  }

  renderButtons(privateKey, address, hideModal) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "export-private-key-modal__buttons"
    }, !privateKey && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "export-private-key-modal__button export-private-key-modal__button--cancel",
      onClick: () => hideModal()
    }, this.context.t('cancel')), privateKey ? /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: () => hideModal(),
      type: "primary",
      large: true,
      className: "export-private-key-modal__button"
    }, this.context.t('done')) : /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: () => this.exportAccountAndGetPrivateKey(this.state.password, address),
      type: "primary",
      large: true,
      className: "export-private-key-modal__button",
      disabled: !this.state.password
    }, this.context.t('confirm')));
  }

  render() {
    const {
      selectedIdentity,
      warning,
      showAccountDetailModal,
      hideModal,
      previousModalState
    } = this.props;
    const {
      name,
      address
    } = selectedIdentity;
    const {
      privateKey,
      showWarning
    } = this.state;
    return /*#__PURE__*/_react.default.createElement(_accountModalContainer.default, {
      className: "export-private-key-modal",
      selectedIdentity: selectedIdentity,
      showBackButton: previousModalState === 'ACCOUNT_DETAILS',
      backButtonAction: () => showAccountDetailModal()
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "export-private-key-modal__account-name"
    }, name), /*#__PURE__*/_react.default.createElement(_readonlyInput.default, {
      wrapperClass: "ellip-address-wrapper",
      value: (0, _hexstringUtils.toChecksumHexAddress)(address)
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "export-private-key-modal__divider"
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "export-private-key-modal__body-title"
    }, this.context.t('showPrivateKeys')), /*#__PURE__*/_react.default.createElement("div", {
      className: "export-private-key-modal__password"
    }, this.renderPasswordLabel(privateKey), this.renderPasswordInput(privateKey), showWarning && warning ? /*#__PURE__*/_react.default.createElement("span", {
      className: "export-private-key-modal__password--error"
    }, warning) : null), /*#__PURE__*/_react.default.createElement("div", {
      className: "export-private-key-modal__password--warning"
    }, this.context.t('privateKeyWarning')), this.renderButtons(privateKey, address, hideModal));
  }

}

exports.default = ExportPrivateKeyModal;
(0, _defineProperty2.default)(ExportPrivateKeyModal, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(ExportPrivateKeyModal, "defaultProps", {
  warning: null,
  previousModalState: null
});
(0, _defineProperty2.default)(ExportPrivateKeyModal, "propTypes", {
  exportAccount: _propTypes.default.func.isRequired,
  selectedIdentity: _propTypes.default.object.isRequired,
  warning: _propTypes.default.node,
  showAccountDetailModal: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  hideWarning: _propTypes.default.func.isRequired,
  clearAccountDetails: _propTypes.default.func.isRequired,
  previousModalState: _propTypes.default.string
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/export-private-key-modal/export-private-key-modal.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/index.js", {"./modal-content":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/modal-content/index.js","./modal.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/modal.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ModalContent", {
  enumerable: true,
  get: function () {
    return _modalContent.default;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _modal.default;
  }
});

var _modal = _interopRequireDefault(require("./modal.component"));

var _modalContent = _interopRequireDefault(require("./modal-content"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/account-details-modal/account-details-modal.component.js", {"../../../../helpers/utils/hardware":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/hardware.js","../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../ui/editable-label":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/editable-label/index.js","../../../ui/qr-code":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/qr-code/index.js","../account-modal-container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/account-modal-container/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@metamask/etherscan-link":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/etherscan-link/dist/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/account-details-modal/account-details-modal.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _etherscanLink = require("@metamask/etherscan-link");

var _accountModalContainer = _interopRequireDefault(require("../account-modal-container"));

var _qrCode = _interopRequireDefault(require("../../../ui/qr-code"));

var _editableLabel = _interopRequireDefault(require("../../../ui/editable-label"));

var _button = _interopRequireDefault(require("../../../ui/button"));

var _util = require("../../../../helpers/utils/util");

var _hardware = require("../../../../helpers/utils/hardware");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class AccountDetailsModal extends _react.Component {
  render() {
    const {
      selectedIdentity,
      chainId,
      showExportPrivateKeyModal,
      setAccountLabel,
      keyrings,
      rpcPrefs,
      accounts
    } = this.props;
    const {
      name,
      address
    } = selectedIdentity;
    const keyring = keyrings.find(kr => {
      return kr.accounts.includes(address);
    });

    const getAccountsNames = (allAccounts, currentName) => {
      return Object.values(allAccounts).map(item => item.name).filter(itemName => itemName !== currentName);
    };

    let exportPrivateKeyFeatureEnabled = true; // This feature is disabled for hardware wallets

    if ((0, _hardware.isHardwareKeyring)(keyring === null || keyring === void 0 ? void 0 : keyring.type)) {
      exportPrivateKeyFeatureEnabled = false;
    }

    return /*#__PURE__*/_react.default.createElement(_accountModalContainer.default, {
      className: "account-details-modal"
    }, /*#__PURE__*/_react.default.createElement(_editableLabel.default, {
      className: "account-details-modal__name",
      defaultValue: name,
      onSubmit: label => setAccountLabel(address, label),
      accountsNames: getAccountsNames(accounts, name)
    }), /*#__PURE__*/_react.default.createElement(_qrCode.default, {
      Qr: {
        data: address
      }
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "account-details-modal__divider"
    }), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "account-details-modal__button",
      onClick: () => {
        const accountLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);
        this.context.trackEvent({
          category: 'Navigation',
          event: 'Clicked Block Explorer Link',
          properties: {
            link_type: 'Account Tracker',
            action: 'Account Details Modal',
            block_explorer_domain: (0, _util.getURLHostName)(accountLink)
          }
        });
        global.platform.openTab({
          url: accountLink
        });
      }
    }, rpcPrefs.blockExplorerUrl ? this.context.t('blockExplorerView', [(0, _util.getURLHostName)(rpcPrefs.blockExplorerUrl)]) : this.context.t('etherscanViewOn')), exportPrivateKeyFeatureEnabled ? /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "account-details-modal__button",
      onClick: () => showExportPrivateKeyModal()
    }, this.context.t('exportPrivateKey')) : null);
  }

}

exports.default = AccountDetailsModal;
(0, _defineProperty2.default)(AccountDetailsModal, "propTypes", {
  selectedIdentity: _propTypes.default.object,
  chainId: _propTypes.default.string,
  showExportPrivateKeyModal: _propTypes.default.func,
  setAccountLabel: _propTypes.default.func,
  keyrings: _propTypes.default.array,
  rpcPrefs: _propTypes.default.object,
  accounts: _propTypes.default.array
});
(0, _defineProperty2.default)(AccountDetailsModal, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/account-details-modal/account-details-modal.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/gas-modal-page-container.component.js", {"../../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","../../../ui/page-container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/index.js","../../../ui/tabs":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/index.js","./advanced-tab-content":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/advanced-tab-content/index.js","./basic-tab-content":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/basic-tab-content/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/gas-modal-page-container.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _pageContainer = _interopRequireDefault(require("../../../ui/page-container"));

var _tabs = require("../../../ui/tabs");

var _actions = require("../../../../store/actions");

var _advancedTabContent = _interopRequireDefault(require("./advanced-tab-content"));

var _basicTabContent = _interopRequireDefault(require("./basic-tab-content"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class GasModalPageContainer extends _react.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "_beforeUnload", () => {
      this._isMounted = false;

      if (this.state.pollingToken) {
        (0, _actions.disconnectGasFeeEstimatePoller)(this.state.pollingToken);
        (0, _actions.removePollingTokenFromAppState)(this.state.pollingToken);
      }
    });
    this.state = {
      pollingToken: undefined
    };
  }

  componentDidMount() {
    this._isMounted = true;
    (0, _actions.getGasFeeEstimatesAndStartPolling)().then(pollingToken => {
      if (this._isMounted) {
        (0, _actions.addPollingTokenToAppState)(pollingToken);
        this.setState({
          pollingToken
        });
      } else {
        (0, _actions.disconnectGasFeeEstimatePoller)(pollingToken);
        (0, _actions.removePollingTokenFromAppState)(pollingToken);
      }
    });
    window.addEventListener('beforeunload', this._beforeUnload);
  }

  componentWillUnmount() {
    this._beforeUnload();

    window.removeEventListener('beforeunload', this._beforeUnload);
  }

  renderBasicTabContent(gasPriceButtonGroupProps) {
    return /*#__PURE__*/_react.default.createElement(_basicTabContent.default, {
      gasPriceButtonGroupProps: gasPriceButtonGroupProps
    });
  }

  renderAdvancedTabContent() {
    const {
      updateCustomGasPrice,
      updateCustomGasLimit,
      customModalGasPriceInHex,
      customModalGasLimitInHex,
      insufficientBalance,
      customPriceIsSafe,
      isSpeedUp,
      isRetry,
      customPriceIsExcessive,
      infoRowProps: {
        transactionFee
      }
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_advancedTabContent.default, {
      updateCustomGasPrice: updateCustomGasPrice,
      updateCustomGasLimit: updateCustomGasLimit,
      customModalGasPriceInHex: customModalGasPriceInHex,
      customModalGasLimitInHex: customModalGasLimitInHex,
      transactionFee: transactionFee,
      insufficientBalance: insufficientBalance,
      customPriceIsSafe: customPriceIsSafe,
      isSpeedUp: isSpeedUp,
      isRetry: isRetry,
      customPriceIsExcessive: customPriceIsExcessive
    });
  }

  renderInfoRows(newTotalFiat, newTotalEth, sendAmount, transactionFee) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row-wrapper"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row__send-info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__send-info__label"
    }, this.context.t('sendAmount')), /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__send-info__value"
    }, sendAmount)), /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row__transaction-info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__transaction-info__label"
    }, this.context.t('transactionFee')), /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__transaction-info__value"
    }, transactionFee)), /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row__total-info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__total-info__label"
    }, this.context.t('newTotal')), /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__total-info__value"
    }, newTotalEth)), /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row__fiat-total-info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__fiat-total-info__value"
    }, newTotalFiat))));
  }

  renderTabs() {
    const {
      gasPriceButtonGroupProps,
      hideBasic,
      infoRowProps: {
        newTotalFiat,
        newTotalEth,
        sendAmount,
        transactionFee
      }
    } = this.props;
    let tabsToRender;

    if (hideBasic) {
      tabsToRender = [{
        name: this.context.t('advanced'),
        content: this.renderAdvancedTabContent()
      }];
    } else {
      tabsToRender = [{
        name: this.context.t('basic'),
        content: this.renderBasicTabContent(gasPriceButtonGroupProps)
      }, {
        name: this.context.t('advanced'),
        content: this.renderAdvancedTabContent()
      }];
    }

    return /*#__PURE__*/_react.default.createElement(_tabs.Tabs, null, tabsToRender.map(({
      name,
      content
    }, i) => /*#__PURE__*/_react.default.createElement(_tabs.Tab, {
      name: name,
      key: `gas-modal-tab-${i}`
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content"
    }, content, this.renderInfoRows(newTotalFiat, newTotalEth, sendAmount, transactionFee)))));
  }

  render() {
    const {
      cancelAndClose,
      onSubmit,
      customModalGasPriceInHex,
      customModalGasLimitInHex,
      disableSave,
      isSpeedUp
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-page-container"
    }, /*#__PURE__*/_react.default.createElement(_pageContainer.default, {
      title: this.context.t('customGas'),
      subtitle: this.context.t('customGasSubTitle'),
      tabsComponent: this.renderTabs(),
      disabled: disableSave,
      onCancel: () => cancelAndClose(),
      onClose: () => cancelAndClose(),
      onSubmit: () => {
        if (isSpeedUp) {
          this.context.metricsEvent({
            eventOpts: {
              category: 'Navigation',
              action: 'Activity Log',
              name: 'Saved "Speed Up"'
            }
          });
        }

        onSubmit(customModalGasLimitInHex, customModalGasPriceInHex);
      },
      submitText: this.context.t('save'),
      headerCloseText: this.context.t('close'),
      hideCancel: true
    }));
  }

}

exports.default = GasModalPageContainer;
(0, _defineProperty2.default)(GasModalPageContainer, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(GasModalPageContainer, "propTypes", {
  hideBasic: _propTypes.default.bool,
  updateCustomGasPrice: _propTypes.default.func,
  updateCustomGasLimit: _propTypes.default.func,
  insufficientBalance: _propTypes.default.bool,
  gasPriceButtonGroupProps: _propTypes.default.object,
  infoRowProps: _propTypes.default.shape({
    originalTotalFiat: _propTypes.default.string,
    originalTotalEth: _propTypes.default.string,
    newTotalFiat: _propTypes.default.string,
    newTotalEth: _propTypes.default.string,
    sendAmount: _propTypes.default.string,
    transactionFee: _propTypes.default.string
  }),
  onSubmit: _propTypes.default.func,
  customModalGasPriceInHex: _propTypes.default.string,
  customModalGasLimitInHex: _propTypes.default.string,
  cancelAndClose: _propTypes.default.func,
  customPriceIsSafe: _propTypes.default.bool,
  isSpeedUp: _propTypes.default.bool,
  isRetry: _propTypes.default.bool,
  disableSave: _propTypes.default.bool,
  customPriceIsExcessive: _propTypes.default.bool.isRequired
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/gas-modal-page-container.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/cancel-transaction/cancel-transaction.component.js", {"../../../../../shared/constants/transaction":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/transaction.js","../../modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/index.js","./cancel-transaction-gas-fee":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/cancel-transaction/cancel-transaction-gas-fee/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/cancel-transaction/cancel-transaction.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _modal = _interopRequireDefault(require("../../modal"));

var _transaction = require("../../../../../shared/constants/transaction");

var _cancelTransactionGasFee = _interopRequireDefault(require("./cancel-transaction-gas-fee"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class CancelTransaction extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      busy: false
    });
    (0, _defineProperty2.default)(this, "handleSubmit", async () => {
      const {
        createCancelTransaction,
        hideModal
      } = this.props;
      this.setState({
        busy: true
      });
      await createCancelTransaction();
      this.setState({
        busy: false
      }, () => hideModal());
    });
    (0, _defineProperty2.default)(this, "handleCancel", () => {
      this.props.hideModal();
    });
  }

  componentDidUpdate() {
    const {
      transactionStatus,
      showTransactionConfirmedModal
    } = this.props;

    if (transactionStatus !== _transaction.TRANSACTION_STATUSES.SUBMITTED) {
      showTransactionConfirmedModal();
    }
  }

  render() {
    const {
      t
    } = this.context;
    const {
      newGasFee
    } = this.props;
    const {
      busy
    } = this.state;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      headerText: t('attemptToCancel'),
      onClose: this.handleCancel,
      onSubmit: this.handleSubmit,
      onCancel: this.handleCancel,
      submitText: t('yesLetsTry'),
      cancelText: t('nevermind'),
      submitDisabled: busy
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "cancel-transaction__title"
    }, t('cancellationGasFee')), /*#__PURE__*/_react.default.createElement("div", {
      className: "cancel-transaction__cancel-transaction-gas-fee-container"
    }, /*#__PURE__*/_react.default.createElement(_cancelTransactionGasFee.default, {
      value: newGasFee
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "cancel-transaction__description"
    }, t('attemptToCancelDescription'))));
  }

}

exports.default = CancelTransaction;
(0, _defineProperty2.default)(CancelTransaction, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(CancelTransaction, "propTypes", {
  createCancelTransaction: _propTypes.default.func,
  hideModal: _propTypes.default.func,
  showTransactionConfirmedModal: _propTypes.default.func,
  transactionStatus: _propTypes.default.string,
  newGasFee: _propTypes.default.string
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/cancel-transaction/cancel-transaction.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/swaps-gas-customization-modal/swaps-gas-customization-modal.component.js", {"../../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../components/app/gas-customization/advanced-gas-inputs":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/advanced-gas-inputs/index.js","../../../components/app/gas-customization/gas-modal-page-container/basic-tab-content":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/basic-tab-content/index.js","../../../components/ui/page-container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/index.js","../../../components/ui/tabs":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/index.js","../../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../send/send.utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send.utils.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/swaps-gas-customization-modal/swaps-gas-customization-modal.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _pageContainer = _interopRequireDefault(require("../../../components/ui/page-container"));

var _tabs = require("../../../components/ui/tabs");

var _send = require("../../send/send.utils");

var _conversions = require("../../../helpers/utils/conversions.util");

var _advancedGasInputs = _interopRequireDefault(require("../../../components/app/gas-customization/advanced-gas-inputs"));

var _basicTabContent = _interopRequireDefault(require("../../../components/app/gas-customization/gas-modal-page-container/basic-tab-content"));

var _common = require("../../../helpers/constants/common");

var _gas = require("../../../../shared/constants/gas");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class GasModalPageContainer extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      gasSpeedType: ''
    });
  }

  setGasSpeedType(gasEstimateType) {
    if (gasEstimateType === _common.GAS_ESTIMATE_TYPES.AVERAGE) {
      this.setState({
        gasSpeedType: 'average'
      });
    } else {
      this.setState({
        gasSpeedType: 'fast'
      });
    }
  }

  renderBasicTabContent(gasPriceButtonGroupProps) {
    return /*#__PURE__*/_react.default.createElement(_basicTabContent.default, {
      gasPriceButtonGroupProps: _objectSpread(_objectSpread({}, gasPriceButtonGroupProps), {}, {
        handleGasPriceSelection: ({
          gasPrice,
          gasEstimateType
        }) => {
          this.setGasSpeedType(gasEstimateType);
          this.props.setSwapsCustomizationModalPrice(gasPrice);
        }
      })
    });
  }

  renderAdvancedTabContent() {
    const {
      insufficientBalance,
      showCustomPriceTooLowWarning,
      infoRowProps: {
        transactionFee
      },
      customGasLimitMessage,
      setSwapsCustomizationModalPrice,
      setSwapsCustomizationModalLimit,
      customGasPrice,
      customGasLimit,
      minimumGasLimit
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "advanced-tab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "advanced-tab__transaction-data-summary"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "advanced-tab__transaction-data-summary__titles"
    }, /*#__PURE__*/_react.default.createElement("span", null, this.context.t('newTransactionFee'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "advanced-tab__transaction-data-summary__container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "advanced-tab__transaction-data-summary__fee"
    }, transactionFee))), /*#__PURE__*/_react.default.createElement("div", {
      className: "advanced-tab__fee-chart"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "advanced-tab__gas-inputs"
    }, /*#__PURE__*/_react.default.createElement(_advancedGasInputs.default, {
      updateCustomGasPrice: updatedPrice => {
        this.setState({
          gasSpeedType: _gas.CUSTOM_GAS_ESTIMATE
        });
        setSwapsCustomizationModalPrice(updatedPrice);
      },
      updateCustomGasLimit: updatedLimit => {
        this.setState({
          gasSpeedType: _gas.CUSTOM_GAS_ESTIMATE
        });
        setSwapsCustomizationModalLimit(updatedLimit);
      },
      customGasPrice: customGasPrice,
      customGasLimit: customGasLimit,
      insufficientBalance: insufficientBalance,
      customPriceIsSafe: !showCustomPriceTooLowWarning,
      customGasLimitMessage: customGasLimitMessage,
      minimumGasLimit: minimumGasLimit
    }))));
  }

  renderInfoRows(newTotalFiat, newTotalEth, sendAmount, transactionFee, extraInfoRow) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row-wrapper"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row__send-info",
      "data-testid": "gas-modal-content__info-row__send-info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__send-info__label"
    }, this.context.t('sendAmount')), /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__send-info__value"
    }, sendAmount)), /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row__transaction-info",
      "data-testid": "gas-modal-content__info-row__transaction-info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__transaction-info__label"
    }, this.context.t('transactionFee')), /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__transaction-info__value"
    }, transactionFee)), extraInfoRow && /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row__transaction-info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__transaction-info__label"
    }, extraInfoRow.label), /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__transaction-info__value"
    }, extraInfoRow.value)), /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row__total-info",
      "data-testid": "gas-modal-content__info-row__total-info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__total-info__label"
    }, this.context.t('newTotal')), /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__total-info__value"
    }, newTotalEth)), /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content__info-row__fiat-total-info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "gas-modal-content__info-row__fiat-total-info__value"
    }, newTotalFiat))));
  }

  renderTabs() {
    const {
      gasPriceButtonGroupProps,
      infoRowProps: {
        newTotalFiat,
        newTotalEth,
        sendAmount,
        transactionFee,
        extraInfoRow
      },
      gasEstimateLoadingHasFailed
    } = this.props;
    const basicTabInfo = {
      name: this.context.t('basic'),
      content: this.renderBasicTabContent(_objectSpread(_objectSpread({}, gasPriceButtonGroupProps), {}, {
        handleGasPriceSelection: this.props.setSwapsCustomizationModalPrice
      }))
    };
    const advancedTabInfo = {
      name: this.context.t('advanced'),
      content: this.renderAdvancedTabContent()
    };
    const tabsToRender = gasEstimateLoadingHasFailed ? [advancedTabInfo] : [basicTabInfo, advancedTabInfo];
    return /*#__PURE__*/_react.default.createElement(_tabs.Tabs, null, tabsToRender.map(({
      name,
      content
    }, i) => /*#__PURE__*/_react.default.createElement(_tabs.Tab, {
      name: name,
      key: `gas-modal-tab-${i}`
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-content"
    }, content, this.renderInfoRows(newTotalFiat, newTotalEth, sendAmount, transactionFee, extraInfoRow)))));
  }

  render() {
    const {
      cancelAndClose,
      onSubmit,
      disableSave,
      customGasPrice,
      customGasLimit
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-modal-page-container"
    }, /*#__PURE__*/_react.default.createElement(_pageContainer.default, {
      title: this.context.t('customGas'),
      subtitle: this.context.t('customGasSubTitle'),
      tabsComponent: this.renderTabs(),
      disabled: disableSave,
      onCancel: () => cancelAndClose(),
      onClose: () => cancelAndClose(),
      onSubmit: () => {
        var _sumHexWEIsToUnformat;

        const newSwapGasTotal = (0, _send.calcGasTotal)(customGasLimit, customGasPrice);
        this.context.trackEvent({
          event: 'Gas Fees Changed',
          category: 'swaps',
          properties: {
            speed_set: this.state.gasSpeedType,
            gas_fees: (_sumHexWEIsToUnformat = (0, _conversions.sumHexWEIsToUnformattedFiat)([newSwapGasTotal, this.props.customTotalSupplement], 'usd', this.props.usdConversionRate)) === null || _sumHexWEIsToUnformat === void 0 ? void 0 : _sumHexWEIsToUnformat.slice(1)
          }
        });
        onSubmit(customGasLimit, customGasPrice);
      },
      submitText: this.context.t('save'),
      headerCloseText: this.context.t('close'),
      hideCancel: true
    }));
  }

}

exports.default = GasModalPageContainer;
(0, _defineProperty2.default)(GasModalPageContainer, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(GasModalPageContainer, "propTypes", {
  insufficientBalance: _propTypes.default.bool,
  gasPriceButtonGroupProps: _propTypes.default.object,
  infoRowProps: _propTypes.default.shape({
    originalTotalFiat: _propTypes.default.string,
    originalTotalEth: _propTypes.default.string,
    newTotalFiat: _propTypes.default.string,
    newTotalEth: _propTypes.default.string,
    sendAmount: _propTypes.default.string,
    transactionFee: _propTypes.default.string,
    extraInfoRow: _propTypes.default.shape({
      label: _propTypes.default.string,
      value: _propTypes.default.string
    })
  }),
  onSubmit: _propTypes.default.func,
  cancelAndClose: _propTypes.default.func,
  showCustomPriceTooLowWarning: _propTypes.default.bool,
  disableSave: _propTypes.default.bool,
  customGasLimitMessage: _propTypes.default.string,
  customTotalSupplement: _propTypes.default.string,
  usdConversionRate: _propTypes.default.number,
  customGasPrice: _propTypes.default.string,
  customGasLimit: _propTypes.default.string,
  setSwapsCustomizationModalPrice: _propTypes.default.func,
  setSwapsCustomizationModalLimit: _propTypes.default.func,
  gasEstimateLoadingHasFailed: _propTypes.default.bool,
  minimumGasLimit: _propTypes.default.number.isRequired
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/swaps-gas-customization-modal/swaps-gas-customization-modal.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/first-time-flow-switch/first-time-flow-switch.container.js", {"./first-time-flow-switch.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/first-time-flow-switch/first-time-flow-switch.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/first-time-flow-switch/first-time-flow-switch.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _firstTimeFlowSwitch = _interopRequireDefault(require("./first-time-flow-switch.component"));

const mapStateToProps = ({
  metamask
}) => {
  const {
    completedOnboarding,
    isInitialized,
    isUnlocked,
    seedPhraseBackedUp
  } = metamask;
  return {
    completedOnboarding,
    isInitialized,
    isUnlocked,
    seedPhraseBackedUp
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_firstTimeFlowSwitch.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/first-time-flow-switch/first-time-flow-switch.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/select-action/select-action.container.js", {"../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./select-action.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/select-action/select-action.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/select-action/select-action.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _selectAction = _interopRequireDefault(require("./select-action.component"));

const mapStateToProps = state => {
  return {
    nextRoute: (0, _selectors.getFirstTimeFlowTypeRoute)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setFirstTimeFlowType: type => dispatch((0, _actions.setFirstTimeFlowType)(type))
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_selectAction.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/select-action/select-action.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/metametrics-opt-in/metametrics-opt-in.container.js", {"../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./metametrics-opt-in.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/metametrics-opt-in/metametrics-opt-in.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/metametrics-opt-in/metametrics-opt-in.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _metametricsOptIn = _interopRequireDefault(require("./metametrics-opt-in.component"));

const firstTimeFlowTypeNameMap = {
  create: 'Selected Create New Wallet',
  import: 'Selected Import Wallet'
};

const mapStateToProps = state => {
  const {
    firstTimeFlowType,
    participateInMetaMetrics
  } = state.metamask;
  return {
    nextRoute: (0, _selectors.getFirstTimeFlowTypeRoute)(state),
    firstTimeSelectionMetaMetricsName: firstTimeFlowTypeNameMap[firstTimeFlowType],
    participateInMetaMetrics
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setParticipateInMetaMetrics: val => dispatch((0, _actions.setParticipateInMetaMetrics)(val))
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_metametricsOptIn.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/metametrics-opt-in/metametrics-opt-in.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/welcome/welcome.container.js", {"../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./welcome.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/welcome/welcome.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/welcome/welcome.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _actions = require("../../../store/actions");

var _welcome = _interopRequireDefault(require("./welcome.component"));

const mapStateToProps = ({
  metamask
}) => {
  const {
    welcomeScreenSeen,
    participateInMetaMetrics
  } = metamask;
  return {
    welcomeScreenSeen,
    participateInMetaMetrics
  };
};

const mapDispatchToProps = dispatch => {
  return {
    closeWelcomeScreen: () => dispatch((0, _actions.closeWelcomeScreen)())
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_welcome.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/welcome/welcome.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/end-of-flow/end-of-flow.container.js", {"../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./end-of-flow.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/end-of-flow/end-of-flow.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/end-of-flow/end-of-flow.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _actions = require("../../../store/actions");

var _endOfFlow = _interopRequireDefault(require("./end-of-flow.component"));

const firstTimeFlowTypeNameMap = {
  create: 'New Wallet Created',
  import: 'New Wallet Imported'
};

const mapStateToProps = state => {
  const {
    metamask: {
      firstTimeFlowType
    }
  } = state;
  return {
    completionMetaMetricsName: firstTimeFlowTypeNameMap[firstTimeFlowType],
    onboardingInitiator: (0, _selectors.getOnboardingInitiator)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setCompletedOnboarding: () => dispatch((0, _actions.setCompletedOnboarding)())
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_endOfFlow.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/end-of-flow/end-of-flow.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/create-password.container.js", {"./create-password.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/create-password.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/create-password.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _createPassword = _interopRequireDefault(require("./create-password.component"));

const mapStateToProps = state => {
  const {
    metamask: {
      isInitialized
    }
  } = state;
  return {
    isInitialized
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_createPassword.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/create-password.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/seed-phrase.component.js", {"../../../components/ui/metafox-logo":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/metafox-logo/index.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","./confirm-seed-phrase":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/confirm-seed-phrase/index.js","./reveal-seed-phrase":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/reveal-seed-phrase/index.js","./seed-phrase-intro":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/seed-phrase-intro/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-dnd":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/index.js","react-dnd-html5-backend":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/seed-phrase.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _reactDndHtml5Backend = _interopRequireDefault(require("react-dnd-html5-backend"));

var _reactDnd = require("react-dnd");

var _routes = require("../../../helpers/constants/routes");

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _confirmSeedPhrase = _interopRequireDefault(require("./confirm-seed-phrase"));

var _revealSeedPhrase = _interopRequireDefault(require("./reveal-seed-phrase"));

var _seedPhraseIntro = _interopRequireDefault(require("./seed-phrase-intro"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SeedPhrase extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      verifiedSeedPhrase: ''
    });
  }

  componentDidMount() {
    const {
      seedPhrase,
      history,
      verifySeedPhrase
    } = this.props;

    if (!seedPhrase) {
      verifySeedPhrase().then(verifiedSeedPhrase => {
        if (verifiedSeedPhrase) {
          this.setState({
            verifiedSeedPhrase
          });
        } else {
          history.push(_routes.DEFAULT_ROUTE);
        }
      });
    }
  }

  render() {
    var _history$location;

    const {
      seedPhrase,
      history
    } = this.props;
    const {
      verifiedSeedPhrase
    } = this.state;
    const pathname = history === null || history === void 0 ? void 0 : (_history$location = history.location) === null || _history$location === void 0 ? void 0 : _history$location.pathname;
    const introClass = pathname === _routes.INITIALIZE_SEED_PHRASE_INTRO_ROUTE ? 'intro' : '';
    return /*#__PURE__*/_react.default.createElement(_reactDnd.DragDropContextProvider, {
      backend: _reactDndHtml5Backend.default
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: `first-time-flow__wrapper ${introClass}`
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_CONFIRM_SEED_PHRASE_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_confirmSeedPhrase.default, (0, _extends2.default)({}, routeProps, {
        seedPhrase: seedPhrase || verifiedSeedPhrase
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_SEED_PHRASE_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_revealSeedPhrase.default, (0, _extends2.default)({}, routeProps, {
        seedPhrase: seedPhrase || verifiedSeedPhrase
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_revealSeedPhrase.default, (0, _extends2.default)({}, routeProps, {
        seedPhrase: seedPhrase || verifiedSeedPhrase
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_SEED_PHRASE_INTRO_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_seedPhraseIntro.default, (0, _extends2.default)({}, routeProps, {
        seedPhrase: seedPhrase || verifiedSeedPhrase
      }))
    }))));
  }

}

exports.default = SeedPhrase;
(0, _defineProperty2.default)(SeedPhrase, "propTypes", {
  history: _propTypes.default.object,
  seedPhrase: _propTypes.default.string,
  verifySeedPhrase: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/seed-phrase.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/tab-bar/tab-bar.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/tab-bar/tab-bar.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

const TabBar = props => {
  const {
    tabs = [],
    onSelect,
    isActive
  } = props;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar"
  }, tabs.map(({
    key,
    content,
    description
  }) => /*#__PURE__*/_react.default.createElement("button", {
    key: key,
    className: (0, _classnames.default)('tab-bar__tab pointer', {
      'tab-bar__tab--active': isActive(key, content)
    }),
    onClick: () => onSelect(key)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar__tab__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar__tab__content__title"
  }, content), /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar__tab__content__description"
  }, description)), /*#__PURE__*/_react.default.createElement("div", {
    className: "tab-bar__tab__caret"
  }))));
};

TabBar.propTypes = {
  isActive: _propTypes.default.func.isRequired,
  tabs: _propTypes.default.array,
  onSelect: _propTypes.default.func
};
var _default = TabBar;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/tab-bar/tab-bar.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/alerts-tab/alerts-tab.js", {"../../../../shared/constants/alerts":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/alerts.js","../../../components/ui/toggle-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/toggle-button/index.js","../../../components/ui/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","../../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/alerts-tab/alerts-tab.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _alerts = require("../../../../shared/constants/alerts");

var _tooltip = _interopRequireDefault(require("../../../components/ui/tooltip"));

var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));

var _actions = require("../../../store/actions");

var _metamask = require("../../../ducks/metamask/metamask");

var _useI18nContext = require("../../../hooks/useI18nContext");

const AlertSettingsEntry = ({
  alertId,
  description,
  title
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const isEnabled = (0, _reactRedux.useSelector)(state => (0, _metamask.getAlertEnabledness)(state)[alertId]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", null, title), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: description,
    wrapperClassName: "alerts-tab__description"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-info-circle"
  })), /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
    offLabel: t('off'),
    onLabel: t('on'),
    onToggle: () => (0, _actions.setAlertEnabledness)(alertId, !isEnabled),
    value: isEnabled
  }));
};

AlertSettingsEntry.propTypes = {
  alertId: _propTypes.default.string.isRequired,
  description: _propTypes.default.string.isRequired,
  title: _propTypes.default.string.isRequired
};

const AlertsTab = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const alertConfig = {
    [_alerts.ALERT_TYPES.unconnectedAccount]: {
      title: t('alertSettingsUnconnectedAccount'),
      description: t('alertSettingsUnconnectedAccountDescription')
    },
    [_alerts.ALERT_TYPES.web3ShimUsage]: {
      title: t('alertSettingsWeb3ShimUsage'),
      description: t('alertSettingsWeb3ShimUsageDescription')
    }
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "alerts-tab__body"
  }, Object.entries(alertConfig).map(([alertId, {
    title,
    description
  }]) => /*#__PURE__*/_react.default.createElement(AlertSettingsEntry, {
    alertId: alertId,
    description: description,
    key: alertId,
    title: title
  })));
};

var _default = AlertsTab;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/alerts-tab/alerts-tab.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/info-tab/info-tab.component.js", {"../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../helpers/utils/build-types":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/build-types.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/info-tab/info-tab.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _buildTypes = require("../../../helpers/utils/build-types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class InfoTab extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      version: global.platform.getVersion()
    });
  }

  renderInfoLinks() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item settings-page__content-item--without-height"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__link-header"
    }, t('links')), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: "https://d-wallet.io/privacypolicy",
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('privacyMsg'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: "https://d-wallet.io/terms",
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('terms'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: "https://d-wallet.io/attributions",
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('attributions'))), /*#__PURE__*/_react.default.createElement("hr", {
      className: "info-tab__separator"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: "https://tawk.to/chat/6246d7a60bfe3f4a8770fce8/1fvibkpdo",
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('supportCenter'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: "https://d-wallet.io/",
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('visitWebSite'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__link-item"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      href: "https://tawk.to/chat/6246d7a60bfe3f4a8770fce8/1fvibkpdo",
      target: "_blank",
      rel: "noopener noreferrer",
      className: "info-tab__link-text"
    }, t('contactUs'))));
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item settings-page__content-item--without-height"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__version-header"
    }, (0, _buildTypes.isBeta)() ? t('betaMetamaskVersion') : t('metamaskVersion')), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__version-number"
    }, this.state.version)), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__about"
    }, t('builtAroundTheWorld')))), this.renderInfoLinks()), /*#__PURE__*/_react.default.createElement("div", {
      className: "info-tab__logo-wrapper"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "./images/info-logo.png",
      className: "info-tab__logo",
      alt: ""
    })));
  }

}

exports.default = InfoTab;
(0, _defineProperty2.default)(InfoTab, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/info-tab/info-tab.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/settings-tab/settings-tab.container.js", {"../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./settings-tab.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/settings-tab/settings-tab.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/settings-tab/settings-tab.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _settingsTab = _interopRequireDefault(require("./settings-tab.component"));

const mapStateToProps = (state, ownProps) => {
  const {
    appState: {
      warning
    },
    metamask
  } = state;
  const {
    currentCurrency,
    nativeCurrency,
    useBlockie,
    currentLocale
  } = metamask;
  const {
    useNativeCurrencyAsPrimaryCurrency,
    hideZeroBalanceTokens
  } = (0, _selectors.getPreferences)(state);
  const {
    lastFetchedConversionDate
  } = ownProps;
  return {
    warning,
    currentLocale,
    currentCurrency,
    nativeCurrency,
    useBlockie,
    useNativeCurrencyAsPrimaryCurrency,
    hideZeroBalanceTokens,
    lastFetchedConversionDate
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setCurrentCurrency: currency => dispatch((0, _actions.setCurrentCurrency)(currency)),
    setUseBlockie: value => dispatch((0, _actions.setUseBlockie)(value)),
    updateCurrentLocale: key => dispatch((0, _actions.updateCurrentLocale)(key)),
    setUseNativeCurrencyAsPrimaryCurrencyPreference: value => {
      return dispatch((0, _actions.setUseNativeCurrencyAsPrimaryCurrencyPreference)(value));
    },
    setParticipateInMetaMetrics: val => dispatch((0, _actions.setParticipateInMetaMetrics)(val)),
    setHideZeroBalanceTokens: value => dispatch((0, _actions.setHideZeroBalanceTokens)(value))
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_settingsTab.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/settings-tab/settings-tab.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/advanced-tab/advanced-tab.container.js", {"../../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./advanced-tab.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/advanced-tab/advanced-tab.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/advanced-tab/advanced-tab.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.mapDispatchToProps = exports.default = void 0;

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _metamask = require("../../../ducks/metamask/metamask");

var _advancedTab = _interopRequireDefault(require("./advanced-tab.component"));

const mapStateToProps = state => {
  const {
    appState: {
      warning
    },
    metamask
  } = state;
  const {
    featureFlags: {
      sendHexData,
      advancedInlineGas
    } = {},
    threeBoxSyncingAllowed,
    threeBoxDisabled,
    useNonceField,
    ipfsGateway,
    ledgerTransportType,
    dismissSeedBackUpReminder
  } = metamask;
  const {
    showFiatInTestnets,
    showTestNetworks,
    autoLockTimeLimit
  } = (0, _selectors.getPreferences)(state);
  const userHasALedgerAccount = (0, _metamask.doesUserHaveALedgerAccount)(state);
  return {
    warning,
    sendHexData,
    advancedInlineGas,
    showFiatInTestnets,
    showTestNetworks,
    autoLockTimeLimit,
    threeBoxSyncingAllowed,
    threeBoxDisabled,
    useNonceField,
    ipfsGateway,
    ledgerTransportType,
    dismissSeedBackUpReminder,
    userHasALedgerAccount
  };
};

exports.mapStateToProps = mapStateToProps;

const mapDispatchToProps = dispatch => {
  return {
    setHexDataFeatureFlag: shouldShow => dispatch((0, _actions.setFeatureFlag)('sendHexData', shouldShow)),
    displayWarning: warning => dispatch((0, _actions.displayWarning)(warning)),
    showResetAccountConfirmationModal: () => dispatch((0, _actions.showModal)({
      name: 'CONFIRM_RESET_ACCOUNT'
    })),
    setAdvancedInlineGasFeatureFlag: shouldShow => dispatch((0, _actions.setFeatureFlag)('advancedInlineGas', shouldShow)),
    setUseNonceField: value => dispatch((0, _actions.setUseNonceField)(value)),
    setShowFiatConversionOnTestnetsPreference: value => {
      return dispatch((0, _actions.setShowFiatConversionOnTestnetsPreference)(value));
    },
    setShowTestNetworks: value => {
      return dispatch((0, _actions.setShowTestNetworks)(value));
    },
    setAutoLockTimeLimit: value => {
      return dispatch((0, _actions.setAutoLockTimeLimit)(value));
    },
    setThreeBoxSyncingPermission: newThreeBoxSyncingState => {
      if (newThreeBoxSyncingState) {
        dispatch((0, _actions.turnThreeBoxSyncingOnAndInitialize)());
      } else {
        dispatch((0, _actions.setThreeBoxSyncingPermission)(newThreeBoxSyncingState));
      }
    },
    setIpfsGateway: value => {
      return dispatch((0, _actions.setIpfsGateway)(value));
    },
    setLedgerTransportPreference: value => {
      return dispatch((0, _actions.setLedgerTransportPreference)(value));
    },
    setDismissSeedBackUpReminder: value => {
      return dispatch((0, _actions.setDismissSeedBackUpReminder)(value));
    }
  };
};

exports.mapDispatchToProps = mapDispatchToProps;

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_advancedTab.default);

exports.default = _default;


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/advanced-tab/advanced-tab.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/security-tab/security-tab.container.js", {"../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./security-tab.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/security-tab/security-tab.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/security-tab/security-tab.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../../store/actions");

var _securityTab = _interopRequireDefault(require("./security-tab.component"));

const mapStateToProps = state => {
  const {
    appState: {
      warning
    },
    metamask
  } = state;
  const {
    featureFlags: {
      showIncomingTransactions
    } = {},
    participateInMetaMetrics,
    usePhishDetect
  } = metamask;
  return {
    warning,
    showIncomingTransactions,
    participateInMetaMetrics,
    usePhishDetect
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setParticipateInMetaMetrics: val => dispatch((0, _actions.setParticipateInMetaMetrics)(val)),
    setShowIncomingTransactionsFeatureFlag: shouldShow => dispatch((0, _actions.setFeatureFlag)('showIncomingTransactions', shouldShow)),
    setUsePhishDetect: val => dispatch((0, _actions.setUsePhishDetect)(val))
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_securityTab.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/security-tab/security-tab.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/experimental-tab/experimental-tab.container.js", {"../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./experimental-tab.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/experimental-tab/experimental-tab.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/experimental-tab/experimental-tab.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _experimentalTab = _interopRequireDefault(require("./experimental-tab.component"));

const mapStateToProps = state => {
  return {
    useTokenDetection: (0, _selectors.getUseTokenDetection)(state),
    useCollectibleDetection: (0, _selectors.getUseCollectibleDetection)(state),
    openSeaEnabled: (0, _selectors.getOpenSeaEnabled)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setUseTokenDetection: val => dispatch((0, _actions.setUseTokenDetection)(val)),
    setUseCollectibleDetection: val => dispatch((0, _actions.setUseCollectibleDetection)(val)),
    setOpenSeaEnabled: val => dispatch((0, _actions.setOpenSeaEnabled)(val))
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_experimentalTab.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/experimental-tab/experimental-tab.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/contact-list-tab.container.js", {"../../../../app/scripts/lib/util":"/home/clarisco/Desktop/metamask-extension-develop/app/scripts/lib/util.js","../../../../shared/constants/app":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/app.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","./contact-list-tab.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/contact-list-tab.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/contact-list-tab.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _selectors = require("../../../selectors");

var _app = require("../../../../shared/constants/app");

var _util = require("../../../../app/scripts/lib/util");

var _routes = require("../../../helpers/constants/routes");

var _contactListTab = _interopRequireDefault(require("./contact-list-tab.component"));

const mapStateToProps = (state, ownProps) => {
  const {
    location
  } = ownProps;
  const {
    pathname
  } = location;
  const pathNameTail = pathname.match(/[^/]+$/u)[0];
  const pathNameTailIsAddress = pathNameTail.includes('0x');
  const viewingContact = Boolean(pathname.match(_routes.CONTACT_VIEW_ROUTE));
  const editingContact = Boolean(pathname.match(_routes.CONTACT_EDIT_ROUTE));
  const addingContact = Boolean(pathname.match(_routes.CONTACT_ADD_ROUTE));

  const envIsPopup = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;

  const hideAddressBook = envIsPopup && (viewingContact || editingContact || addingContact);
  return {
    viewingContact,
    editingContact,
    addingContact,
    addressBook: (0, _selectors.getAddressBook)(state),
    selectedAddress: pathNameTailIsAddress ? pathNameTail : '',
    hideAddressBook,
    envIsPopup,
    showContactContent: !envIsPopup || hideAddressBook
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps))(_contactListTab.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/contact-list-tab.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab.js", {"../../../../app/scripts/lib/util":"/home/clarisco/Desktop/metamask-extension-develop/app/scripts/lib/util.js","../../../../shared/constants/app":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/app.js","../../../../shared/constants/network":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/network.js","../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./networks-form":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-form/index.js","./networks-tab-content":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab-content/index.js","./networks-tab-subheader":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab-subheader/index.js","./networks-tab.constants":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab.constants.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _routes = require("../../../helpers/constants/routes");

var _actions = require("../../../store/actions");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _util = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _selectors = require("../../../selectors");

var _network = require("../../../../shared/constants/network");

var _networksTab = require("./networks-tab.constants");

var _networksTabContent = _interopRequireDefault(require("./networks-tab-content"));

var _networksForm = _interopRequireDefault(require("./networks-form"));

var _networksTabSubheader = _interopRequireDefault(require("./networks-tab-subheader"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const defaultNetworks = _networksTab.defaultNetworksData.map(network => _objectSpread(_objectSpread({}, network), {}, {
  viewOnly: true
}));

const NetworksTab = ({
  addNewNetwork
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    pathname
  } = (0, _reactRouterDom.useLocation)();
  const environmentType = (0, _util.getEnvironmentType)();
  const isFullScreen = environmentType === _app.ENVIRONMENT_TYPE_FULLSCREEN;
  const shouldRenderNetworkForm = isFullScreen || Boolean(pathname.match(_routes.NETWORKS_FORM_ROUTE));
  const frequentRpcListDetail = (0, _reactRedux.useSelector)(_selectors.getFrequentRpcListDetail);
  const provider = (0, _reactRedux.useSelector)(_selectors.getProvider);
  const networksTabSelectedRpcUrl = (0, _reactRedux.useSelector)(_selectors.getNetworksTabSelectedRpcUrl);
  const frequentRpcNetworkListDetails = frequentRpcListDetail.map(rpc => {
    var _rpc$rpcPrefs;

    return {
      label: rpc.nickname,
      iconColor: '#6A737D',
      providerType: _network.NETWORK_TYPE_RPC,
      rpcUrl: rpc.rpcUrl,
      chainId: rpc.chainId,
      ticker: rpc.ticker,
      blockExplorerUrl: ((_rpc$rpcPrefs = rpc.rpcPrefs) === null || _rpc$rpcPrefs === void 0 ? void 0 : _rpc$rpcPrefs.blockExplorerUrl) || ''
    };
  });
  const networksToRender = [...defaultNetworks, ...frequentRpcNetworkListDetails];
  let selectedNetwork = networksToRender.find(network => network.rpcUrl === networksTabSelectedRpcUrl) || {};
  const networkIsSelected = Boolean(selectedNetwork.rpcUrl);
  let networkDefaultedToProvider = false;

  if (!networkIsSelected) {
    selectedNetwork = networksToRender.find(network => {
      return network.rpcUrl === provider.rpcUrl || network.providerType !== _network.NETWORK_TYPE_RPC && network.providerType === provider.type;
    }) || {};
    networkDefaultedToProvider = true;
  }

  (0, _react.useEffect)(() => {
    return () => {
      dispatch((0, _actions.setSelectedSettingsRpcUrl)(''));
    };
  }, [dispatch]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "networks-tab__body"
  }, isFullScreen ? /*#__PURE__*/_react.default.createElement(_networksTabSubheader.default, {
    addNewNetwork: addNewNetwork
  }) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: "networks-tab__content"
  }, addNewNetwork ? /*#__PURE__*/_react.default.createElement(_networksForm.default, {
    networksToRender: networksToRender,
    addNewNetwork: addNewNetwork
  }) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_networksTabContent.default, {
    networkDefaultedToProvider: networkDefaultedToProvider,
    networkIsSelected: networkIsSelected,
    networksToRender: networksToRender,
    providerUrl: provider.rpcUrl,
    selectedNetwork: selectedNetwork,
    shouldRenderNetworkForm: shouldRenderNetworkForm
  }), !isFullScreen && !shouldRenderNetworkForm ? /*#__PURE__*/_react.default.createElement("div", {
    className: "networks-tab__networks-list-popup-footer"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: event => {
      event.preventDefault();
      global.platform.openExtensionInBrowser(_routes.ADD_NETWORK_ROUTE);
    }
  }, t('addNetwork'))) : null)));
};

NetworksTab.propTypes = {
  addNewNetwork: _propTypes.default.bool
};
var _default = NetworksTab;
exports.default = _default;


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/swaps-footer/swaps-footer.js", {"../../../components/ui/page-container/page-container-footer":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/page-container-footer/index.js","../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/swaps-footer/swaps-footer.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapsFooter;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("../../../contexts/i18n");

var _pageContainerFooter = _interopRequireDefault(require("../../../components/ui/page-container/page-container-footer"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SwapsFooter({
  onCancel,
  hideCancel,
  onSubmit,
  submitText,
  disabled,
  showTermsOfService,
  showTopBorder,
  className = ''
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps-footer"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('swaps-footer__buttons', className, {
      'swaps-footer__buttons--border': showTopBorder
    })
  }, /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
    onCancel: onCancel,
    hideCancel: hideCancel,
    cancelText: t('back'),
    onSubmit: onSubmit,
    submitText: submitText,
    footerClassName: (0, _classnames.default)('swaps-footer__custom-page-container-footer-class', className),
    footerButtonClassName: (0, _classnames.default)('swaps-footer__custom-page-container-footer-button-class', {
      'swaps-footer__custom-page-container-footer-button-class--single': hideCancel
    }),
    disabled: disabled
  })), showTermsOfService && /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps-footer__bottom-text",
    onClick: () => global.platform.openTab({
      url: 'https://d-wallet.io/terms'
    })
  }, t('termsOfService')));
}

SwapsFooter.propTypes = {
  onCancel: _propTypes.default.func,
  hideCancel: _propTypes.default.bool,
  onSubmit: _propTypes.default.func.isRequired,
  submitText: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  showTermsOfService: _propTypes.default.bool,
  showTopBorder: _propTypes.default.bool,
  className: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/swaps-footer/swaps-footer.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/pulse-loader/pulse-loader.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/pulse-loader/pulse-loader.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PulseLoader;

var _react = _interopRequireDefault(require("react"));

function PulseLoader() {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "pulse-loader"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "pulse-loader__loading-dot-one"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "pulse-loader__loading-dot-two"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "pulse-loader__loading-dot-three"
  }));
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/pulse-loader/pulse-loader.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/awaiting-swap/view-on-ether-scan-link/view-on-ether-scan-link.js", {"../../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../../hooks/useMetricEvent":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useMetricEvent.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/awaiting-swap/view-on-ether-scan-link/view-on-ether-scan-link.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ViewOnEtherScanLink;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("../../../../contexts/i18n");

var _useMetricEvent = require("../../../../hooks/useMetricEvent");

var _util = require("../../../../helpers/utils/util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ViewOnEtherScanLink({
  txHash,
  blockExplorerUrl,
  isCustomBlockExplorerUrl
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const blockExplorerLinkClickedEvent = (0, _useMetricEvent.useNewMetricEvent)({
    category: 'Swaps',
    event: 'Clicked Block Explorer Link',
    properties: {
      link_type: 'Transaction Block Explorer',
      action: 'Swap Transaction',
      block_explorer_domain: (0, _util.getURLHostName)(blockExplorerUrl)
    }
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('awaiting-swap__view-on-etherscan', {
      'awaiting-swap__view-on-etherscan--visible': txHash,
      'awaiting-swap__view-on-etherscan--invisible': !txHash
    }),
    onClick: () => {
      blockExplorerLinkClickedEvent();
      global.platform.openTab({
        url: blockExplorerUrl
      });
    }
  }, isCustomBlockExplorerUrl ? t('viewOnCustomBlockExplorer', [t('blockExplorerSwapAction'), (0, _util.getURLHostName)(blockExplorerUrl)]) : t('viewOnEtherscan', [t('blockExplorerSwapAction')]));
}

ViewOnEtherScanLink.propTypes = {
  txHash: _propTypes.default.string,
  blockExplorerUrl: _propTypes.default.string,
  isCustomBlockExplorerUrl: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/awaiting-swap/view-on-ether-scan-link/view-on-ether-scan-link.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/dropdown-input-pair/dropdown-input-pair.js", {"../../../components/ui/text-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/text-field/index.js","../dropdown-search-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/dropdown-search-list/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/dropdown-input-pair/dropdown-input-pair.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DropdownInputPair;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dropdownSearchList = _interopRequireDefault(require("../dropdown-search-list"));

var _textField = _interopRequireDefault(require("../../../components/ui/text-field"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const characterWidthMap = {
  1: 5.86,
  2: 10.05,
  3: 10.45,
  4: 11.1,
  5: 10,
  6: 10.06,
  7: 9.17,
  8: 10.28,
  9: 10.06,
  0: 11.22,
  '.': 4.55
};

const getInputWidth = value => {
  const valueString = String(value);
  const charArray = valueString.split('');
  return charArray.reduce((inputWidth, _char) => inputWidth + characterWidthMap[_char], 12);
};

function DropdownInputPair({
  itemsToSearch = [],
  onInputChange,
  inputValue = '',
  onSelect,
  leftValue,
  selectedItem,
  SearchListPlaceholder,
  maxListItems,
  selectPlaceHolderText,
  loading,
  hideItemIf,
  listContainerClassName,
  autoFocus
}) {
  const [isOpen, setIsOpen] = (0, _react.useState)(false);

  const open = () => setIsOpen(true);

  const close = () => setIsOpen(false);

  const inputRef = (0, _react.useRef)();

  const onTextFieldChange = event => {
    event.stopPropagation(); // Automatically prefix value with 0. if user begins typing .

    const valueToUse = event.target.value === '.' ? '0.' : event.target.value; // Regex that validates strings with only numbers, 'x.', '.x', and 'x.x'

    const regexp = /^(\.\d+|\d+(\.\d+)?|\d+\.)$/u; // If the value is either empty or contains only numbers and '.' and only has one '.', update input to match

    if (valueToUse === '' || regexp.test(valueToUse)) {
      onInputChange(valueToUse);
    } else {
      // otherwise, use the previously set inputValue (effectively denying the user from inputting the last char)
      // or an empty string if we do not yet have an inputValue
      onInputChange(inputValue || '');
    }
  };

  const [applyTwoLineStyle, setApplyTwoLineStyle] = (0, _react.useState)(null);
  (0, _react.useEffect)(() => {
    var _inputRef$current, _inputRef$current$get;

    setApplyTwoLineStyle(((inputRef === null || inputRef === void 0 ? void 0 : (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : (_inputRef$current$get = _inputRef$current.getBoundingClientRect()) === null || _inputRef$current$get === void 0 ? void 0 : _inputRef$current$get.width) || 0) + getInputWidth(inputValue || '') > 137);
  }, [inputValue, inputRef]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-input-pair"
  }, /*#__PURE__*/_react.default.createElement(_dropdownSearchList.default, {
    itemsToSearch: itemsToSearch,
    SearchListPlaceholder: SearchListPlaceholder,
    fuseSearchKeys: [{
      name: 'name',
      weight: 0.499
    }, {
      name: 'symbol',
      weight: 0.499
    }, {
      name: 'address',
      weight: 0.002
    }],
    maxListItems: maxListItems,
    onOpen: open,
    onClose: close,
    onSelect: onSelect,
    className: isOpen ? 'dropdown-input-pair__list--full-width' : '',
    externallySelectedItem: selectedItem,
    selectPlaceHolderText: selectPlaceHolderText,
    selectorClosedClassName: "dropdown-input-pair__selector--closed",
    listContainerClassName: listContainerClassName,
    loading: loading,
    hideItemIf: hideItemIf,
    defaultToAll: true
  }), !isOpen && /*#__PURE__*/_react.default.createElement(_textField.default, {
    className: (0, _classnames.default)('dropdown-input-pair__input', {
      'dropdown-input-pair__two-line-input': applyTwoLineStyle
    }),
    type: "text",
    placeholder: "0",
    onChange: onTextFieldChange,
    fullWidth: true,
    margin: "dense",
    value: inputValue,
    autoFocus: autoFocus
  }), !isOpen && leftValue && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('dropdown-input-pair__left-value', {
      'dropdown-input-pair__left-value--two-lines': applyTwoLineStyle
    }),
    ref: inputRef
  }, "\u2248 ", leftValue));
}

DropdownInputPair.propTypes = {
  /**
   * Give items data for the component
   */
  itemsToSearch: _propTypes.default.array,

  /**
   * Handler for input change
   */
  onInputChange: _propTypes.default.func,

  /**
   * Show input value content
   */
  inputValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Handler for onSelect
   */
  onSelect: _propTypes.default.func,

  /**
   * Set value to left
   */
  leftValue: _propTypes.default.string,

  /**
   * Show selected item
   */
  selectedItem: _propTypes.default.object,

  /**
   * Doesn't look like this is used
   */
  SearchListPlaceholder: _propTypes.default.func,

  /**
   * Define maximum item per list
   */
  maxListItems: _propTypes.default.number,

  /**
   * Show select placeholder text
   */
  selectPlaceHolderText: _propTypes.default.string,

  /**
   * Check if the component is loading
   */
  loading: _propTypes.default.bool,

  /**
   * Handler for hide item
   */
  hideItemIf: _propTypes.default.func,

  /**
   * Add custom CSS class for list container
   */
  listContainerClassName: _propTypes.default.string,

  /**
   * Check if the component is auto focus
   */
  autoFocus: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/dropdown-input-pair/dropdown-input-pair.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/slippage-buttons/slippage-buttons.js", {"../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../components/ui/button-group":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button-group/index.js","../../../components/ui/info-tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/info-tooltip/index.js","../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/slippage-buttons/slippage-buttons.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SlippageButtons;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("../../../contexts/i18n");

var _buttonGroup = _interopRequireDefault(require("../../../components/ui/button-group"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _infoTooltip = _interopRequireDefault(require("../../../components/ui/info-tooltip"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SlippageButtons({
  onSelect,
  maxAllowedSlippage,
  currentSlippage
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [customValue, setCustomValue] = (0, _react.useState)(() => {
    if (typeof currentSlippage === 'number' && currentSlippage !== 2 && currentSlippage !== 3) {
      return currentSlippage.toString();
    }

    return '';
  });
  const [enteringCustomValue, setEnteringCustomValue] = (0, _react.useState)(false);
  const [activeButtonIndex, setActiveButtonIndex] = (0, _react.useState)(() => {
    if (currentSlippage === 3) {
      return 1;
    } else if (currentSlippage === 2) {
      return 0;
    } else if (typeof currentSlippage === 'number') {
      return 2;
    }

    return 1; // Choose activeButtonIndex = 1 for 3% slippage by default.
  });
  const [inputRef, setInputRef] = (0, _react.useState)(null);
  let errorText = '';

  if (customValue) {
    // customValue is a string, e.g. '0'
    if (Number(customValue) < 0) {
      errorText = t('swapSlippageNegative');
    } else if (Number(customValue) > 0 && Number(customValue) <= 1) {
      // We will not show this warning for 0% slippage, because we will only
      // return non-slippage quotes from off-chain makers.
      errorText = t('swapLowSlippageError');
    } else if (Number(customValue) >= 5 && Number(customValue) <= maxAllowedSlippage) {
      errorText = t('swapHighSlippageWarning');
    } else if (Number(customValue) > maxAllowedSlippage) {
      errorText = t('swapsExcessiveSlippageWarning');
    }
  }

  const customValueText = customValue || t('swapCustom');
  (0, _react.useEffect)(() => {
    if (inputRef && enteringCustomValue && window.document.activeElement !== inputRef) {
      inputRef.focus();
    }
  }, [inputRef, enteringCustomValue]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__header-text"
  }, t('swapsAdvancedOptions'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__dropdown-content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__buttons-prefix"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__prefix-text"
  }, t('swapsMaxSlippage')), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('swapAdvancedSlippageInfo')
  })), /*#__PURE__*/_react.default.createElement(_buttonGroup.default, {
    defaultActiveButtonIndex: activeButtonIndex === 2 && !customValue ? 1 : activeButtonIndex,
    variant: "radiogroup",
    newActiveButtonIndex: activeButtonIndex,
    className: (0, _classnames.default)('button-group', 'slippage-buttons__button-group')
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => {
      setCustomValue('');
      setEnteringCustomValue(false);
      setActiveButtonIndex(0);
      onSelect(2);
    }
  }, "2%"), /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => {
      setCustomValue('');
      setEnteringCustomValue(false);
      setActiveButtonIndex(1);
      onSelect(3);
    }
  }, "3%"), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: (0, _classnames.default)('slippage-buttons__button-group-custom-button', {
      'radio-button--danger': errorText
    }),
    onClick: () => {
      setActiveButtonIndex(2);
      setEnteringCustomValue(true);
    }
  }, enteringCustomValue ? /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('slippage-buttons__custom-input', {
      'slippage-buttons__custom-input--danger': errorText
    })
  }, /*#__PURE__*/_react.default.createElement("input", {
    onChange: event => {
      setCustomValue(event.target.value);
      onSelect(Number(event.target.value));
    },
    type: "number",
    step: "0.1",
    ref: setInputRef,
    onBlur: () => {
      setEnteringCustomValue(false);
    },
    value: customValue || ''
  })) : customValueText, (customValue || enteringCustomValue) && /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__percentage-suffix"
  }, "%")))), errorText && /*#__PURE__*/_react.default.createElement("div", {
    className: "slippage-buttons__error-text"
  }, errorText)));
}

SlippageButtons.propTypes = {
  onSelect: _propTypes.default.func.isRequired,
  maxAllowedSlippage: _propTypes.default.number.isRequired,
  currentSlippage: _propTypes.default.number
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/slippage-buttons/slippage-buttons.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/dist/index.js", {"./token":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/dist/token.js","@babel/runtime/helpers/assertThisInitialized":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/assertThisInitialized.js","@babel/runtime/helpers/asyncToGenerator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/asyncToGenerator.js","@babel/runtime/helpers/classCallCheck":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/classCallCheck.js","@babel/runtime/helpers/createClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/createClass.js","@babel/runtime/helpers/getPrototypeOf":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/getPrototypeOf.js","@babel/runtime/helpers/inherits":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/inherits.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/possibleConstructorReturn":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","@babel/runtime/regenerator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/regenerator/index.js","deep-equal":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/deep-equal/index.js","eth-block-tracker":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/eth-block-tracker/src/polling.js","ethjs-contract":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethjs-contract/lib/index.js","ethjs-query":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethjs-query/lib/index.js","human-standard-token-abi":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/human-standard-token-abi/index.js","safe-event-emitter":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/safe-event-emitter/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/dist/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var Eth = require('ethjs-query');

var EthContract = require('ethjs-contract');

var Token = require('./token');

var BlockTracker = require('eth-block-tracker');

var abi = require('human-standard-token-abi');

var SafeEventEmitter = require('safe-event-emitter');

var deepEqual = require('deep-equal');

var TokenTracker =
/*#__PURE__*/
function (_SafeEventEmitter) {
  (0, _inherits2["default"])(TokenTracker, _SafeEventEmitter);

  function TokenTracker() {
    var _this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2["default"])(this, TokenTracker);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TokenTracker).call(this));
    _this.includeFailedTokens = opts.includeFailedTokens || false;
    _this.userAddress = opts.userAddress || '0x0';
    _this.provider = opts.provider;
    var pollingInterval = opts.pollingInterval || 4000;
    _this.blockTracker = new BlockTracker({
      provider: _this.provider,
      pollingInterval: pollingInterval
    });
    _this.eth = new Eth(_this.provider);
    _this.contract = new EthContract(_this.eth);
    _this.TokenContract = _this.contract(abi);
    var tokens = opts.tokens || [];
    _this.tokens = tokens.map(function (tokenOpts) {
      return _this.createTokenFrom(tokenOpts);
    }); // initialize to empty array to ensure a tracker initialized
    // with zero tokens doesn't emit an update until a token is added.

    _this._oldBalances = [];
    Promise.all(_this.tokens.map(function (token) {
      return token.update();
    })).then(function (newBalances) {
      _this._update(newBalances);
    })["catch"](function (error) {
      _this.emit('error', error);
    });
    _this.updateBalances = _this.updateBalances.bind((0, _assertThisInitialized2["default"])(_this));
    _this.running = true;

    _this.blockTracker.on('latest', _this.updateBalances);

    return _this;
  }

  (0, _createClass2["default"])(TokenTracker, [{
    key: "serialize",
    value: function serialize() {
      return this.tokens.map(function (token) {
        return token.serialize();
      });
    }
  }, {
    key: "updateBalances",
    value: function () {
      var _updateBalances = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var newBalances;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return Promise.all(this.tokens.map(function (token) {
                  return token.updateBalance();
                }));

              case 3:
                newBalances = this.serialize();

                this._update(newBalances);

                _context.next = 10;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                this.emit('error', _context.t0);

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 7]]);
      }));

      function updateBalances() {
        return _updateBalances.apply(this, arguments);
      }

      return updateBalances;
    }()
  }, {
    key: "createTokenFrom",
    value: function createTokenFrom(opts) {
      var owner = this.userAddress;
      var address = opts.address,
          symbol = opts.symbol,
          balance = opts.balance,
          decimals = opts.decimals;
      var contract = this.TokenContract.at(address);
      return new Token({
        address: address,
        symbol: symbol,
        balance: balance,
        decimals: decimals,
        contract: contract,
        owner: owner,
        throwOnBalanceError: this.includeFailedTokens === false
      });
    }
  }, {
    key: "add",
    value: function add(opts) {
      var _this2 = this;

      var token = this.createTokenFrom(opts);
      this.tokens.push(token);
      token.update().then(function () {
        _this2._update(_this2.serialize());
      })["catch"](function (error) {
        _this2.emit('error', error);
      });
    }
  }, {
    key: "stop",
    value: function stop() {
      this.running = false;
      this.blockTracker.removeListener('latest', this.updateBalances);
    }
  }, {
    key: "_update",
    value: function _update(newBalances) {
      if (!this.running || deepEqual(newBalances, this._oldBalances)) {
        return;
      }

      this._oldBalances = newBalances;
      this.emit('update', newBalances);
    }
  }]);
  return TokenTracker;
}(SafeEventEmitter);

module.exports = TokenTracker;
      };
    };
  }
}, {package:"@metamask/eth-token-tracker",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/dist/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/dropdown-search-list/dropdown-search-list.js", {"../../../../shared/constants/swaps":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/swaps.js","../../../components/ui/actionable-message/actionable-message":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/actionable-message/actionable-message.js","../../../components/ui/pulse-loader":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/pulse-loader/index.js","../../../components/ui/url-icon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/url-icon/index.js","../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../hooks/useMetricEvent":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useMetricEvent.js","../../../selectors/selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/selectors.js","../import-token":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/import-token/index.js","../searchable-item-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","lodash":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/lodash.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/dropdown-search-list/dropdown-search-list.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DropdownSearchList;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _i18n = require("../../../contexts/i18n");

var _searchableItemList = _interopRequireDefault(require("../searchable-item-list"));

var _pulseLoader = _interopRequireDefault(require("../../../components/ui/pulse-loader"));

var _urlIcon = _interopRequireDefault(require("../../../components/ui/url-icon"));

var _actionableMessage = _interopRequireDefault(require("../../../components/ui/actionable-message/actionable-message"));

var _importToken = _interopRequireDefault(require("../import-token"));

var _useMetricEvent = require("../../../hooks/useMetricEvent");

var _selectors = require("../../../selectors/selectors");

var _swaps = require("../../../../shared/constants/swaps");

var _util = require("../../../helpers/utils/util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function DropdownSearchList({
  searchListClassName,
  itemsToSearch,
  selectPlaceHolderText,
  fuseSearchKeys,
  defaultToAll,
  maxListItems,
  onSelect,
  startingItem,
  onOpen,
  onClose,
  className = '',
  externallySelectedItem,
  selectorClosedClassName,
  loading,
  hideRightLabels,
  hideItemIf,
  listContainerClassName,
  shouldSearchForImports
}) {
  var _ref, _rpcPrefs$blockExplor;

  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [isOpen, setIsOpen] = (0, _react.useState)(false);
  const [isImportTokenModalOpen, setIsImportTokenModalOpen] = (0, _react.useState)(false);
  const [selectedItem, setSelectedItem] = (0, _react.useState)(startingItem);
  const [tokenForImport, setTokenForImport] = (0, _react.useState)(null);
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const tokenImportedEvent = (0, _useMetricEvent.useNewMetricEvent)({
    event: 'Token Imported',
    sensitiveProperties: {
      symbol: tokenForImport === null || tokenForImport === void 0 ? void 0 : tokenForImport.symbol,
      address: tokenForImport === null || tokenForImport === void 0 ? void 0 : tokenForImport.address,
      chain_id: chainId,
      is_hardware_wallet: hardwareWalletUsed,
      hardware_wallet_type: hardwareWalletType
    },
    category: 'swaps'
  });
  const close = (0, _react.useCallback)(() => {
    setIsOpen(false);
    onClose === null || onClose === void 0 ? void 0 : onClose();
  }, [onClose]);
  const onClickItem = (0, _react.useCallback)(item => {
    onSelect === null || onSelect === void 0 ? void 0 : onSelect(item);
    setSelectedItem(item);
    close();
  }, [onSelect, close]);

  const onOpenImportTokenModalClick = item => {
    setTokenForImport(item);
    setIsImportTokenModalOpen(true);
  };

  const onImportTokenClick = () => {
    tokenImportedEvent(); // Only when a user confirms import of a token, we add it and show it in a dropdown.

    onSelect === null || onSelect === void 0 ? void 0 : onSelect(tokenForImport);
    setSelectedItem(tokenForImport);
    setTokenForImport(null);
    close();
  };

  const onImportTokenCloseClick = () => {
    setIsImportTokenModalOpen(false);
    close();
  };

  const onClickSelector = (0, _react.useCallback)(() => {
    if (!isOpen) {
      setIsOpen(true);
      onOpen === null || onOpen === void 0 ? void 0 : onOpen();
    }
  }, [isOpen, onOpen]);
  const prevExternallySelectedItemRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    prevExternallySelectedItemRef.current = externallySelectedItem;
  });
  const prevExternallySelectedItem = prevExternallySelectedItemRef.current;
  (0, _react.useEffect)(() => {
    if (externallySelectedItem && !(0, _lodash.isEqual)(externallySelectedItem, selectedItem)) {
      setSelectedItem(externallySelectedItem);
    } else if (prevExternallySelectedItem && !externallySelectedItem) {
      setSelectedItem(null);
    }
  }, [externallySelectedItem, selectedItem, prevExternallySelectedItem]);

  const onKeyUp = e => {
    if (e.key === 'Escape') {
      close();
    } else if (e.key === 'Enter') {
      onClickSelector(e);
    }
  };

  const blockExplorerLink = (_ref = (_rpcPrefs$blockExplor = rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor !== void 0 ? _rpcPrefs$blockExplor : _swaps.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId]) !== null && _ref !== void 0 ? _ref : null;
  const blockExplorerLabel = rpcPrefs.blockExplorerUrl ? (0, _util.getURLHostName)(blockExplorerLink) : t('etherscan');
  const blockExplorerLinkClickedEvent = (0, _useMetricEvent.useNewMetricEvent)({
    category: 'Swaps',
    event: 'Clicked Block Explorer Link',
    properties: {
      link_type: 'Token Tracker',
      action: 'Verify Contract Address',
      block_explorer_domain: (0, _util.getURLHostName)(blockExplorerLink)
    }
  });
  const importTokenProps = {
    onImportTokenCloseClick,
    onImportTokenClick,
    setIsImportTokenModalOpen,
    tokenForImport
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('dropdown-search-list', className),
    onClick: onClickSelector,
    onKeyUp: onKeyUp,
    tabIndex: "0"
  }, tokenForImport && isImportTokenModalOpen && /*#__PURE__*/_react.default.createElement(_importToken.default, importTokenProps), !isOpen && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('dropdown-search-list__selector-closed-container', selectorClosedClassName)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__selector-closed"
  }, (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.iconUrl) && /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: selectedItem.iconUrl,
    className: "dropdown-search-list__selector-closed-icon",
    name: selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.symbol
  }), !(selectedItem !== null && selectedItem !== void 0 && selectedItem.iconUrl) && /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__default-dropdown-icon"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__labels"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__item-labels"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)('dropdown-search-list__closed-primary-label', {
      'dropdown-search-list__select-default': !(selectedItem !== null && selectedItem !== void 0 && selectedItem.symbol)
    })
  }, (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.symbol) || selectPlaceHolderText)))), /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-caret-down fa-lg dropdown-search-list__caret"
  })), isOpen && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_searchableItemList.default, {
    itemsToSearch: loading ? [] : itemsToSearch,
    Placeholder: ({
      searchQuery
    }) => loading ? /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-search-list__loading-item"
    }, /*#__PURE__*/_react.default.createElement(_pulseLoader.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-search-list__loading-item-text-container"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "dropdown-search-list__loading-item-text"
    }, t('swapFetchingTokens')))) : /*#__PURE__*/_react.default.createElement("div", {
      className: "dropdown-search-list__placeholder"
    }, t('swapBuildQuotePlaceHolderText', [searchQuery]), /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: "0",
      className: "searchable-item-list__item searchable-item-list__item--add-token",
      key: "searchable-item-list-item-last"
    }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: blockExplorerLink && t('addCustomTokenByContractAddress', [/*#__PURE__*/_react.default.createElement("a", {
        key: "dropdown-search-list__etherscan-link",
        onClick: () => {
          blockExplorerLinkClickedEvent();
          global.platform.openTab({
            url: blockExplorerLink
          });
        },
        target: "_blank",
        rel: "noopener noreferrer"
      }, blockExplorerLabel)])
    }))),
    searchPlaceholderText: t('swapSearchForAToken'),
    fuseSearchKeys: fuseSearchKeys,
    defaultToAll: defaultToAll,
    onClickItem: onClickItem,
    onOpenImportTokenModalClick: onOpenImportTokenModalClick,
    maxListItems: maxListItems,
    className: (0, _classnames.default)('dropdown-search-list__token-container', searchListClassName, {
      'dropdown-search-list--open': isOpen
    }),
    hideRightLabels: hideRightLabels,
    hideItemIf: hideItemIf,
    listContainerClassName: listContainerClassName,
    shouldSearchForImports: shouldSearchForImports
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-search-list__close-area",
    onClick: event => {
      event.stopPropagation();
      setIsOpen(false);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  })));
}

DropdownSearchList.propTypes = {
  itemsToSearch: _propTypes.default.array,
  onSelect: _propTypes.default.func,
  searchListClassName: _propTypes.default.string,
  fuseSearchKeys: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    weight: _propTypes.default.number
  })),
  defaultToAll: _propTypes.default.bool,
  maxListItems: _propTypes.default.number,
  startingItem: _propTypes.default.object,
  onOpen: _propTypes.default.func,
  onClose: _propTypes.default.func,
  className: _propTypes.default.string,
  externallySelectedItem: _propTypes.default.object,
  loading: _propTypes.default.bool,
  selectPlaceHolderText: _propTypes.default.string,
  selectorClosedClassName: _propTypes.default.string,
  hideRightLabels: _propTypes.default.bool,
  hideItemIf: _propTypes.default.func,
  listContainerClassName: _propTypes.default.string,
  shouldSearchForImports: _propTypes.default.bool
};


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/dropdown-search-list/dropdown-search-list.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/metrics.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/metrics.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMethodName = getMethodName;

function getMethodName(camelCase) {
  if (!camelCase || typeof camelCase !== 'string') {
    return '';
  }

  return camelCase.replace(/([a-z])([A-Z])/gu, '$1 $2').replace(/([A-Z])([a-z])/gu, ' $1$2').replace(/ +/gu, ' ');
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/metrics.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/gas.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/gas.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PRIORITY_LEVEL_ICON_MAP = exports.GAS_FORM_ERRORS = void 0;
exports.getGasFormErrorText = getGasFormErrorText;
const GAS_FORM_ERRORS = {
  GAS_LIMIT_OUT_OF_BOUNDS: 'editGasLimitOutOfBounds',
  MAX_PRIORITY_FEE_TOO_LOW: 'editGasMaxPriorityFeeLow',
  MAX_FEE_TOO_LOW: 'editGasMaxFeeLow',
  MAX_PRIORITY_FEE_BELOW_MINIMUM: 'editGasMaxPriorityFeeBelowMinimum',
  MAX_PRIORITY_FEE_HIGH_WARNING: 'editGasMaxPriorityFeeHigh',
  MAX_FEE_HIGH_WARNING: 'editGasMaxFeeHigh',
  MAX_FEE_IMBALANCE: 'editGasMaxFeeImbalance',
  GAS_PRICE_TOO_LOW: 'editGasPriceTooLow'
};
exports.GAS_FORM_ERRORS = GAS_FORM_ERRORS;

function getGasFormErrorText(type, t, {
  minimumGasLimit
} = {}) {
  switch (type) {
    case GAS_FORM_ERRORS.GAS_LIMIT_OUT_OF_BOUNDS:
      return t('editGasLimitOutOfBounds', [minimumGasLimit]);

    case GAS_FORM_ERRORS.MAX_PRIORITY_FEE_TOO_LOW:
      return t('editGasMaxPriorityFeeLow');

    case GAS_FORM_ERRORS.MAX_FEE_TOO_LOW:
      return t('editGasMaxFeeLow');

    case GAS_FORM_ERRORS.MAX_PRIORITY_FEE_BELOW_MINIMUM:
      return t('editGasMaxPriorityFeeBelowMinimum');

    case GAS_FORM_ERRORS.MAX_PRIORITY_FEE_HIGH_WARNING:
      return t('editGasMaxPriorityFeeHigh');

    case GAS_FORM_ERRORS.MAX_FEE_HIGH_WARNING:
      return t('editGasMaxFeeHigh');

    case GAS_FORM_ERRORS.MAX_FEE_IMBALANCE:
      return t('editGasMaxFeePriorityImbalance');

    case GAS_FORM_ERRORS.GAS_PRICE_TOO_LOW:
      return t('editGasPriceTooLow');

    default:
      return '';
  }
}

const PRIORITY_LEVEL_ICON_MAP = {
  low: '🐢',
  medium: '🦊',
  high: '🦍',
  dappSuggested: '🌐',
  swapSuggested: '🔄',
  custom: '⚙'
};
exports.PRIORITY_LEVEL_ICON_MAP = PRIORITY_LEVEL_ICON_MAP;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/gas.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useGasPriceInput.js", {"../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../helpers/utils/transactions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/transactions.util.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/utils.js","lodash":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/lodash.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useGasPriceInput.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasPriceInput = useGasPriceInput;

var _react = require("react");

var _lodash = require("lodash");

var _gas = require("../../../shared/constants/gas");

var _conversions = require("../../helpers/utils/conversions.util");

var _transactions = require("../../helpers/utils/transactions.util");

var _utils = require("./utils");

function getGasPriceEstimate(gasFeeEstimates, gasEstimateType, estimateToUse) {
  if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.LEGACY) {
    var _gasFeeEstimates$esti;

    return (_gasFeeEstimates$esti = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates[estimateToUse]) !== null && _gasFeeEstimates$esti !== void 0 ? _gasFeeEstimates$esti : '0';
  } else if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.ETH_GASPRICE) {
    var _gasFeeEstimates$gasP;

    return (_gasFeeEstimates$gasP = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.gasPrice) !== null && _gasFeeEstimates$gasP !== void 0 ? _gasFeeEstimates$gasP : '0';
  }

  return '0';
}
/**
 * @typedef {Object} GasPriceInputsReturnType
 * @property {DecGweiString} [gasPrice] - the gasPrice input value.
 * @property {(DecGweiString) => void} setGasPrice - state setter method to update the gasPrice.
 * @property {(boolean) => true} setGasPriceHasBeenManuallySet - state setter method to update gasPriceHasBeenManuallySet
 * field gasPriceHasBeenManuallySet is used in gasPrice calculations.
 */


function useGasPriceInput({
  estimateToUse,
  gasEstimateType,
  gasFeeEstimates,
  transaction
}) {
  const [gasPriceHasBeenManuallySet, setGasPriceHasBeenManuallySet] = (0, _react.useState)((transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel) === _gas.CUSTOM_GAS_ESTIMATE);
  const [gasPrice, setGasPrice] = (0, _react.useState)(() => {
    const {
      gasPrice: txGasPrice
    } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) || {};
    return txGasPrice && (0, _utils.feeParamsAreCustom)(transaction) ? Number((0, _conversions.hexWEIToDecGWEI)(txGasPrice)) : null;
  });
  const [initialGasPriceEstimates] = (0, _react.useState)(gasFeeEstimates);
  const gasPriceEstimatesHaveNotChanged = (0, _lodash.isEqual)(initialGasPriceEstimates, gasFeeEstimates);
  const gasPriceToUse = gasPrice !== null && (gasPriceHasBeenManuallySet || gasPriceEstimatesHaveNotChanged || (0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams)) ? gasPrice : getGasPriceEstimate(gasFeeEstimates, gasEstimateType, estimateToUse);
  return {
    gasPrice: gasPriceToUse,
    setGasPrice,
    setGasPriceHasBeenManuallySet
  };
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useGasPriceInput.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useMaxPriorityFeePerGasInput.js", {"../../../shared/modules/conversion.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/conversion.utils.js","../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../helpers/utils/transactions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/transactions.util.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../useCurrencyDisplay":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCurrencyDisplay.js","../useUserPreferencedCurrency":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useUserPreferencedCurrency.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/utils.js","ethereumjs-util":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethereumjs-util/dist.browser/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useMaxPriorityFeePerGasInput.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMaxPriorityFeePerGasInput = useMaxPriorityFeePerGasInput;

var _reactRedux = require("react-redux");

var _react = require("react");

var _ethereumjsUtil = require("ethereumjs-util");

var _common = require("../../helpers/constants/common");

var _conversions = require("../../helpers/utils/conversions.util");

var _selectors = require("../../selectors");

var _transactions = require("../../helpers/utils/transactions.util");

var _conversion = require("../../../shared/modules/conversion.utils");

var _useCurrencyDisplay = require("../useCurrencyDisplay");

var _useUserPreferencedCurrency = require("../useUserPreferencedCurrency");

var _utils = require("./utils");

const getMaxPriorityFeePerGasFromTransaction = transaction => {
  const {
    maxPriorityFeePerGas,
    maxFeePerGas,
    gasPrice
  } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) || {};
  return Number((0, _conversions.hexWEIToDecGWEI)(maxPriorityFeePerGas || maxFeePerGas || gasPrice));
};
/**
 * @typedef {Object} MaxPriorityFeePerGasInputReturnType
 * @property {DecGweiString} [maxPriorityFeePerGas] - the maxPriorityFeePerGas
 *  input value.
 * @property {string} [maxPriorityFeePerGasFiat] - the maxPriorityFeePerGas
 *  converted to the user's preferred currency.
 * @property {(DecGweiString) => void} setMaxPriorityFeePerGas - state setter
 *  method to update the maxPriorityFeePerGas.
 */


function useMaxPriorityFeePerGasInput({
  estimateToUse,
  gasEstimateType,
  gasFeeEstimates,
  gasLimit,
  supportsEIP1559V2,
  transaction
}) {
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const {
    currency: fiatCurrency,
    numberOfDecimals: fiatNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.SECONDARY);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const initialMaxPriorityFeePerGas = supportsEIP1559 ? getMaxPriorityFeePerGasFromTransaction(transaction) : 0;
  const [maxPriorityFeePerGas, setMaxPriorityFeePerGas] = (0, _react.useState)(() => {
    if (initialMaxPriorityFeePerGas && (0, _utils.feeParamsAreCustom)(transaction)) return initialMaxPriorityFeePerGas;
    return null;
  });
  (0, _react.useEffect)(() => {
    if (supportsEIP1559V2 && initialMaxPriorityFeePerGas) {
      setMaxPriorityFeePerGas(initialMaxPriorityFeePerGas);
    }
  }, [initialMaxPriorityFeePerGas, setMaxPriorityFeePerGas, supportsEIP1559V2]);
  const maxPriorityFeePerGasToUse = maxPriorityFeePerGas !== null && maxPriorityFeePerGas !== void 0 ? maxPriorityFeePerGas : (0, _utils.getGasFeeEstimate)('suggestedMaxPriorityFeePerGas', gasFeeEstimates, gasEstimateType, estimateToUse, initialMaxPriorityFeePerGas || 0); // We need to display the estimated fiat currency impact of the
  // maxPriorityFeePerGas field to the user. This hook calculates that amount.

  const [, {
    value: maxPriorityFeePerGasFiat
  }] = (0, _useCurrencyDisplay.useCurrencyDisplay)((0, _ethereumjsUtil.addHexPrefix)((0, _conversion.multiplyCurrencies)(maxPriorityFeePerGasToUse, gasLimit, {
    toNumericBase: 'hex',
    fromDenomination: 'GWEI',
    toDenomination: 'WEI',
    multiplicandBase: 10,
    multiplierBase: 10
  })), {
    numberOfDecimals: fiatNumberOfDecimals,
    currency: fiatCurrency
  });
  return {
    maxPriorityFeePerGas: maxPriorityFeePerGasToUse,
    maxPriorityFeePerGasFiat: showFiat ? maxPriorityFeePerGasFiat : '',
    setMaxPriorityFeePerGas
  };
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useMaxPriorityFeePerGasInput.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useGasFeeErrors.js", {"../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../shared/modules/conversion.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/conversion.utils.js","../../helpers/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/gas.js","../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../helpers/utils/transactions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/transactions.util.js","../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useGasFeeErrors.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasFeeErrors = useGasFeeErrors;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _reactRedux = require("react-redux");

var _gas = require("../../../shared/constants/gas");

var _conversion = require("../../../shared/modules/conversion.utils");

var _selectors = require("../../selectors");

var _conversions = require("../../helpers/utils/conversions.util");

var _transactions = require("../../helpers/utils/transactions.util");

var _util = require("../../helpers/utils/util");

var _gas2 = require("../../helpers/constants/gas");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const HIGH_FEE_WARNING_MULTIPLIER = 1.5;

const validateGasLimit = (gasLimit, minimumGasLimit) => {
  const gasLimitTooLow = (0, _conversion.conversionLessThan)({
    value: gasLimit,
    fromNumericBase: 'dec'
  }, {
    value: minimumGasLimit || _gas.GAS_LIMITS.SIMPLE,
    fromNumericBase: 'hex'
  });
  if (gasLimitTooLow) return _gas2.GAS_FORM_ERRORS.GAS_LIMIT_OUT_OF_BOUNDS;
  return undefined;
};

const validateMaxPriorityFee = (maxPriorityFeePerGas, supportsEIP1559) => {
  if (!supportsEIP1559) return undefined;

  if ((0, _util.bnLessThanEqualTo)(maxPriorityFeePerGas, 0)) {
    return _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_BELOW_MINIMUM;
  }

  return undefined;
};

const validateMaxFee = (maxFeePerGas, maxPriorityFeeError, maxPriorityFeePerGas, supportsEIP1559) => {
  if (maxPriorityFeeError || !supportsEIP1559) return undefined;

  if ((0, _util.bnGreaterThan)(maxPriorityFeePerGas, maxFeePerGas)) {
    return _gas2.GAS_FORM_ERRORS.MAX_FEE_IMBALANCE;
  }

  return undefined;
};

const validateGasPrice = (isFeeMarketGasEstimate, gasPrice, supportsEIP1559, transaction) => {
  var _transaction$txParams;

  if (supportsEIP1559 && isFeeMarketGasEstimate) return undefined;

  if ((!supportsEIP1559 || transaction !== null && transaction !== void 0 && (_transaction$txParams = transaction.txParams) !== null && _transaction$txParams !== void 0 && _transaction$txParams.gasPrice) && (0, _util.bnLessThanEqualTo)(gasPrice, 0)) {
    return _gas2.GAS_FORM_ERRORS.GAS_PRICE_TOO_LOW;
  }

  return undefined;
};

const getMaxPriorityFeeWarning = (gasFeeEstimates, isFeeMarketGasEstimate, isGasEstimatesLoading, maxPriorityFeePerGas, supportsEIP1559) => {
  var _gasFeeEstimates$low;

  if (!supportsEIP1559 || !isFeeMarketGasEstimate || isGasEstimatesLoading) return undefined;

  if ((0, _util.bnLessThan)(maxPriorityFeePerGas, gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$low = gasFeeEstimates.low) === null || _gasFeeEstimates$low === void 0 ? void 0 : _gasFeeEstimates$low.suggestedMaxPriorityFeePerGas)) {
    return _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_TOO_LOW;
  }

  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates.high && (0, _util.bnGreaterThan)(maxPriorityFeePerGas, gasFeeEstimates.high.suggestedMaxPriorityFeePerGas * HIGH_FEE_WARNING_MULTIPLIER)) {
    return _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_HIGH_WARNING;
  }

  return undefined;
};

const getMaxFeeWarning = (gasFeeEstimates, isGasEstimatesLoading, isFeeMarketGasEstimate, maxFeeError, maxPriorityFeeError, maxFeePerGas, supportsEIP1559) => {
  var _gasFeeEstimates$low2;

  if (maxPriorityFeeError || maxFeeError || !isFeeMarketGasEstimate || !supportsEIP1559 || isGasEstimatesLoading) {
    return undefined;
  }

  if ((0, _util.bnLessThan)(maxFeePerGas, gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$low2 = gasFeeEstimates.low) === null || _gasFeeEstimates$low2 === void 0 ? void 0 : _gasFeeEstimates$low2.suggestedMaxFeePerGas)) {
    return _gas2.GAS_FORM_ERRORS.MAX_FEE_TOO_LOW;
  }

  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates.high && (0, _util.bnGreaterThan)(maxFeePerGas, gasFeeEstimates.high.suggestedMaxFeePerGas * HIGH_FEE_WARNING_MULTIPLIER)) {
    return _gas2.GAS_FORM_ERRORS.MAX_FEE_HIGH_WARNING;
  }

  return undefined;
};

const hasBalanceError = (minimumCostInHexWei, transaction, ethBalance) => {
  var _transaction$txParams2;

  if (minimumCostInHexWei === undefined || ethBalance === undefined) {
    return false;
  }

  const minimumTxCostInHexWei = (0, _conversions.addHexes)(minimumCostInHexWei, (transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams2 = transaction.txParams) === null || _transaction$txParams2 === void 0 ? void 0 : _transaction$txParams2.value) || '0x0');
  return (0, _conversion.conversionGreaterThan)({
    value: minimumTxCostInHexWei,
    fromNumericBase: 'hex'
  }, {
    value: ethBalance,
    fromNumericBase: 'hex'
  });
};
/**
 * @typedef {Object} GasFeeErrorsReturnType
 * @property {Object} [gasErrors] - combined map of errors and warnings.
 * @property {boolean} [hasGasErrors] - true if there are errors that can block submission.
 * @property {Object} gasWarnings - map of gas warnings for EIP-1559 fields.
 * @property {boolean} [balanceError] - true if user balance is less than transaction value.
 * @property {boolean} [estimatesUnavailableWarning] - true if supportsEIP1559 is true and
 * estimate is not of type fee-market.
 */


function useGasFeeErrors({
  gasEstimateType,
  gasFeeEstimates,
  isGasEstimatesLoading,
  gasLimit,
  gasPrice,
  maxPriorityFeePerGas,
  maxFeePerGas,
  minimumCostInHexWei,
  minimumGasLimit,
  transaction
}) {
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const isFeeMarketGasEstimate = gasEstimateType === _gas.GAS_ESTIMATE_TYPES.FEE_MARKET; // Get all errors

  const gasLimitError = validateGasLimit(gasLimit, minimumGasLimit);
  const maxPriorityFeeError = validateMaxPriorityFee(maxPriorityFeePerGas, supportsEIP1559);
  const maxFeeError = validateMaxFee(maxFeePerGas, maxPriorityFeeError, maxPriorityFeePerGas, supportsEIP1559);
  const gasPriceError = validateGasPrice(isFeeMarketGasEstimate, gasPrice, supportsEIP1559, transaction); // Get all warnings

  const maxPriorityFeeWarning = getMaxPriorityFeeWarning(gasFeeEstimates, isFeeMarketGasEstimate, isGasEstimatesLoading, maxPriorityFeePerGas, supportsEIP1559);
  const maxFeeWarning = getMaxFeeWarning(gasFeeEstimates, isGasEstimatesLoading, isFeeMarketGasEstimate, maxFeeError, maxPriorityFeeError, maxFeePerGas, supportsEIP1559); // Separating errors from warnings so we can know which value problems
  // are blocking or simply useful information for the users

  const gasErrors = (0, _react.useMemo)(() => {
    const errors = {};
    if (gasLimitError) errors.gasLimit = gasLimitError;
    if (maxPriorityFeeError) errors.maxPriorityFee = maxPriorityFeeError;
    if (maxFeeError) errors.maxFee = maxFeeError;
    if (gasPriceError) errors.gasPrice = gasPriceError;
    return errors;
  }, [gasLimitError, maxPriorityFeeError, maxFeeError, gasPriceError]);
  const gasWarnings = (0, _react.useMemo)(() => {
    const warnings = {};
    if (maxPriorityFeeWarning) warnings.maxPriorityFee = maxPriorityFeeWarning;
    if (maxFeeWarning) warnings.maxFee = maxFeeWarning;
    return warnings;
  }, [maxPriorityFeeWarning, maxFeeWarning]);
  const estimatesUnavailableWarning = supportsEIP1559 && !isFeeMarketGasEstimate; // Determine if we have any errors which should block submission

  const hasGasErrors = Boolean(Object.keys(gasErrors).length); // Combine the warnings and errors into one object for easier use within the UI.
  // This object should have no effect on whether or not the user can submit the form

  const errorsAndWarnings = (0, _react.useMemo)(() => _objectSpread(_objectSpread({}, gasWarnings), gasErrors), [gasErrors, gasWarnings]);
  const {
    balance: ethBalance
  } = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount, _reactRedux.shallowEqual);
  const balanceError = hasBalanceError(minimumCostInHexWei, transaction, ethBalance);
  return {
    gasErrors: errorsAndWarnings,
    hasGasErrors,
    gasWarnings,
    balanceError,
    estimatesUnavailableWarning,
    hasSimulationError: Boolean(transaction === null || transaction === void 0 ? void 0 : transaction.simulationFails)
  };
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useGasFeeErrors.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useMaxFeePerGasInput.js", {"../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../shared/modules/gas.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/gas.utils.js","../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../helpers/utils/transactions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/transactions.util.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../useCurrencyDisplay":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCurrencyDisplay.js","../useUserPreferencedCurrency":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useUserPreferencedCurrency.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/utils.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useMaxFeePerGasInput.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMaxFeePerGasInput = useMaxFeePerGasInput;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _reactRedux = require("react-redux");

var _gas = require("../../../shared/constants/gas");

var _common = require("../../helpers/constants/common");

var _gas2 = require("../../../shared/modules/gas.utils");

var _conversions = require("../../helpers/utils/conversions.util");

var _selectors = require("../../selectors");

var _transactions = require("../../helpers/utils/transactions.util");

var _useCurrencyDisplay = require("../useCurrencyDisplay");

var _useUserPreferencedCurrency = require("../useUserPreferencedCurrency");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const getMaxFeePerGasFromTransaction = transaction => {
  const {
    maxFeePerGas,
    gasPrice
  } = (transaction === null || transaction === void 0 ? void 0 : transaction.txParams) || {};
  return Number((0, _conversions.hexWEIToDecGWEI)(maxFeePerGas || gasPrice));
};
/**
 * @typedef {Object} MaxFeePerGasInputReturnType
 * @property {(DecGweiString) => void} setMaxFeePerGas - state setter method to
 *  update the maxFeePerGas.
 * @property {string} [maxFeePerGasFiat] - the maxFeePerGas converted to the
 *  user's preferred currency.
 * @property {(DecGweiString) => void} setMaxFeePerGas - state setter
 *  method to update the setMaxFeePerGas.
 */


function useMaxFeePerGasInput({
  estimateToUse,
  gasEstimateType,
  gasFeeEstimates,
  gasLimit,
  gasPrice,
  supportsEIP1559V2,
  transaction
}) {
  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const {
    currency: fiatCurrency,
    numberOfDecimals: fiatNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.SECONDARY);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const initialMaxFeePerGas = supportsEIP1559 ? getMaxFeePerGasFromTransaction(transaction) : 0; // This hook keeps track of a few pieces of transitional state. It is
  // transitional because it is only used to modify a transaction in the
  // metamask (background) state tree.

  const [maxFeePerGas, setMaxFeePerGas] = (0, _react.useState)(() => {
    if (initialMaxFeePerGas && (0, _utils.feeParamsAreCustom)(transaction)) return initialMaxFeePerGas;
    return null;
  });
  (0, _react.useEffect)(() => {
    if (supportsEIP1559V2 && initialMaxFeePerGas) {
      setMaxFeePerGas(initialMaxFeePerGas);
    }
  }, [initialMaxFeePerGas, setMaxFeePerGas, supportsEIP1559V2]);
  let gasSettings = {
    gasLimit: (0, _conversions.decimalToHex)(gasLimit)
  };

  if (supportsEIP1559) {
    gasSettings = _objectSpread(_objectSpread({}, gasSettings), {}, {
      maxFeePerGas: (0, _conversions.decGWEIToHexWEI)(maxFeePerGas || gasPrice || '0')
    });
  } else if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.NONE) {
    gasSettings = _objectSpread(_objectSpread({}, gasSettings), {}, {
      gasPrice: '0x0'
    });
  } else {
    gasSettings = _objectSpread(_objectSpread({}, gasSettings), {}, {
      gasPrice: (0, _conversions.decGWEIToHexWEI)(gasPrice)
    });
  }

  const maximumCostInHexWei = (0, _gas2.getMaximumGasTotalInHexWei)(gasSettings); // We need to display thee estimated fiat currency impact of the maxFeePerGas
  // field to the user. This hook calculates that amount. This also works for
  // the gasPrice amount because in legacy transactions cost is always gasPrice
  // * gasLimit.

  const [, {
    value: maxFeePerGasFiat
  }] = (0, _useCurrencyDisplay.useCurrencyDisplay)(maximumCostInHexWei, {
    numberOfDecimals: fiatNumberOfDecimals,
    currency: fiatCurrency
  }); // We specify whether to use the estimate value by checking if the state
  // value has been set. The state value is only set by user input and is wiped
  // when the user selects an estimate. Default here is '0' to avoid bignumber
  // errors in later calculations for nullish values.

  const maxFeePerGasToUse = maxFeePerGas !== null && maxFeePerGas !== void 0 ? maxFeePerGas : (0, _utils.getGasFeeEstimate)('suggestedMaxFeePerGas', gasFeeEstimates, gasEstimateType, estimateToUse, initialMaxFeePerGas || 0);
  return {
    maxFeePerGas: maxFeePerGasToUse,
    maxFeePerGasFiat: showFiat ? maxFeePerGasFiat : '',
    setMaxFeePerGas
  };
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useMaxFeePerGasInput.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useGasEstimates.js", {"../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../shared/modules/gas.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/gas.utils.js","../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../helpers/utils/transactions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/transactions.util.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../useCurrencyDisplay":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCurrencyDisplay.js","../useUserPreferencedCurrency":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useUserPreferencedCurrency.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useGasEstimates.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasEstimates = useGasEstimates;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactRedux = require("react-redux");

var _gas = require("../../../shared/constants/gas");

var _gas2 = require("../../../shared/modules/gas.utils");

var _common = require("../../helpers/constants/common");

var _selectors = require("../../selectors");

var _conversions = require("../../helpers/utils/conversions.util");

var _transactions = require("../../helpers/utils/transactions.util");

var _useCurrencyDisplay = require("../useCurrencyDisplay");

var _useUserPreferencedCurrency = require("../useUserPreferencedCurrency");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @typedef {Object} GasEstimatesReturnType
 * @property {string} [estimatedMinimumFiat] - The amount estimated to be paid
 *  based on current network conditions. Expressed in user's preferred currency.
 * @property {string} [estimatedMaximumFiat] - the maximum amount estimated to be paid if current
 *  network transaction volume increases. Expressed in user's preferred currency.
 * @property {string} [estimatedMaximumNative] - the maximum amount estimated to be paid if the
 *  current network transaction volume increases. Expressed in the network's native currency.
 * @property {string} [estimatedMinimumNative] - the maximum amount estimated to be paid if the
 *  current network transaction volume increases. Expressed in the network's native currency.
 * @property {string} [estimatedMinimumNative] - the maximum amount estimated to be paid if the
 *  current network transaction volume increases. Expressed in the network's native currency.
 * @property {HexWeiString} [estimatedBaseFee] - estimatedBaseFee from fee-market gasFeeEstimates
 *  in HexWei.
 * @property {HexWeiString} [minimumCostInHexWei] - the minimum amount this transaction will cost.
 */
function useGasEstimates({
  editGasMode,
  gasEstimateType,
  gasFeeEstimates,
  gasLimit,
  gasPrice,
  maxFeePerGas,
  maxPriorityFeePerGas,
  minimumGasLimit,
  transaction
}) {
  var _gasFeeEstimates$esti2;

  const supportsEIP1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559) && !(0, _transactions.isLegacyTransaction)(transaction === null || transaction === void 0 ? void 0 : transaction.txParams);
  const {
    currency: fiatCurrency,
    numberOfDecimals: fiatNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.SECONDARY);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const {
    currency: primaryCurrency,
    numberOfDecimals: primaryNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.PRIMARY); // We have two helper methods that take an object that can have either
  // gasPrice OR the EIP-1559 fields on it, plus gasLimit. This object is
  // conditionally set to the appropriate fields to compute the minimum
  // and maximum cost of a transaction given the current estimates or selected
  // gas fees.

  let gasSettings = {
    gasLimit: (0, _conversions.decimalToHex)(gasLimit)
  };

  if (supportsEIP1559) {
    var _gasFeeEstimates$esti;

    gasSettings = _objectSpread(_objectSpread({}, gasSettings), {}, {
      maxFeePerGas: (0, _conversions.decGWEIToHexWEI)(maxFeePerGas || gasPrice || '0'),
      maxPriorityFeePerGas: (0, _conversions.decGWEIToHexWEI)(maxPriorityFeePerGas || maxFeePerGas || gasPrice || '0'),
      baseFeePerGas: (0, _conversions.decGWEIToHexWEI)((_gasFeeEstimates$esti = gasFeeEstimates.estimatedBaseFee) !== null && _gasFeeEstimates$esti !== void 0 ? _gasFeeEstimates$esti : '0')
    });
  } else if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.NONE) {
    gasSettings = _objectSpread(_objectSpread({}, gasSettings), {}, {
      gasPrice: '0x0'
    });
  } else {
    gasSettings = _objectSpread(_objectSpread({}, gasSettings), {}, {
      gasPrice: (0, _conversions.decGWEIToHexWEI)(gasPrice)
    });
  } // The maximum amount this transaction will cost


  const maximumCostInHexWei = (0, _gas2.getMaximumGasTotalInHexWei)(gasSettings);

  if (editGasMode === _gas.EDIT_GAS_MODES.SWAPS) {
    gasSettings = _objectSpread(_objectSpread({}, gasSettings), {}, {
      gasLimit: (0, _conversions.decimalToHex)(minimumGasLimit)
    });
  } // The minimum amount this transaction will cost


  const minimumCostInHexWei = (0, _gas2.getMinimumGasTotalInHexWei)(gasSettings); // The estimated total amount of native currency that will be expended
  // given the selected gas fees.

  const [estimatedMaximumNative] = (0, _useCurrencyDisplay.useCurrencyDisplay)(maximumCostInHexWei, {
    numberOfDecimals: primaryNumberOfDecimals,
    currency: primaryCurrency
  });
  const [, {
    value: estimatedMaximumFiat
  }] = (0, _useCurrencyDisplay.useCurrencyDisplay)(maximumCostInHexWei, {
    numberOfDecimals: fiatNumberOfDecimals,
    currency: fiatCurrency
  });
  const [estimatedMinimumNative] = (0, _useCurrencyDisplay.useCurrencyDisplay)(minimumCostInHexWei, {
    numberOfDecimals: primaryNumberOfDecimals,
    currency: primaryCurrency
  }); // We also need to display our closest estimate of the low end of estimation
  // in fiat.

  const [, {
    value: estimatedMinimumFiat
  }] = (0, _useCurrencyDisplay.useCurrencyDisplay)(minimumCostInHexWei, {
    numberOfDecimals: fiatNumberOfDecimals,
    currency: fiatCurrency
  });
  return {
    estimatedMaximumFiat: showFiat ? estimatedMaximumFiat : '',
    estimatedMinimumFiat: showFiat ? estimatedMinimumFiat : '',
    estimatedMaximumNative,
    estimatedMinimumNative,
    estimatedBaseFee: supportsEIP1559 ? (0, _conversions.decGWEIToHexWEI)((_gasFeeEstimates$esti2 = gasFeeEstimates.estimatedBaseFee) !== null && _gasFeeEstimates$esti2 !== void 0 ? _gasFeeEstimates$esti2 : '0') : undefined,
    minimumCostInHexWei
  };
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useGasEstimates.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useTransactionFunctions.js", {"../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useTransactionFunctions.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransactionFunctions = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _reactRedux = require("react-redux");

var _gas = require("../../../shared/constants/gas");

var _conversions = require("../../helpers/utils/conversions.util");

var _actions = require("../../store/actions");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const useTransactionFunctions = ({
  defaultEstimateToUse,
  editGasMode,
  gasFeeEstimates,
  gasLimit: gasLimitInTransaction,
  transaction
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const updateTransaction = (0, _react.useCallback)(({
    estimateUsed,
    maxFeePerGas,
    maxPriorityFeePerGas,
    gasLimit = gasLimitInTransaction
  }) => {
    const newGasSettings = {
      gas: (0, _conversions.decimalToHex)(gasLimit),
      gasLimit: (0, _conversions.decimalToHex)(gasLimit),
      estimateSuggested: defaultEstimateToUse,
      estimateUsed
    };

    if (maxFeePerGas) {
      newGasSettings.maxFeePerGas = maxFeePerGas;
    }

    if (maxPriorityFeePerGas) {
      newGasSettings.maxPriorityFeePerGas = maxPriorityFeePerGas;
    }

    const updatedTxMeta = _objectSpread(_objectSpread({}, transaction), {}, {
      userFeeLevel: estimateUsed || _gas.PRIORITY_LEVELS.CUSTOM,
      txParams: _objectSpread(_objectSpread({}, transaction.txParams), newGasSettings)
    });

    if (editGasMode === _gas.EDIT_GAS_MODES.SWAPS) {
      dispatch((0, _actions.updateSwapsUserFeeLevel)(estimateUsed || _gas.PRIORITY_LEVELS.CUSTOM));
      dispatch((0, _actions.updateCustomSwapsEIP1559GasParams)(newGasSettings));
    } else {
      dispatch((0, _actions.updateTransaction)(updatedTxMeta));
    }
  }, [defaultEstimateToUse, dispatch, editGasMode, gasLimitInTransaction, transaction]);
  const updateTransactionUsingGasFeeEstimates = (0, _react.useCallback)(gasFeeEstimateToUse => {
    if (gasFeeEstimateToUse === _gas.PRIORITY_LEVELS.DAPP_SUGGESTED) {
      const {
        maxFeePerGas,
        maxPriorityFeePerGas
      } = transaction === null || transaction === void 0 ? void 0 : transaction.dappSuggestedGasFees;
      updateTransaction({
        estimateUsed: _gas.PRIORITY_LEVELS.DAPP_SUGGESTED,
        maxFeePerGas,
        maxPriorityFeePerGas
      });
    } else {
      const {
        suggestedMaxFeePerGas,
        suggestedMaxPriorityFeePerGas
      } = gasFeeEstimates[gasFeeEstimateToUse];
      updateTransaction({
        estimateUsed: gasFeeEstimateToUse,
        maxFeePerGas: (0, _conversions.decGWEIToHexWEI)(suggestedMaxFeePerGas),
        maxPriorityFeePerGas: (0, _conversions.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas)
      });
    }
  }, [gasFeeEstimates, transaction === null || transaction === void 0 ? void 0 : transaction.dappSuggestedGasFees, updateTransaction]);
  return {
    updateTransaction,
    updateTransactionUsingGasFeeEstimates
  };
};

exports.useTransactionFunctions = useTransactionFunctions;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/useTransactionFunctions.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/countdown-timer/countdown-timer.js", {"../../../../shared/constants/time":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/time.js","../../../components/ui/info-tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/info-tooltip/index.js","../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../ducks/swaps/swaps":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/swaps/swaps.js","./timer-icon":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/countdown-timer/timer-icon.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","luxon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/luxon/build/cjs-browser/luxon.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/countdown-timer/countdown-timer.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CountdownTimer;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _luxon = require("luxon");

var _i18n = require("../../../contexts/i18n");

var _infoTooltip = _interopRequireDefault(require("../../../components/ui/info-tooltip"));

var _swaps = require("../../../ducks/swaps/swaps");

var _time = require("../../../../shared/constants/time");

var _timerIcon = _interopRequireDefault(require("./timer-icon"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Return the mm:ss start time of the countdown timer.
// If time has elapsed between `timeStarted` the time current time,
// then that elapsed time will be subtracted from the timer before
// rendering
function getNewTimer(currentTime, timeStarted, timeBaseStart) {
  const timeAlreadyElapsed = currentTime - timeStarted;
  return timeBaseStart - timeAlreadyElapsed;
}

function decreaseTimerByOne(timer) {
  return Math.max(timer - _time.SECOND, 0);
}

function timeBelowWarningTime(timer, warningTime) {
  const [warningTimeMinutes, warningTimeSeconds] = warningTime.split(':');
  return timer <= (Number(warningTimeMinutes) * 60 + Number(warningTimeSeconds)) * _time.SECOND;
}

function CountdownTimer({
  timeStarted,
  timeOnly,
  timerBase,
  warningTime,
  labelKey,
  infoTooltipLabelKey
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const intervalRef = (0, _react.useRef)();
  const initialTimeStartedRef = (0, _react.useRef)();
  const swapsQuoteRefreshTime = (0, _reactRedux.useSelector)(_swaps.getSwapsQuoteRefreshTime);
  const timerStart = Number(timerBase) || swapsQuoteRefreshTime;
  const [currentTime, setCurrentTime] = (0, _react.useState)(() => Date.now());
  const [timer, setTimer] = (0, _react.useState)(() => getNewTimer(currentTime, timeStarted, timerStart));
  (0, _react.useEffect)(() => {
    if (intervalRef.current === undefined) {
      intervalRef.current = setInterval(() => {
        setTimer(decreaseTimerByOne);
      }, _time.SECOND);
    }

    return function cleanup() {
      clearInterval(intervalRef.current);
    };
  }, []); // Reset the timer that timer has hit '0:00' and the timeStarted prop has changed

  (0, _react.useEffect)(() => {
    if (!initialTimeStartedRef.current) {
      initialTimeStartedRef.current = timeStarted || Date.now();
    }

    if (timer === 0 && timeStarted !== initialTimeStartedRef.current) {
      initialTimeStartedRef.current = timeStarted;
      const newCurrentTime = Date.now();
      setCurrentTime(newCurrentTime);
      setTimer(getNewTimer(newCurrentTime, timeStarted, timerStart));
      clearInterval(intervalRef.current);
      intervalRef.current = setInterval(() => {
        setTimer(decreaseTimerByOne);
      }, _time.SECOND);
    }
  }, [timeStarted, timer, timerStart]);

  const formattedTimer = _luxon.Duration.fromMillis(timer).toFormat('m:ss');

  let time;

  if (timeOnly) {
    time = /*#__PURE__*/_react.default.createElement("div", {
      className: "countdown-timer__time"
    }, formattedTimer);
  } else if (labelKey) {
    time = t(labelKey, [/*#__PURE__*/_react.default.createElement("div", {
      key: "countdown-time-1",
      className: "countdown-timer__time"
    }, formattedTimer)]);
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "countdown-timer"
  }, /*#__PURE__*/_react.default.createElement("div", {
    "data-testid": "countdown-timer__timer-container",
    className: (0, _classnames.default)('countdown-timer__timer-container', {
      'countdown-timer__timer-container--warning': warningTime && timeBelowWarningTime(timer, warningTime)
    })
  }, /*#__PURE__*/_react.default.createElement(_timerIcon.default, null), time), !timeOnly && infoTooltipLabelKey ? /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "bottom",
    contentText: t(infoTooltipLabelKey)
  }) : null);
}

CountdownTimer.propTypes = {
  timeStarted: _propTypes.default.number,
  timeOnly: _propTypes.default.bool,
  timerBase: _propTypes.default.number,
  warningTime: _propTypes.default.string,
  labelKey: _propTypes.default.string,
  infoTooltipLabelKey: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/countdown-timer/countdown-timer.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useIncrementedGasFees.js", {"../../shared/modules/conversion.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/conversion.utils.js","../../shared/modules/transaction.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/transaction.utils.js","../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","./useGasFeeEstimates":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useGasFeeEstimates.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","bignumber.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/bignumber.js/bignumber.js","ethereumjs-util":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethereumjs-util/dist.browser/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useIncrementedGasFees.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIncrementedGasFees = useIncrementedGasFees;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _ethereumjsUtil = require("ethereumjs-util");

var _react = require("react");

var _conversion = require("../../shared/modules/conversion.utils");

var _transaction = require("../../shared/modules/transaction.utils");

var _conversions = require("../helpers/utils/conversions.util");

var _useGasFeeEstimates = require("./useGasFeeEstimates");

/**
 * Simple helper to save on duplication to multiply the supplied wei hex string
 * by 1.10 to get bare minimum new gas fee.
 *
 * @param {string} hexStringValue - hex value in wei to be incremented
 * @returns {string} - hex value in WEI 10% higher than the param.
 */
function addTenPercent(hexStringValue) {
  return (0, _ethereumjsUtil.addHexPrefix)((0, _conversion.multiplyCurrencies)(hexStringValue, 1.1, {
    toNumericBase: 'hex',
    multiplicandBase: 16,
    multiplierBase: 10
  }));
}
/**
 * Helper that returns the higher of two options for a new gas fee:
 * The original fee + 10% or
 * the current medium suggested fee from our gas estimation api
 *
 * @param {string} originalFee - hexWei vale of the original fee (maxFee or maxPriority)
 * @param {string} currentEstimate - decGwei value of the current medium gasFee estimate (maxFee or maxPriorityfee)
 * @returns {string} - hexWei value of the higher of the two inputs.
 */


function getHighestIncrementedFee(originalFee, currentEstimate) {
  const buffedOriginalHexWei = addTenPercent(originalFee);
  const currentEstimateHexWei = (0, _conversions.decGWEIToHexWEI)(currentEstimate);
  return new _bignumber.default(buffedOriginalHexWei, 16).greaterThan(new _bignumber.default(currentEstimateHexWei, 16)) ? buffedOriginalHexWei : currentEstimateHexWei;
}
/**
 * When initializing cancellations or speed ups we need to set the baseline
 * gas fees to be 10% higher, which is the bare minimum that the network will
 * accept for transactions of the same nonce. Anything lower than this will be
 * discarded by the network to avoid DoS attacks. This hook returns an object
 * that either has gasPrice or maxFeePerGas/maxPriorityFeePerGas specified. In
 * addition the gasLimit will also be included.
 * @param {} transaction
 * @returns {__import__(
 *   '../../app/scripts/controllers/transactions'
 * ).CustomGasSettings} - Gas settings for cancellations/speed ups
 */


function useIncrementedGasFees(transaction) {
  const {
    gasFeeEstimates = {}
  } = (0, _useGasFeeEstimates.useGasFeeEstimates)(); // We memoize this value so that it can be relied upon in other hooks.

  const customGasSettings = (0, _react.useMemo)(() => {
    var _transaction$txParams, _transaction$txParams2, _gasFeeEstimates$medi, _gasFeeEstimates$medi2, _gasFeeEstimates$medi3, _gasFeeEstimates$medi4;

    // This hook is called indiscriminantly on all transactions appearing in
    // the activity list. This includes transitional items such as signature
    // requests. These types of "transactions" are not really transactions and
    // do not have txParams. This is why we use optional chaining on the
    // txParams object in this hook.
    const temporaryGasSettings = {
      gasLimit: (_transaction$txParams = transaction.txParams) === null || _transaction$txParams === void 0 ? void 0 : _transaction$txParams.gas,
      gas: (_transaction$txParams2 = transaction.txParams) === null || _transaction$txParams2 === void 0 ? void 0 : _transaction$txParams2.gas
    };
    const suggestedMaxFeePerGas = (_gasFeeEstimates$medi = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$medi2 = gasFeeEstimates.medium) === null || _gasFeeEstimates$medi2 === void 0 ? void 0 : _gasFeeEstimates$medi2.suggestedMaxFeePerGas) !== null && _gasFeeEstimates$medi !== void 0 ? _gasFeeEstimates$medi : '0';
    const suggestedMaxPriorityFeePerGas = (_gasFeeEstimates$medi3 = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$medi4 = gasFeeEstimates.medium) === null || _gasFeeEstimates$medi4 === void 0 ? void 0 : _gasFeeEstimates$medi4.suggestedMaxPriorityFeePerGas) !== null && _gasFeeEstimates$medi3 !== void 0 ? _gasFeeEstimates$medi3 : '0';

    if ((0, _transaction.isEIP1559Transaction)(transaction)) {
      var _transaction$txParams3, _transaction$txParams4;

      const transactionMaxFeePerGas = (_transaction$txParams3 = transaction.txParams) === null || _transaction$txParams3 === void 0 ? void 0 : _transaction$txParams3.maxFeePerGas;
      const transactionMaxPriorityFeePerGas = (_transaction$txParams4 = transaction.txParams) === null || _transaction$txParams4 === void 0 ? void 0 : _transaction$txParams4.maxPriorityFeePerGas;
      temporaryGasSettings.maxFeePerGas = transactionMaxFeePerGas === undefined || transactionMaxFeePerGas.startsWith('-') ? '0x0' : getHighestIncrementedFee(transactionMaxFeePerGas, suggestedMaxFeePerGas);
      temporaryGasSettings.maxPriorityFeePerGas = transactionMaxPriorityFeePerGas === undefined || transactionMaxPriorityFeePerGas.startsWith('-') ? '0x0' : getHighestIncrementedFee(transactionMaxPriorityFeePerGas, suggestedMaxPriorityFeePerGas);
    } else {
      var _transaction$txParams5;

      const transactionGasPrice = (_transaction$txParams5 = transaction.txParams) === null || _transaction$txParams5 === void 0 ? void 0 : _transaction$txParams5.gasPrice;
      temporaryGasSettings.gasPrice = transactionGasPrice === undefined || transactionGasPrice.startsWith('-') ? '0x0' : getHighestIncrementedFee(transactionGasPrice, suggestedMaxFeePerGas);
    }

    return temporaryGasSettings;
  }, [transaction, gasFeeEstimates]);
  return customGasSettings;
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useIncrementedGasFees.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/loading-heartbeat/index.js", {"../../../ducks/app/app":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/app/app.js","../../../hooks/useShouldAnimateGasEstimations":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useShouldAnimateGasEstimations.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","_process":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/process/browser.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/loading-heartbeat/index.js
      return function (require, module, exports) {
(function (process){(function (){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LoadingHeartBeat;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _app = require("../../../ducks/app/app");

var _useShouldAnimateGasEstimations = require("../../../hooks/useShouldAnimateGasEstimations");

const BASE_CLASS = 'loading-heartbeat';
const LOADING_CLASS = `${BASE_CLASS}--active`;

function LoadingHeartBeat() {
  (0, _useShouldAnimateGasEstimations.useShouldAnimateGasEstimations)();
  const active = (0, _reactRedux.useSelector)(_app.getGasLoadingAnimationIsShowing);
  if (process.env.IN_TEST) return null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('loading-heartbeat', {
      [LOADING_CLASS]: active
    }),
    onClick: e => {
      e.preventDefault();
      e.stopPropagation();
    }
  });
}

}).call(this)}).call(this,require('_process'))

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/loading-heartbeat/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-display-education/index.js", {"./edit-gas-display-education.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-display-education/edit-gas-display-education.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-display-education/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasDisplayEducation.default;
  }
});

var _editGasDisplayEducation = _interopRequireDefault(require("./edit-gas-display-education.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-display-education/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-display/index.js", {"./edit-gas-display.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-display/edit-gas-display.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-display/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasDisplay.default;
  }
});

var _editGasDisplay = _interopRequireDefault(require("./edit-gas-display.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-display/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/main-quote-summary/main-quote-summary.js", {"../../../components/ui/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","../../../components/ui/url-icon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/url-icon/index.js","../../../helpers/utils/token-util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/token-util.js","../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../exchange-rate-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/exchange-rate-display/index.js","../swaps.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/swaps.util.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","bignumber.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/bignumber.js/bignumber.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/main-quote-summary/main-quote-summary.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MainQuoteSummary;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _tokenUtil = require("../../../helpers/utils/token-util");

var _util = require("../../../helpers/utils/util");

var _tooltip = _interopRequireDefault(require("../../../components/ui/tooltip"));

var _urlIcon = _interopRequireDefault(require("../../../components/ui/url-icon"));

var _exchangeRateDisplay = _interopRequireDefault(require("../exchange-rate-display"));

var _swaps = require("../swaps.util");

function getFontSizesAndLineHeights(fontSizeScore) {
  if (fontSizeScore <= 9) {
    return [50, 48];
  }

  if (fontSizeScore <= 13) {
    return [40, 32];
  }

  return [26, 15];
}

function MainQuoteSummary({
  sourceValue,
  sourceSymbol,
  sourceDecimals,
  sourceIconUrl,
  destinationValue,
  destinationSymbol,
  destinationDecimals,
  destinationIconUrl
}) {
  const sourceAmount = (0, _util.toPrecisionWithoutTrailingZeros)((0, _tokenUtil.calcTokenAmount)(sourceValue, sourceDecimals).toString(10), 12);
  const destinationAmount = (0, _tokenUtil.calcTokenAmount)(destinationValue, destinationDecimals);
  const amountToDisplay = (0, _swaps.formatSwapsValueForDisplay)(destinationAmount);
  const amountDigitLength = amountToDisplay.match(/\d+/gu).join('').length;
  const [numberFontSize, lineHeight] = getFontSizesAndLineHeights(amountDigitLength);
  let ellipsedAmountToDisplay = amountToDisplay;

  if (amountDigitLength > 20) {
    ellipsedAmountToDisplay = `${amountToDisplay.slice(0, 20)}...`;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__details"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__quote-details-top"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__source-row",
    "data-testid": "main-quote-summary__source-row"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "main-quote-summary__source-row-value",
    title: (0, _swaps.formatSwapsValueForDisplay)(sourceAmount)
  }, (0, _swaps.formatSwapsValueForDisplay)(sourceAmount)), /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: sourceIconUrl,
    className: "main-quote-summary__icon",
    name: sourceSymbol,
    fallbackClassName: "main-quote-summary__icon-fallback"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "main-quote-summary__source-row-symbol",
    title: sourceSymbol
  }, sourceSymbol)), /*#__PURE__*/_react.default.createElement("img", {
    className: "main-quote-summary__down-arrow",
    src: "images/down-arrow-grey.svg"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__destination-row"
  }, /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
    url: destinationIconUrl,
    className: "main-quote-summary__icon",
    name: destinationSymbol,
    fallbackClassName: "main-quote-summary__icon-fallback"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "main-quote-summary__destination-row-symbol"
  }, destinationSymbol)), /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__quote-large"
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    interactive: true,
    position: "bottom",
    html: amountToDisplay,
    disabled: ellipsedAmountToDisplay === amountToDisplay,
    theme: "white"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "main-quote-summary__quote-large-number",
    style: {
      fontSize: numberFontSize,
      lineHeight: `${lineHeight}px`
    }
  }, `${ellipsedAmountToDisplay}`)))), /*#__PURE__*/_react.default.createElement("div", {
    className: "main-quote-summary__exchange-rate-container",
    "data-testid": "main-quote-summary__exchange-rate-container"
  }, /*#__PURE__*/_react.default.createElement(_exchangeRateDisplay.default, {
    primaryTokenValue: sourceValue,
    primaryTokenDecimals: sourceDecimals,
    primaryTokenSymbol: sourceSymbol,
    secondaryTokenValue: destinationValue,
    secondaryTokenDecimals: destinationDecimals,
    secondaryTokenSymbol: destinationSymbol,
    arrowColor: "#037DD6",
    boldSymbols: false,
    className: "main-quote-summary__exchange-rate-display"
  }))));
}

MainQuoteSummary.propTypes = {
  sourceValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_bignumber.default)]).isRequired,
  sourceDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  sourceSymbol: _propTypes.default.string.isRequired,
  destinationValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(_bignumber.default)]).isRequired,
  destinationDecimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  destinationSymbol: _propTypes.default.string.isRequired,
  sourceIconUrl: _propTypes.default.string,
  destinationIconUrl: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/main-quote-summary/main-quote-summary.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/fee-card/fee-card.js", {"../../../../shared/constants/network":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/network.js","../../../components/app/transaction-detail-item/transaction-detail-item.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-detail-item/transaction-detail-item.component.js","../../../components/app/transaction-detail/transaction-detail.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-detail/transaction-detail.component.js","../../../components/ui/info-tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/info-tooltip/index.js","../../../components/ui/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/index.js","../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../hooks/useMetricEvent":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useMetricEvent.js","../../confirm-transaction-base/gas-details-item/gas-details-item-title":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/gas-details-item/gas-details-item-title/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/fee-card/fee-card.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FeeCard;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _i18n = require("../../../contexts/i18n");

var _infoTooltip = _interopRequireDefault(require("../../../components/ui/info-tooltip"));

var _useMetricEvent = require("../../../hooks/useMetricEvent");

var _network = require("../../../../shared/constants/network");

var _transactionDetail = _interopRequireDefault(require("../../../components/app/transaction-detail/transaction-detail.component"));

var _transactionDetailItem = _interopRequireDefault(require("../../../components/app/transaction-detail-item/transaction-detail-item.component"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _gasDetailsItemTitle = _interopRequireDefault(require("../../confirm-transaction-base/gas-details-item/gas-details-item-title"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const GAS_FEES_LEARN_MORE_URL = 'https://community.metamask.io/t/what-is-gas-why-do-transactions-take-so-long/3172';

function FeeCard({
  primaryFee,
  secondaryFee,
  hideTokenApprovalRow,
  onFeeCardMaxRowClick,
  tokenApprovalSourceTokenSymbol,
  onTokenApprovalClick,
  metaMaskFee,
  numberOfQuotes,
  onQuotesClick,
  chainId,
  isBestQuote,
  supportsEIP1559V2
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);

  const getTranslatedNetworkName = () => {
    switch (chainId) {
      case _network.MAINNET_CHAIN_ID:
        return t('networkNameEthereum');

      case _network.BSC_CHAIN_ID:
        return t('networkNameBSC');

      case _network.POLYGON_CHAIN_ID:
        return t('networkNamePolygon');

      case _network.LOCALHOST_CHAIN_ID:
        return t('networkNameTestnet');

      case _network.RINKEBY_CHAIN_ID:
        return t('networkNameRinkeby');

      default:
        throw new Error('This network is not supported for token swaps');
    }
  };

  const gasFeesLearnMoreLinkClickedEvent = (0, _useMetricEvent.useNewMetricEvent)({
    category: 'Swaps',
    event: 'Clicked "Gas Fees: Learn More" Link'
  });

  const tokenApprovalTextComponent = /*#__PURE__*/_react.default.createElement("span", {
    key: "fee-card-approve-symbol",
    className: "fee-card__bold"
  }, t('enableToken', [tokenApprovalSourceTokenSymbol]));

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__main"
  }, /*#__PURE__*/_react.default.createElement(_transactionDetail.default, {
    rows: [/*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
      key: "gas-item",
      detailTitle: supportsEIP1559V2 ? /*#__PURE__*/_react.default.createElement(_gasDetailsItemTitle.default, null) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('transactionDetailGasHeading'), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
        position: "top",
        contentText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", {
          className: "fee-card__info-tooltip-paragraph"
        }, t('swapGasFeesSummary', [getTranslatedNetworkName()])), /*#__PURE__*/_react.default.createElement("p", {
          className: "fee-card__info-tooltip-paragraph"
        }, t('swapGasFeesDetails')), /*#__PURE__*/_react.default.createElement("p", {
          className: "fee-card__info-tooltip-paragraph"
        }, /*#__PURE__*/_react.default.createElement("a", {
          className: "fee-card__link",
          onClick: () => {
            gasFeesLearnMoreLinkClickedEvent();
            global.platform.openTab({
              url: GAS_FEES_LEARN_MORE_URL
            });
          },
          target: "_blank",
          rel: "noopener noreferrer"
        }, t('swapGasFeesLearnMore')))),
        containerClassName: "fee-card__info-tooltip-content-container",
        wrapperClassName: "fee-card__row-label fee-card__info-tooltip-container",
        wide: true
      })),
      detailText: primaryFee.fee,
      detailTotal: secondaryFee.fee,
      subText: (secondaryFee === null || secondaryFee === void 0 ? void 0 : secondaryFee.maxFee) !== undefined && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
        tag: "span",
        fontWeight: _designSystem.FONT_WEIGHT.BOLD,
        color: _designSystem.COLORS.UI4,
        variant: _designSystem.TYPOGRAPHY.H7
      }, t('maxFee')), `: ${secondaryFee.maxFee}`, !supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement("span", {
        className: "fee-card__edit-link",
        onClick: () => onFeeCardMaxRowClick()
      }, t('edit')))
    })]
  }), !hideTokenApprovalRow && /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-label"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-header-text"
  }, t('swapEnableTokenForSwapping', [tokenApprovalTextComponent]), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('swapEnableDescription', [tokenApprovalSourceTokenSymbol]),
    containerClassName: "fee-card__info-tooltip-container"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__link",
    onClick: () => onTokenApprovalClick()
  }, t('swapEditLimit'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-label"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "fee-card__row-header-text"
  }, numberOfQuotes > 1 && /*#__PURE__*/_react.default.createElement("span", {
    onClick: onQuotesClick,
    className: "fee-card__quote-link-text"
  }, isBestQuote ? t('swapBestOfNQuotes', [numberOfQuotes]) : t('swapNQuotesWithDot', [numberOfQuotes])), t('swapIncludesMMFee', [metaMaskFee]), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('swapMetaMaskFeeDescription', [metaMaskFee]),
    wrapperClassName: "fee-card__info-tooltip-container"
  }))))));
}

FeeCard.propTypes = {
  primaryFee: _propTypes.default.shape({
    fee: _propTypes.default.string.isRequired,
    maxFee: _propTypes.default.string.isRequired
  }).isRequired,
  secondaryFee: _propTypes.default.shape({
    fee: _propTypes.default.string.isRequired,
    maxFee: _propTypes.default.string.isRequired
  }),
  onFeeCardMaxRowClick: _propTypes.default.func.isRequired,
  hideTokenApprovalRow: _propTypes.default.bool.isRequired,
  tokenApprovalSourceTokenSymbol: _propTypes.default.string,
  onTokenApprovalClick: _propTypes.default.func,
  metaMaskFee: _propTypes.default.string.isRequired,
  onQuotesClick: _propTypes.default.func.isRequired,
  numberOfQuotes: _propTypes.default.number.isRequired,
  chainId: _propTypes.default.string.isRequired,
  isBestQuote: _propTypes.default.bool.isRequired,
  supportsEIP1559V2: _propTypes.default.bool.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/fee-card/fee-card.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/select-quote-popover/select-quote-popover.js", {"../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../components/ui/popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/popover/index.js","../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","./quote-details":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/select-quote-popover/quote-details/index.js","./select-quote-popover-constants":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/select-quote-popover/select-quote-popover-constants.js","./sort-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/select-quote-popover/sort-list/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/select-quote-popover/select-quote-popover.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _i18n = require("../../../contexts/i18n");

var _popover = _interopRequireDefault(require("../../../components/ui/popover"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _quoteDetails = _interopRequireDefault(require("./quote-details"));

var _sortList = _interopRequireDefault(require("./sort-list"));

var _selectQuotePopoverConstants = require("./select-quote-popover-constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SelectQuotePopover = ({
  quoteDataRows = [],
  onClose = null,
  onSubmit = null,
  swapToSymbol,
  initialAggId,
  onQuoteDetailsIsOpened
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [sortDirection, setSortDirection] = (0, _react.useState)(1);
  const [sortColumn, setSortColumn] = (0, _react.useState)(null);
  const [selectedAggId, setSelectedAggId] = (0, _react.useState)(initialAggId);
  const [contentView, setContentView] = (0, _react.useState)('sortList');
  const [viewingAgg, setViewingAgg] = (0, _react.useState)(null);
  const onSubmitClick = (0, _react.useCallback)(() => {
    onSubmit(selectedAggId);
    onClose();
  }, [selectedAggId, onClose, onSubmit]);
  const closeQuoteDetails = (0, _react.useCallback)(() => {
    setViewingAgg(null);
    setContentView('sortList');
  }, []);
  const onRowClick = (0, _react.useCallback)(aggId => setSelectedAggId(aggId), [setSelectedAggId]);
  const onCaretClick = (0, _react.useCallback)(aggId => {
    const agg = quoteDataRows.find(quote => quote.aggId === aggId);
    setContentView('quoteDetails');
    onQuoteDetailsIsOpened();
    setViewingAgg(agg);
  }, [quoteDataRows, onQuoteDetailsIsOpened]);
  const CustomBackground = (0, _react.useCallback)(() => /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover__popover-bg",
    onClick: onClose
  }), [onClose]);

  const footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "page-container__footer-button select-quote-popover__button",
    onClick: onClose
  }, t('close')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "page-container__footer-button select-quote-popover__button",
    onClick: onSubmitClick
  }, t('swapSelect')));

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "select-quote-popover"
  }, /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: contentView === 'quoteDetails' ? t('swapSelectAQuote') : t('swapQuoteDetails'),
    subtitle: contentView === 'sortList' ? t('swapSelectQuotePopoverDescription') : null,
    onClose: onClose,
    CustomBackground: CustomBackground,
    className: "select-quote-popover__popover-wrap",
    footerClassName: "swaps__footer",
    footer: contentView === 'quoteDetails' ? null : footer,
    onBack: contentView === 'quoteDetails' ? closeQuoteDetails : null
  }, contentView === 'sortList' && /*#__PURE__*/_react.default.createElement(_sortList.default, {
    quoteDataRows: quoteDataRows,
    selectedAggId: selectedAggId,
    onSelect: onRowClick,
    onCaretClick: onCaretClick,
    swapToSymbol: swapToSymbol,
    sortDirection: sortDirection,
    setSortDirection: setSortDirection,
    sortColumn: sortColumn,
    setSortColumn: setSortColumn
  }), contentView === 'quoteDetails' && viewingAgg && /*#__PURE__*/_react.default.createElement(_quoteDetails.default, viewingAgg)));
};

SelectQuotePopover.propTypes = {
  onClose: _propTypes.default.func,
  onSubmit: _propTypes.default.func,
  swapToSymbol: _propTypes.default.string,
  renderableData: _propTypes.default.array,
  quoteDataRows: _propTypes.default.arrayOf(_selectQuotePopoverConstants.QUOTE_DATA_ROWS_PROPTYPES_SHAPE),
  initialAggId: _propTypes.default.string,
  onQuoteDetailsIsOpened: _propTypes.default.func
};
var _default = SelectQuotePopover;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/select-quote-popover/select-quote-popover.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-fee-popover.js", {"../../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../../contexts/transaction-modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/transaction-modal.js","../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../helpers/constants/error-keys":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/error-keys.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../ui/error-message":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/error-message/index.js","../../ui/i18n-value":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/i18n-value/index.js","../../ui/popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/popover/index.js","../../ui/typography/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/typography.js","./edit-gas-item":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-item/index.js","./network-statistics":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-fee-popover.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _gas = require("../../../../shared/constants/gas");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _transactionModal = require("../../../contexts/transaction-modal");

var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));

var _i18nValue = _interopRequireDefault(require("../../ui/i18n-value"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _errorKeys = require("../../../helpers/constants/error-keys");

var _gasFee = require("../../../contexts/gasFee");

var _editGasItem = _interopRequireDefault(require("./edit-gas-item"));

var _networkStatistics = _interopRequireDefault(require("./network-statistics"));

const EditGasFeePopover = () => {
  const {
    balanceError,
    editGasMode
  } = (0, _gasFee.useGasFeeContext)();
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    closeModal,
    currentModal
  } = (0, _transactionModal.useTransactionModalContext)();
  if (currentModal !== 'editGasFee') return null;
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: t('editGasFeeModalTitle'),
    onClose: () => closeModal('editGasFee'),
    className: "edit-gas-fee-popover"
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__wrapper"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content"
  }, balanceError && /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
    errorKey: _errorKeys.INSUFFICIENT_FUNDS_ERROR_KEY
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content__header"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-option"
  }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
    messageKey: "gasOption"
  })), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-time"
  }, editGasMode !== _gas.EDIT_GAS_MODES.SWAPS && /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
    messageKey: "time"
  })), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-max-fee"
  }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
    messageKey: "maxFee"
  }))), editGasMode !== _gas.EDIT_GAS_MODES.SWAPS && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.LOW
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.MEDIUM
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.HIGH
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content__separator"
  }), editGasMode !== _gas.EDIT_GAS_MODES.SWAPS && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.DAPP_SUGGESTED
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PRIORITY_LEVELS.CUSTOM
  }), /*#__PURE__*/_react.default.createElement(_networkStatistics.default, null), /*#__PURE__*/_react.default.createElement(_typography.default, {
    className: "edit-gas-fee-popover__know-more",
    align: "center",
    color: _designSystem.COLORS.UI4,
    tag: _designSystem.TYPOGRAPHY.Paragraph,
    variant: _designSystem.TYPOGRAPHY.H7
  }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
    messageKey: "learmMoreAboutGas",
    options: [/*#__PURE__*/_react.default.createElement("a", {
      key: "learnMoreLink",
      target: "_blank",
      rel: "noopener noreferrer",
      href: "https://De-wallet.zendesk.com/hc/en-us/articles/4404600179227-User-Guide-Gas"
    }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
      messageKey: "learnMore"
    }))]
  }))))));
};

var _default = EditGasFeePopover;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-fee-popover.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-popover.js", {"../../../contexts/transaction-modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/transaction-modal.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../ui/box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/index.js","../../ui/popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/popover/index.js","./advanced-gas-fee-defaults":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-defaults/index.js","./advanced-gas-fee-gas-limit":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-gas-limit/index.js","./advanced-gas-fee-inputs":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/index.js","./advanced-gas-fee-save":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-save/index.js","./context":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/context/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-popover.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _transactionModal = require("../../../contexts/transaction-modal");

var _box = _interopRequireDefault(require("../../ui/box"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _context = require("./context");

var _advancedGasFeeInputs = _interopRequireDefault(require("./advanced-gas-fee-inputs"));

var _advancedGasFeeGasLimit = _interopRequireDefault(require("./advanced-gas-fee-gas-limit"));

var _advancedGasFeeSave = _interopRequireDefault(require("./advanced-gas-fee-save"));

var _advancedGasFeeDefaults = _interopRequireDefault(require("./advanced-gas-fee-defaults"));

const AdvancedGasFeePopover = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    closeModal,
    closeAllModals,
    currentModal
  } = (0, _transactionModal.useTransactionModalContext)();
  if (currentModal !== 'advancedGasFee') return null;
  return /*#__PURE__*/_react.default.createElement(_context.AdvancedGasFeePopoverContextProvider, null, /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "advanced-gas-fee-popover",
    title: t('advancedGasFeeModalTitle'),
    onBack: () => closeModal('advancedGasFee'),
    onClose: closeAllModals,
    footer: /*#__PURE__*/_react.default.createElement(_advancedGasFeeSave.default, null)
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: 4
  }, /*#__PURE__*/_react.default.createElement(_advancedGasFeeInputs.default, null), /*#__PURE__*/_react.default.createElement("div", {
    className: "advanced-gas-fee-popover__separator"
  }), /*#__PURE__*/_react.default.createElement(_advancedGasFeeDefaults.default, null), /*#__PURE__*/_react.default.createElement("div", {
    className: "advanced-gas-fee-popover__separator"
  }), /*#__PURE__*/_react.default.createElement(_advancedGasFeeGasLimit.default, null))));
};

var _default = AdvancedGasFeePopover;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-popover.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/home-notification/home-notification.component.js", {"../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../ui/check-box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/check-box/index.js","../../ui/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/home-notification/home-notification.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _checkBox = _interopRequireDefault(require("../../ui/check-box"));

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const HomeNotification = ({
  acceptText,
  checkboxText,
  checkboxTooltipText,
  classNames = [],
  descriptionText,
  ignoreText,
  infoText,
  onAccept,
  onIgnore
}) => {
  const [checkboxState, setCheckBoxState] = (0, _react.useState)(false);

  const checkboxElement = checkboxText && /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "homeNotification_checkbox",
    checked: checkboxState,
    className: "home-notification__checkbox",
    onClick: () => setCheckBoxState(checked => !checked)
  });

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('home-notification', ...classNames)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__content-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__text"
  }, descriptionText)), infoText ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: infoText,
    wrapperClassName: "home-notification__tooltip-wrapper"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-info-circle"
  })) : null), /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__buttons"
  }, onAccept && acceptText ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "home-notification__accept-button",
    onClick: onAccept
  }, acceptText) : null, onIgnore && ignoreText ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "home-notification__ignore-button" // Some onIgnore handlers use the checkboxState to determine whether
    // to disable the notification
    ,
    onClick: () => onIgnore(checkboxState)
  }, ignoreText) : null, checkboxText ? /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__checkbox-wrapper"
  }, checkboxTooltipText ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: checkboxTooltipText,
    wrapperClassName: "home-notification__checkbox-label-tooltip"
  }, checkboxElement) : checkboxElement, /*#__PURE__*/_react.default.createElement("label", {
    className: "home-notification__checkbox-label",
    htmlFor: "homeNotification_checkbox"
  }, checkboxText)) : null));
};

HomeNotification.propTypes = {
  /**
   * The text for the "Accept" button. This must be accompanied by the `onAccept` prop.
   *
   * The "Accept" button is only rendered if this prop is set.
   */
  acceptText: _propTypes.default.node,

  /**
   * The text to display alongside the checkbox.
   *
   * The checkbox state is passed to the `onIgnore` handler, so this should only be used if the `onIgnore` prop is set.
   *
   * The checkbox is only rendered if this prop is set.
   */
  checkboxText: _propTypes.default.node,

  /**
   * The text to display in the checkbox tooltip.
   *
   * The tooltip is only rendered if this prop is set.
   */
  checkboxTooltipText: _propTypes.default.node,

  /**
   * Custom class names.
   */
  classNames: _propTypes.default.array,

  /**
   * The notification description.
   */
  descriptionText: _propTypes.default.node.isRequired,

  /**
   * The text for the "Ignore" button. This must be accompanied by the `onIgnore` prop.
   *
   * The "Ignore" button is only rendered if this prop is set.
   */
  ignoreText: _propTypes.default.node,

  /**
   * The text for the info icon tooltip in the top-right of the notification.
   *
   * The info-icon is only rendered if this prop is set.
   */
  infoText: _propTypes.default.node,

  /**
   * The handler for the "Accept" button. This must be accompanied by the `acceptText` prop.
   */
  onAccept: _propTypes.default.func,

  /**
   * The handler for the "Ignore" button. This must be accompanied by the `ignoreText` prop.
   *
   * If `checkboxText` is set, the checkbox state will be passed to this function as a boolean.
   */
  onIgnore: _propTypes.default.func
};
var _default = HomeNotification;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/home-notification/home-notification.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/multiple-notifications/multiple-notifications.component.js", {"@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/multiple-notifications/multiple-notifications.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class MultipleNotifications extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      showAll: false
    });
  }

  render() {
    const {
      showAll
    } = this.state;
    const {
      children,
      classNames
    } = this.props;
    const childrenToRender = children.filter(Boolean);

    if (childrenToRender.length === 0) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(...classNames, {
        'home-notification-wrapper--show-all': showAll,
        'home-notification-wrapper--show-first': !showAll
      })
    }, childrenToRender, /*#__PURE__*/_react.default.createElement("div", {
      className: "home-notification-wrapper__i-container",
      onClick: () => this.setState({
        showAll: !showAll
      })
    }, childrenToRender.length > 1 ? /*#__PURE__*/_react.default.createElement("i", {
      className: (0, _classnames.default)('fa fa-sm fa-sort-amount-asc', {
        flipped: !showAll
      })
    }) : null));
  }

}

exports.default = MultipleNotifications;
(0, _defineProperty2.default)(MultipleNotifications, "defaultProps", {
  children: [],
  classNames: []
});
(0, _defineProperty2.default)(MultipleNotifications, "propTypes", {
  children: _propTypes.default.array,
  classNames: _propTypes.default.array
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/multiple-notifications/multiple-notifications.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/whats-new-popup/whats-new-popup.js", {"../../../../shared/notifications":"/home/clarisco/Desktop/metamask-extension-develop/shared/notifications/index.js","../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../hooks/useEqualityCheck":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useEqualityCheck.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../ui/popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/popover/index.js","../../ui/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/whats-new-popup/whats-new-popup.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = WhatsNewPopup;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _metamask = require("../../../ducks/metamask/metamask");

var _i18n = require("../../../contexts/i18n");

var _useEqualityCheck = require("../../../hooks/useEqualityCheck");

var _button = _interopRequireDefault(require("../../ui/button"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _typography = _interopRequireDefault(require("../../ui/typography"));

var _actions = require("../../../store/actions");

var _notifications = require("../../../../shared/notifications");

var _selectors = require("../../../selectors");

var _routes = require("../../../helpers/constants/routes");

var _designSystem = require("../../../helpers/constants/design-system");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function getActionFunctionById(id, history) {
  const actionFunctions = {
    2: () => {
      global.platform.openTab({
        url: 'https://survey.alchemer.com/s3/6173069/MetaMask-Extension-NPS-January-2021'
      });
    },
    3: () => {
      global.platform.openTab({
        url: 'https://community.metamask.io/t/about-the-security-category/72'
      });
    },
    4: () => {
      (0, _actions.updateViewedNotifications)({
        4: true
      });
      history.push(_routes.BUILD_QUOTE_ROUTE);
    },
    5: () => {
      (0, _actions.updateViewedNotifications)({
        5: true
      });
      global.platform.openTab({
        url: 'https://De-wallet.zendesk.com/hc/en-us/articles/360060826432'
      });
    },
    8: () => {
      (0, _actions.updateViewedNotifications)({
        8: true
      });
      history.push(_routes.ADVANCED_ROUTE);
    }
  };
  return actionFunctions[id];
}

const renderDescription = description => {
  if (!Array.isArray(description)) {
    return /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.Paragraph
    }, description);
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, description.map((piece, index) => {
    const isLast = index === description.length - 1;
    return /*#__PURE__*/_react.default.createElement(_typography.default, {
      key: `item-${index}`,
      variant: _designSystem.TYPOGRAPHY.Paragraph,
      boxProps: {
        marginBottom: isLast ? 0 : 2
      }
    }, piece);
  }));
};

const renderFirstNotification = (notification, idRefMap, history, isLast) => {
  const {
    id,
    date,
    title,
    description,
    image,
    actionText
  } = notification;
  const actionFunction = getActionFunctionById(id, history);

  const imageComponent = image && /*#__PURE__*/_react.default.createElement("img", {
    className: "whats-new-popup__notification-image",
    src: image.src,
    height: image.height,
    width: image.width
  });

  const placeImageBelowDescription = image === null || image === void 0 ? void 0 : image.placeImageBelowDescription;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('whats-new-popup__notification whats-new-popup__first-notification', {
      'whats-new-popup__last-notification': isLast
    }),
    key: `whats-new-popop-notification-${id}`
  }, !placeImageBelowDescription && imageComponent, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-title"
  }, title), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__description-and-date"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-description"
  }, renderDescription(description)), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-date"
  }, date)), placeImageBelowDescription && imageComponent, actionText && /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "whats-new-popup__button",
    onClick: actionFunction
  }, actionText), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__intersection-observable",
    ref: idRefMap[id]
  }));
};

const renderSubsequentNotification = (notification, idRefMap, history, isLast) => {
  const {
    id,
    date,
    title,
    description,
    actionText
  } = notification;
  const actionFunction = getActionFunctionById(id, history);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('whats-new-popup__notification', {
      'whats-new-popup__last-notification': isLast
    }),
    key: `whats-new-popop-notification-${id}`
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-title"
  }, title), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__description-and-date"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-description"
  }, renderDescription(description)), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notification-date"
  }, date)), actionText && /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__link",
    onClick: actionFunction
  }, `${actionText} >`), /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__intersection-observable",
    ref: idRefMap[id]
  }));
};

function WhatsNewPopup({
  onClose
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const notifications = (0, _reactRedux.useSelector)(_selectors.getSortedNotificationsToShow);
  const locale = (0, _reactRedux.useSelector)(_metamask.getCurrentLocale);
  const [seenNotifications, setSeenNotifications] = (0, _react.useState)({});
  const popoverRef = (0, _react.useRef)();
  const memoizedNotifications = (0, _useEqualityCheck.useEqualityCheck)(notifications);
  const idRefMap = (0, _react.useMemo)(() => memoizedNotifications.reduce((_idRefMap, notification) => _objectSpread(_objectSpread({}, _idRefMap), {}, {
    [notification.id]: /*#__PURE__*/_react.default.createRef()
  }), {}), [memoizedNotifications]);
  (0, _react.useEffect)(() => {
    const observer = new window.IntersectionObserver((entries, _observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const [id, ref] = Object.entries(idRefMap).find(([_, _ref]) => _ref.current.isSameNode(entry.target));
          setSeenNotifications(_seenNotifications => _objectSpread(_objectSpread({}, _seenNotifications), {}, {
            [id]: true
          }));

          _observer.unobserve(ref.current);
        }
      });
    }, {
      root: popoverRef.current,
      threshold: 1.0
    });
    Object.values(idRefMap).forEach(ref => {
      observer.observe(ref.current);
    });
    return () => {
      observer.disconnect();
    };
  }, [idRefMap, setSeenNotifications]);
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "whats-new-popup__popover",
    title: t('whatsNew'),
    onClose: () => {
      (0, _actions.updateViewedNotifications)(seenNotifications);
      onClose();
    },
    popoverRef: popoverRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "whats-new-popup__notifications"
  }, notifications.map(({
    id
  }, index) => {
    const notification = (0, _notifications.getTranslatedUINoficiations)(t, locale)[id];
    const isLast = index === notifications.length - 1; // Display the swaps notification with full image

    return index === 0 || id === 1 ? renderFirstNotification(notification, idRefMap, history, isLast) : renderSubsequentNotification(notification, idRefMap, history, isLast);
  })));
}

WhatsNewPopup.propTypes = {
  onClose: _propTypes.default.func.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/whats-new-popup/whats-new-popup.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/recovery-phrase-reminder/recovery-phrase-reminder.js", {"../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../ui/box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/index.js","../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../ui/popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/popover/index.js","../../ui/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/recovery-phrase-reminder/recovery-phrase-reminder.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RecoveryPhraseReminder;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _box = _interopRequireDefault(require("../../ui/box"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _typography = _interopRequireDefault(require("../../ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _routes = require("../../../helpers/constants/routes");

// Components
// Helpers
function RecoveryPhraseReminder({
  onConfirm,
  hasBackedUp
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();

  const handleBackUp = () => {
    history.push(_routes.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE);
  };

  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    centerTitle: true,
    title: t('recoveryPhraseReminderTitle')
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    padding: [0, 4, 6, 4],
    className: "recovery-phrase-reminder"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.BLACK,
    align: _designSystem.TEXT_ALIGN.CENTER,
    variant: _designSystem.TYPOGRAPHY.Paragraph,
    boxProps: {
      marginTop: 0,
      marginBottom: 4
    }
  }, t('recoveryPhraseReminderSubText')), /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: [4, 0, 8, 0]
  }, /*#__PURE__*/_react.default.createElement("ul", {
    className: "recovery-phrase-reminder__list"
  }, /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: "span",
    color: _designSystem.COLORS.BLACK,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('recoveryPhraseReminderItemOne'))), /*#__PURE__*/_react.default.createElement("li", null, t('recoveryPhraseReminderItemTwo')), /*#__PURE__*/_react.default.createElement("li", null, hasBackedUp ? t('recoveryPhraseReminderHasBackedUp') : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('recoveryPhraseReminderHasNotBackedUp'), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.INLINE_BLOCK,
    marginLeft: 1
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: handleBackUp,
    style: {
      fontSize: 'inherit',
      padding: 0
    }
  }, t('recoveryPhraseReminderBackupStart'))))))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.TWO_FIFTHS
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: onConfirm
  }, t('recoveryPhraseReminderConfirm'))))));
}

RecoveryPhraseReminder.propTypes = {
  hasBackedUp: _propTypes.default.bool.isRequired,
  onConfirm: _propTypes.default.func.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/recovery-phrase-reminder/recovery-phrase-reminder.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/collectibles-tab/collectibles-tab.js", {"../../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","../../ui/box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/index.js","../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../ui/typography/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/typography.js","../collectibles-detection-notice":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/collectibles-detection-notice/index.js","../collectibles-items":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/collectibles-items/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/collectibles-tab/collectibles-tab.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CollectiblesTab;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _box = _interopRequireDefault(require("../../ui/box"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _collectiblesDetectionNotice = _interopRequireDefault(require("../collectibles-detection-notice"));

var _collectiblesItems = _interopRequireDefault(require("../collectibles-items"));

var _designSystem = require("../../../helpers/constants/design-system");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _metamask = require("../../../ducks/metamask/metamask");

var _selectors = require("../../../selectors");

var _routes = require("../../../helpers/constants/routes");

var _actions = require("../../../store/actions");

function CollectiblesTab({
  onAddNFT
}) {
  const collectibles = (0, _reactRedux.useSelector)(_metamask.getCollectibles);
  const collectibleContracts = (0, _reactRedux.useSelector)(_metamask.getCollectibleContracts);
  const useCollectibleDetection = (0, _reactRedux.useSelector)(_selectors.getUseCollectibleDetection);
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  const collectibleDetectionNoticeDismissed = (0, _reactRedux.useSelector)(_metamask.getCollectiblesDetectionNoticeDismissed);
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const collections = {};
  collectibles.forEach(collectible => {
    if (collections[collectible.address]) {
      collections[collectible.address].collectibles.push(collectible);
    } else {
      const collectionContract = collectibleContracts.find(({
        address
      }) => address === collectible.address);
      collections[collectible.address] = {
        collectionName: (collectionContract === null || collectionContract === void 0 ? void 0 : collectionContract.name) || collectible.name,
        collectionImage: (collectionContract === null || collectionContract === void 0 ? void 0 : collectionContract.logo) || collectible.collectionImage,
        collectibles: [collectible]
      };
    }
  });

  const onEnableAutoDetect = () => {
    history.push(_routes.EXPERIMENTAL_ROUTE);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "collectibles-tab"
  }, collectibles.length > 0 ? /*#__PURE__*/_react.default.createElement(_collectiblesItems.default, {
    collections: collections
  }) : /*#__PURE__*/_react.default.createElement(_box.default, {
    padding: [6, 12, 6, 12]
  }, isMainnet && !useCollectibleDetection && !collectibleDetectionNoticeDismissed ? /*#__PURE__*/_react.default.createElement(_collectiblesDetectionNotice.default, null) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/no-nfts.svg"
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    marginBottom: 12,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.UI3,
    variant: _designSystem.TYPOGRAPHY.H4,
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('noNFTs')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://De-wallet.zendesk.com/hc/en-us/articles/360058238591-NFT-tokens-in-MetaMask-wallet",
    style: {
      padding: 0,
      fontSize: '1rem'
    }
  }, t('learnMoreUpperCase')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.UI3,
    variant: _designSystem.TYPOGRAPHY.H5,
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('missingNFT')), /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
  }, isMainnet ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "collectibles-tab__link",
    justifyContent: _designSystem.JUSTIFY_CONTENT.FLEX_END
  }, useCollectibleDetection ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: () => dispatch((0, _actions.detectCollectibles)())
  }, t('refreshList')) : /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: onEnableAutoDetect
  }, t('enableAutoDetect'))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.UI3,
    variant: _designSystem.TYPOGRAPHY.H4,
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('or'))) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.FLEX_START,
    className: "collectibles-tab__link"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: onAddNFT
  }, t('importNFTs'))))));
}

CollectiblesTab.propTypes = {
  onAddNFT: _propTypes.default.func.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/collectibles-tab/collectibles-tab.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/connected-sites/connected-sites.container.js", {"../../ducks/history/history":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/history/history.js","../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./connected-sites.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/connected-sites/connected-sites.component.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/connected-sites/connected-sites.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactRedux = require("react-redux");

var _actions = require("../../store/actions");

var _selectors = require("../../selectors");

var _routes = require("../../helpers/constants/routes");

var _history = require("../../ducks/history/history");

var _connectedSites = _interopRequireDefault(require("./connected-sites.component"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const mapStateToProps = state => {
  var _permittedAccountsByO;

  const {
    openMetaMaskTabs
  } = state.appState;
  const {
    id
  } = state.activeTab;
  const connectedSubjects = (0, _selectors.getConnectedSubjectsForSelectedAddress)(state);
  const originOfCurrentTab = (0, _selectors.getOriginOfCurrentTab)(state);
  const permittedAccountsByOrigin = (0, _selectors.getPermittedAccountsByOrigin)(state);
  const selectedAddress = (0, _selectors.getSelectedAddress)(state);
  const currentTabHasNoAccounts = !((_permittedAccountsByO = permittedAccountsByOrigin[originOfCurrentTab]) !== null && _permittedAccountsByO !== void 0 && _permittedAccountsByO.length);
  let tabToConnect;

  if (originOfCurrentTab && currentTabHasNoAccounts && !openMetaMaskTabs[id]) {
    tabToConnect = {
      origin: originOfCurrentTab
    };
  }

  return {
    accountLabel: (0, _selectors.getCurrentAccountWithSendEtherInfo)(state).name,
    connectedSubjects,
    subjects: (0, _selectors.getPermissionSubjects)(state),
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    permittedAccountsByOrigin,
    selectedAddress,
    tabToConnect
  };
};

const mapDispatchToProps = dispatch => {
  return {
    getOpenMetamaskTabsIds: () => dispatch((0, _actions.getOpenMetamaskTabsIds)()),
    disconnectAccount: (subjectKey, address) => {
      dispatch((0, _actions.removePermittedAccount)(subjectKey, address));
    },
    disconnectAllAccounts: (subjectKey, subject) => {
      const permissionMethodNames = subject.permissions.map(({
        parentCapability
      }) => parentCapability);
      dispatch((0, _actions.removePermissionsFor)({
        [subjectKey]: permissionMethodNames
      }));
    },
    requestAccountsPermissionWithId: origin => dispatch((0, _actions.requestAccountsPermissionWithId)(origin))
  };
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    connectedSubjects,
    subjects,
    mostRecentOverviewPage,
    selectedAddress,
    tabToConnect
  } = stateProps;
  const {
    disconnectAccount,
    disconnectAllAccounts,
    // eslint-disable-next-line no-shadow
    requestAccountsPermissionWithId
  } = dispatchProps;
  const {
    history
  } = ownProps;

  const closePopover = () => history.push(mostRecentOverviewPage);

  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, ownProps), stateProps), dispatchProps), {}, {
    closePopover,
    disconnectAccount: subjectKey => {
      disconnectAccount(subjectKey, selectedAddress);

      if (connectedSubjects.length === 1) {
        closePopover();
      }
    },
    disconnectAllAccounts: subjectKey => {
      disconnectAllAccounts(subjectKey, subjects[subjectKey]);

      if (connectedSubjects.length === 1) {
        closePopover();
      }
    },
    requestAccountsPermission: async () => {
      const id = await requestAccountsPermissionWithId(tabToConnect.origin);
      history.push(`${_routes.CONNECT_ROUTE}/${id}`);
    }
  });
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_connectedSites.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/connected-sites/connected-sites.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/connected-accounts/connected-accounts.container.js", {"../../ducks/history/history":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/history/history.js","../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./connected-accounts.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/connected-accounts/connected-accounts.component.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/connected-accounts/connected-accounts.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactRedux = require("react-redux");

var _selectors = require("../../selectors");

var _util = require("../../helpers/utils/util");

var _actions = require("../../store/actions");

var _history = require("../../ducks/history/history");

var _connectedAccounts = _interopRequireDefault(require("./connected-accounts.component"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const mapStateToProps = state => {
  const {
    activeTab
  } = state;
  const accountToConnect = (0, _selectors.getAccountToConnectToActiveTab)(state);
  const connectedAccounts = (0, _selectors.getOrderedConnectedAccountsForActiveTab)(state);
  const permissions = (0, _selectors.getPermissionsForActiveTab)(state);
  const selectedAddress = (0, _selectors.getSelectedAddress)(state);
  const isActiveTabExtension = (0, _util.isExtensionUrl)(activeTab);
  return {
    accountToConnect,
    isActiveTabExtension,
    activeTabOrigin: activeTab.origin,
    connectedAccounts,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    permissions,
    selectedAddress
  };
};

const mapDispatchToProps = dispatch => {
  return {
    addPermittedAccount: (origin, address) => dispatch((0, _actions.addPermittedAccount)(origin, address)),
    removePermittedAccount: (origin, address) => dispatch((0, _actions.removePermittedAccount)(origin, address)),
    setSelectedAddress: address => dispatch((0, _actions.setSelectedAddress)(address))
  };
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    activeTabOrigin
  } = stateProps;
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, ownProps), stateProps), dispatchProps), {}, {
    connectAccount: address => dispatchProps.addPermittedAccount(activeTabOrigin, address),
    removePermittedAccount: address => dispatchProps.removePermittedAccount(activeTabOrigin, address)
  });
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_connectedAccounts.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/connected-accounts/connected-accounts.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/menu-bar/menu-bar.js", {"../../../../app/scripts/lib/util":"/home/clarisco/Desktop/metamask-extension-develop/app/scripts/lib/util.js","../../../../shared/constants/app":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/app.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../hooks/useMetricEvent":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useMetricEvent.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../connected-status-indicator":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-status-indicator/index.js","../selected-account":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/selected-account/index.js","./account-options-menu":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/menu-bar/account-options-menu.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","extensionizer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/extensionizer/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/menu-bar/menu-bar.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MenuBar;

var _react = _interopRequireWildcard(require("react"));

var _extensionizer = _interopRequireDefault(require("extensionizer"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _selectedAccount = _interopRequireDefault(require("../selected-account"));

var _connectedStatusIndicator = _interopRequireDefault(require("../connected-status-indicator"));

var _util = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _routes = require("../../../helpers/constants/routes");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _useMetricEvent = require("../../../hooks/useMetricEvent");

var _selectors = require("../../../selectors");

var _accountOptionsMenu = _interopRequireDefault(require("./account-options-menu"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function MenuBar() {
  const t = (0, _useI18nContext.useI18nContext)();
  const openAccountOptionsEvent = (0, _useMetricEvent.useMetricEvent)({
    eventOpts: {
      category: 'Navigation',
      action: 'Home',
      name: 'Opened Account Options'
    }
  });
  const history = (0, _reactRouterDom.useHistory)();
  const [accountOptionsButtonElement, setAccountOptionsButtonElement] = (0, _react.useState)(null);
  const [accountOptionsMenuOpen, setAccountOptionsMenuOpen] = (0, _react.useState)(false);
  const origin = (0, _reactRedux.useSelector)(_selectors.getOriginOfCurrentTab);

  const showStatus = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP && origin && origin !== _extensionizer.default.runtime.id;

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "menu-bar"
  }, showStatus ? /*#__PURE__*/_react.default.createElement(_connectedStatusIndicator.default, {
    onClick: () => history.push(_routes.CONNECTED_ACCOUNTS_ROUTE)
  }) : null, /*#__PURE__*/_react.default.createElement(_selectedAccount.default, null), /*#__PURE__*/_react.default.createElement("button", {
    className: "fas fa-ellipsis-v menu-bar__account-options",
    "data-testid": "account-options-menu-button",
    ref: setAccountOptionsButtonElement,
    title: t('accountOptions'),
    onClick: () => {
      openAccountOptionsEvent();
      setAccountOptionsMenuOpen(true);
    }
  }), accountOptionsMenuOpen && /*#__PURE__*/_react.default.createElement(_accountOptionsMenu.default, {
    anchorElement: accountOptionsButtonElement,
    onClose: () => setAccountOptionsMenuOpen(false)
  }));
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/menu-bar/menu-bar.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/asset-list/asset-list.js", {"../../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../hooks/useCurrencyDisplay":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCurrencyDisplay.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../hooks/useMetricEvent":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useMetricEvent.js","../../../hooks/useUserPreferencedCurrency":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useUserPreferencedCurrency.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../ui/box/box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/box.js","../../ui/typography/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/typography.js","../asset-list-item":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/asset-list-item/index.js","../import-token-link":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/import-token-link/index.js","../token-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/token-list/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","_process":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/process/browser.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/asset-list/asset-list.js
      return function (require, module, exports) {
(function (process){(function (){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _importTokenLink = _interopRequireDefault(require("../import-token-link"));

var _tokenList = _interopRequireDefault(require("../token-list"));

var _routes = require("../../../helpers/constants/routes");

var _assetListItem = _interopRequireDefault(require("../asset-list-item"));

var _common = require("../../../helpers/constants/common");

var _useMetricEvent = require("../../../hooks/useMetricEvent");

var _useUserPreferencedCurrency = require("../../../hooks/useUserPreferencedCurrency");

var _selectors = require("../../../selectors");

var _metamask = require("../../../ducks/metamask/metamask");

var _useCurrencyDisplay = require("../../../hooks/useCurrencyDisplay");

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _box = _interopRequireDefault(require("../../ui/box/box"));

var _designSystem = require("../../../helpers/constants/design-system");

var _useI18nContext = require("../../../hooks/useI18nContext");

const AssetList = ({
  onClickAsset
}) => {
  var _primaryCurrencyPrope;

  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const selectedAccountBalance = (0, _reactRedux.useSelector)(state => (0, _selectors.getCurrentAccountWithSendEtherInfo)(state).balance);
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const selectTokenEvent = (0, _useMetricEvent.useMetricEvent)({
    eventOpts: {
      category: 'Navigation',
      action: 'Token Menu',
      name: 'Clicked Token'
    }
  });
  const addTokenEvent = (0, _useMetricEvent.useMetricEvent)({
    eventOpts: {
      category: 'Navigation',
      action: 'Token Menu',
      name: 'Clicked "Add Token"'
    }
  });
  const {
    currency: primaryCurrency,
    numberOfDecimals: primaryNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.PRIMARY, {
    ethNumberOfDecimals: 4
  });
  const {
    currency: secondaryCurrency,
    numberOfDecimals: secondaryNumberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.SECONDARY, {
    ethNumberOfDecimals: 4
  });
  const [, primaryCurrencyProperties] = (0, _useCurrencyDisplay.useCurrencyDisplay)(selectedAccountBalance, {
    numberOfDecimals: primaryNumberOfDecimals,
    currency: primaryCurrency
  });
  const [secondaryCurrencyDisplay, secondaryCurrencyProperties] = (0, _useCurrencyDisplay.useCurrencyDisplay)(selectedAccountBalance, {
    numberOfDecimals: secondaryNumberOfDecimals,
    currency: secondaryCurrency
  });
  const primaryTokenImage = (0, _reactRedux.useSelector)(_selectors.getNativeCurrencyImage);
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet) || process.env.IN_TEST;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_assetListItem.default, {
    onClick: () => onClickAsset(nativeCurrency),
    "data-testid": "wallet-balance",
    primary: (_primaryCurrencyPrope = primaryCurrencyProperties.value) !== null && _primaryCurrencyPrope !== void 0 ? _primaryCurrencyPrope : secondaryCurrencyProperties.value,
    tokenSymbol: primaryCurrencyProperties.suffix,
    secondary: showFiat ? secondaryCurrencyDisplay : undefined,
    tokenImage: primaryTokenImage,
    identiconBorder: true
  }), /*#__PURE__*/_react.default.createElement(_tokenList.default, {
    onTokenClick: tokenAddress => {
      onClickAsset(tokenAddress);
      selectTokenEvent();
    }
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.UI4,
    variant: _designSystem.TYPOGRAPHY.H6,
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL
  }, t('missingToken'))), /*#__PURE__*/_react.default.createElement(_importTokenLink.default, {
    isMainnet: isMainnet,
    onClick: () => {
      history.push(_routes.IMPORT_TOKEN_ROUTE);
      addTokenEvent();
    }
  })));
};

AssetList.propTypes = {
  onClickAsset: _propTypes.default.func.isRequired
};
var _default = AssetList;
exports.default = _default;

}).call(this)}).call(this,require('_process'))

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/asset-list/asset-list.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-footer/send-footer.component.js", {"../../../components/ui/page-container/page-container-footer":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/page-container-footer/index.js","../../../ducks/send":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/send/index.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","lodash":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/lodash.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-footer/send-footer.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _pageContainerFooter = _interopRequireDefault(require("../../../components/ui/page-container/page-container-footer"));

var _routes = require("../../../helpers/constants/routes");

var _send = require("../../../ducks/send");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SendFooter extends _react.Component {
  onCancel() {
    const {
      cancelTx,
      draftTransactionID,
      history,
      mostRecentOverviewPage,
      resetSendState,
      sendStage
    } = this.props;
    if (draftTransactionID) cancelTx({
      id: draftTransactionID
    });
    resetSendState();
    const nextRoute = sendStage === _send.SEND_STAGES.EDIT ? _routes.DEFAULT_ROUTE : mostRecentOverviewPage;
    history.push(nextRoute);
  }

  async onSubmit(event) {
    event.preventDefault();
    const {
      addToAddressBookIfNew,
      sign,
      to,
      toAccounts,
      history,
      gasEstimateType
    } = this.props;
    const {
      metricsEvent
    } = this.context; // TODO: add nickname functionality

    await addToAddressBookIfNew(to, toAccounts);
    const promise = sign();
    Promise.resolve(promise).then(() => {
      metricsEvent({
        eventOpts: {
          category: 'Transactions',
          action: 'Edit Screen',
          name: 'Complete'
        },
        customVariables: {
          gasChanged: gasEstimateType
        }
      });
      history.push(_routes.CONFIRM_TRANSACTION_ROUTE);
    });
  }

  componentDidUpdate(prevProps) {
    const {
      sendErrors
    } = this.props;
    const {
      metricsEvent
    } = this.context;

    if (Object.keys(sendErrors).length > 0 && (0, _lodash.isEqual)(sendErrors, prevProps.sendErrors) === false) {
      const errorField = Object.keys(sendErrors).find(key => sendErrors[key]);
      const errorMessage = sendErrors[errorField];
      metricsEvent({
        eventOpts: {
          category: 'Transactions',
          action: 'Edit Screen',
          name: 'Error'
        },
        customVariables: {
          errorField,
          errorMessage
        }
      });
    }
  }

  render() {
    const {
      t
    } = this.context;
    const {
      sendStage
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: () => this.onCancel(),
      onSubmit: e => this.onSubmit(e),
      disabled: this.props.disabled,
      cancelText: sendStage === _send.SEND_STAGES.EDIT ? t('reject') : t('cancel')
    });
  }

}

exports.default = SendFooter;
(0, _defineProperty2.default)(SendFooter, "propTypes", {
  addToAddressBookIfNew: _propTypes.default.func,
  resetSendState: _propTypes.default.func,
  disabled: _propTypes.default.bool.isRequired,
  history: _propTypes.default.object,
  sign: _propTypes.default.func,
  to: _propTypes.default.string,
  toAccounts: _propTypes.default.array,
  sendStage: _propTypes.default.string,
  sendErrors: _propTypes.default.object,
  gasEstimateType: _propTypes.default.string,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  cancelTx: _propTypes.default.func,
  draftTransactionID: _propTypes.default.string
});
(0, _defineProperty2.default)(SendFooter, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-footer/send-footer.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/add-recipient/ens-input.component.js", {"../../../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/add-recipient/ens-input.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _util = require("../../../../helpers/utils/util");

var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class EnsInput extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onPaste", event => {
      var _event$clipboardData$;

      if ((_event$clipboardData$ = event.clipboardData.items) !== null && _event$clipboardData$ !== void 0 && _event$clipboardData$.length) {
        const clipboardItem = event.clipboardData.items[0];
        clipboardItem === null || clipboardItem === void 0 ? void 0 : clipboardItem.getAsString(text => {
          const input = text.trim();

          if (!(0, _hexstringUtils.isBurnAddress)(input) && (0, _hexstringUtils.isValidHexAddress)(input, {
            mixedCaseUseChecksum: true
          })) {
            this.props.onPaste(input);
          }
        });
      }
    });
    (0, _defineProperty2.default)(this, "onChange", ({
      target: {
        value
      }
    }) => {
      const {
        onValidAddressTyped,
        internalSearch,
        onChange,
        lookupEnsName,
        resetEnsResolution
      } = this.props;
      const input = value.trim();
      onChange(input);

      if (internalSearch) {
        return null;
      } // Empty ENS state if input is empty
      // maybe scan ENS


      if ((0, _util.isValidDomainName)(input)) {
        lookupEnsName(input);
      } else {
        resetEnsResolution();

        if (onValidAddressTyped && !(0, _hexstringUtils.isBurnAddress)(input) && (0, _hexstringUtils.isValidHexAddress)(input, {
          mixedCaseUseChecksum: true
        })) {
          onValidAddressTyped(input);
        }
      }

      return null;
    });
  }

  componentDidMount() {
    this.props.initializeEnsSlice();
  }

  render() {
    const {
      t
    } = this.context;
    const {
      className,
      selectedAddress,
      selectedName,
      userInput
    } = this.props;
    const hasSelectedAddress = Boolean(selectedAddress);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('ens-input', className)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('ens-input__wrapper', {
        'ens-input__wrapper__status-icon--error': false,
        'ens-input__wrapper__status-icon--valid': false,
        'ens-input__wrapper--valid': hasSelectedAddress
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('ens-input__wrapper__status-icon', {
        'ens-input__wrapper__status-icon--valid': hasSelectedAddress
      })
    }), hasSelectedAddress ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "ens-input__wrapper__input ens-input__wrapper__input--selected"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "ens-input__selected-input__title"
    }, selectedName || selectedAddress), selectedName !== selectedAddress && /*#__PURE__*/_react.default.createElement("div", {
      className: "ens-input__selected-input__subtitle"
    }, selectedAddress)), /*#__PURE__*/_react.default.createElement("div", {
      className: "ens-input__wrapper__action-icon ens-input__wrapper__action-icon--erase",
      onClick: this.props.onReset
    })) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("input", {
      className: "ens-input__wrapper__input",
      type: "text",
      dir: "auto",
      placeholder: t('recipientAddressPlaceholder'),
      onChange: this.onChange,
      onPaste: this.onPaste,
      spellCheck: "false",
      value: selectedAddress || userInput,
      autoFocus: true,
      "data-testid": "ens-input"
    }), /*#__PURE__*/_react.default.createElement("button", {
      className: (0, _classnames.default)('ens-input__wrapper__action-icon', {
        'ens-input__wrapper__action-icon--erase': userInput,
        'ens-input__wrapper__action-icon--qrcode': !userInput
      }),
      onClick: () => {
        if (userInput) {
          this.props.onReset();
        } else {
          this.props.scanQrCode();
        }
      }
    }))));
  }

}

exports.default = EnsInput;
(0, _defineProperty2.default)(EnsInput, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(EnsInput, "propTypes", {
  className: _propTypes.default.string,
  selectedAddress: _propTypes.default.string,
  selectedName: _propTypes.default.string,
  scanQrCode: _propTypes.default.func,
  onPaste: _propTypes.default.func,
  onValidAddressTyped: _propTypes.default.func,
  internalSearch: _propTypes.default.bool,
  userInput: _propTypes.default.string,
  onChange: _propTypes.default.func.isRequired,
  onReset: _propTypes.default.func.isRequired,
  lookupEnsName: _propTypes.default.func.isRequired,
  initializeEnsSlice: _propTypes.default.func.isRequired,
  resetEnsResolution: _propTypes.default.func.isRequired
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/add-recipient/ens-input.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/add-recipient/add-recipient.component.js", {"../../../../components/app/contact-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/contact-list/index.js","../../../../components/app/contact-list/recipient-group/recipient-group.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/contact-list/recipient-group/recipient-group.component.js","../../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../../components/ui/confusable":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/confusable/index.js","../../../../components/ui/dialog":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/dialog/index.js","../../../../components/ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../send.utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send.utils.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","fuse.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/fuse.js/dist/fuse.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/add-recipient/add-recipient.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fuse = _interopRequireDefault(require("fuse.js"));

var _identicon = _interopRequireDefault(require("../../../../components/ui/identicon"));

var _dialog = _interopRequireDefault(require("../../../../components/ui/dialog"));

var _contactList = _interopRequireDefault(require("../../../../components/app/contact-list"));

var _recipientGroup = _interopRequireDefault(require("../../../../components/app/contact-list/recipient-group/recipient-group.component"));

var _send = require("../../send.utils");

var _button = _interopRequireDefault(require("../../../../components/ui/button"));

var _confusable = _interopRequireDefault(require("../../../../components/ui/confusable"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class AddRecipient extends _react.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "selectRecipient", (address, nickname = '') => {
      this.props.updateRecipient({
        address,
        nickname
      });
    });
    (0, _defineProperty2.default)(this, "searchForContacts", () => {
      const {
        userInput,
        contacts
      } = this.props;
      let _contacts = contacts;

      if (userInput) {
        this.contactFuse.setCollection(contacts);
        _contacts = this.contactFuse.search(userInput);
      }

      return _contacts;
    });
    (0, _defineProperty2.default)(this, "searchForRecents", () => {
      const {
        userInput,
        nonContacts
      } = this.props;
      let _nonContacts = nonContacts;

      if (userInput) {
        this.recentFuse.setCollection(nonContacts);
        _nonContacts = this.recentFuse.search(userInput);
      }

      return _nonContacts;
    });
    this.recentFuse = new _fuse.default(props.nonContacts, {
      shouldSort: true,
      threshold: 0.45,
      location: 0,
      distance: 100,
      maxPatternLength: 32,
      minMatchCharLength: 1,
      keys: [{
        name: 'address',
        weight: 0.5
      }]
    });
    this.contactFuse = new _fuse.default(props.contacts, {
      shouldSort: true,
      threshold: 0.45,
      location: 0,
      distance: 100,
      maxPatternLength: 32,
      minMatchCharLength: 1,
      keys: [{
        name: 'name',
        weight: 0.5
      }, {
        name: 'address',
        weight: 0.5
      }]
    });
  }

  render() {
    const {
      ensResolution,
      recipient,
      userInput,
      addressBookEntryName,
      isUsingMyAccountsForRecipientSearch
    } = this.props;
    let content;

    if (recipient.address) {
      content = this.renderExplicitAddress(recipient.address, recipient.nickname);
    } else if (ensResolution) {
      content = this.renderExplicitAddress(ensResolution, addressBookEntryName || userInput);
    } else if (isUsingMyAccountsForRecipientSearch) {
      content = this.renderTransfer();
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper"
    }, this.renderDialogs(), content || this.renderMain());
  }

  renderExplicitAddress(address, name) {
    return /*#__PURE__*/_react.default.createElement("div", {
      key: address,
      className: "send__select-recipient-wrapper__group-item",
      onClick: () => this.selectRecipient(address, name)
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: address,
      diameter: 28
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper__group-item__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper__group-item__title"
    }, name ? /*#__PURE__*/_react.default.createElement(_confusable.default, {
      input: name
    }) : (0, _send.ellipsify)(address)), name && /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper__group-item__subtitle"
    }, (0, _send.ellipsify)(address))));
  }

  renderTransfer() {
    let {
      ownedAccounts
    } = this.props;
    const {
      userInput,
      useContactListForRecipientSearch,
      isUsingMyAccountsForRecipientSearch
    } = this.props;
    const {
      t
    } = this.context;

    if (isUsingMyAccountsForRecipientSearch && userInput) {
      ownedAccounts = ownedAccounts.filter(item => item.name.toLowerCase().indexOf(userInput.toLowerCase()) > -1 || item.address.toLowerCase().indexOf(userInput.toLowerCase()) > -1);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper__list"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "send__select-recipient-wrapper__list__link",
      onClick: useContactListForRecipientSearch
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper__list__back-caret"
    }), t('backToAll')), /*#__PURE__*/_react.default.createElement(_recipientGroup.default, {
      label: t('myAccounts'),
      items: ownedAccounts,
      onSelect: this.selectRecipient
    }));
  }

  renderMain() {
    const {
      t
    } = this.context;
    const {
      userInput,
      ownedAccounts = [],
      addressBook,
      useMyAccountsForRecipientSearch
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper__list"
    }, /*#__PURE__*/_react.default.createElement(_contactList.default, {
      addressBook: addressBook,
      searchForContacts: this.searchForContacts.bind(this),
      searchForRecents: this.searchForRecents.bind(this),
      selectRecipient: this.selectRecipient.bind(this)
    }, ownedAccounts && ownedAccounts.length > 1 && !userInput && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "send__select-recipient-wrapper__list__link",
      onClick: useMyAccountsForRecipientSearch
    }, t('transferBetweenAccounts'))));
  }

  renderDialogs() {
    const {
      ensError,
      recipient,
      ensWarning
    } = this.props;
    const {
      t
    } = this.context;

    if (ensError || recipient.error && recipient.error !== 'required') {
      return /*#__PURE__*/_react.default.createElement(_dialog.default, {
        type: "error",
        className: "send__error-dialog"
      }, t(ensError !== null && ensError !== void 0 ? ensError : recipient.error));
    } else if (ensWarning || recipient.warning) {
      return /*#__PURE__*/_react.default.createElement(_dialog.default, {
        type: "warning",
        className: "send__error-dialog"
      }, t(ensWarning !== null && ensWarning !== void 0 ? ensWarning : recipient.warning));
    }

    return null;
  }

}

exports.default = AddRecipient;
(0, _defineProperty2.default)(AddRecipient, "propTypes", {
  userInput: _propTypes.default.string,
  ownedAccounts: _propTypes.default.array,
  addressBook: _propTypes.default.array,
  updateRecipient: _propTypes.default.func,
  ensResolution: _propTypes.default.string,
  ensError: _propTypes.default.string,
  ensWarning: _propTypes.default.string,
  addressBookEntryName: _propTypes.default.string,
  contacts: _propTypes.default.array,
  nonContacts: _propTypes.default.array,
  useMyAccountsForRecipientSearch: _propTypes.default.func,
  useContactListForRecipientSearch: _propTypes.default.func,
  isUsingMyAccountsForRecipientSearch: _propTypes.default.bool,
  recipient: _propTypes.default.shape({
    address: _propTypes.default.string,
    nickname: _propTypes.default.nickname,
    error: _propTypes.default.string,
    warning: _propTypes.default.string
  })
});
(0, _defineProperty2.default)(AddRecipient, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/add-recipient/add-recipient.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-content.component.js", {"../../../components/app/modals/nickname-popovers":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/nickname-popovers/index.js","../../../components/ui/dialog":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/dialog/index.js","../../../components/ui/page-container/page-container-content.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/page-container-content.component.js","../../../ducks/send":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/send/index.js","../../../helpers/constants/error-keys":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/error-keys.js","./send-amount-row":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/index.js","./send-asset-row":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-asset-row/index.js","./send-gas-row":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-gas-row/index.js","./send-hex-data-row":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-hex-data-row/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-content.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _pageContainerContent = _interopRequireDefault(require("../../../components/ui/page-container/page-container-content.component"));

var _dialog = _interopRequireDefault(require("../../../components/ui/dialog"));

var _nicknamePopovers = _interopRequireDefault(require("../../../components/app/modals/nickname-popovers"));

var _errorKeys = require("../../../helpers/constants/error-keys");

var _send = require("../../../ducks/send");

var _sendAmountRow = _interopRequireDefault(require("./send-amount-row"));

var _sendHexDataRow = _interopRequireDefault(require("./send-hex-data-row"));

var _sendAssetRow = _interopRequireDefault(require("./send-asset-row"));

var _sendGasRow = _interopRequireDefault(require("./send-gas-row"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SendContent extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      showNicknamePopovers: false
    });
  }

  render() {
    const {
      warning,
      error,
      gasIsExcessive,
      isEthGasPrice,
      noGasPrice,
      isAssetSendable,
      networkOrAccountNotSupports1559,
      getIsBalanceInsufficient,
      asset
    } = this.props;
    let gasError;
    if (gasIsExcessive) gasError = _errorKeys.GAS_PRICE_EXCESSIVE_ERROR_KEY;else if (noGasPrice) gasError = _errorKeys.GAS_PRICE_FETCH_FAILURE_ERROR_KEY;else if (getIsBalanceInsufficient) gasError = _errorKeys.INSUFFICIENT_FUNDS_FOR_GAS_ERROR_KEY;
    const showHexData = this.props.showHexData && asset.type !== _send.ASSET_TYPES.TOKEN;
    return /*#__PURE__*/_react.default.createElement(_pageContainerContent.default, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__form"
    }, gasError ? this.renderError(gasError) : null, isEthGasPrice ? this.renderWarning(_errorKeys.ETH_GAS_PRICE_FETCH_WARNING_KEY) : null, isAssetSendable === false ? this.renderError(_errorKeys.UNSENDABLE_ASSET_ERROR_KEY) : null, error ? this.renderError(error) : null, warning ? this.renderWarning() : null, this.maybeRenderAddContact(), /*#__PURE__*/_react.default.createElement(_sendAssetRow.default, null), /*#__PURE__*/_react.default.createElement(_sendAmountRow.default, null), networkOrAccountNotSupports1559 ? /*#__PURE__*/_react.default.createElement(_sendGasRow.default, null) : null, showHexData ? /*#__PURE__*/_react.default.createElement(_sendHexDataRow.default, null) : null));
  }

  maybeRenderAddContact() {
    const {
      t
    } = this.context;
    const {
      isOwnedAccount,
      contact = {},
      to
    } = this.props;
    const {
      showNicknamePopovers
    } = this.state;

    if (isOwnedAccount || contact.name) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_dialog.default, {
      type: "message",
      className: "send__dialog",
      onClick: () => this.setState({
        showNicknamePopovers: true
      })
    }, t('newAccountDetectedDialogMessage')), showNicknamePopovers ? /*#__PURE__*/_react.default.createElement(_nicknamePopovers.default, {
      onClose: () => this.setState({
        showNicknamePopovers: false
      }),
      address: to
    }) : null);
  }

  renderWarning(gasWarning = '') {
    const {
      t
    } = this.context;
    const {
      warning
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_dialog.default, {
      type: "warning",
      className: "send__error-dialog"
    }, gasWarning === '' ? t(warning) : t(gasWarning));
  }

  renderError(error) {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_dialog.default, {
      type: "error",
      className: "send__error-dialog"
    }, t(error));
  }

}

exports.default = SendContent;
(0, _defineProperty2.default)(SendContent, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(SendContent, "propTypes", {
  isAssetSendable: _propTypes.default.bool,
  showHexData: _propTypes.default.bool,
  contact: _propTypes.default.object,
  isOwnedAccount: _propTypes.default.bool,
  warning: _propTypes.default.string,
  error: _propTypes.default.string,
  gasIsExcessive: _propTypes.default.bool.isRequired,
  isEthGasPrice: _propTypes.default.bool,
  noGasPrice: _propTypes.default.bool,
  networkOrAccountNotSupports1559: _propTypes.default.bool,
  getIsBalanceInsufficient: _propTypes.default.bool,
  asset: _propTypes.default.object,
  to: _propTypes.default.string
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-content.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-token-transaction-base/confirm-token-transaction-base.container.js", {"../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../helpers/utils/token-util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/token-util.js","../../helpers/utils/transactions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/transactions.util.js","../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","./confirm-token-transaction-base.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-token-transaction-base/confirm-token-transaction-base.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-token-transaction-base/confirm-token-transaction-base.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _selectors = require("../../selectors");

var _metamask = require("../../ducks/metamask/metamask");

var _transactions = require("../../helpers/utils/transactions.util");

var _tokenUtil = require("../../helpers/utils/token-util");

var _conversions = require("../../helpers/utils/conversions.util");

var _util = require("../../helpers/utils/util");

var _confirmTokenTransactionBase = _interopRequireDefault(require("./confirm-token-transaction-base.component"));

const mapStateToProps = (state, ownProps) => {
  const {
    match: {
      params = {}
    }
  } = ownProps;
  const {
    id: paramsTransactionId
  } = params;
  const {
    confirmTransaction,
    metamask: {
      currentCurrency,
      conversionRate,
      currentNetworkTxList,
      nativeCurrency
    }
  } = state;
  const {
    txData: {
      id: transactionId,
      txParams: {
        to: tokenAddress,
        data
      } = {}
    } = {}
  } = confirmTransaction;
  const transaction = currentNetworkTxList.find(({
    id
  }) => id === (Number(paramsTransactionId) || transactionId)) || {};
  const {
    ethTransactionTotal,
    fiatTransactionTotal,
    hexMaximumTransactionFee
  } = (0, _selectors.transactionFeeSelector)(state, transaction);
  const tokens = (0, _metamask.getTokens)(state);
  const currentToken = tokens === null || tokens === void 0 ? void 0 : tokens.find(({
    address
  }) => (0, _util.isEqualCaseInsensitive)(tokenAddress, address));
  const {
    decimals,
    symbol: tokenSymbol
  } = currentToken || {};
  const ethTransactionTotalMaxAmount = Number((0, _conversions.hexWEIToDecETH)(hexMaximumTransactionFee)).toFixed(6);
  const tokenData = (0, _transactions.getTokenData)(data);
  const tokenValue = (0, _tokenUtil.getTokenValueParam)(tokenData);
  const toAddress = (0, _tokenUtil.getTokenAddressParam)(tokenData);
  const tokenAmount = tokenData && (0, _tokenUtil.calcTokenAmount)(tokenValue, decimals).toFixed();
  const contractExchangeRate = (0, _selectors.contractExchangeRateSelector)(state);
  return {
    toAddress,
    tokenAddress,
    tokenAmount,
    tokenSymbol,
    currentCurrency,
    conversionRate,
    contractExchangeRate,
    fiatTransactionTotal,
    ethTransactionTotal,
    ethTransactionTotalMaxAmount,
    nativeCurrency
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps))(_confirmTokenTransactionBase.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-token-transaction-base/confirm-token-transaction-base.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-token-transaction-base/confirm-token-transaction-base.component.js", {"../../components/app/user-preferenced-currency-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-display/index.js","../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../helpers/utils/confirm-tx.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/confirm-tx.util.js","../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../confirm-transaction-base":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","bignumber.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/bignumber.js/bignumber.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-token-transaction-base/confirm-token-transaction-base.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmTokenTransactionBase;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _i18n = require("../../contexts/i18n");

var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../components/app/user-preferenced-currency-display"));

var _confirmTx = require("../../helpers/utils/confirm-tx.util");

var _conversions = require("../../helpers/utils/conversions.util");

var _common = require("../../helpers/constants/common");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ConfirmTokenTransactionBase({
  toAddress,
  tokenAddress,
  tokenAmount = '0',
  tokenSymbol,
  fiatTransactionTotal,
  ethTransactionTotal,
  ethTransactionTotalMaxAmount,
  contractExchangeRate,
  conversionRate,
  currentCurrency,
  nativeCurrency,
  onEdit
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const hexWeiValue = (0, _react.useMemo)(() => {
    if (tokenAmount === '0' || !contractExchangeRate) {
      return '0';
    }

    const decimalEthValue = new _bignumber.default(tokenAmount).times(new _bignumber.default(contractExchangeRate ? String(contractExchangeRate) : 0)).toFixed();
    return (0, _conversions.getWeiHexFromDecimalValue)({
      value: decimalEthValue,
      fromCurrency: _common.ETH,
      fromDenomination: _common.ETH
    });
  }, [tokenAmount, contractExchangeRate]);
  const secondaryTotalTextOverride = (0, _react.useMemo)(() => {
    if (typeof contractExchangeRate === 'undefined') {
      return (0, _confirmTx.formatCurrency)(fiatTransactionTotal, currentCurrency);
    }

    const fiatTransactionAmount = (0, _confirmTx.convertTokenToFiat)({
      value: tokenAmount,
      toCurrency: currentCurrency,
      conversionRate,
      contractExchangeRate
    });
    const fiatTotal = (0, _confirmTx.addFiat)(fiatTransactionAmount, fiatTransactionTotal);
    const roundedFiatTotal = (0, _confirmTx.roundExponential)(fiatTotal);
    return (0, _confirmTx.formatCurrency)(roundedFiatTotal, currentCurrency);
  }, [currentCurrency, conversionRate, contractExchangeRate, fiatTransactionTotal, tokenAmount]);
  const tokensText = `${tokenAmount} ${tokenSymbol}`;
  return /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
    toAddress: toAddress,
    onEdit: onEdit,
    identiconAddress: tokenAddress,
    title: tokensText,
    subtitleComponent: contractExchangeRate === undefined ? /*#__PURE__*/_react.default.createElement("span", null, t('noConversionRateAvailable')) : /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      value: hexWeiValue,
      type: _common.PRIMARY,
      showEthLogo: true,
      hideLabel: true
    }),
    primaryTotalTextOverride: `${tokensText} + ${ethTransactionTotal} ${nativeCurrency}`,
    primaryTotalTextOverrideMaxAmount: `${tokensText} + ${ethTransactionTotalMaxAmount} ${nativeCurrency}`,
    secondaryTotalTextOverride: secondaryTotalTextOverride
  });
}

ConfirmTokenTransactionBase.propTypes = {
  tokenAddress: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  tokenAmount: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  fiatTransactionTotal: _propTypes.default.string,
  ethTransactionTotal: _propTypes.default.string,
  contractExchangeRate: _propTypes.default.number,
  conversionRate: _propTypes.default.number,
  currentCurrency: _propTypes.default.string,
  onEdit: _propTypes.default.func,
  nativeCurrency: _propTypes.default.string,
  ethTransactionTotalMaxAmount: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-token-transaction-base/confirm-token-transaction-base.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-switch/confirm-transaction-switch.container.js", {"../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","./confirm-transaction-switch.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-switch/confirm-transaction-switch.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-switch/confirm-transaction-switch.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../selectors");

var _confirmTransactionSwitch = _interopRequireDefault(require("./confirm-transaction-switch.component"));

const mapStateToProps = (state, ownProps) => {
  const {
    metamask: {
      unapprovedTxs
    }
  } = state;
  const {
    match: {
      params = {},
      url
    }
  } = ownProps;
  const urlId = (url === null || url === void 0 ? void 0 : url.match(/\d+/u)) && (url === null || url === void 0 ? void 0 : url.match(/\d+/u)[0]);
  const {
    id: paramsId
  } = params;
  const transactionId = paramsId || urlId;
  const unconfirmedTransactions = (0, _selectors.unconfirmedTransactionsListSelector)(state);
  const totalUnconfirmed = unconfirmedTransactions.length;
  const transaction = totalUnconfirmed ? unapprovedTxs[transactionId] || unconfirmedTransactions[0] : {};
  return {
    txData: transaction
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_confirmTransactionSwitch.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-switch/confirm-transaction-switch.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-send-token/confirm-send-token.container.js", {"../../ducks/confirm-transaction/confirm-transaction.duck":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/confirm-transaction/confirm-transaction.duck.js","../../ducks/send":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/send/index.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./confirm-send-token.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-send-token/confirm-send-token.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-send-token/confirm-send-token.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _actions = require("../../store/actions");

var _send = require("../../ducks/send");

var _selectors = require("../../selectors");

var _confirmSendToken = _interopRequireDefault(require("./confirm-send-token.component"));

const mapStateToProps = state => {
  const {
    tokenAmount
  } = (0, _selectors.sendTokenTokenAmountAndToAddressSelector)(state);
  return {
    tokenAmount
  };
};

const mapDispatchToProps = dispatch => {
  return {
    editTransaction: ({
      txData,
      tokenData,
      tokenProps: assetDetails
    }) => {
      const {
        id
      } = txData;
      dispatch((0, _send.editTransaction)(_send.ASSET_TYPES.TOKEN, id.toString(), tokenData, assetDetails));
      dispatch((0, _confirmTransaction.clearConfirmTransaction)());
      dispatch((0, _actions.showSendTokenPage)());
    }
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmSendToken.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-send-token/confirm-send-token.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-send-ether/confirm-send-ether.container.js", {"../../ducks/confirm-transaction/confirm-transaction.duck":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/confirm-transaction/confirm-transaction.duck.js","../../ducks/send":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/send/index.js","./confirm-send-ether.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-send-ether/confirm-send-ether.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-send-ether/confirm-send-ether.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _send = require("../../ducks/send");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _confirmSendEther = _interopRequireDefault(require("./confirm-send-ether.component"));

const mapStateToProps = state => {
  const {
    confirmTransaction: {
      txData: {
        txParams
      } = {}
    }
  } = state;
  return {
    txParams
  };
};

const mapDispatchToProps = dispatch => {
  return {
    editTransaction: async txData => {
      const {
        id
      } = txData;
      await dispatch((0, _send.editTransaction)(_send.ASSET_TYPES.NATIVE, id.toString()));
      dispatch((0, _confirmTransaction.clearConfirmTransaction)());
    }
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmSendEther.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-send-ether/confirm-send-ether.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-deploy-contract/confirm-deploy-contract.container.js", {"./confirm-deploy-contract.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-deploy-contract/confirm-deploy-contract.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-deploy-contract/confirm-deploy-contract.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _confirmDeployContract = _interopRequireDefault(require("./confirm-deploy-contract.component"));

const mapStateToProps = state => {
  const {
    confirmTransaction: {
      txData
    } = {}
  } = state;
  return {
    txData
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_confirmDeployContract.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-deploy-contract/confirm-deploy-contract.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-encryption-public-key/confirm-encryption-public-key.container.js", {"../../ducks/confirm-transaction/confirm-transaction.duck":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/confirm-transaction/confirm-transaction.duck.js","../../ducks/history/history":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/history/history.js","../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./confirm-encryption-public-key.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-encryption-public-key/confirm-encryption-public-key.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-encryption-public-key/confirm-encryption-public-key.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../store/actions");

var _selectors = require("../../selectors");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _history = require("../../ducks/history/history");

var _metamask = require("../../ducks/metamask/metamask");

var _confirmEncryptionPublicKey = _interopRequireDefault(require("./confirm-encryption-public-key.component"));

function mapStateToProps(state) {
  const {
    metamask: {
      subjectMetadata = {}
    }
  } = state;
  const unconfirmedTransactions = (0, _selectors.unconfirmedTransactionsListSelector)(state);
  const txData = unconfirmedTransactions[0];
  const {
    msgParams: from
  } = txData;
  const fromAccount = (0, _selectors.getTargetAccountWithSendEtherInfo)(state, from);
  return {
    txData,
    subjectMetadata,
    fromAccount,
    requester: null,
    requesterAddress: null,
    conversionRate: (0, _selectors.conversionRateSelector)(state),
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    nativeCurrency: (0, _metamask.getNativeCurrency)(state)
  };
}

function mapDispatchToProps(dispatch) {
  return {
    goHome: () => dispatch((0, _actions.goHome)()),
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    encryptionPublicKey: (msgData, event) => {
      const params = {
        data: msgData.msgParams,
        metamaskId: msgData.id
      };
      event.stopPropagation();
      return dispatch((0, _actions.encryptionPublicKeyMsg)(params));
    },
    cancelEncryptionPublicKey: (msgData, event) => {
      event.stopPropagation();
      return dispatch((0, _actions.cancelEncryptionPublicKeyMsg)(msgData));
    }
  };
}

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmEncryptionPublicKey.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-encryption-public-key/confirm-encryption-public-key.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-approve/confirm-approve.js", {"../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../shared/modules/contract-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/contract-utils.js","../../components/app/advanced-gas-fee-popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/index.js","../../components/app/edit-gas-fee-popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/index.js","../../components/app/edit-gas-popover/edit-gas-popover.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-popover/edit-gas-popover.component.js","../../components/ui/loading-screen":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/loading-screen/index.js","../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../contexts/transaction-modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/transaction-modal.js","../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../helpers/utils/token-util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/token-util.js","../../helpers/utils/transactions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/transactions.util.js","../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../hooks/useApproveTransaction":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useApproveTransaction.js","../../hooks/useTokenTracker":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenTracker.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../selectors/transactions":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/transactions.js","../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","../confirm-transaction-base":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/index.js","./confirm-approve-content":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-approve/confirm-approve-content/index.js","./confirm-approve.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-approve/confirm-approve.util.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-approve/confirm-approve.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmApprove;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _confirmTransactionBase = _interopRequireDefault(require("../confirm-transaction-base"));

var _gas = require("../../../shared/constants/gas");

var _actions = require("../../store/actions");

var _transactions = require("../../helpers/utils/transactions.util");

var _tokenUtil = require("../../helpers/utils/token-util");

var _contractUtils = require("../../../shared/modules/contract-utils");

var _gasFee = require("../../contexts/gasFee");

var _transactionModal = require("../../contexts/transaction-modal");

var _useTokenTracker = require("../../hooks/useTokenTracker");

var _metamask = require("../../ducks/metamask/metamask");

var _selectors = require("../../selectors");

var _useApproveTransaction = require("../../hooks/useApproveTransaction");

var _transactions2 = require("../../selectors/transactions");

var _advancedGasFeePopover = _interopRequireDefault(require("../../components/app/advanced-gas-fee-popover"));

var _editGasFeePopover = _interopRequireDefault(require("../../components/app/edit-gas-fee-popover"));

var _editGasPopover = _interopRequireDefault(require("../../components/app/edit-gas-popover/edit-gas-popover.component"));

var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));

var _util = require("../../helpers/utils/util");

var _confirmApprove = require("./confirm-approve.util");

var _confirmApproveContent = _interopRequireDefault(require("./confirm-approve-content"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const isAddressLedgerByFromAddress = address => state => {
  return (0, _metamask.isAddressLedger)(state, address);
}; // eslint-disable-next-line prefer-destructuring


const EIP_1559_V2_ENABLED = false === true || false === 'true';

function ConfirmApprove() {
  var _tokensWithBalances$;

  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    id: paramsTransactionId
  } = (0, _reactRouterDom.useParams)();
  const {
    id: transactionId,
    txParams: {
      to: tokenAddress,
      data,
      from
    } = {}
  } = (0, _reactRedux.useSelector)(_selectors.txDataSelector);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const currentNetworkTxList = (0, _reactRedux.useSelector)(_transactions2.currentNetworkTxListSelector);
  const subjectMetadata = (0, _reactRedux.useSelector)(_selectors.getSubjectMetadata);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const useNonceField = (0, _reactRedux.useSelector)(_selectors.getUseNonceField);
  const nextNonce = (0, _reactRedux.useSelector)(_selectors.getNextSuggestedNonce);
  const customNonceValue = (0, _reactRedux.useSelector)(_selectors.getCustomNonceValue);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const isMultiLayerFeeNetwork = (0, _reactRedux.useSelector)(_selectors.getIsMultiLayerFeeNetwork);
  const networkAndAccountSupports1559 = (0, _reactRedux.useSelector)(_selectors.checkNetworkAndAccountSupports1559);
  const fromAddressIsLedger = (0, _reactRedux.useSelector)(isAddressLedgerByFromAddress(from));
  const transaction = currentNetworkTxList.find(({
    id
  }) => id === (Number(paramsTransactionId) || transactionId)) || {};
  const {
    ethTransactionTotal,
    fiatTransactionTotal,
    hexTransactionTotal
  } = (0, _reactRedux.useSelector)(state => (0, _selectors.transactionFeeSelector)(state, transaction));
  const supportsEIP1559V2 = EIP_1559_V2_ENABLED && networkAndAccountSupports1559;
  const currentToken = tokens && tokens.find(({
    address
  }) => (0, _util.isEqualCaseInsensitive)(tokenAddress, address)) || {
    address: tokenAddress
  };
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)([currentToken]);
  const tokenTrackerBalance = ((_tokensWithBalances$ = tokensWithBalances[0]) === null || _tokensWithBalances$ === void 0 ? void 0 : _tokensWithBalances$.balance) || '';
  const tokenSymbol = currentToken === null || currentToken === void 0 ? void 0 : currentToken.symbol;
  const decimals = Number(currentToken === null || currentToken === void 0 ? void 0 : currentToken.decimals);
  const tokenImage = currentToken === null || currentToken === void 0 ? void 0 : currentToken.image;
  const tokenData = (0, _transactions.getTokenData)(data);
  const tokenValue = (0, _tokenUtil.getTokenValueParam)(tokenData);
  const toAddress = (0, _tokenUtil.getTokenAddressParam)(tokenData);
  const tokenAmount = tokenData && (0, _tokenUtil.calcTokenAmount)(tokenValue, decimals).toString(10);
  const [customPermissionAmount, setCustomPermissionAmount] = (0, _react.useState)('');
  const previousTokenAmount = (0, _react.useRef)(tokenAmount);
  const {
    approveTransaction,
    showCustomizeGasPopover,
    closeCustomizeGasPopover
  } = (0, _useApproveTransaction.useApproveTransaction)();
  (0, _react.useEffect)(() => {
    if (customPermissionAmount && previousTokenAmount.current !== tokenAmount) {
      setCustomPermissionAmount(tokenAmount);
    }

    previousTokenAmount.current = tokenAmount;
  }, [customPermissionAmount, tokenAmount]);
  const [submitWarning, setSubmitWarning] = (0, _react.useState)('');
  const prevNonce = (0, _react.useRef)(nextNonce);
  const prevCustomNonce = (0, _react.useRef)(customNonceValue);
  (0, _react.useEffect)(() => {
    if (prevNonce.current !== nextNonce || prevCustomNonce.current !== customNonceValue) {
      if (nextNonce !== null && customNonceValue > nextNonce) {
        setSubmitWarning(`Nonce is higher than suggested nonce of ${nextNonce}`);
      } else {
        setSubmitWarning('');
      }
    }

    prevCustomNonce.current = customNonceValue;
    prevNonce.current = nextNonce;
  }, [customNonceValue, nextNonce]);
  const [isContract, setIsContract] = (0, _react.useState)(false);
  const checkIfContract = (0, _react.useCallback)(async () => {
    const {
      isContractAddress
    } = await (0, _contractUtils.readAddressAsContract)(global.eth, toAddress);
    setIsContract(isContractAddress);
  }, [setIsContract, toAddress]);
  (0, _react.useEffect)(() => {
    checkIfContract();
  }, [checkIfContract]);
  const {
    origin
  } = transaction;
  const formattedOrigin = origin || '';
  const {
    iconUrl: siteImage = ''
  } = subjectMetadata[origin] || {};
  const tokensText = `${Number(tokenAmount)} ${tokenSymbol}`;
  const tokenBalance = tokenTrackerBalance ? (0, _tokenUtil.calcTokenAmount)(tokenTrackerBalance, decimals).toString(10) : '';
  const customData = customPermissionAmount ? (0, _confirmApprove.getCustomTxParamsData)(data, {
    customPermissionAmount,
    decimals
  }) : null;
  return tokenSymbol === undefined ? /*#__PURE__*/_react.default.createElement(_loadingScreen.default, null) : /*#__PURE__*/_react.default.createElement(_gasFee.GasFeeContextProvider, {
    transaction: transaction
  }, /*#__PURE__*/_react.default.createElement(_confirmTransactionBase.default, {
    toAddress: toAddress,
    identiconAddress: tokenAddress,
    showAccountInHeader: true,
    title: tokensText,
    contentComponent: /*#__PURE__*/_react.default.createElement(_transactionModal.TransactionModalContextProvider, {
      captureEventEnabled: false
    }, /*#__PURE__*/_react.default.createElement(_confirmApproveContent.default, {
      decimals: decimals,
      siteImage: siteImage,
      setCustomAmount: setCustomPermissionAmount,
      customTokenAmount: String(customPermissionAmount),
      tokenAmount: tokenAmount,
      origin: formattedOrigin,
      tokenSymbol: tokenSymbol,
      tokenImage: tokenImage,
      tokenBalance: tokenBalance,
      showCustomizeGasModal: approveTransaction,
      showEditApprovalPermissionModal: ({
        /* eslint-disable no-shadow */
        customTokenAmount,
        decimals,
        origin,
        setCustomAmount,
        tokenAmount,
        tokenBalance,
        tokenSymbol
        /* eslint-enable no-shadow */

      }) => dispatch((0, _actions.showModal)({
        name: 'EDIT_APPROVAL_PERMISSION',
        customTokenAmount,
        decimals,
        origin,
        setCustomAmount,
        tokenAmount,
        tokenBalance,
        tokenSymbol
      })),
      data: customData || data,
      toAddress: toAddress,
      currentCurrency: currentCurrency,
      nativeCurrency: nativeCurrency,
      ethTransactionTotal: ethTransactionTotal,
      fiatTransactionTotal: fiatTransactionTotal,
      hexTransactionTotal: hexTransactionTotal,
      useNonceField: useNonceField,
      nextNonce: nextNonce,
      customNonceValue: customNonceValue,
      updateCustomNonce: value => {
        dispatch((0, _actions.updateCustomNonce)(value));
      },
      getNextNonce: () => dispatch((0, _actions.getNextNonce)()),
      showCustomizeNonceModal: ({
        /* eslint-disable no-shadow */
        useNonceField,
        nextNonce,
        customNonceValue,
        updateCustomNonce,
        getNextNonce
        /* eslint-disable no-shadow */

      }) => dispatch((0, _actions.showModal)({
        name: 'CUSTOMIZE_NONCE',
        useNonceField,
        nextNonce,
        customNonceValue,
        updateCustomNonce,
        getNextNonce
      })),
      warning: submitWarning,
      txData: transaction,
      fromAddressIsLedger: fromAddressIsLedger,
      chainId: chainId,
      rpcPrefs: rpcPrefs,
      isContract: isContract,
      isMultiLayerFeeNetwork: isMultiLayerFeeNetwork,
      supportsEIP1559V2: supportsEIP1559V2
    }), showCustomizeGasPopover && !supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
      onClose: closeCustomizeGasPopover,
      mode: _gas.EDIT_GAS_MODES.MODIFY_IN_PLACE,
      transaction: transaction
    }), supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_editGasFeePopover.default, null), /*#__PURE__*/_react.default.createElement(_advancedGasFeePopover.default, null))),
    hideSenderToRecipient: true,
    customTxParamsData: customData
  }));
}


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-approve/confirm-approve.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-decrypt-message/confirm-decrypt-message.container.js", {"../../ducks/confirm-transaction/confirm-transaction.duck":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/confirm-transaction/confirm-transaction.duck.js","../../ducks/history/history":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/history/history.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./confirm-decrypt-message.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-decrypt-message/confirm-decrypt-message.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-decrypt-message/confirm-decrypt-message.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../store/actions");

var _selectors = require("../../selectors");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _history = require("../../ducks/history/history");

var _confirmDecryptMessage = _interopRequireDefault(require("./confirm-decrypt-message.component"));

function mapStateToProps(state) {
  const {
    metamask: {
      subjectMetadata = {}
    }
  } = state;
  const unconfirmedTransactions = (0, _selectors.unconfirmedTransactionsListSelector)(state);
  const txData = unconfirmedTransactions[0];
  const {
    msgParams: {
      from
    }
  } = txData;
  const fromAccount = (0, _selectors.getTargetAccountWithSendEtherInfo)(state, from);
  return {
    txData,
    subjectMetadata,
    fromAccount,
    requester: null,
    requesterAddress: null,
    conversionRate: (0, _selectors.conversionRateSelector)(state),
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state)
  };
}

function mapDispatchToProps(dispatch) {
  return {
    goHome: () => dispatch((0, _actions.goHome)()),
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    decryptMessage: (msgData, event) => {
      const params = msgData.msgParams;
      params.metamaskId = msgData.id;
      event.stopPropagation(event);
      return dispatch((0, _actions.decryptMsg)(params));
    },
    cancelDecryptMessage: (msgData, event) => {
      event.stopPropagation(event);
      return dispatch((0, _actions.cancelDecryptMsg)(msgData));
    },
    decryptMessageInline: (msgData, event) => {
      const params = msgData.msgParams;
      params.metamaskId = msgData.id;
      event.stopPropagation(event);
      return dispatch((0, _actions.decryptMsgInline)(params));
    }
  };
}

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmDecryptMessage.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-decrypt-message/confirm-decrypt-message.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/index.js", {"./signature-request.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequest.default;
  }
});

var _signatureRequest = _interopRequireDefault(require("./signature-request.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request-original/index.js", {"./signature-request-original.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request-original/signature-request-original.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request-original/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestOriginal.default;
  }
});

var _signatureRequestOriginal = _interopRequireDefault(require("./signature-request-original.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request-original/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/confirm-transaction-base.container.js", {"../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../../shared/modules/transaction.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/transaction.utils.js","../../ducks/app/app":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/app/app.js","../../ducks/confirm-transaction/confirm-transaction.duck":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/confirm-transaction/confirm-transaction.duck.js","../../ducks/history/history":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/history/history.js","../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../helpers/utils/transactions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/transactions.util.js","../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","../send/send.utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send.utils.js","./confirm-transaction-base.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/confirm-transaction-base.component.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/confirm-transaction-base.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapDispatchToProps = exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _actions = require("../../store/actions");

var _send = require("../send/send.utils");

var _util = require("../../helpers/utils/util");

var _selectors = require("../../selectors");

var _history = require("../../ducks/history/history");

var _metamask = require("../../ducks/metamask/metamask");

var _transaction = require("../../../shared/modules/transaction.utils");

var _hexstringUtils = require("../../../shared/modules/hexstring-utils");

var _app = require("../../ducks/app/app");

var _transactions = require("../../helpers/utils/transactions.util");

var _gas = require("../../../shared/constants/gas");

var _confirmTransactionBase = _interopRequireDefault(require("./confirm-transaction-base.component"));

const _excluded = ["cancelAllTransactions", "updateTransactionGasFees"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

let customNonceValue = '';

const customNonceMerge = txData => customNonceValue ? _objectSpread(_objectSpread({}, txData), {}, {
  customNonceValue
}) : txData;

const mapStateToProps = (state, ownProps) => {
  var _identities$toAddress, _casedTokenList$toAdd;

  const {
    toAddress: propsToAddress,
    customTxParamsData,
    match: {
      params = {}
    }
  } = ownProps;
  const {
    id: paramsTransactionId
  } = params;
  const isMainnet = (0, _selectors.getIsMainnet)(state);
  const isGasEstimatesLoading = (0, _metamask.getIsGasEstimatesLoading)(state);
  const gasLoadingAnimationIsShowing = (0, _app.getGasLoadingAnimationIsShowing)(state);
  const {
    confirmTransaction,
    metamask
  } = state;
  const {
    ensResolutionsByAddress,
    conversionRate,
    identities,
    addressBook,
    network,
    unapprovedTxs,
    nextNonce,
    provider: {
      chainId
    }
  } = metamask;
  const {
    tokenData,
    txData,
    tokenProps,
    nonce
  } = confirmTransaction;
  const {
    txParams = {},
    id: transactionId,
    type
  } = txData;
  const transaction = Object.values(unapprovedTxs).find(({
    id
  }) => id === (transactionId || Number(paramsTransactionId))) || {};
  const {
    from: fromAddress,
    to: txParamsToAddress,
    gasPrice,
    gas: gasLimit,
    value: amount,
    data
  } = transaction && transaction.txParams || txParams;
  const accounts = (0, _selectors.getMetaMaskAccounts)(state);
  const {
    balance
  } = accounts[fromAddress];
  const {
    name: fromName
  } = identities[fromAddress];
  const toAddress = propsToAddress || txParamsToAddress;
  const tokenList = (0, _selectors.getTokenList)(state);
  const useTokenDetection = (0, _selectors.getUseTokenDetection)(state);
  const casedTokenList = useTokenDetection ? tokenList : Object.keys(tokenList).reduce((acc, base) => {
    return _objectSpread(_objectSpread({}, acc), {}, {
      [base.toLowerCase()]: tokenList[base]
    });
  }, {});
  const toName = ((_identities$toAddress = identities[toAddress]) === null || _identities$toAddress === void 0 ? void 0 : _identities$toAddress.name) || ((_casedTokenList$toAdd = casedTokenList[toAddress]) === null || _casedTokenList$toAdd === void 0 ? void 0 : _casedTokenList$toAdd.name) || (0, _util.shortenAddress)((0, _hexstringUtils.toChecksumHexAddress)(toAddress));
  const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(toAddress);
  const addressBookObject = addressBook && addressBook[chainId] && addressBook[chainId][checksummedAddress];
  const toEns = ensResolutionsByAddress[checksummedAddress] || '';
  const toNickname = addressBookObject ? addressBookObject.name : '';
  const transactionStatus = transaction ? transaction.status : '';
  const supportsEIP1559 = (0, _selectors.checkNetworkAndAccountSupports1559)(state) && !(0, _transactions.isLegacyTransaction)(txParams);
  const {
    hexTransactionAmount,
    hexMinimumTransactionFee,
    hexMaximumTransactionFee,
    hexTransactionTotal,
    gasEstimationObject
  } = (0, _selectors.transactionFeeSelector)(state, transaction);

  if (transaction && transaction.simulationFails) {
    txData.simulationFails = transaction.simulationFails;
  }

  const currentNetworkUnapprovedTxs = Object.keys(unapprovedTxs).filter(key => (0, _transaction.transactionMatchesNetwork)(unapprovedTxs[key], chainId, network)).reduce((acc, key) => _objectSpread(_objectSpread({}, acc), {}, {
    [key]: unapprovedTxs[key]
  }), {});
  const unapprovedTxCount = (0, _util.valuesFor)(currentNetworkUnapprovedTxs).length;
  const insufficientBalance = !(0, _send.isBalanceSufficient)({
    amount,
    gasTotal: (0, _send.calcGasTotal)(gasLimit, gasPrice),
    balance,
    conversionRate
  });
  const methodData = (0, _selectors.getKnownMethodData)(state, data) || {};

  let fullTxData = _objectSpread(_objectSpread({}, txData), transaction);

  if (customTxParamsData) {
    fullTxData = _objectSpread(_objectSpread({}, fullTxData), {}, {
      txParams: _objectSpread(_objectSpread({}, fullTxData.txParams), {}, {
        data: customTxParamsData
      })
    });
  }

  customNonceValue = (0, _selectors.getCustomNonceValue)(state);
  const isEthGasPrice = (0, _selectors.getIsEthGasPriceFetched)(state);
  const noGasPrice = !supportsEIP1559 && (0, _selectors.getNoGasPriceFetched)(state);
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  const gasFeeIsCustom = fullTxData.userFeeLevel === _gas.CUSTOM_GAS_ESTIMATE || (0, _transaction.txParamsAreDappSuggested)(fullTxData);
  const fromAddressIsLedger = (0, _metamask.isAddressLedger)(state, fromAddress);
  const nativeCurrency = (0, _metamask.getNativeCurrency)(state);
  const hardwareWalletRequiresConnection = (0, _selectors.doesAddressRequireLedgerHidConnection)(state, fromAddress);
  const isMultiLayerFeeNetwork = (0, _selectors.getIsMultiLayerFeeNetwork)(state);
  return {
    balance,
    fromAddress,
    fromName,
    toAddress,
    toEns,
    toName,
    toNickname,
    hexTransactionAmount,
    hexMinimumTransactionFee,
    hexMaximumTransactionFee,
    hexTransactionTotal,
    txData: fullTxData,
    tokenData,
    methodData,
    tokenProps,
    conversionRate,
    transactionStatus,
    nonce,
    unapprovedTxs,
    unapprovedTxCount,
    currentNetworkUnapprovedTxs,
    customGas: {
      gasLimit,
      gasPrice
    },
    advancedInlineGasShown: (0, _selectors.getAdvancedInlineGasShown)(state),
    useNonceField: (0, _selectors.getUseNonceField)(state),
    customNonceValue,
    insufficientBalance,
    hideSubtitle: !(0, _selectors.getShouldShowFiat)(state),
    hideFiatConversion: !(0, _selectors.getShouldShowFiat)(state),
    type,
    nextNonce,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    isMainnet,
    isEthGasPrice,
    noGasPrice,
    supportsEIP1559,
    gasIsLoading: isGasEstimatesLoading || gasLoadingAnimationIsShowing,
    useNativeCurrencyAsPrimaryCurrency,
    maxFeePerGas: gasEstimationObject.maxFeePerGas,
    maxPriorityFeePerGas: gasEstimationObject.maxPriorityFeePerGas,
    baseFeePerGas: gasEstimationObject.baseFeePerGas,
    gasFeeIsCustom,
    showLedgerSteps: fromAddressIsLedger,
    nativeCurrency,
    hardwareWalletRequiresConnection,
    isMultiLayerFeeNetwork,
    chainId
  };
};

const mapDispatchToProps = dispatch => {
  return {
    tryReverseResolveAddress: address => {
      return dispatch((0, _actions.tryReverseResolveAddress)(address));
    },
    updateCustomNonce: value => {
      customNonceValue = value;
      dispatch((0, _actions.updateCustomNonce)(value));
    },
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    showTransactionConfirmedModal: ({
      onSubmit
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'TRANSACTION_CONFIRMED',
        onSubmit
      }));
    },
    showRejectTransactionsConfirmationModal: ({
      onSubmit,
      unapprovedTxCount
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'REJECT_TRANSACTIONS',
        onSubmit,
        unapprovedTxCount
      }));
    },
    cancelTransaction: ({
      id
    }) => dispatch((0, _actions.cancelTx)({
      id
    })),
    cancelAllTransactions: txList => dispatch((0, _actions.cancelTxs)(txList)),
    sendTransaction: txData => dispatch((0, _actions.updateAndApproveTx)(customNonceMerge(txData))),
    getNextNonce: () => dispatch((0, _actions.getNextNonce)()),
    setDefaultHomeActiveTabName: tabName => dispatch((0, _actions.setDefaultHomeActiveTabName)(tabName)),
    updateTransactionGasFees: gasFees => {
      dispatch((0, _metamask.updateTransactionGasFees)(_objectSpread(_objectSpread({}, gasFees), {}, {
        expectHexWei: true
      })));
    }
  };
};

exports.mapDispatchToProps = mapDispatchToProps;

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    txData,
    unapprovedTxs
  } = stateProps;
  const {
    cancelAllTransactions: dispatchCancelAllTransactions,
    updateTransactionGasFees: dispatchUpdateTransactionGasFees
  } = dispatchProps,
        otherDispatchProps = (0, _objectWithoutProperties2.default)(dispatchProps, _excluded);
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, stateProps), otherDispatchProps), ownProps), {}, {
    cancelAllTransactions: () => dispatchCancelAllTransactions((0, _util.valuesFor)(unapprovedTxs)),
    updateGasAndCalculate: ({
      gasLimit,
      gasPrice
    }) => {
      dispatchUpdateTransactionGasFees({
        gasLimit,
        gasPrice,
        transaction: txData
      });
    }
  });
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps))(_confirmTransactionBase.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/confirm-transaction-base.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/colorManipulator.js", {"@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/colorManipulator.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexToRgb = hexToRgb;
exports.rgbToHex = rgbToHex;
exports.hslToRgb = hslToRgb;
exports.decomposeColor = decomposeColor;
exports.recomposeColor = recomposeColor;
exports.getContrastRatio = getContrastRatio;
exports.getLuminance = getLuminance;
exports.emphasize = emphasize;
exports.fade = fade;
exports.darken = darken;
exports.lighten = lighten;

var _utils = require("@material-ui/utils");

/* eslint-disable no-use-before-define */

/**
 * Returns a number whose value is limited to the given range.
 *
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */
function clamp(value) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  if ("development" !== 'production') {
    if (value < min || value > max) {
      console.error("Material-UI: The value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
    }
  }

  return Math.min(Math.max(min, value), max);
}
/**
 * Converts a color from CSS hex format to CSS rgb format.
 *
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */


function hexToRgb(color) {
  color = color.substr(1);
  var re = new RegExp(".{1,".concat(color.length >= 6 ? 2 : 1, "}"), 'g');
  var colors = color.match(re);

  if (colors && colors[0].length === 1) {
    colors = colors.map(function (n) {
      return n + n;
    });
  }

  return colors ? "rgb".concat(colors.length === 4 ? 'a' : '', "(").concat(colors.map(function (n, index) {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', '), ")") : '';
}

function intToHex(int) {
  var hex = int.toString(16);
  return hex.length === 1 ? "0".concat(hex) : hex;
}
/**
 * Converts a color from CSS rgb format to CSS hex format.
 *
 * @param {string} color - RGB color, i.e. rgb(n, n, n)
 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
 */


function rgbToHex(color) {
  // Idempotent
  if (color.indexOf('#') === 0) {
    return color;
  }

  var _decomposeColor = decomposeColor(color),
      values = _decomposeColor.values;

  return "#".concat(values.map(function (n) {
    return intToHex(n);
  }).join(''));
}
/**
 * Converts a color from hsl format to rgb format.
 *
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */


function hslToRgb(color) {
  color = decomposeColor(color);
  var _color = color,
      values = _color.values;
  var h = values[0];
  var s = values[1] / 100;
  var l = values[2] / 100;
  var a = s * Math.min(l, 1 - l);

  var f = function f(n) {
    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;
    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  };

  var type = 'rgb';
  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

  if (color.type === 'hsla') {
    type += 'a';
    rgb.push(values[3]);
  }

  return recomposeColor({
    type: type,
    values: rgb
  });
}
/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */


function decomposeColor(color) {
  // Idempotent
  if (color.type) {
    return color;
  }

  if (color.charAt(0) === '#') {
    return decomposeColor(hexToRgb(color));
  }

  var marker = color.indexOf('(');
  var type = color.substring(0, marker);

  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {
    throw new Error("development" !== "production" ? "Material-UI: Unsupported `".concat(color, "` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().") : (0, _utils.formatMuiErrorMessage)(3, color));
  }

  var values = color.substring(marker + 1, color.length - 1).split(',');
  values = values.map(function (value) {
    return parseFloat(value);
  });
  return {
    type: type,
    values: values
  };
}
/**
 * Converts a color object with type and values to a string.
 *
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */


function recomposeColor(color) {
  var type = color.type;
  var values = color.values;

  if (type.indexOf('rgb') !== -1) {
    // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map(function (n, i) {
      return i < 3 ? parseInt(n, 10) : n;
    });
  } else if (type.indexOf('hsl') !== -1) {
    values[1] = "".concat(values[1], "%");
    values[2] = "".concat(values[2], "%");
  }

  return "".concat(type, "(").concat(values.join(', '), ")");
}
/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */


function getContrastRatio(foreground, background) {
  var lumA = getLuminance(foreground);
  var lumB = getLuminance(background);
  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}
/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */


function getLuminance(color) {
  color = decomposeColor(color);
  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
  rgb = rgb.map(function (val) {
    val /= 255; // normalized

    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
  }); // Truncate at 3 digits

  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}
/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */


function emphasize(color) {
  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;
  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
}
/**
 * Set the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} value - value to set the alpha channel to in the range 0 -1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */


function fade(color, value) {
  color = decomposeColor(color);
  value = clamp(value);

  if (color.type === 'rgb' || color.type === 'hsl') {
    color.type += 'a';
  }

  color.values[3] = value;
  return recomposeColor(color);
}
/**
 * Darkens a color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */


function darken(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clamp(coefficient);

  if (color.type.indexOf('hsl') !== -1) {
    color.values[2] *= 1 - coefficient;
  } else if (color.type.indexOf('rgb') !== -1) {
    for (var i = 0; i < 3; i += 1) {
      color.values[i] *= 1 - coefficient;
    }
  }

  return recomposeColor(color);
}
/**
 * Lightens a color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */


function lighten(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clamp(coefficient);

  if (color.type.indexOf('hsl') !== -1) {
    color.values[2] += (100 - color.values[2]) * coefficient;
  } else if (color.type.indexOf('rgb') !== -1) {
    for (var i = 0; i < 3; i += 1) {
      color.values[i] += (255 - color.values[i]) * coefficient;
    }
  }

  return recomposeColor(color);
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/colorManipulator.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createStyles.js", {"@material-ui/styles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createStyles.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createStyles;

var _styles = require("@material-ui/styles");

// let warnOnce = false;
// To remove in v5
function createStyles(styles) {
  // warning(
  //   warnOnce,
  //   [
  //     'Material-UI: createStyles from @material-ui/core/styles is deprecated.',
  //     'Please use @material-ui/styles/createStyles',
  //   ].join('\n'),
  // );
  // warnOnce = true;
  return (0, _styles.createStyles)(styles);
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createStyles.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createMuiStrictModeTheme.js", {"./createMuiTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createMuiTheme.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createMuiStrictModeTheme.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMuiStrictModeTheme;

var _utils = require("@material-ui/utils");

var _createMuiTheme = _interopRequireDefault(require("./createMuiTheme"));

function createMuiStrictModeTheme(options) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return _createMuiTheme.default.apply(void 0, [(0, _utils.deepmerge)({
    unstable_strictMode: true
  }, options)].concat(args));
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createMuiStrictModeTheme.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/styled.js", {"./defaultTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/defaultTheme.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@material-ui/styles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/styled.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _styles = require("@material-ui/styles");

var _defaultTheme = _interopRequireDefault(require("./defaultTheme"));

var styled = function styled(Component) {
  var componentCreator = (0, _styles.styled)(Component);
  return function (style, options) {
    return componentCreator(style, (0, _extends2.default)({
      defaultTheme: _defaultTheme.default
    }, options));
  };
};

var _default = styled;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/styled.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/transitions.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/transitions.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.duration = exports.easing = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
// to learn the context in which each easing should be used.
var easing = {
  // This is the most common easing curve.
  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
// to learn when use what timing

exports.easing = easing;
var duration = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};
exports.duration = duration;

function formatMs(milliseconds) {
  return "".concat(Math.round(milliseconds), "ms");
}
/**
 * @param {string|Array} props
 * @param {object} param
 * @param {string} param.prop
 * @param {number} param.duration
 * @param {string} param.easing
 * @param {number} param.delay
 */


var _default = {
  easing: easing,
  duration: duration,
  create: function create() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _options$duration = options.duration,
        durationOption = _options$duration === void 0 ? duration.standard : _options$duration,
        _options$easing = options.easing,
        easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,
        _options$delay = options.delay,
        delay = _options$delay === void 0 ? 0 : _options$delay,
        other = (0, _objectWithoutProperties2.default)(options, ["duration", "easing", "delay"]);

    if ("development" !== 'production') {
      var isString = function isString(value) {
        return typeof value === 'string';
      };

      var isNumber = function isNumber(value) {
        return !isNaN(parseFloat(value));
      };

      if (!isString(props) && !Array.isArray(props)) {
        console.error('Material-UI: Argument "props" must be a string or Array.');
      }

      if (!isNumber(durationOption) && !isString(durationOption)) {
        console.error("Material-UI: Argument \"duration\" must be a number or a string but found ".concat(durationOption, "."));
      }

      if (!isString(easingOption)) {
        console.error('Material-UI: Argument "easing" must be a string.');
      }

      if (!isNumber(delay) && !isString(delay)) {
        console.error('Material-UI: Argument "delay" must be a number or a string.');
      }

      if (Object.keys(other).length !== 0) {
        console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(other).join(','), "]."));
      }
    }

    return (Array.isArray(props) ? props : [props]).map(function (animatedProp) {
      return "".concat(animatedProp, " ").concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === 'string' ? delay : formatMs(delay));
    }).join(',');
  },
  getAutoHeightDuration: function getAutoHeightDuration(height) {
    if (!height) {
      return 0;
    }

    var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

    return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
  }
};
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/transitions.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/useTheme.js", {"./defaultTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/defaultTheme.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@material-ui/styles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/useTheme.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useTheme;

var _styles = require("@material-ui/styles");

var _react = _interopRequireDefault(require("react"));

var _defaultTheme = _interopRequireDefault(require("./defaultTheme"));

function useTheme() {
  var theme = (0, _styles.useTheme)() || _defaultTheme.default;

  if ("development" !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.default.useDebugValue(theme);
  }

  return theme;
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/useTheme.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withStyles.js", {"./defaultTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/defaultTheme.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@material-ui/styles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withStyles.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _styles = require("@material-ui/styles");

var _defaultTheme = _interopRequireDefault(require("./defaultTheme"));

function withStyles(stylesOrCreator, options) {
  return (0, _styles.withStyles)(stylesOrCreator, (0, _extends2.default)({
    defaultTheme: _defaultTheme.default
  }, options));
}

var _default = withStyles;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withStyles.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withTheme.js", {"./defaultTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/defaultTheme.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@material-ui/styles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withTheme.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styles = require("@material-ui/styles");

var _defaultTheme = _interopRequireDefault(require("./defaultTheme"));

var withTheme = (0, _styles.withThemeCreator)({
  defaultTheme: _defaultTheme.default
});
var _default = withTheme;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withTheme.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/makeStyles.js", {"./defaultTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/defaultTheme.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@material-ui/styles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/makeStyles.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _styles = require("@material-ui/styles");

var _defaultTheme = _interopRequireDefault(require("./defaultTheme"));

function makeStyles(stylesOrCreator) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return (0, _styles.makeStyles)(stylesOrCreator, (0, _extends2.default)({
    defaultTheme: _defaultTheme.default
  }, options));
}

var _default = makeStyles;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/makeStyles.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/responsiveFontSizes.js", {"./cssUtils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/cssUtils.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/responsiveFontSizes.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = responsiveFontSizes;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _utils = require("@material-ui/utils");

var _cssUtils = require("./cssUtils");

function responsiveFontSizes(themeInput) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$breakpoints = options.breakpoints,
      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,
      _options$disableAlign = options.disableAlign,
      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,
      _options$factor = options.factor,
      factor = _options$factor === void 0 ? 2 : _options$factor,
      _options$variants = options.variants,
      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;
  var theme = (0, _extends2.default)({}, themeInput);
  theme.typography = (0, _extends2.default)({}, theme.typography);
  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem
  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).

  var convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);
  var breakpointValues = breakpoints.map(function (x) {
    return theme.breakpoints.values[x];
  });
  variants.forEach(function (variant) {
    var style = typography[variant];
    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));

    if (remFontSize <= 1) {
      return;
    }

    var maxFontSize = remFontSize;
    var minFontSize = 1 + (maxFontSize - 1) / factor;
    var lineHeight = style.lineHeight;

    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {
      throw new Error("development" !== "production" ? "Material-UI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead." : (0, _utils.formatMuiErrorMessage)(6));
    }

    if (!(0, _cssUtils.isUnitless)(lineHeight)) {
      // make it unitless
      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);
    }

    var transform = null;

    if (!disableAlign) {
      transform = function transform(value) {
        return (0, _cssUtils.alignProperty)({
          size: value,
          grid: (0, _cssUtils.fontGrid)({
            pixels: 4,
            lineHeight: lineHeight,
            htmlFontSize: typography.htmlFontSize
          })
        });
      };
    }

    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({
      cssProperty: 'fontSize',
      min: minFontSize,
      max: maxFontSize,
      unit: 'rem',
      breakpoints: breakpointValues,
      transform: transform
    }));
  });
  return theme;
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/responsiveFontSizes.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createMuiTheme.js", {"./createBreakpoints":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createBreakpoints.js","./createMixins":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createMixins.js","./createPalette":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createPalette.js","./createSpacing":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createSpacing.js","./createTypography":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createTypography.js","./shadows":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/shadows.js","./shape":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/shape.js","./transitions":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/transitions.js","./zIndex":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/zIndex.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createMuiTheme.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _utils = require("@material-ui/utils");

var _createBreakpoints = _interopRequireDefault(require("./createBreakpoints"));

var _createMixins = _interopRequireDefault(require("./createMixins"));

var _createPalette = _interopRequireDefault(require("./createPalette"));

var _createTypography = _interopRequireDefault(require("./createTypography"));

var _shadows = _interopRequireDefault(require("./shadows"));

var _shape = _interopRequireDefault(require("./shape"));

var _createSpacing = _interopRequireDefault(require("./createSpacing"));

var _transitions = _interopRequireDefault(require("./transitions"));

var _zIndex = _interopRequireDefault(require("./zIndex"));

function createMuiTheme() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$breakpoints = options.breakpoints,
      breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,
      _options$mixins = options.mixins,
      mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,
      _options$palette = options.palette,
      paletteInput = _options$palette === void 0 ? {} : _options$palette,
      spacingInput = options.spacing,
      _options$typography = options.typography,
      typographyInput = _options$typography === void 0 ? {} : _options$typography,
      other = (0, _objectWithoutProperties2.default)(options, ["breakpoints", "mixins", "palette", "spacing", "typography"]);
  var palette = (0, _createPalette.default)(paletteInput);
  var breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
  var spacing = (0, _createSpacing.default)(spacingInput);
  var muiTheme = (0, _utils.deepmerge)({
    breakpoints: breakpoints,
    direction: 'ltr',
    mixins: (0, _createMixins.default)(breakpoints, spacing, mixinsInput),
    overrides: {},
    // Inject custom styles
    palette: palette,
    props: {},
    // Provide default props
    shadows: _shadows.default,
    typography: (0, _createTypography.default)(palette, typographyInput),
    spacing: spacing,
    shape: _shape.default,
    transitions: _transitions.default,
    zIndex: _zIndex.default
  }, other);

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  muiTheme = args.reduce(function (acc, argument) {
    return (0, _utils.deepmerge)(acc, argument);
  }, muiTheme);

  if ("development" !== 'production') {
    var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected'];

    var traverse = function traverse(node, parentKey) {
      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var key; // eslint-disable-next-line guard-for-in, no-restricted-syntax

      for (key in node) {
        var child = node[key];

        if (depth === 1) {
          if (key.indexOf('Mui') === 0 && child) {
            traverse(child, key, depth + 1);
          }
        } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
          if ("development" !== 'production') {
            console.error(["Material-UI: The `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key, "` internal state."), 'You can not override it like this: ', JSON.stringify(node, null, 2), '', 'Instead, you need to use the $ruleName syntax:', JSON.stringify({
              root: (0, _defineProperty2.default)({}, "&$".concat(key), child)
            }, null, 2), '', 'https://material-ui.com/r/pseudo-classes-guide'].join('\n'));
          } // Remove the style to prevent global conflicts.


          node[key] = {};
        }
      }
    };

    traverse(muiTheme.overrides);
  }

  return muiTheme;
}

var _default = createMuiTheme;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/createMuiTheme.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/index.js", {"./ServerStyleSheets":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/ServerStyleSheets/index.js","./StylesProvider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/StylesProvider/index.js","./ThemeProvider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/ThemeProvider/index.js","./createGenerateClassName":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/createGenerateClassName/index.js","./createStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/createStyles/index.js","./getThemeProps":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getThemeProps/index.js","./jssPreset":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/jssPreset/index.js","./makeStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/makeStyles/index.js","./mergeClasses":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/mergeClasses/index.js","./styled":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/styled/index.js","./useTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/useTheme/index.js","./withStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/withStyles/index.js","./withTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/withTheme/index.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/index.js
      return function (require, module, exports) {
/** @license Material-UI v4.10.0
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  createGenerateClassName: true,
  createStyles: true,
  getThemeProps: true,
  jssPreset: true,
  makeStyles: true,
  mergeClasses: true,
  ServerStyleSheets: true,
  styled: true,
  StylesProvider: true,
  ThemeProvider: true,
  useTheme: true,
  withStyles: true,
  withTheme: true
};
Object.defineProperty(exports, "createGenerateClassName", {
  enumerable: true,
  get: function get() {
    return _createGenerateClassName.default;
  }
});
Object.defineProperty(exports, "createStyles", {
  enumerable: true,
  get: function get() {
    return _createStyles.default;
  }
});
Object.defineProperty(exports, "getThemeProps", {
  enumerable: true,
  get: function get() {
    return _getThemeProps.default;
  }
});
Object.defineProperty(exports, "jssPreset", {
  enumerable: true,
  get: function get() {
    return _jssPreset.default;
  }
});
Object.defineProperty(exports, "makeStyles", {
  enumerable: true,
  get: function get() {
    return _makeStyles.default;
  }
});
Object.defineProperty(exports, "mergeClasses", {
  enumerable: true,
  get: function get() {
    return _mergeClasses.default;
  }
});
Object.defineProperty(exports, "ServerStyleSheets", {
  enumerable: true,
  get: function get() {
    return _ServerStyleSheets.default;
  }
});
Object.defineProperty(exports, "styled", {
  enumerable: true,
  get: function get() {
    return _styled.default;
  }
});
Object.defineProperty(exports, "StylesProvider", {
  enumerable: true,
  get: function get() {
    return _StylesProvider.default;
  }
});
Object.defineProperty(exports, "ThemeProvider", {
  enumerable: true,
  get: function get() {
    return _ThemeProvider.default;
  }
});
Object.defineProperty(exports, "useTheme", {
  enumerable: true,
  get: function get() {
    return _useTheme.default;
  }
});
Object.defineProperty(exports, "withStyles", {
  enumerable: true,
  get: function get() {
    return _withStyles.default;
  }
});
Object.defineProperty(exports, "withTheme", {
  enumerable: true,
  get: function get() {
    return _withTheme.default;
  }
});

var _utils = require("@material-ui/utils");

var _createGenerateClassName = _interopRequireWildcard(require("./createGenerateClassName"));

Object.keys(_createGenerateClassName).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _createGenerateClassName[key];
    }
  });
});

var _createStyles = _interopRequireWildcard(require("./createStyles"));

Object.keys(_createStyles).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _createStyles[key];
    }
  });
});

var _getThemeProps = _interopRequireWildcard(require("./getThemeProps"));

Object.keys(_getThemeProps).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _getThemeProps[key];
    }
  });
});

var _jssPreset = _interopRequireWildcard(require("./jssPreset"));

Object.keys(_jssPreset).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jssPreset[key];
    }
  });
});

var _makeStyles = _interopRequireWildcard(require("./makeStyles"));

Object.keys(_makeStyles).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _makeStyles[key];
    }
  });
});

var _mergeClasses = _interopRequireWildcard(require("./mergeClasses"));

Object.keys(_mergeClasses).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _mergeClasses[key];
    }
  });
});

var _ServerStyleSheets = _interopRequireWildcard(require("./ServerStyleSheets"));

Object.keys(_ServerStyleSheets).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ServerStyleSheets[key];
    }
  });
});

var _styled = _interopRequireWildcard(require("./styled"));

Object.keys(_styled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _styled[key];
    }
  });
});

var _StylesProvider = _interopRequireWildcard(require("./StylesProvider"));

Object.keys(_StylesProvider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _StylesProvider[key];
    }
  });
});

var _ThemeProvider = _interopRequireWildcard(require("./ThemeProvider"));

Object.keys(_ThemeProvider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ThemeProvider[key];
    }
  });
});

var _useTheme = _interopRequireWildcard(require("./useTheme"));

Object.keys(_useTheme).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _useTheme[key];
    }
  });
});

var _withStyles = _interopRequireWildcard(require("./withStyles"));

Object.keys(_withStyles).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _withStyles[key];
    }
  });
});

var _withTheme = _interopRequireWildcard(require("./withTheme"));

Object.keys(_withTheme).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _withTheme[key];
    }
  });
});

/* eslint-disable import/export */

/* Warning if there are several instances of @material-ui/styles */
if ("development" !== 'production' && "development" !== 'test' && typeof window !== 'undefined') {
  _utils.ponyfillGlobal['__@material-ui/styles-init__'] = _utils.ponyfillGlobal['__@material-ui/styles-init__'] || 0;

  if (_utils.ponyfillGlobal['__@material-ui/styles-init__'] === 1) {
    console.warn(['It looks like there are several instances of `@material-ui/styles` initialized in this application.', 'This may cause theme propagation issues, broken class names, ' + 'specificity issues, and makes your application bigger without a good reason.', '', 'See https://material-ui.com/r/styles-instance-warning for more info.'].join('\n'));
  }

  _utils.ponyfillGlobal['__@material-ui/styles-init__'] += 1;
}
      };
    };
  }
}, {package:"@material-ui/styles",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TextField/TextField.js", {"../FilledInput":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FilledInput/index.js","../FormControl":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/index.js","../FormHelperText":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormHelperText/index.js","../Input":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Input/index.js","../InputLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputLabel/index.js","../OutlinedInput":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/OutlinedInput/index.js","../Select":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Select/index.js","../styles/withStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withStyles.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js","clsx":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TextField/TextField.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _utils = require("@material-ui/utils");

var _Input = _interopRequireDefault(require("../Input"));

var _FilledInput = _interopRequireDefault(require("../FilledInput"));

var _OutlinedInput = _interopRequireDefault(require("../OutlinedInput"));

var _InputLabel = _interopRequireDefault(require("../InputLabel"));

var _FormControl = _interopRequireDefault(require("../FormControl"));

var _FormHelperText = _interopRequireDefault(require("../FormHelperText"));

var _Select = _interopRequireDefault(require("../Select"));

var _withStyles = _interopRequireDefault(require("../styles/withStyles"));

var variantComponent = {
  standard: _Input.default,
  filled: _FilledInput.default,
  outlined: _OutlinedInput.default
};
var styles = {
  /* Styles applied to the root element. */
  root: {}
};
/**
 * The `TextField` is a convenience wrapper for the most common cases (80%).
 * It cannot be all things to all people, otherwise the API would grow out of control.
 *
 * ## Advanced Configuration
 *
 * It's important to understand that the text field is a simple abstraction
 * on top of the following components:
 *
 * - [FormControl](/api/form-control/)
 * - [InputLabel](/api/input-label/)
 * - [FilledInput](/api/filled-input/)
 * - [OutlinedInput](/api/outlined-input/)
 * - [Input](/api/input/)
 * - [FormHelperText](/api/form-helper-text/)
 *
 * If you wish to alter the props applied to the `input` element, you can do so as follows:
 *
 * ```jsx
 * const inputProps = {
 *   step: 300,
 * };
 *
 * return <TextField id="time" type="time" inputProps={inputProps} />;
 * ```
 *
 * For advanced cases, please look at the source of TextField by clicking on the
 * "Edit this page" button above. Consider either:
 *
 * - using the upper case props for passing values directly to the components
 * - using the underlying components directly as shown in the demos
 */

exports.styles = styles;
var TextField = /*#__PURE__*/React.forwardRef(function TextField(props, ref) {
  var autoComplete = props.autoComplete,
      _props$autoFocus = props.autoFocus,
      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
      children = props.children,
      classes = props.classes,
      className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'primary' : _props$color,
      defaultValue = props.defaultValue,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$error = props.error,
      error = _props$error === void 0 ? false : _props$error,
      FormHelperTextProps = props.FormHelperTextProps,
      _props$fullWidth = props.fullWidth,
      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
      helperText = props.helperText,
      hiddenLabel = props.hiddenLabel,
      id = props.id,
      InputLabelProps = props.InputLabelProps,
      inputProps = props.inputProps,
      InputProps = props.InputProps,
      inputRef = props.inputRef,
      label = props.label,
      _props$multiline = props.multiline,
      multiline = _props$multiline === void 0 ? false : _props$multiline,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      placeholder = props.placeholder,
      _props$required = props.required,
      required = _props$required === void 0 ? false : _props$required,
      rows = props.rows,
      rowsMax = props.rowsMax,
      _props$select = props.select,
      select = _props$select === void 0 ? false : _props$select,
      SelectProps = props.SelectProps,
      type = props.type,
      value = props.value,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? 'standard' : _props$variant,
      other = (0, _objectWithoutProperties2.default)(props, ["autoComplete", "autoFocus", "children", "classes", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "hiddenLabel", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "rowsMax", "select", "SelectProps", "type", "value", "variant"]);

  if ("development" !== 'production') {
    if (select && !children) {
      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');
    }
  }

  var InputMore = {};

  if (variant === 'outlined') {
    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
      InputMore.notched = InputLabelProps.shrink;
    }

    if (label) {
      var _InputLabelProps$requ;

      var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;
      InputMore.label = /*#__PURE__*/React.createElement(React.Fragment, null, label, displayRequired && "\xA0*");
    }
  }

  if (select) {
    // unset defaults from textbox inputs
    if (!SelectProps || !SelectProps.native) {
      InputMore.id = undefined;
    }

    InputMore['aria-describedby'] = undefined;
  }

  var helperTextId = helperText && id ? "".concat(id, "-helper-text") : undefined;
  var inputLabelId = label && id ? "".concat(id, "-label") : undefined;
  var InputComponent = variantComponent[variant];
  var InputElement = /*#__PURE__*/React.createElement(InputComponent, (0, _extends2.default)({
    "aria-describedby": helperTextId,
    autoComplete: autoComplete,
    autoFocus: autoFocus,
    defaultValue: defaultValue,
    fullWidth: fullWidth,
    multiline: multiline,
    name: name,
    rows: rows,
    rowsMax: rowsMax,
    type: type,
    value: value,
    id: id,
    inputRef: inputRef,
    onBlur: onBlur,
    onChange: onChange,
    onFocus: onFocus,
    placeholder: placeholder,
    inputProps: inputProps
  }, InputMore, InputProps));
  return /*#__PURE__*/React.createElement(_FormControl.default, (0, _extends2.default)({
    className: (0, _clsx.default)(classes.root, className),
    disabled: disabled,
    error: error,
    fullWidth: fullWidth,
    hiddenLabel: hiddenLabel,
    ref: ref,
    required: required,
    color: color,
    variant: variant
  }, other), label && /*#__PURE__*/React.createElement(_InputLabel.default, (0, _extends2.default)({
    htmlFor: id,
    id: inputLabelId
  }, InputLabelProps), label), select ? /*#__PURE__*/React.createElement(_Select.default, (0, _extends2.default)({
    "aria-describedby": helperTextId,
    id: id,
    labelId: inputLabelId,
    value: value,
    input: InputElement
  }, SelectProps), children) : InputElement, helperText && /*#__PURE__*/React.createElement(_FormHelperText.default, (0, _extends2.default)({
    id: helperTextId
  }, FormHelperTextProps), helperText));
});
"development" !== "production" ? TextField.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: _propTypes.default.string,

  /**
   * If `true`, the `input` element will be focused during the first mount.
   */
  autoFocus: _propTypes.default.bool,

  /**
   * @ignore
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: _propTypes.default.object,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: _propTypes.default.oneOf(['primary', 'secondary']),

  /**
   * The default value of the `input` element.
   */
  defaultValue: _propTypes.default.any,

  /**
   * If `true`, the `input` element will be disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * If `true`, the label will be displayed in an error state.
   */
  error: _propTypes.default.bool,

  /**
   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.
   */
  FormHelperTextProps: _propTypes.default.object,

  /**
   * If `true`, the input will take up the full width of its container.
   */
  fullWidth: _propTypes.default.bool,

  /**
   * The helper text content.
   */
  helperText: _propTypes.default.node,

  /**
   * @ignore
   */
  hiddenLabel: _propTypes.default.bool,

  /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */
  id: _propTypes.default.string,

  /**
   * Props applied to the [`InputLabel`](/api/input-label/) element.
   */
  InputLabelProps: _propTypes.default.object,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: _propTypes.default.object,

  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](/api/filled-input/),
   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)
   * component depending on the `variant` prop value.
   */
  InputProps: _propTypes.default.object,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: _utils.refType,

  /**
   * The label content.
   */
  label: _propTypes.default.node,

  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   */
  margin: _propTypes.default.oneOf(['dense', 'none', 'normal']),

  /**
   * If `true`, a textarea element will be rendered instead of an input.
   */
  multiline: _propTypes.default.bool,

  /**
   * Name attribute of the `input` element.
   */
  name: _propTypes.default.string,

  /**
   * @ignore
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: _propTypes.default.func,

  /**
   * @ignore
   */
  onFocus: _propTypes.default.func,

  /**
   * The short hint displayed in the input before the user enters a value.
   */
  placeholder: _propTypes.default.string,

  /**
   * If `true`, the label is displayed as required and the `input` element` will be required.
   */
  required: _propTypes.default.bool,

  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  rowsMax: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.
   * If this option is set you must pass the options of the select as children.
   */
  select: _propTypes.default.bool,

  /**
   * Props applied to the [`Select`](/api/select/) element.
   */
  SelectProps: _propTypes.default.object,

  /**
   * The size of the text field.
   */
  size: _propTypes.default.oneOf(['medium', 'small']),

  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: _propTypes.default.string,

  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: _propTypes.default.any,

  /**
   * The variant to use.
   */
  variant: _propTypes.default.oneOf(['filled', 'outlined', 'standard'])
} : void 0;

var _default = (0, _withStyles.default)(styles, {
  name: 'MuiTextField'
})(TextField);

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TextField/TextField.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackGet.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackGet.js
      return function (require, module, exports) {
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackGet.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackHas.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackHas.js
      return function (require, module, exports) {
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackHas.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackDelete.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackDelete.js
      return function (require, module, exports) {
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackDelete.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackClear.js", {"./_ListCache":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_ListCache.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackClear.js
      return function (require, module, exports) {
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackClear.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackSet.js", {"./_ListCache":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_ListCache.js","./_Map":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_Map.js","./_MapCache":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_MapCache.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackSet.js
      return function (require, module, exports) {
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_stackSet.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_equalArrays.js", {"./_SetCache":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_SetCache.js","./_arraySome":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_arraySome.js","./_cacheHas":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_cacheHas.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_equalArrays.js
      return function (require, module, exports) {
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_equalArrays.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_equalByTag.js", {"./_Symbol":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_Symbol.js","./_Uint8Array":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_Uint8Array.js","./_equalArrays":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_equalArrays.js","./_mapToArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_mapToArray.js","./_setToArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_setToArray.js","./eq":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/eq.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_equalByTag.js
      return function (require, module, exports) {
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_equalByTag.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_getTag.js", {"./_DataView":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_DataView.js","./_Map":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_Map.js","./_Promise":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_Promise.js","./_Set":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_Set.js","./_WeakMap":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_WeakMap.js","./_baseGetTag":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_baseGetTag.js","./_toSource":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_toSource.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_getTag.js
      return function (require, module, exports) {
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_getTag.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_equalObjects.js", {"./_getAllKeys":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_getAllKeys.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_equalObjects.js
      return function (require, module, exports) {
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_equalObjects.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/identicon.component.js", {"../jazzicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/jazzicon/index.js","./blockieIdenticon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/blockieIdenticon/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/identicon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _jazzicon = _interopRequireDefault(require("../jazzicon"));

var _blockieIdenticon = _interopRequireDefault(require("./blockieIdenticon"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const getStyles = diameter => ({
  height: diameter,
  width: diameter,
  borderRadius: diameter / 2
});

class Identicon extends _react.PureComponent {
  renderImage() {
    const {
      className,
      diameter,
      image,
      alt,
      imageBorder
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("img", {
      className: (0, _classnames.default)('identicon', className, {
        'identicon__image-border': imageBorder
      }),
      src: image,
      style: getStyles(diameter),
      alt: alt
    });
  }

  renderJazzicon() {
    const {
      address,
      className,
      diameter,
      alt,
      useTokenDetection,
      tokenList
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_jazzicon.default, {
      address: address,
      diameter: diameter,
      className: (0, _classnames.default)('identicon', className),
      style: getStyles(diameter),
      alt: alt,
      useTokenDetection: useTokenDetection,
      tokenList: tokenList
    });
  }

  renderBlockie() {
    const {
      address,
      className,
      diameter,
      alt
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('identicon', className),
      style: getStyles(diameter)
    }, /*#__PURE__*/_react.default.createElement(_blockieIdenticon.default, {
      address: address,
      diameter: diameter,
      alt: alt
    }));
  }

  render() {
    const {
      address,
      image,
      useBlockie,
      addBorder,
      diameter,
      useTokenDetection,
      tokenList
    } = this.props;
    const size = diameter + 8;

    if (image) {
      return this.renderImage();
    }

    if (address) {
      var _tokenList$tokenAddre;

      // token from dynamic api list is fetched when useTokenDetection is true
      // And since the token.address from allTokens is checksumaddress
      // tokenAddress have to be changed to lowercase when we are using dynamic list
      const tokenAddress = useTokenDetection ? address.toLowerCase() : address;

      if (tokenAddress && (_tokenList$tokenAddre = tokenList[tokenAddress]) !== null && _tokenList$tokenAddre !== void 0 && _tokenList$tokenAddre.iconUrl) {
        return this.renderJazzicon();
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)({
          'identicon__address-wrapper': addBorder
        }),
        style: addBorder ? getStyles(size) : null
      }, useBlockie ? this.renderBlockie() : this.renderJazzicon());
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      style: getStyles(diameter),
      className: "identicon__image-border"
    });
  }

}

exports.default = Identicon;
(0, _defineProperty2.default)(Identicon, "propTypes", {
  /**
   * Adds blue border around the Identicon used for selected account.
   * Increases the width and height of the Identicon by 8px
   */
  addBorder: _propTypes.default.bool,

  /**
   * Address used for generating random image
   */
  address: _propTypes.default.string,

  /**
   * Add custom css class
   */
  className: _propTypes.default.string,

  /**
   * Sets the width and height of the inner img element
   * If addBorder is true will increase components height and width by 8px
   */
  diameter: _propTypes.default.number,

  /**
   * Used as the image source of the Identicon
   */
  image: _propTypes.default.string,

  /**
   * Use the blockie type random image generator
   */
  useBlockie: _propTypes.default.bool,

  /**
   * The alt text of the image
   */
  alt: _propTypes.default.string,

  /**
   * Check if show image border
   */
  imageBorder: _propTypes.default.bool,

  /**
   * Check if use token detection
   */
  useTokenDetection: _propTypes.default.bool,

  /**
   * Add list of token in object
   */
  tokenList: _propTypes.default.object
});
(0, _defineProperty2.default)(Identicon, "defaultProps", {
  addBorder: false,
  address: undefined,
  className: undefined,
  diameter: 46,
  image: undefined,
  useBlockie: false,
  alt: '',
  tokenList: {}
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/identicon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/currency-display/index.js", {"./currency-display.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/currency-display/currency-display.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/currency-display/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _currencyDisplay.default;
  }
});

var _currencyDisplay = _interopRequireDefault(require("./currency-display.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/currency-display/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-easy-swipe/lib/react-swipe.js", {"prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-easy-swipe/lib/react-swipe.js
      return function (require, module, exports) {
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes);
    global.reactSwipe = mod.exports;
  }
})(this, function (exports, _react, _propTypes) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setHasSupportToCaptureOption = setHasSupportToCaptureOption;

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var supportsCaptureOption = false;
  function setHasSupportToCaptureOption(hasSupport) {
    supportsCaptureOption = hasSupport;
  }

  try {
    addEventListener('test', null, Object.defineProperty({}, 'capture', { get: function get() {
        setHasSupportToCaptureOption(true);
      } }));
  } catch (e) {} // eslint-disable-line no-empty

  function getSafeEventHandlerOpts() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { capture: true };

    return supportsCaptureOption ? options : options.capture;
  }

  /**
   * [getPosition returns a position element that works for mouse or touch events]
   * @param  {[Event]} event [the received event]
   * @return {[Object]}      [x and y coords]
   */
  function getPosition(event) {
    if ('touches' in event) {
      var _event$touches$ = event.touches[0],
          pageX = _event$touches$.pageX,
          pageY = _event$touches$.pageY;

      return { x: pageX, y: pageY };
    }

    var screenX = event.screenX,
        screenY = event.screenY;

    return { x: screenX, y: screenY };
  }

  var ReactSwipe = function (_Component) {
    _inherits(ReactSwipe, _Component);

    function ReactSwipe() {
      var _ref;

      _classCallCheck(this, ReactSwipe);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _this = _possibleConstructorReturn(this, (_ref = ReactSwipe.__proto__ || Object.getPrototypeOf(ReactSwipe)).call.apply(_ref, [this].concat(args)));

      _this._handleSwipeStart = _this._handleSwipeStart.bind(_this);
      _this._handleSwipeMove = _this._handleSwipeMove.bind(_this);
      _this._handleSwipeEnd = _this._handleSwipeEnd.bind(_this);

      _this._onMouseDown = _this._onMouseDown.bind(_this);
      _this._onMouseMove = _this._onMouseMove.bind(_this);
      _this._onMouseUp = _this._onMouseUp.bind(_this);

      _this._setSwiperRef = _this._setSwiperRef.bind(_this);
      return _this;
    }

    _createClass(ReactSwipe, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (this.swiper) {
          this.swiper.addEventListener('touchmove', this._handleSwipeMove, getSafeEventHandlerOpts({
            capture: true,
            passive: false
          }));
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (this.swiper) {
          this.swiper.removeEventListener('touchmove', this._handleSwipeMove, getSafeEventHandlerOpts({
            capture: true,
            passive: false
          }));
        }
      }
    }, {
      key: '_onMouseDown',
      value: function _onMouseDown(event) {
        if (!this.props.allowMouseEvents) {
          return;
        }

        this.mouseDown = true;

        document.addEventListener('mouseup', this._onMouseUp);
        document.addEventListener('mousemove', this._onMouseMove);

        this._handleSwipeStart(event);
      }
    }, {
      key: '_onMouseMove',
      value: function _onMouseMove(event) {
        if (!this.mouseDown) {
          return;
        }

        this._handleSwipeMove(event);
      }
    }, {
      key: '_onMouseUp',
      value: function _onMouseUp(event) {
        this.mouseDown = false;

        document.removeEventListener('mouseup', this._onMouseUp);
        document.removeEventListener('mousemove', this._onMouseMove);

        this._handleSwipeEnd(event);
      }
    }, {
      key: '_handleSwipeStart',
      value: function _handleSwipeStart(event) {
        var _getPosition = getPosition(event),
            x = _getPosition.x,
            y = _getPosition.y;

        this.moveStart = { x: x, y: y };
        this.props.onSwipeStart(event);
      }
    }, {
      key: '_handleSwipeMove',
      value: function _handleSwipeMove(event) {
        if (!this.moveStart) {
          return;
        }

        var _getPosition2 = getPosition(event),
            x = _getPosition2.x,
            y = _getPosition2.y;

        var deltaX = x - this.moveStart.x;
        var deltaY = y - this.moveStart.y;
        this.moving = true;

        // handling the responsability of cancelling the scroll to
        // the component handling the event
        var shouldPreventDefault = this.props.onSwipeMove({
          x: deltaX,
          y: deltaY
        }, event);

        if (shouldPreventDefault && event.cancelable) {
          event.preventDefault();
        }

        this.movePosition = { deltaX: deltaX, deltaY: deltaY };
      }
    }, {
      key: '_handleSwipeEnd',
      value: function _handleSwipeEnd(event) {
        this.props.onSwipeEnd(event);

        var tolerance = this.props.tolerance;


        if (this.moving && this.movePosition) {
          if (this.movePosition.deltaX < -tolerance) {
            this.props.onSwipeLeft(1, event);
          } else if (this.movePosition.deltaX > tolerance) {
            this.props.onSwipeRight(1, event);
          }
          if (this.movePosition.deltaY < -tolerance) {
            this.props.onSwipeUp(1, event);
          } else if (this.movePosition.deltaY > tolerance) {
            this.props.onSwipeDown(1, event);
          }
        }

        this.moveStart = null;
        this.moving = false;
        this.movePosition = null;
      }
    }, {
      key: '_setSwiperRef',
      value: function _setSwiperRef(node) {
        this.swiper = node;
        this.props.innerRef(node);
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            tagName = _props.tagName,
            className = _props.className,
            style = _props.style,
            children = _props.children,
            allowMouseEvents = _props.allowMouseEvents,
            onSwipeUp = _props.onSwipeUp,
            onSwipeDown = _props.onSwipeDown,
            onSwipeLeft = _props.onSwipeLeft,
            onSwipeRight = _props.onSwipeRight,
            onSwipeStart = _props.onSwipeStart,
            onSwipeMove = _props.onSwipeMove,
            onSwipeEnd = _props.onSwipeEnd,
            innerRef = _props.innerRef,
            tolerance = _props.tolerance,
            props = _objectWithoutProperties(_props, ['tagName', 'className', 'style', 'children', 'allowMouseEvents', 'onSwipeUp', 'onSwipeDown', 'onSwipeLeft', 'onSwipeRight', 'onSwipeStart', 'onSwipeMove', 'onSwipeEnd', 'innerRef', 'tolerance']);

        return _react2.default.createElement(
          this.props.tagName,
          _extends({
            ref: this._setSwiperRef,
            onMouseDown: this._onMouseDown,
            onTouchStart: this._handleSwipeStart,
            onTouchEnd: this._handleSwipeEnd,
            className: className,
            style: style
          }, props),
          children
        );
      }
    }]);

    return ReactSwipe;
  }(_react.Component);

  ReactSwipe.displayName = 'ReactSwipe';
  ReactSwipe.propTypes = {
    tagName: _propTypes2.default.string,
    className: _propTypes2.default.string,
    style: _propTypes2.default.object,
    children: _propTypes2.default.node,
    allowMouseEvents: _propTypes2.default.bool,
    onSwipeUp: _propTypes2.default.func,
    onSwipeDown: _propTypes2.default.func,
    onSwipeLeft: _propTypes2.default.func,
    onSwipeRight: _propTypes2.default.func,
    onSwipeStart: _propTypes2.default.func,
    onSwipeMove: _propTypes2.default.func,
    onSwipeEnd: _propTypes2.default.func,
    innerRef: _propTypes2.default.func,
    tolerance: _propTypes2.default.number.isRequired
  };
  ReactSwipe.defaultProps = {
    tagName: 'div',
    allowMouseEvents: false,
    onSwipeUp: function onSwipeUp() {},
    onSwipeDown: function onSwipeDown() {},
    onSwipeLeft: function onSwipeLeft() {},
    onSwipeRight: function onSwipeRight() {},
    onSwipeStart: function onSwipeStart() {},
    onSwipeMove: function onSwipeMove() {},
    onSwipeEnd: function onSwipeEnd() {},
    innerRef: function innerRef() {},

    tolerance: 0
  };
  exports.default = ReactSwipe;
});
      };
    };
  }
}, {package:"react-easy-swipe",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-easy-swipe/lib/react-swipe.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-toggle-button/lib/index.js", {"react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-toggle-button/lib/index.js
      return function (require, module, exports) {
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports["react-toggle-button"]=t(require("react")):e["react-toggle-button"]=t(e.React)}(this,function(e){return function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(12)},function(e,t,n){e.exports=n(17)()},function(e,t){"use strict";function n(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]="number"==typeof e[n]?e[n]:e[n].val);return t}t.__esModule=!0,t.default=n,e.exports=t.default},function(t,n){t.exports=e},function(e,t,n){(function(t){(function(){var n,r,a;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-a)/1e6},r=t.hrtime,n=function(){var e;return e=r(),1e9*e[0]+e[1]},a=n()):Date.now?(e.exports=function(){return Date.now()-a},a=Date.now()):(e.exports=function(){return(new Date).getTime()-a},a=(new Date).getTime())}).call(this)}).call(t,n(9))},function(e,t,n){(function(t){for(var r=n(19),a="undefined"==typeof window?t:window,o=["moz","webkit"],i="AnimationFrame",l=a["request"+i],u=a["cancel"+i]||a["cancelRequest"+i],s=0;!l&&s<o.length;s++)l=a[o[s]+"Request"+i],u=a[o[s]+"Cancel"+i]||a[o[s]+"CancelRequest"+i];if(!l||!u){var c=0,f=0,p=[],d=1e3/60;l=function(e){if(0===p.length){var t=r(),n=Math.max(0,d-(t-c));c=n+t,setTimeout(function(){var e=p.slice(0);p.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(c)}catch(e){setTimeout(function(){throw e},0)}},Math.round(n))}return p.push({handle:++f,callback:e,cancelled:!1}),f},u=function(e){for(var t=0;t<p.length;t++)p[t].handle===e&&(p[t].cancelled=!0)}}e.exports=function(e){return l.call(a,e)},e.exports.cancel=function(){u.apply(a,arguments)},e.exports.polyfill=function(e){e||(e=a),e.requestAnimationFrame=l,e.cancelAnimationFrame=u}}).call(t,function(){return this}())},function(e,t){"use strict";function n(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=0);return t}t.__esModule=!0,t.default=n,e.exports=t.default},function(e,t){"use strict";function n(e,t,n){for(var r in t)if(Object.prototype.hasOwnProperty.call(t,r)){if(0!==n[r])return!1;var a="number"==typeof t[r]?t[r]:t[r].val;if(e[r]!==a)return!1}return!0}t.__esModule=!0,t.default=n,e.exports=t.default},function(e,t){"use strict";function n(e,t,n,a,o,i,l){var u=-o*(t-a),s=-i*n,c=u+s,f=n+c*e,p=t+f*e;return Math.abs(f)<l&&Math.abs(p-a)<l?(r[0]=a,r[1]=0,r):(r[0]=p,r[1]=f,r)}t.__esModule=!0,t.default=n;var r=[0,0];e.exports=t.default},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function a(e){if(c===setTimeout)return setTimeout(e,0);if((c===n||!c)&&setTimeout)return c=setTimeout,setTimeout(e,0);try{return c(e,0)}catch(t){try{return c.call(null,e,0)}catch(t){return c.call(this,e,0)}}}function o(e){if(f===clearTimeout)return clearTimeout(e);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{return f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}function i(){h&&d&&(h=!1,d.length?y=d.concat(y):m=-1,y.length&&l())}function l(){if(!h){var e=a(i);h=!0;for(var t=y.length;t;){for(d=y,y=[];++m<t;)d&&d[m].run();m=-1,t=y.length}d=null,h=!1,o(e)}}function u(e,t){this.fun=e,this.array=t}function s(){}var c,f,p=e.exports={};!function(){try{c="function"==typeof setTimeout?setTimeout:n}catch(e){c=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(e){f=r}}();var d,y=[],h=!1,m=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];y.push(new u(e,t)),1!==y.length||h||a(l)},u.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=s,p.addListener=s,p.once=s,p.off=s,p.removeListener=s,p.removeAllListeners=s,p.emit=s,p.prependListener=s,p.prependOnceListener=s,p.listeners=function(e){return[]},p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(e,t){"use strict";t.__esModule=!0,t.default={noWobble:{stiffness:170,damping:26},gentle:{stiffness:120,damping:14},wobbly:{stiffness:180,damping:12},stiff:{stiffness:210,damping:20}},e.exports=t.default},function(e,t){"use strict";function n(e){var t=e;if(l[t])return l[t];t=t.replace("#",""),3===t.length&&(t=t[0]+t[0]+t[1]+t[1]+t[2]+t[2]);var n=t.match(/.{2}/g),r={r:parseInt(n[0],16),g:parseInt(n[1],16),b:parseInt(n[2],16)};return l[t]=r,r}function r(e){var t=e.indexOf("rgb")!=-1,n=e.indexOf("rgba")!=-1,r=e.match(/\d+/g);if(t&&!n)return{r:parseInt(r[0]),g:parseInt(r[1]),b:parseInt(r[2])};if(t&&n){var a="0"==r[3]?"0."+r[4]:r[3];return{r:parseInt(r[0]),g:parseInt(r[1]),b:parseInt(r[2]),a:parseFloat(a)}}return null}function a(e,t,n){var r=e.toString(16),a=t.toString(16),o=n.toString(16);return r=r.length<2?"0"+r:r,a=a.length<2?"0"+a:a,o=o.length<2?"0"+o:o,"#"+r+a+o}function o(e,t,n,r,a){var o=n-t,i=a-r,l=(e-t)/o;return r+l*i}function i(e,t,n,a,i,l){var u=void 0===a?0:a,s=void 0===i?1:i,c=r(t),f=r(n),p=Math.floor(o(e,u,s,c.r,f.r)),d=Math.floor(o(e,u,s,c.g,f.g)),y=Math.floor(o(e,u,s,c.b,f.b)),h=!1,m=null;return c.a&&f.a&&(h=!0,m=o(e,u,s,c.a,f.a)),m?"rgb("+p+","+d+","+y+","+m+")":"rgb("+p+","+d+","+y+")"}Object.defineProperty(t,"__esModule",{value:!0}),t.hexToRGB=n,t.rgbToObj=r,t.rgbToHex=a,t.mapValueInRange=o,t.interpolateColor=i;var l={}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var a=n(13),o=r(a);e.exports=o.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(3),c=r(s),f=n(24),p=n(1),d=r(p),y=n(14),h=n(11),m={active:{base:"rgb(1,124,66)",hover:"rgb(1,124,66)"},inactive:{base:"rgb(65,66,68)",hover:"rgb(65,66,68)"},activeThumb:{base:"rgb(250,250,250)",hover:"rgb(250,250,250)"},inactiveThumb:{base:"rgb(250,250,250)",hover:"rgb(250,250,250)"}},v={},b=function(e){function t(e){a(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isHover:!1},n}return i(t,e),u(t,[{key:"onMouseOver",value:function(){this.setState({isHover:!0})}},{key:"onMouseOut",value:function(){this.setState({isHover:!1})}},{key:"_convertToRgb",value:function(e,t){if(e.indexOf("#")!=-1){var n=(0,h.hexToRGB)(e);return"rgb("+n.r+", "+n.g+", "+n.b+")"}return e.indexOf("rgb")==-1?t:e}},{key:"checkAllColors",value:function(e){var t=this;return Object.keys(e).forEach(function(n){t.checkColors(e,n)}),e}},{key:"checkColors",value:function(e,t){e[t]?e[t].hover?(e[t].base=this._convertToRgb(e[t].base,m[t].base),e[t].hover=this._convertToRgb(e[t].hover,m[t].hover)):e[t].base?(e[t].base=this._convertToRgb(e[t].base,m[t].base),e[t].hover=e[t].base):(console.warn('Color prop should have a "base" style and a "hover" style!'),e[t]=m[t]):e[t]=m[t]}},{key:"interpolateColorWithHover",value:function(e,t,n){var r=this.props.colors;return this.checkColors(r,t),this.checkColors(r,n),this.state.isHover?{backgroundColor:(0,h.interpolateColor)(e,r[t].hover,r[n].hover,0,400)}:{backgroundColor:(0,h.interpolateColor)(e,r[t].base,r[n].base,0,400)}}},{key:"makeStyle",value:function(e,t){return this.state.isHover?l({},e,t):e}},{key:"handleClick",value:function(e){e.target!==this._input&&(e.preventDefault(),this._input.focus(),this._input.click())}},{key:"render",value:function(){var e=this,t=this.props,n=t.internalSpringSetting,r=t.internalHoverSpringSetting,a=t.value,o=t.thumbAnimateRange,i=(t.isHover,t.containerStyle),u=t.trackStyle,s=t.animateTrackStyleToggle,p=t.animateTrackStyleHover,d=t.thumbStyleHover,h=t.trackStyleHover,m=t.activeLabelStyle,v=t.activeLabelStyleHover,b=t.activeLabel,g=t.inactiveLabelStyle,S=t.inactiveLabelStyleHover,T=t.inactiveLabel,O=t.thumbStyle,k=t.animateThumbStyleHover,w=t.animateThumbStyleToggle,I=t.thumbIcon,P=t.onClick,j=t.onToggle,_=t.passThroughInputProps,x=n,M=r;return c.default.createElement(f.Motion,{style:{opacity:(0,f.spring)(a?1:0,x),left:(0,f.spring)(a?10*o[1]:10*o[0],x),colorNumber:(0,f.spring)(a?0:400,x),toggleNumber:(0,f.spring)(a?400:0,x),hoverNumber:(0,f.spring)(this.state.isHover?400:0,M)}},function(t){var n=t.opacity,r=t.left,o=t.colorNumber,f=t.hoverNumber,x=t.toggleNumber;return c.default.createElement("div",{style:l({},e.makeStyle(l({},y.reactToggle,i))),onMouseOver:e.onMouseOver.bind(e),onMouseOut:e.onMouseOut.bind(e),onClick:e.handleClick.bind(e)},c.default.createElement("div",{style:l({},e.makeStyle(l({},y.reactToggleTrack,u,e.interpolateColorWithHover(o,"active","inactive"),s(x/400)),l({},h,p(f/400))))},c.default.createElement("div",{style:l({},e.makeStyle(l({},y.reactToggleOn,m),v),{opacity:n})},b),c.default.createElement("div",{style:l({},e.makeStyle(l({},y.reactToggleOff,g),S),{opacity:1-n})},T)),c.default.createElement("div",{style:y.reactThumbCenteringContainer},c.default.createElement("div",{style:l({},e.makeStyle(l({},y.reactToggleThumb,O,e.interpolateColorWithHover(o,"activeThumb","inactiveThumb"),w(x/400)),l({},d,k(f/400))),{position:"relative",left:Math.round(r/10)})},I)),c.default.createElement("input",l({ref:function(t){e._input=t},type:"checkbox",style:y.reactToggleScreenReaderOnly,onClick:function(e){P&&P(e),j(a)},value:a},_)))})}}]),t}(s.Component);b.defaultProps={value:!1,onToggle:function(){},colors:m,passThroughInputProps:{},activeLabel:"ON",containerStyle:v,activeLabelStyle:v,activeLabelStyleHover:v,inactiveLabel:"OFF",inactiveLabelStyle:v,inactiveLabelStyleHover:v,thumbStyle:v,thumbStyleHover:v,animateThumbStyleHover:function(){return{}},animateThumbStyleToggle:function(){return{}},trackStyle:v,trackStyleHover:v,animateTrackStyleHover:function(){return{}},animateTrackStyleToggle:function(){return{}},thumbAnimateRange:[1,33],internalSpringSetting:{stiffness:180,damping:22},internalHoverSpringSetting:{stiffness:180,damping:20}},b.displayName="Toggle",t.default=b,b.propTypes={value:d.default.bool.isRequired,onToggle:d.default.func.isRequired,passThroughInputProps:d.default.object,onClick:d.default.func,colors:d.default.object,activeLabel:d.default.oneOfType([d.default.string,d.default.object]),containerStyle:d.default.object,activeLabelStyle:d.default.object,activeLabelStyleHover:d.default.object,activeThumbStyle:d.default.object,activeThumbStyleHover:d.default.object,inactiveLabel:d.default.oneOfType([d.default.string,d.default.object]),inactiveLabelStyle:d.default.object,inactiveLabelStyleHover:d.default.object,thumbStyle:d.default.object,thumbStyleHover:d.default.object,trackStyle:d.default.object,trackStyleHover:d.default.object,animateThumbStyleHover:d.default.func,animateTrackStyleHover:d.default.func,animateTrackStyleToggle:d.default.func,animateThumbStyleToggle:d.default.func,internalSpringSetting:d.default.object,internalHoverSpringSetting:d.default.object,thumbIcon:d.default.oneOfType([d.default.string,d.default.object]),thumbAnimateRange:d.default.array}},function(e,t){"use strict";function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=(t.reactToggle=n({display:"flex",width:52,alignItems:"center",justifyContent:"flex-start",position:"relative",cursor:"pointer",backgroundColor:"transparent",border:0,padding:0,WebkitTouchCallout:"none",WebkitUserSelect:"none",KhtmlUserSelect:"none",MozUserSelect:"none",msUserSelect:"none",userSelect:"none",WebkitTapHighlightColor:"rgba(0,0,0,0)"},"WebkitTapHighlightColor","transparent"),{fontSize:11,display:"flex",alignItems:"center",justifyContent:"center",fontFamily:"'Helvetica Neue', Helvetica, sans-serif"});t.reactToggleScreenReaderOnly={border:0,clip:"rect(0 0 0 0)",height:1,margin:-1,overflow:"hidden",padding:0,position:"absolute",width:1},t.reactToggleTrack={width:"52px",height:"20px",padding:0,borderRadius:"26px",display:"flex",alignItems:"center",justifyContent:"center"},t.reactToggleOn=r({},a,{position:"relative",color:"#FAFAFA",marginTop:"auto",marginBottom:"auto",lineHeight:0,opacity:0,width:26,height:20,left:4}),t.reactToggleOff=r({},a,{position:"relative",color:"rgba(255,255,255,0.6)",bottom:"0px",marginTop:"auto",marginBottom:"auto",paddingRight:5,lineHeight:0,width:26,height:20}),t.reactToggleThumb={width:"18px",height:"18px",display:"flex",alignSelf:"center",boxShadow:"0 0 0 1px rgba(0,0,0,0.3)",borderRadius:"50%",WebkitBoxSizing:"border-box",MozBoxSizing:"border-box",boxSizing:"border-box"},t.reactThumbCenteringContainer={position:"absolute",height:"100%",top:0,left:0,display:"flex",flex:1,alignSelf:"stretch",alignItems:"center",justifyContent:"flex-start"}},function(e,t){"use strict";function n(e){return function(){return e}}var r=function(){};r.thatReturns=n,r.thatReturnsFalse=n(!1),r.thatReturnsTrue=n(!0),r.thatReturnsNull=n(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,n){"use strict";function r(e,t,n,r,o,i,l,u){if(a(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,l,u],f=0;s=new Error(t.replace(/%s/g,function(){return c[f++]})),s.name="Invariant Violation"}throw s.framesToPop=1,s}}var a=function(e){};e.exports=r},function(e,t,n){"use strict";var r=n(15),a=n(16),o=n(18);e.exports=function(){function e(e,t,n,r,i,l){l!==o&&a(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t){"use strict";var n="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";e.exports=n},function(e,t,n){(function(t){(function(){var n,r,a,o,i,l;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-i)/1e6},r=t.hrtime,n=function(){var e;return e=r(),1e9*e[0]+e[1]},o=n(),l=1e9*t.uptime(),i=o-l):Date.now?(e.exports=function(){return Date.now()-a},a=Date.now()):(e.exports=function(){return(new Date).getTime()-a},a=(new Date).getTime())}).call(this)}).call(t,n(9))},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(6),s=r(u),c=n(2),f=r(c),p=n(8),d=r(p),y=n(4),h=r(y),m=n(5),v=r(m),b=n(7),g=r(b),S=n(3),T=r(S),O=n(1),k=r(O),w=1e3/60,I=function(e){function t(n){var r=this;a(this,t),e.call(this,n),this.wasAnimating=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyle=null,this.clearUnreadPropStyle=function(e){var t=!1,n=r.state,a=n.currentStyle,o=n.currentVelocity,l=n.lastIdealStyle,u=n.lastIdealVelocity;for(var s in e)if(Object.prototype.hasOwnProperty.call(e,s)){var c=e[s];"number"==typeof c&&(t||(t=!0,a=i({},a),o=i({},o),l=i({},l),u=i({},u)),a[s]=c,o[s]=0,l[s]=c,u[s]=0)}t&&r.setState({currentStyle:a,currentVelocity:o,lastIdealStyle:l,lastIdealVelocity:u})},this.startAnimationIfNecessary=function(){r.animationID=v.default(function(e){var t=r.props.style;if(g.default(r.state.currentStyle,t,r.state.currentVelocity))return r.wasAnimating&&r.props.onRest&&r.props.onRest(),r.animationID=null,r.wasAnimating=!1,void(r.accumulatedTime=0);r.wasAnimating=!0;var n=e||h.default(),a=n-r.prevTime;if(r.prevTime=n,r.accumulatedTime=r.accumulatedTime+a,r.accumulatedTime>10*w&&(r.accumulatedTime=0),0===r.accumulatedTime)return r.animationID=null,void r.startAnimationIfNecessary();var o=(r.accumulatedTime-Math.floor(r.accumulatedTime/w)*w)/w,i=Math.floor(r.accumulatedTime/w),l={},u={},s={},c={};for(var f in t)if(Object.prototype.hasOwnProperty.call(t,f)){var p=t[f];if("number"==typeof p)s[f]=p,c[f]=0,l[f]=p,u[f]=0;else{for(var y=r.state.lastIdealStyle[f],m=r.state.lastIdealVelocity[f],v=0;v<i;v++){var b=d.default(w/1e3,y,m,p.val,p.stiffness,p.damping,p.precision);y=b[0],m=b[1]}var S=d.default(w/1e3,y,m,p.val,p.stiffness,p.damping,p.precision),T=S[0],O=S[1];s[f]=y+(T-y)*o,c[f]=m+(O-m)*o,l[f]=y,u[f]=m}}r.animationID=null,r.accumulatedTime-=i*w,r.setState({currentStyle:s,currentVelocity:c,lastIdealStyle:l,lastIdealVelocity:u}),r.unreadPropStyle=null,r.startAnimationIfNecessary()})},this.state=this.defaultState()}return o(t,e),l(t,null,[{key:"propTypes",value:{defaultStyle:k.default.objectOf(k.default.number),style:k.default.objectOf(k.default.oneOfType([k.default.number,k.default.object])).isRequired,children:k.default.func.isRequired,onRest:k.default.func},enumerable:!0}]),t.prototype.defaultState=function(){var e=this.props,t=e.defaultStyle,n=e.style,r=t||f.default(n),a=s.default(r);return{currentStyle:r,currentVelocity:a,lastIdealStyle:r,lastIdealVelocity:a}},t.prototype.componentDidMount=function(){this.prevTime=h.default(),this.startAnimationIfNecessary()},t.prototype.componentWillReceiveProps=function(e){null!=this.unreadPropStyle&&this.clearUnreadPropStyle(this.unreadPropStyle),this.unreadPropStyle=e.style,null==this.animationID&&(this.prevTime=h.default(),this.startAnimationIfNecessary())},t.prototype.componentWillUnmount=function(){null!=this.animationID&&(v.default.cancel(this.animationID),this.animationID=null)},t.prototype.render=function(){var e=this.props.children(this.state.currentStyle);return e&&T.default.Children.only(e)},t}(T.default.Component);t.default=I,e.exports=t.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e,t,n){for(var r=0;r<e.length;r++)if(!S.default(e[r],t[r],n[r]))return!1;return!0}t.__esModule=!0;var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(6),c=r(s),f=n(2),p=r(f),d=n(8),y=r(d),h=n(4),m=r(h),v=n(5),b=r(v),g=n(7),S=r(g),T=n(3),O=r(T),k=n(1),w=r(k),I=1e3/60,P=function(e){function t(n){var r=this;a(this,t),e.call(this,n),this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(e){for(var t=r.state,n=t.currentStyles,a=t.currentVelocities,o=t.lastIdealStyles,i=t.lastIdealVelocities,u=!1,s=0;s<e.length;s++){var c=e[s],f=!1;for(var p in c)if(Object.prototype.hasOwnProperty.call(c,p)){var d=c[p];"number"==typeof d&&(f||(f=!0,u=!0,n[s]=l({},n[s]),a[s]=l({},a[s]),o[s]=l({},o[s]),i[s]=l({},i[s])),n[s][p]=d,a[s][p]=0,o[s][p]=d,i[s][p]=0)}}u&&r.setState({currentStyles:n,currentVelocities:a,lastIdealStyles:o,lastIdealVelocities:i})},this.startAnimationIfNecessary=function(){r.animationID=b.default(function(e){var t=r.props.styles(r.state.lastIdealStyles);if(i(r.state.currentStyles,t,r.state.currentVelocities))return r.animationID=null,void(r.accumulatedTime=0);var n=e||m.default(),a=n-r.prevTime;if(r.prevTime=n,r.accumulatedTime=r.accumulatedTime+a,r.accumulatedTime>10*I&&(r.accumulatedTime=0),0===r.accumulatedTime)return r.animationID=null,void r.startAnimationIfNecessary();for(var o=(r.accumulatedTime-Math.floor(r.accumulatedTime/I)*I)/I,l=Math.floor(r.accumulatedTime/I),u=[],s=[],c=[],f=[],p=0;p<t.length;p++){var d=t[p],h={},v={},b={},g={};for(var S in d)if(Object.prototype.hasOwnProperty.call(d,S)){var T=d[S];if("number"==typeof T)h[S]=T,v[S]=0,b[S]=T,g[S]=0;else{for(var O=r.state.lastIdealStyles[p][S],k=r.state.lastIdealVelocities[p][S],w=0;w<l;w++){var P=y.default(I/1e3,O,k,T.val,T.stiffness,T.damping,T.precision);O=P[0],k=P[1]}var j=y.default(I/1e3,O,k,T.val,T.stiffness,T.damping,T.precision),_=j[0],x=j[1];h[S]=O+(_-O)*o,v[S]=k+(x-k)*o,b[S]=O,g[S]=k}}c[p]=h,f[p]=v,u[p]=b,s[p]=g}r.animationID=null,r.accumulatedTime-=l*I,r.setState({currentStyles:c,currentVelocities:f,lastIdealStyles:u,lastIdealVelocities:s}),r.unreadPropStyles=null,r.startAnimationIfNecessary()})},this.state=this.defaultState()}return o(t,e),u(t,null,[{key:"propTypes",value:{defaultStyles:w.default.arrayOf(w.default.objectOf(w.default.number)),styles:w.default.func.isRequired,children:w.default.func.isRequired},enumerable:!0}]),t.prototype.defaultState=function(){var e=this.props,t=e.defaultStyles,n=e.styles,r=t||n().map(p.default),a=r.map(function(e){return c.default(e)});return{currentStyles:r,currentVelocities:a,lastIdealStyles:r,lastIdealVelocities:a}},t.prototype.componentDidMount=function(){this.prevTime=m.default(),this.startAnimationIfNecessary()},t.prototype.componentWillReceiveProps=function(e){null!=this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles),this.unreadPropStyles=e.styles(this.state.lastIdealStyles),null==this.animationID&&(this.prevTime=m.default(),this.startAnimationIfNecessary())},t.prototype.componentWillUnmount=function(){null!=this.animationID&&(b.default.cancel(this.animationID),this.animationID=null)},t.prototype.render=function(){var e=this.props.children(this.state.currentStyles);return e&&O.default.Children.only(e)},t}(O.default.Component);t.default=P,e.exports=t.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e,t,n){var r=t;return null==r?e.map(function(e,t){return{key:e.key,data:e.data,style:n[t]}}):e.map(function(e,t){for(var a=0;a<r.length;a++)if(r[a].key===e.key)return{key:r[a].key,data:r[a].data,style:n[t]};return{key:e.key,data:e.data,style:n[t]}})}function l(e,t,n,r){if(r.length!==t.length)return!1;for(var a=0;a<r.length;a++)if(r[a].key!==t[a].key)return!1;for(var a=0;a<r.length;a++)if(!w.default(e[a],t[a].style,n[a]))return!1;return!0}function u(e,t,n,r,a,o,i,l,u){for(var s=b.default(r,a,function(e,r){var a=t(r);return null==a?(n({key:r.key,data:r.data}),null):w.default(o[e],a,i[e])?(n({key:r.key,data:r.data}),null):{key:r.key,data:r.data,style:a}}),c=[],f=[],d=[],y=[],h=0;h<s.length;h++){for(var m=s[h],v=null,g=0;g<r.length;g++)if(r[g].key===m.key){v=g;break}if(null==v){var S=e(m);c[h]=S,d[h]=S;var T=p.default(m.style);f[h]=T,y[h]=T}else c[h]=o[v],d[h]=l[v],f[h]=i[v],y[h]=u[v]}return[s,c,f,d,y]}t.__esModule=!0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(6),p=r(f),d=n(2),y=r(d),h=n(8),m=r(h),v=n(23),b=r(v),g=n(4),S=r(g),T=n(5),O=r(T),k=n(7),w=r(k),I=n(3),P=r(I),j=n(1),_=r(j),x=1e3/60,M=function(e){function t(n){var r=this;a(this,t),e.call(this,n),this.unmounting=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(e){for(var t=u(r.props.willEnter,r.props.willLeave,r.props.didLeave,r.state.mergedPropsStyles,e,r.state.currentStyles,r.state.currentVelocities,r.state.lastIdealStyles,r.state.lastIdealVelocities),n=t[0],a=t[1],o=t[2],i=t[3],l=t[4],c=0;c<e.length;c++){var f=e[c].style,p=!1;for(var d in f)if(Object.prototype.hasOwnProperty.call(f,d)){var y=f[d];"number"==typeof y&&(p||(p=!0,a[c]=s({},a[c]),o[c]=s({},o[c]),i[c]=s({},i[c]),l[c]=s({},l[c]),n[c]={key:n[c].key,data:n[c].data,style:s({},n[c].style)}),a[c][d]=y,o[c][d]=0,i[c][d]=y,l[c][d]=0,n[c].style[d]=y)}}r.setState({currentStyles:a,currentVelocities:o,mergedPropsStyles:n,lastIdealStyles:i,lastIdealVelocities:l})},this.startAnimationIfNecessary=function(){r.unmounting||(r.animationID=O.default(function(e){if(!r.unmounting){var t=r.props.styles,n="function"==typeof t?t(i(r.state.mergedPropsStyles,r.unreadPropStyles,r.state.lastIdealStyles)):t;if(l(r.state.currentStyles,n,r.state.currentVelocities,r.state.mergedPropsStyles))return r.animationID=null,void(r.accumulatedTime=0);var a=e||S.default(),o=a-r.prevTime;if(r.prevTime=a,r.accumulatedTime=r.accumulatedTime+o,r.accumulatedTime>10*x&&(r.accumulatedTime=0),0===r.accumulatedTime)return r.animationID=null,void r.startAnimationIfNecessary();for(var s=(r.accumulatedTime-Math.floor(r.accumulatedTime/x)*x)/x,c=Math.floor(r.accumulatedTime/x),f=u(r.props.willEnter,r.props.willLeave,r.props.didLeave,r.state.mergedPropsStyles,n,r.state.currentStyles,r.state.currentVelocities,r.state.lastIdealStyles,r.state.lastIdealVelocities),p=f[0],d=f[1],y=f[2],h=f[3],v=f[4],b=0;b<p.length;b++){var g=p[b].style,T={},O={},k={},w={};for(var I in g)if(Object.prototype.hasOwnProperty.call(g,I)){var P=g[I];if("number"==typeof P)T[I]=P,O[I]=0,k[I]=P,w[I]=0;else{for(var j=h[b][I],_=v[b][I],M=0;M<c;M++){var R=m.default(x/1e3,j,_,P.val,P.stiffness,P.damping,P.precision);j=R[0],_=R[1]}var C=m.default(x/1e3,j,_,P.val,P.stiffness,P.damping,P.precision),D=C[0],H=C[1];T[I]=j+(D-j)*s,O[I]=_+(H-_)*s,k[I]=j,w[I]=_}}h[b]=k,v[b]=w,d[b]=T,y[b]=O}r.animationID=null,r.accumulatedTime-=c*x,r.setState({currentStyles:d,currentVelocities:y,lastIdealStyles:h,lastIdealVelocities:v,mergedPropsStyles:p}),r.unreadPropStyles=null,r.startAnimationIfNecessary()}}))},this.state=this.defaultState()}return o(t,e),c(t,null,[{key:"propTypes",value:{defaultStyles:_.default.arrayOf(_.default.shape({key:_.default.string.isRequired,data:_.default.any,style:_.default.objectOf(_.default.number).isRequired})),styles:_.default.oneOfType([_.default.func,_.default.arrayOf(_.default.shape({key:_.default.string.isRequired,data:_.default.any,style:_.default.objectOf(_.default.oneOfType([_.default.number,_.default.object])).isRequired}))]).isRequired,children:_.default.func.isRequired,willEnter:_.default.func,willLeave:_.default.func,didLeave:_.default.func},enumerable:!0},{key:"defaultProps",value:{willEnter:function(e){return y.default(e.style)},willLeave:function(){return null},didLeave:function(){}},enumerable:!0}]),t.prototype.defaultState=function(){var e=this.props,t=e.defaultStyles,n=e.styles,r=e.willEnter,a=e.willLeave,o=e.didLeave,i="function"==typeof n?n(t):n,l=void 0;l=null==t?i:t.map(function(e){for(var t=0;t<i.length;t++)if(i[t].key===e.key)return i[t];return e});var s=null==t?i.map(function(e){return y.default(e.style)}):t.map(function(e){return y.default(e.style)}),c=null==t?i.map(function(e){return p.default(e.style)}):t.map(function(e){return p.default(e.style)}),f=u(r,a,o,l,i,s,c,s,c),d=f[0],h=f[1],m=f[2],v=f[3],b=f[4];return{currentStyles:h,currentVelocities:m,lastIdealStyles:v,lastIdealVelocities:b,mergedPropsStyles:d}},t.prototype.componentDidMount=function(){this.prevTime=S.default(),this.startAnimationIfNecessary()},t.prototype.componentWillReceiveProps=function(e){this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles);var t=e.styles;"function"==typeof t?this.unreadPropStyles=t(i(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.lastIdealStyles)):this.unreadPropStyles=t,null==this.animationID&&(this.prevTime=S.default(),this.startAnimationIfNecessary())},t.prototype.componentWillUnmount=function(){this.unmounting=!0,null!=this.animationID&&(O.default.cancel(this.animationID),this.animationID=null)},t.prototype.render=function(){var e=i(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.currentStyles),t=this.props.children(e);return t&&P.default.Children.only(t)},t}(P.default.Component);t.default=M,e.exports=t.default},function(e,t){"use strict";function n(e,t,n){for(var r={},a=0;a<e.length;a++)r[e[a].key]=a;for(var o={},a=0;a<t.length;a++)o[t[a].key]=a;for(var i=[],a=0;a<t.length;a++)i[a]=t[a];for(var a=0;a<e.length;a++)if(!Object.prototype.hasOwnProperty.call(o,e[a].key)){var l=n(a,e[a]);null!=l&&i.push(l)}return i.sort(function(e,n){var a=o[e.key],i=o[n.key],l=r[e.key],u=r[n.key];if(null!=a&&null!=i)return o[e.key]-o[n.key];if(null!=l&&null!=u)return r[e.key]-r[n.key];if(null!=a){for(var s=0;s<t.length;s++){var c=t[s].key;if(Object.prototype.hasOwnProperty.call(r,c)){if(a<o[c]&&u>r[c])return-1;if(a>o[c]&&u<r[c])return 1}}return 1}for(var s=0;s<t.length;s++){var c=t[s].key;if(Object.prototype.hasOwnProperty.call(r,c)){if(i<o[c]&&l>r[c])return 1;if(i>o[c]&&l<r[c])return-1}}return-1})}t.__esModule=!0,t.default=n,e.exports=t.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e.default:e}t.__esModule=!0;var a=n(20);t.Motion=r(a);var o=n(21);t.StaggeredMotion=r(o);var i=n(22);t.TransitionMotion=r(i);var l=n(26);t.spring=r(l);var u=n(10);t.presets=r(u);var s=n(2);t.stripStyle=r(s);var c=n(25);
t.reorderKeys=r(c)},function(e,t,n){"use strict";function r(){}t.__esModule=!0,t.default=r,e.exports=t.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){return o({},u,t,{val:e})}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=a;var i=n(10),l=r(i),u=o({},l.default.noWobble,{precision:.01});e.exports=t.default}])});
      };
    };
  }
}, {package:"react-toggle-button",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-toggle-button/lib/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/logo/fox.json", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/logo/fox.json
      return function (require, module, exports) {
module.exports={
  "positions": [
    [111.024597, 52.604599, 46.225899],
    [114.025002, 87.673302, 58.9818],
    [66.192001, 80.898003, 55.394299],
    [72.113297, 35.491798, 30.871401],
    [97.804497, 116.560997, 73.978798],
    [16.7623, 58.010899, 58.078201],
    [52.608898, 30.3641, 42.556099],
    [106.881401, 31.945499, 46.9133],
    [113.484596, 38.6049, 49.121498],
    [108.6633, 43.2332, 46.315399],
    [101.216599, 15.9822, 46.308201],
    [16.6605, -16.2883, 93.618698],
    [40.775002, -10.2288, 85.276398],
    [23.926901, -2.5103, 86.736504],
    [11.1691, -7.0037, 99.377602],
    [9.5692, -34.393902, 141.671997],
    [12.596, 7.1655, 88.740997],
    [61.180901, 8.8142, 76.996803],
    [39.719501, -28.927099, 88.963799],
    [13.7962, -68.575699, 132.057007],
    [15.2674, -62.32, 129.688004],
    [14.8446, -52.6096, 140.113007],
    [12.8917, -49.771599, 144.740997],
    [35.604198, -71.758003, 81.063904],
    [47.462502, -68.606102, 63.369701],
    [38.2486, -64.730202, 38.909901],
    [-12.8917, -49.771599, 144.740997],
    [-13.7962, -68.575699, 132.057007],
    [17.802099, -71.758003, 81.063904],
    [19.1243, -69.0168, 49.420101],
    [38.2486, -66.275597, 17.776199],
    [12.8928, -36.703499, 141.671997],
    [109.283997, -93.589897, 27.824301],
    [122.117996, -36.8894, 35.025002],
    [67.7668, -30.197001, 78.417801],
    [33.180698, 101.851997, 25.3186],
    [9.4063, -35.589802, 150.722],
    [-9.5692, -34.393902, 141.671997],
    [-9.4063, -35.589802, 150.722],
    [11.4565, -37.899399, 150.722],
    [-12.596, 7.1655, 88.740997],
    [-11.1691, -7.0037, 99.377602],
    [70.236504, 62.836201, -3.9475],
    [47.263401, 54.293999, -27.414801],
    [28.7302, 91.731102, -24.972601],
    [69.167603, 6.5862, -12.7757],
    [28.7302, 49.1003, -48.3596],
    [31.903, 5.692, -47.821999],
    [35.075802, -34.432899, -16.280899],
    [115.284103, 48.681499, 48.684101],
    [110.842796, 28.4821, 49.176201],
    [-19.1243, -69.0168, 49.420101],
    [-38.2486, -66.275597, 17.776199],
    [-111.024597, 52.604599, 46.225899],
    [-72.113297, 35.491798, 30.871401],
    [-66.192001, 80.898003, 55.394299],
    [-114.025002, 87.673302, 58.9818],
    [-97.804497, 116.560997, 73.978798],
    [-52.608898, 30.3641, 42.556099],
    [-16.7623, 58.010899, 58.078201],
    [-106.881401, 31.945499, 46.9133],
    [-108.6633, 43.2332, 46.315399],
    [-113.484596, 38.6049, 49.121498],
    [-101.216599, 15.9822, 46.308201],
    [-16.6605, -16.2883, 93.618698],
    [-23.926901, -2.5103, 86.736504],
    [-40.775002, -10.2288, 85.276398],
    [-61.180901, 8.8142, 76.996803],
    [-39.719501, -28.927099, 88.963799],
    [-14.8446, -52.6096, 140.113007],
    [-15.2674, -62.32, 129.688004],
    [-47.462502, -68.606102, 63.369701],
    [-35.604198, -71.758003, 81.063904],
    [-38.2486, -64.730202, 38.909901],
    [-17.802099, -71.758003, 81.063904],
    [-12.8928, -36.703499, 141.671997],
    [-67.7668, -30.197001, 78.417801],
    [-122.117996, -36.8894, 35.025002],
    [-109.283997, -93.589897, 27.824301],
    [-33.180698, 101.851997, 25.3186],
    [-11.4565, -37.899399, 150.722],
    [-70.236504, 62.836201, -3.9475],
    [-28.7302, 91.731102, -24.972601],
    [-47.263401, 54.293999, -27.414801],
    [-69.167603, 6.5862, -12.7757],
    [-28.7302, 49.1003, -48.3596],
    [-31.903, 5.692, -47.821999],
    [-35.075802, -34.432899, -16.280899],
    [-115.284103, 48.681499, 48.684101],
    [-110.842796, 28.4821, 49.176201]
  ],
  "chunks": [
    {
      "color": [119, 57, 0],
      "faces": [
        [0, 1, 2],
        [2, 3, 0],
        [4, 5, 2],
        [6, 3, 2],
        [2, 5, 6],
        [7, 8, 9],
        [10, 3, 6],
        [10, 50, 7],
        [7, 3, 10],
        [7, 9, 3],
        [49, 0, 9],
        [3, 9, 0],
        [53, 54, 55],
        [55, 56, 53],
        [57, 56, 55],
        [58, 59, 55],
        [55, 54, 58],
        [60, 61, 62],
        [63, 58, 54],
        [63, 60, 89],
        [60, 63, 54],
        [60, 54, 61],
        [88, 61, 53],
        [54, 53, 61],
        [2, 1, 4],
        [55, 59, 57]
      ]
    },
    {
      "color": [36, 51, 67],
      "faces": [
        [11, 12, 13],
        [64, 65, 66]
      ]
    },
    {
      "color": [228, 116, 36],
      "faces": [
        [14, 15, 11],
        [11, 16, 14],
        [17, 12, 18],
        [41, 64, 37],
        [67, 68, 66]
      ]
    },
    {
      "color": [192, 172, 157],
      "faces": [
        [19, 20, 21],
        [21, 22, 19],
        [20, 19, 23],
        [23, 24, 20],
        [23, 25, 24],
        [19, 22, 26],
        [26, 27, 19],
        [23, 28, 29],
        [23, 29, 30],
        [25, 23, 30],
        [29, 51, 52],
        [52, 30, 29],
        [27, 26, 69],
        [69, 70, 27],
        [70, 71, 72],
        [72, 27, 70],
        [72, 71, 73],
        [51, 74, 72],
        [52, 51, 72],
        [73, 52, 72],
        [19, 27, 74],
        [74, 28, 19],
        [51, 29, 28],
        [28, 74, 51],
        [74, 27, 72],
        [28, 23, 19]
      ]
    },
    {
      "color": [214, 194, 178],
      "faces": [
        [21, 20, 24],
        [24, 31, 21],
        [69, 71, 70],
        [71, 69, 75]
      ]
    },
    {
      "color": [228, 119, 25],
      "faces": [
        [31, 24, 18],
        [6, 5, 16],
        [16, 17, 6],
        [24, 32, 33],
        [33, 34, 24],
        [5, 4, 35],
        [75, 68, 71],
        [58, 67, 40],
        [40, 59, 58],
        [71, 76, 77],
        [77, 78, 71]
      ]
    },
    {
      "color": [205, 98, 0],
      "faces": [
        [24, 34, 18],
        [16, 13, 12],
        [12, 17, 16],
        [13, 16, 11],
        [71, 68, 76],
        [40, 67, 66],
        [66, 65, 40],
        [65, 64, 40]
      ]
    },
    {
      "color": [0, 0, 0],
      "faces": [
        [36, 15, 37],
        [37, 38, 36],
        [31, 39, 22],
        [22, 21, 31],
        [31, 15, 36],
        [36, 39, 31],
        [75, 69, 26],
        [26, 80, 75],
        [75, 80, 38],
        [38, 37, 75],
        [38, 80, 39],
        [39, 36, 38],
        [39, 80, 26],
        [26, 22, 39]
      ]
    },
    {
      "color": [247, 132, 25],
      "faces": [
        [17, 33, 10],
        [17, 18, 34],
        [34, 33, 17],
        [10, 6, 17],
        [11, 15, 31],
        [31, 18, 11],
        [18, 12, 11],
        [14, 16, 40],
        [40, 41, 14],
        [59, 5, 35],
        [35, 79, 59],
        [67, 63, 77],
        [67, 77, 76],
        [76, 68, 67],
        [63, 67, 58],
        [64, 68, 75],
        [75, 37, 64],
        [68, 64, 66],
        [14, 41, 37],
        [37, 15, 14],
        [5, 59, 40],
        [40, 16, 5]
      ]
    },
    {
      "color": [225, 119, 25],
      "faces": [
        [35, 4, 42],
        [4, 1, 42],
        [42, 43, 44],
        [44, 35, 42],
        [45, 43, 42],
        [42, 10, 45],
        [30, 32, 24],
        [24, 25, 30],
        [30, 33, 32],
        [33, 30, 10],
        [44, 43, 46],
        [43, 45, 47],
        [47, 46, 43],
        [48, 47, 45],
        [45, 30, 48],
        [30, 45, 10],
        [49, 42, 0],
        [8, 7, 42],
        [50, 42, 7],
        [50, 10, 42],
        [1, 0, 42],
        [42, 9, 8],
        [42, 49, 9],
        [64, 41, 40],
        [57, 59, 79],
        [79, 81, 57],
        [57, 81, 56],
        [82, 79, 35],
        [35, 44, 82],
        [81, 79, 82],
        [82, 83, 81],
        [84, 63, 81],
        [81, 83, 84],
        [44, 46, 85],
        [85, 82, 44],
        [52, 73, 71],
        [71, 78, 52],
        [52, 78, 77],
        [77, 63, 52],
        [82, 85, 83],
        [83, 85, 86],
        [86, 84, 83],
        [87, 52, 84],
        [84, 86, 87],
        [52, 63, 84],
        [88, 53, 81],
        [62, 81, 60],
        [89, 60, 81],
        [89, 81, 63],
        [56, 81, 53],
        [81, 62, 61],
        [81, 61, 88],
        [48, 87, 86],
        [86, 47, 48],
        [47, 86, 85],
        [85, 46, 47],
        [48, 30, 52],
        [52, 87, 48]
      ]
    }
  ]
}

      };
    };
  }
}, {package:"@metamask/logo",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/logo/fox.json",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/logo/util.js", {"gl-mat4/invert":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/gl-mat4/invert.js","gl-mat4/lookAt":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/gl-mat4/lookAt.js","gl-mat4/multiply":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/gl-mat4/multiply.js","gl-mat4/perspective":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/gl-mat4/perspective.js","gl-mat4/rotate":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/gl-mat4/rotate.js","gl-vec3/transformMat4":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/gl-vec3/transformMat4.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/logo/util.js
      return function (require, module, exports) {
const perspective = require('gl-mat4/perspective');
const multiply = require('gl-mat4/multiply');
const lookAt = require('gl-mat4/lookAt');
const invert = require('gl-mat4/invert');
const rotate = require('gl-mat4/rotate');
const transform = require('gl-vec3/transformMat4');

const SVG_NS = 'http://www.w3.org/2000/svg';

// Taken from https://github.com/yuzhe-han/ParentNode-replaceChildren
// This is to support browsers that do not yet support `replaceChildren`
const replaceChildrenPonyfill = function (...addNodes) {
  while (this.lastChild) {
    this.removeChild(this.lastChild);
  }

  if (addNodes.length > 0) {
    this.append(...addNodes);
  }
};

module.exports = {
  calculateSizingOptions,
  createLogoViewer,
  createModelRenderer,
  loadModelFromJson,
  positionsFromModel,
  createPolygonsFromModelJson,
  createStandardModelPolygon,
  createMatrixComputer,
  compareZ,
  createFaceUpdater,
  createNode,
  setAttribute,
  setGradientDefinitions,
  setMaskDefinitions,
  svgElementToSvgImageContent,
  Polygon,
};

/**
 * A distance measurement used for SVG attributes. A length is specified as a number followed by a
 * unit identifier.
 *
 * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#length} for further
 * information.
 *
 * @typedef {`${number}${'em' | 'ex' | 'px' | 'in' | 'cm' | 'mm' | 'pt' | 'pc' | '%'}`} SvgLength
 */

/**
 * A definition for a `<stop>` SVG element, which defines a color and the position for that color
 * on a gradient. This element is always a child of either a `<linearGradient>` or
 * `<radialGradient>` element.
 *
 * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop} for more information
 * about the `<stop>` element.
 *
 * @typedef {object} StopDefinition
 * @property {number | `${number}%`} [offset] - The location of the gradient stop along the
 * gradient vector.
 * @property {string} [stop-color] - The color of the gradient stop. See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop}.
 * @property {number} [stop-opacity] - The opacity of the gradient stop. See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stop-opacity}.
 */

/**
 * A definition for a `<linearGradient>` SVG element. This definition includes all supported
 * `<linearGradient>` attributes, and it includes a `stops` property which is an array of
 * definitions for each `<stop>` child node.
 *
 * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient} for more
 * information about the `<linearGradient>` element.
 *
 * @typedef {object} LinearGradientDefinition
 * @property {string} [gradientTransform] - A transform from the gradient coordinate system to the
 * target coordinate system. See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/gradientTransform}.
 * @property {'userSpaceOnUse' | 'objectBoundingBox'} [gradientUnits] - The coordinate system used.
 * for the coordinate attributes. See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/gradientUnits}.
 * @property {'pad' | 'reflect' | 'repeat'} [spreadMethod] - The method used to fill a shape beyond
 * the defined edges of a gradient. See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/spreadMethod}.
 * @property {StopDefinition[]} [stops] - The colors of the gradient, and the position of each
 * color along the gradient vector.
 * @property {'linear'} type - The type of the gradient.
 * @property {SvgLength} [x1] - The x coordinate of the starting point of the vector gradient.
 * @property {SvgLength} [x2] - The x coordinate of the ending point of the vector gradient.
 * @property {SvgLength} [y1] - The y coordinate of the starting point of the vector gradient.
 * @property {SvgLength} [y2] - The y coordinate of the ending point of the vector gradient.
 */

/**
 * A definition for a `<radialGradient>` SVG element. This definition includes all supported
 * `<radialGradient>` attributes, and it includes a `stops` property which is an array of
 * definitions for each `<stop>` child node.
 *
 * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient} for more
 * information about the `<radialGradient>` element.
 *
 * @typedef {object} RadialGradientDefinition
 * @property {SvgLength} [cx] - The x coordinate of the end circle of the radial gradiant.
 * @property {SvgLength} [cy] - The y coordinate of the end circle of the radial gradient.
 * @property {SvgLength} [fr] - The radius of the start circle of the radial gradient.
 * @property {SvgLength} [fx] - The x coordinate of the start circle of the radial gradient.
 * @property {SvgLength} [fy] - The y coordinate of the start circle of the radial gradient.
 * @property {string} [gradientTransform] - A transform from the gradient coordinate system to the
 * target coordinate system. See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/gradientTransform}.
 * @property {'userSpaceOnUse' | 'objectBoundingBox'} [gradientUnits] - The coordinate system used
 * for the coordinate attributes. See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/gradientUnits}.
 * @property {SvgLength} [r] - The radius of the end circle of the radial gradient.
 * @property {'pad' | 'reflect' | 'repeat'} [spreadMethod] - The method used to fill a shape beyond
 * the defined edges of a gradient. See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/spreadMethod}.
 * @property {StopDefinition[]} [stops] - The colors of the gradient, and the position of each
 * color along the gradient vector.
 * @property {'radial'} type - The type of the gradient.
 */

function createLogoViewer(
  container,
  renderScene,
  {
    followMouse = false,
    followMotion = false,
    slowDrift = false,
    lazyRender = true,
  } = {},
) {
  let shouldRender = true;
  const mouse = {
    x: 0,
    y: 0,
  };
  const lookCurrent = [0, 0];
  const lookRate = 0.3;

  // closes over scene state
  const renderCurrentScene = () => {
    updateLookCurrent();
    renderScene(lookCurrent, slowDrift);
  };

  function setLookAtTarget(target) {
    const bounds = container.getBoundingClientRect();
    mouse.x = 1.0 - (2.0 * (target.x - bounds.left)) / bounds.width;
    mouse.y = 1.0 - (2.0 * (target.y - bounds.top)) / bounds.height;
  }

  function stopAnimation() {
    shouldRender = false;
  }

  function startAnimation() {
    shouldRender = true;
  }

  function setFollowMouse(state) {
    // eslint-disable-next-line no-param-reassign
    followMouse = state;
  }

  function setFollowMotion(state) {
    // eslint-disable-next-line no-param-reassign
    followMotion = state;
  }

  window.addEventListener('mousemove', function (ev) {
    if (!shouldRender) {
      startAnimation();
    }

    if (followMouse) {
      setLookAtTarget({
        x: ev.clientX,
        y: ev.clientY,
      });
      renderCurrentScene();
    }
  });

  window.addEventListener('deviceorientation', function (event) {
    if (!shouldRender) {
      startAnimation();
    }

    if (followMotion) {
      // gamma: left to right
      const leftToRight = event.gamma;
      // beta: front back motion
      const frontToBack = event.beta;
      // x offset: needed to correct the intial position
      const xOffset = 200;
      // y offset: needed to correct the intial position
      const yOffset = -300;
      // acceleration
      const acceleration = 10;

      setLookAtTarget({
        x: xOffset + leftToRight * acceleration,
        y: yOffset + frontToBack * acceleration,
      });
      renderCurrentScene();
    }
  });

  function lookAtAndRender(target) {
    // update look target
    setLookAtTarget(target);
    // this should prolly just call updateLookCurrent or set lookCurrent values to eaxactly lookTarget
    // but im not really sure why its different, so im leaving it alone
    lookCurrent[0] = mouse.x;
    lookCurrent[1] = mouse.y + 0.085 / lookRate;
    renderCurrentScene();
  }

  function renderLoop() {
    if (!shouldRender) {
      return;
    }
    window.requestAnimationFrame(renderLoop);
    renderCurrentScene();
  }

  function updateLookCurrent() {
    const li = 1.0 - lookRate;
    lookCurrent[0] = li * lookCurrent[0] + lookRate * mouse.x;
    lookCurrent[1] = li * lookCurrent[1] + lookRate * mouse.y + 0.085;
  }

  if (lazyRender) {
    renderCurrentScene();
  } else {
    renderLoop();
  }

  return {
    container,
    lookAt: setLookAtTarget,
    setFollowMouse,
    setFollowMotion,
    stopAnimation,
    startAnimation,
    lookAtAndRender,
    renderCurrentScene,
  };
}

function loadModelFromJson(
  modelJson,
  createSvgPolygon = createStandardModelPolygon,
) {
  const vertCount = modelJson.positions.length;
  const positions = new Float32Array(3 * vertCount);
  const transformed = new Float32Array(3 * vertCount);
  const { polygons, polygonsByChunk } = createPolygonsFromModelJson(
    modelJson,
    createSvgPolygon,
  );
  positionsFromModel(positions, modelJson);
  const updatePositions = createPositionUpdater(
    positions,
    transformed,
    vertCount,
  );
  const modelObj = {
    updatePositions,
    positions,
    transformed,
    polygons,
    polygonsByChunk,
  };
  return modelObj;
}

function createModelRenderer(container, cameraDistance, modelObj) {
  const { updatePositions, transformed, polygons } = modelObj;

  for (const polygon of polygons) {
    container.appendChild(polygon.svg);
  }

  const computeMatrix = createMatrixComputer(cameraDistance);
  const updateFaces = createFaceUpdater(container, polygons, transformed);

  return (rect, lookPos, slowDrift) => {
    const matrix = computeMatrix(rect, lookPos, slowDrift);
    updatePositions(matrix);
    updateFaces(rect, container, polygons, transformed);
  };
}

function positionsFromModel(positions, modelJson) {
  const pp = modelJson.positions;
  let ptr = 0;
  for (let i = 0; i < pp.length; ++i) {
    const p = pp[i];
    for (let j = 0; j < 3; ++j) {
      positions[ptr] = p[j];
      ptr += 1;
    }
  }
}

function createPolygonsFromModelJson(modelJson, createSvgPolygon) {
  const polygons = [];
  const polygonsByChunk = modelJson.chunks.map((chunk, index) => {
    const { faces } = chunk;
    return faces.map((face) => {
      const svgPolygon = createSvgPolygon(chunk, {
        gradients: modelJson.gradients,
        index,
        masks: modelJson.masks,
      });
      const polygon = new Polygon(svgPolygon, face);
      polygons.push(polygon);
      return polygon;
    });
  });
  return { polygons, polygonsByChunk };
}

/**
 * Create an SVG `<polygon> element.
 *
 * This polygon is assigned the correct `fill` and `stroke` attributes, according to the chunk
 * definition provided. But the `points` attribute is always set to a dummy value, as it gets reset
 * later to the correct position during each render loop.
 *
 * @param {object} chunk - The definition for the chunk of the model this polygon is a part of.
 * This includes the color or gradient to apply to the polygon.
 * @param {object} options - Polygon options.
 * @param {(LinearGradientDefinition | RadialGradientDefinition)[]} [options.gradients] - The set of
 * all gradient definitions used in this model.
 * @param options.index - The index for the chunk this polygon is found in.
 * @returns {Element} The `<polygon>` SVG element.
 */
function createStandardModelPolygon(chunk, { gradients = {}, index, masks }) {
  const svgPolygon = createNode('polygon');

  if (chunk.gradient && chunk.color) {
    throw new Error(
      `Both gradient and color for chunk '${index}'. These options are mutually exclusive.`,
    );
  } else if (chunk.gradient) {
    const gradientId = chunk.gradient;
    if (!gradients[gradientId]) {
      throw new Error(`Gradient ID not found: '${gradientId}'`);
    }

    setAttribute(svgPolygon, 'fill', `url('#${gradientId}')`);
    setAttribute(svgPolygon, 'stroke', `url('#${gradientId}')`);
  } else {
    const fill =
      typeof chunk.color === 'string' ? chunk.color : `rgb(${chunk.color})`;
    setAttribute(svgPolygon, 'fill', fill);
    setAttribute(svgPolygon, 'stroke', fill);
  }

  if (chunk.mask) {
    if (!masks[chunk.mask]) {
      throw new Error(`Mask ID not found: '${chunk.mask}'`);
    }
    setAttribute(svgPolygon, 'mask', `url('#${chunk.mask}')`);
  }

  setAttribute(svgPolygon, 'points', '0,0, 10,0, 0,10');
  return svgPolygon;
}

function createMatrixComputer(distance) {
  const objectCenter = new Float32Array(3);
  const up = new Float32Array([0, 1, 0]);
  const projection = new Float32Array(16);
  const model = new Float32Array(16);
  const view = lookAt(
    new Float32Array(16),
    new Float32Array([0, 0, distance]),
    objectCenter,
    up,
  );
  const invView = invert(new Float32Array(16), view);
  const invProjection = new Float32Array(16);
  const target = new Float32Array(3);
  const transformedMatrix = new Float32Array(16);

  const X = new Float32Array([1, 0, 0]);
  const Y = new Float32Array([0, 1, 0]);
  const Z = new Float32Array([0, 0, 1]);

  return (rect, lookPos, slowDrift) => {
    const viewportWidth = rect.width;
    const viewportHeight = rect.height;
    perspective(
      projection,
      Math.PI / 4.0,
      viewportWidth / viewportHeight,
      100.0,
      1000.0,
    );
    invert(invProjection, projection);
    target[0] = lookPos[0];
    target[1] = lookPos[1];
    target[2] = 1.2;
    transform(target, target, invProjection);
    transform(target, target, invView);
    lookAt(model, objectCenter, target, up);

    // this shouldnt operate directly on the matrix/model,
    // it should likely operate on the lookPos
    // if we do want to operate on the matrix/model, it shouldnt happen here
    if (slowDrift) {
      const time = Date.now() / 1000.0;
      rotate(model, model, 0.1 + Math.sin(time / 3) * 0.2, X);
      rotate(model, model, -0.1 + Math.sin(time / 2) * 0.03, Z);
      rotate(model, model, 0.5 + Math.sin(time / 3) * 0.2, Y);
    }

    multiply(transformedMatrix, projection, view);
    multiply(transformedMatrix, transformedMatrix, model);

    return transformedMatrix;
  };
}

function createPositionUpdater(positions, transformed, vertCount) {
  return (M) => {
    const m00 = M[0];
    const m01 = M[1];
    const m02 = M[2];
    const m03 = M[3];
    const m10 = M[4];
    const m11 = M[5];
    const m12 = M[6];
    const m13 = M[7];
    const m20 = M[8];
    const m21 = M[9];
    const m22 = M[10];
    const m23 = M[11];
    const m30 = M[12];
    const m31 = M[13];
    const m32 = M[14];
    const m33 = M[15];

    for (let i = 0; i < vertCount; ++i) {
      const x = positions[3 * i];
      const y = positions[3 * i + 1];
      const z = positions[3 * i + 2];

      const tw = x * m03 + y * m13 + z * m23 + m33;
      transformed[3 * i] = (x * m00 + y * m10 + z * m20 + m30) / tw;
      transformed[3 * i + 1] = (x * m01 + y * m11 + z * m21 + m31) / tw;
      transformed[3 * i + 2] = (x * m02 + y * m12 + z * m22 + m32) / tw;
    }
  };
}

function compareZ(a, b) {
  return b.zIndex - a.zIndex;
}

function createFaceUpdater(container, polygons, transformed) {
  const toDraw = [];
  return (rect) => {
    let i;
    const w = rect.width;
    const h = rect.height;
    toDraw.length = 0;
    for (i = 0; i < polygons.length; ++i) {
      const poly = polygons[i];
      const { indices } = poly;

      const i0 = indices[0];
      const i1 = indices[1];
      const i2 = indices[2];
      const ax = transformed[3 * i0];
      const ay = transformed[3 * i0 + 1];
      const bx = transformed[3 * i1];
      const by = transformed[3 * i1 + 1];
      const cx = transformed[3 * i2];
      const cy = transformed[3 * i2 + 1];
      const det = (bx - ax) * (cy - ay) - (by - ay) * (cx - ax);
      if (det < 0) {
        continue;
      }

      const points = [];
      let zmax = -Infinity;
      let zmin = Infinity;
      const element = poly.svg;
      for (let j = 0; j < 3; ++j) {
        const idx = indices[j];
        points.push(
          `${0.5 * w * (1.0 - transformed[3 * idx])},${
            0.5 * h * (1.0 - transformed[3 * idx + 1])
          }`,
        );
        const z = transformed[3 * idx + 2];
        zmax = Math.max(zmax, z);
        zmin = Math.min(zmin, z);
      }
      poly.zIndex = zmax + 0.25 * zmin;
      const joinedPoints = points.join(' ');

      if (joinedPoints.indexOf('NaN') === -1) {
        setAttribute(element, 'points', joinedPoints);
      }

      toDraw.push(poly);
    }
    toDraw.sort(compareZ);

    const newPolygons = toDraw.map((poly) => poly.svg);
    const defs = container.getElementsByTagName('defs');
    const maskChildren = container.getElementsByTagName('mask');
    if (container.replaceChildren) {
      container.replaceChildren(...defs, ...maskChildren, ...newPolygons);
    } else {
      replaceChildrenPonyfill.bind(container)(
        ...defs,
        ...maskChildren,
        ...newPolygons,
      );
    }
  };
}

function calculateSizingOptions(options = {}) {
  let width = options.width || 400;
  let height = options.height || 400;

  if (!options.pxNotRatio) {
    width = Math.floor(window.innerWidth * (options.width || 0.25));
    height = Math.floor(window.innerHeight * options.height || width);

    if ('minWidth' in options && width < options.minWidth) {
      width = options.minWidth;
      height = Math.floor((options.minWidth * options.height) / options.width);
    }
  }
  return { width, height };
}

function createNode(type) {
  return document.createElementNS(SVG_NS, type);
}

function setAttribute(node, attribute, value) {
  node.setAttributeNS(null, attribute, value);
}

function svgElementToSvgImageContent(svgElement) {
  const inner = svgElement.innerHTML;
  const head =
    `<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"> ` +
    `<svg width="521px" height="521px" version="1.1" baseProfile="full" xmlns="${SVG_NS}" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events">`;
  const foot = '</svg>';
  const content = head + inner + foot;
  return content;
}

function Polygon(svg, indices) {
  this.svg = svg;
  this.indices = indices;
  this.zIndex = 0;
}

/**
 * Parse gradient definitions and construct them in the DOM.
 *
 * Both `<linearGradient>` and `<radialGradient>` are supported. All gradients get added to a
 * `<defs>` element that is added as a direct child of the container element.
 *
 * @param {Element} container - The `<svg>` HTML element that the definitions should be added to.
 * @param {(LinearGradientDefinition | RadialGradientDefinition)[]} [gradients] - The gradient definitions.
 */
function setGradientDefinitions(container, gradients) {
  if (!gradients || Object.keys(gradients).length === 0) {
    return;
  }

  const defsContainer = createNode('defs');

  const linearCoordinateAttributes = ['x1', 'x2', 'y1', 'y2'];
  const radialCoordinateAttributes = ['cx', 'cy', 'fr', 'fx', 'fy', 'r'];
  const commonAttributes = [
    'gradientTransform',
    'gradientUnits',
    'spreadMethod',
    'stops',
    'type',
  ];
  const allLinearAttributes = [
    ...linearCoordinateAttributes,
    ...commonAttributes,
  ];
  const allRadialAttributes = [
    ...radialCoordinateAttributes,
    ...commonAttributes,
  ];

  for (const [gradientId, gradientDefinition] of Object.entries(gradients)) {
    let gradient;
    if (gradientDefinition.type === 'linear') {
      gradient = createNode('linearGradient');

      const unsupportedLinearAttribute = Object.keys(gradientDefinition).find(
        (attribute) => !allLinearAttributes.includes(attribute),
      );
      if (unsupportedLinearAttribute) {
        throw new Error(
          `Unsupported linear gradient attribute: '${unsupportedLinearAttribute}'`,
        );
      } else if (
        linearCoordinateAttributes.some(
          (attributeName) => gradientDefinition[attributeName] !== undefined,
        )
      ) {
        const missingAttributes = linearCoordinateAttributes.filter(
          (attributeName) => gradientDefinition[attributeName] === undefined,
        );
        if (missingAttributes.length > 0) {
          throw new Error(
            `Missing coordinate attributes: '${missingAttributes.join(', ')}'`,
          );
        }

        for (const attribute of linearCoordinateAttributes) {
          if (typeof gradientDefinition[attribute] !== 'string') {
            throw new Error(
              `Type of '${attribute}' option expected to be 'string'. Instead received type '${typeof gradientDefinition[
                attribute
              ]}'`,
            );
          }
          setAttribute(gradient, attribute, gradientDefinition[attribute]);
        }
      }
    } else if (gradientDefinition.type === 'radial') {
      gradient = createNode('radialGradient');

      const presentCoordinateAttributes = radialCoordinateAttributes.filter(
        (attributeName) => gradientDefinition[attributeName] !== undefined,
      );
      const unsupportedRadialAttribute = Object.keys(gradientDefinition).find(
        (attribute) => !allRadialAttributes.includes(attribute),
      );
      if (unsupportedRadialAttribute) {
        throw new Error(
          `Unsupported radial gradient attribute: '${unsupportedRadialAttribute}'`,
        );
      } else if (presentCoordinateAttributes.length > 0) {
        for (const attribute of presentCoordinateAttributes) {
          if (typeof gradientDefinition[attribute] !== 'string') {
            throw new Error(
              `Type of '${attribute}' option expected to be 'string'. Instead received type '${typeof gradientDefinition[
                attribute
              ]}'`,
            );
          }
          setAttribute(gradient, attribute, gradientDefinition[attribute]);
        }
      }
    } else {
      throw new Error(
        `Unsupported gradient type: '${gradientDefinition.type}'`,
      );
    }

    // Set common attributes
    setAttribute(gradient, 'id', gradientId);
    if (gradientDefinition.gradientUnits !== undefined) {
      if (
        !['userSpaceOnUse', 'objectBoundingBox'].includes(
          gradientDefinition.gradientUnits,
        )
      ) {
        throw new Error(
          `Unrecognized value for 'gradientUnits' attribute: '${gradientDefinition.gradientUnits}'`,
        );
      }
      setAttribute(gradient, 'gradientUnits', gradientDefinition.gradientUnits);
    }

    if (gradientDefinition.gradientTransform !== undefined) {
      if (typeof gradientDefinition.gradientTransform !== 'string') {
        throw new Error(
          `Type of 'gradientTransform' option expected to be 'string'. Instead received type '${typeof gradientDefinition.gradientTransform}'`,
        );
      }

      setAttribute(
        gradient,
        'gradientTransform',
        gradientDefinition.gradientTransform,
      );
    }

    if (gradientDefinition.spreadMethod !== undefined) {
      if (
        !['pad', 'reflect', 'repeat'].includes(gradientDefinition.spreadMethod)
      ) {
        throw new Error(
          `Unrecognized value for 'spreadMethod' attribute: '${gradientDefinition.spreadMethod}'`,
        );
      }
      setAttribute(gradient, 'spreadMethod', gradientDefinition.spreadMethod);
    }

    if (gradientDefinition.stops !== undefined) {
      if (!Array.isArray(gradientDefinition.stops)) {
        throw new Error(`The 'stop' attribute must be an array`);
      }

      for (const stopDefinition of gradientDefinition.stops) {
        if (typeof stopDefinition !== 'object') {
          throw new Error(
            `Each entry in the 'stop' attribute must be an object. Instead received type '${typeof stopDefinition}'`,
          );
        }
        const stop = createNode('stop');

        if (stopDefinition.offset !== undefined) {
          setAttribute(stop, 'offset', stopDefinition.offset);
        }

        if (stopDefinition['stop-color'] !== undefined) {
          setAttribute(stop, 'stop-color', stopDefinition['stop-color']);
        }

        if (stopDefinition['stop-opacity'] !== undefined) {
          setAttribute(stop, 'stop-opacity', stopDefinition['stop-opacity']);
        }

        gradient.appendChild(stop);
      }
    }

    defsContainer.appendChild(gradient);
  }

  container.appendChild(defsContainer);
}

/**
 * The properties of a single SVG mask.
 *
 * @typedef MaskDefinition
 * @property {string} color - The color or gradient to apply to the mask.
 */

/**
 * Parse mask definitions and construct them in the DOM.
 *
 * The `<mask>` element contains a single rectangle that should cover the full extent of the SVG
 * model. The color of this rectangle can be set to single color or a gradient. Anything the mask
 * is applied to will be invisible if under a black pixel, visible if under a white pixel, and
 * partially translucent if under a pixel that is between white and black.
 *
 * Later this could be extended to include custom paths and other shapes, rather than just a single
 * rectangle.
 *
 * @param options - The mask options.
 * @param {Element} options.container - The `<svg>` HTML element that the mask should be added to.
 * @param {Record<string, MaskDefinition>} [options.masks] - The gradient definitions.
 * @param {number} options.height - The height of the SVG container.
 * @param {number} options.width - The width of the SVG container.
 */
function setMaskDefinitions({ container, masks, height, width }) {
  if (!masks || Object.keys(masks).length === 0) {
    return;
  }

  for (const [maskId, maskDefinition] of Object.entries(masks)) {
    const mask = createNode('mask');
    setAttribute(mask, 'id', maskId);

    const maskedRect = createNode('rect');

    // Extend mask beyond container to ensure it completely covers the model.
    // The model can extend beyond the container as well.
    setAttribute(maskedRect, 'width', width * 1.5);
    setAttribute(maskedRect, 'height', height * 1.5);
    setAttribute(maskedRect, 'x', `-${Math.floor(width / 4)}`);
    setAttribute(maskedRect, 'y', `-${Math.floor(height / 4)}`);

    setAttribute(maskedRect, 'fill', maskDefinition.color);
    mask.appendChild(maskedRect);

    container.appendChild(mask);
  }
}

      };
    };
  }
}, {package:"@metamask/logo",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/logo/util.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/chain-function/index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/chain-function/index.js
      return function (require, module, exports) {

module.exports = function chain(){
  var len = arguments.length
  var args = [];

  for (var i = 0; i < len; i++)
    args[i] = arguments[i]

  args = args.filter(function(fn){ return fn != null })

  if (args.length === 0) return undefined
  if (args.length === 1) return args[0]

  return args.reduce(function(current, next){
    return function chainedFunction() {
      current.apply(this, arguments);
      next.apply(this, arguments);
    };
  })
}

      };
    };
  }
}, {package:"chain-function",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/chain-function/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-transition-group/node_modules/warning/browser.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-transition-group/node_modules/warning/browser.js
      return function (require, module, exports) {
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function() {};

if ("development" !== 'production') {
  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

      };
    };
  }
}, {package:"warning",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-transition-group/node_modules/warning/browser.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-transition-group/utils/ChildMapping.js", {"react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-transition-group/utils/ChildMapping.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;

var _react = require('react');

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children) {
  if (!children) {
    return children;
  }
  var result = {};
  _react.Children.map(children, function (child) {
    return child;
  }).forEach(function (child) {
    result[child.key] = child;
  });
  return result;
}

/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    if (next.hasOwnProperty(key)) {
      return next[key];
    }

    return prev[key];
  }

  // For each key of `next`, the list of keys to insert before that key in
  // the combined list
  var nextKeysPending = {};

  var pendingKeys = [];
  for (var prevKey in prev) {
    if (next.hasOwnProperty(prevKey)) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i = void 0;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending.hasOwnProperty(nextKey)) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }

  // Finally, add the keys which didn't appear before any key in `next`
  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}
      };
    };
  }
}, {package:"react-transition-group",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-transition-group/utils/ChildMapping.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/class/removeClass.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/class/removeClass.js
      return function (require, module, exports) {
'use strict';

function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}

module.exports = function removeClass(element, className) {
  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
};
      };
    };
  }
}, {package:"dom-helpers",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/class/removeClass.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/class/addClass.js", {"./hasClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/class/hasClass.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/class/addClass.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = addClass;

var _hasClass = _interopRequireDefault(require("./hasClass"));

function addClass(element, className) {
  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
}

module.exports = exports["default"];
      };
    };
  }
}, {package:"dom-helpers",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/class/addClass.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/util/requestAnimationFrame.js", {"./inDOM":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/util/inDOM.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/util/requestAnimationFrame.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _inDOM = _interopRequireDefault(require("./inDOM"));

var vendors = ['', 'webkit', 'moz', 'o', 'ms'];
var cancel = 'clearTimeout';
var raf = fallback;
var compatRaf;

var getKey = function getKey(vendor, k) {
  return vendor + (!vendor ? k : k[0].toUpperCase() + k.substr(1)) + 'AnimationFrame';
};

if (_inDOM.default) {
  vendors.some(function (vendor) {
    var rafKey = getKey(vendor, 'request');

    if (rafKey in window) {
      cancel = getKey(vendor, 'cancel');
      return raf = function raf(cb) {
        return window[rafKey](cb);
      };
    }
  });
}
/* https://github.com/component/raf */


var prev = new Date().getTime();

function fallback(fn) {
  var curr = new Date().getTime(),
      ms = Math.max(0, 16 - (curr - prev)),
      req = setTimeout(fn, ms);
  prev = curr;
  return req;
}

compatRaf = function compatRaf(cb) {
  return raf(cb);
};

compatRaf.cancel = function (id) {
  window[cancel] && typeof window[cancel] === 'function' && window[cancel](id);
};

var _default = compatRaf;
exports.default = _default;
module.exports = exports["default"];
      };
    };
  }
}, {package:"dom-helpers",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/util/requestAnimationFrame.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/transition/properties.js", {"../util/inDOM":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/util/inDOM.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/transition/properties.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = exports.animationEnd = exports.animationDelay = exports.animationTiming = exports.animationDuration = exports.animationName = exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = void 0;

var _inDOM = _interopRequireDefault(require("../util/inDOM"));

var transform = 'transform';
exports.transform = transform;
var prefix, transitionEnd, animationEnd;
exports.animationEnd = animationEnd;
exports.transitionEnd = transitionEnd;
var transitionProperty, transitionDuration, transitionTiming, transitionDelay;
exports.transitionDelay = transitionDelay;
exports.transitionTiming = transitionTiming;
exports.transitionDuration = transitionDuration;
exports.transitionProperty = transitionProperty;
var animationName, animationDuration, animationTiming, animationDelay;
exports.animationDelay = animationDelay;
exports.animationTiming = animationTiming;
exports.animationDuration = animationDuration;
exports.animationName = animationName;

if (_inDOM.default) {
  var _getTransitionPropert = getTransitionProperties();

  prefix = _getTransitionPropert.prefix;
  exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;
  exports.animationEnd = animationEnd = _getTransitionPropert.animationEnd;
  exports.transform = transform = prefix + "-" + transform;
  exports.transitionProperty = transitionProperty = prefix + "-transition-property";
  exports.transitionDuration = transitionDuration = prefix + "-transition-duration";
  exports.transitionDelay = transitionDelay = prefix + "-transition-delay";
  exports.transitionTiming = transitionTiming = prefix + "-transition-timing-function";
  exports.animationName = animationName = prefix + "-animation-name";
  exports.animationDuration = animationDuration = prefix + "-animation-duration";
  exports.animationTiming = animationTiming = prefix + "-animation-delay";
  exports.animationDelay = animationDelay = prefix + "-animation-timing-function";
}

var _default = {
  transform: transform,
  end: transitionEnd,
  property: transitionProperty,
  timing: transitionTiming,
  delay: transitionDelay,
  duration: transitionDuration
};
exports.default = _default;

function getTransitionProperties() {
  var style = document.createElement('div').style;
  var vendorMap = {
    O: function O(e) {
      return "o" + e.toLowerCase();
    },
    Moz: function Moz(e) {
      return e.toLowerCase();
    },
    Webkit: function Webkit(e) {
      return "webkit" + e;
    },
    ms: function ms(e) {
      return "MS" + e;
    }
  };
  var vendors = Object.keys(vendorMap);
  var transitionEnd, animationEnd;
  var prefix = '';

  for (var i = 0; i < vendors.length; i++) {
    var vendor = vendors[i];

    if (vendor + "TransitionProperty" in style) {
      prefix = "-" + vendor.toLowerCase();
      transitionEnd = vendorMap[vendor]('TransitionEnd');
      animationEnd = vendorMap[vendor]('AnimationEnd');
      break;
    }
  }

  if (!transitionEnd && 'transitionProperty' in style) transitionEnd = 'transitionend';
  if (!animationEnd && 'animationName' in style) animationEnd = 'animationend';
  style = null;
  return {
    animationEnd: animationEnd,
    transitionEnd: transitionEnd,
    prefix: prefix
  };
}
      };
    };
  }
}, {package:"dom-helpers",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dom-helpers/transition/properties.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/menu/menu-item.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/menu/menu-item.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

const MenuItem = ({
  children,
  className,
  'data-testid': dataTestId,
  iconClassName,
  onClick,
  subtitle
}) => /*#__PURE__*/_react.default.createElement("button", {
  className: (0, _classnames.default)('menu-item', className),
  "data-testid": dataTestId,
  onClick: onClick
}, iconClassName ? /*#__PURE__*/_react.default.createElement("i", {
  className: (0, _classnames.default)('menu-item__icon', iconClassName)
}) : null, /*#__PURE__*/_react.default.createElement("span", null, children), subtitle);

MenuItem.propTypes = {
  children: _propTypes.default.node.isRequired,
  className: _propTypes.default.string,
  'data-testid': _propTypes.default.string,
  iconClassName: _propTypes.default.string,
  onClick: _propTypes.default.func,
  subtitle: _propTypes.default.node
};
MenuItem.defaultProps = {
  className: undefined,
  'data-testid': undefined,
  iconClassName: undefined,
  onClick: undefined,
  subtitle: undefined
};
var _default = MenuItem;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/menu/menu-item.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/menu/menu.js", {"@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dom/index.js","react-popper":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-popper/lib/cjs/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/menu/menu.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _reactPopper = require("react-popper");

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Menu = ({
  anchorElement,
  children,
  className,
  onHide,
  popperOptions
}) => {
  const [popperElement, setPopperElement] = (0, _react.useState)(null);
  const popoverContainerElement = (0, _react.useRef)(document.getElementById('popover-content'));
  const {
    attributes,
    styles
  } = (0, _reactPopper.usePopper)(anchorElement, popperElement, popperOptions);
  return /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "menu__background",
    onClick: onHide
  }), /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    className: (0, _classnames.default)('menu__container', className),
    ref: setPopperElement,
    style: styles.popper
  }, attributes.popper), children)), popoverContainerElement.current);
};

Menu.propTypes = {
  anchorElement: _propTypes.default.instanceOf(window.Element),
  children: _propTypes.default.node.isRequired,
  className: _propTypes.default.string,
  onHide: _propTypes.default.func.isRequired,
  popperOptions: _propTypes.default.object
};
Menu.defaultProps = {
  anchorElement: undefined,
  className: undefined,
  popperOptions: undefined
};
var _default = Menu;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/menu/menu.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item/index.js", {"./transaction-list-item.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item/transaction-list-item.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionListItem.default;
  }
});

var _transactionListItem = _interopRequireDefault(require("./transaction-list-item.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/hardware.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/hardware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isHardwareKeyring = isHardwareKeyring;

function isHardwareKeyring(keyringType = '') {
  return keyringType.includes('Hardware');
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/hardware.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/swap-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/swap-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapIcon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function SwapIcon({
  width = '17',
  height = '17',
  color = 'white'
}) {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    height: height,
    viewBox: `0 0 ${width} ${height}`,
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M13.1714 9.66035V12.3786H4.68253C4.51685 12.3786 4.38253 12.2443 4.38253 12.0786V10.5478C4.38253 10.1888 3.94605 10.0116 3.69574 10.269L0.978328 13.0641C0.827392 13.2193 0.827392 13.4665 0.978328 13.6217L3.69573 16.4168C3.94604 16.6742 4.38253 16.497 4.38253 16.1379V14.6072C4.38253 14.4415 4.51685 14.3072 4.68253 14.3072H14.9992H15.0492V14.2572V9.66035C15.0492 9.14182 14.6288 8.72146 14.1103 8.72146C13.5918 8.72146 13.1714 9.14182 13.1714 9.66035ZM2.55476 2.55003H2.50476V2.60003V7.19686C2.50476 7.71539 2.92511 8.13575 3.44364 8.13575C3.96218 8.13575 4.38253 7.71539 4.38253 7.19686V4.70619C4.38253 4.5805 4.48443 4.47861 4.61012 4.47861H12.8714C13.0371 4.47861 13.1714 4.61292 13.1714 4.77861V6.30937C13.1714 6.66845 13.6079 6.84566 13.8582 6.5882L16.5756 3.79315C16.7266 3.6379 16.7266 3.39074 16.5756 3.23549L13.8582 0.440443C13.6079 0.182981 13.1714 0.360188 13.1714 0.719273V2.25004C13.1714 2.41572 13.0371 2.55003 12.8714 2.55003H2.55476Z",
    fill: color,
    stroke: color,
    strokeWidth: "0.1"
  }));
}

SwapIcon.propTypes = {
  /**
   * Width of the icon
   */
  width: _propTypes.default.string,

  /**
   * Height of the icon
   */
  height: _propTypes.default.string,

  /**
   * Color of the icon should be a valid design system color
   */
  color: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/swap-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/overview-buy-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/overview-buy-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BuyIcon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function BuyIcon({
  width = '17',
  height = '21',
  fill = 'white'
}) {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    height: height,
    viewBox: `0 0 ${width} ${height}`,
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M8.62829 14.3216C8.65369 14.2947 8.67756 14.2664 8.69978 14.2368L12.8311 10.1286C13.0886 9.87975 13.1913 9.51233 13.1 9.16703C13.0087 8.82174 12.7375 8.55207 12.3903 8.46129C12.0431 8.37051 11.6736 8.47268 11.4233 8.72869L8.89913 11.2387L8.89913 1.3293C8.90647 0.970874 8.71837 0.636511 8.40739 0.455161C8.0964 0.273811 7.71112 0.27381 7.40014 0.45516C7.08915 0.636511 6.90105 0.970873 6.90839 1.3293L6.90839 11.2387L4.38422 8.72869C4.13396 8.47268 3.76446 8.37051 3.41722 8.46129C3.06998 8.55207 2.79879 8.82174 2.7075 9.16703C2.61621 9.51233 2.71896 9.87975 2.97641 10.1286L7.11049 14.2395C7.28724 14.4717 7.55784 14.6148 7.85026 14.6306C8.14268 14.6464 8.42727 14.5333 8.62829 14.3216Z",
    fill: fill
  }), /*#__PURE__*/_react.default.createElement("rect", {
    x: "0.260986",
    y: "15.75",
    width: "15.8387",
    height: "2.25",
    rx: "1",
    fill: "white"
  }));
}

BuyIcon.propTypes = {
  /**
   * Width of the icon
   */
  width: _propTypes.default.string,

  /**
   * Height of the icon
   */
  height: _propTypes.default.string,

  /**
   * Fill  of the icon should be a valid design system color
   */
  fill: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/overview-buy-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/wallet-overview.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/wallet-overview.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

const WalletOverview = ({
  balance,
  buttons,
  className,
  icon
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('wallet-overview', className)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "wallet-overview__balance"
  }, icon, balance), /*#__PURE__*/_react.default.createElement("div", {
    className: "wallet-overview__buttons"
  }, buttons));
};

WalletOverview.propTypes = {
  balance: _propTypes.default.element.isRequired,
  buttons: _propTypes.default.element.isRequired,
  className: _propTypes.default.string,
  icon: _propTypes.default.element.isRequired
};
WalletOverview.defaultProps = {
  className: undefined
};
var _default = WalletOverview;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/wallet-overview/wallet-overview.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/overview-send-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/overview-send-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SwapIcon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function SwapIcon({
  width = '15',
  height = '15',
  fill = 'white'
}) {
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: width,
    height: height,
    viewBox: `0 0 ${width} ${height}`,
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M13.6827 0.889329C13.6458 0.890495 13.609 0.893722 13.5725 0.898996H7.76263C7.40564 0.893947 7.07358 1.08151 6.89361 1.38986C6.71364 1.69821 6.71364 2.07958 6.89361 2.38793C7.07358 2.69628 7.40564 2.88384 7.76263 2.87879H11.3124L1.12335 13.0678C0.864749 13.3161 0.760577 13.6848 0.851011 14.0315C0.941446 14.3786 1.21235 14.6495 1.55926 14.7399C1.90616 14.8303 2.27485 14.7262 2.52313 14.4676L12.7121 4.27857V7.82829C12.7071 8.18528 12.8946 8.51734 13.203 8.69731C13.5113 8.87728 13.8927 8.87728 14.2011 8.69731C14.5094 8.51734 14.697 8.18528 14.6919 7.82829V2.01457C14.7318 1.7261 14.6427 1.43469 14.4483 1.2179C14.2538 1.00111 13.9738 0.880924 13.6827 0.889329Z",
    fill: fill
  }));
}

SwapIcon.propTypes = {
  /**
   * Width of the icon
   */
  width: _propTypes.default.string,

  /**
   * Height of the icon
   */
  height: _propTypes.default.string,

  /**
   * Fill  of the icon should be a valid design system color
   */
  fill: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/overview-send-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-button/index.js", {"./icon-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-button/icon-button.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-button/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _iconButton.default;
  }
});

var _iconButton = _interopRequireDefault(require("./icon-button"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-button/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-border/icon-border.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-border/icon-border.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = IconBorder;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function IconBorder({
  children,
  size
}) {
  const borderStyle = {
    height: `${size}px`,
    width: `${size}px`
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "icon-border",
    style: borderStyle
  }, children);
}

IconBorder.propTypes = {
  children: _propTypes.default.node.isRequired,
  size: _propTypes.default.number.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-border/icon-border.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-with-fallback/icon-with-fallback.component.js", {"@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-with-fallback/icon-with-fallback.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

const _excluded = ["name", "icon", "size", "className", "fallbackClassName"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const IconWithFallback = _ref => {
  let {
    name = '',
    icon = null,
    size,
    className,
    fallbackClassName
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const [iconError, setIconError] = (0, _react.useState)(false);
  const style = size ? {
    height: `${size}px`,
    width: `${size}px`
  } : {};

  const handleOnError = () => {
    setIconError(true);
  };

  return !iconError && icon ? /*#__PURE__*/_react.default.createElement("img", (0, _extends2.default)({
    onError: handleOnError,
    src: icon,
    style: style,
    className: className,
    alt: name.length ? name : 'icon'
  }, props)) : /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)('icon-with-fallback__fallback', fallbackClassName)
  }, name.length ? name.charAt(0).toUpperCase() : '');
};

IconWithFallback.propTypes = {
  /**
   * The img src of the icon
   */
  icon: _propTypes.default.string,

  /**
   * The name of the icon also used for the alt attribute of the image
   */
  name: _propTypes.default.string,

  /**
   * The size of the icon. Recommended sizes adhere to 8px grid: 16, 24, 32, 40
   */
  size: _propTypes.default.number,

  /**
   * className to apply to the image tag
   */
  className: _propTypes.default.string,

  /**
   * Additional className to apply to the fallback span tag
   */
  fallbackClassName: _propTypes.default.string
};
var _default = IconWithFallback;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon-with-fallback/icon-with-fallback.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/truncated-definition-list/index.js", {"./truncated-definition-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/truncated-definition-list/truncated-definition-list.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/truncated-definition-list/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _truncatedDefinitionList.default;
  }
});

var _truncatedDefinitionList = _interopRequireDefault(require("./truncated-definition-list"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/truncated-definition-list/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/definition-list/index.js", {"./definition-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/definition-list/definition-list.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/definition-list/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _definitionList.default;
  }
});

var _definitionList = _interopRequireDefault(require("./definition-list"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/definition-list/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/metamask-translation/index.js", {"./metamask-translation":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/metamask-translation/metamask-translation.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/metamask-translation/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metamaskTranslation.default;
  }
});

var _metamaskTranslation = _interopRequireDefault(require("./metamask-translation"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/metamask-translation/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useUserPreferencedCurrency.js", {"../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useUserPreferencedCurrency.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUserPreferencedCurrency = useUserPreferencedCurrency;

var _reactRedux = require("react-redux");

var _selectors = require("../selectors");

var _metamask = require("../ducks/metamask/metamask");

var _common = require("../helpers/constants/common");

/**
 * Defines the shape of the options parameter for useUserPreferencedCurrency
 * @typedef {Object} UseUserPreferencedCurrencyOptions
 * @property {number} [numberOfDecimals]     - Number of significant decimals to display
 * @property {number} [ethNumberOfDecimals]  - Number of significant decimals to display
 *                                             when using ETH
 * @property {number} [fiatNumberOfDecimals] - Number of significant decimals to display
 *                                            when using fiat
 */

/**
 * Defines the return shape of useUserPreferencedCurrency
 * @typedef {Object} UserPreferredCurrency
 * @property {string} currency         - the currency type to use (eg: 'ETH', 'usd')
 * @property {number} numberOfDecimals - Number of significant decimals to display
 */

/**
 * useUserPreferencedCurrency
 *
 * returns an object that contains what currency to use for displaying values based
 * on the user's preference settings, as well as the significant number of decimals
 * to display based on the currency
 * @param {"PRIMARY" | "SECONDARY"} type - what display type is being rendered
 * @param {UseUserPreferencedCurrencyOptions} opts - options to override default values
 * @return {UserPreferredCurrency}
 */
function useUserPreferencedCurrency(type, opts = {}) {
  const nativeCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _reactRedux.useSelector)(_selectors.getPreferences, _reactRedux.shallowEqual);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const currentCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  let currency, numberOfDecimals;

  if (!showFiat || type === _common.PRIMARY && useNativeCurrencyAsPrimaryCurrency || type === _common.SECONDARY && !useNativeCurrencyAsPrimaryCurrency) {
    // Display ETH
    currency = nativeCurrency || _common.ETH;
    numberOfDecimals = opts.numberOfDecimals || opts.ethNumberOfDecimals || 8;
  } else if (type === _common.SECONDARY && useNativeCurrencyAsPrimaryCurrency || type === _common.PRIMARY && !useNativeCurrencyAsPrimaryCurrency) {
    // Display Fiat
    currency = currentCurrency;
    numberOfDecimals = opts.numberOfDecimals || opts.fiatNumberOfDecimals || 2;
  }

  return {
    currency,
    numberOfDecimals
  };
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useUserPreferencedCurrency.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js
      return function (require, module, exports) {
function toVal(mix) {
	var k, y, str='';

	if (typeof mix === 'string' || typeof mix === 'number') {
		str += mix;
	} else if (typeof mix === 'object') {
		if (Array.isArray(mix)) {
			for (k=0; k < mix.length; k++) {
				if (mix[k]) {
					if (y = toVal(mix[k])) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else {
			for (k in mix) {
				if (mix[k]) {
					str && (str += ' ');
					str += k;
				}
			}
		}
	}

	return str;
}

module.exports = function () {
	var i=0, tmp, x, str='';
	while (i < arguments.length) {
		if (tmp = arguments[i++]) {
			if (x = toVal(tmp)) {
				str && (str += ' ');
				str += x
			}
		}
	}
	return str;
}

      };
    };
  }
}, {package:"clsx",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/FormControlContext.js", {"@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/FormControlContext.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFormControl = useFormControl;
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

/**
 * @ignore - internal component.
 */
var FormControlContext = /*#__PURE__*/React.createContext();

if ("development" !== 'production') {
  FormControlContext.displayName = 'FormControlContext';
}

function useFormControl() {
  return React.useContext(FormControlContext);
}

var _default = FormControlContext;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/FormControlContext.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Typography/index.js", {"./Typography":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Typography/Typography.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Typography/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Typography.default;
  }
});

var _Typography = _interopRequireDefault(require("./Typography"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Typography/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-list/index.js", {"./account-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-list/account-list.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-list/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accountList.default;
  }
});

var _accountList = _interopRequireDefault(require("./account-list"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-list/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-footer/index.js", {"./permissions-connect-footer.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-footer/permissions-connect-footer.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-footer/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectFooter.default;
  }
});

var _permissionsConnectFooter = _interopRequireDefault(require("./permissions-connect-footer.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-footer/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-header/index.js", {"./permissions-connect-header.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-header/permissions-connect-header.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-header/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectHeader.default;
  }
});

var _permissionsConnectHeader = _interopRequireDefault(require("./permissions-connect-header.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-header/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container.component.js", {".":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/index.js","../../ui/page-container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/index.js","../permissions-connect-footer":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-footer/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","lodash":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/lodash.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _pageContainer = require("../../ui/page-container");

var _permissionsConnectFooter = _interopRequireDefault(require("../permissions-connect-footer"));

var _ = require(".");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class PermissionPageContainer extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      selectedPermissions: this.getRequestedMethodState(this.getRequestedMethodNames(this.props))
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      const {
        request,
        rejectPermissionsRequest
      } = this.props;
      rejectPermissionsRequest(request.metadata.id);
    });
    (0, _defineProperty2.default)(this, "onSubmit", () => {
      const {
        request: _request,
        approvePermissionsRequest,
        rejectPermissionsRequest,
        selectedIdentities
      } = this.props;

      const request = _objectSpread(_objectSpread({}, _request), {}, {
        permissions: _objectSpread({}, _request.permissions),
        approvedAccounts: selectedIdentities.map(selectedIdentity => selectedIdentity.address)
      });

      Object.keys(this.state.selectedPermissions).forEach(key => {
        if (!this.state.selectedPermissions[key]) {
          delete request.permissions[key];
        }
      });

      if (Object.keys(request.permissions).length > 0) {
        approvePermissionsRequest(request);
      } else {
        rejectPermissionsRequest(request.metadata.id);
      }
    });
  }

  componentDidUpdate() {
    const newMethodNames = this.getRequestedMethodNames(this.props);

    if (!(0, _lodash.isEqual)(Object.keys(this.state.selectedPermissions), newMethodNames)) {
      // this should be a new request, so just overwrite
      this.setState({
        selectedPermissions: this.getRequestedMethodState(newMethodNames)
      });
    }
  }

  getRequestedMethodState(methodNames) {
    return methodNames.reduce((acc, methodName) => {
      acc[methodName] = true;
      return acc;
    }, {});
  }

  getRequestedMethodNames(props) {
    return Object.keys(props.request.permissions || {});
  }

  componentDidMount() {
    this.context.metricsEvent({
      eventOpts: {
        category: 'Auth',
        action: 'Connect',
        name: 'Tab Opened'
      }
    });
  }

  render() {
    const {
      requestMetadata,
      targetSubjectMetadata,
      selectedIdentities,
      allIdentitiesSelected
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container permission-approval-container"
    }, /*#__PURE__*/_react.default.createElement(_.PermissionPageContainerContent, {
      requestMetadata: requestMetadata,
      subjectMetadata: targetSubjectMetadata,
      selectedPermissions: this.state.selectedPermissions,
      selectedIdentities: selectedIdentities,
      allIdentitiesSelected: allIdentitiesSelected
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__footers"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectFooter.default, null), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      cancelButtonType: "default",
      onCancel: () => this.onCancel(),
      cancelText: this.context.t('cancel'),
      onSubmit: () => this.onSubmit(),
      submitText: this.context.t('connect'),
      buttonSizeLarge: false
    })));
  }

}

exports.default = PermissionPageContainer;
(0, _defineProperty2.default)(PermissionPageContainer, "propTypes", {
  approvePermissionsRequest: _propTypes.default.func.isRequired,
  rejectPermissionsRequest: _propTypes.default.func.isRequired,
  selectedIdentities: _propTypes.default.array,
  allIdentitiesSelected: _propTypes.default.bool,
  request: _propTypes.default.object,
  requestMetadata: _propTypes.default.object,
  targetSubjectMetadata: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    origin: _propTypes.default.string.isRequired,
    subjectType: _propTypes.default.string.isRequired,
    extensionId: _propTypes.default.string,
    iconUrl: _propTypes.default.string
  })
});
(0, _defineProperty2.default)(PermissionPageContainer, "defaultProps", {
  request: {},
  requestMetadata: {},
  selectedIdentities: [],
  allIdentitiesSelected: false
});
(0, _defineProperty2.default)(PermissionPageContainer, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container-content/permission-page-container-content.component.js", {"../../../ui/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","../../permissions-connect-header":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-header/index.js","../../permissions-connect-permission-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permissions-connect-permission-list/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container-content/permission-page-container-content.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _permissionsConnectHeader = _interopRequireDefault(require("../../permissions-connect-header"));

var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));

var _permissionsConnectPermissionList = _interopRequireDefault(require("../../permissions-connect-permission-list"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class PermissionPageContainerContent extends _react.PureComponent {
  renderRequestedPermissions() {
    const {
      selectedPermissions
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content__requested"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectPermissionList.default, {
      permissions: selectedPermissions
    }));
  }

  renderAccountTooltip(textContent) {
    const {
      selectedIdentities
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      key: "all-account-connect-tooltip",
      position: "bottom",
      wrapperClassName: "permission-approval-container__bold-title-elements",
      html: /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: 'flex',
          flexDirection: 'column'
        }
      }, selectedIdentities.slice(0, 6).map((identity, index) => {
        return /*#__PURE__*/_react.default.createElement("div", {
          key: `tooltip-identity-${index}`
        }, identity.addressLabel);
      }), selectedIdentities.length > 6 ? t('plusXMore', [selectedIdentities.length - 6]) : null)
    }, textContent);
  }

  getTitle() {
    var _selectedIdentities$;

    const {
      subjectMetadata,
      selectedIdentities,
      allIdentitiesSelected
    } = this.props;
    const {
      t
    } = this.context;

    if (subjectMetadata.extensionId) {
      return t('externalExtension', [subjectMetadata.extensionId]);
    } else if (allIdentitiesSelected) {
      return t('connectToAll', [this.renderAccountTooltip(t('connectToAllAccounts'))]);
    } else if (selectedIdentities.length > 1) {
      return t('connectToMultiple', [this.renderAccountTooltip(t('connectToMultipleNumberOfAccounts', [selectedIdentities.length]))]);
    }

    return t('connectTo', [(_selectedIdentities$ = selectedIdentities[0]) === null || _selectedIdentities$ === void 0 ? void 0 : _selectedIdentities$.addressLabel]);
  }

  render() {
    const {
      subjectMetadata
    } = this.props;
    const {
      t
    } = this.context;
    const title = this.getTitle();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content-container"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectHeader.default, {
      iconUrl: subjectMetadata.iconUrl,
      iconName: subjectMetadata.name,
      headerTitle: title,
      headerText: subjectMetadata.extensionId ? t('allowExternalExtensionTo', [subjectMetadata.extensionId]) : t('allowThisSiteTo'),
      siteOrigin: subjectMetadata.origin
    }), /*#__PURE__*/_react.default.createElement("section", {
      className: "permission-approval-container__permissions-container"
    }, this.renderRequestedPermissions())));
  }

}

exports.default = PermissionPageContainerContent;
(0, _defineProperty2.default)(PermissionPageContainerContent, "propTypes", {
  subjectMetadata: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    origin: _propTypes.default.string.isRequired,
    subjectType: _propTypes.default.string.isRequired,
    extensionId: _propTypes.default.string,
    iconUrl: _propTypes.default.string
  }),
  selectedPermissions: _propTypes.default.object.isRequired,
  selectedIdentities: _propTypes.default.array,
  allIdentitiesSelected: _propTypes.default.bool
});
(0, _defineProperty2.default)(PermissionPageContainerContent, "defaultProps", {
  selectedIdentities: [],
  allIdentitiesSelected: false
});
(0, _defineProperty2.default)(PermissionPageContainerContent, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/permission-page-container/permission-page-container-content/permission-page-container-content.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@keystonehq/bc-ur-registry-eth/dist/index.js", {"./bc-ur-registry-eth.cjs.development.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@keystonehq/bc-ur-registry-eth/dist/bc-ur-registry-eth.cjs.development.js","./bc-ur-registry-eth.cjs.production.min.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@keystonehq/bc-ur-registry-eth/dist/bc-ur-registry-eth.cjs.production.min.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@keystonehq/bc-ur-registry-eth/dist/index.js
      return function (require, module, exports) {

'use strict'

if ("development" === 'production') {
  module.exports = require('./bc-ur-registry-eth.cjs.production.min.js')
} else {
  module.exports = require('./bc-ur-registry-eth.cjs.development.js')
}

      };
    };
  }
}, {package:"@keystonehq/bc-ur-registry-eth",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@keystonehq/bc-ur-registry-eth/dist/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/qrcode.react/lib/index.js", {"prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","qr.js/lib/ErrorCorrectLevel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/qr.js/lib/ErrorCorrectLevel.js","qr.js/lib/QRCode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/qr.js/lib/QRCode.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/qrcode.react/lib/index.js
      return function (require, module, exports) {
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var React = require('react');

var PropTypes = require('prop-types'); // qr.js doesn't handle error level of zero (M) so we need to do it right,
// thus the deep require.


var QRCodeImpl = require('qr.js/lib/QRCode');

var ErrorCorrectLevel = require('qr.js/lib/ErrorCorrectLevel'); // TODO: pull this off of the QRCode class type so it matches.


// Convert from UTF-16, forcing the use of byte-mode encoding in our QR Code.
// This allows us to encode Hanji, Kanji, emoji, etc. Ideally we'd do more
// detection and not resort to byte-mode if possible, but we're trading off
// a smaller library for a smaller amount of data we can potentially encode.
// Based on http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/
function convertStr(str) {
  var out = '';

  for (var i = 0; i < str.length; i++) {
    var charcode = str.charCodeAt(i);

    if (charcode < 0x0080) {
      out += String.fromCharCode(charcode);
    } else if (charcode < 0x0800) {
      out += String.fromCharCode(0xc0 | charcode >> 6);
      out += String.fromCharCode(0x80 | charcode & 0x3f);
    } else if (charcode < 0xd800 || charcode >= 0xe000) {
      out += String.fromCharCode(0xe0 | charcode >> 12);
      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);
      out += String.fromCharCode(0x80 | charcode & 0x3f);
    } else {
      // This is a surrogate pair, so we'll reconsitute the pieces and work
      // from that
      i++;
      charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);
      out += String.fromCharCode(0xf0 | charcode >> 18);
      out += String.fromCharCode(0x80 | charcode >> 12 & 0x3f);
      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);
      out += String.fromCharCode(0x80 | charcode & 0x3f);
    }
  }

  return out;
}

var DEFAULT_PROPS = {
  size: 128,
  level: 'L',
  bgColor: '#FFFFFF',
  fgColor: '#000000',
  includeMargin: false
};
var PROP_TYPES = "development" !== 'production' ? {
  value: PropTypes.string.isRequired,
  size: PropTypes.number,
  level: PropTypes.oneOf(['L', 'M', 'Q', 'H']),
  bgColor: PropTypes.string,
  fgColor: PropTypes.string,
  includeMargin: PropTypes.bool,
  imageSettings: PropTypes.shape({
    src: PropTypes.string.isRequired,
    height: PropTypes.number.isRequired,
    width: PropTypes.number.isRequired,
    excavate: PropTypes.bool,
    x: PropTypes.number,
    y: PropTypes.number
  })
} : {};
var MARGIN_SIZE = 4; // This is *very* rough estimate of max amount of QRCode allowed to be covered.
// It is "wrong" in a lot of ways (area is a terrible way to estimate, it
// really should be number of modules covered), but if for some reason we don't
// get an explicit height or width, I'd rather default to something than throw.

var DEFAULT_IMG_SCALE = 0.1;

function generatePath(modules) {
  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var ops = [];
  modules.forEach(function (row, y) {
    var start = null;
    row.forEach(function (cell, x) {
      if (!cell && start !== null) {
        // M0 0h7v1H0z injects the space with the move and drops the comma,
        // saving a char per operation
        ops.push("M".concat(start + margin, " ").concat(y + margin, "h").concat(x - start, "v1H").concat(start + margin, "z"));
        start = null;
        return;
      } // end of row, clean up or skip


      if (x === row.length - 1) {
        if (!cell) {
          // We would have closed the op above already so this can only mean
          // 2+ light modules in a row.
          return;
        }

        if (start === null) {
          // Just a single dark module.
          ops.push("M".concat(x + margin, ",").concat(y + margin, " h1v1H").concat(x + margin, "z"));
        } else {
          // Otherwise finish the current line.
          ops.push("M".concat(start + margin, ",").concat(y + margin, " h").concat(x + 1 - start, "v1H").concat(start + margin, "z"));
        }

        return;
      }

      if (cell && start === null) {
        start = x;
      }
    });
  });
  return ops.join('');
} // We could just do this in generatePath, except that we want to support
// non-Path2D canvas, so we need to keep it an explicit step.


function excavateModules(modules, excavation) {
  return modules.slice().map(function (row, y) {
    if (y < excavation.y || y >= excavation.y + excavation.h) {
      return row;
    }

    return row.map(function (cell, x) {
      if (x < excavation.x || x >= excavation.x + excavation.w) {
        return cell;
      }

      return false;
    });
  });
}

function getImageSettings(props, cells) {
  var imageSettings = props.imageSettings,
      size = props.size,
      includeMargin = props.includeMargin;

  if (imageSettings == null) {
    return null;
  }

  var margin = includeMargin ? MARGIN_SIZE : 0;
  var numCells = cells.length + margin * 2;
  var defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);
  var scale = numCells / size;
  var w = (imageSettings.width || defaultSize) * scale;
  var h = (imageSettings.height || defaultSize) * scale;
  var x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;
  var y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;
  var excavation = null;

  if (imageSettings.excavate) {
    var floorX = Math.floor(x);
    var floorY = Math.floor(y);
    var ceilW = Math.ceil(w + x - floorX);
    var ceilH = Math.ceil(h + y - floorY);
    excavation = {
      x: floorX,
      y: floorY,
      w: ceilW,
      h: ceilH
    };
  }

  return {
    x: x,
    y: y,
    h: h,
    w: w,
    excavation: excavation
  };
} // For canvas we're going to switch our drawing mode based on whether or not
// the environment supports Path2D. We only need the constructor to be
// supported, but Edge doesn't actually support the path (string) type
// argument. Luckily it also doesn't support the addPath() method. We can
// treat that as the same thing.


var SUPPORTS_PATH2D = function () {
  try {
    new Path2D().addPath(new Path2D());
  } catch (e) {
    return false;
  }

  return true;
}();

var QRCodeCanvas =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(QRCodeCanvas, _React$PureComponent);

  function QRCodeCanvas() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, QRCodeCanvas);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QRCodeCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "_canvas", void 0);

    _defineProperty(_assertThisInitialized(_this), "_image", void 0);

    _defineProperty(_assertThisInitialized(_this), "state", {
      imgLoaded: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleImageLoad", function () {
      _this.setState({
        imgLoaded: true
      });
    });

    return _this;
  }

  _createClass(QRCodeCanvas, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this._image && this._image.complete) {
        this.handleImageLoad();
      }

      this.update();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this$props$imageSett, _nextProps$imageSetti;

      var currentSrc = (_this$props$imageSett = this.props.imageSettings) === null || _this$props$imageSett === void 0 ? void 0 : _this$props$imageSett.src;
      var nextSrc = (_nextProps$imageSetti = nextProps.imageSettings) === null || _nextProps$imageSetti === void 0 ? void 0 : _nextProps$imageSetti.src;

      if (currentSrc !== nextSrc) {
        this.setState({
          imgLoaded: false
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.update();
    }
  }, {
    key: "update",
    value: function update() {
      var _this$props = this.props,
          value = _this$props.value,
          size = _this$props.size,
          level = _this$props.level,
          bgColor = _this$props.bgColor,
          fgColor = _this$props.fgColor,
          includeMargin = _this$props.includeMargin,
          imageSettings = _this$props.imageSettings; // We'll use type===-1 to force QRCode to automatically pick the best type

      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);
      qrcode.addData(convertStr(value));
      qrcode.make();

      if (this._canvas != null) {
        var canvas = this._canvas;
        var ctx = canvas.getContext('2d');

        if (!ctx) {
          return;
        }

        var cells = qrcode.modules;

        if (cells === null) {
          return;
        }

        var margin = includeMargin ? MARGIN_SIZE : 0;
        var numCells = cells.length + margin * 2;
        var calculatedImageSettings = getImageSettings(this.props, cells);

        if (imageSettings != null && calculatedImageSettings != null) {
          if (calculatedImageSettings.excavation != null) {
            cells = excavateModules(cells, calculatedImageSettings.excavation);
          }
        } // We're going to scale this so that the number of drawable units
        // matches the number of cells. This avoids rounding issues, but does
        // result in some potentially unwanted single pixel issues between
        // blocks, only in environments that don't support Path2D.


        var pixelRatio = window.devicePixelRatio || 1;
        canvas.height = canvas.width = size * pixelRatio;
        var scale = size / numCells * pixelRatio;
        ctx.scale(scale, scale); // Draw solid background, only paint dark modules.

        ctx.fillStyle = bgColor;
        ctx.fillRect(0, 0, numCells, numCells);
        ctx.fillStyle = fgColor;

        if (SUPPORTS_PATH2D) {
          // $FlowFixMe: Path2D c'tor doesn't support args yet.
          ctx.fill(new Path2D(generatePath(cells, margin)));
        } else {
          cells.forEach(function (row, rdx) {
            row.forEach(function (cell, cdx) {
              if (cell) {
                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);
              }
            });
          });
        }

        if (this.state.imgLoaded && this._image && calculatedImageSettings != null) {
          ctx.drawImage(this._image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          value = _this$props2.value,
          size = _this$props2.size,
          level = _this$props2.level,
          bgColor = _this$props2.bgColor,
          fgColor = _this$props2.fgColor,
          style = _this$props2.style,
          includeMargin = _this$props2.includeMargin,
          imageSettings = _this$props2.imageSettings,
          otherProps = _objectWithoutProperties(_this$props2, ["value", "size", "level", "bgColor", "fgColor", "style", "includeMargin", "imageSettings"]);

      var canvasStyle = _objectSpread({
        height: size,
        width: size
      }, style);

      var img = null;
      var imgSrc = imageSettings && imageSettings.src;

      if (imageSettings != null && imgSrc != null) {
        img = React.createElement("img", {
          src: imgSrc,
          style: {
            display: 'none'
          },
          onLoad: this.handleImageLoad,
          ref: function ref(_ref) {
            return _this2._image = _ref;
          }
        });
      }

      return React.createElement(React.Fragment, null, React.createElement("canvas", _extends({
        style: canvasStyle,
        height: size,
        width: size,
        ref: function ref(_ref2) {
          return _this2._canvas = _ref2;
        }
      }, otherProps)), img);
    }
  }]);

  return QRCodeCanvas;
}(React.PureComponent);

_defineProperty(QRCodeCanvas, "defaultProps", DEFAULT_PROPS);

if ("development" !== 'production') {
  QRCodeCanvas.propTypes = PROP_TYPES;
}

var QRCodeSVG =
/*#__PURE__*/
function (_React$PureComponent2) {
  _inherits(QRCodeSVG, _React$PureComponent2);

  function QRCodeSVG() {
    _classCallCheck(this, QRCodeSVG);

    return _possibleConstructorReturn(this, _getPrototypeOf(QRCodeSVG).apply(this, arguments));
  }

  _createClass(QRCodeSVG, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          value = _this$props3.value,
          size = _this$props3.size,
          level = _this$props3.level,
          bgColor = _this$props3.bgColor,
          fgColor = _this$props3.fgColor,
          includeMargin = _this$props3.includeMargin,
          imageSettings = _this$props3.imageSettings,
          otherProps = _objectWithoutProperties(_this$props3, ["value", "size", "level", "bgColor", "fgColor", "includeMargin", "imageSettings"]); // We'll use type===-1 to force QRCode to automatically pick the best type


      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);
      qrcode.addData(convertStr(value));
      qrcode.make();
      var cells = qrcode.modules;

      if (cells === null) {
        return null;
      }

      var margin = includeMargin ? MARGIN_SIZE : 0;
      var numCells = cells.length + margin * 2;
      var calculatedImageSettings = getImageSettings(this.props, cells);
      var image = null;

      if (imageSettings != null && calculatedImageSettings != null) {
        if (calculatedImageSettings.excavation != null) {
          cells = excavateModules(cells, calculatedImageSettings.excavation);
        }

        image = React.createElement("image", {
          xlinkHref: imageSettings.src,
          height: calculatedImageSettings.h,
          width: calculatedImageSettings.w,
          x: calculatedImageSettings.x + margin,
          y: calculatedImageSettings.y + margin,
          preserveAspectRatio: "none"
        });
      } // Drawing strategy: instead of a rect per module, we're going to create a
      // single path for the dark modules and layer that on top of a light rect,
      // for a total of 2 DOM nodes. We pay a bit more in string concat but that's
      // way faster than DOM ops.
      // For level 1, 441 nodes -> 2
      // For level 40, 31329 -> 2


      var fgPath = generatePath(cells, margin);
      return React.createElement("svg", _extends({
        shapeRendering: "crispEdges",
        height: size,
        width: size,
        viewBox: "0 0 ".concat(numCells, " ").concat(numCells)
      }, otherProps), React.createElement("path", {
        fill: bgColor,
        d: "M0,0 h".concat(numCells, "v").concat(numCells, "H0z")
      }), React.createElement("path", {
        fill: fgColor,
        d: fgPath
      }), image);
    }
  }]);

  return QRCodeSVG;
}(React.PureComponent);

_defineProperty(QRCodeSVG, "defaultProps", DEFAULT_PROPS);

if ("development" !== 'production') {
  QRCodeSVG.propTypes = PROP_TYPES;
}

var QRCode = function QRCode(props) {
  var renderAs = props.renderAs,
      otherProps = _objectWithoutProperties(props, ["renderAs"]);

  var Component = renderAs === 'svg' ? QRCodeSVG : QRCodeCanvas;
  return React.createElement(Component, otherProps);
};

QRCode.defaultProps = _objectSpread({
  renderAs: 'canvas'
}, DEFAULT_PROPS);
module.exports = QRCode;
      };
    };
  }
}, {package:"qrcode.react",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/qrcode.react/lib/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/webcam-utils.js", {"../../../app/scripts/lib/util":"/home/clarisco/Desktop/metamask-extension-develop/app/scripts/lib/util.js","../../../shared/constants/app":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/app.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/webcam-utils.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _app = require("../../../shared/constants/app");

var _util = require("../../../app/scripts/lib/util");

class WebcamUtils {
  static async checkStatus() {
    const isPopup = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;

    const isFirefoxOrBrave = (0, _util.getPlatform)() === (_app.PLATFORM_FIREFOX || _app.PLATFORM_BRAVE);

    const devices = await window.navigator.mediaDevices.enumerateDevices();
    const webcams = devices.filter(device => device.kind === 'videoinput');
    const hasWebcam = webcams.length > 0; // A non-empty-string label implies that the webcam has been granted permission, as
    // otherwise the label is kept blank to prevent fingerprinting

    const hasWebcamPermissions = webcams.some(webcam => webcam.label && webcam.label.length > 0);

    if (hasWebcam) {
      let environmentReady = true;

      if (isFirefoxOrBrave && isPopup || isPopup && !hasWebcamPermissions) {
        environmentReady = false;
      }

      return {
        permissions: hasWebcamPermissions,
        environmentReady
      };
    }

    const error = new Error('No webcam found');
    error.type = 'NO_WEBCAM_FOUND';
    throw error;
  }

}

var _default = WebcamUtils;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/webcam-utils.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/enhanced-reader.js", {"../../../../shared/constants/time":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/time.js","../../ui/spinner":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/spinner/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@zxing/browser":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@zxing/browser/cjs/index.js","@zxing/library":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@zxing/library/umd/index.min.js","loglevel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/loglevel/lib/loglevel.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/enhanced-reader.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _library = require("@zxing/library");

var _browser = require("@zxing/browser");

var _loglevel = _interopRequireDefault(require("loglevel"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _time = require("../../../../shared/constants/time");

var _spinner = _interopRequireDefault(require("../../ui/spinner"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const EnhancedReader = ({
  handleScan
}) => {
  const [canplay, setCanplay] = (0, _react.useState)(false);
  const codeReader = (0, _react.useMemo)(() => {
    const hint = new Map();
    hint.set(_library.DecodeHintType.POSSIBLE_FORMATS, [_library.BarcodeFormat.QR_CODE]);
    return new _browser.BrowserQRCodeReader(hint, {
      delayBetweenScanAttempts: _time.MILLISECOND * 100,
      delayBetweenScanSuccess: _time.MILLISECOND * 100
    });
  }, []);
  (0, _react.useEffect)(() => {
    const videoElem = document.getElementById('video');

    const canplayListener = () => {
      setCanplay(true);
    };

    videoElem.addEventListener('canplay', canplayListener);
    const promise = codeReader.decodeFromVideoDevice(undefined, 'video', result => {
      if (result) {
        handleScan(result.getText());
      }
    });
    return () => {
      videoElem.removeEventListener('canplay', canplayListener);
      promise.then(controls => {
        if (controls) {
          controls.stop();
        }
      }).catch(_loglevel.default.info);
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-scanner__content__video-wrapper"
  }, /*#__PURE__*/_react.default.createElement("video", {
    id: "video",
    style: {
      display: canplay ? 'block' : 'none',
      width: '100%',
      filter: 'blur(4px)'
    }
  }), canplay ? null : /*#__PURE__*/_react.default.createElement(_spinner.default, {
    color: "#3ca7f2"
  }));
};

EnhancedReader.propTypes = {
  handleScan: _propTypes.default.func.isRequired
};
var _default = EnhancedReader;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/qr-hardware-popover/enhanced-reader.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/tab/tab.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/tab/tab.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

const Tab = props => {
  const {
    activeClassName,
    className,
    'data-testid': dataTestId,
    isActive,
    name,
    onClick,
    tabIndex
  } = props;
  return /*#__PURE__*/_react.default.createElement("li", {
    className: (0, _classnames.default)('tab', className, {
      'tab--active': isActive,
      [activeClassName]: activeClassName && isActive
    }),
    "data-testid": dataTestId,
    onClick: event => {
      event.preventDefault();
      onClick(tabIndex);
    }
  }, /*#__PURE__*/_react.default.createElement("button", null, name));
};

Tab.propTypes = {
  activeClassName: _propTypes.default.string,
  className: _propTypes.default.string,
  'data-testid': _propTypes.default.string,
  isActive: _propTypes.default.bool,
  // required, but added using React.cloneElement
  name: _propTypes.default.string.isRequired,
  onClick: _propTypes.default.func,
  tabIndex: _propTypes.default.number // required, but added using React.cloneElement

};
Tab.defaultProps = {
  activeClassName: undefined,
  className: undefined,
  onClick: undefined
};
var _default = Tab;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/tab/tab.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-list/token-list.component.js", {"../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","./token-list-placeholder":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-list/token-list-placeholder/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-list/token-list.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _util = require("../../../helpers/utils/util");

var _tokenListPlaceholder = _interopRequireDefault(require("./token-list-placeholder"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class TokenList extends _react.Component {
  render() {
    const {
      results = [],
      selectedTokens = {},
      onToggleToken,
      tokens = [],
      useTokenDetection
    } = this.props;
    return results.length === 0 ? /*#__PURE__*/_react.default.createElement(_tokenListPlaceholder.default, null) : /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list__title"
    }, this.context.t('searchResults')), /*#__PURE__*/_react.default.createElement("div", {
      className: "token-list__tokens-container"
    }, Array(6).fill(undefined).map((_, i) => {
      const {
        iconUrl,
        symbol,
        name,
        address
      } = results[i] || {}; // token from dynamic api list is fetched when useTokenDetection is true

      const iconPath = useTokenDetection ? iconUrl : `images/contract/${iconUrl}`;
      const tokenAlreadyAdded = (0, _util.checkExistingAddresses)(address, tokens);

      const onClick = () => !tokenAlreadyAdded && onToggleToken(results[i]);

      return Boolean(iconUrl || symbol || name) && /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('token-list__token', {
          'token-list__token--selected': selectedTokens[address],
          'token-list__token--disabled': tokenAlreadyAdded
        }),
        onClick: onClick,
        onKeyPress: event => event.key === 'Enter' && onClick(),
        key: i,
        tabIndex: "0"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "token-list__token-icon",
        style: {
          backgroundImage: iconUrl && `url(${iconPath})`
        }
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "token-list__token-data"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "token-list__token-name"
      }, `${name} (${symbol})`)));
    })));
  }

}

exports.default = TokenList;
(0, _defineProperty2.default)(TokenList, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(TokenList, "propTypes", {
  tokens: _propTypes.default.array,
  results: _propTypes.default.array,
  selectedTokens: _propTypes.default.object,
  onToggleToken: _propTypes.default.func,
  useTokenDetection: _propTypes.default.bool
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/import-token/token-list/token-list.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/tooltip.js", {"@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-tippy":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-tippy/dist/react-tippy.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/tooltip.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactTippy = require("react-tippy");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class Tooltip extends _react.PureComponent {
  render() {
    const {
      arrow,
      children,
      containerClassName,
      disabled,
      position,
      html,
      interactive,
      size,
      title,
      trigger,
      onHidden,
      offset,
      wrapperClassName,
      style,
      theme,
      tabIndex,
      tag
    } = this.props;

    if (!title && !html) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: wrapperClassName
      }, children);
    }

    return /*#__PURE__*/_react.default.createElement(tag, {
      className: wrapperClassName
    }, /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, {
      arrow: arrow,
      className: containerClassName,
      disabled: disabled,
      hideOnClick: false,
      html: html,
      interactive: interactive,
      onHidden: onHidden,
      position: position,
      size: size,
      offset: offset,
      style: style,
      title: disabled ? '' : title,
      trigger: trigger,
      theme: theme,
      tabIndex: tabIndex || 0,
      tag: tag
    }, children));
  }

}

exports.default = Tooltip;
(0, _defineProperty2.default)(Tooltip, "defaultProps", {
  arrow: true,
  children: null,
  containerClassName: '',
  html: null,
  interactive: undefined,
  onHidden: null,
  position: 'left',
  offset: 0,
  size: 'small',
  title: null,
  trigger: 'mouseenter focus',
  wrapperClassName: undefined,
  theme: '',
  tag: 'div'
});
(0, _defineProperty2.default)(Tooltip, "propTypes", {
  arrow: _propTypes.default.bool,
  children: _propTypes.default.node,
  containerClassName: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  html: _propTypes.default.node,
  interactive: _propTypes.default.bool,
  offset: _propTypes.default.number,
  onHidden: _propTypes.default.func,
  position: _propTypes.default.oneOf(['top', 'right', 'bottom', 'left']),
  size: _propTypes.default.oneOf(['small', 'regular', 'big']),
  title: _propTypes.default.string,
  trigger: _propTypes.default.any,
  wrapperClassName: _propTypes.default.string,
  style: _propTypes.default.object,
  theme: _propTypes.default.string,
  tabIndex: _propTypes.default.number,
  tag: _propTypes.default.string
});


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/tooltip.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-list/connected-accounts-list.component.js", {"../../ui/menu":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/menu/index.js","./connected-accounts-list-item":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-list/connected-accounts-list-item/index.js","./connected-accounts-list-options":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-list/connected-accounts-list-options/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-list/connected-accounts-list.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _menu = require("../../ui/menu");

var _connectedAccountsListItem = _interopRequireDefault(require("./connected-accounts-list-item"));

var _connectedAccountsListOptions = _interopRequireDefault(require("./connected-accounts-list-options"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ConnectedAccountsList extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      accountWithOptionsShown: null
    });
    (0, _defineProperty2.default)(this, "disconnectAccount", () => {
      this.hideAccountOptions();
      this.props.removePermittedAccount(this.state.accountWithOptionsShown);
    });
    (0, _defineProperty2.default)(this, "switchAccount", address => {
      this.hideAccountOptions();
      this.props.setSelectedAddress(address);
    });
    (0, _defineProperty2.default)(this, "hideAccountOptions", () => {
      this.setState({
        accountWithOptionsShown: null
      });
    });
    (0, _defineProperty2.default)(this, "showAccountOptions", address => {
      this.setState({
        accountWithOptionsShown: address
      });
    });
  }

  renderUnconnectedAccount() {
    const {
      accountToConnect,
      connectAccount
    } = this.props;
    const {
      t
    } = this.context;

    if (!accountToConnect) {
      return null;
    }

    const {
      address,
      name
    } = accountToConnect;
    return /*#__PURE__*/_react.default.createElement(_connectedAccountsListItem.default, {
      className: "connected-accounts-list__row--highlight",
      address: address,
      name: `${name} (…${address.substr(-4, 4)})`,
      status: t('statusNotConnected'),
      action: /*#__PURE__*/_react.default.createElement("a", {
        className: "connected-accounts-list__account-status-link",
        onClick: () => connectAccount(accountToConnect.address)
      }, t('connect'))
    });
  }

  renderListItemOptions(address) {
    const {
      accountWithOptionsShown
    } = this.state;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_connectedAccountsListOptions.default, {
      onHideOptions: this.hideAccountOptions,
      onShowOptions: this.showAccountOptions.bind(null, address),
      show: accountWithOptionsShown === address
    }, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
      iconClassName: "disconnect-icon",
      onClick: this.disconnectAccount
    }, t('disconnectThisAccount')));
  }

  renderListItemAction(address) {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("a", {
      className: "connected-accounts-list__account-status-link",
      onClick: () => this.switchAccount(address)
    }, t('switchToThisAccount'));
  }

  render() {
    const {
      connectedAccounts,
      selectedAddress,
      shouldRenderListOptions
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("main", {
      className: "connected-accounts-list"
    }, this.renderUnconnectedAccount(), connectedAccounts.map(({
      address,
      name
    }, index) => {
      return /*#__PURE__*/_react.default.createElement(_connectedAccountsListItem.default, {
        key: address,
        address: address,
        name: `${name} (…${address.substr(-4, 4)})`,
        status: index === 0 ? t('active') : null,
        options: shouldRenderListOptions ? this.renderListItemOptions(address) : null,
        action: address === selectedAddress ? null : this.renderListItemAction(address)
      });
    })));
  }

}

exports.default = ConnectedAccountsList;
(0, _defineProperty2.default)(ConnectedAccountsList, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
(0, _defineProperty2.default)(ConnectedAccountsList, "defaultProps", {
  accountToConnect: null
});
(0, _defineProperty2.default)(ConnectedAccountsList, "propTypes", {
  accountToConnect: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired
  }),
  connectedAccounts: _propTypes.default.arrayOf(_propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired,
    lastActive: _propTypes.default.number
  })).isRequired,
  connectAccount: _propTypes.default.func.isRequired,
  selectedAddress: _propTypes.default.string.isRequired,
  removePermittedAccount: _propTypes.default.func,
  setSelectedAddress: _propTypes.default.func.isRequired,
  shouldRenderListOptions: (props, propName, componentName) => {
    if (typeof props[propName] !== 'boolean') {
      return new Error(`Warning: Failed prop type: '${propName}' of component '${componentName}' must be a boolean. Received: ${typeof props[propName]}`);
    } else if (props[propName] && !props.removePermittedAccount) {
      return new Error(`Warning: Failed prop type: '${propName}' of component '${componentName}' requires prop 'removePermittedAccount'.`);
    }

    return undefined;
  }
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-list/connected-accounts-list.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@zxing/library/umd/index.min.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@zxing/library/umd/index.min.js
      return function (require, module, exports) {
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("ZXing",[],e):"object"==typeof exports?exports.ZXing=e():t.ZXing=e()}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=104)}([function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.AZTEC=0]="AZTEC",t[t.CODABAR=1]="CODABAR",t[t.CODE_39=2]="CODE_39",t[t.CODE_93=3]="CODE_93",t[t.CODE_128=4]="CODE_128",t[t.DATA_MATRIX=5]="DATA_MATRIX",t[t.EAN_8=6]="EAN_8",t[t.EAN_13=7]="EAN_13",t[t.ITF=8]="ITF",t[t.MAXICODE=9]="MAXICODE",t[t.PDF_417=10]="PDF_417",t[t.QR_CODE=11]="QR_CODE",t[t.RSS_14=12]="RSS_14",t[t.RSS_EXPANDED=13]="RSS_EXPANDED",t[t.UPC_A=14]="UPC_A",t[t.UPC_E=15]="UPC_E",t[t.UPC_EAN_EXTENSION=16]="UPC_EAN_EXTENSION"}(n||(n={})),e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(17),o=r(101),i=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.getX=function(){return this.x},t.prototype.getY=function(){return this.y},t.prototype.equals=function(e){if(e instanceof t){var r=e;return this.x===r.x&&this.y===r.y}return!1},t.prototype.hashCode=function(){return 31*o.default.floatToIntBits(this.x)+o.default.floatToIntBits(this.y)},t.prototype.toString=function(){return"("+this.x+","+this.y+")"},t.orderBestPatterns=function(t){var e,r,n,o=this.distance(t[0],t[1]),i=this.distance(t[1],t[2]),a=this.distance(t[0],t[2]);if(i>=o&&i>=a?(r=t[0],e=t[1],n=t[2]):a>=i&&a>=o?(r=t[1],e=t[0],n=t[2]):(r=t[2],e=t[0],n=t[1]),this.crossProductZ(e,r,n)<0){var u=e;e=n,n=u}t[0]=e,t[1]=r,t[2]=n},t.distance=function(t,e){return n.default.distance(t.x,t.y,e.x,e.y)},t.crossProductZ=function(t,e,r){var n=e.x,o=e.y;return(r.x-n)*(t.y-o)-(r.y-o)*(t.x-n)},t}();e.default=i},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e){void 0===e&&(e=void 0);var r=t.call(this,e)||this;return r.message=e,r}return o(e,t),e}(r(102).CustomError);e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(14),o=r(7),i=r(37),a=r(12),u=r(1),f=function(){function t(t,e,r,n){if(this.width=t,this.height=e,this.rowSize=r,this.bits=n,void 0!==e&&null!==e||(e=t),this.height=e,t<1||e<1)throw new u.default("Both dimensions must be greater than 0");void 0!==r&&null!==r||(r=Math.floor((t+31)/32)),this.rowSize=r,void 0!==n&&null!==n||(this.bits=new Int32Array(this.rowSize*this.height))}return t.parseFromBooleanArray=function(e){for(var r=e.length,n=e[0].length,o=new t(n,r),i=0;i<r;i++)for(var a=e[i],u=0;u<n;u++)a[u]&&o.set(u,i);return o},t.parseFromString=function(e,r,n){if(null===e)throw new u.default("stringRepresentation cannot be null");for(var o=new Array(e.length),i=0,a=0,f=-1,s=0,l=0;l<e.length;)if("\n"===e.charAt(l)||"\r"===e.charAt(l)){if(i>a){if(-1===f)f=i-a;else if(i-a!==f)throw new u.default("row lengths do not match");a=i,s++}l++}else if(e.substring(l,l+r.length)===r)l+=r.length,o[i]=!0,i++;else{if(e.substring(l,l+n.length)!==n)throw new u.default("illegal character encountered: "+e.substring(l));l+=n.length,o[i]=!1,i++}if(i>a){if(-1===f)f=i-a;else if(i-a!==f)throw new u.default("row lengths do not match");s++}for(var d=new t(f,s),c=0;c<i;c++)o[c]&&d.set(Math.floor(c%f),Math.floor(c/f));return d},t.prototype.get=function(t,e){var r=e*this.rowSize+Math.floor(t/32);return 0!=(this.bits[r]>>>(31&t)&1)},t.prototype.set=function(t,e){var r=e*this.rowSize+Math.floor(t/32);this.bits[r]|=1<<(31&t)&4294967295},t.prototype.unset=function(t,e){var r=e*this.rowSize+Math.floor(t/32);this.bits[r]&=~(1<<(31&t)&4294967295)},t.prototype.flip=function(t,e){var r=e*this.rowSize+Math.floor(t/32);this.bits[r]^=1<<(31&t)&4294967295},t.prototype.xor=function(t){if(this.width!==t.getWidth()||this.height!==t.getHeight()||this.rowSize!==t.getRowSize())throw new u.default("input matrix dimensions do not match");for(var e=new n.default(Math.floor(this.width/32)+1),r=this.rowSize,o=this.bits,i=0,a=this.height;i<a;i++)for(var f=i*r,s=t.getRow(i,e).getBitArray(),l=0;l<r;l++)o[f+l]^=s[l]},t.prototype.clear=function(){for(var t=this.bits,e=t.length,r=0;r<e;r++)t[r]=0},t.prototype.setRegion=function(t,e,r,n){if(e<0||t<0)throw new u.default("Left and top must be nonnegative");if(n<1||r<1)throw new u.default("Height and width must be at least 1");var o=t+r,i=e+n;if(i>this.height||o>this.width)throw new u.default("The region must fit inside the matrix");for(var a=this.rowSize,f=this.bits,s=e;s<i;s++)for(var l=s*a,d=t;d<o;d++)f[l+Math.floor(d/32)]|=1<<(31&d)&4294967295},t.prototype.getRow=function(t,e){null===e||void 0===e||e.getSize()<this.width?e=new n.default(this.width):e.clear();for(var r=this.rowSize,o=this.bits,i=t*r,a=0;a<r;a++)e.setBulk(32*a,o[i+a]);return e},t.prototype.setRow=function(t,e){o.default.arraycopy(e.getBitArray(),0,this.bits,t*this.rowSize,this.rowSize)},t.prototype.rotate180=function(){for(var t=this.getWidth(),e=this.getHeight(),r=new n.default(t),o=new n.default(t),i=0,a=Math.floor((e+1)/2);i<a;i++)r=this.getRow(i,r),o=this.getRow(e-1-i,o),r.reverse(),o.reverse(),this.setRow(i,o),this.setRow(e-1-i,r)},t.prototype.getEnclosingRectangle=function(){for(var t=this.width,e=this.height,r=this.rowSize,n=this.bits,o=t,i=e,a=-1,u=-1,f=0;f<e;f++)for(var s=0;s<r;s++){var l=n[f*r+s];if(0!==l){if(f<i&&(i=f),f>u&&(u=f),32*s<o){for(var d=0;0==(l<<31-d&4294967295);)d++;32*s+d<o&&(o=32*s+d)}if(32*s+31>a){for(d=31;l>>>d==0;)d--;32*s+d>a&&(a=32*s+d)}}}return a<o||u<i?null:Int32Array.from([o,i,a-o+1,u-i+1])},t.prototype.getTopLeftOnBit=function(){for(var t=this.rowSize,e=this.bits,r=0;r<e.length&&0===e[r];)r++;if(r===e.length)return null;for(var n=r/t,o=r%t*32,i=e[r],a=0;0==(i<<31-a&4294967295);)a++;return o+=a,Int32Array.from([o,n])},t.prototype.getBottomRightOnBit=function(){for(var t=this.rowSize,e=this.bits,r=e.length-1;r>=0&&0===e[r];)r--;if(r<0)return null;for(var n=Math.floor(r/t),o=32*Math.floor(r%t),i=e[r],a=31;i>>>a==0;)a--;return o+=a,Int32Array.from([o,n])},t.prototype.getWidth=function(){return this.width},t.prototype.getHeight=function(){return this.height},t.prototype.getRowSize=function(){return this.rowSize},t.prototype.equals=function(e){if(!(e instanceof t))return!1;var r=e;return this.width===r.width&&this.height===r.height&&this.rowSize===r.rowSize&&i.default.equals(this.bits,r.bits)},t.prototype.hashCode=function(){var t=this.width;return 31*(t=31*(t=31*(t=31*t+this.width)+this.height)+this.rowSize)+i.default.hashCode(this.bits)},t.prototype.toString=function(t,e,r){return void 0===t&&(t="x"),void 0===e&&(e=" "),void 0===r&&(r="\n"),this.buildToString(t,e,r)},t.prototype.buildToString=function(t,e,r){var n=new a.default;n.append(r);for(var o=0,i=this.height;o<i;o++){for(var u=0,f=this.width;u<f;u++)n.append(this.get(u,o)?t:e);n.append(r)}return n.toString()},t.prototype.clone=function(){return new t(this.width,this.height,this.rowSize,this.bits.slice())},t}();e.default=f},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.arraycopy=function(t,e,r,n,o){for(;o--;)r[n++]=t[e++]},t.currentTimeMillis=function(){return Date.now()},t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(3),o=r(7),i=function(){function t(t,e,r,n,i,a){this.text=t,this.rawBytes=e,this.numBits=r,this.resultPoints=n,this.format=i,this.timestamp=a,this.text=t,this.rawBytes=e,this.numBits=void 0===r||null===r?null===e||void 0===e?0:8*e.length:r,this.resultPoints=n,this.format=i,this.resultMetadata=null,this.timestamp=void 0===a||null===a?o.default.currentTimeMillis():a}return t.prototype.getText=function(){return this.text},t.prototype.getRawBytes=function(){return this.rawBytes},t.prototype.getNumBits=function(){return this.numBits},t.prototype.getResultPoints=function(){return this.resultPoints},t.prototype.getBarcodeFormat=function(){return this.format},t.prototype.getResultMetadata=function(){return this.resultMetadata},t.prototype.putMetadata=function(t,e){null===this.resultMetadata&&(this.resultMetadata=new Map),this.resultMetadata.set(t,e)},t.prototype.putAllMetadata=function(t){null!==t&&(null===this.resultMetadata?this.resultMetadata=t:this.resultMetadata=new Map(t))},t.prototype.addResultPoints=function(t){var e=this.resultPoints;if(null===e)this.resultPoints=t;else if(null!==t&&t.length>0){var r=new n.default[e.length+t.length];o.default.arraycopy(e,0,r,0,e.length),o.default.arraycopy(t,0,r,e.length,t.length),this.resultPoints=r}},t.prototype.getTimestamp=function(){return this.timestamp},t.prototype.toString=function(){return this.text},t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(14),o=r(10),i=r(3),a=r(0),u=function(){function t(){}return t.prototype.decode=function(t,e){try{return this.doDecode(t,e)}catch(c){if(e&&!0===e.get(3)&&t.isRotateSupported()){var r=t.rotateCounterClockwise(),n=this.doDecode(r,e),u=n.getResultMetadata(),f=270;null!==u&&!0===u.get(o.default.ORIENTATION)&&(f+=u.get(o.default.ORIENTATION)%360),n.putMetadata(o.default.ORIENTATION,f);var s=n.getResultPoints();if(null!==s)for(var l=r.getHeight(),d=0;d<s.length;d++)s[d]=new i.default(l-s[d].getY()-1,s[d].getX());return n}throw new a.default}},t.prototype.reset=function(){},t.prototype.doDecode=function(t,e){var r,u=t.getWidth(),f=t.getHeight(),s=new n.default(u),l=e&&!0===e.get(3),d=Math.max(1,f>>(l?8:5));r=l?f:15;for(var c=Math.trunc(f/2),h=0;h<r;h++){var p=Math.trunc((h+1)/2),w=c+d*(0==(1&h)?p:-p);if(w<0||w>=f)break;try{s=t.getBlackRow(w,s)}catch(t){continue}for(var g=function(t){if(1===t&&(s.reverse(),e&&!0===e.get(9))){var r=new Map;e.forEach(function(t,e){return r.set(e,t)}),r.delete(9),e=r}try{var n=v.decodeRow(w,s,e);if(1===t){n.putMetadata(o.default.ORIENTATION,180);var a=n.getResultPoints();null!==a&&(a[0]=new i.default(u-a[0].getX()-1,a[0].getY()),a[1]=new i.default(u-a[1].getX()-1,a[1].getY()))}return{value:n}}catch(t){}},v=this,_=0;_<2;_++){var y=g(_);if("object"==typeof y)return y.value}}throw new a.default},t.recordPattern=function(t,e,r){for(var n=r.length,o=0;o<n;o++)r[o]=0;var i=t.getSize();if(e>=i)throw new a.default;for(var u=!t.get(e),f=0,s=e;s<i;){if(t.get(s)!==u)r[f]++;else{if(++f===n)break;r[f]=1,u=!u}s++}if(f!==n&&(f!==n-1||s!==i))throw new a.default},t.recordPatternInReverse=function(e,r,n){for(var o=n.length,i=e.get(r);r>0&&o>=0;)e.get(--r)!==i&&(o--,i=!i);if(o>=0)throw new a.default;t.recordPattern(e,r+1,n)},t.patternMatchVariance=function(t,e,r){for(var n=t.length,o=0,i=0,a=0;a<n;a++)o+=t[a],i+=e[a];if(o<i)return Number.POSITIVE_INFINITY;var u=o/i;r*=u;for(var f=0,s=0;s<n;s++){var l=t[s],d=e[s]*u,c=l>d?l-d:d-l;if(c>r)return Number.POSITIVE_INFINITY;f+=c}return f/o},t}();e.default=u},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.OTHER=0]="OTHER",t[t.ORIENTATION=1]="ORIENTATION",t[t.BYTE_SEGMENTS=2]="BYTE_SEGMENTS",t[t.ERROR_CORRECTION_LEVEL=3]="ERROR_CORRECTION_LEVEL",t[t.ISSUE_NUMBER=4]="ISSUE_NUMBER",t[t.SUGGESTED_PRICE=5]="SUGGESTED_PRICE",t[t.POSSIBLE_COUNTRY=6]="POSSIBLE_COUNTRY",t[t.UPC_EAN_EXTENSION=7]="UPC_EAN_EXTENSION",t[t.PDF417_EXTRA_METADATA=8]="PDF417_EXTRA_METADATA",t[t.STRUCTURED_APPEND_SEQUENCE=9]="STRUCTURED_APPEND_SEQUENCE",t[t.STRUCTURED_APPEND_PARITY=10]="STRUCTURED_APPEND_PARITY"}(n||(n={})),e.default=n},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){void 0===t&&(t=""),this.value=t}return t.prototype.append=function(t){return this.value+="string"==typeof t?t.toString():String.fromCharCode(t),this},t.prototype.length=function(){return this.value.length},t.prototype.charAt=function(t){return this.value.charAt(t)},t.prototype.deleteCharAt=function(t){this.value=this.value.substr(0,t)+this.value.substring(t+1)},t.prototype.setCharAt=function(t,e){this.value=this.value.substr(0,t)+e+this.value.substr(t+1)},t.prototype.toString=function(){return this.value},t.prototype.insert=function(t,e){this.value=this.value.substr(0,t)+e+this.value.substr(t+e.length)},t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(21),o=r(22),i=r(1),a=r(59),u=function(){function t(t,e,r){this.primitive=t,this.size=e,this.generatorBase=r;for(var o=new Int32Array(e),i=1,a=0;a<e;a++)o[a]=i,(i*=2)>=e&&(i^=t,i&=e-1);this.expTable=o;var u=new Int32Array(e);for(a=0;a<e-1;a++)u[o[a]]=a;this.logTable=u,this.zero=new n.default(this,Int32Array.from([0])),this.one=new n.default(this,Int32Array.from([1]))}return t.prototype.getZero=function(){return this.zero},t.prototype.getOne=function(){return this.one},t.prototype.buildMonomial=function(t,e){if(t<0)throw new i.default;if(0===e)return this.zero;var r=new Int32Array(t+1);return r[0]=e,new n.default(this,r)},t.addOrSubtract=function(t,e){return t^e},t.prototype.exp=function(t){return this.expTable[t]},t.prototype.log=function(t){if(0===t)throw new i.default;return this.logTable[t]},t.prototype.inverse=function(t){if(0===t)throw new a.default;return this.expTable[this.size-this.logTable[t]-1]},t.prototype.multiply=function(t,e){return 0===t||0===e?0:this.expTable[(this.logTable[t]+this.logTable[e])%(this.size-1)]},t.prototype.getSize=function(){return this.size},t.prototype.getGeneratorBase=function(){return this.generatorBase},t.prototype.toString=function(){return"GF(0x"+o.default.toHexString(this.primitive)+","+this.size+")"},t.prototype.equals=function(t){return t===this},t.AZTEC_DATA_12=new t(4201,4096,1),t.AZTEC_DATA_10=new t(1033,1024,1),t.AZTEC_DATA_6=new t(67,64,1),t.AZTEC_PARAM=new t(19,16,1),t.QR_CODE_FIELD_256=new t(285,256,0),t.DATA_MATRIX_FIELD_256=new t(301,256,1),t.AZTEC_DATA_8=t.DATA_MATRIX_FIELD_256,t.MAXICODE_FIELD_64=t.AZTEC_DATA_6,t}();e.default=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(7),o=r(22),i=r(37),a=r(1),u=function(){function t(e,r){void 0===e?(this.size=0,this.bits=new Int32Array(1)):(this.size=e,this.bits=void 0===r||null===r?t.makeArray(e):r)}return t.prototype.getSize=function(){return this.size},t.prototype.getSizeInBytes=function(){return Math.floor((this.size+7)/8)},t.prototype.ensureCapacity=function(e){if(e>32*this.bits.length){var r=t.makeArray(e);n.default.arraycopy(this.bits,0,r,0,this.bits.length),this.bits=r}},t.prototype.get=function(t){return 0!=(this.bits[Math.floor(t/32)]&1<<(31&t))},t.prototype.set=function(t){this.bits[Math.floor(t/32)]|=1<<(31&t)},t.prototype.flip=function(t){this.bits[Math.floor(t/32)]^=1<<(31&t)},t.prototype.getNextSet=function(t){var e=this.size;if(t>=e)return e;var r=this.bits,n=Math.floor(t/32),i=r[n];i&=~((1<<(31&t))-1);for(var a=r.length;0===i;){if(++n===a)return e;i=r[n]}var u=32*n+o.default.numberOfTrailingZeros(i);return u>e?e:u},t.prototype.getNextUnset=function(t){var e=this.size;if(t>=e)return e;var r=this.bits,n=Math.floor(t/32),i=~r[n];i&=~((1<<(31&t))-1);for(var a=r.length;0===i;){if(++n===a)return e;i=~r[n]}var u=32*n+o.default.numberOfTrailingZeros(i);return u>e?e:u},t.prototype.setBulk=function(t,e){this.bits[Math.floor(t/32)]=e},t.prototype.setRange=function(t,e){if(e<t||t<0||e>this.size)throw new a.default;if(e!==t){e--;for(var r=Math.floor(t/32),n=Math.floor(e/32),o=this.bits,i=r;i<=n;i++){var u=(2<<(i<n?31:31&e))-(1<<(i>r?0:31&t));o[i]|=u}}},t.prototype.clear=function(){for(var t=this.bits.length,e=this.bits,r=0;r<t;r++)e[r]=0},t.prototype.isRange=function(t,e,r){if(e<t||t<0||e>this.size)throw new a.default;if(e===t)return!0;e--;for(var n=Math.floor(t/32),o=Math.floor(e/32),i=this.bits,u=n;u<=o;u++){var f=(2<<(u<o?31:31&e))-(1<<(u>n?0:31&t))&4294967295;if((i[u]&f)!==(r?f:0))return!1}return!0},t.prototype.appendBit=function(t){this.ensureCapacity(this.size+1),t&&(this.bits[Math.floor(this.size/32)]|=1<<(31&this.size)),this.size++},t.prototype.appendBits=function(t,e){if(e<0||e>32)throw new a.default("Num bits must be between 0 and 32");this.ensureCapacity(this.size+e),this.appendBit;for(var r=e;r>0;r--)this.appendBit(1==(t>>r-1&1))},t.prototype.appendBitArray=function(t){var e=t.size;this.ensureCapacity(this.size+e),this.appendBit;for(var r=0;r<e;r++)this.appendBit(t.get(r))},t.prototype.xor=function(t){if(this.size!==t.size)throw new a.default("Sizes don't match");for(var e=this.bits,r=0,n=e.length;r<n;r++)e[r]^=t.bits[r]},t.prototype.toBytes=function(t,e,r,n){for(var o=0;o<n;o++){for(var i=0,a=0;a<8;a++)this.get(t)&&(i|=1<<7-a),t++;e[r+o]=i}},t.prototype.getBitArray=function(){return this.bits},t.prototype.reverse=function(){for(var t=new Int32Array(this.bits.length),e=Math.floor((this.size-1)/32),r=e+1,n=this.bits,o=0;o<r;o++){var i=n[o];i=(i=(i=(i=(i=i>>1&1431655765|(1431655765&i)<<1)>>2&858993459|(858993459&i)<<2)>>4&252645135|(252645135&i)<<4)>>8&16711935|(16711935&i)<<8)>>16&65535|(65535&i)<<16,t[e-o]=i}if(this.size!==32*r){var a=32*r-this.size,u=t[0]>>>a;for(o=1;o<r;o++){var f=t[o];u|=f<<32-a,t[o-1]=u,u=f>>>a}t[r-1]=u}this.bits=t},t.makeArray=function(t){return new Int32Array(Math.floor((t+31)/32))},t.prototype.equals=function(e){if(!(e instanceof t))return!1;var r=e;return this.size===r.size&&i.default.equals(this.bits,r.bits)},t.prototype.hashCode=function(){return 31*this.size+i.default.hashCode(this.bits)},t.prototype.toString=function(){for(var t="",e=0,r=this.size;e<r;e++)0==(7&e)&&(t+=" "),t+=this.get(e)?"X":".";return t},t.prototype.clone=function(){return new t(this.size,this.bits.slice())},t}();e.default=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(4);!function(t){t[t.Cp437=0]="Cp437",t[t.ISO8859_1=1]="ISO8859_1",t[t.ISO8859_2=2]="ISO8859_2",t[t.ISO8859_3=3]="ISO8859_3",t[t.ISO8859_4=4]="ISO8859_4",t[t.ISO8859_5=5]="ISO8859_5",t[t.ISO8859_6=6]="ISO8859_6",t[t.ISO8859_7=7]="ISO8859_7",t[t.ISO8859_8=8]="ISO8859_8",t[t.ISO8859_9=9]="ISO8859_9",t[t.ISO8859_10=10]="ISO8859_10",t[t.ISO8859_11=11]="ISO8859_11",t[t.ISO8859_13=12]="ISO8859_13",t[t.ISO8859_14=13]="ISO8859_14",t[t.ISO8859_15=14]="ISO8859_15",t[t.ISO8859_16=15]="ISO8859_16",t[t.SJIS=16]="SJIS",t[t.Cp1250=17]="Cp1250",t[t.Cp1251=18]="Cp1251",t[t.Cp1252=19]="Cp1252",t[t.Cp1256=20]="Cp1256",t[t.UnicodeBigUnmarked=21]="UnicodeBigUnmarked",t[t.UTF8=22]="UTF8",t[t.ASCII=23]="ASCII",t[t.Big5=24]="Big5",t[t.GB18030=25]="GB18030",t[t.EUC_KR=26]="EUC_KR"}(e.CharacterSetValueIdentifiers||(e.CharacterSetValueIdentifiers={}));var o=function(){function t(e,r,n){for(var o=[],i=3;i<arguments.length;i++)o[i-3]=arguments[i];this.valueIdentifier=e,this.name=n,this.values="number"==typeof r?Int32Array.from([r]):r,this.otherEncodingNames=o,t.VALUE_IDENTIFIER_TO_ECI.set(e,this),t.NAME_TO_ECI.set(n,this);for(var a=this.values,u=0,f=a.length;u!==f;u++){var s=a[u];t.VALUES_TO_ECI.set(s,this)}for(var l=0,d=o;l<d.length;l++){var c=d[l];t.NAME_TO_ECI.set(c,this)}}return t.prototype.getValueIdentifier=function(){return this.valueIdentifier},t.prototype.getName=function(){return this.name},t.prototype.getValue=function(){return this.values[0]},t.getCharacterSetECIByValue=function(e){if(e<0||e>=900)throw new n.default("incorect value");var r=t.VALUES_TO_ECI.get(e);if(void 0===r)throw new n.default("incorect value");return r},t.getCharacterSetECIByName=function(e){var r=t.NAME_TO_ECI.get(e);if(void 0===r)throw new n.default("incorect value");return r},t.prototype.equals=function(e){if(!(e instanceof t))return!1;var r=e;return this.getName()===r.getName()},t.VALUE_IDENTIFIER_TO_ECI=new Map,t.VALUES_TO_ECI=new Map,t.NAME_TO_ECI=new Map,t.Cp437=new t(0,Int32Array.from([0,2]),"Cp437"),t.ISO8859_1=new t(1,Int32Array.from([1,3]),"ISO-8859-1","ISO88591","ISO8859_1"),t.ISO8859_2=new t(2,4,"ISO-8859-2","ISO88592","ISO8859_2"),t.ISO8859_3=new t(3,5,"ISO-8859-3","ISO88593","ISO8859_3"),t.ISO8859_4=new t(4,6,"ISO-8859-4","ISO88594","ISO8859_4"),t.ISO8859_5=new t(5,7,"ISO-8859-5","ISO88595","ISO8859_5"),t.ISO8859_6=new t(6,8,"ISO-8859-6","ISO88596","ISO8859_6"),t.ISO8859_7=new t(7,9,"ISO-8859-7","ISO88597","ISO8859_7"),t.ISO8859_8=new t(8,10,"ISO-8859-8","ISO88598","ISO8859_8"),t.ISO8859_9=new t(9,11,"ISO-8859-9","ISO88599","ISO8859_9"),t.ISO8859_10=new t(10,12,"ISO-8859-10","ISO885910","ISO8859_10"),t.ISO8859_11=new t(11,13,"ISO-8859-11","ISO885911","ISO8859_11"),t.ISO8859_13=new t(12,15,"ISO-8859-13","ISO885913","ISO8859_13"),t.ISO8859_14=new t(13,16,"ISO-8859-14","ISO885914","ISO8859_14"),t.ISO8859_15=new t(14,17,"ISO-8859-15","ISO885915","ISO8859_15"),t.ISO8859_16=new t(15,18,"ISO-8859-16","ISO885916","ISO8859_16"),t.SJIS=new t(16,20,"SJIS","Shift_JIS"),t.Cp1250=new t(17,21,"Cp1250","windows-1250"),t.Cp1251=new t(18,22,"Cp1251","windows-1251"),t.Cp1252=new t(19,23,"Cp1252","windows-1252"),t.Cp1256=new t(20,24,"Cp1256","windows-1256"),t.UnicodeBigUnmarked=new t(21,25,"UnicodeBigUnmarked","UTF-16BE","UnicodeBig"),t.UTF8=new t(22,26,"UTF8","UTF-8"),t.ASCII=new t(23,Int32Array.from([27,170]),"ASCII","US-ASCII"),t.Big5=new t(24,28,"Big5"),t.GB18030=new t(25,29,"GB18030","GB2312","EUC_CN","GBK"),t.EUC_KR=new t(26,30,"EUC_KR","EUC-KR"),t}();e.default=o},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.prototype.MathUtils=function(){},t.round=function(t){return NaN===t?0:t<=Number.MIN_SAFE_INTEGER?Number.MIN_SAFE_INTEGER:t>=Number.MAX_SAFE_INTEGER?Number.MAX_SAFE_INTEGER:t+(t<0?-.5:.5)|0},t.distance=function(t,e,r,n){var o=t-r,i=e-n;return Math.sqrt(o*o+i*i)},t.sum=function(t){for(var e=0,r=0,n=t.length;r!==n;r++)e+=t[r];return e},t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(12),o=r(38),i=function(){function t(t,e){this.width=t,this.height=e}return t.prototype.getWidth=function(){return this.width},t.prototype.getHeight=function(){return this.height},t.prototype.isCropSupported=function(){return!1},t.prototype.crop=function(t,e,r,n){throw new o.default("This luminance source does not support cropping.")},t.prototype.isRotateSupported=function(){return!1},t.prototype.rotateCounterClockwise=function(){throw new o.default("This luminance source does not support rotation by 90 degrees.")},t.prototype.rotateCounterClockwise45=function(){throw new o.default("This luminance source does not support rotation by 45 degrees.")},t.prototype.toString=function(){for(var t=new Uint8ClampedArray(this.width),e=new n.default,r=0;r<this.height;r++){for(var o=this.getRow(r,t),i=0;i<this.width;i++){var a,u=255&o[i];a=u<64?"#":u<128?"+":u<192?".":" ",e.append(a)}e.append("\n")}return e.toString()},t}();e.default=i},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e){var r=t.call(this,e.getWidth(),e.getHeight())||this;return r.delegate=e,r}return o(e,t),e.prototype.getRow=function(t,e){for(var r=this.delegate.getRow(t,e),n=this.getWidth(),o=0;o<n;o++)r[o]=255-(255&r[o]);return r},e.prototype.getMatrix=function(){for(var t=this.delegate.getMatrix(),e=this.getWidth()*this.getHeight(),r=new Uint8ClampedArray(e),n=0;n<e;n++)r[n]=255-(255&t[n]);return r},e.prototype.isCropSupported=function(){return this.delegate.isCropSupported()},e.prototype.crop=function(t,r,n,o){return new e(this.delegate.crop(t,r,n,o))},e.prototype.isRotateSupported=function(){return this.delegate.isRotateSupported()},e.prototype.invert=function(){return this.delegate},e.prototype.rotateCounterClockwise=function(){return new e(this.delegate.rotateCounterClockwise())},e.prototype.rotateCounterClockwise45=function(){return new e(this.delegate.rotateCounterClockwise45())},e}(r(18).default);e.default=i},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),a=r(8),u=r(10),f=r(3),s=r(9),l=r(74),d=r(0),c=r(4),h=r(11),p=function(t){function e(){var r=t.call(this)||this;r.decodeRowStringBuffer="",r.decodeRowStringBuffer="",e.L_AND_G_PATTERNS=e.L_PATTERNS.map(function(t){return t.slice()});for(var n=10;n<20;n++){for(var o=e.L_PATTERNS[n-10],i=new Array(o.length),a=0;a<o.length;a++)i[a]=o[o.length-a-1];e.L_AND_G_PATTERNS[n]=i}return r}return o(e,t),e.findStartGuardPattern=function(t){for(var r=!1,n=null,o=0,i=[0,0,0];!r;){i=[0,0,0];var a=(n=e.findGuardPattern(t,o,!1,this.START_END_PATTERN,i))[0],u=a-((o=n[1])-a);u>=0&&(r=t.isRange(u,a,!1))}return n},e.prototype.decodeRow=function(t,r,n){var o=e.findStartGuardPattern(r),s=null==n?null:n.get(9);if(null!=s){var p=new f.default((o[0]+o[1])/2,t);s.foundPossibleResultPoint(p)}var w=this.decodeMiddle(r,o,this.decodeRowStringBuffer),g=w.rowOffset,v=w.resultString;if(null!=s){var _=new f.default(g,t);s.foundPossibleResultPoint(_)}var y=e.decodeEnd(r,g);if(null!=s){var m=new f.default((y[0]+y[1])/2,t);s.foundPossibleResultPoint(m)}var E=y[1],C=E+(E-y[0]);if(C>=r.getSize()||!r.isRange(E,C,!1))throw new d.default;var A=v.toString();if(A.length<8)throw new c.default;if(!e.checkChecksum(A))throw new h.default;var S=(o[1]+o[0])/2,I=(y[1]+y[0])/2,O=this.getBarcodeFormat(),M=[new f.default(S,t),new f.default(I,t)],b=new a.default(A,null,0,M,O,(new Date).getTime()),T=0;try{var N=l.default.decodeRow(t,r,y[1]);b.putMetadata(u.default.UPC_EAN_EXTENSION,N.getText()),b.putAllMetadata(N.getResultMetadata()),b.addResultPoints(N.getResultPoints()),T=N.getText().length}catch(t){}var R=null==n?null:n.get(10);if(null!=R){var P=!1;for(var D in R)if(T.toString()===D){P=!0;break}if(!P)throw new d.default}return O===i.default.EAN_13||i.default.UPC_A,b},e.checkChecksum=function(t){return e.checkStandardUPCEANChecksum(t)},e.checkStandardUPCEANChecksum=function(t){var r=t.length;if(0===r)return!1;var n=parseInt(t.charAt(r-1),10);return e.getStandardUPCEANChecksum(t.substring(0,r-1))===n},e.getStandardUPCEANChecksum=function(t){for(var e=t.length,r=0,n=e-1;n>=0;n-=2){if((o=t.charAt(n).charCodeAt(0)-"0".charCodeAt(0))<0||o>9)throw new c.default;r+=o}for(r*=3,n=e-2;n>=0;n-=2){var o;if((o=t.charAt(n).charCodeAt(0)-"0".charCodeAt(0))<0||o>9)throw new c.default;r+=o}return(1e3-r)%10},e.decodeEnd=function(t,r){return e.findGuardPattern(t,r,!1,e.START_END_PATTERN,new Array(e.START_END_PATTERN.length).fill(0))},e.findGuardPattern=function(t,r,n,o,i){for(var a=t.getSize(),u=0,f=r=n?t.getNextUnset(r):t.getNextSet(r),l=o.length,c=n,h=r;h<a;h++)if(t.get(h)!==c)i[u]++;else{if(u===l-1){if(s.default.patternMatchVariance(i,o,e.MAX_INDIVIDUAL_VARIANCE)<e.MAX_AVG_VARIANCE)return[f,h];f+=i[0]+i[1];for(var p=i.slice(2,i.length),w=0;w<u-1;w++)i[w]=p[w];i[u-1]=0,i[u]=0,u--}else u++;i[u]=1,c=!c}throw new d.default},e.decodeDigit=function(t,r,n,o){this.recordPattern(t,n,r);for(var i=this.MAX_AVG_VARIANCE,a=-1,u=o.length,f=0;f<u;f++){var l=o[f],c=s.default.patternMatchVariance(r,l,e.MAX_INDIVIDUAL_VARIANCE);c<i&&(i=c,a=f)}if(a>=0)return a;throw new d.default},e.MAX_AVG_VARIANCE=.48,e.MAX_INDIVIDUAL_VARIANCE=.7,e.START_END_PATTERN=[1,1,1],e.MIDDLE_PATTERN=[1,1,1,1,1],e.END_PATTERN=[1,1,1,1,1,1],e.L_PATTERNS=[[3,2,1,1],[2,2,2,1],[2,1,2,2],[1,4,1,1],[1,1,3,2],[1,2,3,1],[1,1,1,4],[1,3,1,2],[1,2,1,3],[3,1,1,2]],e}(s.default);e.default=p},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(13),o=r(7),i=r(1),a=function(){function t(t,e){if(0===e.length)throw new i.default;this.field=t;var r=e.length;if(r>1&&0===e[0]){for(var n=1;n<r&&0===e[n];)n++;n===r?this.coefficients=Int32Array.from([0]):(this.coefficients=new Int32Array(r-n),o.default.arraycopy(e,n,this.coefficients,0,this.coefficients.length))}else this.coefficients=e}return t.prototype.getCoefficients=function(){return this.coefficients},t.prototype.getDegree=function(){return this.coefficients.length-1},t.prototype.isZero=function(){return 0===this.coefficients[0]},t.prototype.getCoefficient=function(t){return this.coefficients[this.coefficients.length-1-t]},t.prototype.evaluateAt=function(t){if(0===t)return this.getCoefficient(0);var e,r=this.coefficients;if(1===t){e=0;for(var o=0,i=r.length;o!==i;o++){var a=r[o];e=n.default.addOrSubtract(e,a)}return e}e=r[0];var u=r.length,f=this.field;for(o=1;o<u;o++)e=n.default.addOrSubtract(f.multiply(t,e),r[o]);return e},t.prototype.addOrSubtract=function(e){if(!this.field.equals(e.field))throw new i.default("GenericGFPolys do not have same GenericGF field");if(this.isZero())return e;if(e.isZero())return this;var r=this.coefficients,a=e.coefficients;if(r.length>a.length){var u=r;r=a,a=u}var f=new Int32Array(a.length),s=a.length-r.length;o.default.arraycopy(a,0,f,0,s);for(var l=s;l<a.length;l++)f[l]=n.default.addOrSubtract(r[l-s],a[l]);return new t(this.field,f)},t.prototype.multiply=function(e){if(!this.field.equals(e.field))throw new i.default("GenericGFPolys do not have same GenericGF field");if(this.isZero()||e.isZero())return this.field.getZero();for(var r=this.coefficients,o=r.length,a=e.coefficients,u=a.length,f=new Int32Array(o+u-1),s=this.field,l=0;l<o;l++)for(var d=r[l],c=0;c<u;c++)f[l+c]=n.default.addOrSubtract(f[l+c],s.multiply(d,a[c]));return new t(s,f)},t.prototype.multiplyScalar=function(e){if(0===e)return this.field.getZero();if(1===e)return this;for(var r=this.coefficients.length,n=this.field,o=new Int32Array(r),i=this.coefficients,a=0;a<r;a++)o[a]=n.multiply(i[a],e);return new t(n,o)},t.prototype.multiplyByMonomial=function(e,r){if(e<0)throw new i.default;if(0===r)return this.field.getZero();for(var n=this.coefficients,o=n.length,a=new Int32Array(o+e),u=this.field,f=0;f<o;f++)a[f]=u.multiply(n[f],r);return new t(u,a)},t.prototype.divide=function(t){if(!this.field.equals(t.field))throw new i.default("GenericGFPolys do not have same GenericGF field");if(t.isZero())throw new i.default("Divide by 0");for(var e=this.field,r=e.getZero(),n=this,o=t.getCoefficient(t.getDegree()),a=e.inverse(o);n.getDegree()>=t.getDegree()&&!n.isZero();){var u=n.getDegree()-t.getDegree(),f=e.multiply(n.getCoefficient(n.getDegree()),a),s=t.multiplyByMonomial(u,f),l=e.buildMonomial(u,f);r=r.addOrSubtract(l),n=n.addOrSubtract(s)}return[r,n]},t.prototype.toString=function(){for(var t="",e=this.getDegree();e>=0;e--){var r=this.getCoefficient(e);if(0!==r){if(r<0?(t+=" - ",r=-r):t.length>0&&(t+=" + "),0===e||1!==r){var n=this.field.log(r);0===n?t+="1":1===n?t+="a":(t+="a^",t+=n)}0!==e&&(1===e?t+="x":(t+="x^",t+=e))}}return t},t}();e.default=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.numberOfTrailingZeros=function(t){var e;if(0===t)return 32;var r=31;return 0!=(e=t<<16)&&(r-=16,t=e),0!=(e=t<<8)&&(r-=8,t=e),0!=(e=t<<4)&&(r-=4,t=e),0!=(e=t<<2)&&(r-=2,t=e),r-(t<<1>>>31)},t.numberOfLeadingZeros=function(t){if(0===t)return 32;var e=1;return t>>>16==0&&(e+=16,t<<=16),t>>>24==0&&(e+=8,t<<=8),t>>>28==0&&(e+=4,t<<=4),t>>>30==0&&(e+=2,t<<=2),e-(t>>>31)},t.toHexString=function(t){return t.toString(16)},t.bitCount=function(t){return t=(t=(858993459&(t-=t>>>1&1431655765))+(t>>>2&858993459))+(t>>>4)&252645135,63&(t+=t>>>8)+(t>>>16)},t.MIN_VALUE_32_BITS=-2147483648,t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(65),o=r(64),i=r(63),a=r(62),u=r(0),f=r(36),s=r(11),l=r(4),d=function(){function t(t,e,r){void 0===e&&(e=500),this.reader=t,this.timeBetweenScansMillis=e,this.hints=r}return t.prototype.getVideoInputDevices=function(){return new Promise(function(t,e){navigator.mediaDevices.enumerateDevices().then(function(e){for(var r=new Array,n=0,i=0,a=e.length;i!==a;i++){var u=e[i];"videoinput"===u.kind&&(r.push(new o.VideoInputDevice(u.deviceId,u.label||"Video source "+n)),n++)}t(r)}).catch(function(t){e(t)})})},t.prototype.decodeFromInputVideoDevice=function(t,e){var r;this.reset(),this.prepareVideoElement(e),r=void 0===t?{video:{facingMode:"environment"}}:{video:{deviceId:{exact:t}}};var n=this;return new Promise(function(t,e){navigator.mediaDevices.getUserMedia(r).then(function(r){n.stream=r,n.videoElement.srcObject=r,n.videoPlayingEventListener=function(){n.decodeOnceWithDelay(t,e)},n.videoElement.addEventListener("playing",n.videoPlayingEventListener),n.videoElement.play()}).catch(function(t){e(t)})})},t.prototype.decodeFromVideoSource=function(t,e){this.reset(),this.prepareVideoElement(e);var r=this;return new Promise(function(e,n){r.videoPlayEndedEventListener=function(){r.stop(),n(new u.default)},r.videoElement.addEventListener("ended",r.videoPlayEndedEventListener),r.videoPlayingEventListener=function(){r.decodeOnceWithDelay(e,n)},r.videoElement.addEventListener("playing",r.videoPlayingEventListener),r.videoElement.setAttribute("autoplay","true"),r.videoElement.setAttribute("src",t)})},t.prototype.prepareVideoElement=function(t){void 0===t?(this.videoElement=document.createElement("video"),this.videoElement.width=640,this.videoElement.height=480):this.videoElement="string"==typeof t?this.getMediaElement(t,"video"):t,this.videoElement.setAttribute("autoplay","true"),this.videoElement.setAttribute("muted","true"),this.videoElement.setAttribute("playsinline","true"),this.videoElement.setAttribute("autofocus","true")},t.prototype.getMediaElement=function(t,e){var r=document.getElementById(t);if(null===r)throw new f.default("element with id '"+t+"' not found");if(r.nodeName.toLowerCase()!==e.toLowerCase())throw new f.default("element with id '"+t+"' must be an "+e+" element");return r},t.prototype.decodeFromImage=function(t,e){var r=this;if(this.reset(),void 0===t&&void 0===e)throw new f.default("either imageElement with a src set or an url must be provided");this.prepareImageElement(t);var n=this;return new Promise(function(t,o){if(void 0!==e)n.imageLoadedEventListener=function(){n.decodeOnce(t,o,!1,!0)},n.imageElement.addEventListener("load",n.imageLoadedEventListener),n.imageElement.src=e;else{if(!r.isImageLoaded(r.imageElement))throw new f.default("either src or a loaded img should be provided");n.decodeOnce(t,o,!1,!0)}})},t.prototype.isImageLoaded=function(t){return!!t.complete&&0!==t.naturalWidth},t.prototype.prepareImageElement=function(t){void 0===t?(this.imageElement=document.createElement("img"),this.imageElement.width=200,this.imageElement.height=200):this.imageElement="string"==typeof t?this.getMediaElement(t,"img"):t},t.prototype.decodeOnceWithDelay=function(t,e){this.timeoutHandler=window.setTimeout(this.decodeOnce.bind(this,t,e),this.timeBetweenScansMillis)},t.prototype.decodeOnce=function(t,e,r,o){void 0===r&&(r=!0),void 0===o&&(o=!0),void 0===this.canvasElementContext&&this.prepareCaptureCanvas(),this.drawImageOnCanvas(this.canvasElementContext,this.videoElement||this.imageElement);var f=new n.HTMLCanvasElementLuminanceSource(this.canvasElement),d=new i.default(new a.default(f));try{t(this.readerDecode(d))}catch(n){r&&n instanceof u.default?this.decodeOnceWithDelay(t,e):o&&(n instanceof s.default||n instanceof l.default)?this.decodeOnceWithDelay(t,e):e(n)}},t.prototype.drawImageOnCanvas=function(t,e){t.drawImage(e,0,0)},t.prototype.readerDecode=function(t){return this.reader.decode(t,this.hints)},t.prototype.prepareCaptureCanvas=function(){var t,e,r=document.createElement("canvas");void 0!==this.videoElement?(t=this.videoElement.videoWidth,e=this.videoElement.videoHeight):(t=this.imageElement.naturalWidth||this.imageElement.width,e=this.imageElement.naturalHeight||this.imageElement.height),r.style.width=t+"px",r.style.height=e+"px",r.width=t,r.height=e,this.canvasElement=r,this.canvasElementContext=r.getContext("2d")},t.prototype.stop=function(){void 0!==this.timeoutHandler&&(window.clearTimeout(this.timeoutHandler),this.timeoutHandler=void 0),void 0!==this.stream&&(this.stream.getTracks()[0].stop(),this.stream=void 0)},t.prototype.reset=function(){this.stop(),void 0!==this.videoPlayEndedEventListener&&void 0!==this.videoElement&&this.videoElement.removeEventListener("ended",this.videoPlayEndedEventListener),void 0!==this.videoPlayingEventListener&&void 0!==this.videoElement&&this.videoElement.removeEventListener("playing",this.videoPlayingEventListener),void 0!==this.videoElement&&(this.videoElement.srcObject=void 0,this.videoElement.removeAttribute("src"),this.videoElement=void 0),void 0!==this.videoPlayEndedEventListener&&void 0!==this.imageElement&&this.imageElement.removeEventListener("load",this.imageLoadedEventListener),void 0!==this.imageElement&&(this.imageElement.src=void 0,this.imageElement.removeAttribute("src"),this.imageElement=void 0),this.canvasElementContext=void 0,this.canvasElement=void 0},t}();e.BrowserCodeReader=d},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.ERROR_CORRECTION=0]="ERROR_CORRECTION",t[t.CHARACTER_SET=1]="CHARACTER_SET",t[t.DATA_MATRIX_SHAPE=2]="DATA_MATRIX_SHAPE",t[t.MIN_SIZE=3]="MIN_SIZE",t[t.MAX_SIZE=4]="MAX_SIZE",t[t.MARGIN=5]="MARGIN",t[t.PDF417_COMPACT=6]="PDF417_COMPACT",t[t.PDF417_COMPACTION=7]="PDF417_COMPACTION",t[t.PDF417_DIMENSIONS=8]="PDF417_DIMENSIONS",t[t.AZTEC_LAYERS=9]="AZTEC_LAYERS",t[t.QR_VERSION=10]="QR_VERSION"}(n||(n={})),e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e,r,n,o,i,a,u,f){this.a11=t,this.a21=e,this.a31=r,this.a12=n,this.a22=o,this.a32=i,this.a13=a,this.a23=u,this.a33=f}return t.quadrilateralToQuadrilateral=function(e,r,n,o,i,a,u,f,s,l,d,c,h,p,w,g){var v=t.quadrilateralToSquare(e,r,n,o,i,a,u,f);return t.squareToQuadrilateral(s,l,d,c,h,p,w,g).times(v)},t.prototype.transformPoints=function(t){for(var e=t.length,r=this.a11,n=this.a12,o=this.a13,i=this.a21,a=this.a22,u=this.a23,f=this.a31,s=this.a32,l=this.a33,d=0;d<e;d+=2){var c=t[d],h=t[d+1],p=o*c+u*h+l;t[d]=(r*c+i*h+f)/p,t[d+1]=(n*c+a*h+s)/p}},t.prototype.transformPointsWithValues=function(t,e){for(var r=this.a11,n=this.a12,o=this.a13,i=this.a21,a=this.a22,u=this.a23,f=this.a31,s=this.a32,l=this.a33,d=t.length,c=0;c<d;c++){var h=t[c],p=e[c],w=o*h+u*p+l;t[c]=(r*h+i*p+f)/w,e[c]=(n*h+a*p+s)/w}},t.squareToQuadrilateral=function(e,r,n,o,i,a,u,f){var s=e-n+i-u,l=r-o+a-f;if(0===s&&0===l)return new t(n-e,i-n,e,o-r,a-o,r,0,0,1);var d=n-i,c=u-i,h=o-a,p=f-a,w=d*p-c*h,g=(s*p-c*l)/w,v=(d*l-s*h)/w;return new t(n-e+g*n,u-e+v*u,e,o-r+g*o,f-r+v*f,r,g,v,1)},t.quadrilateralToSquare=function(e,r,n,o,i,a,u,f){return t.squareToQuadrilateral(e,r,n,o,i,a,u,f).buildAdjoint()},t.prototype.buildAdjoint=function(){return new t(this.a22*this.a33-this.a23*this.a32,this.a23*this.a31-this.a21*this.a33,this.a21*this.a32-this.a22*this.a31,this.a13*this.a32-this.a12*this.a33,this.a11*this.a33-this.a13*this.a31,this.a12*this.a31-this.a11*this.a32,this.a12*this.a23-this.a13*this.a22,this.a13*this.a21-this.a11*this.a23,this.a11*this.a22-this.a12*this.a21)},t.prototype.times=function(e){return new t(this.a11*e.a11+this.a21*e.a12+this.a31*e.a13,this.a11*e.a21+this.a21*e.a22+this.a31*e.a23,this.a11*e.a31+this.a21*e.a32+this.a31*e.a33,this.a12*e.a11+this.a22*e.a12+this.a32*e.a13,this.a12*e.a21+this.a22*e.a22+this.a32*e.a23,this.a12*e.a31+this.a22*e.a32+this.a32*e.a33,this.a13*e.a11+this.a23*e.a12+this.a33*e.a13,this.a13*e.a21+this.a23*e.a22+this.a33*e.a23,this.a13*e.a31+this.a23*e.a32+this.a33*e.a33)},t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(53),o=function(){function t(){}return t.setGridSampler=function(e){t.gridSampler=e},t.getInstance=function(){return t.gridSampler},t.gridSampler=new n.default,t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){this.bits=t,this.points=e}return t.prototype.getBits=function(){return this.bits},t.prototype.getPoints=function(){return this.points},t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(38),o=r(15),i=function(){function t(){}return t.decode=function(t,e){var r=this.encodingName(e);return"undefined"==typeof TextDecoder?this.decodeFallback(t,r):new TextDecoder(r).decode(t)},t.encode=function(e,r){return t.isBrowser()?"undefined"==typeof TextEncoder?this.encodeFallback(e):(new TextEncoder).encode(e):new TextEncoder(this.encodingName(r),{NONSTANDARD_allowLegacyEncoding:!0}).encode(e)},t.isBrowser=function(){return"undefined"!=typeof window&&"[object Window]"==={}.toString.call(window)},t.encodingName=function(t){return"string"==typeof t?t:t.getName()},t.encodingCharacterSet=function(t){return o.default.getCharacterSetECIByName(this.encodingName(t))},t.decodeFallback=function(t,e){var r=this.encodingCharacterSet(e);if(r.equals(o.default.UTF8)||r.equals(o.default.ISO8859_1)||r.equals(o.default.ASCII)){for(var i="",a=0,u=t.length;a<u;a++){var f=t[a].toString(16);f.length<2&&(f="0"+f),i+="%"+f}return decodeURIComponent(i)}if(r.equals(o.default.UnicodeBigUnmarked))return String.fromCharCode.apply(null,new Uint16Array(t.buffer));throw new n.default("Encoding "+this.encodingName(e)+" not supported by fallback.")},t.encodeFallback=function(t){for(var e=btoa(unescape(encodeURIComponent(t))).split(""),r=[],n=0;n<e.length;n++)r.push(e[n].charCodeAt(0));return new Uint8Array(r)},t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e,r,n,o,i){void 0===o&&(o=-1),void 0===i&&(i=-1),this.rawBytes=t,this.text=e,this.byteSegments=r,this.ecLevel=n,this.structuredAppendSequenceNumber=o,this.structuredAppendParity=i,this.numBits=void 0===t||null===t?0:8*t.length}return t.prototype.getRawBytes=function(){return this.rawBytes},t.prototype.getNumBits=function(){return this.numBits},t.prototype.setNumBits=function(t){this.numBits=t},t.prototype.getText=function(){return this.text},t.prototype.getByteSegments=function(){return this.byteSegments},t.prototype.getECLevel=function(){return this.ecLevel},t.prototype.getErrorsCorrected=function(){return this.errorsCorrected},t.prototype.setErrorsCorrected=function(t){this.errorsCorrected=t},t.prototype.getErasures=function(){return this.erasures},t.prototype.setErasures=function(t){this.erasures=t},t.prototype.getOther=function(){return this.other},t.prototype.setOther=function(t){this.other=t},t.prototype.hasStructuredAppend=function(){return this.structuredAppendParity>=0&&this.structuredAppendSequenceNumber>=0},t.prototype.getStructuredAppendParity=function(){return this.structuredAppendParity},t.prototype.getStructuredAppendSequenceNumber=function(){return this.structuredAppendSequenceNumber},t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=function(){function t(t){this.bytes=t,this.byteOffset=0,this.bitOffset=0}return t.prototype.getBitOffset=function(){return this.bitOffset},t.prototype.getByteOffset=function(){return this.byteOffset},t.prototype.readBits=function(t){if(t<1||t>32||t>this.available())throw new n.default(""+t);var e=0,r=this.bitOffset,o=this.byteOffset,i=this.bytes;if(r>0){var a=8-r,u=t<a?t:a,f=255>>8-u<<(s=a-u);e=(i[o]&f)>>s,t-=u,8===(r+=u)&&(r=0,o++)}if(t>0){for(;t>=8;)e=e<<8|255&i[o],o++,t-=8;var s;if(t>0)f=255>>(s=8-t)<<s,e=e<<t|(i[o]&f)>>s,r+=t}return this.bitOffset=r,this.byteOffset=o,e},t.prototype.available=function(){return 8*(this.bytes.length-this.byteOffset)-this.bitOffset},t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(36),o=r(1);!function(t){t[t.L=0]="L",t[t.M=1]="M",t[t.Q=2]="Q",t[t.H=3]="H"}(e.ErrorCorrectionLevelValues||(e.ErrorCorrectionLevelValues={}));var i=function(){function t(e,r,n){this.value=e,this.stringValue=r,this.bits=n,t.FOR_BITS.set(n,this),t.FOR_VALUE.set(e,this)}return t.prototype.getValue=function(){return this.value},t.prototype.getBits=function(){return this.bits},t.fromString=function(e){switch(e){case"L":return t.L;case"M":return t.M;case"Q":return t.Q;case"H":return t.H;default:throw new n.default(e+"not available")}},t.prototype.toString=function(){return this.stringValue},t.prototype.equals=function(e){if(!(e instanceof t))return!1;var r=e;return this.value===r.value},t.forBits=function(e){if(e<0||e>=t.FOR_BITS.size)throw new o.default;return t.FOR_BITS.get(e)},t.FOR_BITS=new Map,t.FOR_VALUE=new Map,t.L=new t(0,"L",1),t.M=new t(1,"M",0),t.Q=new t(2,"Q",3),t.H=new t(3,"H",2),t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(6),o=r(57),i=r(98),a=r(97),u=r(4),f=r(1),s=function(){function t(t,e){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];this.versionNumber=t,this.alignmentPatternCenters=e,this.ecBlocks=r;for(var o=0,i=r[0].getECCodewordsPerBlock(),a=0,u=r[0].getECBlocks();a<u.length;a++){var f=u[a];o+=f.getCount()*(f.getDataCodewords()+i)}this.totalCodewords=o}return t.prototype.getVersionNumber=function(){return this.versionNumber},t.prototype.getAlignmentPatternCenters=function(){return this.alignmentPatternCenters},t.prototype.getTotalCodewords=function(){return this.totalCodewords},t.prototype.getDimensionForVersion=function(){return 17+4*this.versionNumber},t.prototype.getECBlocksForLevel=function(t){return this.ecBlocks[t.getValue()]},t.getProvisionalVersionForDimension=function(t){if(t%4!=1)throw new u.default;try{return this.getVersionForNumber((t-17)/4)}catch(t){throw new u.default}},t.getVersionForNumber=function(e){if(e<1||e>40)throw new f.default;return t.VERSIONS[e-1]},t.decodeVersionInformation=function(e){for(var r=Number.MAX_SAFE_INTEGER,n=0,i=0;i<t.VERSION_DECODE_INFO.length;i++){var a=t.VERSION_DECODE_INFO[i];if(a===e)return t.getVersionForNumber(i+7);var u=o.default.numBitsDiffering(e,a);u<r&&(n=i+7,r=u)}return r<=3?t.getVersionForNumber(n):null},t.prototype.buildFunctionPattern=function(){var t=this.getDimensionForVersion(),e=new n.default(t);e.setRegion(0,0,9,9),e.setRegion(t-8,0,8,9),e.setRegion(0,t-8,9,8);for(var r=this.alignmentPatternCenters.length,o=0;o<r;o++)for(var i=this.alignmentPatternCenters[o]-2,a=0;a<r;a++)0===o&&(0===a||a===r-1)||o===r-1&&0===a||e.setRegion(this.alignmentPatternCenters[a]-2,i,5,5);return e.setRegion(6,9,1,t-17),e.setRegion(9,6,t-17,1),this.versionNumber>6&&(e.setRegion(t-11,0,3,6),e.setRegion(0,t-11,6,3)),e},t.prototype.toString=function(){return""+this.versionNumber},t.VERSION_DECODE_INFO=Int32Array.from([31892,34236,39577,42195,48118,51042,55367,58893,63784,68472,70749,76311,79154,84390,87683,92361,96236,102084,102881,110507,110734,117786,119615,126325,127568,133589,136944,141498,145311,150283,152622,158308,161089,167017]),t.VERSIONS=[new t(1,new Int32Array(0),new i.default(7,new a.default(1,19)),new i.default(10,new a.default(1,16)),new i.default(13,new a.default(1,13)),new i.default(17,new a.default(1,9))),new t(2,Int32Array.from([6,18]),new i.default(10,new a.default(1,34)),new i.default(16,new a.default(1,28)),new i.default(22,new a.default(1,22)),new i.default(28,new a.default(1,16))),new t(3,Int32Array.from([6,22]),new i.default(15,new a.default(1,55)),new i.default(26,new a.default(1,44)),new i.default(18,new a.default(2,17)),new i.default(22,new a.default(2,13))),new t(4,Int32Array.from([6,26]),new i.default(20,new a.default(1,80)),new i.default(18,new a.default(2,32)),new i.default(26,new a.default(2,24)),new i.default(16,new a.default(4,9))),new t(5,Int32Array.from([6,30]),new i.default(26,new a.default(1,108)),new i.default(24,new a.default(2,43)),new i.default(18,new a.default(2,15),new a.default(2,16)),new i.default(22,new a.default(2,11),new a.default(2,12))),new t(6,Int32Array.from([6,34]),new i.default(18,new a.default(2,68)),new i.default(16,new a.default(4,27)),new i.default(24,new a.default(4,19)),new i.default(28,new a.default(4,15))),new t(7,Int32Array.from([6,22,38]),new i.default(20,new a.default(2,78)),new i.default(18,new a.default(4,31)),new i.default(18,new a.default(2,14),new a.default(4,15)),new i.default(26,new a.default(4,13),new a.default(1,14))),new t(8,Int32Array.from([6,24,42]),new i.default(24,new a.default(2,97)),new i.default(22,new a.default(2,38),new a.default(2,39)),new i.default(22,new a.default(4,18),new a.default(2,19)),new i.default(26,new a.default(4,14),new a.default(2,15))),new t(9,Int32Array.from([6,26,46]),new i.default(30,new a.default(2,116)),new i.default(22,new a.default(3,36),new a.default(2,37)),new i.default(20,new a.default(4,16),new a.default(4,17)),new i.default(24,new a.default(4,12),new a.default(4,13))),new t(10,Int32Array.from([6,28,50]),new i.default(18,new a.default(2,68),new a.default(2,69)),new i.default(26,new a.default(4,43),new a.default(1,44)),new i.default(24,new a.default(6,19),new a.default(2,20)),new i.default(28,new a.default(6,15),new a.default(2,16))),new t(11,Int32Array.from([6,30,54]),new i.default(20,new a.default(4,81)),new i.default(30,new a.default(1,50),new a.default(4,51)),new i.default(28,new a.default(4,22),new a.default(4,23)),new i.default(24,new a.default(3,12),new a.default(8,13))),new t(12,Int32Array.from([6,32,58]),new i.default(24,new a.default(2,92),new a.default(2,93)),new i.default(22,new a.default(6,36),new a.default(2,37)),new i.default(26,new a.default(4,20),new a.default(6,21)),new i.default(28,new a.default(7,14),new a.default(4,15))),new t(13,Int32Array.from([6,34,62]),new i.default(26,new a.default(4,107)),new i.default(22,new a.default(8,37),new a.default(1,38)),new i.default(24,new a.default(8,20),new a.default(4,21)),new i.default(22,new a.default(12,11),new a.default(4,12))),new t(14,Int32Array.from([6,26,46,66]),new i.default(30,new a.default(3,115),new a.default(1,116)),new i.default(24,new a.default(4,40),new a.default(5,41)),new i.default(20,new a.default(11,16),new a.default(5,17)),new i.default(24,new a.default(11,12),new a.default(5,13))),new t(15,Int32Array.from([6,26,48,70]),new i.default(22,new a.default(5,87),new a.default(1,88)),new i.default(24,new a.default(5,41),new a.default(5,42)),new i.default(30,new a.default(5,24),new a.default(7,25)),new i.default(24,new a.default(11,12),new a.default(7,13))),new t(16,Int32Array.from([6,26,50,74]),new i.default(24,new a.default(5,98),new a.default(1,99)),new i.default(28,new a.default(7,45),new a.default(3,46)),new i.default(24,new a.default(15,19),new a.default(2,20)),new i.default(30,new a.default(3,15),new a.default(13,16))),new t(17,Int32Array.from([6,30,54,78]),new i.default(28,new a.default(1,107),new a.default(5,108)),new i.default(28,new a.default(10,46),new a.default(1,47)),new i.default(28,new a.default(1,22),new a.default(15,23)),new i.default(28,new a.default(2,14),new a.default(17,15))),new t(18,Int32Array.from([6,30,56,82]),new i.default(30,new a.default(5,120),new a.default(1,121)),new i.default(26,new a.default(9,43),new a.default(4,44)),new i.default(28,new a.default(17,22),new a.default(1,23)),new i.default(28,new a.default(2,14),new a.default(19,15))),new t(19,Int32Array.from([6,30,58,86]),new i.default(28,new a.default(3,113),new a.default(4,114)),new i.default(26,new a.default(3,44),new a.default(11,45)),new i.default(26,new a.default(17,21),new a.default(4,22)),new i.default(26,new a.default(9,13),new a.default(16,14))),new t(20,Int32Array.from([6,34,62,90]),new i.default(28,new a.default(3,107),new a.default(5,108)),new i.default(26,new a.default(3,41),new a.default(13,42)),new i.default(30,new a.default(15,24),new a.default(5,25)),new i.default(28,new a.default(15,15),new a.default(10,16))),new t(21,Int32Array.from([6,28,50,72,94]),new i.default(28,new a.default(4,116),new a.default(4,117)),new i.default(26,new a.default(17,42)),new i.default(28,new a.default(17,22),new a.default(6,23)),new i.default(30,new a.default(19,16),new a.default(6,17))),new t(22,Int32Array.from([6,26,50,74,98]),new i.default(28,new a.default(2,111),new a.default(7,112)),new i.default(28,new a.default(17,46)),new i.default(30,new a.default(7,24),new a.default(16,25)),new i.default(24,new a.default(34,13))),new t(23,Int32Array.from([6,30,54,78,102]),new i.default(30,new a.default(4,121),new a.default(5,122)),new i.default(28,new a.default(4,47),new a.default(14,48)),new i.default(30,new a.default(11,24),new a.default(14,25)),new i.default(30,new a.default(16,15),new a.default(14,16))),new t(24,Int32Array.from([6,28,54,80,106]),new i.default(30,new a.default(6,117),new a.default(4,118)),new i.default(28,new a.default(6,45),new a.default(14,46)),new i.default(30,new a.default(11,24),new a.default(16,25)),new i.default(30,new a.default(30,16),new a.default(2,17))),new t(25,Int32Array.from([6,32,58,84,110]),new i.default(26,new a.default(8,106),new a.default(4,107)),new i.default(28,new a.default(8,47),new a.default(13,48)),new i.default(30,new a.default(7,24),new a.default(22,25)),new i.default(30,new a.default(22,15),new a.default(13,16))),new t(26,Int32Array.from([6,30,58,86,114]),new i.default(28,new a.default(10,114),new a.default(2,115)),new i.default(28,new a.default(19,46),new a.default(4,47)),new i.default(28,new a.default(28,22),new a.default(6,23)),new i.default(30,new a.default(33,16),new a.default(4,17))),new t(27,Int32Array.from([6,34,62,90,118]),new i.default(30,new a.default(8,122),new a.default(4,123)),new i.default(28,new a.default(22,45),new a.default(3,46)),new i.default(30,new a.default(8,23),new a.default(26,24)),new i.default(30,new a.default(12,15),new a.default(28,16))),new t(28,Int32Array.from([6,26,50,74,98,122]),new i.default(30,new a.default(3,117),new a.default(10,118)),new i.default(28,new a.default(3,45),new a.default(23,46)),new i.default(30,new a.default(4,24),new a.default(31,25)),new i.default(30,new a.default(11,15),new a.default(31,16))),new t(29,Int32Array.from([6,30,54,78,102,126]),new i.default(30,new a.default(7,116),new a.default(7,117)),new i.default(28,new a.default(21,45),new a.default(7,46)),new i.default(30,new a.default(1,23),new a.default(37,24)),new i.default(30,new a.default(19,15),new a.default(26,16))),new t(30,Int32Array.from([6,26,52,78,104,130]),new i.default(30,new a.default(5,115),new a.default(10,116)),new i.default(28,new a.default(19,47),new a.default(10,48)),new i.default(30,new a.default(15,24),new a.default(25,25)),new i.default(30,new a.default(23,15),new a.default(25,16))),new t(31,Int32Array.from([6,30,56,82,108,134]),new i.default(30,new a.default(13,115),new a.default(3,116)),new i.default(28,new a.default(2,46),new a.default(29,47)),new i.default(30,new a.default(42,24),new a.default(1,25)),new i.default(30,new a.default(23,15),new a.default(28,16))),new t(32,Int32Array.from([6,34,60,86,112,138]),new i.default(30,new a.default(17,115)),new i.default(28,new a.default(10,46),new a.default(23,47)),new i.default(30,new a.default(10,24),new a.default(35,25)),new i.default(30,new a.default(19,15),new a.default(35,16))),new t(33,Int32Array.from([6,30,58,86,114,142]),new i.default(30,new a.default(17,115),new a.default(1,116)),new i.default(28,new a.default(14,46),new a.default(21,47)),new i.default(30,new a.default(29,24),new a.default(19,25)),new i.default(30,new a.default(11,15),new a.default(46,16))),new t(34,Int32Array.from([6,34,62,90,118,146]),new i.default(30,new a.default(13,115),new a.default(6,116)),new i.default(28,new a.default(14,46),new a.default(23,47)),new i.default(30,new a.default(44,24),new a.default(7,25)),new i.default(30,new a.default(59,16),new a.default(1,17))),new t(35,Int32Array.from([6,30,54,78,102,126,150]),new i.default(30,new a.default(12,121),new a.default(7,122)),new i.default(28,new a.default(12,47),new a.default(26,48)),new i.default(30,new a.default(39,24),new a.default(14,25)),new i.default(30,new a.default(22,15),new a.default(41,16))),new t(36,Int32Array.from([6,24,50,76,102,128,154]),new i.default(30,new a.default(6,121),new a.default(14,122)),new i.default(28,new a.default(6,47),new a.default(34,48)),new i.default(30,new a.default(46,24),new a.default(10,25)),new i.default(30,new a.default(2,15),new a.default(64,16))),new t(37,Int32Array.from([6,28,54,80,106,132,158]),new i.default(30,new a.default(17,122),new a.default(4,123)),new i.default(28,new a.default(29,46),new a.default(14,47)),new i.default(30,new a.default(49,24),new a.default(10,25)),new i.default(30,new a.default(24,15),new a.default(46,16))),new t(38,Int32Array.from([6,32,58,84,110,136,162]),new i.default(30,new a.default(4,122),new a.default(18,123)),new i.default(28,new a.default(13,46),new a.default(32,47)),new i.default(30,new a.default(48,24),new a.default(14,25)),new i.default(30,new a.default(42,15),new a.default(32,16))),new t(39,Int32Array.from([6,26,54,82,110,138,166]),new i.default(30,new a.default(20,117),new a.default(4,118)),new i.default(28,new a.default(40,47),new a.default(7,48)),new i.default(30,new a.default(43,24),new a.default(22,25)),new i.default(30,new a.default(10,15),new a.default(67,16))),new t(40,Int32Array.from([6,30,58,86,114,142,170]),new i.default(30,new a.default(19,118),new a.default(6,119)),new i.default(28,new a.default(18,47),new a.default(31,48)),new i.default(30,new a.default(34,24),new a.default(34,25)),new i.default(30,new a.default(20,15),new a.default(61,16)))],t}();e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(13),o=r(21),i=r(58),a=r(16),u=function(){function t(t){this.field=t}return t.prototype.decode=function(t,e){for(var r=this.field,a=new o.default(r,t),u=new Int32Array(e),f=!0,s=0;s<e;s++){var l=a.evaluateAt(r.exp(s+r.getGeneratorBase()));u[u.length-1-s]=l,0!==l&&(f=!1)}if(!f){var d=new o.default(r,u),c=this.runEuclideanAlgorithm(r.buildMonomial(e,1),d,e),h=c[0],p=c[1],w=this.findErrorLocations(h),g=this.findErrorMagnitudes(p,w);for(s=0;s<w.length;s++){var v=t.length-1-r.log(w[s]);if(v<0)throw new i.default("Bad error location");t[v]=n.default.addOrSubtract(t[v],g[s])}}},t.prototype.runEuclideanAlgorithm=function(t,e,r){if(t.getDegree()<e.getDegree()){var n=t;t=e,e=n}for(var o=this.field,u=t,f=e,s=o.getZero(),l=o.getOne();f.getDegree()>=(r/2|0);){var d=u,c=s;if(s=l,(u=f).isZero())throw new i.default("r_{i-1} was zero");f=d;for(var h=o.getZero(),p=u.getCoefficient(u.getDegree()),w=o.inverse(p);f.getDegree()>=u.getDegree()&&!f.isZero();){var g=f.getDegree()-u.getDegree(),v=o.multiply(f.getCoefficient(f.getDegree()),w);h=h.addOrSubtract(o.buildMonomial(g,v)),f=f.addOrSubtract(u.multiplyByMonomial(g,v))}if(l=h.multiply(s).addOrSubtract(c),f.getDegree()>=u.getDegree())throw new a.default("Division algorithm failed to reduce polynomial?")}var _=l.getCoefficient(0);if(0===_)throw new i.default("sigmaTilde(0) was zero");var y=o.inverse(_);return[l.multiplyScalar(y),f.multiplyScalar(y)]},t.prototype.findErrorLocations=function(t){var e=t.getDegree();if(1===e)return Int32Array.from([t.getCoefficient(1)]);for(var r=new Int32Array(e),n=0,o=this.field,a=1;a<o.getSize()&&n<e;a++)0===t.evaluateAt(a)&&(r[n]=o.inverse(a),n++);if(n!==e)throw new i.default("Error locator degree does not match number of roots");return r},t.prototype.findErrorMagnitudes=function(t,e){for(var r=e.length,n=new Int32Array(r),o=this.field,i=0;i<r;i++){for(var a=o.inverse(e[i]),u=1,f=0;f<r;f++)if(i!==f){var s=o.multiply(e[f],a),l=0==(1&s)?1|s:-2&s;u=o.multiply(u,l)}n[i]=o.multiply(t.evaluateAt(a),o.inverse(u)),0!==o.getGeneratorBase()&&(n[i]=o.multiply(n[i],a))}return n},t}();e.default=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(2),o=r(8),i=r(10),a=r(6),u=r(100),f=r(56),s=r(93),l=r(0),d=function(){function t(){this.decoder=new u.default}return t.prototype.getDecoder=function(){return this.decoder},t.prototype.decode=function(e,r){var a,u;if(void 0!==r&&null!==r&&void 0!==r.get(1)){var l=t.extractPureBits(e.getBlackMatrix());a=this.decoder.decodeBitMatrix(l,r),u=t.NO_POINTS}else{var d=new s.default(e.getBlackMatrix()).detect(r);a=this.decoder.decodeBitMatrix(d.getBits(),r),u=d.getPoints()}a.getOther()instanceof f.default&&a.getOther().applyMirroredCorrection(u);var c=new o.default(a.getText(),a.getRawBytes(),void 0,u,n.default.QR_CODE,void 0),h=a.getByteSegments();null!==h&&c.putMetadata(i.default.BYTE_SEGMENTS,h);var p=a.getECLevel();return null!==p&&c.putMetadata(i.default.ERROR_CORRECTION_LEVEL,p),a.hasStructuredAppend()&&(c.putMetadata(i.default.STRUCTURED_APPEND_SEQUENCE,a.getStructuredAppendSequenceNumber()),c.putMetadata(i.default.STRUCTURED_APPEND_PARITY,a.getStructuredAppendParity())),c},t.prototype.reset=function(){},t.extractPureBits=function(t){var e=t.getTopLeftOnBit(),r=t.getBottomRightOnBit();if(null===e||null===r)throw new l.default;var n=this.moduleSize(e,t),o=e[1],i=r[1],u=e[0],f=r[0];if(u>=f||o>=i)throw new l.default;if(i-o!=f-u&&(f=u+(i-o))>=t.getWidth())throw new l.default;var s=Math.round((f-u+1)/n),d=Math.round((i-o+1)/n);if(s<=0||d<=0)throw new l.default;if(d!==s)throw new l.default;var c=Math.floor(n/2);o+=c;var h=(u+=c)+Math.floor((s-1)*n)-f;if(h>0){if(h>c)throw new l.default;u-=h}var p=o+Math.floor((d-1)*n)-i;if(p>0){if(p>c)throw new l.default;o-=p}for(var w=new a.default(s,d),g=0;g<d;g++)for(var v=o+Math.floor(g*n),_=0;_<s;_++)t.get(u+Math.floor(_*n),v)&&w.set(_,g);return w},t.moduleSize=function(t,e){for(var r=e.getHeight(),n=e.getWidth(),o=t[0],i=t[1],a=!0,u=0;o<n&&i<r;){if(a!==e.get(o,i)){if(5==++u)break;a=!a}o++,i++}if(o===n||i===r)throw new l.default;return(o-t[0])/7},t.NO_POINTS=new Array,t}();e.default=d},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(7),o=function(){function t(){}return t.equals=function(t,e){if(!t)return!1;if(!e)return!1;if(!t.length)return!1;if(!e.length)return!1;if(t.length!==e.length)return!1;for(var r=0,n=t.length;r<n;r++)if(t[r]!==e[r])return!1;return!0},t.hashCode=function(t){if(null===t)return 0;for(var e=1,r=0,n=t;r<n.length;r++)e=31*e+n[r];return e},t.fillUint8Array=function(t,e){for(var r=0;r!==t.length;r++)t[r]=e},t.copyOf=function(t,e){var r=new Int32Array(e);return n.default.arraycopy(t,0,r,0,Math.min(t.length,e)),r},t.binarySearch=function(e,r,n){void 0===n&&(n=t.numberComparator);for(var o=0,i=e.length-1;o<=i;){var a=i+o>>1,u=n(r,e[a]);if(u>0)o=a+1;else{if(!(u<0))return a;i=a-1}}return-o-1},t.numberComparator=function(t,e){return t-e},t}();e.default=o},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(2),o=r(25),i=r(6),a=r(32),u=r(49),f=r(1),s=r(16),l=function(){function t(){}return t.prototype.encode=function(e,r,i,s,l){if(0===e.length)throw new f.default("Found empty contents");if(r!==n.default.QR_CODE)throw new f.default("Can only encode QR_CODE, but got "+r);if(i<0||s<0)throw new f.default("Requested dimensions are too small: "+i+"x"+s);var d=a.default.L,c=t.QUIET_ZONE_SIZE;null!==l&&(void 0!==l.get(o.default.ERROR_CORRECTION)&&(d=a.default.fromString(l.get(o.default.ERROR_CORRECTION).toString())),void 0!==l.get(o.default.MARGIN)&&(c=Number.parseInt(l.get(o.default.MARGIN).toString(),10)));var h=u.default.encode(e,d,l);return t.renderResult(h,i,s,c)},t.renderResult=function(t,e,r,n){var o=t.getMatrix();if(null===o)throw new s.default;for(var a=o.getWidth(),u=o.getHeight(),f=a+2*n,l=u+2*n,d=Math.max(e,f),c=Math.max(r,l),h=Math.min(Math.floor(d/f),Math.floor(c/l)),p=Math.floor((d-a*h)/2),w=Math.floor((c-u*h)/2),g=new i.default(d,c),v=0,_=w;v<u;v++,_+=h)for(var y=0,m=p;y<a;y++,m+=h)1===o.get(y,v)&&g.setRegion(m,_,h,h);return g},t.QUIET_ZONE_SIZE=4,t}();e.default=l},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),a=r(20),u=r(0),f=function(t){function e(){var e=t.call(this)||this;return e.decodeMiddleCounters=[0,0,0,0],e}return o(e,t),e.prototype.decodeMiddle=function(t,r,n){var o=this.decodeMiddleCounters;o[0]=0,o[1]=0,o[2]=0,o[3]=0;for(var i=t.getSize(),u=r[1],f=0,s=0;s<6&&u<i;s++){var l=a.default.decodeDigit(t,o,u,a.default.L_AND_G_PATTERNS);n+=String.fromCharCode("0".charCodeAt(0)+l%10);for(var d=0,c=o;d<c.length;d++)u+=c[d];l>=10&&(f|=1<<5-s)}for(n=e.determineFirstDigit(n,f),u=a.default.findGuardPattern(t,u,!0,a.default.MIDDLE_PATTERN,new Array(a.default.MIDDLE_PATTERN.length).fill(0))[1],s=0;s<6&&u<i;s++){l=a.default.decodeDigit(t,o,u,a.default.L_PATTERNS),n+=String.fromCharCode("0".charCodeAt(0)+l);for(var h=0,p=o;h<p.length;h++)u+=p[h]}return{rowOffset:u,resultString:n}},e.prototype.getBarcodeFormat=function(){return i.default.EAN_13},e.determineFirstDigit=function(t,e){for(var r=0;r<10;r++)if(e===this.FIRST_DIGIT_ENCODINGS[r])return String.fromCharCode("0".charCodeAt(0)+r)+t;throw new u.default},e.FIRST_DIGIT_ENCODINGS=[0,11,13,14,19,25,28,21,22,26],e}(a.default);e.default=f},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),a=r(8),u=r(3),f=r(9),s=r(12),l=r(7),d=r(4),c=r(0),h=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.narrowLineWidth=-1,e}return o(e,t),e.prototype.decodeRow=function(t,r,n){var o=this.decodeStart(r),f=this.decodeEnd(r),l=new s.default;e.decodeMiddle(r,o[1],f[0],l);var c=l.toString(),h=null;null!=n&&(h=n.get(5)),null==h&&(h=e.DEFAULT_ALLOWED_LENGTHS);for(var p=c.length,w=!1,g=0,v=0,_=h;v<_.length;v++){var y=_[v];if(p===y){w=!0;break}y>g&&(g=y)}if(!w&&p>g&&(w=!0),!w)throw new d.default;var m=[new u.default(o[1],t),new u.default(f[0],t)];return new a.default(c,null,0,m,i.default.ITF,(new Date).getTime())},e.decodeMiddle=function(t,r,n,o){var i=new Array(10),a=new Array(5),u=new Array(5);for(i.fill(0),a.fill(0),u.fill(0);r<n;){f.default.recordPattern(t,r,i);for(var s=0;s<5;s++){var l=2*s;a[s]=i[l],u[s]=i[l+1]}var d=e.decodeDigit(a);o.append(d.toString()),d=this.decodeDigit(u),o.append(d.toString()),i.forEach(function(t){r+=t})}},e.prototype.decodeStart=function(t){var r=e.skipWhiteSpace(t),n=e.findGuardPattern(t,r,e.START_PATTERN);return this.narrowLineWidth=(n[1]-n[0])/4,this.validateQuietZone(t,n[0]),n},e.prototype.validateQuietZone=function(t,e){var r=10*this.narrowLineWidth;r=r<e?r:e;for(var n=e-1;r>0&&n>=0&&!t.get(n);n--)r--;if(0!==r)throw new c.default},e.skipWhiteSpace=function(t){var e=t.getSize(),r=t.getNextSet(0);if(r===e)throw new c.default;return r},e.prototype.decodeEnd=function(t){t.reverse();try{var r=e.skipWhiteSpace(t),n=void 0;try{n=e.findGuardPattern(t,r,e.END_PATTERN_REVERSED[0])}catch(o){n=e.findGuardPattern(t,r,e.END_PATTERN_REVERSED[1])}this.validateQuietZone(t,n[0]);var o=n[0];return n[0]=t.getSize()-n[1],n[1]=t.getSize()-o,n}finally{t.reverse()}},e.findGuardPattern=function(t,r,n){var o=n.length,i=new Array(o),a=t.getSize(),u=!1,s=0,d=r;i.fill(0);for(var h=r;h<a;h++)if(t.get(h)!==u)i[s]++;else{if(s===o-1){if(f.default.patternMatchVariance(i,n,e.MAX_INDIVIDUAL_VARIANCE)<e.MAX_AVG_VARIANCE)return[d,h];d+=i[0]+i[1],l.default.arraycopy(i,2,i,0,s-1),i[s-1]=0,i[s]=0,s--}else s++;i[s]=1,u=!u}throw new c.default},e.decodeDigit=function(t){for(var r=e.MAX_AVG_VARIANCE,n=-1,o=e.PATTERNS.length,i=0;i<o;i++){var a=e.PATTERNS[i],u=f.default.patternMatchVariance(t,a,e.MAX_INDIVIDUAL_VARIANCE);u<r?(r=u,n=i):u===r&&(n=-1)}if(n>=0)return n%10;throw new c.default},e.W=3,e.w=2,e.N=1,e.PATTERNS=[[1,1,2,2,1],[2,1,1,1,2],[1,2,1,1,2],[2,2,1,1,1],[1,1,2,1,2],[2,1,2,1,1],[1,2,2,1,1],[1,1,1,2,2],[2,1,1,2,1],[1,2,1,2,1],[1,1,3,3,1],[3,1,1,1,3],[1,3,1,1,3],[3,3,1,1,1],[1,1,3,1,3],[3,1,3,1,1],[1,3,3,1,1],[1,1,1,3,3],[3,1,1,3,1],[1,3,1,3,1]],e.MAX_AVG_VARIANCE=.38,e.MAX_INDIVIDUAL_VARIANCE=.5,e.DEFAULT_ALLOWED_LENGTHS=[6,8,10,12,14],e.START_PATTERN=[1,1,1,1],e.END_PATTERN_REVERSED=[[1,1,2],[1,1,3]],e}(f.default);e.default=h},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),a=r(8),u=r(3),f=r(9),s=r(0),l=r(4),d=r(11),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.findStartPattern=function(t){for(var r=t.getSize(),n=t.getNextSet(0),o=0,i=[0,0,0,0,0,0],a=n,u=!1,l=n;l<r;l++)if(t.get(l)!==u)i[o]++;else{if(5===o){for(var d=e.MAX_AVG_VARIANCE,c=-1,h=e.CODE_START_A;h<=e.CODE_START_C;h++){var p=f.default.patternMatchVariance(i,e.CODE_PATTERNS[h],e.MAX_INDIVIDUAL_VARIANCE);p<d&&(d=p,c=h)}if(c>=0&&t.isRange(Math.max(0,a-(l-a)/2),a,!1))return[a,l,c];a+=i[0]+i[1],i.splice(0,2),i[o-1]=0,i[o]=0,o--}else o++;i[o]=1,u=!u}throw new s.default},e.decodeCode=function(t,r,n){f.default.recordPattern(t,n,r);for(var o=e.MAX_AVG_VARIANCE,i=-1,a=0;a<e.CODE_PATTERNS.length;a++){var u=e.CODE_PATTERNS[a],l=this.patternMatchVariance(r,u,e.MAX_INDIVIDUAL_VARIANCE);l<o&&(o=l,i=a)}if(i>=0)return i;throw new s.default},e.prototype.decodeRow=function(t,r,n){var o,f=n&&!0===n.get(7),c=e.findStartPattern(r),h=c[2],p=0,w=new Uint8Array(20);switch(w[p++]=h,h){case e.CODE_START_A:o=e.CODE_CODE_A;break;case e.CODE_START_B:o=e.CODE_CODE_B;break;case e.CODE_START_C:o=e.CODE_CODE_C;break;default:throw new l.default}for(var g=!1,v=!1,_="",y=c[0],m=c[1],E=[0,0,0,0,0,0],C=0,A=0,S=h,I=0,O=!0,M=!1,b=!1;!g;){var T=v;switch(v=!1,C=A,A=e.decodeCode(r,E,m),w[p++]=A,A!==e.CODE_STOP&&(O=!0),A!==e.CODE_STOP&&(S+=++I*A),y=m,m+=E.reduce(function(t,e){return t+e},0),A){case e.CODE_START_A:case e.CODE_START_B:case e.CODE_START_C:throw new l.default}switch(o){case e.CODE_CODE_A:if(A<64)_+=b===M?String.fromCharCode(" ".charCodeAt(0)+A):String.fromCharCode(" ".charCodeAt(0)+A+128),b=!1;else if(A<96)_+=b===M?String.fromCharCode(A-64):String.fromCharCode(A+64),b=!1;else switch(A!==e.CODE_STOP&&(O=!1),A){case e.CODE_FNC_1:f&&(0===_.length?_+="]C1":_+=String.fromCharCode(29));break;case e.CODE_FNC_2:case e.CODE_FNC_3:break;case e.CODE_FNC_4_A:!M&&b?(M=!0,b=!1):M&&b?(M=!1,b=!1):b=!0;break;case e.CODE_SHIFT:v=!0,o=e.CODE_CODE_B;break;case e.CODE_CODE_B:o=e.CODE_CODE_B;break;case e.CODE_CODE_C:o=e.CODE_CODE_C;break;case e.CODE_STOP:g=!0}break;case e.CODE_CODE_B:if(A<96)_+=b===M?String.fromCharCode(" ".charCodeAt(0)+A):String.fromCharCode(" ".charCodeAt(0)+A+128),b=!1;else switch(A!==e.CODE_STOP&&(O=!1),A){case e.CODE_FNC_1:f&&(0===_.length?_+="]C1":_+=String.fromCharCode(29));break;case e.CODE_FNC_2:case e.CODE_FNC_3:break;case e.CODE_FNC_4_B:!M&&b?(M=!0,b=!1):M&&b?(M=!1,b=!1):b=!0;break;case e.CODE_SHIFT:v=!0,o=e.CODE_CODE_A;break;case e.CODE_CODE_A:o=e.CODE_CODE_A;break;case e.CODE_CODE_C:o=e.CODE_CODE_C;break;case e.CODE_STOP:g=!0}break;case e.CODE_CODE_C:if(A<100)A<10&&(_+="0"),_+=A;else switch(A!==e.CODE_STOP&&(O=!1),A){case e.CODE_FNC_1:f&&(0===_.length?_+="]C1":_+=String.fromCharCode(29));break;case e.CODE_CODE_A:o=e.CODE_CODE_A;break;case e.CODE_CODE_B:o=e.CODE_CODE_B;break;case e.CODE_STOP:g=!0}}T&&(o=o===e.CODE_CODE_A?e.CODE_CODE_B:e.CODE_CODE_A)}var N=m-y;if(m=r.getNextUnset(m),!r.isRange(m,Math.min(r.getSize(),m+(m-y)/2),!1))throw new s.default;if((S-=I*C)%103!==C)throw new d.default;var R=_.length;if(0===R)throw new s.default;R>0&&O&&(_=o===e.CODE_CODE_C?_.substring(0,R-2):_.substring(0,R-1));for(var P=(c[1]+c[0])/2,D=y+N/2,B=w.length,k=new Uint8Array(B),L=0;L<B;L++)k[L]=w[L];var F=[new u.default(P,t),new u.default(D,t)];return new a.default(_,k,0,F,i.default.CODE_128,(new Date).getTime())},e.CODE_PATTERNS=[[2,1,2,2,2,2],[2,2,2,1,2,2],[2,2,2,2,2,1],[1,2,1,2,2,3],[1,2,1,3,2,2],[1,3,1,2,2,2],[1,2,2,2,1,3],[1,2,2,3,1,2],[1,3,2,2,1,2],[2,2,1,2,1,3],[2,2,1,3,1,2],[2,3,1,2,1,2],[1,1,2,2,3,2],[1,2,2,1,3,2],[1,2,2,2,3,1],[1,1,3,2,2,2],[1,2,3,1,2,2],[1,2,3,2,2,1],[2,2,3,2,1,1],[2,2,1,1,3,2],[2,2,1,2,3,1],[2,1,3,2,1,2],[2,2,3,1,1,2],[3,1,2,1,3,1],[3,1,1,2,2,2],[3,2,1,1,2,2],[3,2,1,2,2,1],[3,1,2,2,1,2],[3,2,2,1,1,2],[3,2,2,2,1,1],[2,1,2,1,2,3],[2,1,2,3,2,1],[2,3,2,1,2,1],[1,1,1,3,2,3],[1,3,1,1,2,3],[1,3,1,3,2,1],[1,1,2,3,1,3],[1,3,2,1,1,3],[1,3,2,3,1,1],[2,1,1,3,1,3],[2,3,1,1,1,3],[2,3,1,3,1,1],[1,1,2,1,3,3],[1,1,2,3,3,1],[1,3,2,1,3,1],[1,1,3,1,2,3],[1,1,3,3,2,1],[1,3,3,1,2,1],[3,1,3,1,2,1],[2,1,1,3,3,1],[2,3,1,1,3,1],[2,1,3,1,1,3],[2,1,3,3,1,1],[2,1,3,1,3,1],[3,1,1,1,2,3],[3,1,1,3,2,1],[3,3,1,1,2,1],[3,1,2,1,1,3],[3,1,2,3,1,1],[3,3,2,1,1,1],[3,1,4,1,1,1],[2,2,1,4,1,1],[4,3,1,1,1,1],[1,1,1,2,2,4],[1,1,1,4,2,2],[1,2,1,1,2,4],[1,2,1,4,2,1],[1,4,1,1,2,2],[1,4,1,2,2,1],[1,1,2,2,1,4],[1,1,2,4,1,2],[1,2,2,1,1,4],[1,2,2,4,1,1],[1,4,2,1,1,2],[1,4,2,2,1,1],[2,4,1,2,1,1],[2,2,1,1,1,4],[4,1,3,1,1,1],[2,4,1,1,1,2],[1,3,4,1,1,1],[1,1,1,2,4,2],[1,2,1,1,4,2],[1,2,1,2,4,1],[1,1,4,2,1,2],[1,2,4,1,1,2],[1,2,4,2,1,1],[4,1,1,2,1,2],[4,2,1,1,1,2],[4,2,1,2,1,1],[2,1,2,1,4,1],[2,1,4,1,2,1],[4,1,2,1,2,1],[1,1,1,1,4,3],[1,1,1,3,4,1],[1,3,1,1,4,1],[1,1,4,1,1,3],[1,1,4,3,1,1],[4,1,1,1,1,3],[4,1,1,3,1,1],[1,1,3,1,4,1],[1,1,4,1,3,1],[3,1,1,1,4,1],[4,1,1,1,3,1],[2,1,1,4,1,2],[2,1,1,2,1,4],[2,1,1,2,3,2],[2,3,3,1,1,1,2]],e.MAX_AVG_VARIANCE=.25,e.MAX_INDIVIDUAL_VARIANCE=.7,e.CODE_SHIFT=98,e.CODE_CODE_C=99,e.CODE_CODE_B=100,e.CODE_CODE_A=101,e.CODE_FNC_1=102,e.CODE_FNC_2=97,e.CODE_FNC_3=96,e.CODE_FNC_4_A=101,e.CODE_FNC_4_B=100,e.CODE_START_A=103,e.CODE_START_B=104,e.CODE_START_C=105,e.CODE_STOP=106,e}(f.default);e.default=c},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),a=r(11),u=r(4),f=r(0),s=r(9),l=r(8),d=r(3),c=function(t){function e(e,r){void 0===e&&(e=!1),void 0===r&&(r=!1);var n=t.call(this)||this;return n.usingCheckDigit=e,n.extendedMode=r,n.decodeRowResult="",n.counters=new Array(9),n}return o(e,t),e.prototype.decodeRow=function(t,r,n){var o=this.counters;o.fill(0),this.decodeRowResult="";var u,s,c,h=e.findAsteriskPattern(r,o),p=r.getNextSet(h[1]),w=r.getSize();do{e.recordPattern(r,p,o);var g=e.toNarrowWidePattern(o);if(g<0)throw new f.default;u=e.patternToChar(g),this.decodeRowResult+=u,s=p;for(var v=0,_=o;v<_.length;v++)p+=_[v];p=r.getNextSet(p)}while("*"!==u);this.decodeRowResult=this.decodeRowResult.substring(0,this.decodeRowResult.length-1);for(var y=0,m=0,E=o;m<E.length;m++)y+=E[m];if(p!==w&&2*(p-s-y)<y)throw new f.default;if(this.usingCheckDigit){for(var C=this.decodeRowResult.length-1,A=0,S=0;S<C;S++)A+=e.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(S));if(this.decodeRowResult.charAt(C)!==e.ALPHABET_STRING.charAt(A%43))throw new a.default;this.decodeRowResult=this.decodeRowResult.substring(0,C)}if(0===this.decodeRowResult.length)throw new f.default;c=this.extendedMode?e.decodeExtended(this.decodeRowResult):this.decodeRowResult;var I=(h[1]+h[0])/2,O=s+y/2;return new l.default(c,null,0,[new d.default(I,t),new d.default(O,t)],i.default.CODE_39,(new Date).getTime())},e.findAsteriskPattern=function(t,r){for(var n=t.getSize(),o=t.getNextSet(0),i=0,a=o,u=!1,s=r.length,l=o;l<n;l++)if(t.get(l)!==u)r[i]++;else{if(i===s-1){if(this.toNarrowWidePattern(r)===e.ASTERISK_ENCODING&&t.isRange(Math.max(0,a-Math.floor((l-a)/2)),a,!1))return[a,l];a+=r[0]+r[1],r.copyWithin(0,2,2+i-1),r[i-1]=0,r[i]=0,i--}else i++;r[i]=1,u=!u}throw new f.default},e.toNarrowWidePattern=function(t){var e,r=t.length,n=0;do{for(var o=2147483647,i=0,a=t;i<a.length;i++)(l=a[i])<o&&l>n&&(o=l);n=o,e=0;for(var u=0,f=0,s=0;s<r;s++)(l=t[s])>n&&(f|=1<<r-1-s,e++,u+=l);if(3===e){for(s=0;s<r&&e>0;s++){var l;if((l=t[s])>n&&(e--,2*l>=u))return-1}return f}}while(e>3);return-1},e.patternToChar=function(t){for(var r=0;r<e.CHARACTER_ENCODINGS.length;r++)if(e.CHARACTER_ENCODINGS[r]===t)return e.ALPHABET_STRING.charAt(r);if(t===e.ASTERISK_ENCODING)return"*";throw new f.default},e.decodeExtended=function(t){for(var e=t.length,r="",n=0;n<e;n++){var o=t.charAt(n);if("+"===o||"$"===o||"%"===o||"/"===o){var i=t.charAt(n+1),a="\0";switch(o){case"+":if(!(i>="A"&&i<="Z"))throw new u.default;a=String.fromCharCode(i.charCodeAt(0)+32);break;case"$":if(!(i>="A"&&i<="Z"))throw new u.default;a=String.fromCharCode(i.charCodeAt(0)-64);break;case"%":if(i>="A"&&i<="E")a=String.fromCharCode(i.charCodeAt(0)-38);else if(i>="F"&&i<="J")a=String.fromCharCode(i.charCodeAt(0)-11);else if(i>="K"&&i<="O")a=String.fromCharCode(i.charCodeAt(0)+16);else if(i>="P"&&i<="T")a=String.fromCharCode(i.charCodeAt(0)+43);else if("U"===i)a="\0";else if("V"===i)a="@";else if("W"===i)a="`";else{if("X"!==i&&"Y"!==i&&"Z"!==i)throw new u.default;a=""}break;case"/":if(i>="A"&&i<="O")a=String.fromCharCode(i.charCodeAt(0)-32);else{if("Z"!==i)throw new u.default;a=":"}}r+=a,n++}else r+=o}return r},e.ALPHABET_STRING="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%",e.CHARACTER_ENCODINGS=[52,289,97,352,49,304,112,37,292,100,265,73,328,25,280,88,13,268,76,28,259,67,322,19,274,82,7,262,70,22,385,193,448,145,400,208,133,388,196,168,162,138,42],e.ASTERISK_ENCODING=148,e}(s.default);e.default=c},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),a=r(44),u=r(43),f=r(42),s=r(75),l=r(0),d=function(t){function e(e){var r=t.call(this)||this;r.readers=[];var n=e?e.get(2):null,o=e&&void 0!==e.get(6);return n&&(n.includes(i.default.EAN_13)&&r.readers.push(new s.default(e)),n.includes(i.default.CODE_39)&&r.readers.push(new a.default(o)),n.includes(i.default.CODE_128)&&r.readers.push(new u.default),n.includes(i.default.ITF)&&r.readers.push(new f.default)),0===r.readers.length&&(r.readers.push(new a.default),r.readers.push(new s.default(e)),r.readers.push(new u.default),r.readers.push(new f.default)),r}return o(e,t),e.prototype.decodeRow=function(t,e,r){for(var n=0;n<this.readers.length;n++)try{return this.readers[n].decodeRow(t,e,r)}catch(t){}throw new l.default},e.prototype.reset=function(){this.readers.forEach(function(t){return t.reset()})},e}(r(9).default);e.default=d},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(12),o=function(){function t(){this.maskPattern=-1}return t.prototype.getMode=function(){return this.mode},t.prototype.getECLevel=function(){return this.ecLevel},t.prototype.getVersion=function(){return this.version},t.prototype.getMaskPattern=function(){return this.maskPattern},t.prototype.getMatrix=function(){return this.matrix},t.prototype.toString=function(){var t=new n.default;return t.append("<<\n"),t.append(" mode: "),t.append(this.mode?this.mode.toString():"null"),t.append("\n ecLevel: "),t.append(this.ecLevel?this.ecLevel.toString():"null"),t.append("\n version: "),t.append(this.version?this.version.toString():"null"),t.append("\n maskPattern: "),t.append(this.maskPattern.toString()),this.matrix?(t.append("\n matrix:\n"),t.append(this.matrix.toString())):t.append("\n matrix: null\n"),t.append(">>\n"),t.toString()},t.prototype.setMode=function(t){this.mode=t},t.prototype.setECLevel=function(t){this.ecLevel=t},t.prototype.setVersion=function(t){this.version=t},t.prototype.setMaskPattern=function(t){this.maskPattern=t},t.prototype.setMatrix=function(t){this.matrix=t},t.isValidMaskPattern=function(e){return e>=0&&e<t.NUM_MASK_PATTERNS},t.NUM_MASK_PATTERNS=8,t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=function(){function t(){}return t.applyMaskPenaltyRule1=function(e){return t.applyMaskPenaltyRule1Internal(e,!0)+t.applyMaskPenaltyRule1Internal(e,!1)},t.applyMaskPenaltyRule2=function(e){for(var r=0,n=e.getArray(),o=e.getWidth(),i=e.getHeight(),a=0;a<i-1;a++)for(var u=n[a],f=0;f<o-1;f++){var s=u[f];s===u[f+1]&&s===n[a+1][f]&&s===n[a+1][f+1]&&r++}return t.N2*r},t.applyMaskPenaltyRule3=function(e){for(var r=0,n=e.getArray(),o=e.getWidth(),i=e.getHeight(),a=0;a<i;a++)for(var u=0;u<o;u++){var f=n[a];u+6<o&&1===f[u]&&0===f[u+1]&&1===f[u+2]&&1===f[u+3]&&1===f[u+4]&&0===f[u+5]&&1===f[u+6]&&(t.isWhiteHorizontal(f,u-4,u)||t.isWhiteHorizontal(f,u+7,u+11))&&r++,a+6<i&&1===n[a][u]&&0===n[a+1][u]&&1===n[a+2][u]&&1===n[a+3][u]&&1===n[a+4][u]&&0===n[a+5][u]&&1===n[a+6][u]&&(t.isWhiteVertical(n,u,a-4,a)||t.isWhiteVertical(n,u,a+7,a+11))&&r++}return r*t.N3},t.isWhiteHorizontal=function(t,e,r){e=Math.max(e,0),r=Math.min(r,t.length);for(var n=e;n<r;n++)if(1===t[n])return!1;return!0},t.isWhiteVertical=function(t,e,r,n){r=Math.max(r,0),n=Math.min(n,t.length);for(var o=r;o<n;o++)if(1===t[o][e])return!1;return!0},t.applyMaskPenaltyRule4=function(e){for(var r=0,n=e.getArray(),o=e.getWidth(),i=e.getHeight(),a=0;a<i;a++)for(var u=n[a],f=0;f<o;f++)1===u[f]&&r++;var s=e.getHeight()*e.getWidth();return Math.floor(10*Math.abs(2*r-s)/s)*t.N4},t.getDataMaskBit=function(t,e,r){var o,i;switch(t){case 0:o=r+e&1;break;case 1:o=1&r;break;case 2:o=e%3;break;case 3:o=(r+e)%3;break;case 4:o=Math.floor(r/2)+Math.floor(e/3)&1;break;case 5:o=(1&(i=r*e))+i%3;break;case 6:o=(1&(i=r*e))+i%3&1;break;case 7:o=(i=r*e)%3+(r+e&1)&1;break;default:throw new n.default("Invalid mask pattern: "+t)}return 0===o},t.applyMaskPenaltyRule1Internal=function(e,r){for(var n=0,o=r?e.getHeight():e.getWidth(),i=r?e.getWidth():e.getHeight(),a=e.getArray(),u=0;u<o;u++){for(var f=0,s=-1,l=0;l<i;l++){var d=r?a[u][l]:a[l][u];d===s?f++:(f>=5&&(n+=t.N1+(f-5)),f=1,s=d)}f>=5&&(n+=t.N1+(f-5))}return n},t.N1=3,t.N2=3,t.N3=40,t.N4=10,t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(21),o=r(7),i=r(1),a=function(){function t(t){this.field=t,this.cachedGenerators=[],this.cachedGenerators.push(new n.default(t,Int32Array.from([1])))}return t.prototype.buildGenerator=function(t){var e=this.cachedGenerators;if(t>=e.length)for(var r=e[e.length-1],o=this.field,i=e.length;i<=t;i++){var a=r.multiply(new n.default(o,Int32Array.from([1,o.exp(i-1+o.getGeneratorBase())])));e.push(a),r=a}return e[t]},t.prototype.encode=function(t,e){if(0===e)throw new i.default("No error correction bytes");var r=t.length-e;if(r<=0)throw new i.default("No data bytes provided");var a=this.buildGenerator(e),u=new Int32Array(r);o.default.arraycopy(t,0,u,0,r);for(var f=new n.default(this.field,u),s=(f=f.multiplyByMonomial(e,1)).divide(a)[1].getCoefficients(),l=e-s.length,d=0;d<l;d++)t[r+d]=0;o.default.arraycopy(s,0,t,r+l,s.length)},t}();e.default=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(25),o=r(14),i=r(15),a=r(13),u=r(48),f=r(54),s=r(33),l=r(47),d=r(79),c=r(46),h=r(78),p=r(29),w=r(77),g=r(24),v=function(){function t(){}return t.calculateMaskPenalty=function(t){return l.default.applyMaskPenaltyRule1(t)+l.default.applyMaskPenaltyRule2(t)+l.default.applyMaskPenaltyRule3(t)+l.default.applyMaskPenaltyRule4(t)},t.encode=function(e,r,a){void 0===a&&(a=null);var u=t.DEFAULT_BYTE_MODE_ENCODING,l=null!==a&&void 0!==a.get(n.default.CHARACTER_SET);l&&(u=a.get(n.default.CHARACTER_SET).toString());var p=this.chooseMode(e,u),w=new o.default;if(p===f.default.BYTE&&(l||t.DEFAULT_BYTE_MODE_ENCODING!==u)){var v=i.default.getCharacterSetECIByName(u);void 0!==v&&this.appendECI(v,w)}this.appendModeInfo(p,w);var _,y=new o.default;if(this.appendBytes(e,p,y,u),null!==a&&void 0!==a.get(n.default.QR_VERSION)){var m=Number.parseInt(a.get(n.default.QR_VERSION).toString(),10);_=s.default.getVersionForNumber(m);var E=this.calculateBitsNeeded(p,w,y,_);if(!this.willFit(E,_,r))throw new g.default("Data too big for requested version")}else _=this.recommendVersion(r,p,w,y);var C=new o.default;C.appendBitArray(w);var A=p===f.default.BYTE?y.getSizeInBytes():e.length;this.appendLengthInfo(A,_,p,C),C.appendBitArray(y);var S=_.getECBlocksForLevel(r),I=_.getTotalCodewords()-S.getTotalECCodewords();this.terminateBits(I,C);var O=this.interleaveWithECBytes(C,_.getTotalCodewords(),I,S.getNumBlocks()),M=new c.default;M.setECLevel(r),M.setMode(p),M.setVersion(_);var b=_.getDimensionForVersion(),T=new d.default(b,b),N=this.chooseMaskPattern(O,r,_,T);return M.setMaskPattern(N),h.default.buildMatrix(O,r,_,N,T),M.setMatrix(T),M},t.recommendVersion=function(t,e,r,n){var o=this.calculateBitsNeeded(e,r,n,s.default.getVersionForNumber(1)),i=this.chooseVersion(o,t),a=this.calculateBitsNeeded(e,r,n,i);return this.chooseVersion(a,t)},t.calculateBitsNeeded=function(t,e,r,n){return e.getSize()+t.getCharacterCountBits(n)+r.getSize()},t.getAlphanumericCode=function(e){return e<t.ALPHANUMERIC_TABLE.length?t.ALPHANUMERIC_TABLE[e]:-1},t.chooseMode=function(e,r){if(void 0===r&&(r=null),i.default.SJIS.getName()===r&&this.isOnlyDoubleByteKanji(e))return f.default.KANJI;for(var n=!1,o=!1,a=0,u=e.length;a<u;++a){var s=e.charAt(a);if(t.isDigit(s))n=!0;else{if(-1===this.getAlphanumericCode(s.charCodeAt(0)))return f.default.BYTE;o=!0}}return o?f.default.ALPHANUMERIC:n?f.default.NUMERIC:f.default.BYTE},t.isOnlyDoubleByteKanji=function(t){var e;try{e=p.default.encode(t,i.default.SJIS)}catch(t){return!1}var r=e.length;if(r%2!=0)return!1;for(var n=0;n<r;n+=2){var o=255&e[n];if((o<129||o>159)&&(o<224||o>235))return!1}return!0},t.chooseMaskPattern=function(t,e,r,n){for(var o=Number.MAX_SAFE_INTEGER,i=-1,a=0;a<c.default.NUM_MASK_PATTERNS;a++){h.default.buildMatrix(t,e,r,a,n);var u=this.calculateMaskPenalty(n);u<o&&(o=u,i=a)}return i},t.chooseVersion=function(e,r){for(var n=1;n<=40;n++){var o=s.default.getVersionForNumber(n);if(t.willFit(e,o,r))return o}throw new g.default("Data too big")},t.willFit=function(t,e,r){return e.getTotalCodewords()-e.getECBlocksForLevel(r).getTotalECCodewords()>=(t+7)/8},t.terminateBits=function(t,e){var r=8*t;if(e.getSize()>r)throw new g.default("data bits cannot fit in the QR Code"+e.getSize()+" > "+r);for(var n=0;n<4&&e.getSize()<r;++n)e.appendBit(!1);var o=7&e.getSize();if(o>0)for(n=o;n<8;n++)e.appendBit(!1);var i=t-e.getSizeInBytes();for(n=0;n<i;++n)e.appendBits(0==(1&n)?236:17,8);if(e.getSize()!==r)throw new g.default("Bits size does not equal capacity")},t.getNumDataBytesAndNumECBytesForBlockID=function(t,e,r,n,o,i){if(n>=r)throw new g.default("Block ID too large");var a=t%r,u=r-a,f=Math.floor(t/r),s=f+1,l=Math.floor(e/r),d=l+1,c=f-l,h=s-d;if(c!==h)throw new g.default("EC bytes mismatch");if(r!==u+a)throw new g.default("RS blocks mismatch");if(t!==(l+c)*u+(d+h)*a)throw new g.default("Total bytes mismatch");n<u?(o[0]=l,i[0]=c):(o[0]=d,i[0]=h)},t.interleaveWithECBytes=function(e,r,n,i){if(e.getSizeInBytes()!==n)throw new g.default("Number of bits and data bytes does not match");for(var a=0,u=0,f=0,s=new Array,l=0;l<i;++l){var d=new Int32Array(1),c=new Int32Array(1);t.getNumDataBytesAndNumECBytesForBlockID(r,n,i,l,d,c);var h=d[0],p=new Uint8Array(h);e.toBytes(8*a,p,0,h);var v=t.generateECBytes(p,c[0]);s.push(new w.default(p,v)),u=Math.max(u,h),f=Math.max(f,v.length),a+=d[0]}if(n!==a)throw new g.default("Data bytes does not match offset");var _=new o.default;for(l=0;l<u;++l)for(var y=0,m=s;y<m.length;y++)l<(p=m[y].getDataBytes()).length&&_.appendBits(p[l],8);for(l=0;l<f;++l)for(var E=0,C=s;E<C.length;E++)l<(v=C[E].getErrorCorrectionBytes()).length&&_.appendBits(v[l],8);if(r!==_.getSizeInBytes())throw new g.default("Interleaving error: "+r+" and "+_.getSizeInBytes()+" differ.");return _},t.generateECBytes=function(t,e){for(var r=t.length,n=new Int32Array(r+e),o=0;o<r;o++)n[o]=255&t[o];new u.default(a.default.QR_CODE_FIELD_256).encode(n,e);var i=new Uint8Array(e);for(o=0;o<e;o++)i[o]=n[r+o];return i},t.appendModeInfo=function(t,e){e.appendBits(t.getBits(),4)},t.appendLengthInfo=function(t,e,r,n){var o=r.getCharacterCountBits(e);if(t>=1<<o)throw new g.default(t+" is bigger than "+((1<<o)-1));n.appendBits(t,o)},t.appendBytes=function(e,r,n,o){switch(r){case f.default.NUMERIC:t.appendNumericBytes(e,n);break;case f.default.ALPHANUMERIC:t.appendAlphanumericBytes(e,n);break;case f.default.BYTE:t.append8BitBytes(e,n,o);break;case f.default.KANJI:t.appendKanjiBytes(e,n);break;default:throw new g.default("Invalid mode: "+r)}},t.getDigit=function(t){return t.charCodeAt(0)-48},t.isDigit=function(e){var r=t.getDigit(e);return r>=0&&r<=9},t.appendNumericBytes=function(e,r){for(var n=e.length,o=0;o<n;){var i=t.getDigit(e.charAt(o));if(o+2<n){var a=t.getDigit(e.charAt(o+1)),u=t.getDigit(e.charAt(o+2));r.appendBits(100*i+10*a+u,10),o+=3}else o+1<n?(a=t.getDigit(e.charAt(o+1)),r.appendBits(10*i+a,7),o+=2):(r.appendBits(i,4),o++)}},t.appendAlphanumericBytes=function(e,r){for(var n=e.length,o=0;o<n;){var i=t.getAlphanumericCode(e.charCodeAt(o));if(-1===i)throw new g.default;if(o+1<n){var a=t.getAlphanumericCode(e.charCodeAt(o+1));if(-1===a)throw new g.default;r.appendBits(45*i+a,11),o+=2}else r.appendBits(i,6),o++}},t.append8BitBytes=function(t,e,r){var n;try{n=p.default.encode(t,r)}catch(t){throw new g.default(t)}for(var o=0,i=n.length;o!==i;o++){var a=n[o];e.appendBits(a,8)}},t.appendKanjiBytes=function(t,e){var r;try{r=p.default.encode(t,i.default.SJIS)}catch(t){throw new g.default(t)}for(var n=r.length,o=0;o<n;o+=2){var a=(255&r[o])<<8&4294967295|255&r[o+1],u=-1;if(a>=33088&&a<=40956?u=a-33088:a>=57408&&a<=60351&&(u=a-49472),-1===u)throw new g.default("Invalid byte sequence");var f=192*(u>>8)+(255&u);e.appendBits(f,13)}},t.appendECI=function(t,e){e.appendBits(f.default.ECI.getBits(),4),e.appendBits(t.getValue(),8)},t.ALPHANUMERIC_TABLE=Int32Array.from([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,36,-1,-1,-1,37,38,-1,-1,-1,-1,39,40,-1,41,42,43,0,1,2,3,4,5,6,7,8,9,44,-1,-1,-1,-1,-1,-1,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,-1,-1,-1,-1,-1]),t.DEFAULT_BYTE_MODE_ENCODING=i.default.UTF8.getName(),t}();e.default=v},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(3),o=r(17),i=r(0),a=function(){function t(e,r,n,o){this.image=e,this.height=e.getHeight(),this.width=e.getWidth(),void 0!==r&&null!==r||(r=t.INIT_SIZE),void 0!==n&&null!==n||(n=e.getWidth()/2|0),void 0!==o&&null!==o||(o=e.getHeight()/2|0);var a=r/2|0;if(this.leftInit=n-a,this.rightInit=n+a,this.upInit=o-a,this.downInit=o+a,this.upInit<0||this.leftInit<0||this.downInit>=this.height||this.rightInit>=this.width)throw new i.default}return t.prototype.detect=function(){for(var t=this.leftInit,e=this.rightInit,r=this.upInit,n=this.downInit,o=!1,a=!0,u=!1,f=!1,s=!1,l=!1,d=!1,c=this.width,h=this.height;a;){a=!1;for(var p=!0;(p||!f)&&e<c;)(p=this.containsBlackPoint(r,n,e,!1))?(e++,a=!0,f=!0):f||e++;if(e>=c){o=!0;break}for(var w=!0;(w||!s)&&n<h;)(w=this.containsBlackPoint(t,e,n,!0))?(n++,a=!0,s=!0):s||n++;if(n>=h){o=!0;break}for(var g=!0;(g||!l)&&t>=0;)(g=this.containsBlackPoint(r,n,t,!1))?(t--,a=!0,l=!0):l||t--;if(t<0){o=!0;break}for(var v=!0;(v||!d)&&r>=0;)(v=this.containsBlackPoint(t,e,r,!0))?(r--,a=!0,d=!0):d||r--;if(r<0){o=!0;break}a&&(u=!0)}if(!o&&u){for(var _=e-t,y=null,m=1;null===y&&m<_;m++)y=this.getBlackPointOnSegment(t,n-m,t+m,n);if(null==y)throw new i.default;var E=null;for(m=1;null===E&&m<_;m++)E=this.getBlackPointOnSegment(t,r+m,t+m,r);if(null==E)throw new i.default;var C=null;for(m=1;null===C&&m<_;m++)C=this.getBlackPointOnSegment(e,r+m,e-m,r);if(null==C)throw new i.default;var A=null;for(m=1;null===A&&m<_;m++)A=this.getBlackPointOnSegment(e,n-m,e-m,n);if(null==A)throw new i.default;return this.centerEdges(A,y,C,E)}throw new i.default},t.prototype.getBlackPointOnSegment=function(t,e,r,i){for(var a=o.default.round(o.default.distance(t,e,r,i)),u=(r-t)/a,f=(i-e)/a,s=this.image,l=0;l<a;l++){var d=o.default.round(t+l*u),c=o.default.round(e+l*f);if(s.get(d,c))return new n.default(d,c)}return null},t.prototype.centerEdges=function(e,r,o,i){var a=e.getX(),u=e.getY(),f=r.getX(),s=r.getY(),l=o.getX(),d=o.getY(),c=i.getX(),h=i.getY(),p=t.CORR;return a<this.width/2?[new n.default(c-p,h+p),new n.default(f+p,s+p),new n.default(l-p,d-p),new n.default(a+p,u-p)]:[new n.default(c+p,h+p),new n.default(f+p,s-p),new n.default(l-p,d+p),new n.default(a-p,u-p)]},t.prototype.containsBlackPoint=function(t,e,r,n){var o=this.image;if(n){for(var i=t;i<=e;i++)if(o.get(i,r))return!0}else for(var a=t;a<=e;a++)if(o.get(r,a))return!0;return!1},t.INIT_SIZE=10,t.CORR=1,t}();e.default=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(86),o=r(8),i=r(2),a=r(10),u=r(6),f=r(81),s=r(7),l=r(0),d=function(){function t(){this.decoder=new n.default}return t.prototype.decode=function(e,r){var n,u;if(void 0===r&&(r=null),null!=r&&r.has(1)){var l=t.extractPureBits(e.getBlackMatrix());n=this.decoder.decode(l),u=t.NO_POINTS}else{var d=new f.default(e.getBlackMatrix()).detect();n=this.decoder.decode(d.getBits()),u=d.getPoints()}var c=n.getRawBytes(),h=new o.default(n.getText(),c,8*c.length,u,i.default.DATA_MATRIX,s.default.currentTimeMillis()),p=n.getByteSegments();null!=p&&h.putMetadata(a.default.BYTE_SEGMENTS,p);var w=n.getECLevel();return null!=w&&h.putMetadata(a.default.ERROR_CORRECTION_LEVEL,w),h},t.prototype.reset=function(){},t.extractPureBits=function(t){var e=t.getTopLeftOnBit(),r=t.getBottomRightOnBit();if(null==e||null==r)throw new l.default;var n=this.moduleSize(e,t),o=e[1],i=r[1],a=e[0],f=(r[0]-a+1)/n,s=(i-o+1)/n;if(f<=0||s<=0)throw new l.default;var d=n/2;o+=d,a+=d;for(var c=new u.default(f,s),h=0;h<s;h++)for(var p=o+h*n,w=0;w<f;w++)t.get(a+w*n,p)&&c.set(w,h);return c},t.moduleSize=function(t,e){for(var r=e.getWidth(),n=t[0],o=t[1];n<r&&e.get(n,o);)n++;if(n===r)throw new l.default;var i=n-t[0];if(0===i)throw new l.default;return i},t.NO_POINTS=[],t}();e.default=d},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),o=function(){function t(){}return t.checkAndNudgePoints=function(t,e){for(var r=t.getWidth(),o=t.getHeight(),i=!0,a=0;a<e.length&&i;a+=2){var u=Math.floor(e[a]),f=Math.floor(e[a+1]);if(u<-1||u>r||f<-1||f>o)throw new n.default;i=!1,-1===u?(e[a]=0,i=!0):u===r&&(e[a]=r-1,i=!0),-1===f?(e[a+1]=0,i=!0):f===o&&(e[a+1]=o-1,i=!0)}for(i=!0,a=e.length-2;a>=0&&i;a-=2){if(u=Math.floor(e[a]),f=Math.floor(e[a+1]),u<-1||u>r||f<-1||f>o)throw new n.default;i=!1,-1===u?(e[a]=0,i=!0):u===r&&(e[a]=r-1,i=!0),-1===f?(e[a+1]=0,i=!0):f===o&&(e[a+1]=o-1,i=!0)}},t}();e.default=o},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(52),a=r(6),u=r(26),f=r(0),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.sampleGrid=function(t,e,r,n,o,i,a,f,s,l,d,c,h,p,w,g,v,_,y){var m=u.default.quadrilateralToQuadrilateral(n,o,i,a,f,s,l,d,c,h,p,w,g,v,_,y);return this.sampleGridWithTransform(t,e,r,m)},e.prototype.sampleGridWithTransform=function(t,e,r,n){if(e<=0||r<=0)throw new f.default;for(var o=new a.default(e,r),u=new Float32Array(2*e),s=0;s<r;s++){for(var l=u.length,d=s+.5,c=0;c<l;c+=2)u[c]=c/2+.5,u[c+1]=d;n.transformPoints(u),i.default.checkAndNudgePoints(t,u);try{for(c=0;c<l;c+=2)t.get(Math.floor(u[c]),Math.floor(u[c+1]))&&o.set(c/2,s)}catch(t){throw new f.default}}return o},e}(i.default);e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1);!function(t){t[t.TERMINATOR=0]="TERMINATOR",t[t.NUMERIC=1]="NUMERIC",t[t.ALPHANUMERIC=2]="ALPHANUMERIC",t[t.STRUCTURED_APPEND=3]="STRUCTURED_APPEND",t[t.BYTE=4]="BYTE",t[t.ECI=5]="ECI",t[t.KANJI=6]="KANJI",t[t.FNC1_FIRST_POSITION=7]="FNC1_FIRST_POSITION",t[t.FNC1_SECOND_POSITION=8]="FNC1_SECOND_POSITION",t[t.HANZI=9]="HANZI"}(e.ModeValues||(e.ModeValues={}));var o=function(){function t(e,r,n,o){this.value=e,this.stringValue=r,this.characterCountBitsForVersions=n,this.bits=o,t.FOR_BITS.set(o,this),t.FOR_VALUE.set(e,this)}return t.forBits=function(e){var r=t.FOR_BITS.get(e);if(void 0===r)throw new n.default;return r},t.prototype.getCharacterCountBits=function(t){var e,r=t.getVersionNumber();return e=r<=9?0:r<=26?1:2,this.characterCountBitsForVersions[e]},t.prototype.getValue=function(){return this.value},t.prototype.getBits=function(){return this.bits},t.prototype.equals=function(e){if(!(e instanceof t))return!1;var r=e;return this.value===r.value},t.prototype.toString=function(){return this.stringValue},t.FOR_BITS=new Map,t.FOR_VALUE=new Map,t.TERMINATOR=new t(0,"TERMINATOR",Int32Array.from([0,0,0]),0),t.NUMERIC=new t(1,"NUMERIC",Int32Array.from([10,12,14]),1),t.ALPHANUMERIC=new t(2,"ALPHANUMERIC",Int32Array.from([9,11,13]),2),t.STRUCTURED_APPEND=new t(3,"STRUCTURED_APPEND",Int32Array.from([0,0,0]),3),t.BYTE=new t(4,"BYTE",Int32Array.from([8,16,16]),4),t.ECI=new t(5,"ECI",Int32Array.from([0,0,0]),7),t.KANJI=new t(6,"KANJI",Int32Array.from([8,10,12]),8),t.FNC1_FIRST_POSITION=new t(7,"FNC1_FIRST_POSITION",Int32Array.from([0,0,0]),5),t.FNC1_SECOND_POSITION=new t(8,"FNC1_SECOND_POSITION",Int32Array.from([0,0,0]),9),t.HANZI=new t(9,"HANZI",Int32Array.from([8,10,12]),13),t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(15),o=function(){function t(){}return t.prototype.StringUtils=function(){},t.guessEncoding=function(e,r){if(null!==r&&void 0!==r&&void 0!==r.get(4))return r.get(4).toString();for(var n=e.length,o=!0,i=!0,a=!0,u=0,f=0,s=0,l=0,d=0,c=0,h=0,p=0,w=0,g=0,v=0,_=e.length>3&&239===e[0]&&187===e[1]&&191===e[2],y=0;y<n&&(o||i||a);y++){var m=255&e[y];a&&(u>0?0==(128&m)?a=!1:u--:0!=(128&m)&&(0==(64&m)?a=!1:(u++,0==(32&m)?f++:(u++,0==(16&m)?s++:(u++,0==(8&m)?l++:a=!1))))),o&&(m>127&&m<160?o=!1:m>159&&(m<192||215===m||247===m)&&v++),i&&(d>0?m<64||127===m||m>252?i=!1:d--:128===m||160===m||m>239?i=!1:m>160&&m<224?(c++,p=0,++h>w&&(w=h)):m>127?(d++,h=0,++p>g&&(g=p)):(h=0,p=0))}return a&&u>0&&(a=!1),i&&d>0&&(i=!1),a&&(_||f+s+l>0)?t.UTF8:i&&(t.ASSUME_SHIFT_JIS||w>=3||g>=3)?t.SHIFT_JIS:o&&i?2===w&&2===c||10*v>=n?t.SHIFT_JIS:t.ISO88591:o?t.ISO88591:i?t.SHIFT_JIS:a?t.UTF8:t.PLATFORM_DEFAULT_ENCODING},t.SHIFT_JIS=n.default.SJIS.getName(),t.GB2312="GB2312",t.ISO88591=n.default.ISO8859_1.getName(),t.EUC_JP="EUC_JP",t.UTF8=n.default.UTF8.getName(),t.PLATFORM_DEFAULT_ENCODING=t.UTF8,t.ASSUME_SHIFT_JIS=!1,t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.mirrored=t}return t.prototype.isMirrored=function(){return this.mirrored},t.prototype.applyMirroredCorrection=function(t){if(this.mirrored&&null!==t&&!(t.length<3)){var e=t[0];t[0]=t[2],t[2]=e}},t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(32),o=r(22),i=function(){function t(t){this.errorCorrectionLevel=n.default.forBits(t>>3&3),this.dataMask=7&t}return t.numBitsDiffering=function(t,e){return o.default.bitCount(t^e)},t.decodeFormatInformation=function(e,r){var n=t.doDecodeFormatInformation(e,r);return null!==n?n:t.doDecodeFormatInformation(e^t.FORMAT_INFO_MASK_QR,r^t.FORMAT_INFO_MASK_QR)},t.doDecodeFormatInformation=function(e,r){for(var n=Number.MAX_SAFE_INTEGER,o=0,i=0,a=t.FORMAT_INFO_DECODE_LOOKUP;i<a.length;i++){var u=a[i],f=u[0];if(f===e||f===r)return new t(u[1]);var s=t.numBitsDiffering(e,f);s<n&&(o=u[1],n=s),e!==r&&(s=t.numBitsDiffering(r,f))<n&&(o=u[1],n=s)}return n<=3?new t(o):null},t.prototype.getErrorCorrectionLevel=function(){return this.errorCorrectionLevel},t.prototype.getDataMask=function(){return this.dataMask},t.prototype.hashCode=function(){return this.errorCorrectionLevel.getBits()<<3|this.dataMask},t.prototype.equals=function(e){if(!(e instanceof t))return!1;var r=e;return this.errorCorrectionLevel===r.errorCorrectionLevel&&this.dataMask===r.dataMask},t.FORMAT_INFO_MASK_QR=21522,t.FORMAT_INFO_DECODE_LOOKUP=[Int32Array.from([21522,0]),Int32Array.from([20773,1]),Int32Array.from([24188,2]),Int32Array.from([23371,3]),Int32Array.from([17913,4]),Int32Array.from([16590,5]),Int32Array.from([20375,6]),Int32Array.from([19104,7]),Int32Array.from([30660,8]),Int32Array.from([29427,9]),Int32Array.from([32170,10]),Int32Array.from([30877,11]),Int32Array.from([26159,12]),Int32Array.from([25368,13]),Int32Array.from([27713,14]),Int32Array.from([26998,15]),Int32Array.from([5769,16]),Int32Array.from([5054,17]),Int32Array.from([7399,18]),Int32Array.from([6608,19]),Int32Array.from([1890,20]),Int32Array.from([597,21]),Int32Array.from([3340,22]),Int32Array.from([2107,23]),Int32Array.from([13663,24]),Int32Array.from([12392,25]),Int32Array.from([16177,26]),Int32Array.from([14854,27]),Int32Array.from([9396,28]),Int32Array.from([8579,29]),Int32Array.from([11994,30]),Int32Array.from([11245,31])],t}();e.default=i},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(r(5).default);e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.source=t}return t.prototype.getLuminanceSource=function(){return this.source},t.prototype.getWidth=function(){return this.source.getWidth()},t.prototype.getHeight=function(){return this.source.getHeight()},t}();e.default=n},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(60),a=r(14),u=r(6),f=r(0),s=function(t){function e(r){var n=t.call(this,r)||this;return n.luminances=e.EMPTY,n.buckets=new Int32Array(e.LUMINANCE_BUCKETS),n}return o(e,t),e.prototype.getBlackRow=function(t,r){var n=this.getLuminanceSource(),o=n.getWidth();void 0===r||null===r||r.getSize()<o?r=new a.default(o):r.clear(),this.initArrays(o);for(var i=n.getRow(t,this.luminances),u=this.buckets,f=0;f<o;f++)u[(255&i[f])>>e.LUMINANCE_SHIFT]++;var s=e.estimateBlackPoint(u);if(o<3)for(f=0;f<o;f++)(255&i[f])<s&&r.set(f);else{var l=255&i[0],d=255&i[1];for(f=1;f<o-1;f++){var c=255&i[f+1];(4*d-l-c)/2<s&&r.set(f),l=d,d=c}}return r},e.prototype.getBlackMatrix=function(){var t=this.getLuminanceSource(),r=t.getWidth(),n=t.getHeight(),o=new u.default(r,n);this.initArrays(r);for(var i=this.buckets,a=1;a<5;a++)for(var f=n*a/5,s=t.getRow(f,this.luminances),l=Math.floor(4*r/5),d=Math.floor(r/5);d<l;d++)i[(255&s[d])>>e.LUMINANCE_SHIFT]++;var c=e.estimateBlackPoint(i),h=t.getMatrix();for(a=0;a<n;a++){var p=a*r;for(d=0;d<r;d++)(255&h[p+d])<c&&o.set(d,a)}return o},e.prototype.createBinarizer=function(t){return new e(t)},e.prototype.initArrays=function(t){this.luminances.length<t&&(this.luminances=new Uint8ClampedArray(t));for(var r=this.buckets,n=0;n<e.LUMINANCE_BUCKETS;n++)r[n]=0},e.estimateBlackPoint=function(t){for(var r=t.length,n=0,o=0,i=0,a=0;a<r;a++)t[a]>i&&(o=a,i=t[a]),t[a]>n&&(n=t[a]);var u=0,s=0;for(a=0;a<r;a++){var l=a-o;(p=t[a]*l*l)>s&&(u=a,s=p)}if(o>u){var d=o;o=u,u=d}if(u-o<=r/16)throw new f.default;var c=u-1,h=-1;for(a=u-1;a>o;a--){var p,w=a-o;(p=w*w*(u-a)*(n-t[a]))>h&&(c=a,h=p)}return c<<e.LUMINANCE_SHIFT},e.LUMINANCE_BITS=5,e.LUMINANCE_SHIFT=8-e.LUMINANCE_BITS,e.LUMINANCE_BUCKETS=1<<e.LUMINANCE_BITS,e.EMPTY=Uint8ClampedArray.from([0]),e}(i.default);e.default=s},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(61),a=r(6),u=function(t){function e(e){var r=t.call(this,e)||this;return r.matrix=null,r}return o(e,t),e.prototype.getBlackMatrix=function(){if(null!==this.matrix)return this.matrix;var r=this.getLuminanceSource(),n=r.getWidth(),o=r.getHeight();if(n>=e.MINIMUM_DIMENSION&&o>=e.MINIMUM_DIMENSION){var i=r.getMatrix(),u=n>>e.BLOCK_SIZE_POWER;0!=(n&e.BLOCK_SIZE_MASK)&&u++;var f=o>>e.BLOCK_SIZE_POWER;0!=(o&e.BLOCK_SIZE_MASK)&&f++;var s=e.calculateBlackPoints(i,u,f,n,o),l=new a.default(n,o);e.calculateThresholdForBlock(i,u,f,n,o,s,l),this.matrix=l}else this.matrix=t.prototype.getBlackMatrix.call(this);return this.matrix},e.prototype.createBinarizer=function(t){return new e(t)},e.calculateThresholdForBlock=function(t,r,n,o,i,a,u){for(var f=i-e.BLOCK_SIZE,s=o-e.BLOCK_SIZE,l=0;l<n;l++){var d=l<<e.BLOCK_SIZE_POWER;d>f&&(d=f);for(var c=e.cap(l,2,n-3),h=0;h<r;h++){var p=h<<e.BLOCK_SIZE_POWER;p>s&&(p=s);for(var w=e.cap(h,2,r-3),g=0,v=-2;v<=2;v++){var _=a[c+v];g+=_[w-2]+_[w-1]+_[w]+_[w+1]+_[w+2]}var y=g/25;e.thresholdBlock(t,p,d,y,o,u)}}},e.cap=function(t,e,r){return t<e?e:t>r?r:t},e.thresholdBlock=function(t,r,n,o,i,a){for(var u=0,f=n*i+r;u<e.BLOCK_SIZE;u++,f+=i)for(var s=0;s<e.BLOCK_SIZE;s++)(255&t[f+s])<=o&&a.set(r+s,n+u)},e.calculateBlackPoints=function(t,r,n,o,i){for(var a=i-e.BLOCK_SIZE,u=o-e.BLOCK_SIZE,f=new Array(n),s=0;s<n;s++){f[s]=new Int32Array(r);var l=s<<e.BLOCK_SIZE_POWER;l>a&&(l=a);for(var d=0;d<r;d++){var c=d<<e.BLOCK_SIZE_POWER;c>u&&(c=u);for(var h=0,p=255,w=0,g=0,v=l*o+c;g<e.BLOCK_SIZE;g++,v+=o){for(var _=0;_<e.BLOCK_SIZE;_++){var y=255&t[v+_];h+=y,y<p&&(p=y),y>w&&(w=y)}if(w-p>e.MIN_DYNAMIC_RANGE)for(g++,v+=o;g<e.BLOCK_SIZE;g++,v+=o)for(_=0;_<e.BLOCK_SIZE;_++)h+=255&t[v+_]}var m=h>>2*e.BLOCK_SIZE_POWER;if(w-p<=e.MIN_DYNAMIC_RANGE&&(m=p/2,s>0&&d>0)){var E=(f[s-1][d]+2*f[s][d-1]+f[s-1][d-1])/4;p<E&&(m=E)}f[s][d]=m}}return f},e.BLOCK_SIZE_POWER=3,e.BLOCK_SIZE=1<<e.BLOCK_SIZE_POWER,e.BLOCK_SIZE_MASK=e.BLOCK_SIZE-1,e.MINIMUM_DIMENSION=5*e.BLOCK_SIZE,e.MIN_DYNAMIC_RANGE=24,e}(i.default);e.default=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=function(){function t(t){if(this.binarizer=t,null===t)throw new n.default("Binarizer must be non-null.")}return t.prototype.getWidth=function(){return this.binarizer.getWidth()},t.prototype.getHeight=function(){return this.binarizer.getHeight()},t.prototype.getBlackRow=function(t,e){return this.binarizer.getBlackRow(t,e)},t.prototype.getBlackMatrix=function(){return null!==this.matrix&&void 0!==this.matrix||(this.matrix=this.binarizer.getBlackMatrix()),this.matrix},t.prototype.isCropSupported=function(){return this.binarizer.getLuminanceSource().isCropSupported()},t.prototype.crop=function(e,r,n,o){var i=this.binarizer.getLuminanceSource().crop(e,r,n,o);return new t(this.binarizer.createBinarizer(i))},t.prototype.isRotateSupported=function(){return this.binarizer.getLuminanceSource().isRotateSupported()},t.prototype.rotateCounterClockwise=function(){var e=this.binarizer.getLuminanceSource().rotateCounterClockwise();return new t(this.binarizer.createBinarizer(e))},t.prototype.rotateCounterClockwise45=function(){var e=this.binarizer.getLuminanceSource().rotateCounterClockwise45();return new t(this.binarizer.createBinarizer(e))},t.prototype.toString=function(){try{return this.getBlackMatrix().toString()}catch(t){return""}},t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(t,e){this.deviceId=t,this.label=e};e.VideoInputDevice=n},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(19),a=r(18),u=r(1),f=function(t){function e(r){var n=t.call(this,r.width,r.height)||this;return n.canvas=r,n.tempCanvasElement=null,n.buffer=e.makeBufferFromCanvasImageData(r),n}return o(e,t),e.makeBufferFromCanvasImageData=function(t){var r=t.getContext("2d").getImageData(0,0,t.width,t.height);return e.toGrayscaleBuffer(r.data,t.width,t.height)},e.toGrayscaleBuffer=function(t,e,r){for(var n=new Uint8ClampedArray(e*r),o=0,i=0,a=t.length;o<a;o+=4,i++){var u=void 0;u=0===t[o+3]?255:306*t[o]+601*t[o+1]+117*t[o+2]+512>>10,n[i]=u}return n},e.prototype.getRow=function(t,e){if(t<0||t>=this.getHeight())throw new u.default("Requested row is outside the image: "+t);var r=this.getWidth(),n=t*r;return null===e?e=this.buffer.slice(n,n+r):(e.length<r&&(e=new Uint8ClampedArray(r)),e.set(this.buffer.slice(n,n+r))),e},e.prototype.getMatrix=function(){return this.buffer},e.prototype.isCropSupported=function(){return!0},e.prototype.crop=function(t,e,r,n){return this.crop(t,e,r,n),this},e.prototype.isRotateSupported=function(){return!0},e.prototype.rotateCounterClockwise=function(){return this.rotate(-90),this},e.prototype.rotateCounterClockwise45=function(){return this.rotate(-45),this},e.prototype.getTempCanvasElement=function(){if(null===this.tempCanvasElement){var t=this.canvas.ownerDocument.createElement("canvas");t.style.width=this.canvas.width+"px",t.style.height=this.canvas.height+"px",this.tempCanvasElement=t}return this.tempCanvasElement},e.prototype.rotate=function(t){var r=this.getTempCanvasElement(),n=r.getContext("2d");return n.rotate(t*e.DEGREE_TO_RADIANS),n.drawImage(this.canvas,0,0),this.buffer=e.makeBufferFromCanvasImageData(r),this},e.prototype.invert=function(){return new i.default(this)},e.DEGREE_TO_RADIANS=Math.PI/180,e}(a.default);e.HTMLCanvasElementLuminanceSource=f},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(103)),n(r(87)),n(r(80)),n(r(76)),n(r(23)),n(r(65)),n(r(64));var o=r(5);e.Exception=o.default;var i=r(36);e.ArgumentException=i.default;var a=r(59);e.ArithmeticException=a.default;var u=r(11);e.ChecksumException=u.default;var f=r(4);e.FormatException=f.default;var s=r(1);e.IllegalArgumentException=s.default;var l=r(16);e.IllegalStateException=l.default;var d=r(0);e.NotFoundException=d.default;var c=r(40);e.ReaderException=c.default;var h=r(58);e.ReedSolomonException=h.default;var p=r(38);e.UnsupportedOperationException=p.default;var w=r(24);e.WriterException=w.default;var g=r(2);e.BarcodeFormat=g.default;var v=r(60);e.Binarizer=v.default;var _=r(63);e.BinaryBitmap=_.default;var y=r(71);e.DecodeHintType=y.default;var m=r(19);e.InvertedLuminanceSource=m.default;var E=r(18);e.LuminanceSource=E.default;var C=r(70);e.MultiFormatReader=C.default;var A=r(69);e.MultiFormatWriter=A.default;var S=r(68);e.PlanarYUVLuminanceSource=S.default;var I=r(8);e.Result=I.default;var O=r(10);e.ResultMetadataType=O.default;var M=r(67);e.RGBLuminanceSource=M.default;var b=r(14);e.BitArray=b.default;var T=r(6);e.BitMatrix=T.default;var N=r(31);e.BitSource=N.default;var R=r(15);e.CharacterSetECI=R.default;var P=r(30);e.DecoderResult=P.default;var D=r(53);e.DefaultGridSampler=D.default;var B=r(28);e.DetectorResult=B.default;var k=r(61);e.GlobalHistogramBinarizer=k.default;var L=r(52);e.GridSampler=L.default;var F=r(27);e.GridSamplerInstance=F.default;var x=r(62);e.HybridBinarizer=x.default;var U=r(26);e.PerspectiveTransform=U.default;var H=r(55);e.StringUtils=H.default;var z=r(17);e.MathUtils=z.default;var V=r(50);e.WhiteRectangleDetector=V.default;var j=r(13);e.GenericGF=j.default;var G=r(21);e.GenericGFPoly=G.default;var W=r(34);e.ReedSolomonDecoder=W.default;var X=r(48);e.ReedSolomonEncoder=X.default;var Y=r(35);e.QRCodeReader=Y.default;var K=r(39);e.QRCodeWriter=K.default;var Z=r(9);e.OneDReader=Z.default;var Q=r(41);e.EAN13Reader=Q.default;var q=r(43);e.Code128Reader=q.default;var J=r(42);e.ITFReader=J.default;var $=r(44);e.Code39Reader=$.default},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),r(19);var i=r(19),a=r(18),u=r(7),f=r(1),s=function(t){function e(e,r,n,o,i,a,u){var s=t.call(this,r,n)||this;if(s.dataWidth=o,s.dataHeight=i,s.left=a,s.top=u,4===e.BYTES_PER_ELEMENT){for(var l=r*n,d=new Uint8ClampedArray(l),c=0;c<l;c++){var h=e[c],p=h>>16&255,w=h>>7&510,g=255&h;d[c]=(p+w+g)/4&255}s.luminances=d}else s.luminances=e;if(void 0===o&&(s.dataWidth=r),void 0===i&&(s.dataHeight=n),void 0===a&&(s.left=0),void 0===u&&(s.top=0),s.left+r>s.dataWidth||s.top+n>s.dataHeight)throw new f.default("Crop rectangle does not fit within image data.");return s}return o(e,t),e.prototype.getRow=function(t,e){if(t<0||t>=this.getHeight())throw new f.default("Requested row is outside the image: "+t);var r=this.getWidth();(null===e||void 0===e||e.length<r)&&(e=new Uint8ClampedArray(r));var n=(t+this.top)*this.dataWidth+this.left;return u.default.arraycopy(this.luminances,n,e,0,r),e},e.prototype.getMatrix=function(){var t=this.getWidth(),e=this.getHeight();if(t===this.dataWidth&&e===this.dataHeight)return this.luminances;var r=t*e,n=new Uint8ClampedArray(r),o=this.top*this.dataWidth+this.left;if(t===this.dataWidth)return u.default.arraycopy(this.luminances,o,n,0,r),n;for(var i=0;i<e;i++){var a=i*t;u.default.arraycopy(this.luminances,o,n,a,t),o+=this.dataWidth}return n},e.prototype.isCropSupported=function(){return!0},e.prototype.crop=function(t,r,n,o){return new e(this.luminances,n,o,this.dataWidth,this.dataHeight,this.left+t,this.top+r)},e.prototype.invert=function(){return new i.default(this)},e}(a.default);e.default=s},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(7),a=r(18),u=r(19),f=r(1),s=function(t){function e(e,r,n,o,i,a,u,s){var l=t.call(this,a,u)||this;if(l.yuvData=e,l.dataWidth=r,l.dataHeight=n,l.left=o,l.top=i,o+a>r||i+u>n)throw new f.default("Crop rectangle does not fit within image data.");return s&&l.reverseHorizontal(a,u),l}return o(e,t),e.prototype.getRow=function(t,e){if(t<0||t>=this.getHeight())throw new f.default("Requested row is outside the image: "+t);var r=this.getWidth();(null===e||void 0===e||e.length<r)&&(e=new Uint8ClampedArray(r));var n=(t+this.top)*this.dataWidth+this.left;return i.default.arraycopy(this.yuvData,n,e,0,r),e},e.prototype.getMatrix=function(){var t=this.getWidth(),e=this.getHeight();if(t===this.dataWidth&&e===this.dataHeight)return this.yuvData;var r=t*e,n=new Uint8ClampedArray(r),o=this.top*this.dataWidth+this.left;if(t===this.dataWidth)return i.default.arraycopy(this.yuvData,o,n,0,r),n;for(var a=0;a<e;a++){var u=a*t;i.default.arraycopy(this.yuvData,o,n,u,t),o+=this.dataWidth}return n},e.prototype.isCropSupported=function(){return!0},e.prototype.crop=function(t,r,n,o){return new e(this.yuvData,this.dataWidth,this.dataHeight,this.left+t,this.top+r,n,o,!1)},e.prototype.renderThumbnail=function(){for(var t=this.getWidth()/e.THUMBNAIL_SCALE_FACTOR,r=this.getHeight()/e.THUMBNAIL_SCALE_FACTOR,n=new Int32Array(t*r),o=this.yuvData,i=this.top*this.dataWidth+this.left,a=0;a<r;a++){for(var u=a*t,f=0;f<t;f++){var s=255&o[i+f*e.THUMBNAIL_SCALE_FACTOR];n[u+f]=4278190080|65793*s}i+=this.dataWidth*e.THUMBNAIL_SCALE_FACTOR}return n},e.prototype.getThumbnailWidth=function(){return this.getWidth()/e.THUMBNAIL_SCALE_FACTOR},e.prototype.getThumbnailHeight=function(){return this.getHeight()/e.THUMBNAIL_SCALE_FACTOR},e.prototype.reverseHorizontal=function(t,e){for(var r=this.yuvData,n=0,o=this.top*this.dataWidth+this.left;n<e;n++,o+=this.dataWidth)for(var i=o+t/2,a=o,u=o+t-1;a<i;a++,u--){var f=r[a];r[a]=r[u],r[u]=f}},e.prototype.invert=function(){return new u.default(this)},e.THUMBNAIL_SCALE_FACTOR=2,e}(a.default);e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(39),o=r(2),i=r(1),a=function(){function t(){}return t.prototype.encode=function(t,e,r,a,u){var f;switch(e){case o.default.QR_CODE:f=new n.default;break;default:throw new i.default("No encoder available for format "+e)}return f.encode(t,e,r,a,u)},t}();e.default=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(2),o=r(35),i=r(45),a=r(51),u=r(0),f=r(40),s=function(){function t(){}return t.prototype.decode=function(t,e){return this.setHints(e),this.decodeInternal(t)},t.prototype.decodeWithState=function(t){return null!==this.readers&&void 0!==this.readers||this.setHints(null),this.decodeInternal(t)},t.prototype.setHints=function(t){this.hints=t;var e=null!==t&&void 0!==t&&void 0!==t.get(3),r=null===t||void 0===t?null:t.get(2),u=new Array;if(null!==r&&void 0!==r){var f=r.some(function(t){return t===n.default.UPC_A||t===n.default.UPC_E||t===n.default.EAN_13||t===n.default.EAN_8||t===n.default.CODABAR||t===n.default.CODE_39||t===n.default.CODE_93||t===n.default.CODE_128||t===n.default.ITF||t===n.default.RSS_14||t===n.default.RSS_EXPANDED});f&&!e&&u.push(new i.default(t)),r.includes(n.default.QR_CODE)&&u.push(new o.default),r.includes(n.default.DATA_MATRIX)&&u.push(new a.default),f&&e&&u.push(new i.default(t))}0===u.length&&(e||u.push(new i.default(t)),u.push(new o.default),u.push(new a.default),e&&u.push(new i.default(t))),this.readers=u},t.prototype.reset=function(){if(null!==this.readers)for(var t=0,e=this.readers;t<e.length;t++)e[t].reset()},t.prototype.decodeInternal=function(t){if(null===this.readers)throw new f.default("No readers where selected, nothing can be read.");for(var e=0,r=this.readers;e<r.length;e++){var n=r[e];try{return n.decode(t,this.hints)}catch(t){if(t instanceof f.default)continue}}throw new u.default("No MultiFormat Readers were able to detect the code.")},t}();e.default=s},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.OTHER=0]="OTHER",t[t.PURE_BARCODE=1]="PURE_BARCODE",t[t.POSSIBLE_FORMATS=2]="POSSIBLE_FORMATS",t[t.TRY_HARDER=3]="TRY_HARDER",t[t.CHARACTER_SET=4]="CHARACTER_SET",t[t.ALLOWED_LENGTHS=5]="ALLOWED_LENGTHS",t[t.ASSUME_CODE_39_CHECK_DIGIT=6]="ASSUME_CODE_39_CHECK_DIGIT",t[t.ASSUME_GS1=7]="ASSUME_GS1",t[t.RETURN_CODABAR_START_END=8]="RETURN_CODABAR_START_END",t[t.NEED_RESULT_POINT_CALLBACK=9]="NEED_RESULT_POINT_CALLBACK",t[t.ALLOWED_EAN_EXTENSIONS=10]="ALLOWED_EAN_EXTENSIONS"}(n||(n={})),e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(2),o=r(20),i=r(8),a=r(3),u=r(10),f=r(0),s=function(){function t(){this.decodeMiddleCounters=[0,0,0,0],this.decodeRowStringBuffer=""}return t.prototype.decodeRow=function(e,r,o){var u=this.decodeRowStringBuffer,f=this.decodeMiddle(r,o,u),s=u.toString(),l=t.parseExtensionString(s),d=[new a.default((o[0]+o[1])/2,e),new a.default(f,e)],c=new i.default(s,null,0,d,n.default.UPC_EAN_EXTENSION,(new Date).getTime());return null!=l&&c.putAllMetadata(l),c},t.prototype.decodeMiddle=function(t,e,r){var n=this.decodeMiddleCounters;n[0]=0,n[1]=0,n[2]=0,n[3]=0;for(var i=t.getSize(),a=e[1],u=0,s=0;s<2&&a<i;s++){var l=o.default.decodeDigit(t,n,a,o.default.L_AND_G_PATTERNS);r+=String.fromCharCode("0".charCodeAt(0)+l%10);for(var d=0,c=n;d<c.length;d++)a+=c[d];l>=10&&(u|=1<<1-s),1!==s&&(a=t.getNextSet(a),a=t.getNextUnset(a))}if(2!==r.length)throw new f.default;if(parseInt(r.toString())%4!==u)throw new f.default;return a},t.parseExtensionString=function(t){return 2!==t.length?null:new Map([[u.default.ISSUE_NUMBER,parseInt(t)]])},t}();e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(2),o=r(20),i=r(8),a=r(3),u=r(10),f=r(0),s=function(){function t(){this.CHECK_DIGIT_ENCODINGS=[24,20,18,17,12,6,3,10,9,5],this.decodeMiddleCounters=[0,0,0,0],this.decodeRowStringBuffer=""}return t.prototype.decodeRow=function(e,r,o){var u=this.decodeRowStringBuffer,f=this.decodeMiddle(r,o,u),s=u.toString(),l=t.parseExtensionString(s),d=[new a.default((o[0]+o[1])/2,e),new a.default(f,e)],c=new i.default(s,null,0,d,n.default.UPC_EAN_EXTENSION,(new Date).getTime());return null!=l&&c.putAllMetadata(l),c},t.prototype.decodeMiddle=function(e,r,n){var i=this.decodeMiddleCounters;i[0]=0,i[1]=0,i[2]=0,i[3]=0;for(var a=e.getSize(),u=r[1],s=0,l=0;l<5&&u<a;l++){var d=o.default.decodeDigit(e,i,u,o.default.L_AND_G_PATTERNS);n+=String.fromCharCode("0".charCodeAt(0)+d%10);for(var c=0,h=i;c<h.length;c++)u+=h[c];d>=10&&(s|=1<<4-l),4!==l&&(u=e.getNextSet(u),u=e.getNextUnset(u))}if(5!==n.length)throw new f.default;var p=this.determineCheckDigit(s);if(t.extensionChecksum(n.toString())!==p)throw new f.default;return u},t.extensionChecksum=function(t){for(var e=t.length,r=0,n=e-2;n>=0;n-=2)r+=t.charAt(n).charCodeAt(0)-"0".charCodeAt(0);for(r*=3,n=e-1;n>=0;n-=2)r+=t.charAt(n).charCodeAt(0)-"0".charCodeAt(0);return(r*=3)%10},t.prototype.determineCheckDigit=function(t){for(var e=0;e<10;e++)if(t===this.CHECK_DIGIT_ENCODINGS[e])return e;throw new f.default},t.parseExtensionString=function(e){if(5!==e.length)return null;var r=t.parseExtension5String(e);return null==r?null:new Map([[u.default.SUGGESTED_PRICE,r]])},t.parseExtension5String=function(t){var e;switch(t.charAt(0)){case"0":e="£";break;case"5":e="$";break;case"9":switch(t){case"90000":return null;case"99991":return"0.00";case"99990":return"Used"}e="";break;default:e=""}var r=parseInt(t.substring(1)),n=r%100;return e+(r/100).toString()+"."+(n<10?"0"+n:n.toString())},t}();e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(20),o=r(73),i=r(72),a=function(){function t(){}return t.decodeRow=function(t,e,r){var a=n.default.findGuardPattern(e,r,!1,this.EXTENSION_START_PATTERN,new Array(this.EXTENSION_START_PATTERN.length).fill(0));try{return(new o.default).decodeRow(t,e,a)}catch(r){return(new i.default).decodeRow(t,e,a)}},t.EXTENSION_START_PATTERN=[1,1,2],t}();e.default=a},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),a=r(9),u=r(41),f=r(0),s=function(t){function e(e){var r=t.call(this)||this,n=null==e?null:e.get(2),o=[];return null!=n&&n.indexOf(i.default.EAN_13)>-1&&o.push(new u.default),0===o.length&&o.push(new u.default),r.readers=o,r}return o(e,t),e.prototype.decodeRow=function(t,e,r){for(var n=0,o=this.readers;n<o.length;n++){var i=o[n];try{return i.decodeRow(t,e,r)}catch(t){}}throw new f.default},e.prototype.reset=function(){for(var t=0,e=this.readers;t<e.length;t++)e[t].reset()},e}(a.default);e.default=s},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(23),a=r(45),u=function(t){function e(e,r){return void 0===e&&(e=500),t.call(this,new a.default(r),e,r)||this}return o(e,t),e}(i.BrowserCodeReader);e.BrowserBarcodeReader=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){this.dataBytes=t,this.errorCorrectionBytes=e}return t.prototype.getDataBytes=function(){return this.dataBytes},t.prototype.getErrorCorrectionBytes=function(){return this.errorCorrectionBytes},t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(14),o=r(22),i=r(46),a=r(47),u=r(24),f=r(1),s=function(){function t(){}return t.clearMatrix=function(t){t.clear(255)},t.buildMatrix=function(e,r,n,o,i){t.clearMatrix(i),t.embedBasicPatterns(n,i),t.embedTypeInfo(r,o,i),t.maybeEmbedVersionInfo(n,i),t.embedDataBits(e,o,i)},t.embedBasicPatterns=function(e,r){t.embedPositionDetectionPatternsAndSeparators(r),t.embedDarkDotAtLeftBottomCorner(r),t.maybeEmbedPositionAdjustmentPatterns(e,r),t.embedTimingPatterns(r)},t.embedTypeInfo=function(e,r,o){var i=new n.default;t.makeTypeInfoBits(e,r,i);for(var a=0,u=i.getSize();a<u;++a){var f=i.get(i.getSize()-1-a),s=t.TYPE_INFO_COORDINATES[a],l=s[0],d=s[1];if(o.setBoolean(l,d,f),a<8){var c=o.getWidth()-a-1,h=8;o.setBoolean(c,h,f)}else c=8,h=o.getHeight()-7+(a-8),o.setBoolean(c,h,f)}},t.maybeEmbedVersionInfo=function(e,r){if(!(e.getVersionNumber()<7)){var o=new n.default;t.makeVersionInfoBits(e,o);for(var i=17,a=0;a<6;++a)for(var u=0;u<3;++u){var f=o.get(i);i--,r.setBoolean(a,r.getHeight()-11+u,f),r.setBoolean(r.getHeight()-11+u,a,f)}}},t.embedDataBits=function(e,r,n){for(var o=0,i=-1,f=n.getWidth()-1,s=n.getHeight()-1;f>0;){for(6===f&&(f-=1);s>=0&&s<n.getHeight();){for(var l=0;l<2;++l){var d=f-l;if(t.isEmpty(n.get(d,s))){var c=void 0;o<e.getSize()?(c=e.get(o),++o):c=!1,255!==r&&a.default.getDataMaskBit(r,d,s)&&(c=!c),n.setBoolean(d,s,c)}}s+=i}s+=i=-i,f-=2}if(o!==e.getSize())throw new u.default("Not all bits consumed: "+o+"/"+e.getSize())},t.findMSBSet=function(t){return 32-o.default.numberOfLeadingZeros(t)},t.calculateBCHCode=function(e,r){if(0===r)throw new f.default("0 polynomial");var n=t.findMSBSet(r);for(e<<=n-1;t.findMSBSet(e)>=n;)e^=r<<t.findMSBSet(e)-n;return e},t.makeTypeInfoBits=function(e,r,o){if(!i.default.isValidMaskPattern(r))throw new u.default("Invalid mask pattern");var a=e.getBits()<<3|r;o.appendBits(a,5);var f=t.calculateBCHCode(a,t.TYPE_INFO_POLY);o.appendBits(f,10);var s=new n.default;if(s.appendBits(t.TYPE_INFO_MASK_PATTERN,15),o.xor(s),15!==o.getSize())throw new u.default("should not happen but we got: "+o.getSize())},t.makeVersionInfoBits=function(e,r){r.appendBits(e.getVersionNumber(),6);var n=t.calculateBCHCode(e.getVersionNumber(),t.VERSION_INFO_POLY);if(r.appendBits(n,12),18!==r.getSize())throw new u.default("should not happen but we got: "+r.getSize())},t.isEmpty=function(t){return 255===t},t.embedTimingPatterns=function(e){for(var r=8;r<e.getWidth()-8;++r){var n=(r+1)%2;t.isEmpty(e.get(r,6))&&e.setNumber(r,6,n),t.isEmpty(e.get(6,r))&&e.setNumber(6,r,n)}},t.embedDarkDotAtLeftBottomCorner=function(t){if(0===t.get(8,t.getHeight()-8))throw new u.default;t.setNumber(8,t.getHeight()-8,1)},t.embedHorizontalSeparationPattern=function(e,r,n){for(var o=0;o<8;++o){if(!t.isEmpty(n.get(e+o,r)))throw new u.default;n.setNumber(e+o,r,0)}},t.embedVerticalSeparationPattern=function(e,r,n){for(var o=0;o<7;++o){if(!t.isEmpty(n.get(e,r+o)))throw new u.default;n.setNumber(e,r+o,0)}},t.embedPositionAdjustmentPattern=function(e,r,n){for(var o=0;o<5;++o)for(var i=t.POSITION_ADJUSTMENT_PATTERN[o],a=0;a<5;++a)n.setNumber(e+a,r+o,i[a])},t.embedPositionDetectionPattern=function(e,r,n){for(var o=0;o<7;++o)for(var i=t.POSITION_DETECTION_PATTERN[o],a=0;a<7;++a)n.setNumber(e+a,r+o,i[a])},t.embedPositionDetectionPatternsAndSeparators=function(e){var r=t.POSITION_DETECTION_PATTERN[0].length;t.embedPositionDetectionPattern(0,0,e),t.embedPositionDetectionPattern(e.getWidth()-r,0,e),t.embedPositionDetectionPattern(0,e.getWidth()-r,e),t.embedHorizontalSeparationPattern(0,7,e),t.embedHorizontalSeparationPattern(e.getWidth()-8,7,e),t.embedHorizontalSeparationPattern(0,e.getWidth()-8,e),t.embedVerticalSeparationPattern(7,0,e),t.embedVerticalSeparationPattern(e.getHeight()-7-1,0,e),t.embedVerticalSeparationPattern(7,e.getHeight()-7,e)},t.maybeEmbedPositionAdjustmentPatterns=function(e,r){if(!(e.getVersionNumber()<2))for(var n=e.getVersionNumber()-1,o=t.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[n],i=0,a=o.length;i!==a;i++){var u=o[i];if(u>=0)for(var f=0;f!==a;f++){var s=o[f];s>=0&&t.isEmpty(r.get(s,u))&&t.embedPositionAdjustmentPattern(s-2,u-2,r)}}},t.POSITION_DETECTION_PATTERN=Array.from([Int32Array.from([1,1,1,1,1,1,1]),Int32Array.from([1,0,0,0,0,0,1]),Int32Array.from([1,0,1,1,1,0,1]),Int32Array.from([1,0,1,1,1,0,1]),Int32Array.from([1,0,1,1,1,0,1]),Int32Array.from([1,0,0,0,0,0,1]),Int32Array.from([1,1,1,1,1,1,1])]),t.POSITION_ADJUSTMENT_PATTERN=Array.from([Int32Array.from([1,1,1,1,1]),Int32Array.from([1,0,0,0,1]),Int32Array.from([1,0,1,0,1]),Int32Array.from([1,0,0,0,1]),Int32Array.from([1,1,1,1,1])]),t.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE=Array.from([Int32Array.from([-1,-1,-1,-1,-1,-1,-1]),Int32Array.from([6,18,-1,-1,-1,-1,-1]),Int32Array.from([6,22,-1,-1,-1,-1,-1]),Int32Array.from([6,26,-1,-1,-1,-1,-1]),Int32Array.from([6,30,-1,-1,-1,-1,-1]),Int32Array.from([6,34,-1,-1,-1,-1,-1]),Int32Array.from([6,22,38,-1,-1,-1,-1]),Int32Array.from([6,24,42,-1,-1,-1,-1]),Int32Array.from([6,26,46,-1,-1,-1,-1]),Int32Array.from([6,28,50,-1,-1,-1,-1]),Int32Array.from([6,30,54,-1,-1,-1,-1]),Int32Array.from([6,32,58,-1,-1,-1,-1]),Int32Array.from([6,34,62,-1,-1,-1,-1]),Int32Array.from([6,26,46,66,-1,-1,-1]),Int32Array.from([6,26,48,70,-1,-1,-1]),Int32Array.from([6,26,50,74,-1,-1,-1]),Int32Array.from([6,30,54,78,-1,-1,-1]),Int32Array.from([6,30,56,82,-1,-1,-1]),Int32Array.from([6,30,58,86,-1,-1,-1]),Int32Array.from([6,34,62,90,-1,-1,-1]),Int32Array.from([6,28,50,72,94,-1,-1]),Int32Array.from([6,26,50,74,98,-1,-1]),Int32Array.from([6,30,54,78,102,-1,-1]),Int32Array.from([6,28,54,80,106,-1,-1]),Int32Array.from([6,32,58,84,110,-1,-1]),Int32Array.from([6,30,58,86,114,-1,-1]),Int32Array.from([6,34,62,90,118,-1,-1]),Int32Array.from([6,26,50,74,98,122,-1]),Int32Array.from([6,30,54,78,102,126,-1]),Int32Array.from([6,26,52,78,104,130,-1]),Int32Array.from([6,30,56,82,108,134,-1]),Int32Array.from([6,34,60,86,112,138,-1]),Int32Array.from([6,30,58,86,114,142,-1]),Int32Array.from([6,34,62,90,118,146,-1]),Int32Array.from([6,30,54,78,102,126,150]),Int32Array.from([6,24,50,76,102,128,154]),Int32Array.from([6,28,54,80,106,132,158]),Int32Array.from([6,32,58,84,110,136,162]),Int32Array.from([6,26,54,82,110,138,166]),Int32Array.from([6,30,58,86,114,142,170])]),t.TYPE_INFO_COORDINATES=Array.from([Int32Array.from([8,0]),Int32Array.from([8,1]),Int32Array.from([8,2]),Int32Array.from([8,3]),Int32Array.from([8,4]),Int32Array.from([8,5]),Int32Array.from([8,7]),Int32Array.from([8,8]),Int32Array.from([7,8]),Int32Array.from([5,8]),Int32Array.from([4,8]),Int32Array.from([3,8]),Int32Array.from([2,8]),Int32Array.from([1,8]),Int32Array.from([0,8])]),t.VERSION_INFO_POLY=7973,t.TYPE_INFO_POLY=1335,t.TYPE_INFO_MASK_PATTERN=21522,t}();e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(37),o=r(12),i=function(){function t(t,e){this.width=t,this.height=e;for(var r=new Array(e),n=0;n!==e;n++)r[n]=new Uint8Array(t);this.bytes=r}return t.prototype.getHeight=function(){return this.height},t.prototype.getWidth=function(){return this.width},t.prototype.get=function(t,e){return this.bytes[e][t]},t.prototype.getArray=function(){return this.bytes},t.prototype.setNumber=function(t,e,r){this.bytes[e][t]=r},t.prototype.setBoolean=function(t,e,r){this.bytes[e][t]=r?1:0},t.prototype.clear=function(t){for(var e=0,r=this.bytes;e<r.length;e++){var o=r[e];n.default.fillUint8Array(o,t)}},t.prototype.equals=function(e){if(!(e instanceof t))return!1;var r=e;if(this.width!==r.width)return!1;if(this.height!==r.height)return!1;for(var n=0,o=this.height;n<o;++n)for(var i=this.bytes[n],a=r.bytes[n],u=0,f=this.width;u<f;++u)if(i[u]!==a[u])return!1;return!0},t.prototype.toString=function(){for(var t=new o.default,e=0,r=this.height;e<r;++e){for(var n=this.bytes[e],i=0,a=this.width;i<a;++i)switch(n[i]){case 0:t.append(" 0");break;case 1:t.append(" 1");break;default:t.append("  ")}t.append("\n")}return t.toString()},t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(25),o=r(49),i=r(32),a=r(1),u=r(16),f=function(){function t(t){this.containerElement="string"==typeof t?document.getElementById(t):t}return t.prototype.write=function(e,r,u,f){if(void 0===f&&(f=null),0===e.length)throw new a.default("Found empty contents");if(r<0||u<0)throw new a.default("Requested dimensions are too small: "+r+"x"+u);var s=i.default.L,l=t.QUIET_ZONE_SIZE;null!==f&&(void 0!==f.get(n.default.ERROR_CORRECTION)&&(s=i.default.fromString(f.get(n.default.ERROR_CORRECTION).toString())),void 0!==f.get(n.default.MARGIN)&&(l=Number.parseInt(f.get(n.default.MARGIN).toString(),10)));var d=o.default.encode(e,s,f);return this.renderResult(d,r,u,l)},t.prototype.renderResult=function(t,e,r,n){var o=t.getMatrix();if(null===o)throw new u.default;var i=o.getWidth(),a=o.getHeight(),f=i+2*n,s=a+2*n,l=Math.max(e,f),d=Math.max(r,s),c=Math.min(Math.floor(l/f),Math.floor(d/s)),h=Math.floor((l-i*c)/2),p=Math.floor((d-a*c)/2),w=this.createSVGElement(l,d);this.containerElement.appendChild(w);for(var g=0,v=p;g<a;g++,v+=c)for(var _=0,y=h;_<i;_++,y+=c)if(1===o.get(_,g)){var m=this.createSvgRectElement(y,v,c,c);w.appendChild(m)}return w},t.prototype.createSVGElement=function(e,r){var n=document.createElementNS(t.SVG_NS,"svg");return n.setAttributeNS(null,"height",e.toString()),n.setAttributeNS(null,"width",r.toString()),n},t.prototype.createSvgRectElement=function(e,r,n,o){var i=document.createElementNS(t.SVG_NS,"rect");return i.setAttributeNS(null,"x",e.toString()),i.setAttributeNS(null,"y",r.toString()),i.setAttributeNS(null,"height",n.toString()),i.setAttributeNS(null,"width",o.toString()),i.setAttributeNS(null,"fill","#000000"),i},t.QUIET_ZONE_SIZE=4,t.SVG_NS="http://www.w3.org/2000/svg",t}();e.BrowserQRCodeSvgWriter=f},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(3),o=r(28),i=r(27),a=r(17),u=r(50),f=r(0),s=function(){function t(t){this.image=t,this.rectangleDetector=new u.default(t)}return t.prototype.detect=function(){var e=this.rectangleDetector.detect(),r=e[0],i=e[1],a=e[2],u=e[3],s=[];s.push(this.transitionsBetween(r,i)),s.push(this.transitionsBetween(r,a)),s.push(this.transitionsBetween(i,u)),s.push(this.transitionsBetween(a,u)),s.sort(l.resultPointsAndTransitionsComparator);var d=s[0],c=s[1],h=new Map;t.increment(h,d.getFrom()),t.increment(h,d.getTo()),t.increment(h,c.getFrom()),t.increment(h,c.getTo());for(var p=null,w=null,g=null,v=0,_=Array.from(h.entries());v<_.length;v++){var y=_[v],m=y[0];2===y[1]?w=m:null==p?p=m:g=m}if(null==p||null==w||null==g)throw new f.default;var E=[p,w,g];n.default.orderBestPatterns(E);var C=E[0];w=E[1];var A,S=E[2];A=h.has(r)?h.has(i)?h.has(a)?u:a:i:r;var I,O,M=this.transitionsBetween(S,A).getTransitions(),b=this.transitionsBetween(C,A).getTransitions();if(1==(1&M)&&M++,M+=2,1==(1&b)&&b++,4*M>=7*(b+=2)||4*b>=7*M)null==(O=this.correctTopRightRectangular(w,C,S,A,M,b))&&(O=A),M=this.transitionsBetween(S,O).getTransitions(),b=this.transitionsBetween(C,O).getTransitions(),1==(1&M)&&M++,1==(1&b)&&b++,I=t.sampleGrid(this.image,S,w,C,O,M,b);else{var T=Math.min(b,M);null==(O=this.correctTopRight(w,C,S,A,T))&&(O=A);var N=Math.max(this.transitionsBetween(S,O).getTransitions(),this.transitionsBetween(C,O).getTransitions());1==(1&++N)&&N++,I=t.sampleGrid(this.image,S,w,C,O,N,N)}return new o.default(I,[S,w,C,O])},t.prototype.correctTopRightRectangular=function(e,r,o,i,a,u){var f=t.distance(e,r)/a,s=t.distance(o,i),l=(i.getX()-o.getX())/s,d=(i.getY()-o.getY())/s,c=new n.default(i.getX()+f*l,i.getY()+f*d);f=t.distance(e,o)/u,s=t.distance(r,i),l=(i.getX()-r.getX())/s,d=(i.getY()-r.getY())/s;var h=new n.default(i.getX()+f*l,i.getY()+f*d);return this.isValid(c)?this.isValid(h)?Math.abs(a-this.transitionsBetween(o,c).getTransitions())+Math.abs(u-this.transitionsBetween(r,c).getTransitions())<=Math.abs(a-this.transitionsBetween(o,h).getTransitions())+Math.abs(u-this.transitionsBetween(r,h).getTransitions())?c:h:c:this.isValid(h)?h:null},t.prototype.correctTopRight=function(e,r,o,i,a){var u=t.distance(e,r)/a,f=t.distance(o,i),s=(i.getX()-o.getX())/f,l=(i.getY()-o.getY())/f,d=new n.default(i.getX()+u*s,i.getY()+u*l);u=t.distance(e,o)/a,f=t.distance(r,i),s=(i.getX()-r.getX())/f,l=(i.getY()-r.getY())/f;var c=new n.default(i.getX()+u*s,i.getY()+u*l);return this.isValid(d)?this.isValid(c)?Math.abs(this.transitionsBetween(o,d).getTransitions()-this.transitionsBetween(r,d).getTransitions())<=Math.abs(this.transitionsBetween(o,c).getTransitions()-this.transitionsBetween(r,c).getTransitions())?d:c:d:this.isValid(c)?c:null},t.prototype.isValid=function(t){return t.getX()>=0&&t.getX()<this.image.getWidth()&&t.getY()>0&&t.getY()<this.image.getHeight()},t.distance=function(t,e){return a.default.round(n.default.distance(t,e))},t.increment=function(t,e){var r=t.get(e);t.set(e,null==r?1:r+1)},t.sampleGrid=function(t,e,r,n,o,a,u){return i.default.getInstance().sampleGrid(t,a,u,.5,.5,a-.5,.5,a-.5,u-.5,.5,u-.5,e.getX(),e.getY(),o.getX(),o.getY(),n.getX(),n.getY(),r.getX(),r.getY())},t.prototype.transitionsBetween=function(t,e){var r=0|t.getX(),n=0|t.getY(),o=0|e.getX(),i=0|e.getY(),a=Math.abs(i-n)>Math.abs(o-r);if(a){var u=r;r=n,n=u,u=o,o=i,i=u}for(var f=Math.abs(o-r),s=Math.abs(i-n),d=-f/2,c=n<i?1:-1,h=r<o?1:-1,p=0,w=this.image.get(a?n:r,a?r:n),g=r,v=n;g!==o;g+=h){var _=this.image.get(a?v:g,a?g:v);if(_!==w&&(p++,w=_),(d+=s)>0){if(v===i)break;v+=c,d-=f}}return new l(t,e,p)},t}();e.default=s;var l=function(){function t(t,e,r){this.from=t,this.to=e,this.transitions=r}return t.prototype.getFrom=function(){return this.from},t.prototype.getTo=function(){return this.to},t.prototype.getTransitions=function(){return this.transitions},t.prototype.toString=function(){return this.from+"/"+this.to+"/"+this.transitions},t.resultPointsAndTransitionsComparator=function(t,e){return t.getTransitions()-e.getTransitions()},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o=r(30),i=r(31),a=r(12),u=r(29),f=r(66),s=r(4),l=r(16);!function(t){t[t.PAD_ENCODE=0]="PAD_ENCODE",t[t.ASCII_ENCODE=1]="ASCII_ENCODE",t[t.C40_ENCODE=2]="C40_ENCODE",t[t.TEXT_ENCODE=3]="TEXT_ENCODE",t[t.ANSIX12_ENCODE=4]="ANSIX12_ENCODE",t[t.EDIFACT_ENCODE=5]="EDIFACT_ENCODE",t[t.BASE256_ENCODE=6]="BASE256_ENCODE"}(n||(n={}));var d=function(){function t(){}return t.decode=function(t){var e=new i.default(t),r=new a.default,u=new a.default,f=new Array,l=n.ASCII_ENCODE;do{if(l===n.ASCII_ENCODE)l=this.decodeAsciiSegment(e,r,u);else{switch(l){case n.C40_ENCODE:this.decodeC40Segment(e,r);break;case n.TEXT_ENCODE:this.decodeTextSegment(e,r);break;case n.ANSIX12_ENCODE:this.decodeAnsiX12Segment(e,r);break;case n.EDIFACT_ENCODE:this.decodeEdifactSegment(e,r);break;case n.BASE256_ENCODE:this.decodeBase256Segment(e,r,f);break;default:throw new s.default}l=n.ASCII_ENCODE}}while(l!==n.PAD_ENCODE&&e.available()>0);return u.length()>0&&r.append(u.toString()),new o.default(t,r.toString(),0===f.length?null:f,null)},t.decodeAsciiSegment=function(t,e,r){var o=!1;do{var i=t.readBits(8);if(0===i)throw new s.default;if(i<=128)return o&&(i+=128),e.append(String.fromCharCode(i-1)),n.ASCII_ENCODE;if(129===i)return n.PAD_ENCODE;if(i<=229){var a=i-130;a<10&&e.append("0"),e.append(""+a)}else switch(i){case 230:return n.C40_ENCODE;case 231:return n.BASE256_ENCODE;case 232:e.append(String.fromCharCode(29));break;case 233:case 234:break;case 235:o=!0;break;case 236:e.append("[)>05"),r.insert(0,"");break;case 237:e.append("[)>06"),r.insert(0,"");break;case 238:return n.ANSIX12_ENCODE;case 239:return n.TEXT_ENCODE;case 240:return n.EDIFACT_ENCODE;case 241:break;default:if(254!==i||0!==t.available())throw new s.default}}while(t.available()>0);return n.ASCII_ENCODE},t.decodeC40Segment=function(t,e){var r=!1,n=[],o=0;do{if(8===t.available())return;var i=t.readBits(8);if(254===i)return;this.parseTwoBytes(i,t.readBits(8),n);for(var a=0;a<3;a++){var u=n[a];switch(o){case 0:if(u<3)o=u+1;else{if(!(u<this.C40_BASIC_SET_CHARS.length))throw new s.default;var f=this.C40_BASIC_SET_CHARS[u];r?(e.append(String.fromCharCode(f.charCodeAt(0)+128)),r=!1):e.append(f)}break;case 1:r?(e.append(String.fromCharCode(u+128)),r=!1):e.append(String.fromCharCode(u)),o=0;break;case 2:if(u<this.C40_SHIFT2_SET_CHARS.length)f=this.C40_SHIFT2_SET_CHARS[u],r?(e.append(String.fromCharCode(f.charCodeAt(0)+128)),r=!1):e.append(f);else switch(u){case 27:e.append(String.fromCharCode(29));break;case 30:r=!0;break;default:throw new s.default}o=0;break;case 3:r?(e.append(String.fromCharCode(u+224)),r=!1):e.append(String.fromCharCode(u+96)),o=0;break;default:throw new s.default}}}while(t.available()>0)},t.decodeTextSegment=function(t,e){var r=!1,n=[],o=0;do{if(8===t.available())return;var i=t.readBits(8);if(254===i)return;this.parseTwoBytes(i,t.readBits(8),n);for(var a=0;a<3;a++){var u=n[a];switch(o){case 0:if(u<3)o=u+1;else{if(!(u<this.TEXT_BASIC_SET_CHARS.length))throw new s.default;var f=this.TEXT_BASIC_SET_CHARS[u];r?(e.append(String.fromCharCode(f.charCodeAt(0)+128)),r=!1):e.append(f)}break;case 1:r?(e.append(String.fromCharCode(u+128)),r=!1):e.append(String.fromCharCode(u)),o=0;break;case 2:if(u<this.TEXT_SHIFT2_SET_CHARS.length)f=this.TEXT_SHIFT2_SET_CHARS[u],r?(e.append(String.fromCharCode(f.charCodeAt(0)+128)),r=!1):e.append(f);else switch(u){case 27:e.append(String.fromCharCode(29));break;case 30:r=!0;break;default:throw new s.default}o=0;break;case 3:if(!(u<this.TEXT_SHIFT3_SET_CHARS.length))throw new s.default;f=this.TEXT_SHIFT3_SET_CHARS[u],r?(e.append(String.fromCharCode(f.charCodeAt(0)+128)),r=!1):e.append(f),o=0;break;default:throw new s.default}}}while(t.available()>0)},t.decodeAnsiX12Segment=function(t,e){var r=[];do{if(8===t.available())return;var n=t.readBits(8);if(254===n)return;this.parseTwoBytes(n,t.readBits(8),r);for(var o=0;o<3;o++){var i=r[o];switch(i){case 0:e.append("\r");break;case 1:e.append("*");break;case 2:e.append(">");break;case 3:e.append(" ");break;default:if(i<14)e.append(String.fromCharCode(i+44));else{if(!(i<40))throw new s.default;e.append(String.fromCharCode(i+51))}}}}while(t.available()>0)},t.parseTwoBytes=function(t,e,r){var n=(t<<8)+e-1,o=Math.floor(n/1600);r[0]=o,n-=1600*o,o=Math.floor(n/40),r[1]=o,r[2]=n-40*o},t.decodeEdifactSegment=function(t,e){do{if(t.available()<=16)return;for(var r=0;r<4;r++){var n=t.readBits(6);if(31===n){var o=8-t.getBitOffset();return void(8!==o&&t.readBits(o))}0==(32&n)&&(n|=64),e.append(String.fromCharCode(n))}}while(t.available()>0)},t.decodeBase256Segment=function(t,e,r){var n,o=1+t.getByteOffset(),i=this.unrandomize255State(t.readBits(8),o++);if((n=0===i?t.available()/8|0:i<250?i:250*(i-249)+this.unrandomize255State(t.readBits(8),o++))<0)throw new s.default;for(var a=new Uint8Array(n),d=0;d<n;d++){if(t.available()<8)throw new s.default;a[d]=this.unrandomize255State(t.readBits(8),o++)}r.push(a);try{e.append(u.default.decode(a,f.StringUtils.ISO88591))}catch(t){throw new l.default("Platform does not support required encoding: "+t.message)}},t.unrandomize255State=function(t,e){var r=t-(149*e%255+1);return r>=0?r:r+256},t.C40_BASIC_SET_CHARS=["*","*","*"," ","0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],t.C40_SHIFT2_SET_CHARS=["!",'"',"#","$","%","&","'","(",")","*","+",",","-",".","/",":",";","<","=",">","?","@","[","\\","]","^","_"],t.TEXT_BASIC_SET_CHARS=["*","*","*"," ","0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],t.TEXT_SHIFT2_SET_CHARS=t.C40_SHIFT2_SET_CHARS,t.TEXT_SHIFT3_SET_CHARS=["`","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","{","|","}","~",String.fromCharCode(127)],t}();e.default=d},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=function(){function t(t,e){this.numDataCodewords=t,this.codewords=e}return t.getDataBlocks=function(e,r){for(var o=r.getECBlocks(),i=0,a=o.getECBlocks(),u=0,f=a;u<f.length;u++)i+=(h=f[u]).getCount();for(var s=new Array(i),l=0,d=0,c=a;d<c.length;d++)for(var h=c[d],p=0;p<h.getCount();p++){var w=h.getDataCodewords(),g=o.getECCodewords()+w;s[l++]=new t(w,new Uint8Array(g))}var v=s[0].codewords.length-o.getECCodewords(),_=v-1,y=0;for(p=0;p<_;p++)for(var m=0;m<l;m++)s[m].codewords[p]=e[y++];var E=24===r.getVersionNumber(),C=E?8:l;for(m=0;m<C;m++)s[m].codewords[v-1]=e[y++];var A=s[0].codewords.length;for(p=v;p<A;p++)for(m=0;m<l;m++){var S=E?(m+8)%l:m,I=E&&S>7?p-1:p;s[S].codewords[I]=e[y++]}if(y!==e.length)throw new n.default;return s},t.prototype.getNumDataCodewords=function(){return this.numDataCodewords},t.prototype.getCodewords=function(){return this.codewords},t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(4),o=function(){function t(t,e,r){this.ecCodewords=t,this.ecBlocks=[e],r&&this.ecBlocks.push(r)}return t.prototype.getECCodewords=function(){return this.ecCodewords},t.prototype.getECBlocks=function(){return this.ecBlocks},t}();e.ECBlocks=o;var i=function(){function t(t,e){this.count=t,this.dataCodewords=e}return t.prototype.getCount=function(){return this.count},t.prototype.getDataCodewords=function(){return this.dataCodewords},t}();e.ECB=i;var a=function(){function t(t,e,r,n,o,i){this.versionNumber=t,this.symbolSizeRows=e,this.symbolSizeColumns=r,this.dataRegionSizeRows=n,this.dataRegionSizeColumns=o,this.ecBlocks=i;for(var a=0,u=i.getECCodewords(),f=0,s=i.getECBlocks();f<s.length;f++){var l=s[f];a+=l.getCount()*(l.getDataCodewords()+u)}this.totalCodewords=a}return t.prototype.getVersionNumber=function(){return this.versionNumber},t.prototype.getSymbolSizeRows=function(){return this.symbolSizeRows},t.prototype.getSymbolSizeColumns=function(){return this.symbolSizeColumns},t.prototype.getDataRegionSizeRows=function(){return this.dataRegionSizeRows},t.prototype.getDataRegionSizeColumns=function(){return this.dataRegionSizeColumns},t.prototype.getTotalCodewords=function(){return this.totalCodewords},t.prototype.getECBlocks=function(){return this.ecBlocks},t.getVersionForDimensions=function(e,r){if(0!=(1&e)||0!=(1&r))throw new n.default;for(var o=0,i=t.VERSIONS;o<i.length;o++){var a=i[o];if(a.symbolSizeRows===e&&a.symbolSizeColumns===r)return a}throw new n.default},t.prototype.toString=function(){return""+this.versionNumber},t.buildVersions=function(){return[new t(1,10,10,8,8,new o(5,new i(1,3))),new t(2,12,12,10,10,new o(7,new i(1,5))),new t(3,14,14,12,12,new o(10,new i(1,8))),new t(4,16,16,14,14,new o(12,new i(1,12))),new t(5,18,18,16,16,new o(14,new i(1,18))),new t(6,20,20,18,18,new o(18,new i(1,22))),new t(7,22,22,20,20,new o(20,new i(1,30))),new t(8,24,24,22,22,new o(24,new i(1,36))),new t(9,26,26,24,24,new o(28,new i(1,44))),new t(10,32,32,14,14,new o(36,new i(1,62))),new t(11,36,36,16,16,new o(42,new i(1,86))),new t(12,40,40,18,18,new o(48,new i(1,114))),new t(13,44,44,20,20,new o(56,new i(1,144))),new t(14,48,48,22,22,new o(68,new i(1,174))),new t(15,52,52,24,24,new o(42,new i(2,102))),new t(16,64,64,14,14,new o(56,new i(2,140))),new t(17,72,72,16,16,new o(36,new i(4,92))),new t(18,80,80,18,18,new o(48,new i(4,114))),new t(19,88,88,20,20,new o(56,new i(4,144))),new t(20,96,96,22,22,new o(68,new i(4,174))),new t(21,104,104,24,24,new o(56,new i(6,136))),new t(22,120,120,18,18,new o(68,new i(6,175))),new t(23,132,132,20,20,new o(62,new i(8,163))),new t(24,144,144,22,22,new o(62,new i(8,156),new i(2,155))),new t(25,8,18,6,16,new o(7,new i(1,5))),new t(26,8,32,6,14,new o(11,new i(1,10))),new t(27,12,26,10,24,new o(14,new i(1,16))),new t(28,12,36,10,16,new o(18,new i(1,22))),new t(29,16,36,14,16,new o(24,new i(1,32))),new t(30,16,48,14,22,new o(28,new i(1,49)))]},t.VERSIONS=t.buildVersions(),t}();e.default=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(6),o=r(84),i=r(4),a=r(1),u=function(){function t(e){var r=e.getHeight();if(r<8||r>144||0!=(1&r))throw new i.default;this.version=t.readVersion(e),this.mappingBitMatrix=this.extractDataRegion(e),this.readMappingMatrix=new n.default(this.mappingBitMatrix.getWidth(),this.mappingBitMatrix.getHeight())}return t.prototype.getVersion=function(){return this.version},t.readVersion=function(t){var e=t.getHeight(),r=t.getWidth();return o.default.getVersionForDimensions(e,r)},t.prototype.readCodewords=function(){var t=new Int8Array(this.version.getTotalCodewords()),e=0,r=4,n=0,o=this.mappingBitMatrix.getHeight(),a=this.mappingBitMatrix.getWidth(),u=!1,f=!1,s=!1,l=!1;do{if(r!==o||0!==n||u)if(r!==o-2||0!==n||0==(3&a)||f)if(r!==o+4||2!==n||0!=(7&a)||s)if(r!==o-2||0!==n||4!=(7&a)||l){do{r<o&&n>=0&&!this.readMappingMatrix.get(n,r)&&(t[e++]=255&this.readUtah(r,n,o,a)),r-=2,n+=2}while(r>=0&&n<a);r+=1,n+=3;do{r>=0&&n<a&&!this.readMappingMatrix.get(n,r)&&(t[e++]=255&this.readUtah(r,n,o,a)),r+=2,n-=2}while(r<o&&n>=0);r+=3,n+=1}else t[e++]=255&this.readCorner4(o,a),r-=2,n+=2,l=!0;else t[e++]=255&this.readCorner3(o,a),r-=2,n+=2,s=!0;else t[e++]=255&this.readCorner2(o,a),r-=2,n+=2,f=!0;else t[e++]=255&this.readCorner1(o,a),r-=2,n+=2,u=!0}while(r<o||n<a);if(e!==this.version.getTotalCodewords())throw new i.default;return t},t.prototype.readModule=function(t,e,r,n){return t<0&&(t+=r,e+=4-(r+4&7)),e<0&&(e+=n,t+=4-(n+4&7)),this.readMappingMatrix.set(e,t),this.mappingBitMatrix.get(e,t)},t.prototype.readUtah=function(t,e,r,n){var o=0;return this.readModule(t-2,e-2,r,n)&&(o|=1),o<<=1,this.readModule(t-2,e-1,r,n)&&(o|=1),o<<=1,this.readModule(t-1,e-2,r,n)&&(o|=1),o<<=1,this.readModule(t-1,e-1,r,n)&&(o|=1),o<<=1,this.readModule(t-1,e,r,n)&&(o|=1),o<<=1,this.readModule(t,e-2,r,n)&&(o|=1),o<<=1,this.readModule(t,e-1,r,n)&&(o|=1),o<<=1,this.readModule(t,e,r,n)&&(o|=1),o},t.prototype.readCorner1=function(t,e){var r=0;return this.readModule(t-1,0,t,e)&&(r|=1),r<<=1,this.readModule(t-1,1,t,e)&&(r|=1),r<<=1,this.readModule(t-1,2,t,e)&&(r|=1),r<<=1,this.readModule(0,e-2,t,e)&&(r|=1),r<<=1,this.readModule(0,e-1,t,e)&&(r|=1),r<<=1,this.readModule(1,e-1,t,e)&&(r|=1),r<<=1,this.readModule(2,e-1,t,e)&&(r|=1),r<<=1,this.readModule(3,e-1,t,e)&&(r|=1),r},t.prototype.readCorner2=function(t,e){var r=0;return this.readModule(t-3,0,t,e)&&(r|=1),r<<=1,this.readModule(t-2,0,t,e)&&(r|=1),r<<=1,this.readModule(t-1,0,t,e)&&(r|=1),r<<=1,this.readModule(0,e-4,t,e)&&(r|=1),r<<=1,this.readModule(0,e-3,t,e)&&(r|=1),r<<=1,this.readModule(0,e-2,t,e)&&(r|=1),r<<=1,this.readModule(0,e-1,t,e)&&(r|=1),r<<=1,this.readModule(1,e-1,t,e)&&(r|=1),r},t.prototype.readCorner3=function(t,e){var r=0;return this.readModule(t-1,0,t,e)&&(r|=1),r<<=1,this.readModule(t-1,e-1,t,e)&&(r|=1),r<<=1,this.readModule(0,e-3,t,e)&&(r|=1),r<<=1,this.readModule(0,e-2,t,e)&&(r|=1),r<<=1,this.readModule(0,e-1,t,e)&&(r|=1),r<<=1,this.readModule(1,e-3,t,e)&&(r|=1),r<<=1,this.readModule(1,e-2,t,e)&&(r|=1),r<<=1,this.readModule(1,e-1,t,e)&&(r|=1),r},t.prototype.readCorner4=function(t,e){var r=0;return this.readModule(t-3,0,t,e)&&(r|=1),r<<=1,this.readModule(t-2,0,t,e)&&(r|=1),r<<=1,this.readModule(t-1,0,t,e)&&(r|=1),r<<=1,this.readModule(0,e-2,t,e)&&(r|=1),r<<=1,this.readModule(0,e-1,t,e)&&(r|=1),r<<=1,this.readModule(1,e-1,t,e)&&(r|=1),r<<=1,this.readModule(2,e-1,t,e)&&(r|=1),r<<=1,this.readModule(3,e-1,t,e)&&(r|=1),r},t.prototype.extractDataRegion=function(t){var e=this.version.getSymbolSizeRows(),r=this.version.getSymbolSizeColumns();if(t.getHeight()!==e)throw new a.default("Dimension of bitMatrix must match the version size");for(var o=this.version.getDataRegionSizeRows(),i=this.version.getDataRegionSizeColumns(),u=e/o|0,f=r/i|0,s=u*o,l=f*i,d=new n.default(l,s),c=0;c<u;++c)for(var h=c*o,p=0;p<f;++p)for(var w=p*i,g=0;g<o;++g)for(var v=c*(o+2)+1+g,_=h+g,y=0;y<i;++y){var m=p*(i+2)+1+y;if(t.get(m,v)){var E=w+y;d.set(E,_)}}return d},t}();e.default=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(34),o=r(13),i=r(85),a=r(83),u=r(82),f=r(11),s=function(){function t(){this.rsDecoder=new n.default(o.default.DATA_MATRIX_FIELD_256)}return t.prototype.decode=function(t){for(var e=new i.default(t),r=e.getVersion(),n=e.readCodewords(),o=a.default.getDataBlocks(n,r),f=0,s=0,l=o;s<l.length;s++)f+=l[s].getNumDataCodewords();for(var d=new Uint8Array(f),c=o.length,h=0;h<c;h++){var p=o[h],w=p.getCodewords(),g=p.getNumDataCodewords();this.correctErrors(w,g);for(var v=0;v<g;v++)d[v*c+h]=w[v]}return u.default.decode(d)},t.prototype.correctErrors=function(t,e){t.length;var r=new Int32Array(t);try{this.rsDecoder.decode(r,t.length-e)}catch(t){throw new f.default}for(var n=0;n<e;n++)t[n]=r[n]},t}();e.default=s},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(23),a=r(51),u=function(t){function e(e){return void 0===e&&(e=500),t.call(this,new a.default,e)||this}return o(e,t),e}(i.BrowserCodeReader);e.BrowserDatamatrixCodeReader=u},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r,n){var o=t.call(this,e,r)||this;return o.estimatedModuleSize=n,o}return o(e,t),e.prototype.aboutEquals=function(t,e,r){if(Math.abs(e-this.getY())<=t&&Math.abs(r-this.getX())<=t){var n=Math.abs(t-this.estimatedModuleSize);return n<=1||n<=this.estimatedModuleSize}return!1},e.prototype.combineEstimate=function(t,r,n){return new e((this.getX()+r)/2,(this.getY()+t)/2,(this.estimatedModuleSize+n)/2)},e}(r(3).default);e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(88),o=r(0),i=function(){function t(t,e,r,n,o,i,a){this.image=t,this.startX=e,this.startY=r,this.width=n,this.height=o,this.moduleSize=i,this.resultPointCallback=a,this.possibleCenters=[],this.crossCheckStateCount=new Int32Array(3)}return t.prototype.find=function(){for(var t=this.startX,e=this.height,r=t+this.width,n=this.startY+e/2,i=new Int32Array(3),a=this.image,u=0;u<e;u++){var f=n+(0==(1&u)?Math.floor((u+1)/2):-Math.floor((u+1)/2));i[0]=0,i[1]=0,i[2]=0;for(var s=t;s<r&&!a.get(s,f);)s++;for(var l=0;s<r;){if(a.get(s,f))if(1===l)i[1]++;else if(2===l){var d;if(this.foundPatternCross(i)&&null!==(d=this.handlePossibleCenter(i,f,s)))return d;i[0]=i[2],i[1]=1,i[2]=0,l=1}else i[++l]++;else 1===l&&l++,i[l]++;s++}if(this.foundPatternCross(i)&&null!==(d=this.handlePossibleCenter(i,f,r)))return d}if(0!==this.possibleCenters.length)return this.possibleCenters[0];throw new o.default},t.centerFromEnd=function(t,e){return e-t[2]-t[1]/2},t.prototype.foundPatternCross=function(t){for(var e=this.moduleSize,r=e/2,n=0;n<3;n++)if(Math.abs(e-t[n])>=r)return!1;return!0},t.prototype.crossCheckVertical=function(e,r,n,o){var i=this.image,a=i.getHeight(),u=this.crossCheckStateCount;u[0]=0,u[1]=0,u[2]=0;for(var f=e;f>=0&&i.get(r,f)&&u[1]<=n;)u[1]++,f--;if(f<0||u[1]>n)return NaN;for(;f>=0&&!i.get(r,f)&&u[0]<=n;)u[0]++,f--;if(u[0]>n)return NaN;for(f=e+1;f<a&&i.get(r,f)&&u[1]<=n;)u[1]++,f++;if(f===a||u[1]>n)return NaN;for(;f<a&&!i.get(r,f)&&u[2]<=n;)u[2]++,f++;if(u[2]>n)return NaN;var s=u[0]+u[1]+u[2];return 5*Math.abs(s-o)>=2*o?NaN:this.foundPatternCross(u)?t.centerFromEnd(u,f):NaN},t.prototype.handlePossibleCenter=function(e,r,o){var i=e[0]+e[1]+e[2],a=t.centerFromEnd(e,o),u=this.crossCheckVertical(r,a,2*e[1],i);if(!isNaN(u)){for(var f=(e[0]+e[1]+e[2])/3,s=0,l=this.possibleCenters;s<l.length;s++){var d=l[s];if(d.aboutEquals(f,u,a))return d.combineEstimate(u,a,f)}var c=new n.default(a,u,f);this.possibleCenters.push(c),null!==this.resultPointCallback&&void 0!==this.resultPointCallback&&this.resultPointCallback.foundPossibleResultPoint(c)}return null},t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.bottomLeft=t[0],this.topLeft=t[1],this.topRight=t[2]}return t.prototype.getBottomLeft=function(){return this.bottomLeft},t.prototype.getTopLeft=function(){return this.topLeft},t.prototype.getTopRight=function(){return this.topRight},t}();e.default=n},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r,n,o){var i=t.call(this,e,r)||this;return i.estimatedModuleSize=n,i.count=o,void 0===o&&(i.count=1),i}return o(e,t),e.prototype.getEstimatedModuleSize=function(){return this.estimatedModuleSize},e.prototype.getCount=function(){return this.count},e.prototype.aboutEquals=function(t,e,r){if(Math.abs(e-this.getY())<=t&&Math.abs(r-this.getX())<=t){var n=Math.abs(t-this.estimatedModuleSize);return n<=1||n<=this.estimatedModuleSize}return!1},e.prototype.combineEstimate=function(t,r,n){var o=this.count+1;return new e((this.count*this.getX()+r)/o,(this.count*this.getY()+t)/o,(this.count*this.estimatedModuleSize+n)/o,o)},e}(r(3).default);e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(3),o=r(91),i=r(90),a=r(0),u=function(){function t(t,e){this.image=t,this.resultPointCallback=e,this.possibleCenters=[],this.crossCheckStateCount=new Int32Array(5),this.resultPointCallback=e}return t.prototype.getImage=function(){return this.image},t.prototype.getPossibleCenters=function(){return this.possibleCenters},t.prototype.find=function(e){var r=null!==e&&void 0!==e&&void 0!==e.get(3),o=null!==e&&void 0!==e&&void 0!==e.get(1),a=this.image,u=a.getHeight(),f=a.getWidth(),s=Math.floor(3*u/(4*t.MAX_MODULES));(s<t.MIN_SKIP||r)&&(s=t.MIN_SKIP);for(var l=!1,d=new Int32Array(5),c=s-1;c<u&&!l;c+=s){d[0]=0,d[1]=0,d[2]=0,d[3]=0,d[4]=0;for(var h=0,p=0;p<f;p++)if(a.get(p,c))1==(1&h)&&h++,d[h]++;else if(0==(1&h))if(4===h)if(t.foundPatternCross(d)){if(!0!==this.handlePossibleCenter(d,c,p,o)){d[0]=d[2],d[1]=d[3],d[2]=d[4],d[3]=1,d[4]=0,h=3;continue}if(s=2,!0===this.hasSkipped)l=this.haveMultiplyConfirmedCenters();else{var w=this.findRowSkip();w>d[2]&&(c+=w-d[2]-s,p=f-1)}h=0,d[0]=0,d[1]=0,d[2]=0,d[3]=0,d[4]=0}else d[0]=d[2],d[1]=d[3],d[2]=d[4],d[3]=1,d[4]=0,h=3;else d[++h]++;else d[h]++;t.foundPatternCross(d)&&!0===this.handlePossibleCenter(d,c,f,o)&&(s=d[0],this.hasSkipped&&(l=this.haveMultiplyConfirmedCenters()))}var g=this.selectBestPatterns();return n.default.orderBestPatterns(g),new i.default(g)},t.centerFromEnd=function(t,e){return e-t[4]-t[3]-t[2]/2},t.foundPatternCross=function(t){for(var e=0,r=0;r<5;r++){var n=t[r];if(0===n)return!1;e+=n}if(e<7)return!1;var o=e/7,i=o/2;return Math.abs(o-t[0])<i&&Math.abs(o-t[1])<i&&Math.abs(3*o-t[2])<3*i&&Math.abs(o-t[3])<i&&Math.abs(o-t[4])<i},t.prototype.getCrossCheckStateCount=function(){var t=this.crossCheckStateCount;return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t},t.prototype.crossCheckDiagonal=function(e,r,n,o){for(var i=this.getCrossCheckStateCount(),a=0,u=this.image;e>=a&&r>=a&&u.get(r-a,e-a);)i[2]++,a++;if(e<a||r<a)return!1;for(;e>=a&&r>=a&&!u.get(r-a,e-a)&&i[1]<=n;)i[1]++,a++;if(e<a||r<a||i[1]>n)return!1;for(;e>=a&&r>=a&&u.get(r-a,e-a)&&i[0]<=n;)i[0]++,a++;if(i[0]>n)return!1;var f=u.getHeight(),s=u.getWidth();for(a=1;e+a<f&&r+a<s&&u.get(r+a,e+a);)i[2]++,a++;if(e+a>=f||r+a>=s)return!1;for(;e+a<f&&r+a<s&&!u.get(r+a,e+a)&&i[3]<n;)i[3]++,a++;if(e+a>=f||r+a>=s||i[3]>=n)return!1;for(;e+a<f&&r+a<s&&u.get(r+a,e+a)&&i[4]<n;)i[4]++,a++;if(i[4]>=n)return!1;var l=i[0]+i[1]+i[2]+i[3]+i[4];return Math.abs(l-o)<2*o&&t.foundPatternCross(i)},t.prototype.crossCheckVertical=function(e,r,n,o){for(var i=this.image,a=i.getHeight(),u=this.getCrossCheckStateCount(),f=e;f>=0&&i.get(r,f);)u[2]++,f--;if(f<0)return NaN;for(;f>=0&&!i.get(r,f)&&u[1]<=n;)u[1]++,f--;if(f<0||u[1]>n)return NaN;for(;f>=0&&i.get(r,f)&&u[0]<=n;)u[0]++,f--;if(u[0]>n)return NaN;for(f=e+1;f<a&&i.get(r,f);)u[2]++,f++;if(f===a)return NaN;for(;f<a&&!i.get(r,f)&&u[3]<n;)u[3]++,f++;if(f===a||u[3]>=n)return NaN;for(;f<a&&i.get(r,f)&&u[4]<n;)u[4]++,f++;if(u[4]>=n)return NaN;var s=u[0]+u[1]+u[2]+u[3]+u[4];return 5*Math.abs(s-o)>=2*o?NaN:t.foundPatternCross(u)?t.centerFromEnd(u,f):NaN},t.prototype.crossCheckHorizontal=function(e,r,n,o){for(var i=this.image,a=i.getWidth(),u=this.getCrossCheckStateCount(),f=e;f>=0&&i.get(f,r);)u[2]++,f--;if(f<0)return NaN;for(;f>=0&&!i.get(f,r)&&u[1]<=n;)u[1]++,f--;if(f<0||u[1]>n)return NaN;for(;f>=0&&i.get(f,r)&&u[0]<=n;)u[0]++,f--;if(u[0]>n)return NaN;for(f=e+1;f<a&&i.get(f,r);)u[2]++,f++;if(f===a)return NaN;for(;f<a&&!i.get(f,r)&&u[3]<n;)u[3]++,f++;if(f===a||u[3]>=n)return NaN;for(;f<a&&i.get(f,r)&&u[4]<n;)u[4]++,f++;if(u[4]>=n)return NaN;var s=u[0]+u[1]+u[2]+u[3]+u[4];return 5*Math.abs(s-o)>=o?NaN:t.foundPatternCross(u)?t.centerFromEnd(u,f):NaN},t.prototype.handlePossibleCenter=function(e,r,n,i){var a=e[0]+e[1]+e[2]+e[3]+e[4],u=t.centerFromEnd(e,n),f=this.crossCheckVertical(r,Math.floor(u),e[2],a);if(!isNaN(f)&&(u=this.crossCheckHorizontal(Math.floor(u),Math.floor(f),e[2],a),!isNaN(u)&&(!i||this.crossCheckDiagonal(Math.floor(f),Math.floor(u),e[2],a)))){for(var s=a/7,l=!1,d=this.possibleCenters,c=0,h=d.length;c<h;c++){var p=d[c];if(p.aboutEquals(s,f,u)){d[c]=p.combineEstimate(f,u,s),l=!0;break}}if(!l){var w=new o.default(u,f,s);d.push(w),null!==this.resultPointCallback&&void 0!==this.resultPointCallback&&this.resultPointCallback.foundPossibleResultPoint(w)}return!0}return!1},t.prototype.findRowSkip=function(){if(this.possibleCenters.length<=1)return 0;for(var e=null,r=0,n=this.possibleCenters;r<n.length;r++){var o=n[r];if(o.getCount()>=t.CENTER_QUORUM){if(null!=e)return this.hasSkipped=!0,Math.floor((Math.abs(e.getX()-o.getX())-Math.abs(e.getY()-o.getY()))/2);e=o}}return 0},t.prototype.haveMultiplyConfirmedCenters=function(){for(var e=0,r=0,n=this.possibleCenters.length,o=0,i=this.possibleCenters;o<i.length;o++)(l=i[o]).getCount()>=t.CENTER_QUORUM&&(e++,r+=l.getEstimatedModuleSize());if(e<3)return!1;for(var a=r/n,u=0,f=0,s=this.possibleCenters;f<s.length;f++){var l=s[f];u+=Math.abs(l.getEstimatedModuleSize()-a)}return u<=.05*r},t.prototype.selectBestPatterns=function(){var t=this.possibleCenters.length;if(t<3)throw new a.default;var e,r=this.possibleCenters;if(t>3){for(var n=0,o=0,i=0,u=this.possibleCenters;i<u.length;i++){var f=u[i].getEstimatedModuleSize();n+=f,o+=f*f}e=n/t;var s=Math.sqrt(o/t-e*e);r.sort(function(t,r){var n=Math.abs(r.getEstimatedModuleSize()-e),o=Math.abs(t.getEstimatedModuleSize()-e);return n<o?-1:n>o?1:0});for(var l=Math.max(.2*e,s),d=0;d<r.length&&r.length>3;d++){var c=r[d];Math.abs(c.getEstimatedModuleSize()-e)>l&&(r.splice(d,1),d--)}}if(r.length>3){n=0;for(var h=0,p=r;h<p.length;h++)n+=p[h].getEstimatedModuleSize();e=n/r.length,r.sort(function(t,r){if(r.getCount()===t.getCount()){var n=Math.abs(r.getEstimatedModuleSize()-e),o=Math.abs(t.getEstimatedModuleSize()-e);return n<o?1:n>o?-1:0}return r.getCount()-t.getCount()}),r.splice(3)}return[r[0],r[1],r[2]]},t.CENTER_QUORUM=2,t.MIN_SKIP=3,t.MAX_MODULES=57,t}();e.default=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(3),o=r(28),i=r(27),a=r(26),u=r(17),f=r(33),s=r(92),l=r(89),d=r(0),c=function(){function t(t){this.image=t}return t.prototype.getImage=function(){return this.image},t.prototype.getResultPointCallback=function(){return this.resultPointCallback},t.prototype.detect=function(t){this.resultPointCallback=null===t||void 0===t?null:t.get(9);var e=new s.default(this.image,this.resultPointCallback).find(t);return this.processFinderPatternInfo(e)},t.prototype.processFinderPatternInfo=function(e){var r=e.getTopLeft(),n=e.getTopRight(),i=e.getBottomLeft(),a=this.calculateModuleSize(r,n,i);if(a<1)throw new d.default("No pattern found in proccess finder.");var u=t.computeDimension(r,n,i,a),s=f.default.getProvisionalVersionForDimension(u),l=s.getDimensionForVersion()-7,c=null;if(s.getAlignmentPatternCenters().length>0)for(var h=n.getX()-r.getX()+i.getX(),p=n.getY()-r.getY()+i.getY(),w=1-3/l,g=Math.floor(r.getX()+w*(h-r.getX())),v=Math.floor(r.getY()+w*(p-r.getY())),_=4;_<=16;_<<=1)try{c=this.findAlignmentInRegion(a,g,v,_);break}catch(t){if(!(t instanceof d.default))throw t}var y,m=t.createTransform(r,n,i,c,u),E=t.sampleGrid(this.image,m,u);return y=null===c?[i,r,n]:[i,r,n,c],new o.default(E,y)},t.createTransform=function(t,e,r,n,o){var i,u,f,s,l=o-3.5;return null!==n?(i=n.getX(),u=n.getY(),s=f=l-3):(i=e.getX()-t.getX()+r.getX(),u=e.getY()-t.getY()+r.getY(),f=l,s=l),a.default.quadrilateralToQuadrilateral(3.5,3.5,l,3.5,f,s,3.5,l,t.getX(),t.getY(),e.getX(),e.getY(),i,u,r.getX(),r.getY())},t.sampleGrid=function(t,e,r){return i.default.getInstance().sampleGridWithTransform(t,r,r,e)},t.computeDimension=function(t,e,r,o){var i=u.default.round(n.default.distance(t,e)/o),a=u.default.round(n.default.distance(t,r)/o),f=Math.floor((i+a)/2)+7;switch(3&f){case 0:f++;break;case 2:f--;break;case 3:throw new d.default("Dimensions could be not found.")}return f},t.prototype.calculateModuleSize=function(t,e,r){return(this.calculateModuleSizeOneWay(t,e)+this.calculateModuleSizeOneWay(t,r))/2},t.prototype.calculateModuleSizeOneWay=function(t,e){var r=this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(t.getX()),Math.floor(t.getY()),Math.floor(e.getX()),Math.floor(e.getY())),n=this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(e.getX()),Math.floor(e.getY()),Math.floor(t.getX()),Math.floor(t.getY()));return isNaN(r)?n/7:isNaN(n)?r/7:(r+n)/14},t.prototype.sizeOfBlackWhiteBlackRunBothWays=function(t,e,r,n){var o=this.sizeOfBlackWhiteBlackRun(t,e,r,n),i=1,a=t-(r-t);a<0?(i=t/(t-a),a=0):a>=this.image.getWidth()&&(i=(this.image.getWidth()-1-t)/(a-t),a=this.image.getWidth()-1);var u=Math.floor(e-(n-e)*i);return i=1,u<0?(i=e/(e-u),u=0):u>=this.image.getHeight()&&(i=(this.image.getHeight()-1-e)/(u-e),u=this.image.getHeight()-1),a=Math.floor(t+(a-t)*i),(o+=this.sizeOfBlackWhiteBlackRun(t,e,a,u))-1},t.prototype.sizeOfBlackWhiteBlackRun=function(t,e,r,n){var o=Math.abs(n-e)>Math.abs(r-t);if(o){var i=t;t=e,e=i,i=r,r=n,n=i}for(var a=Math.abs(r-t),f=Math.abs(n-e),s=-a/2,l=t<r?1:-1,d=e<n?1:-1,c=0,h=r+l,p=t,w=e;p!==h;p+=l){var g=o?w:p,v=o?p:w;if(1===c===this.image.get(g,v)){if(2===c)return u.default.distance(p,w,t,e);c++}if((s+=f)>0){if(w===n)break;w+=d,s-=a}}return 2===c?u.default.distance(r+l,n,t,e):NaN},t.prototype.findAlignmentInRegion=function(t,e,r,n){var o=Math.floor(n*t),i=Math.max(0,e-o),a=Math.min(this.image.getWidth()-1,e+o);if(a-i<3*t)throw new d.default("Alignment top exceeds estimated module size.");var u=Math.max(0,r-o),f=Math.min(this.image.getHeight()-1,r+o);if(f-u<3*t)throw new d.default("Alignment bottom exceeds estimated module size.");return new l.default(this.image,i,u,a-i,f-u,t,this.resultPointCallback).find()},t}();e.default=c},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(31),o=r(15),i=r(30),a=r(55),u=r(54),f=r(12),s=r(29),l=r(4),d=function(){function t(){}return t.decode=function(e,r,a,s){var d=new n.default(e),c=new f.default,h=new Array,p=-1,w=-1;try{var g=null,v=!1,_=void 0;do{if(d.available()<4)_=u.default.TERMINATOR;else{var y=d.readBits(4);_=u.default.forBits(y)}switch(_){case u.default.TERMINATOR:break;case u.default.FNC1_FIRST_POSITION:case u.default.FNC1_SECOND_POSITION:v=!0;break;case u.default.STRUCTURED_APPEND:if(d.available()<16)throw new l.default;p=d.readBits(8),w=d.readBits(8);break;case u.default.ECI:var m=t.parseECIValue(d);if(null===(g=o.default.getCharacterSetECIByValue(m)))throw new l.default;break;case u.default.HANZI:var E=d.readBits(4),C=d.readBits(_.getCharacterCountBits(r));E===t.GB2312_SUBSET&&t.decodeHanziSegment(d,c,C);break;default:var A=d.readBits(_.getCharacterCountBits(r));switch(_){case u.default.NUMERIC:t.decodeNumericSegment(d,c,A);break;case u.default.ALPHANUMERIC:t.decodeAlphanumericSegment(d,c,A,v);break;case u.default.BYTE:t.decodeByteSegment(d,c,A,g,h,s);break;case u.default.KANJI:t.decodeKanjiSegment(d,c,A);break;default:throw new l.default}}}while(_!==u.default.TERMINATOR)}catch(t){throw new l.default}return new i.default(e,c.toString(),0===h.length?null:h,null===a?null:a.toString(),p,w)},t.decodeHanziSegment=function(t,e,r){if(13*r>t.available())throw new l.default;for(var n=new Uint8Array(2*r),o=0;r>0;){var i=t.readBits(13),u=i/96<<8&4294967295|i%96;u+=u<959?41377:42657,n[o]=u>>8&255,n[o+1]=255&u,o+=2,r--}try{e.append(s.default.decode(n,a.default.GB2312))}catch(t){throw new l.default(t)}},t.decodeKanjiSegment=function(t,e,r){if(13*r>t.available())throw new l.default;for(var n=new Uint8Array(2*r),o=0;r>0;){var i=t.readBits(13),u=i/192<<8&4294967295|i%192;u+=u<7936?33088:49472,n[o]=u>>8,n[o+1]=u,o+=2,r--}try{e.append(s.default.decode(n,a.default.SHIFT_JIS))}catch(t){throw new l.default(t)}},t.decodeByteSegment=function(t,e,r,n,o,i){if(8*r>t.available())throw new l.default;for(var u,f=new Uint8Array(r),d=0;d<r;d++)f[d]=t.readBits(8);u=null===n?a.default.guessEncoding(f,i):n.getName();try{e.append(s.default.decode(f,u))}catch(t){throw new l.default(t)}o.push(f)},t.toAlphaNumericChar=function(e){if(e>=t.ALPHANUMERIC_CHARS.length)throw new l.default;return t.ALPHANUMERIC_CHARS[e]},t.decodeAlphanumericSegment=function(e,r,n,o){for(var i=r.length();n>1;){if(e.available()<11)throw new l.default;var a=e.readBits(11);r.append(t.toAlphaNumericChar(Math.floor(a/45))),r.append(t.toAlphaNumericChar(a%45)),n-=2}if(1===n){if(e.available()<6)throw new l.default;r.append(t.toAlphaNumericChar(e.readBits(6)))}if(o)for(var u=i;u<r.length();u++)"%"===r.charAt(u)&&(u<r.length()-1&&"%"===r.charAt(u+1)?r.deleteCharAt(u+1):r.setCharAt(u,String.fromCharCode(29)))},t.decodeNumericSegment=function(e,r,n){for(;n>=3;){if(e.available()<10)throw new l.default;var o=e.readBits(10);if(o>=1e3)throw new l.default;r.append(t.toAlphaNumericChar(Math.floor(o/100))),r.append(t.toAlphaNumericChar(Math.floor(o/10)%10)),r.append(t.toAlphaNumericChar(o%10)),n-=3}if(2===n){if(e.available()<7)throw new l.default;var i=e.readBits(7);if(i>=100)throw new l.default;r.append(t.toAlphaNumericChar(Math.floor(i/10))),r.append(t.toAlphaNumericChar(i%10))}else if(1===n){if(e.available()<4)throw new l.default;var a=e.readBits(4);if(a>=10)throw new l.default;r.append(t.toAlphaNumericChar(a))}},t.parseECIValue=function(t){var e=t.readBits(8);if(0==(128&e))return 127&e;if(128==(192&e))return(63&e)<<8&4294967295|t.readBits(8);if(192==(224&e))return(31&e)<<16&4294967295|t.readBits(16);throw new l.default},t.ALPHANUMERIC_CHARS="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:",t.GB2312_SUBSET=1,t}();e.default=d},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=function(){function t(t,e){this.numDataCodewords=t,this.codewords=e}return t.getDataBlocks=function(e,r,o){if(e.length!==r.getTotalCodewords())throw new n.default;for(var i=r.getECBlocksForLevel(o),a=0,u=i.getECBlocks(),f=0,s=u;f<s.length;f++)a+=(p=s[f]).getCount();for(var l=new Array(a),d=0,c=0,h=u;c<h.length;c++)for(var p=h[c],w=0;w<p.getCount();w++){var g=p.getDataCodewords(),v=i.getECCodewordsPerBlock()+g;l[d++]=new t(g,new Uint8Array(v))}for(var _=l[0].codewords.length,y=l.length-1;y>=0&&l[y].codewords.length!==_;)y--;y++;var m=_-i.getECCodewordsPerBlock(),E=0;for(w=0;w<m;w++)for(var C=0;C<d;C++)l[C].codewords[w]=e[E++];for(C=y;C<d;C++)l[C].codewords[m]=e[E++];var A=l[0].codewords.length;for(w=m;w<A;w++)for(C=0;C<d;C++){var S=C<y?w:w+1;l[C].codewords[S]=e[E++]}return l},t.prototype.getNumDataCodewords=function(){return this.numDataCodewords},t.prototype.getCodewords=function(){return this.codewords},t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.DATA_MASK_000=0]="DATA_MASK_000",t[t.DATA_MASK_001=1]="DATA_MASK_001",t[t.DATA_MASK_010=2]="DATA_MASK_010",t[t.DATA_MASK_011=3]="DATA_MASK_011",t[t.DATA_MASK_100=4]="DATA_MASK_100",t[t.DATA_MASK_101=5]="DATA_MASK_101",t[t.DATA_MASK_110=6]="DATA_MASK_110",t[t.DATA_MASK_111=7]="DATA_MASK_111"}(e.DataMaskValues||(e.DataMaskValues={}));var n=function(){function t(t,e){this.value=t,this.isMasked=e}return t.prototype.unmaskBitMatrix=function(t,e){for(var r=0;r<e;r++)for(var n=0;n<e;n++)this.isMasked(r,n)&&t.flip(n,r)},t.values=new Map([[0,new t(0,function(t,e){return 0==(t+e&1)})],[1,new t(1,function(t,e){return 0==(1&t)})],[2,new t(2,function(t,e){return e%3==0})],[3,new t(3,function(t,e){return(t+e)%3==0})],[4,new t(4,function(t,e){return 0==(Math.floor(t/2)+Math.floor(e/3)&1)})],[5,new t(5,function(t,e){return t*e%6==0})],[6,new t(6,function(t,e){return t*e%6<3})],[7,new t(7,function(t,e){return 0==(t+e+t*e%3&1)})]]),t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){this.count=t,this.dataCodewords=e}return t.prototype.getCount=function(){return this.count},t.prototype.getDataCodewords=function(){return this.dataCodewords},t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];this.ecCodewordsPerBlock=t,this.ecBlocks=e}return t.prototype.getECCodewordsPerBlock=function(){return this.ecCodewordsPerBlock},t.prototype.getNumBlocks=function(){for(var t=0,e=0,r=this.ecBlocks;e<r.length;e++)t+=r[e].getCount();return t},t.prototype.getTotalECCodewords=function(){return this.ecCodewordsPerBlock*this.getNumBlocks()},t.prototype.getECBlocks=function(){return this.ecBlocks},t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(33),o=r(57),i=r(96),a=r(4),u=function(){function t(t){var e=t.getHeight();if(e<21||1!=(3&e))throw new a.default;this.bitMatrix=t}return t.prototype.readFormatInformation=function(){if(null!==this.parsedFormatInfo&&void 0!==this.parsedFormatInfo)return this.parsedFormatInfo;for(var t=0,e=0;e<6;e++)t=this.copyBit(e,8,t);t=this.copyBit(7,8,t),t=this.copyBit(8,8,t),t=this.copyBit(8,7,t);for(var r=5;r>=0;r--)t=this.copyBit(8,r,t);var n=this.bitMatrix.getHeight(),i=0,u=n-7;for(r=n-1;r>=u;r--)i=this.copyBit(8,r,i);for(e=n-8;e<n;e++)i=this.copyBit(e,8,i);if(this.parsedFormatInfo=o.default.decodeFormatInformation(t,i),null!==this.parsedFormatInfo)return this.parsedFormatInfo;throw new a.default},t.prototype.readVersion=function(){if(null!==this.parsedVersion&&void 0!==this.parsedVersion)return this.parsedVersion;var t=this.bitMatrix.getHeight(),e=Math.floor((t-17)/4);if(e<=6)return n.default.getVersionForNumber(e);for(var r=0,o=t-11,i=5;i>=0;i--)for(var u=t-9;u>=o;u--)r=this.copyBit(u,i,r);var f=n.default.decodeVersionInformation(r);if(null!==f&&f.getDimensionForVersion()===t)return this.parsedVersion=f,f;for(r=0,u=5;u>=0;u--)for(i=t-9;i>=o;i--)r=this.copyBit(u,i,r);if(null!==(f=n.default.decodeVersionInformation(r))&&f.getDimensionForVersion()===t)return this.parsedVersion=f,f;throw new a.default},t.prototype.copyBit=function(t,e,r){return(this.isMirror?this.bitMatrix.get(e,t):this.bitMatrix.get(t,e))?r<<1|1:r<<1},t.prototype.readCodewords=function(){var t=this.readFormatInformation(),e=this.readVersion(),r=i.default.values.get(t.getDataMask()),n=this.bitMatrix.getHeight();r.unmaskBitMatrix(this.bitMatrix,n);for(var o=e.buildFunctionPattern(),u=!0,f=new Uint8Array(e.getTotalCodewords()),s=0,l=0,d=0,c=n-1;c>0;c-=2){6===c&&c--;for(var h=0;h<n;h++)for(var p=u?n-1-h:h,w=0;w<2;w++)o.get(c-w,p)||(d++,l<<=1,this.bitMatrix.get(c-w,p)&&(l|=1),8===d&&(f[s++]=l,d=0,l=0));u=!u}if(s!==e.getTotalCodewords())throw new a.default;return f},t.prototype.remask=function(){if(null!==this.parsedFormatInfo){var t=i.default.values[this.parsedFormatInfo.getDataMask()],e=this.bitMatrix.getHeight();t.unmaskBitMatrix(this.bitMatrix,e)}},t.prototype.setMirror=function(t){this.parsedVersion=null,this.parsedFormatInfo=null,this.isMirror=t},t.prototype.mirror=function(){for(var t=this.bitMatrix,e=0,r=t.getWidth();e<r;e++)for(var n=e+1,o=t.getHeight();n<o;n++)t.get(e,n)!==t.get(n,e)&&(t.flip(n,e),t.flip(e,n))},t}();e.default=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(6),o=r(13),i=r(34),a=r(99),u=r(56),f=r(95),s=r(94),l=r(11),d=function(){function t(){this.rsDecoder=new i.default(o.default.QR_CODE_FIELD_256)}return t.prototype.decodeBooleanArray=function(t,e){return this.decodeBitMatrix(n.default.parseFromBooleanArray(t),e)},t.prototype.decodeBitMatrix=function(t,e){var r=new a.default(t),n=null;try{return this.decodeBitMatrixParser(r,e)}catch(t){n=t}try{r.remask(),r.setMirror(!0),r.readVersion(),r.readFormatInformation(),r.mirror();var o=this.decodeBitMatrixParser(r,e);return o.setOther(new u.default(!0)),o}catch(t){if(null!==n)throw n;throw t}},t.prototype.decodeBitMatrixParser=function(t,e){for(var r=t.readVersion(),n=t.readFormatInformation().getErrorCorrectionLevel(),o=t.readCodewords(),i=f.default.getDataBlocks(o,r,n),a=0,u=0,l=i;u<l.length;u++)a+=(w=l[u]).getNumDataCodewords();for(var d=new Uint8Array(a),c=0,h=0,p=i;h<p.length;h++){var w,g=(w=p[h]).getCodewords(),v=w.getNumDataCodewords();this.correctErrors(g,v);for(var _=0;_<v;_++)d[c++]=g[_]}return s.default.decode(d,r,n,e)},t.prototype.correctErrors=function(t,e){t.length;var r=new Int32Array(t);try{this.rsDecoder.decode(r,t.length-e)}catch(t){throw new l.default}for(var n=0;n<e;n++)t[n]=r[n]},t}();e.default=d},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.floatToIntBits=function(t){return t},t}();e.default=n},function(t,e,r){!function(t){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};function r(t,e){void 0===e&&(e=t.constructor);var r=Error.captureStackTrace;r&&r(t,e)}var n=function(t){function n(e){var n,o,i,a=this.constructor,u=t.call(this,e)||this;return u.name=a.name,n=u,o=a.prototype,(i=Object.setPrototypeOf)?i(n,o):n.__proto__=o,r(u),u}return function(t,r){function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}(n,t),n}(Error);t.CustomError=n,t.customErrorFactory=function(t,e){function n(){for(var o=[],i=0;i<arguments.length;i++)o[i]=arguments[i];if(!(this instanceof n))return new(n.bind.apply(n,[void 0].concat(o)));e.apply(this,o),t.apply(this,o),this.name=t.name||e.name,r(this,n)}return void 0===e&&(e=Error),Object.defineProperties(n,{prototype:{value:Object.create(e.prototype,{constructor:{value:n,writable:!0,configurable:!0}})}})}}(e)},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=r(23),a=r(35),u=function(t){function e(e){return void 0===e&&(e=500),t.call(this,new a.default,e)||this}return o(e,t),e}(i.BrowserCodeReader);e.BrowserQRCodeReader=u},function(t,e,r){t.exports=r(66)}])});
//# sourceMappingURL=index.min.js.map
      };
    };
  }
}, {package:"@zxing/library",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@zxing/library/umd/index.min.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/higher-order-components/with-modal-props/with-modal-props.js", {"../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/higher-order-components/with-modal-props/with-modal-props.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withModalProps;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactRedux = require("react-redux");

var _actions = require("../../../store/actions");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const mapStateToProps = state => {
  const {
    appState
  } = state;
  const {
    props: modalProps
  } = appState.modal.modalState;
  return _objectSpread({}, modalProps);
};

const mapDispatchToProps = dispatch => {
  return {
    hideModal: () => dispatch((0, _actions.hideModal)())
  };
};

function withModalProps(Component) {
  return (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Component);
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/higher-order-components/with-modal-props/with-modal-props.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/account-modal-container/index.js", {"./account-modal-container.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/account-modal-container/account-modal-container.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/account-modal-container/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accountModalContainer.default;
  }
});

var _accountModalContainer = _interopRequireDefault(require("./account-modal-container.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/account-modal-container/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/readonly-input/index.js", {"./readonly-input":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/readonly-input/readonly-input.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/readonly-input/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _readonlyInput.default;
  }
});

var _readonlyInput = _interopRequireDefault(require("./readonly-input"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/readonly-input/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/modal.component.js", {"../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/modal.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _button = _interopRequireDefault(require("../../ui/button"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class Modal extends _react.PureComponent {
  render() {
    const {
      children,
      headerText,
      onClose,
      onSubmit,
      submitType,
      submitText,
      submitDisabled,
      onCancel,
      cancelType,
      cancelText,
      contentClass,
      containerClass,
      hideFooter
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('modal-container', containerClass)
    }, headerText && /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header-text"
    }, headerText), /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header-close",
      onClick: onClose
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('modal-container__content', contentClass)
    }, children), hideFooter ? null : /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__footer"
    }, onCancel && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: cancelType,
      onClick: onCancel,
      className: "modal-container__footer-button"
    }, cancelText), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: submitType,
      onClick: onSubmit,
      disabled: submitDisabled,
      className: "modal-container__footer-button"
    }, submitText)));
  }

}

exports.default = Modal;
(0, _defineProperty2.default)(Modal, "propTypes", {
  children: _propTypes.default.node,
  contentClass: _propTypes.default.string,
  containerClass: _propTypes.default.string,
  // Header text
  headerText: _propTypes.default.string,
  onClose: _propTypes.default.func,
  // Submit button (right button)
  onSubmit: _propTypes.default.func,
  submitType: _propTypes.default.string,
  submitText: _propTypes.default.string,
  submitDisabled: _propTypes.default.bool,
  hideFooter: _propTypes.default.bool,
  // Cancel button (left button)
  onCancel: _propTypes.default.func,
  cancelType: _propTypes.default.string,
  cancelText: _propTypes.default.string
});
(0, _defineProperty2.default)(Modal, "defaultProps", {
  submitType: 'primary',
  cancelType: 'secondary'
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/modal.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/modal-content/index.js", {"./modal-content.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/modal-content/modal-content.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/modal-content/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _modalContent.default;
  }
});

var _modalContent = _interopRequireDefault(require("./modal-content.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modal/modal-content/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/editable-label/index.js", {"./editable-label":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/editable-label/editable-label.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/editable-label/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editableLabel.default;
  }
});

var _editableLabel = _interopRequireDefault(require("./editable-label"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/editable-label/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/qr-code/index.js", {"./qr-code":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/qr-code/qr-code.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/qr-code/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _qrCode.default;
  }
});

var _qrCode = _interopRequireDefault(require("./qr-code"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/qr-code/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/basic-tab-content/index.js", {"./basic-tab-content.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/basic-tab-content/basic-tab-content.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/basic-tab-content/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _basicTabContent.default;
  }
});

var _basicTabContent = _interopRequireDefault(require("./basic-tab-content.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/basic-tab-content/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/advanced-tab-content/index.js", {"./advanced-tab-content.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/advanced-tab-content/advanced-tab-content.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/advanced-tab-content/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _advancedTabContent.default;
  }
});

var _advancedTabContent = _interopRequireDefault(require("./advanced-tab-content.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-modal-page-container/advanced-tab-content/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/cancel-transaction/cancel-transaction-gas-fee/index.js", {"./cancel-transaction-gas-fee.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/cancel-transaction/cancel-transaction-gas-fee/cancel-transaction-gas-fee.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/cancel-transaction/cancel-transaction-gas-fee/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _cancelTransactionGasFee.default;
  }
});

var _cancelTransactionGasFee = _interopRequireDefault(require("./cancel-transaction-gas-fee.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/cancel-transaction/cancel-transaction-gas-fee/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/advanced-gas-inputs/index.js", {"./advanced-gas-inputs.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/advanced-gas-inputs/advanced-gas-inputs.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/advanced-gas-inputs/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _advancedGasInputs.default;
  }
});

var _advancedGasInputs = _interopRequireDefault(require("./advanced-gas-inputs.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/advanced-gas-inputs/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/first-time-flow-switch/first-time-flow-switch.component.js", {"../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/first-time-flow-switch/first-time-flow-switch.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../../helpers/constants/routes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class FirstTimeFlowSwitch extends _react.PureComponent {
  render() {
    const {
      completedOnboarding,
      isInitialized,
      isUnlocked,
      seedPhraseBackedUp
    } = this.props;

    if (completedOnboarding) {
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.DEFAULT_ROUTE
        }
      });
    }

    if (seedPhraseBackedUp !== null) {
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.INITIALIZE_END_OF_FLOW_ROUTE
        }
      });
    }

    if (isUnlocked) {
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.LOCK_ROUTE
        }
      });
    }

    if (!isInitialized) {
      /* eslint-disable prefer-const */
      let redirect; ///: BEGIN:ONLY_INCLUDE_IN(main,beta)

      redirect = /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.INITIALIZE_WELCOME_ROUTE
        }
      }); ///: END:ONLY_INCLUDE_IN

      /* eslint-enable prefer-const */

      return redirect;
    }

    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.INITIALIZE_UNLOCK_ROUTE
      }
    });
  }

}

exports.default = FirstTimeFlowSwitch;
(0, _defineProperty2.default)(FirstTimeFlowSwitch, "propTypes", {
  completedOnboarding: _propTypes.default.bool,
  isInitialized: _propTypes.default.bool,
  isUnlocked: _propTypes.default.bool,
  seedPhraseBackedUp: _propTypes.default.bool
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/first-time-flow-switch/first-time-flow-switch.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/select-action/select-action.component.js", {"../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../components/ui/metafox-logo":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/metafox-logo/index.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/select-action/select-action.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _routes = require("../../../helpers/constants/routes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SelectAction extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "handleCreate", () => {
      this.props.setFirstTimeFlowType('create');
      this.props.history.push(_routes.INITIALIZE_METAMETRICS_OPT_IN_ROUTE);
    });
    (0, _defineProperty2.default)(this, "handleImport", () => {
      this.props.setFirstTimeFlowType('import');
      this.props.history.push(_routes.INITIALIZE_METAMETRICS_OPT_IN_ROUTE);
    });
  }

  componentDidMount() {
    const {
      history,
      isInitialized,
      nextRoute
    } = this.props;

    if (isInitialized) {
      history.push(nextRoute);
    }
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__wrapper"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__body-header"
    }, t('newToMetaMask')), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__select-buttons"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__select-button"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-symbol"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "./images/download-alt.svg",
      alt: ""
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-text-big"
    }, t('noAlreadyHaveSeed')), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-text-small"
    }, t('importYourExisting'))), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      onClick: this.handleImport
    }, t('importWallet'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__select-button"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-symbol"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "./images/thin-plus.svg",
      alt: ""
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-text-big"
    }, t('letsGoSetUp')), /*#__PURE__*/_react.default.createElement("div", {
      className: "select-action__button-text-small"
    }, t('thisWillCreate'))), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      onClick: this.handleCreate
    }, t('createAWallet')))))));
  }

}

exports.default = SelectAction;
(0, _defineProperty2.default)(SelectAction, "propTypes", {
  history: _propTypes.default.object,
  isInitialized: _propTypes.default.bool,
  setFirstTimeFlowType: _propTypes.default.func,
  nextRoute: _propTypes.default.string
});
(0, _defineProperty2.default)(SelectAction, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/select-action/select-action.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/metametrics-opt-in/metametrics-opt-in.component.js", {"../../../components/ui/metafox-logo":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/metafox-logo/index.js","../../../components/ui/page-container/page-container-footer":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/page-container-footer/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/metametrics-opt-in/metametrics-opt-in.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _pageContainerFooter = _interopRequireDefault(require("../../../components/ui/page-container/page-container-footer"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class MetaMetricsOptIn extends _react.Component {
  render() {
    const {
      metricsEvent,
      t
    } = this.context;
    const {
      nextRoute,
      history,
      setParticipateInMetaMetrics,
      firstTimeSelectionMetaMetricsName,
      participateInMetaMetrics
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__main"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__body-graphic"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "/images/logo/D-Wallet-Verti.svg",
      alt: ""
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__title"
    }, t('metametricsHelpImproveMetaMask')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__description"
    }, t('metametricsOptInDescription')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__description"
    }, t('metametricsCommitmentsIntro')), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__committments"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsAllowOptOut'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsSendAnonymizedEvents'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row metametrics-opt-in__break-row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverCollectKeysEtc', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverCollectKeys"
    }, t('metametricsCommitmentsBoldNever'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverCollectIP', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverCollectIP"
    }, t('metametricsCommitmentsBoldNever'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-times"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__row-description"
    }, t('metametricsCommitmentsNeverSellDataForProfit', [/*#__PURE__*/_react.default.createElement("span", {
      className: "metametrics-opt-in__bold",
      key: "neverSellData"
    }, t('metametricsCommitmentsBoldNever'))]))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__footer"
    }, /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: async () => {
        await setParticipateInMetaMetrics(false);

        try {
          if (participateInMetaMetrics === null || participateInMetaMetrics === true) {
            await metricsEvent({
              eventOpts: {
                category: 'Onboarding',
                action: 'Metrics Option',
                name: 'Metrics Opt Out'
              },
              isOptIn: true,
              flushImmediately: true
            });
          }
        } finally {
          history.push(nextRoute);
        }
      },
      cancelText: t('noThanks'),
      hideCancel: false,
      onSubmit: async () => {
        const [, metaMetricsId] = await setParticipateInMetaMetrics(true);

        try {
          const metrics = [];

          if (participateInMetaMetrics === null || participateInMetaMetrics === false) {
            metrics.push(metricsEvent({
              eventOpts: {
                category: 'Onboarding',
                action: 'Metrics Option',
                name: 'Metrics Opt In'
              },
              isOptIn: true,
              flushImmediately: true
            }));
          }

          metrics.push(metricsEvent({
            eventOpts: {
              category: 'Onboarding',
              action: 'Import or Create',
              name: firstTimeSelectionMetaMetricsName
            },
            isOptIn: true,
            metaMetricsId,
            flushImmediately: true
          }));
          await Promise.all(metrics);
        } finally {
          history.push(nextRoute);
        }
      },
      submitText: t('affirmAgree'),
      disabled: false
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "metametrics-opt-in__bottom-text"
    }, t('gdprMessage', [/*#__PURE__*/_react.default.createElement("a", {
      key: "metametrics-bottom-text-wrapper",
      href: "https://d-wallet.io/privacypolicy",
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('gdprMessagePrivacyPolicy'))])))));
  }

}

exports.default = MetaMetricsOptIn;
(0, _defineProperty2.default)(MetaMetricsOptIn, "propTypes", {
  history: _propTypes.default.object,
  setParticipateInMetaMetrics: _propTypes.default.func,
  nextRoute: _propTypes.default.string,
  firstTimeSelectionMetaMetricsName: _propTypes.default.string,
  participateInMetaMetrics: _propTypes.default.bool
});
(0, _defineProperty2.default)(MetaMetricsOptIn, "contextTypes", {
  metricsEvent: _propTypes.default.func,
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/metametrics-opt-in/metametrics-opt-in.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/welcome/welcome.component.js", {"../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../components/ui/mascot":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/mascot/index.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../helpers/utils/build-types":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/build-types.js","./beta-welcome-footer.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/welcome/beta-welcome-footer.component.js","./welcome-footer.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/welcome/welcome-footer.component.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","events":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/browserify/node_modules/events/events.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/welcome/welcome.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _events = _interopRequireDefault(require("events"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _mascot = _interopRequireDefault(require("../../../components/ui/mascot"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _routes = require("../../../helpers/constants/routes");

var _buildTypes = require("../../../helpers/utils/build-types");

var _welcomeFooter = _interopRequireDefault(require("./welcome-footer.component"));

var _betaWelcomeFooter = _interopRequireDefault(require("./beta-welcome-footer.component"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class Welcome extends _react.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "handleContinue", () => {
      this.props.history.push(_routes.INITIALIZE_SELECT_ACTION_ROUTE);
    });
    this.animationEventEmitter = new _events.default();
  }

  componentDidMount() {
    const {
      history,
      participateInMetaMetrics,
      welcomeScreenSeen
    } = this.props;

    if (welcomeScreenSeen && participateInMetaMetrics !== null) {
      history.push(_routes.INITIALIZE_CREATE_PASSWORD_ROUTE);
    } else if (welcomeScreenSeen) {
      history.push(_routes.INITIALIZE_SELECT_ACTION_ROUTE);
    }
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "welcome-page__wrapper"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "welcome-page"
    }, /*#__PURE__*/_react.default.createElement(_mascot.default, {
      animationEventEmitter: this.animationEventEmitter,
      width: "0",
      height: "0"
    }), (0, _buildTypes.isBeta)() ? /*#__PURE__*/_react.default.createElement(_betaWelcomeFooter.default, null) : /*#__PURE__*/_react.default.createElement(_welcomeFooter.default, null), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      onClick: this.handleContinue
    }, t('getStarted'))));
  }

}

exports.default = Welcome;
(0, _defineProperty2.default)(Welcome, "propTypes", {
  history: _propTypes.default.object,
  participateInMetaMetrics: _propTypes.default.bool,
  welcomeScreenSeen: _propTypes.default.bool
});
(0, _defineProperty2.default)(Welcome, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/welcome/welcome.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/end-of-flow/end-of-flow.component.js", {"../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../components/ui/metafox-logo":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/metafox-logo/index.js","../../../components/ui/snackbar":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/snackbar/index.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../onboarding-initiator-util":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/onboarding-initiator-util.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/end-of-flow/end-of-flow.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _snackbar = _interopRequireDefault(require("../../../components/ui/snackbar"));

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _routes = require("../../../helpers/constants/routes");

var _onboardingInitiatorUtil = require("../onboarding-initiator-util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class EndOfFlowScreen extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onComplete", async () => {
      const {
        history,
        onboardingInitiator
      } = this.props;

      this._removeBeforeUnload();

      await this._onOnboardingComplete();

      if (onboardingInitiator) {
        await (0, _onboardingInitiatorUtil.returnToOnboardingInitiator)(onboardingInitiator);
      }

      history.push(_routes.DEFAULT_ROUTE);
    });
    (0, _defineProperty2.default)(this, "componentWillUnmount", () => {
      this._removeBeforeUnload();
    });
  }

  async _beforeUnload() {
    await this._onOnboardingComplete();
  }

  _removeBeforeUnload() {
    window.removeEventListener('beforeunload', this._beforeUnload);
  }

  async _onOnboardingComplete() {
    const {
      setCompletedOnboarding,
      completionMetaMetricsName
    } = this.props;
    await setCompletedOnboarding();
    this.context.metricsEvent({
      eventOpts: {
        category: 'Onboarding',
        action: 'Onboarding Complete',
        name: completionMetaMetricsName
      }
    });
  }

  componentDidMount() {
    window.addEventListener('beforeunload', this._beforeUnload.bind(this));
  }

  render() {
    const {
      t
    } = this.context;
    const {
      onboardingInitiator
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__emoji"
    }, "\uD83C\uDF89"), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__header"
    }, t('congratulations')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block end-of-flow__text-1"
    }, t('endOfFlowMessage1')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block end-of-flow__text-2"
    }, t('endOfFlowMessage2')), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__text-3"
    }, `• ${t('endOfFlowMessage3')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__text-3"
    }, `• ${t('endOfFlowMessage4')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__text-3"
    }, `• ${t('endOfFlowMessage5')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__text-3"
    }, `• ${t('endOfFlowMessage6')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "end-of-flow__text-3"
    }, "\u2022", ' ', t('endOfFlowMessage7', [/*#__PURE__*/_react.default.createElement("a", {
      target: "_blank",
      key: "metamaskSupportLink",
      rel: "noopener noreferrer",
      href: "https://tawk.to/chat/6246d7a60bfe3f4a8770fce8/1fvibkpdo"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "first-time-flow__link-text"
    }, this.context.t('here')))])), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block end-of-flow__text-4"
    }, `*${t('endOfFlowMessage8')}`, "\xA0", /*#__PURE__*/_react.default.createElement("a", {
      href: "https://De-wallet.zendesk.com/hc/en-us/articles/360015489591-Basic-Safety-Tips",
      target: "_blank",
      rel: "noopener noreferrer"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "first-time-flow__link-text"
    }, t('endOfFlowMessage9')))), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "first-time-flow__button",
      onClick: this.onComplete
    }, t('endOfFlowMessage10')), onboardingInitiator ? /*#__PURE__*/_react.default.createElement(_snackbar.default, {
      content: t('onboardingReturnNotice', [t('endOfFlowMessage10'), onboardingInitiator.location])
    }) : null);
  }

}

exports.default = EndOfFlowScreen;
(0, _defineProperty2.default)(EndOfFlowScreen, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(EndOfFlowScreen, "propTypes", {
  history: _propTypes.default.object,
  completionMetaMetricsName: _propTypes.default.string,
  setCompletedOnboarding: _propTypes.default.func,
  onboardingInitiator: _propTypes.default.exact({
    location: _propTypes.default.string,
    tabId: _propTypes.default.number
  })
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/end-of-flow/end-of-flow.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/create-password.component.js", {"../../../components/ui/metafox-logo":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/metafox-logo/index.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","./import-with-seed-phrase":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/import-with-seed-phrase/index.js","./new-account":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/new-account/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/create-password.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _routes = require("../../../helpers/constants/routes");

var _newAccount = _interopRequireDefault(require("./new-account"));

var _importWithSeedPhrase = _interopRequireDefault(require("./import-with-seed-phrase"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class CreatePassword extends _react.PureComponent {
  componentDidMount() {
    const {
      isInitialized,
      history
    } = this.props;

    if (isInitialized) {
      history.push(_routes.INITIALIZE_SEED_PHRASE_INTRO_ROUTE);
    }
  }

  render() {
    const {
      onCreateNewAccount,
      onCreateNewAccountFromSeed
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__wrapper"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, null), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_IMPORT_WITH_SEED_PHRASE_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_importWithSeedPhrase.default, (0, _extends2.default)({}, routeProps, {
        onSubmit: onCreateNewAccountFromSeed
      }))
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.INITIALIZE_CREATE_PASSWORD_ROUTE,
      render: routeProps => /*#__PURE__*/_react.default.createElement(_newAccount.default, (0, _extends2.default)({}, routeProps, {
        onSubmit: onCreateNewAccount
      }))
    })));
  }

}

exports.default = CreatePassword;
(0, _defineProperty2.default)(CreatePassword, "propTypes", {
  history: _propTypes.default.object,
  isInitialized: _propTypes.default.bool,
  onCreateNewAccount: _propTypes.default.func,
  onCreateNewAccountFromSeed: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/create-password.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/index.js", {"./HTML5Backend":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/HTML5Backend.js","./NativeTypes":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeTypes.js","./getEmptyImage":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/getEmptyImage.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/index.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HTML5Backend_1 = require("./HTML5Backend");
var getEmptyImage_1 = require("./getEmptyImage");
exports.getEmptyImage = getEmptyImage_1.default;
var NativeTypes = require("./NativeTypes");
exports.NativeTypes = NativeTypes;
function createHTML5Backend(manager) {
    return new HTML5Backend_1.default(manager);
}
exports.default = createHTML5Backend;

      };
    };
  }
}, {package:"react-dnd-html5-backend",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/seed-phrase-intro/index.js", {"./seed-phrase-intro.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/seed-phrase-intro/seed-phrase-intro.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/seed-phrase-intro/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _seedPhraseIntro.default;
  }
});

var _seedPhraseIntro = _interopRequireDefault(require("./seed-phrase-intro.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/seed-phrase-intro/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/confirm-seed-phrase/index.js", {"./confirm-seed-phrase.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/confirm-seed-phrase/confirm-seed-phrase.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/confirm-seed-phrase/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmSeedPhrase.default;
  }
});

var _confirmSeedPhrase = _interopRequireDefault(require("./confirm-seed-phrase.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/confirm-seed-phrase/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/reveal-seed-phrase/index.js", {"./reveal-seed-phrase.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/reveal-seed-phrase/reveal-seed-phrase.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/reveal-seed-phrase/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _revealSeedPhrase.default;
  }
});

var _revealSeedPhrase = _interopRequireDefault(require("./reveal-seed-phrase.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/reveal-seed-phrase/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/index.js", {"./DragDropContext":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/DragDropContext.js","./DragDropContextProvider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/DragDropContextProvider.js","./DragLayer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/DragLayer.js","./DragSource":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/DragSource.js","./DropTarget":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/DropTarget.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/index.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DragDropContext_1 = require("./DragDropContext");
exports.DragDropContext = DragDropContext_1.default;
var DragDropContextProvider_1 = require("./DragDropContextProvider");
exports.DragDropContextProvider = DragDropContextProvider_1.default;
var DragLayer_1 = require("./DragLayer");
exports.DragLayer = DragLayer_1.default;
var DragSource_1 = require("./DragSource");
exports.DragSource = DragSource_1.default;
var DropTarget_1 = require("./DropTarget");
exports.DropTarget = DropTarget_1.default;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"react-dnd",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/settings-tab/settings-tab.component.js", {"../../../../app/_locales/index.json":"/home/clarisco/Desktop/metamask-extension-develop/app/_locales/index.json","../../../components/ui/dropdown":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/dropdown/index.js","../../../components/ui/toggle-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/toggle-button/index.js","../../../helpers/constants/available-conversions.json":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/available-conversions.json","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/settings-tab/settings-tab.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _availableConversions = _interopRequireDefault(require("../../../helpers/constants/available-conversions.json"));

var _dropdown = _interopRequireDefault(require("../../../components/ui/dropdown"));

var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));

var _index = _interopRequireDefault(require("../../../../app/_locales/index.json"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const sortedCurrencies = _availableConversions.default.sort((a, b) => {
  return a.name.toLocaleLowerCase().localeCompare(b.name.toLocaleLowerCase());
});

const currencyOptions = sortedCurrencies.map(({
  code,
  name
}) => {
  return {
    name: `${code.toUpperCase()} - ${name}`,
    value: code
  };
});

const localeOptions = _index.default.map(locale => {
  return {
    name: `${locale.name}`,
    value: locale.code
  };
});

class SettingsTab extends _react.PureComponent {
  renderCurrentConversion() {
    const {
      t
    } = this.context;
    const {
      currentCurrency,
      setCurrentCurrency,
      lastFetchedConversionDate
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('currencyConversion')), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__content-description"
    }, lastFetchedConversionDate ? t('updatedWithDate', [new Date(lastFetchedConversionDate * 1000).toString()]) : t('noConversionDateAvailable'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      id: "select-currency",
      options: currencyOptions,
      selectedOption: currentCurrency,
      onChange: newCurrency => setCurrentCurrency(newCurrency)
    }))));
  }

  renderCurrentLocale() {
    const {
      t
    } = this.context;
    const {
      updateCurrentLocale,
      currentLocale
    } = this.props;

    const currentLocaleMeta = _index.default.find(locale => locale.code === currentLocale);

    const currentLocaleName = currentLocaleMeta ? currentLocaleMeta.name : '';
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__content-label"
    }, t('currentLanguage')), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__content-description"
    }, currentLocaleName)), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      id: "select-locale",
      options: localeOptions,
      selectedOption: currentLocale,
      onChange: async newLocale => updateCurrentLocale(newLocale)
    }))));
  }

  renderHideZeroBalanceTokensOptIn() {
    const {
      t
    } = this.context;
    const {
      hideZeroBalanceTokens,
      setHideZeroBalanceTokens
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      id: "toggle-zero-balance"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('hideZeroBalanceTokens'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: hideZeroBalanceTokens,
      onToggle: value => setHideZeroBalanceTokens(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderBlockieOptIn() {
    const {
      t
    } = this.context;
    const {
      useBlockie,
      setUseBlockie
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      id: "blockie-optin"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, this.context.t('blockiesIdenticon'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: useBlockie,
      onToggle: value => setUseBlockie(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderUsePrimaryCurrencyOptions() {
    const {
      t
    } = this.context;
    const {
      nativeCurrency,
      setUseNativeCurrencyAsPrimaryCurrencyPreference,
      useNativeCurrencyAsPrimaryCurrency
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('primaryCurrencySetting')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('primaryCurrencySettingDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__radio-buttons"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__radio-button"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "radio",
      id: "native-primary-currency",
      onChange: () => setUseNativeCurrencyAsPrimaryCurrencyPreference(true),
      checked: Boolean(useNativeCurrencyAsPrimaryCurrency)
    }), /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: "native-primary-currency",
      className: "settings-tab__radio-label"
    }, nativeCurrency)), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__radio-button"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "radio",
      id: "fiat-primary-currency",
      onChange: () => setUseNativeCurrencyAsPrimaryCurrencyPreference(false),
      checked: !useNativeCurrencyAsPrimaryCurrency
    }), /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: "fiat-primary-currency",
      className: "settings-tab__radio-label"
    }, t('fiat')))))));
  }

  render() {
    const {
      warning
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__body"
    }, warning ? /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__error"
    }, warning) : null, this.renderCurrentConversion(), this.renderUsePrimaryCurrencyOptions(), this.renderCurrentLocale(), this.renderBlockieOptIn(), this.renderHideZeroBalanceTokensOptIn());
  }

}

exports.default = SettingsTab;
(0, _defineProperty2.default)(SettingsTab, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(SettingsTab, "propTypes", {
  setUseBlockie: _propTypes.default.func,
  setCurrentCurrency: _propTypes.default.func,
  warning: _propTypes.default.string,
  updateCurrentLocale: _propTypes.default.func,
  currentLocale: _propTypes.default.string,
  useBlockie: _propTypes.default.bool,
  currentCurrency: _propTypes.default.string,
  nativeCurrency: _propTypes.default.string,
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool,
  setUseNativeCurrencyAsPrimaryCurrencyPreference: _propTypes.default.func,
  hideZeroBalanceTokens: _propTypes.default.bool,
  setHideZeroBalanceTokens: _propTypes.default.func,
  lastFetchedConversionDate: _propTypes.default.number
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/settings-tab/settings-tab.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/advanced-tab/advanced-tab.component.js", {"../../../../app/scripts/lib/util":"/home/clarisco/Desktop/metamask-extension-develop/app/scripts/lib/util.js","../../../../shared/constants/app":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/app.js","../../../../shared/constants/hardware-wallets":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/hardware-wallets.js","../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../components/ui/dialog":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/dialog/index.js","../../../components/ui/dropdown":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/dropdown/index.js","../../../components/ui/text-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/text-field/index.js","../../../components/ui/toggle-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/toggle-button/index.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/advanced-tab/advanced-tab.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _util = require("../../../helpers/utils/util");

var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));

var _textField = _interopRequireDefault(require("../../../components/ui/text-field"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _routes = require("../../../helpers/constants/routes");

var _dropdown = _interopRequireDefault(require("../../../components/ui/dropdown"));

var _dialog = _interopRequireDefault(require("../../../components/ui/dialog"));

var _util2 = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _hardwareWallets = require("../../../../shared/constants/hardware-wallets");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class AdvancedTab extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      autoLockTimeLimit: this.props.autoLockTimeLimit,
      lockTimeError: '',
      ipfsGateway: this.props.ipfsGateway,
      ipfsGatewayError: '',
      showLedgerTransportWarning: false
    });
    (0, _defineProperty2.default)(this, "showTestNetworksRef", /*#__PURE__*/_react.default.createRef());
  }

  componentDidMount() {
    if (window.location.hash.match(/show-testnets/u)) {
      this.showTestNetworksRef.current.scrollIntoView({
        behavior: 'smooth'
      });
      this.showTestNetworksRef.current.focus();
    }
  }

  renderMobileSync() {
    const {
      t
    } = this.context;
    // const {
    //   history
    // } = this.props;
    // return /*#__PURE__*/_react.default.createElement("div", {
    //   className: "settings-page__content-row",
    //   "data-testid": "advanced-setting-mobile-sync"
    // }, /*#__PURE__*/_react.default.createElement("div", {
    //   className: "settings-page__content-item"
    // }, /*#__PURE__*/_react.default.createElement("span", null, t('syncWithMobile'))), /*#__PURE__*/_react.default.createElement("div", {
    //   className: "settings-page__content-item"
    // }, /*#__PURE__*/_react.default.createElement("div", {
    //   className: "settings-page__content-item-col"
    // }, /*#__PURE__*/_react.default.createElement(_button.default, {
    //   type: "secondary",
    //   large: true,
    //   // onClick: event => {
    //   //   event.preventDefault();
    //   //   history.push(_routes.MOBILE_SYNC_ROUTE);
    //   // }
    // }, t('syncWithMobile')))));
  }

  renderStateLogs() {
    const {
      t
    } = this.context;
    const {
      displayWarning
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-state-logs"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('stateLogs')), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__content-description"
    }, t('stateLogsDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      onClick: () => {
        window.logStateString((err, result) => {
          if (err) {
            displayWarning(t('stateLogError'));
          } else {
            (0, _util.exportAsFile)(`${t('stateLogFileName')}.json`, result);
          }
        });
      }
    }, t('downloadStateLogs')))));
  }

  renderResetAccount() {
    const {
      t
    } = this.context;
    const {
      showResetAccountConfirmationModal
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-reset-account"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('resetAccount')), /*#__PURE__*/_react.default.createElement("span", {
      className: "settings-page__content-description"
    }, t('resetAccountDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "warning",
      large: true,
      className: "settings-tab__button--red",
      onClick: event => {
        event.preventDefault();
        this.context.metricsEvent({
          eventOpts: {
            category: 'Settings',
            action: 'Reset Account',
            name: 'Reset Account'
          }
        });
        showResetAccountConfirmationModal();
      }
    }, t('resetAccount')))));
  }

  renderHexDataOptIn() {
    const {
      t
    } = this.context;
    const {
      sendHexData,
      setHexDataFeatureFlag
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-hex-data"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('showHexData')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('showHexDataDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: sendHexData,
      onToggle: value => setHexDataFeatureFlag(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderAdvancedGasInputInline() {
    const {
      t
    } = this.context;
    const {
      advancedInlineGas,
      setAdvancedInlineGasFeatureFlag
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-advanced-gas-inline"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('showAdvancedGasInline')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('showAdvancedGasInlineDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: advancedInlineGas,
      onToggle: value => setAdvancedInlineGasFeatureFlag(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderToggleTestNetworks() {
    const {
      t
    } = this.context;
    const {
      showTestNetworks,
      setShowTestNetworks
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.showTestNetworksRef,
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-show-testnet-conversion"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('showTestnetNetworks')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('showTestnetNetworksDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: showTestNetworks,
      onToggle: value => setShowTestNetworks(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderShowConversionInTestnets() {
    const {
      t
    } = this.context;
    const {
      showFiatInTestnets,
      setShowFiatConversionOnTestnetsPreference
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-show-testnet-conversion"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('showFiatConversionInTestnets')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('showFiatConversionInTestnetsDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: showFiatInTestnets,
      onToggle: value => setShowFiatConversionOnTestnetsPreference(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderUseNonceOptIn() {
    const {
      t
    } = this.context;
    const {
      useNonceField,
      setUseNonceField
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-custom-nonce"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('nonceField')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('nonceFieldDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: useNonceField,
      onToggle: value => setUseNonceField(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  handleLockChange(time) {
    const {
      t
    } = this.context;
    const autoLockTimeLimit = Math.max(Number(time), 0);
    this.setState(() => {
      let lockTimeError = '';

      if (autoLockTimeLimit > 10080) {
        lockTimeError = t('lockTimeTooGreat');
      }

      return {
        autoLockTimeLimit,
        lockTimeError
      };
    });
  }

  renderAutoLockTimeLimit() {
    const {
      t
    } = this.context;
    const {
      lockTimeError
    } = this.state;
    const {
      autoLockTimeLimit,
      setAutoLockTimeLimit
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-auto-lock"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('autoLockTimeLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('autoLockTimeLimitDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "number",
      id: "autoTimeout",
      placeholder: "5",
      value: this.state.autoLockTimeLimit,
      defaultValue: autoLockTimeLimit,
      onChange: e => this.handleLockChange(e.target.value),
      error: lockTimeError,
      fullWidth: true,
      margin: "dense",
      min: 0
    }), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "settings-tab__rpc-save-button",
      disabled: lockTimeError !== '',
      onClick: () => {
        setAutoLockTimeLimit(this.state.autoLockTimeLimit);
      }
    }, t('save')))));
  }

  renderThreeBoxControl() {
    const {
      t
    } = this.context;
    const {
      threeBoxSyncingAllowed,
      setThreeBoxSyncingPermission,
      threeBoxDisabled
    } = this.props;
    let allowed = threeBoxSyncingAllowed;
    let description = t('syncWithThreeBoxDescription');

    if (threeBoxDisabled) {
      allowed = false;
      description = t('syncWithThreeBoxDisabled');
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-3box"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('syncWithThreeBox')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, description)), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('settings-page__content-item', {
        'settings-page__content-item--disabled': threeBoxDisabled
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: allowed,
      onToggle: value => {
        if (!threeBoxDisabled) {
          setThreeBoxSyncingPermission(!value);
        }
      },
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderLedgerLiveControl() {
    const {
      t
    } = this.context;
    const {
      ledgerTransportType,
      setLedgerTransportPreference,
      userHasALedgerAccount
    } = this.props;
    const LEDGER_TRANSPORT_NAMES = {
      LIVE: t('ledgerLive'),
      WEBHID: t('webhid'),
      U2F: t('u2f')
    };
    const transportTypeOptions = [{
      name: LEDGER_TRANSPORT_NAMES.LIVE,
      value: _hardwareWallets.LEDGER_TRANSPORT_TYPES.LIVE
    }, {
      name: LEDGER_TRANSPORT_NAMES.U2F,
      value: _hardwareWallets.LEDGER_TRANSPORT_TYPES.U2F
    }];

    if (window.navigator.hid) {
      transportTypeOptions.push({
        name: LEDGER_TRANSPORT_NAMES.WEBHID,
        value: _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID
      });
    }

    const recommendedLedgerOption = window.navigator.hid ? LEDGER_TRANSPORT_NAMES.WEBHID : LEDGER_TRANSPORT_NAMES.U2F;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('preferredLedgerConnectionType')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('ledgerConnectionPreferenceDescription', [recommendedLedgerOption, /*#__PURE__*/_react.default.createElement(_button.default, {
      key: "ledger-connection-settings-learn-more",
      type: "link",
      href: "https://tawk.to/chat/6246d7a60bfe3f4a8770fce8/1fvibkpdo",
      target: "_blank",
      rel: "noopener noreferrer",
      className: "settings-page__inline-link"
    }, t('learnMore'))]))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      id: "select-ledger-transport-type",
      options: transportTypeOptions,
      selectedOption: ledgerTransportType,
      onChange: async transportType => {
        if (ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.LIVE && transportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID) {
          this.setState({
            showLedgerTransportWarning: true
          });
        }

        setLedgerTransportPreference(transportType);

        if (transportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID && userHasALedgerAccount) {
          await window.navigator.hid.requestDevice({
            filters: [{
              vendorId: _hardwareWallets.LEDGER_USB_VENDOR_ID
            }]
          });
        }
      }
    }), this.state.showLedgerTransportWarning ? /*#__PURE__*/_react.default.createElement(_dialog.default, {
      type: "message"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-dialog"
    }, t('ledgerTransportChangeWarning'))) : null)));
  }

  handleIpfsGatewayChange(url) {
    const {
      t
    } = this.context;
    this.setState(() => {
      let ipfsGatewayError = '';

      try {
        const urlObj = new URL(addUrlProtocolPrefix(url));

        if (!urlObj.host) {
          throw new Error();
        } // don't allow the use of this gateway


        if (urlObj.host === 'gateway.ipfs.io') {
          throw new Error('Forbidden gateway');
        }
      } catch (error) {
        ipfsGatewayError = error.message === 'Forbidden gateway' ? t('forbiddenIpfsGateway') : t('invalidIpfsGateway');
      }

      return {
        ipfsGateway: url,
        ipfsGatewayError
      };
    });
  }

  handleIpfsGatewaySave() {
    const url = new URL(addUrlProtocolPrefix(this.state.ipfsGateway));
    const {
      host
    } = url;
    this.props.setIpfsGateway(host);
  }

  renderIpfsGatewayControl() {
    const {
      t
    } = this.context;
    const {
      ipfsGatewayError
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-ipfs-gateway"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('ipfsGateway')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('ipfsGatewayDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "text",
      value: this.state.ipfsGateway,
      onChange: e => this.handleIpfsGatewayChange(e.target.value),
      error: ipfsGatewayError,
      fullWidth: true,
      margin: "dense"
    }), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "settings-tab__rpc-save-button",
      disabled: Boolean(ipfsGatewayError),
      onClick: () => {
        this.handleIpfsGatewaySave();
      }
    }, t('save')))));
  }

  renderDismissSeedBackupReminderControl() {
    const {
      t
    } = this.context;
    const {
      dismissSeedBackUpReminder,
      setDismissSeedBackUpReminder
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row",
      "data-testid": "advanced-setting-dismiss-reminder"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('dismissReminderField')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('dismissReminderDescriptionField'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: dismissSeedBackUpReminder,
      onToggle: value => setDismissSeedBackUpReminder(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  render() {
    const {
      warning
    } = this.props;

    const notUsingFirefox = (0, _util2.getPlatform)() !== _app.PLATFORM_FIREFOX;

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__body"
    }, warning ? /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__error"
    }, warning) : null, this.renderStateLogs(), this.renderMobileSync(), this.renderResetAccount(), this.renderAdvancedGasInputInline(), this.renderHexDataOptIn(), this.renderShowConversionInTestnets(), this.renderToggleTestNetworks(), this.renderUseNonceOptIn(), this.renderAutoLockTimeLimit(), this.renderThreeBoxControl(), this.renderIpfsGatewayControl(), notUsingFirefox ? this.renderLedgerLiveControl() : null, this.renderDismissSeedBackupReminderControl());
  }

}

exports.default = AdvancedTab;
(0, _defineProperty2.default)(AdvancedTab, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(AdvancedTab, "propTypes", {
  setUseNonceField: _propTypes.default.func,
  useNonceField: _propTypes.default.bool,
  setHexDataFeatureFlag: _propTypes.default.func,
  displayWarning: _propTypes.default.func,
  showResetAccountConfirmationModal: _propTypes.default.func,
  warning: _propTypes.default.string,
  history: _propTypes.default.object,
  sendHexData: _propTypes.default.bool,
  setAdvancedInlineGasFeatureFlag: _propTypes.default.func,
  advancedInlineGas: _propTypes.default.bool,
  showFiatInTestnets: _propTypes.default.bool,
  showTestNetworks: _propTypes.default.bool,
  autoLockTimeLimit: _propTypes.default.number,
  setAutoLockTimeLimit: _propTypes.default.func.isRequired,
  setShowFiatConversionOnTestnetsPreference: _propTypes.default.func.isRequired,
  setShowTestNetworks: _propTypes.default.func.isRequired,
  threeBoxSyncingAllowed: _propTypes.default.bool.isRequired,
  setThreeBoxSyncingPermission: _propTypes.default.func.isRequired,
  threeBoxDisabled: _propTypes.default.bool.isRequired,
  setIpfsGateway: _propTypes.default.func.isRequired,
  ipfsGateway: _propTypes.default.string.isRequired,
  ledgerTransportType: _propTypes.default.oneOf(Object.values(_hardwareWallets.LEDGER_TRANSPORT_TYPES)),
  setLedgerTransportPreference: _propTypes.default.func.isRequired,
  setDismissSeedBackUpReminder: _propTypes.default.func.isRequired,
  dismissSeedBackUpReminder: _propTypes.default.bool.isRequired,
  userHasALedgerAccount: _propTypes.default.bool.isRequired
});

function addUrlProtocolPrefix(urlString) {
  if (!urlString.match(/(^http:\/\/)|(^https:\/\/)/u)) {
    return `https://${urlString}`;
  }

  return urlString;
}


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/advanced-tab/advanced-tab.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/security-tab/security-tab.component.js", {"../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../components/ui/toggle-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/toggle-button/index.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/security-tab/security-tab.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));

var _routes = require("../../../helpers/constants/routes");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SecurityTab extends _react.PureComponent {
  renderSeedWords() {
    const {
      t
    } = this.context;
    const {
      history
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('revealSeedWords'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "danger",
      large: true,
      onClick: event => {
        event.preventDefault();
        this.context.metricsEvent({
          eventOpts: {
            category: 'Settings',
            action: 'Reveal Seed Phrase',
            name: 'Reveal Seed Phrase'
          }
        });
        history.push(_routes.REVEAL_SEED_ROUTE);
      }
    }, t('revealSeedWords')))));
  }

  renderMetaMetricsOptIn() {
    const {
      t
    } = this.context;
    const {
      participateInMetaMetrics,
      setParticipateInMetaMetrics
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('participateInMetaMetrics')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('participateInMetaMetricsDescription')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: participateInMetaMetrics,
      onToggle: value => setParticipateInMetaMetrics(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderIncomingTransactionsOptIn() {
    const {
      t
    } = this.context;
    const {
      showIncomingTransactions,
      setShowIncomingTransactionsFeatureFlag
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('showIncomingTransactions')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('showIncomingTransactionsDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: showIncomingTransactions,
      onToggle: value => setShowIncomingTransactionsFeatureFlag(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderPhishingDetectionToggle() {
    const {
      t
    } = this.context;
    const {
      usePhishDetect,
      setUsePhishDetect
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('usePhishingDetection')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('usePhishingDetectionDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: usePhishDetect,
      onToggle: value => setUsePhishDetect(!value),
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  render() {
    const {
      warning
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__body"
    }, warning ? /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-tab__error"
    }, warning) : null, this.renderSeedWords(), this.renderIncomingTransactionsOptIn(), this.renderPhishingDetectionToggle(), this.renderMetaMetricsOptIn());
  }

}

exports.default = SecurityTab;
(0, _defineProperty2.default)(SecurityTab, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(SecurityTab, "propTypes", {
  warning: _propTypes.default.string,
  history: _propTypes.default.object,
  participateInMetaMetrics: _propTypes.default.bool.isRequired,
  setParticipateInMetaMetrics: _propTypes.default.func.isRequired,
  showIncomingTransactions: _propTypes.default.bool.isRequired,
  setShowIncomingTransactionsFeatureFlag: _propTypes.default.func.isRequired,
  setUsePhishDetect: _propTypes.default.func.isRequired,
  usePhishDetect: _propTypes.default.bool.isRequired
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/security-tab/security-tab.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/experimental-tab/experimental-tab.component.js", {"../../../components/ui/toggle-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/toggle-button/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/experimental-tab/experimental-tab.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _toggleButton = _interopRequireDefault(require("../../../components/ui/toggle-button"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ExperimentalTab extends _react.PureComponent {
  renderTokenDetectionToggle() {
    const {
      t
    } = this.context;
    const {
      useTokenDetection,
      setUseTokenDetection
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('useTokenDetection')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('useTokenDetectionDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: useTokenDetection,
      onToggle: value => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Settings',
            action: 'Token Detection',
            name: 'Token Detection'
          }
        });
        setUseTokenDetection(!value);
      },
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderCollectibleDetectionToggle() {
    if (!false) {
      return null;
    }

    const {
      t
    } = this.context;
    const {
      useCollectibleDetection,
      setUseCollectibleDetection,
      openSeaEnabled
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('useCollectibleDetection')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('useCollectibleDetectionDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      disabled: !openSeaEnabled,
      value: useCollectibleDetection,
      onToggle: value => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Settings',
            action: 'Collectible Detection',
            name: 'Collectible Detection'
          }
        });
        setUseCollectibleDetection(!value);
      },
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  renderOpenSeaEnabledToggle() {
    if (!false) {
      return null;
    }

    const {
      t
    } = this.context;
    const {
      openSeaEnabled,
      setOpenSeaEnabled
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("span", null, t('enableOpenSeaAPI')), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-description"
    }, t('enableOpenSeaAPIDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-item-col"
    }, /*#__PURE__*/_react.default.createElement(_toggleButton.default, {
      value: openSeaEnabled,
      onToggle: value => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Settings',
            action: 'Enabled/Disable OpenSea',
            name: 'Enabled/Disable OpenSea'
          }
        });
        setOpenSeaEnabled(!value);
      },
      offLabel: t('off'),
      onLabel: t('on')
    }))));
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__body"
    }, this.renderTokenDetectionToggle(), this.renderOpenSeaEnabledToggle(), this.renderCollectibleDetectionToggle());
  }

}

exports.default = ExperimentalTab;
(0, _defineProperty2.default)(ExperimentalTab, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(ExperimentalTab, "propTypes", {
  useTokenDetection: _propTypes.default.bool,
  setUseTokenDetection: _propTypes.default.func,
  useCollectibleDetection: _propTypes.default.bool,
  setUseCollectibleDetection: _propTypes.default.func,
  setOpenSeaEnabled: _propTypes.default.func,
  openSeaEnabled: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/experimental-tab/experimental-tab.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/contact-list-tab.component.js", {"../../../components/app/contact-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/contact-list/index.js","../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","./add-contact":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/add-contact/index.js","./edit-contact":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/edit-contact/index.js","./view-contact":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/view-contact/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/contact-list-tab.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _contactList = _interopRequireDefault(require("../../../components/app/contact-list"));

var _routes = require("../../../helpers/constants/routes");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _editContact = _interopRequireDefault(require("./edit-contact"));

var _addContact = _interopRequireDefault(require("./add-contact"));

var _viewContact = _interopRequireDefault(require("./view-contact"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ContactListTab extends _react.Component {
  renderAddresses() {
    const {
      addressBook,
      history,
      selectedAddress
    } = this.props;
    const contacts = addressBook.filter(({
      name
    }) => Boolean(name));
    const nonContacts = addressBook.filter(({
      name
    }) => !name);
    const {
      t
    } = this.context;

    if (addressBook.length) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_contactList.default, {
        searchForContacts: () => contacts,
        searchForRecents: () => nonContacts,
        selectRecipient: address => {
          history.push(`${_routes.CONTACT_VIEW_ROUTE}/${address}`);
        },
        selectedAddress: selectedAddress
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__container"
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("img", {
      src: "./images/address-book.svg",
      alt: t('addressBookIcon')
    }), /*#__PURE__*/_react.default.createElement("h4", {
      className: "address-book__title"
    }, t('buildContactList')), /*#__PURE__*/_react.default.createElement("p", {
      className: "address-book__sub-title"
    }, t('addFriendsAndAddresses')), /*#__PURE__*/_react.default.createElement("button", {
      className: "address-book__link",
      onClick: () => {
        history.push(_routes.CONTACT_ADD_ROUTE);
      }
    }, "+ ", t('addContact'))));
  }

  renderAddButton() {
    const {
      history,
      viewingContact,
      editingContact
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book-add-button"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      className: (0, _classnames.default)({
        'address-book-add-button__button': true,
        'address-book-add-button__button--hidden': viewingContact || editingContact
      }),
      type: "secondary",
      onClick: () => {
        history.push(_routes.CONTACT_ADD_ROUTE);
      }
    }, this.context.t('addContact')));
  }

  renderContactContent() {
    const {
      viewingContact,
      editingContact,
      addingContact,
      showContactContent
    } = this.props;

    if (!showContactContent) {
      return null;
    }

    let ContactContentComponent = null;

    if (viewingContact) {
      ContactContentComponent = _viewContact.default;
    } else if (editingContact) {
      ContactContentComponent = _editContact.default;
    } else if (addingContact) {
      ContactContentComponent = _addContact.default;
    }

    return ContactContentComponent && /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book-contact-content"
    }, /*#__PURE__*/_react.default.createElement(ContactContentComponent, null));
  }

  renderAddressBookContent() {
    const {
      hideAddressBook
    } = this.props;

    if (!hideAddressBook) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "address-book"
      }, this.renderAddresses());
    }

    return null;
  }

  render() {
    const {
      addingContact,
      addressBook
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book-wrapper"
    }, this.renderAddressBookContent(), this.renderContactContent(), !addingContact && addressBook.length > 0 ? this.renderAddButton() : null);
  }

}

exports.default = ContactListTab;
(0, _defineProperty2.default)(ContactListTab, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(ContactListTab, "propTypes", {
  addressBook: _propTypes.default.array,
  history: _propTypes.default.object,
  selectedAddress: _propTypes.default.string,
  viewingContact: _propTypes.default.bool,
  editingContact: _propTypes.default.bool,
  addingContact: _propTypes.default.bool,
  showContactContent: _propTypes.default.bool,
  hideAddressBook: _propTypes.default.bool
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/contact-list-tab.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab.constants.js", {"../../../../shared/constants/network":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/network.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultNetworksData = void 0;

var _network = require("../../../../shared/constants/network");

const defaultNetworksData = [{
  labelKey: _network.MAINNET,
  iconColor: '#29B6AF',
  providerType: _network.MAINNET,
  rpcUrl: _network.MAINNET_RPC_URL,
  chainId: _network.MAINNET_CHAIN_ID,
  ticker: 'ETH',
  blockExplorerUrl: 'https://etherscan.io'
}, {
  labelKey: _network.ROPSTEN,
  iconColor: '#FF4A8D',
  providerType: _network.ROPSTEN,
  rpcUrl: _network.ROPSTEN_RPC_URL,
  chainId: _network.ROPSTEN_CHAIN_ID,
  ticker: 'ETH',
  blockExplorerUrl: 'https://ropsten.etherscan.io'
}, {
  labelKey: _network.RINKEBY,
  iconColor: '#F6C343',
  providerType: _network.RINKEBY,
  rpcUrl: _network.RINKEBY_RPC_URL,
  chainId: _network.RINKEBY_CHAIN_ID,
  ticker: 'ETH',
  blockExplorerUrl: 'https://rinkeby.etherscan.io'
}, {
  labelKey: _network.GOERLI,
  iconColor: '#3099f2',
  providerType: _network.GOERLI,
  rpcUrl: _network.GOERLI_RPC_URL,
  chainId: _network.GOERLI_CHAIN_ID,
  ticker: 'ETH',
  blockExplorerUrl: 'https://goerli.etherscan.io'
}, {
  labelKey: _network.KOVAN,
  iconColor: '#9064FF',
  providerType: _network.KOVAN,
  rpcUrl: _network.KOVAN_RPC_URL,
  chainId: _network.KOVAN_CHAIN_ID,
  ticker: 'ETH',
  blockExplorerUrl: 'https://kovan.etherscan.io'
}];
exports.defaultNetworksData = defaultNetworksData;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab.constants.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab-subheader/index.js", {"./networks-tab-subheader":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab-subheader/networks-tab-subheader.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab-subheader/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksTabSubheader.default;
  }
});

var _networksTabSubheader = _interopRequireDefault(require("./networks-tab-subheader"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab-subheader/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-form/index.js", {"./networks-form":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-form/networks-form.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-form/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksForm.default;
  }
});

var _networksForm = _interopRequireDefault(require("./networks-form"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-form/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab-content/index.js", {"./networks-tab-content":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab-content/networks-tab-content.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab-content/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksTabContent.default;
  }
});

var _networksTabContent = _interopRequireDefault(require("./networks-tab-content"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-tab-content/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button-group/index.js", {"./button-group.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button-group/button-group.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button-group/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _buttonGroup.default;
  }
});

var _buttonGroup = _interopRequireDefault(require("./button-group.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button-group/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/human-standard-token-abi/index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/human-standard-token-abi/index.js
      return function (require, module, exports) {
module.exports = [
  {
    "constant": true,
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_spender",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "approve",
    "outputs": [
      {
        "name": "success",
        "type": "bool"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totalSupply",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "transferFrom",
    "outputs": [
      {
        "name": "success",
        "type": "bool"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "decimals",
    "outputs": [
      {
        "name": "",
        "type": "uint8"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "version",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      }
    ],
    "name": "balanceOf",
    "outputs": [
      {
        "name": "balance",
        "type": "uint256"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "symbol",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "transfer",
    "outputs": [
      {
        "name": "success",
        "type": "bool"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_spender",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      },
      {
        "name": "_extraData",
        "type": "bytes"
      }
    ],
    "name": "approveAndCall",
    "outputs": [
      {
        "name": "success",
        "type": "bool"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      },
      {
        "name": "_spender",
        "type": "address"
      }
    ],
    "name": "allowance",
    "outputs": [
      {
        "name": "remaining",
        "type": "uint256"
      }
    ],
    "payable": false,
    "type": "function"
  },
  {
    "inputs": [
      {
        "name": "_initialAmount",
        "type": "uint256"
      },
      {
        "name": "_tokenName",
        "type": "string"
      },
      {
        "name": "_decimalUnits",
        "type": "uint8"
      },
      {
        "name": "_tokenSymbol",
        "type": "string"
      }
    ],
    "type": "constructor"
  },
  {
    "payable": false,
    "type": "fallback"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_from",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_to",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_owner",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_spender",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "Approval",
    "type": "event"
  },
]

      };
    };
  }
}, {package:"human-standard-token-abi",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/human-standard-token-abi/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/eth-block-tracker/src/polling.js", {"./base":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/eth-block-tracker/src/base.js","pify":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/pify/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/eth-block-tracker/src/polling.js
      return function (require, module, exports) {
const pify = require('pify')
const BaseBlockTracker = require('./base')

const sec = 1000

class PollingBlockTracker extends BaseBlockTracker {

  constructor (opts = {}) {
    // parse + validate args
    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.')
    const pollingInterval = opts.pollingInterval || 20 * sec
    const retryTimeout = opts.retryTimeout || pollingInterval / 10
    const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true
    const setSkipCacheFlag = opts.setSkipCacheFlag || false
    // BaseBlockTracker constructor
    super(Object.assign({
      blockResetDuration: pollingInterval,
    }, opts))
    // config
    this._provider = opts.provider
    this._pollingInterval = pollingInterval
    this._retryTimeout = retryTimeout
    this._keepEventLoopActive = keepEventLoopActive
    this._setSkipCacheFlag = setSkipCacheFlag
  }

  //
  // public
  //

  // trigger block polling
  async checkForLatestBlock () {
    await this._updateLatestBlock()
    return await this.getLatestBlock()
  }

  //
  // private
  //

  _start () {
    this._performSync().catch(err => this.emit('error', err))
  }

  async _performSync () {
    while (this._isRunning) {
      try {
        await this._updateLatestBlock()
        await timeout(this._pollingInterval, !this._keepEventLoopActive)
      } catch (err) {
        const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${err.stack}`)
        try {
          this.emit('error', newErr)
        } catch (emitErr) {
          console.error(newErr)
        }
        await timeout(this._retryTimeout, !this._keepEventLoopActive)
      }
    }
  }

  async _updateLatestBlock () {
    // fetch + set latest block
    const latestBlock = await this._fetchLatestBlock()
    this._newPotentialLatest(latestBlock)
  }

  async _fetchLatestBlock () {
    const req = { jsonrpc: "2.0", id: 1, method: 'eth_blockNumber', params: [] }
    if (this._setSkipCacheFlag) req.skipCache = true
    const res = await pify((cb) => this._provider.sendAsync(req, cb))()
    if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error}`)
    return res.result
  }

}

module.exports = PollingBlockTracker

function timeout (duration, unref) {
  return new Promise(resolve => {
    const timoutRef = setTimeout(resolve, duration)
    // don't keep process open
    if (timoutRef.unref && unref) {
      timoutRef.unref()
    }
  })
}

      };
    };
  }
}, {package:"eth-block-tracker",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/eth-block-tracker/src/polling.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/deep-equal/index.js", {"is-arguments":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-arguments/index.js","is-date-object":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-date-object/index.js","is-regex":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-regex/index.js","object-is":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/object-is/index.js","object-keys":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/object-keys/index.js","regexp.prototype.flags":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/deep-equal/index.js
      return function (require, module, exports) {
var objectKeys = require('object-keys');
var isArguments = require('is-arguments');
var is = require('object-is');
var isRegex = require('is-regex');
var flags = require('regexp.prototype.flags');
var isDate = require('is-date-object');

var getTime = Date.prototype.getTime;

function deepEqual(actual, expected, options) {
  var opts = options || {};

  // 7.1. All identical values are equivalent, as determined by ===.
  if (opts.strict ? is(actual, expected) : actual === expected) {
    return true;
  }

  // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.
  if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {
    return opts.strict ? is(actual, expected) : actual == expected;
  }

  /*
   * 7.4. For all other Object pairs, including Array objects, equivalence is
   * determined by having the same number of owned properties (as verified
   * with Object.prototype.hasOwnProperty.call), the same set of keys
   * (although not necessarily the same order), equivalent values for every
   * corresponding key, and an identical 'prototype' property. Note: this
   * accounts for both named and indexed properties on Arrays.
   */
  // eslint-disable-next-line no-use-before-define
  return objEquiv(actual, expected, opts);
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer(x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') {
    return false;
  }
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') {
    return false;
  }
  return true;
}

function objEquiv(a, b, opts) {
  /* eslint max-statements: [2, 50] */
  var i, key;
  if (typeof a !== typeof b) { return false; }
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) { return false; }

  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) { return false; }

  if (isArguments(a) !== isArguments(b)) { return false; }

  var aIsRegex = isRegex(a);
  var bIsRegex = isRegex(b);
  if (aIsRegex !== bIsRegex) { return false; }
  if (aIsRegex || bIsRegex) {
    return a.source === b.source && flags(a) === flags(b);
  }

  if (isDate(a) && isDate(b)) {
    return getTime.call(a) === getTime.call(b);
  }

  var aIsBuffer = isBuffer(a);
  var bIsBuffer = isBuffer(b);
  if (aIsBuffer !== bIsBuffer) { return false; }
  if (aIsBuffer || bIsBuffer) { // && would work too, because both are true or both false here
    if (a.length !== b.length) { return false; }
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) { return false; }
    }
    return true;
  }

  if (typeof a !== typeof b) { return false; }

  try {
    var ka = objectKeys(a);
    var kb = objectKeys(b);
  } catch (e) { // happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates hasOwnProperty)
  if (ka.length !== kb.length) { return false; }

  // the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  // ~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i]) { return false; }
  }
  // equivalent values for every corresponding key, and ~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) { return false; }
  }

  return true;
}

module.exports = deepEqual;

      };
    };
  }
}, {package:"deep-equal",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/deep-equal/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/dist/token.js", {"./util":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/dist/util.js","@babel/runtime/helpers/asyncToGenerator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/asyncToGenerator.js","@babel/runtime/helpers/classCallCheck":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/classCallCheck.js","@babel/runtime/helpers/createClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/createClass.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/toConsumableArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/toConsumableArray.js","@babel/runtime/regenerator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/regenerator/index.js","ethjs":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/dist/token.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var BN = require('ethjs').BN;

var util = require('./util');
/**
 * Checks whether the given input and base will produce an invalid bn instance.
 *
 * bn.js requires extra validation to safely use, so this function allows
 * us to typecheck the params we pass to it.
 *
 * @see {@link https://github.com/indutny/bn.js/issues/151}
 * @param {any} input - the bn.js input
 * @param {number} base - the bn.js base argument
 * @returns {boolean}
 */


function _isInvalidBnInput(input, base) {
  return typeof input === 'string' && (input.startsWith('0x') || Number.isNaN(parseInt(input, base)));
}

var Token =
/*#__PURE__*/
function () {
  function Token() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        address = _ref.address,
        symbol = _ref.symbol,
        balance = _ref.balance,
        decimals = _ref.decimals,
        contract = _ref.contract,
        owner = _ref.owner,
        throwOnBalanceError = _ref.throwOnBalanceError;

    (0, _classCallCheck2["default"])(this, Token);

    if (!contract) {
      throw new Error('Missing requried \'contract\' parameter');
    } else if (!owner) {
      throw new Error('Missing requried \'owner\' parameter');
    }

    this.isLoading = !address || !symbol || !balance || !decimals;
    this.address = address || '0x0';
    this.symbol = symbol;
    this.throwOnBalanceError = throwOnBalanceError;

    if (!balance) {
      balance = '0';
    } else if (_isInvalidBnInput(balance, 16)) {
      throw new Error('Invalid \'balance\' option provided; must be non-prefixed hex string if given as string');
    }

    if (decimals && _isInvalidBnInput(decimals, 10)) {
      throw new Error('Invalid \'decimals\' option provided; must be non-prefixed hex string if given as string');
    }

    this.balance = new BN(balance, 16);
    this.decimals = decimals ? new BN(decimals) : undefined;
    this.owner = owner;
    this.contract = contract;
  }

  (0, _createClass2["default"])(Token, [{
    key: "update",
    value: function () {
      var _update = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return Promise.all([this.symbol || this.updateSymbol(), this.updateBalance(), this.decimals || this.updateDecimals()]);

              case 2:
                this.isLoading = false;
                return _context.abrupt("return", this.serialize());

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function update() {
        return _update.apply(this, arguments);
      }

      return update;
    }()
  }, {
    key: "serialize",
    value: function serialize() {
      return {
        address: this.address,
        symbol: this.symbol,
        balance: this.balance.toString(10),
        decimals: this.decimals ? parseInt(this.decimals.toString()) : 0,
        string: this.stringify(),
        balanceError: this.balanceError ? this.balanceError : null
      };
    }
  }, {
    key: "stringify",
    value: function stringify() {
      return util.stringifyBalance(this.balance, this.decimals || new BN(0));
    }
  }, {
    key: "updateSymbol",
    value: function () {
      var _updateSymbol = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        var symbol;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.updateValue('symbol');

              case 2:
                symbol = _context2.sent;
                this.symbol = symbol || 'TKN';
                return _context2.abrupt("return", this.symbol);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function updateSymbol() {
        return _updateSymbol.apply(this, arguments);
      }

      return updateSymbol;
    }()
  }, {
    key: "updateBalance",
    value: function () {
      var _updateBalance = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3() {
        var balance;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.updateValue('balance');

              case 2:
                balance = _context3.sent;
                this.balance = balance;
                return _context3.abrupt("return", this.balance);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function updateBalance() {
        return _updateBalance.apply(this, arguments);
      }

      return updateBalance;
    }()
  }, {
    key: "updateDecimals",
    value: function () {
      var _updateDecimals = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4() {
        var decimals;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(this.decimals !== undefined)) {
                  _context4.next = 2;
                  break;
                }

                return _context4.abrupt("return", this.decimals);

              case 2:
                _context4.next = 4;
                return this.updateValue('decimals');

              case 4:
                decimals = _context4.sent;

                if (decimals) {
                  this.decimals = decimals;
                }

                return _context4.abrupt("return", this.decimals);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function updateDecimals() {
        return _updateDecimals.apply(this, arguments);
      }

      return updateDecimals;
    }()
  }, {
    key: "updateValue",
    value: function () {
      var _updateValue = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5(key) {
        var methodName, args, result, _this$contract, val;

        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                args = [];
                _context5.t0 = key;
                _context5.next = _context5.t0 === 'balance' ? 4 : 7;
                break;

              case 4:
                methodName = 'balanceOf';
                args = [this.owner];
                return _context5.abrupt("break", 8);

              case 7:
                methodName = key;

              case 8:
                _context5.prev = 8;
                _context5.next = 11;
                return (_this$contract = this.contract)[methodName].apply(_this$contract, (0, _toConsumableArray2["default"])(args));

              case 11:
                result = _context5.sent;

                if (key === 'balance') {
                  this.balanceError === null;
                }

                _context5.next = 22;
                break;

              case 15:
                _context5.prev = 15;
                _context5.t1 = _context5["catch"](8);
                console.warn("failed to load ".concat(key, " for token at ").concat(this.address));

                if (!(key === 'balance')) {
                  _context5.next = 22;
                  break;
                }

                this.balanceError = _context5.t1;

                if (!this.throwOnBalanceError) {
                  _context5.next = 22;
                  break;
                }

                throw _context5.t1;

              case 22:
                if (!result) {
                  _context5.next = 26;
                  break;
                }

                val = result[0];
                this[key] = val;
                return _context5.abrupt("return", val);

              case 26:
                return _context5.abrupt("return", this[key]);

              case 27:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[8, 15]]);
      }));

      function updateValue(_x) {
        return _updateValue.apply(this, arguments);
      }

      return updateValue;
    }()
  }]);
  return Token;
}();

module.exports = Token;
      };
    };
  }
}, {package:"@metamask/eth-token-tracker",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/dist/token.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/url-icon/index.js", {"./url-icon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/url-icon/url-icon.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/url-icon/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _urlIcon.default;
  }
});

var _urlIcon = _interopRequireDefault(require("./url-icon"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/url-icon/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/import-token/index.js", {"./import-token":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/import-token/import-token.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/import-token/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _importToken.default;
  }
});

var _importToken = _interopRequireDefault(require("./import-token"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/import-token/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/index.js", {"./searchable-item-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/searchable-item-list.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _searchableItemList.default;
  }
});

var _searchableItemList = _interopRequireDefault(require("./searchable-item-list"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/utils.js", {"../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/utils.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.feeParamsAreCustom = void 0;
exports.getGasFeeEstimate = getGasFeeEstimate;

var _gas = require("../../../shared/constants/gas");

function getGasFeeEstimate(field, gasFeeEstimates, gasEstimateType, estimateToUse, fallback = '0') {
  if (gasEstimateType === _gas.GAS_ESTIMATE_TYPES.FEE_MARKET) {
    var _gasFeeEstimates$esti, _gasFeeEstimates$esti2;

    return (_gasFeeEstimates$esti = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : (_gasFeeEstimates$esti2 = gasFeeEstimates[estimateToUse]) === null || _gasFeeEstimates$esti2 === void 0 ? void 0 : _gasFeeEstimates$esti2[field]) !== null && _gasFeeEstimates$esti !== void 0 ? _gasFeeEstimates$esti : String(fallback);
  }

  return String(fallback);
}

const feeParamsAreCustom = transaction => !(transaction !== null && transaction !== void 0 && transaction.userFeeLevel) || (transaction === null || transaction === void 0 ? void 0 : transaction.userFeeLevel) === _gas.CUSTOM_GAS_ESTIMATE;

exports.feeParamsAreCustom = feeParamsAreCustom;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/gasFeeInput/utils.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
