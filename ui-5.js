LavaPack.loadBundle([
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/add-contact/add-contact.container.js", {"../../../../ducks/app/app":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/app/app.js","../../../../ducks/ens":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/ens.js","../../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./add-contact.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/add-contact/add-contact.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/add-contact/add-contact.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../../../store/actions");

var _app = require("../../../../ducks/app/app");

var _ens = require("../../../../ducks/ens");

var _addContact = _interopRequireDefault(require("./add-contact.component"));

const mapStateToProps = state => {
  return {
    qrCodeData: (0, _app.getQrCodeData)(state),
    ensError: (0, _ens.getEnsError)(state),
    ensResolution: (0, _ens.getEnsResolution)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    addToAddressBook: (recipient, nickname) => dispatch((0, _actions.addToAddressBook)(recipient, nickname)),
    scanQrCode: () => dispatch((0, _actions.showQrScanner)()),
    qrCodeDetected: data => dispatch((0, _actions.qrCodeDetected)(data)),
    resetEnsResolution: () => dispatch((0, _ens.resetEnsResolution)())
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_addContact.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/add-contact/add-contact.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list/index.js", {"./networks-list":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list/networks-list.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksList.default;
  }
});

var _networksList = _interopRequireDefault(require("./networks-list"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/object-keys/isArguments.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/object-keys/isArguments.js
      return function (require, module, exports) {
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

      };
    };
  }
}, {package:"object-keys",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/object-keys/isArguments.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/object-keys/implementation.js", {"./isArguments":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/object-keys/isArguments.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/object-keys/implementation.js
      return function (require, module, exports) {
'use strict';

var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = require('./isArguments'); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;

      };
    };
  }
}, {package:"object-keys",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/object-keys/implementation.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/has-symbols/index.js", {"./shams":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/has-symbols/shams.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/has-symbols/index.js
      return function (require, module, exports) {
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

      };
    };
  }
}, {package:"has-symbols",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/has-symbols/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/call-bind/callBound.js", {"./":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/call-bind/index.js","get-intrinsic":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/get-intrinsic/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/call-bind/callBound.js
      return function (require, module, exports) {
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

      };
    };
  }
}, {package:"call-bind",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/call-bind/callBound.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/implementation.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/implementation.js
      return function (require, module, exports) {
'use strict';

var $Object = Object;
var $TypeError = TypeError;

module.exports = function flags() {
	if (this != null && this !== $Object(this)) {
		throw new $TypeError('RegExp.prototype.flags getter called on non-object');
	}
	var result = '';
	if (this.global) {
		result += 'g';
	}
	if (this.ignoreCase) {
		result += 'i';
	}
	if (this.multiline) {
		result += 'm';
	}
	if (this.dotAll) {
		result += 's';
	}
	if (this.unicode) {
		result += 'u';
	}
	if (this.sticky) {
		result += 'y';
	}
	return result;
};

      };
    };
  }
}, {package:"regexp.prototype.flags",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/implementation.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/polyfill.js", {"./implementation":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/implementation.js","define-properties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/define-properties/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/polyfill.js
      return function (require, module, exports) {
'use strict';

var implementation = require('./implementation');

var supportsDescriptors = require('define-properties').supportsDescriptors;
var $gOPD = Object.getOwnPropertyDescriptor;
var $TypeError = TypeError;

module.exports = function getPolyfill() {
	if (!supportsDescriptors) {
		throw new $TypeError('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
	}
	if ((/a/mig).flags === 'gim') {
		var descriptor = $gOPD(RegExp.prototype, 'flags');
		if (descriptor && typeof descriptor.get === 'function' && typeof (/a/).dotAll === 'boolean') {
			return descriptor.get;
		}
	}
	return implementation;
};

      };
    };
  }
}, {package:"regexp.prototype.flags",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/polyfill.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/shim.js", {"./polyfill":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/polyfill.js","define-properties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/define-properties/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/shim.js
      return function (require, module, exports) {
'use strict';

var supportsDescriptors = require('define-properties').supportsDescriptors;
var getPolyfill = require('./polyfill');
var gOPD = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var TypeErr = TypeError;
var getProto = Object.getPrototypeOf;
var regex = /a/;

module.exports = function shimFlags() {
	if (!supportsDescriptors || !getProto) {
		throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
	}
	var polyfill = getPolyfill();
	var proto = getProto(regex);
	var descriptor = gOPD(proto, 'flags');
	if (!descriptor || descriptor.get !== polyfill) {
		defineProperty(proto, 'flags', {
			configurable: true,
			enumerable: false,
			get: polyfill
		});
	}
	return polyfill;
};

      };
    };
  }
}, {package:"regexp.prototype.flags",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/regexp.prototype.flags/shim.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/define-properties/index.js", {"object-keys":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/object-keys/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/define-properties/index.js
      return function (require, module, exports) {
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

      };
    };
  }
}, {package:"define-properties",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/define-properties/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/call-bind/index.js", {"function-bind":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/function-bind/index.js","get-intrinsic":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/get-intrinsic/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/call-bind/index.js
      return function (require, module, exports) {
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

      };
    };
  }
}, {package:"call-bind",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/call-bind/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/iterableToArray.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/iterableToArray.js
      return function (require, module, exports) {
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
      };
    };
  }
}, {package:"@babel/runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/iterableToArray.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/nonIterableSpread.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/nonIterableSpread.js
      return function (require, module, exports) {
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;
module.exports["default"] = module.exports, module.exports.__esModule = true;
      };
    };
  }
}, {package:"@babel/runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/nonIterableSpread.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js", {"./arrayLikeToArray.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/arrayLikeToArray.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js
      return function (require, module, exports) {
var arrayLikeToArray = require("./arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;
      };
    };
  }
}, {package:"@babel/runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/lib/lib/getTransactionSuccess.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/lib/lib/getTransactionSuccess.js
      return function (require, module, exports) {
"use strict";

module.exports = function (eth) {
  return function (txHash, callback) {
    var count = 0;

    var timeout = eth.options.timeout || 800000;
    var interval = eth.options.interval || 7000;

    var prom = new Promise(function (resolve, reject) {
      var txInterval = setInterval(function () {
        eth.getTransactionReceipt(txHash, function (err, result) {
          if (err) {
            clearInterval(txInterval);
            reject(err);
          }

          if (!err && result) {
            clearInterval(txInterval);
            resolve(result);
          }
        });

        if (count >= timeout) {
          clearInterval(txInterval);
          var errMessage = "Receipt timeout waiting for tx hash: " + txHash;
          reject(errMessage);
        }

        count += interval;
      }, interval);
    });

    if (callback) {
      prom.then(function (res) {
        return callback(null, res);
      })["catch"](function (err) {
        return callback(err, null);
      });
    }

    return callback ? null : prom;
  };
};
      };
    };
  }
}, {package:"ethjs",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/lib/lib/getTransactionSuccess.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/bn.js/lib/bn.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/bn.js/lib/bn.js
      return function (require, module, exports) {
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buf' + 'fer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

      };
    };
  }
}, {package:"bn.js",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/bn.js/lib/bn.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/js-sha3/src/sha3.js", {"_process":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/process/browser.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/js-sha3/src/sha3.js
      return function (require, module, exports) {
(function (process){(function (){
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.5.5
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2016
 * @license MIT
 */
(function (root) {
  'use strict';

  var NODE_JS = typeof process == 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  }
  var COMMON_JS = !root.JS_SHA3_TEST && typeof module == 'object' && module.exports;
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
            0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 
            2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 
            2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
            2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];

  var createOutputMethod = function (bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    }
  };

  var createShakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    }
  };

  var createMethod = function (bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');
    method.create = function () {
      return new Keccak(bits, padding, bits);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    for (var i = 0;i < OUTPUT_TYPES.length;++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(bits, padding, type);
    }
    return method;
  };

  var createShakeMethod = function (bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };
    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };
    for (var i = 0;i < OUTPUT_TYPES.length;++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createShakeOutputMethod(bits, padding, type);
    }
    return method;
  };

  var algorithms = [
    {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
    {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
    {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
  ];

  var methods = {};

  for (var i = 0;i < algorithms.length;++i) {
    var algorithm = algorithms[i];
    var bits  = algorithm.bits;
    for (var j = 0;j < bits.length;++j) {
      methods[algorithm.name +'_' + bits[j]] = algorithm.createMethod(bits[j], algorithm.padding);
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.block = 0;
    this.start = 0;
    this.blockCount = (1600 - (bits << 1)) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0;i < 50;++i) {
      this.s[i] = 0;
    }
  };

  Keccak.prototype.update = function (message) {
    var notString = typeof message != 'string';
    if (notString && message.constructor == root.ArrayBuffer) {
      message = new Uint8Array(message);
    }
    var length = message.length, blocks = this.blocks, byteCount = this.byteCount, 
        blockCount = this.blockCount, index = 0, s = this.s, i, code;
    
    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;
        for (i = 1;i < blockCount + 1;++i) {
          blocks[i] = 0;
        }
      }
      if (notString) {
        for (i = this.start;index < length && i < byteCount;++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start;index < length && i < byteCount;++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }
      this.lastByteIndex = i;
      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];
        for (i = 0;i < blockCount;++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }
    return this;
  };

  Keccak.prototype.finalize = function () {
    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];
    if (this.lastByteIndex == this.byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1;i < blockCount + 1;++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0;i < blockCount;++i) {
      s[i] ^= blocks[i];
    }
    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, 
        extraBytes = this.extraBytes, i = 0, j = 0;
    var hex = '', block;
    while (j < outputBlocks) {
      for (i = 0;i < blockCount && j < outputBlocks;++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
               HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
               HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
               HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
      }
      if (j % blockCount == 0) {
        f(s);
        i = 0;
      }
    }
    if (extraBytes) {
      block = s[i];
      if (extraBytes > 0) {
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
      }
      if (extraBytes > 1) {
        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
      }
      if (extraBytes > 2) {
        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
      }
    }
    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, 
        extraBytes = this.extraBytes, i = 0, j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;
    if (extraBytes) {
      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }
    var array = new Uint32Array(buffer);
    while (j < outputBlocks) {
      for (i = 0;i < blockCount && j < outputBlocks;++i, ++j) {
        array[j] = s[i];
      }
      if (j % blockCount == 0) {
        f(s);
      }
    }
    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }
    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, 
        extraBytes = this.extraBytes, i = 0, j = 0;
    var array = [], offset, block;
    while (j < outputBlocks) {
      for (i = 0;i < blockCount && j < outputBlocks;++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = (block >> 8) & 0xFF;
        array[offset + 2] = (block >> 16) & 0xFF;
        array[offset + 3] = (block >> 24) & 0xFF;
      }
      if (j % blockCount == 0) {
        f(s);
      }
    }
    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      if (extraBytes > 0) {
        array[offset] = block & 0xFF;
      }
      if (extraBytes > 1) {
        array[offset + 1] = (block >> 8) & 0xFF;
      }
      if (extraBytes > 2) {
        array[offset + 2] = (block >> 16) & 0xFF;
      }
    }
    return array;
  };

  var f = function (s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, 
        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, 
        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, 
        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    for (n = 0;n < 48;n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = (s[11] << 4) | (s[10] >>> 28);
      b33 = (s[10] << 4) | (s[11] >>> 28);
      b14 = (s[20] << 3) | (s[21] >>> 29);
      b15 = (s[21] << 3) | (s[20] >>> 29);
      b46 = (s[31] << 9) | (s[30] >>> 23);
      b47 = (s[30] << 9) | (s[31] >>> 23);
      b28 = (s[40] << 18) | (s[41] >>> 14);
      b29 = (s[41] << 18) | (s[40] >>> 14);
      b20 = (s[2] << 1) | (s[3] >>> 31);
      b21 = (s[3] << 1) | (s[2] >>> 31);
      b2 = (s[13] << 12) | (s[12] >>> 20);
      b3 = (s[12] << 12) | (s[13] >>> 20);
      b34 = (s[22] << 10) | (s[23] >>> 22);
      b35 = (s[23] << 10) | (s[22] >>> 22);
      b16 = (s[33] << 13) | (s[32] >>> 19);
      b17 = (s[32] << 13) | (s[33] >>> 19);
      b48 = (s[42] << 2) | (s[43] >>> 30);
      b49 = (s[43] << 2) | (s[42] >>> 30);
      b40 = (s[5] << 30) | (s[4] >>> 2);
      b41 = (s[4] << 30) | (s[5] >>> 2);
      b22 = (s[14] << 6) | (s[15] >>> 26);
      b23 = (s[15] << 6) | (s[14] >>> 26);
      b4 = (s[25] << 11) | (s[24] >>> 21);
      b5 = (s[24] << 11) | (s[25] >>> 21);
      b36 = (s[34] << 15) | (s[35] >>> 17);
      b37 = (s[35] << 15) | (s[34] >>> 17);
      b18 = (s[45] << 29) | (s[44] >>> 3);
      b19 = (s[44] << 29) | (s[45] >>> 3);
      b10 = (s[6] << 28) | (s[7] >>> 4);
      b11 = (s[7] << 28) | (s[6] >>> 4);
      b42 = (s[17] << 23) | (s[16] >>> 9);
      b43 = (s[16] << 23) | (s[17] >>> 9);
      b24 = (s[26] << 25) | (s[27] >>> 7);
      b25 = (s[27] << 25) | (s[26] >>> 7);
      b6 = (s[36] << 21) | (s[37] >>> 11);
      b7 = (s[37] << 21) | (s[36] >>> 11);
      b38 = (s[47] << 24) | (s[46] >>> 8);
      b39 = (s[46] << 24) | (s[47] >>> 8);
      b30 = (s[8] << 27) | (s[9] >>> 5);
      b31 = (s[9] << 27) | (s[8] >>> 5);
      b12 = (s[18] << 20) | (s[19] >>> 12);
      b13 = (s[19] << 20) | (s[18] >>> 12);
      b44 = (s[29] << 7) | (s[28] >>> 25);
      b45 = (s[28] << 7) | (s[29] >>> 25);
      b26 = (s[38] << 8) | (s[39] >>> 24);
      b27 = (s[39] << 8) | (s[38] >>> 24);
      b8 = (s[48] << 14) | (s[49] >>> 18);
      b9 = (s[49] << 14) | (s[48] >>> 18);

      s[0] = b0 ^ (~b2 & b4);
      s[1] = b1 ^ (~b3 & b5);
      s[10] = b10 ^ (~b12 & b14);
      s[11] = b11 ^ (~b13 & b15);
      s[20] = b20 ^ (~b22 & b24);
      s[21] = b21 ^ (~b23 & b25);
      s[30] = b30 ^ (~b32 & b34);
      s[31] = b31 ^ (~b33 & b35);
      s[40] = b40 ^ (~b42 & b44);
      s[41] = b41 ^ (~b43 & b45);
      s[2] = b2 ^ (~b4 & b6);
      s[3] = b3 ^ (~b5 & b7);
      s[12] = b12 ^ (~b14 & b16);
      s[13] = b13 ^ (~b15 & b17);
      s[22] = b22 ^ (~b24 & b26);
      s[23] = b23 ^ (~b25 & b27);
      s[32] = b32 ^ (~b34 & b36);
      s[33] = b33 ^ (~b35 & b37);
      s[42] = b42 ^ (~b44 & b46);
      s[43] = b43 ^ (~b45 & b47);
      s[4] = b4 ^ (~b6 & b8);
      s[5] = b5 ^ (~b7 & b9);
      s[14] = b14 ^ (~b16 & b18);
      s[15] = b15 ^ (~b17 & b19);
      s[24] = b24 ^ (~b26 & b28);
      s[25] = b25 ^ (~b27 & b29);
      s[34] = b34 ^ (~b36 & b38);
      s[35] = b35 ^ (~b37 & b39);
      s[44] = b44 ^ (~b46 & b48);
      s[45] = b45 ^ (~b47 & b49);
      s[6] = b6 ^ (~b8 & b0);
      s[7] = b7 ^ (~b9 & b1);
      s[16] = b16 ^ (~b18 & b10);
      s[17] = b17 ^ (~b19 & b11);
      s[26] = b26 ^ (~b28 & b20);
      s[27] = b27 ^ (~b29 & b21);
      s[36] = b36 ^ (~b38 & b30);
      s[37] = b37 ^ (~b39 & b31);
      s[46] = b46 ^ (~b48 & b40);
      s[47] = b47 ^ (~b49 & b41);
      s[8] = b8 ^ (~b0 & b2);
      s[9] = b9 ^ (~b1 & b3);
      s[18] = b18 ^ (~b10 & b12);
      s[19] = b19 ^ (~b11 & b13);
      s[28] = b28 ^ (~b20 & b22);
      s[29] = b29 ^ (~b21 & b23);
      s[38] = b38 ^ (~b30 & b32);
      s[39] = b39 ^ (~b31 & b33);
      s[48] = b48 ^ (~b40 & b42);
      s[49] = b49 ^ (~b41 & b43);

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  }

  if (COMMON_JS) {
    module.exports = methods;
  } else if (root) {
    for (var key in methods) {
      root[key] = methods[key];
    }
  }
}(this));

}).call(this)}).call(this,require('_process'))

      };
    };
  }
}, {package:"js-sha3",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/js-sha3/src/sha3.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs-abi/lib/index.js", {"./utils/index.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs-abi/lib/utils/index.js","buffer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/browserify/node_modules/buffer/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs-abi/lib/index.js
      return function (require, module, exports) {
(function (Buffer){(function (){
'use strict';

/* eslint-disable */

var utils = require('./utils/index.js');
var uint256Coder = utils.uint256Coder;
var coderBoolean = utils.coderBoolean;
var coderFixedBytes = utils.coderFixedBytes;
var coderAddress = utils.coderAddress;
var coderDynamicBytes = utils.coderDynamicBytes;
var coderString = utils.coderString;
var coderArray = utils.coderArray;
var paramTypePart = utils.paramTypePart;
var getParamCoder = utils.getParamCoder;

function Result() {}

function encodeParams(types, values) {
  if (types.length !== values.length) {
    throw new Error('[ethjs-abi] while encoding params, types/values mismatch, Your contract requires ' + types.length + ' types (arguments), and you passed in ' + values.length);
  }

  var parts = [];

  types.forEach(function (type, index) {
    var coder = getParamCoder(type);
    parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });
  });

  function alignSize(size) {
    return parseInt(32 * Math.ceil(size / 32));
  }

  var staticSize = 0,
      dynamicSize = 0;
  parts.forEach(function (part) {
    if (part.dynamic) {
      staticSize += 32;
      dynamicSize += alignSize(part.value.length);
    } else {
      staticSize += alignSize(part.value.length);
    }
  });

  var offset = 0,
      dynamicOffset = staticSize;
  var data = new Buffer(staticSize + dynamicSize);

  parts.forEach(function (part, index) {
    if (part.dynamic) {
      uint256Coder.encode(dynamicOffset).copy(data, offset);
      offset += 32;

      part.value.copy(data, dynamicOffset);
      dynamicOffset += alignSize(part.value.length);
    } else {
      part.value.copy(data, offset);
      offset += alignSize(part.value.length);
    }
  });

  return '0x' + data.toString('hex');
}

// decode bytecode data from output names and types
function decodeParams(names, types, data) {
  var useNumberedParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  // Names is optional, so shift over all the parameters if not provided
  if (arguments.length < 3) {
    data = types;
    types = names;
    names = [];
  }

  data = utils.hexOrBuffer(data);
  var values = new Result();

  var offset = 0;
  types.forEach(function (type, index) {
    var coder = getParamCoder(type);

    if (coder.dynamic) {
      var dynamicOffset = uint256Coder.decode(data, offset);
      var result = coder.decode(data, dynamicOffset.value.toNumber());
      offset += dynamicOffset.consumed;
    } else {
      var result = coder.decode(data, offset);
      offset += result.consumed;
    }

    if (useNumberedParams) {
      values[index] = result.value;
    }

    if (names[index]) {
      values[names[index]] = result.value;
    }
  });
  return values;
}

// create an encoded method signature from an ABI object
function encodeSignature(method) {
  var signature = method.name + '(' + utils.getKeys(method.inputs, 'type').join(',') + ')';
  var signatureEncoded = '0x' + new Buffer(utils.keccak256(signature), 'hex').slice(0, 4).toString('hex');

  return signatureEncoded;
}

// encode method ABI object with values in an array, output bytecode
function encodeMethod(method, values) {
  var paramsEncoded = encodeParams(utils.getKeys(method.inputs, 'type'), values).substring(2);

  return '' + encodeSignature(method) + paramsEncoded;
}

// decode method data bytecode, from method ABI object
function decodeMethod(method, data) {
  var outputNames = utils.getKeys(method.outputs, 'name', true);
  var outputTypes = utils.getKeys(method.outputs, 'type');

  return decodeParams(outputNames, outputTypes, utils.hexOrBuffer(data));
}

// decode method data bytecode, from method ABI object
function encodeEvent(eventObject, values) {
  return encodeMethod(eventObject, values);
}

function eventSignature(eventObject) {
  var signature = eventObject.name + '(' + utils.getKeys(eventObject.inputs, 'type').join(',') + ')';

  return '0x' + utils.keccak256(signature);
}

// decode method data bytecode, from method ABI object
function decodeEvent(eventObject, data, topics) {
  var useNumberedParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var nonIndexed = eventObject.inputs.filter(function (input) {
    return !input.indexed;
  });
  var nonIndexedNames = utils.getKeys(nonIndexed, 'name', true);
  var nonIndexedTypes = utils.getKeys(nonIndexed, 'type');
  var event = decodeParams(nonIndexedNames, nonIndexedTypes, utils.hexOrBuffer(data), useNumberedParams);
  var topicOffset = eventObject.anonymous ? 0 : 1;

  eventObject.inputs.filter(function (input) {
    return input.indexed;
  }).map(function (input, i) {
    var topic = new Buffer(topics[i + topicOffset].slice(2), 'hex');
    var coder = getParamCoder(input.type);
    event[input.name] = coder.decode(topic, 0).value;
  });

  event._eventName = eventObject.name;

  return event;
}

// Decode a specific log item with a specific event abi
function decodeLogItem(eventObject, log) {
  var useNumberedParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (eventObject && log.topics[0] === eventSignature(eventObject)) {
    return decodeEvent(eventObject, log.data, log.topics, useNumberedParams);
  }
}

// Create a decoder for all events defined in an abi. It returns a function which is called
// on an array of log entries such as received from getLogs or getTransactionReceipt and parses
// any matching log entries
function logDecoder(abi) {
  var useNumberedParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var eventMap = {};
  abi.filter(function (item) {
    return item.type === 'event';
  }).map(function (item) {
    eventMap[eventSignature(item)] = item;
  });
  return function (logItems) {
    return logItems.map(function (log) {
      return decodeLogItem(eventMap[log.topics[0]], log, useNumberedParams);
    }).filter(function (i) {
      return i;
    });
  };
}

module.exports = {
  encodeParams: encodeParams,
  decodeParams: decodeParams,
  encodeMethod: encodeMethod,
  decodeMethod: decodeMethod,
  encodeEvent: encodeEvent,
  decodeEvent: decodeEvent,
  decodeLogItem: decodeLogItem,
  logDecoder: logDecoder,
  eventSignature: eventSignature,
  encodeSignature: encodeSignature
};
}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"ethjs-abi",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs-abi/lib/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-query/lib/index.js", {"babel-runtime/core-js/json/stringify":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/json/stringify.js","babel-runtime/core-js/object/assign":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/assign.js","babel-runtime/core-js/object/define-property":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/define-property.js","babel-runtime/core-js/object/keys":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/keys.js","babel-runtime/helpers/asyncToGenerator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/asyncToGenerator.js","babel-runtime/regenerator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/regenerator/index.js","ethjs-format":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethjs-format/lib/index.js","ethjs-rpc":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethjs-rpc/lib/index.js","promise-to-callback":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/promise-to-callback/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-query/lib/index.js
      return function (require, module, exports) {
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var format = require('ethjs-format');
var EthRPC = require('ethjs-rpc');
var promiseToCallback = require('promise-to-callback');

module.exports = Eth;

function Eth(provider, options) {
  var self = this;
  var optionsObject = options || {};

  if (!(this instanceof Eth)) {
    throw new Error('[ethjs-query] the Eth object requires the "new" flag in order to function normally (i.e. `const eth = new Eth(provider);`).');
  }
  if (typeof provider !== 'object') {
    throw new Error('[ethjs-query] the Eth object requires that the first input \'provider\' must be an object, got \'' + typeof provider + '\' (i.e. \'const eth = new Eth(provider);\')');
  }

  self.options = (0, _assign2['default'])({
    debug: optionsObject.debug || false,
    logger: optionsObject.logger || console,
    jsonSpace: optionsObject.jsonSpace || 0
  });
  self.rpc = new EthRPC(provider);
  self.setProvider = self.rpc.setProvider;
}

Eth.prototype.log = function log(message) {
  var self = this;
  if (self.options.debug) self.options.logger.log('[ethjs-query log] ' + message);
};

(0, _keys2['default'])(format.schema.methods).forEach(function (rpcMethodName) {
  (0, _defineProperty2['default'])(Eth.prototype, rpcMethodName.replace('eth_', ''), {
    enumerable: true,
    value: generateFnFor(rpcMethodName, format.schema.methods[rpcMethodName])
  });
});

function generateFnFor(rpcMethodName, methodObject) {
  return function outputMethod() {
    var performCall = function () {
      var _ref = (0, _asyncToGenerator3['default'])( /*#__PURE__*/_regenerator2['default'].mark(function _callee() {
        var result, methodOutputs, outputError;
        return _regenerator2['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(args.length < methodObject[2])) {
                  _context.next = 2;
                  break;
                }

                throw new Error('[ethjs-query] method \'' + protoMethodName + '\' requires at least ' + methodObject[2] + ' input (format type ' + methodObject[0][0] + '), ' + args.length + ' provided. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#' + rpcMethodName.toLowerCase());

              case 2:
                if (!(args.length > methodObject[0].length)) {
                  _context.next = 4;
                  break;
                }

                throw new Error('[ethjs-query] method \'' + protoMethodName + '\' requires at most ' + methodObject[0].length + ' params, ' + args.length + ' provided \'' + (0, _stringify2['default'])(args, null, self.options.jsonSpace) + '\'. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#' + rpcMethodName.toLowerCase());

              case 4:

                // set default block
                if (methodObject[3] && args.length < methodObject[3]) {
                  args.push('latest');
                }

                // format inputs
                this.log('attempting method formatting for \'' + protoMethodName + '\' with inputs ' + (0, _stringify2['default'])(args, null, this.options.jsonSpace));
                _context.prev = 6;

                inputs = format.formatInputs(rpcMethodName, args);
                this.log('method formatting success for \'' + protoMethodName + '\' with formatted result: ' + (0, _stringify2['default'])(inputs, null, this.options.jsonSpace));
                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](6);
                throw new Error('[ethjs-query] while formatting inputs \'' + (0, _stringify2['default'])(args, null, this.options.jsonSpace) + '\' for method \'' + protoMethodName + '\' error: ' + _context.t0);

              case 14:
                _context.next = 16;
                return this.rpc.sendAsync({ method: rpcMethodName, params: inputs });

              case 16:
                result = _context.sent;
                _context.prev = 17;

                this.log('attempting method formatting for \'' + protoMethodName + '\' with raw outputs: ' + (0, _stringify2['default'])(result, null, this.options.jsonSpace));
                methodOutputs = format.formatOutputs(rpcMethodName, result);

                this.log('method formatting success for \'' + protoMethodName + '\' formatted result: ' + (0, _stringify2['default'])(methodOutputs, null, this.options.jsonSpace));
                return _context.abrupt('return', methodOutputs);

              case 24:
                _context.prev = 24;
                _context.t1 = _context['catch'](17);
                outputError = new Error('[ethjs-query] while formatting outputs from RPC \'' + (0, _stringify2['default'])(result, null, this.options.jsonSpace) + '\' for method \'' + protoMethodName + '\' ' + _context.t1);
                throw outputError;

              case 28:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[6, 11], [17, 24]]);
      }));

      return function performCall() {
        return _ref.apply(this, arguments);
      };
    }();

    var callback = null; // eslint-disable-line
    var inputs = null; // eslint-disable-line
    var inputError = null; // eslint-disable-line
    var self = this;
    var args = [].slice.call(arguments); // eslint-disable-line
    var protoMethodName = rpcMethodName.replace('eth_', ''); // eslint-disable-line

    if (args.length > 0 && typeof args[args.length - 1] === 'function') {
      callback = args.pop();
    }

    var promise = performCall.call(this);

    // if callback provided, convert promise to callback
    if (callback) {
      return promiseToCallback(promise)(callback);
    }

    // only return promise if no callback provided
    return promise;
  };
}
      };
    };
  }
}, {package:"ethjs-query",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-query/lib/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/index.js", {"./contract":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/contract.js","./has-tx-object":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/has-tx-object.js","babel-runtime/core-js/object/assign":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/assign.js","ethjs-abi":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/node_modules/ethjs-abi/lib/index.js","ethjs-filter":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethjs-filter/lib/index.js","ethjs-util":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethjs-util/lib/index.js","js-sha3":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/js-sha3/src/sha3.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/index.js
      return function (require, module, exports) {
'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var abi = require('ethjs-abi'); // eslint-disable-line
var keccak256 = require('js-sha3').keccak_256; // eslint-disable-line
var EthFilter = require('ethjs-filter'); // eslint-disable-line
var getKeys = require('ethjs-util').getKeys; // eslint-disable-line
var Contract = require('./contract');
var hasTransactionObject = require('./has-tx-object');

module.exports = EthContract;

function EthContract(query) {
  return function contractFactory(contractABI, contractBytecode, contractDefaultTxObject) {
    // validate params
    if (!Array.isArray(contractABI)) {
      throw new Error('[ethjs-contract] Contract ABI must be type Array, got type ' + typeof contractABI);
    }
    if (typeof contractBytecode !== 'undefined' && typeof contractBytecode !== 'string') {
      throw new Error('[ethjs-contract] Contract bytecode must be type String, got type ' + typeof contractBytecode);
    }
    if (typeof contractDefaultTxObject !== 'undefined' && typeof contractDefaultTxObject !== 'object') {
      throw new Error('[ethjs-contract] Contract default tx object must be type Object, got type ' + typeof contractABI);
    }

    // build contract object
    var output = {};
    output.at = function contractAtAddress(address) {
      return new Contract({
        address: address,
        query: query,
        contractBytecode: contractBytecode,
        contractDefaultTxObject: contractDefaultTxObject,
        contractABI: contractABI
      });
    };

    output['new'] = function newContract() {
      var providedTxObject = {}; // eslint-disable-line
      var newMethodCallback = null; // eslint-disable-line
      var newMethodArgs = [].slice.call(arguments); // eslint-disable-line
      if (typeof newMethodArgs[newMethodArgs.length - 1] === 'function') newMethodCallback = newMethodArgs.pop();
      if (hasTransactionObject(newMethodArgs)) providedTxObject = newMethodArgs.pop();
      var constructorMethod = getConstructorFromABI(contractABI);
      var assembleTxObject = (0, _assign2['default'])({}, contractDefaultTxObject, providedTxObject);

      // set contract deploy bytecode
      if (contractBytecode) {
        assembleTxObject.data = contractBytecode;
      }

      // append encoded constructor arguments
      if (constructorMethod) {
        var constructorBytecode = abi.encodeParams(getKeys(constructorMethod.inputs, 'type'), newMethodArgs).substring(2); // eslint-disable-line
        assembleTxObject.data = '' + assembleTxObject.data + constructorBytecode;
      }

      return newMethodCallback ? query.sendTransaction(assembleTxObject, newMethodCallback) : query.sendTransaction(assembleTxObject);
    };

    return output;
  };
}

function getConstructorFromABI(contractABI) {
  return contractABI.filter(function (json) {
    return json.type === 'constructor';
  })[0];
}
      };
    };
  }
}, {package:"ethjs-contract",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/list-item-search/index.js", {"./list-item-search.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/list-item-search/list-item-search.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/list-item-search/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _listItemSearch.default;
  }
});

var _listItemSearch = _interopRequireDefault(require("./list-item-search.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/list-item-search/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/item-list/index.js", {"./item-list.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/item-list/item-list.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/item-list/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _itemList.default;
  }
});

var _itemList = _interopRequireDefault(require("./item-list.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/item-list/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-button/edit-gas-fee-button.js", {"../../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../../contexts/transaction-modal":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/transaction-modal.js","../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../helpers/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/gas.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../ui/info-tooltip/info-tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/info-tooltip/info-tooltip.js","../../ui/typography/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/typography.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-button/edit-gas-fee-button.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasFeeButton;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _gas = require("../../../../shared/constants/gas");

var _designSystem = require("../../../helpers/constants/design-system");

var _gas2 = require("../../../helpers/constants/gas");

var _gasFee = require("../../../contexts/gasFee");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _transactionModal = require("../../../contexts/transaction-modal");

var _infoTooltip = _interopRequireDefault(require("../../ui/info-tooltip/info-tooltip"));

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

function EditGasFeeButton({
  userAcknowledgedGasMissing
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    editGasMode,
    gasLimit,
    hasSimulationError,
    estimateUsed,
    maxFeePerGas,
    maxPriorityFeePerGas,
    supportsEIP1559V2,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const {
    openModal
  } = (0, _transactionModal.useTransactionModalContext)();
  const editEnabled = !hasSimulationError || userAcknowledgedGasMissing === true;

  if (!supportsEIP1559V2 || !estimateUsed || !editEnabled) {
    return null;
  }

  let icon = estimateUsed;
  let title = estimateUsed;

  if (estimateUsed === _gas.PRIORITY_LEVELS.HIGH && editGasMode === _gas.EDIT_GAS_MODES.SWAPS) {
    icon = 'swapSuggested';
    title = 'swapSuggested';
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-button"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => openModal('editGasFee')
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-button__icon"
  }, `${_gas2.PRIORITY_LEVEL_ICON_MAP[icon]} `), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-button__label"
  }, t(title)), /*#__PURE__*/_react.default.createElement("i", {
    className: "fas fa-chevron-right asset-list-item__chevron-right"
  })), estimateUsed === 'custom' && /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => openModal('advancedGasFee')
  }, t('edit')), estimateUsed === 'dappSuggested' && /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    contentText: /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-gas-fee-button__tooltip"
    }, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7,
      color: _designSystem.COLORS.GREY
    }, t('dappSuggestedTooltip', [transaction.origin])), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7
    }, /*#__PURE__*/_react.default.createElement("b", null, t('maxBaseFee')), maxFeePerGas), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7
    }, /*#__PURE__*/_react.default.createElement("b", null, t('maxPriorityFee')), maxPriorityFeePerGas), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7
    }, /*#__PURE__*/_react.default.createElement("b", null, t('gasLimit')), gasLimit)),
    position: "top"
  }));
}

EditGasFeeButton.propTypes = {
  userAcknowledgedGasMissing: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-button/edit-gas-fee-button.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/sun-check-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/sun-check-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SunCheck;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function SunCheck({
  reverseColors
}) {
  const sunColor = reverseColors ? '#037DD6' : 'white';
  const checkColor = reverseColors ? 'white' : '#037DD6';
  return /*#__PURE__*/_react.default.createElement("svg", {
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M13.2148 9.05384C13.432 8.40203 14.8878 7.92403 14.8878 7.20703C14.8878 6.49003 13.432 6.01204 13.2148 5.36022C12.9975 4.68668 13.8883 3.44823 13.4755 2.88332C13.0627 2.31842 11.607 2.77469 11.0421 2.3836C10.4771 1.97078 10.4771 0.449879 9.80361 0.232608C9.15179 0.0153358 8.26098 1.25378 7.54398 1.25378C6.82698 1.25378 5.91444 0.0153358 5.28435 0.232608C4.61081 0.449879 4.61081 1.99251 4.04591 2.3836C3.481 2.79641 2.02528 2.31842 1.61246 2.88332C1.19965 3.44823 2.09046 4.68668 1.87319 5.36022C1.65592 6.01204 0.200195 6.49003 0.200195 7.20703C0.200195 7.92403 1.65592 8.40203 1.87319 9.05384C2.09046 9.72738 1.19965 10.9658 1.61246 11.5307C2.02528 12.0956 3.481 11.6394 4.04591 12.0305C4.61081 12.4433 4.61081 13.9642 5.28435 14.1815C5.93617 14.3987 6.82698 13.1603 7.54398 13.1603C8.26098 13.1603 9.17352 14.3987 9.80361 14.1815C10.4771 13.9642 10.4771 12.4216 11.0421 12.0305C11.607 11.6176 13.0627 12.0956 13.4755 11.5307C13.8883 10.9658 12.9975 9.70566 13.2148 9.05384Z",
    fill: sunColor
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M6.42285 10.084L4.13965 7.81445C4.07585 7.75065 4.04395 7.66862 4.04395 7.56836C4.04395 7.4681 4.07585 7.38607 4.13965 7.32227L4.64551 6.83008C4.70931 6.75716 4.78678 6.7207 4.87793 6.7207C4.97819 6.7207 5.06478 6.75716 5.1377 6.83008L6.66895 8.36133L9.9502 5.08008C10.0231 5.00716 10.1051 4.9707 10.1963 4.9707C10.2965 4.9707 10.3786 5.00716 10.4424 5.08008L10.9482 5.57227C11.012 5.63607 11.0439 5.7181 11.0439 5.81836C11.0439 5.91862 11.012 6.00065 10.9482 6.06445L6.91504 10.084C6.85124 10.1569 6.76921 10.1934 6.66895 10.1934C6.56868 10.1934 6.48665 10.1569 6.42285 10.084Z",
    fill: checkColor
  }));
}

SunCheck.propTypes = {
  /**
   * If true reverses the colors of the SunCheck icon
   */
  reverseColors: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/sun-check-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-item/useCustomTimeEstimate.js", {"../../../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","bignumber.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/bignumber.js/bignumber.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-item/useCustomTimeEstimate.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCustomTimeEstimate = void 0;

var _react = require("react");

var _reactRedux = require("react-redux");

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _gas = require("../../../../../shared/constants/gas");

var _metamask = require("../../../../ducks/metamask/metamask");

var _actions = require("../../../../store/actions");

const useCustomTimeEstimate = ({
  gasFeeEstimates,
  maxFeePerGas,
  maxPriorityFeePerGas
}) => {
  const gasEstimateType = (0, _reactRedux.useSelector)(_metamask.getGasEstimateType);
  const isGasEstimatesLoading = (0, _reactRedux.useSelector)(_metamask.getIsGasEstimatesLoading);
  const [customEstimatedTime, setCustomEstimatedTime] = (0, _react.useState)(null);
  const returnNoEstimates = isGasEstimatesLoading || gasEstimateType !== _gas.GAS_ESTIMATE_TYPES.FEE_MARKET || !maxPriorityFeePerGas; // If the user has chosen a value lower than the low gas fee estimate,
  // We'll need to use the useEffect hook below to make a call to calculate
  // the time to show

  const isUnknownLow = (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low) && Number(maxPriorityFeePerGas) < Number(gasFeeEstimates.low.suggestedMaxPriorityFeePerGas);
  (0, _react.useEffect)(() => {
    if (isGasEstimatesLoading || gasEstimateType !== _gas.GAS_ESTIMATE_TYPES.FEE_MARKET || !maxPriorityFeePerGas) return;

    if (isUnknownLow) {
      // getGasFeeTimeEstimate requires parameters in string format
      (0, _actions.getGasFeeTimeEstimate)(new _bignumber.default(maxPriorityFeePerGas, 10).toString(10), new _bignumber.default(maxFeePerGas, 10).toString(10)).then(result => {
        setCustomEstimatedTime(result);
      });
    }
  }, [gasEstimateType, isUnknownLow, isGasEstimatesLoading, maxFeePerGas, maxPriorityFeePerGas, returnNoEstimates]);

  if (returnNoEstimates) {
    return {};
  }

  const {
    low = {},
    medium = {},
    high = {}
  } = gasFeeEstimates;
  let waitTimeEstimate = '';

  if (isUnknownLow && customEstimatedTime && customEstimatedTime !== 'unknown' && (customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound) !== 'unknown') {
    waitTimeEstimate = Number(customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound);
  } else if (Number(maxPriorityFeePerGas) >= Number(medium.suggestedMaxPriorityFeePerGas)) {
    waitTimeEstimate = high.minWaitTimeEstimate;
  } else {
    waitTimeEstimate = low.maxWaitTimeEstimate;
  }

  return {
    waitTimeEstimate
  };
};

exports.useCustomTimeEstimate = useCustomTimeEstimate;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-item/useCustomTimeEstimate.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-tooltip/edit-gas-tooltip.js", {"../../../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../ui/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-tooltip/edit-gas-tooltip.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _gas = require("../../../../../shared/constants/gas");

var _designSystem = require("../../../../helpers/constants/design-system");

var _typography = _interopRequireDefault(require("../../../ui/typography"));

const EditGasToolTip = ({
  gasLimit,
  priorityLevel,
  // maxFeePerGas & maxPriorityFeePerGas are derived from conditional logic
  // related to the source of the estimates. We pass these values from the
  // the parent component (edit-gas-item) rather than recalculate them
  maxFeePerGas,
  maxPriorityFeePerGas,
  editGasMode,
  transaction,
  t
}) => {
  const toolTipMessage = () => {
    switch (priorityLevel) {
      case _gas.PRIORITY_LEVELS.LOW:
        return t('lowGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('low')))]);

      case _gas.PRIORITY_LEVELS.MEDIUM:
        return t('mediumGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('medium')))]);

      case _gas.PRIORITY_LEVELS.HIGH:
        if (editGasMode === _gas.EDIT_GAS_MODES.SWAPS) {
          return t('swapSuggestedGasSettingToolTipMessage');
        }

        return t('highGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('high')))]);

      case _gas.PRIORITY_LEVELS.CUSTOM:
        return t('customGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('custom')))]);

      case _gas.PRIORITY_LEVELS.DAPP_SUGGESTED:
        return transaction !== null && transaction !== void 0 && transaction.origin ? t('dappSuggestedGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: transaction === null || transaction === void 0 ? void 0 : transaction.origin
        }, transaction === null || transaction === void 0 ? void 0 : transaction.origin)]) : null;

      default:
        return '';
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container"
  }, priorityLevel !== _gas.PRIORITY_LEVELS.CUSTOM && priorityLevel !== _gas.PRIORITY_LEVELS.DAPP_SUGGESTED && !(priorityLevel === _gas.PRIORITY_LEVELS.HIGH && editGasMode === _gas.EDIT_GAS_MODES.SWAPS) ? /*#__PURE__*/_react.default.createElement("img", {
    alt: "",
    src: `./images/curve-${priorityLevel}.svg`
  }) : null, priorityLevel === _gas.PRIORITY_LEVELS.HIGH && editGasMode !== _gas.EDIT_GAS_MODES.SWAPS ? /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container__dialog"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.WHITE
  }, t('highGasSettingToolTipDialog'))) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container__message"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7
  }, toolTipMessage())), priorityLevel === _gas.PRIORITY_LEVELS.CUSTOM ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container__values"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    className: "edit-gas-tooltip__container__label"
  }, t('maxBaseFee')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.NEUTRAL_GREY,
    className: "edit-gas-tooltip__container__value"
  }, maxFeePerGas)), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    className: "edit-gas-tooltip__container__label"
  }, t('priorityFeeProperCase')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.NEUTRAL_GREY,
    className: "edit-gas-tooltip__container__value"
  }, maxPriorityFeePerGas)), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    className: "edit-gas-tooltip__container__label"
  }, t('gasLimit')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.NEUTRAL_GREY,
    className: "edit-gas-tooltip__container__value"
  }, gasLimit))));
};

EditGasToolTip.propTypes = {
  priorityLevel: _propTypes.default.string,
  maxFeePerGas: _propTypes.default.string,
  maxPriorityFeePerGas: _propTypes.default.string,
  t: _propTypes.default.func,
  editGasMode: _propTypes.default.string,
  gasLimit: _propTypes.default.number,
  transaction: _propTypes.default.object
};
var _default = EditGasToolTip;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-tooltip/edit-gas-tooltip.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/tooltips.js", {"../../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../ui/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/tooltips.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PriorityFeeTooltip = exports.NetworkStabilityTooltip = exports.BaseFeeTooltip = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));

const NetworkStatusTooltip = ({
  children,
  html,
  title
}) => /*#__PURE__*/_react.default.createElement(_tooltip.default, {
  position: "top",
  html: html,
  title: title,
  theme: "tippy-tooltip-info"
}, children);

NetworkStatusTooltip.propTypes = {
  children: _propTypes.default.node.isRequired,
  html: _propTypes.default.node,
  title: _propTypes.default.string
};

const BaseFeeTooltip = ({
  children
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    html: t('networkStatusBaseFeeTooltip', [/*#__PURE__*/_react.default.createElement("strong", {
      key: "base_fee_medium_estimate",
      className: "network-status__tooltip-label"
    }, t('medium')), /*#__PURE__*/_react.default.createElement("strong", {
      key: "base_fee_high_estimate",
      className: "network-status__tooltip-label"
    }, t('high'))])
  }, children);
};

exports.BaseFeeTooltip = BaseFeeTooltip;
BaseFeeTooltip.propTypes = {
  children: _propTypes.default.node.isRequired
};

const PriorityFeeTooltip = ({
  children
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    title: t('networkStatusPriorityFeeTooltip')
  }, children);
};

exports.PriorityFeeTooltip = PriorityFeeTooltip;
PriorityFeeTooltip.propTypes = {
  children: _propTypes.default.node.isRequired
};

const NetworkStabilityTooltip = ({
  children,
  color,
  tooltipLabel
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    html: t('networkStatusStabilityFeeTooltip', [/*#__PURE__*/_react.default.createElement("strong", {
      key: "network-status__tooltip",
      className: "network-status__tooltip-label",
      style: {
        color
      }
    }, t(tooltipLabel))])
  }, children);
};

exports.NetworkStabilityTooltip = NetworkStabilityTooltip;
NetworkStabilityTooltip.propTypes = {
  children: _propTypes.default.node.isRequired,
  color: _propTypes.default.string.isRequired,
  tooltipLabel: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/tooltips.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/latest-priority-fee-field/index.js", {"./latest-priority-fee-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/latest-priority-fee-field/latest-priority-fee-field.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/latest-priority-fee-field/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _latestPriorityFeeField.default;
  }
});

var _latestPriorityFeeField = _interopRequireDefault(require("./latest-priority-fee-field"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/latest-priority-fee-field/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/status-slider/index.js", {"./status-slider":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/status-slider/status-slider.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/status-slider/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _statusSlider.default;
  }
});

var _statusSlider = _interopRequireDefault(require("./status-slider"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/status-slider/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/base-fee-input/index.js", {"./base-fee-input":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/base-fee-input/base-fee-input.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/base-fee-input/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _baseFeeInput.default;
  }
});

var _baseFeeInput = _interopRequireDefault(require("./base-fee-input"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/base-fee-input/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/priority-fee-input/index.js", {"./priority-fee-input":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/priority-fee-input/priority-fee-input.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/priority-fee-input/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _priorityFeeInput.default;
  }
});

var _priorityFeeInput = _interopRequireDefault(require("./priority-fee-input"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/priority-fee-input/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-sites-list/connected-sites-list.component.js", {"../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../ui/site-icon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/site-icon/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-sites-list/connected-sites-list.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _siteIcon = _interopRequireDefault(require("../../ui/site-icon"));

var _util = require("../../../helpers/utils/util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ConnectedSitesList extends _react.Component {
  render() {
    const {
      connectedSubjects,
      onDisconnect
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("main", {
      className: "connected-sites-list__content-rows"
    }, connectedSubjects.map(subject => /*#__PURE__*/_react.default.createElement("div", {
      key: subject.origin,
      className: "connected-sites-list__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "connected-sites-list__subject-info"
    }, /*#__PURE__*/_react.default.createElement(_siteIcon.default, {
      icon: subject.iconUrl,
      name: subject.name,
      size: 32
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "connected-sites-list__subject-name",
      title: subject.extensionId || subject.origin
    }, this.getSubjectDisplayName(subject))), /*#__PURE__*/_react.default.createElement("i", {
      className: "fas fa-trash-alt connected-sites-list__trash",
      title: t('disconnect'),
      onClick: () => onDisconnect(subject.origin)
    }))));
  }

  getSubjectDisplayName(subject) {
    if (subject.extensionId) {
      return this.context.t('externalExtension');
    } // We strip https schemes only, and only if the URL has no port.


    return (0, _util.stripHttpsSchemeWithoutPort)(subject.origin);
  }

}

exports.default = ConnectedSitesList;
(0, _defineProperty2.default)(ConnectedSitesList, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(ConnectedSitesList, "propTypes", {
  connectedSubjects: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    iconUrl: _propTypes.default.string,
    origin: _propTypes.default.string
  })).isRequired,
  onDisconnect: _propTypes.default.func.isRequired
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-sites-list/connected-sites-list.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-permissions/connected-accounts-permissions.component.js", {"../../ui/check-box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/check-box/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-permissions/connected-accounts-permissions.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _checkBox = _interopRequireDefault(require("../../ui/check-box"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ConnectedAccountsPermissions extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      expanded: false
    });
    (0, _defineProperty2.default)(this, "toggleExpanded", () => {
      this.setState(prevState => ({
        expanded: !prevState.expanded
      }));
    });
  }

  render() {
    const {
      permissions
    } = this.props;
    const {
      t
    } = this.context;
    const {
      expanded
    } = this.state;

    if (permissions.length === 0) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "connected-accounts-permissions"
    }, /*#__PURE__*/_react.default.createElement("p", {
      className: "connected-accounts-permissions__header",
      onClick: this.toggleExpanded
    }, /*#__PURE__*/_react.default.createElement("strong", null, t('permissions')), /*#__PURE__*/_react.default.createElement("button", {
      className: (0, _classnames.default)('fas', {
        'fa-angle-down': !expanded,
        'fa-angle-up': expanded
      }),
      title: t('showPermissions')
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('connected-accounts-permissions__list-container', {
        'connected-accounts-permissions__list-container--expanded': expanded
      })
    }, /*#__PURE__*/_react.default.createElement("p", null, t('authorizedPermissions'), ":"), /*#__PURE__*/_react.default.createElement("ul", {
      className: "connected-accounts-permissions__list"
    }, permissions.map(({
      key: permissionName
    }) => /*#__PURE__*/_react.default.createElement("li", {
      key: permissionName,
      className: "connected-accounts-permissions__list-item"
    }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
      checked: true,
      disabled: true,
      id: permissionName,
      className: "connected-accounts-permissions__checkbox"
    }), /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: permissionName
    }, t(permissionName)))))));
  }

}

exports.default = ConnectedAccountsPermissions;
(0, _defineProperty2.default)(ConnectedAccountsPermissions, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
(0, _defineProperty2.default)(ConnectedAccountsPermissions, "defaultProps", {
  permissions: []
});
(0, _defineProperty2.default)(ConnectedAccountsPermissions, "propTypes", {
  permissions: _propTypes.default.arrayOf(_propTypes.default.shape({
    key: _propTypes.default.string.isRequired
  }))
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/connected-accounts-permissions/connected-accounts-permissions.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/connected-sites.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/connected-sites.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STATUS_NOT_CONNECTED = exports.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT = exports.STATUS_CONNECTED = void 0;
const STATUS_CONNECTED = 'STATUS_CONNECTED';
exports.STATUS_CONNECTED = STATUS_CONNECTED;
const STATUS_CONNECTED_TO_ANOTHER_ACCOUNT = 'STATUS_CONNECTED_TO_ANOTHER_ACCOUNT';
exports.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT = STATUS_CONNECTED_TO_ANOTHER_ACCOUNT;
const STATUS_NOT_CONNECTED = 'STATUS_NOT_CONNECTED';
exports.STATUS_NOT_CONNECTED = STATUS_NOT_CONNECTED;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/connected-sites.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/selected-account/selected-account.component.js", {"../../../../shared/constants/time":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/time.js","../../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../ui/icon/copy-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/copy-icon.component.js","../../ui/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","copy-to-clipboard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/copy-to-clipboard/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/selected-account/selected-account.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _util = require("../../../helpers/utils/util");

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

var _copyIcon = _interopRequireDefault(require("../../ui/icon/copy-icon.component"));

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

var _time = require("../../../../shared/constants/time");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SelectedAccount extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      copied: false
    });
  }

  componentDidMount() {
    this.copyTimeout = null;
  }

  componentWillUnmount() {
    if (this.copyTimeout) {
      clearTimeout(this.copyTimeout);
      this.copyTimeout = null;
    }
  }

  render() {
    const {
      t
    } = this.context;
    const {
      selectedIdentity
    } = this.props;
    const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(selectedIdentity.address);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account"
    }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      wrapperClassName: "selected-account__tooltip-wrapper",
      position: "bottom",
      title: this.state.copied ? t('copiedExclamation') : t('copyToClipboard')
    }, /*#__PURE__*/_react.default.createElement("button", {
      className: "selected-account__clickable",
      onClick: () => {
        this.setState({
          copied: true
        });
        this.copyTimeout = setTimeout(() => this.setState({
          copied: false
        }), _time.SECOND * 3);
        (0, _copyToClipboard.default)(checksummedAddress);
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__name"
    }, selectedIdentity.name), /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__address"
    }, 
    //(0, _util.shortenAddress)
    (checksummedAddress), /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__copy"
    }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
      size: 11,
      color: "#989a9b"
    }))))));
  }

}

(0, _defineProperty2.default)(SelectedAccount, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(SelectedAccount, "propTypes", {
  selectedIdentity: _propTypes.default.object.isRequired
});
var _default = SelectedAccount;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/selected-account/selected-account.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/info-icon.component.js", {"../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/info-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InfoIcon;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _designSystem = require("../../../helpers/constants/design-system");

function InfoIcon({
  severity
}) {
  const className = (0, _classnames.default)('info-icon', {
    'info-icon--success': severity === _designSystem.SEVERITIES.SUCCESS,
    'info-icon--warning': severity === _designSystem.SEVERITIES.WARNING,
    'info-icon--danger': severity === _designSystem.SEVERITIES.DANGER,
    'info-icon--info': severity === _designSystem.SEVERITIES.INFO
  });
  return /*#__PURE__*/_react.default.createElement("svg", {
    className: className,
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M7.2 5.6H8.8V4H7.2V5.6ZM8 14.4C4.472 14.4 1.6 11.528 1.6 8C1.6 4.472 4.472 1.6 8 1.6C11.528 1.6 14.4 4.472 14.4 8C14.4 11.528 11.528 14.4 8 14.4ZM8 0C6.94943 0 5.90914 0.206926 4.93853 0.608964C3.96793 1.011 3.08601 1.60028 2.34315 2.34315C0.842855 3.84344 0 5.87827 0 8C0 10.1217 0.842855 12.1566 2.34315 13.6569C3.08601 14.3997 3.96793 14.989 4.93853 15.391C5.90914 15.7931 6.94943 16 8 16C10.1217 16 12.1566 15.1571 13.6569 13.6569C15.1571 12.1566 16 10.1217 16 8C16 6.94943 15.7931 5.90914 15.391 4.93853C14.989 3.96793 14.3997 3.08601 13.6569 2.34315C12.914 1.60028 12.0321 1.011 11.0615 0.608964C10.0909 0.206926 9.05058 0 8 0ZM7.2 12H8.8V7.2H7.2V12Z"
  }));
}

InfoIcon.propTypes = {
  /**
   * Severity can be 1 of 4 states:'danger', 'warning', 'info' or 'success'
   */
  severity: _propTypes.default.oneOf(Object.values(_designSystem.SEVERITIES))
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/info-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/token-cell/index.js", {"./token-cell":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/token-cell/token-cell.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/token-cell/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenCell.default;
  }
});

var _tokenCell = _interopRequireDefault(require("./token-cell"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/token-cell/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-hex-data-row/send-hex-data-row.component.js", {"../send-row-wrapper":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-hex-data-row/send-hex-data-row.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _sendRowWrapper = _interopRequireDefault(require("../send-row-wrapper"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SendHexDataRow extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onInput", event => {
      const {
        updateSendHexData
      } = this.props;
      const data = event.target.value.replace(/\n/gu, '') || null;
      updateSendHexData(data);
    });
  }

  render() {
    const {
      inError,
      data
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_sendRowWrapper.default, {
      label: `${t('hexData')}:`,
      showError: inError,
      errorType: "amount"
    }, /*#__PURE__*/_react.default.createElement("textarea", {
      onInput: this.onInput,
      placeholder: t('optional'),
      className: "send-v2__hex-data__input",
      defaultValue: data || ''
    }));
  }

}

exports.default = SendHexDataRow;
(0, _defineProperty2.default)(SendHexDataRow, "propTypes", {
  inError: _propTypes.default.bool,
  data: _propTypes.default.string,
  updateSendHexData: _propTypes.default.func.isRequired
});
(0, _defineProperty2.default)(SendHexDataRow, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-hex-data-row/send-hex-data-row.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-gas-row/send-gas-row.component.js", {"../../../../components/app/gas-customization/advanced-gas-inputs":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/advanced-gas-inputs/index.js","../../../../ducks/send":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/send/index.js","../send-row-wrapper":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-gas-row/send-gas-row.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _sendRowWrapper = _interopRequireDefault(require("../send-row-wrapper"));

var _advancedGasInputs = _interopRequireDefault(require("../../../../components/app/gas-customization/advanced-gas-inputs"));

var _send = require("../../../../ducks/send");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SendGasRow extends _react.Component {
  render() {
    const {
      updateGasPrice,
      updateGasLimit,
      gasPrice,
      gasLimit,
      insufficientBalance,
      minimumGasLimit,
      gasInputMode
    } = this.props;

    if (gasInputMode !== _send.GAS_INPUT_MODES.INLINE) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_sendRowWrapper.default, null, /*#__PURE__*/_react.default.createElement(_advancedGasInputs.default, {
      updateCustomGasPrice: updateGasPrice,
      updateCustomGasLimit: updateGasLimit,
      customGasPrice: gasPrice,
      customGasLimit: gasLimit,
      insufficientBalance: insufficientBalance,
      minimumGasLimit: minimumGasLimit,
      customPriceIsSafe: true,
      isSpeedUp: false
    }));
  }

}

exports.default = SendGasRow;
(0, _defineProperty2.default)(SendGasRow, "propTypes", {
  updateGasPrice: _propTypes.default.func,
  updateGasLimit: _propTypes.default.func,
  gasInputMode: _propTypes.default.oneOf(Object.values(_send.GAS_INPUT_MODES)),
  gasPrice: _propTypes.default.string,
  gasLimit: _propTypes.default.string,
  insufficientBalance: _propTypes.default.bool,
  minimumGasLimit: _propTypes.default.string
});
(0, _defineProperty2.default)(SendGasRow, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-gas-row/send-gas-row.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/update-nickname-popover/update-nickname-popover.js", {"../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../identicon/identicon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/identicon.component.js","../popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/popover/index.js","../text-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/text-field/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/update-nickname-popover/update-nickname-popover.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UpdateNicknamePopover;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _popover = _interopRequireDefault(require("../popover"));

var _button = _interopRequireDefault(require("../button"));

var _textField = _interopRequireDefault(require("../text-field"));

var _i18n = require("../../../contexts/i18n");

var _identicon = _interopRequireDefault(require("../identicon/identicon.component"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function UpdateNicknamePopover({
  nickname,
  address,
  onAdd,
  memo,
  onClose
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [nicknameInput, setNicknameInput] = (0, _react.useState)(nickname);
  const [memoInput, setMemoInput] = (0, _react.useState)(memo);

  const handleNicknameChange = event => {
    setNicknameInput(event.target.value);
  };

  const handleMemoChange = event => {
    setMemoInput(event.target.value);
  };

  const closePopover = (0, _react.useCallback)(() => {
    onClose();
  }, [onClose]);

  const onCancel = () => {
    onClose();
  };

  const onSubmit = () => {
    onAdd(address, nicknameInput, memoInput);
    onClose();
  };

  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: nickname ? t('editAddressNickname') : t('addANickname'),
    onClose: closePopover,
    className: "update-nickname__wrapper",
    footer: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "update-nickname__cancel",
      type: "secondary",
      onClick: onCancel
    }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "update-nickname__save",
      type: "primary",
      onClick: onSubmit,
      disabled: !nicknameInput
    }, t('save')))
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "update-nickname__content"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "update-nickname__content__indenticon",
    address: address,
    diameter: 36
  }), /*#__PURE__*/_react.default.createElement("label", {
    className: "update-nickname__content__label--capitalized"
  }, t('address')), /*#__PURE__*/_react.default.createElement("div", {
    className: "update-nickname__content__address"
  }, address), /*#__PURE__*/_react.default.createElement("div", {
    className: "update-nickname__content__nickname-label"
  }, t('nickname')), /*#__PURE__*/_react.default.createElement(_textField.default, {
    className: "update-nickname__content__text-field",
    value: nicknameInput,
    onChange: handleNicknameChange,
    placeholder: t('addANickname'),
    fullWidth: true
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "update-nickname__content__label--capitalized"
  }, t('memo')), /*#__PURE__*/_react.default.createElement(_textField.default, {
    type: "text",
    id: "memo",
    value: memoInput,
    onChange: handleMemoChange,
    placeholder: t('addMemo'),
    fullWidth: true,
    margin: "dense",
    multiline: true,
    rows: 3,
    classes: {
      inputMultiline: 'update-nickname__content__text-area',
      inputRoot: 'update-nickname__content__text-area-wrapper'
    }
  })));
}

UpdateNicknamePopover.propTypes = {
  nickname: _propTypes.default.string,
  address: _propTypes.default.string,
  memo: _propTypes.default.string,
  onAdd: _propTypes.default.func,
  onClose: _propTypes.default.func
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/update-nickname-popover/update-nickname-popover.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/nickname-popover/index.js", {"./nickname-popover.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/nickname-popover/nickname-popover.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/nickname-popover/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nicknamePopover.default;
  }
});

var _nicknamePopover = _interopRequireDefault(require("./nickname-popover.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/nickname-popover/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-asset-row/send-asset-row.component.js", {"../../../../components/app/user-preferenced-currency-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-display/index.js","../../../../components/ui/identicon/identicon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/identicon.component.js","../../../../components/ui/token-balance":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/token-balance/index.js","../../../../ducks/send":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/send/index.js","../../../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../send-row-wrapper":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-asset-row/send-asset-row.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _sendRowWrapper = _interopRequireDefault(require("../send-row-wrapper"));

var _identicon = _interopRequireDefault(require("../../../../components/ui/identicon/identicon.component"));

var _tokenBalance = _interopRequireDefault(require("../../../../components/ui/token-balance"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../../../components/app/user-preferenced-currency-display"));

var _common = require("../../../../helpers/constants/common");

var _send = require("../../../../ducks/send");

var _util = require("../../../../helpers/utils/util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SendAssetRow extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      isShowingDropdown: false,
      sendableTokens: []
    });
    (0, _defineProperty2.default)(this, "openDropdown", () => this.setState({
      isShowingDropdown: true
    }));
    (0, _defineProperty2.default)(this, "closeDropdown", () => this.setState({
      isShowingDropdown: false
    }));
    (0, _defineProperty2.default)(this, "selectToken", (type, token) => {
      this.setState({
        isShowingDropdown: false
      }, () => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Transactions',
            action: 'Send Screen',
            name: 'User clicks "Assets" dropdown'
          },
          customVariables: {
            assetSelected: token ? _common.ERC20 : this.props.nativeCurrency
          }
        });
        this.props.updateSendAsset({
          type,
          details: type === _send.ASSET_TYPES.NATIVE ? null : token
        });
      });
    });
  }

  async componentDidMount() {
    const sendableTokens = this.props.tokens.filter(token => !token.isERC721);
    this.setState({
      sendableTokens
    });
  }

  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_sendRowWrapper.default, {
      label: `${t('asset')}:`
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown"
    }, this.renderSendToken(), this.state.sendableTokens.length > 0 ? this.renderAssetDropdown() : null));
  }

  renderSendToken() {
    const {
      sendAssetAddress
    } = this.props;
    const token = this.props.tokens.find(({
      address
    }) => (0, _util.isEqualCaseInsensitive)(address, sendAssetAddress));
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__input-wrapper",
      onClick: this.openDropdown
    }, token ? this.renderAsset(token) : this.renderNativeCurrency());
  }

  renderAssetDropdown() {
    return this.state.isShowingDropdown && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__close-area",
      onClick: this.closeDropdown
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__list"
    }, this.renderNativeCurrency(true), this.state.sendableTokens.map(token => this.renderAsset(token, true))));
  }

  renderNativeCurrency(insideDropdown = false) {
    const {
      t
    } = this.context;
    const {
      accounts,
      selectedAddress,
      nativeCurrency,
      nativeCurrencyImage
    } = this.props;
    const balanceValue = accounts[selectedAddress] ? accounts[selectedAddress].balance : '';
    return /*#__PURE__*/_react.default.createElement("div", {
      className: this.state.sendableTokens.length > 0 ? 'send-v2__asset-dropdown__asset' : 'send-v2__asset-dropdown__single-asset',
      onClick: () => this.selectToken(_send.ASSET_TYPES.NATIVE)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__asset-icon"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      diameter: 36,
      image: nativeCurrencyImage,
      address: nativeCurrency
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__asset-data"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__symbol"
    }, nativeCurrency), /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__name"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "send-v2__asset-dropdown__name__label"
    }, `${t('balance')}:`), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      value: balanceValue,
      type: _common.PRIMARY
    }))), !insideDropdown && this.state.sendableTokens.length > 0 && /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-caret-down fa-lg send-v2__asset-dropdown__caret"
    }));
  }

  renderAsset(token, insideDropdown = false) {
    const {
      address,
      symbol,
      image
    } = token;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      key: address,
      className: "send-v2__asset-dropdown__asset",
      onClick: () => this.selectToken(_send.ASSET_TYPES.TOKEN, token)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__asset-icon"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: address,
      diameter: 36,
      image: image
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__asset-data"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__symbol"
    }, symbol), /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__asset-dropdown__name"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "send-v2__asset-dropdown__name__label"
    }, `${t('balance')}:`), /*#__PURE__*/_react.default.createElement(_tokenBalance.default, {
      token: token
    }))), !insideDropdown && /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-caret-down fa-lg send-v2__asset-dropdown__caret"
    }));
  }

}

exports.default = SendAssetRow;
(0, _defineProperty2.default)(SendAssetRow, "propTypes", {
  tokens: _propTypes.default.arrayOf(_propTypes.default.shape({
    address: _propTypes.default.string,
    decimals: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    symbol: _propTypes.default.string,
    image: _propTypes.default.string
  })).isRequired,
  accounts: _propTypes.default.object.isRequired,
  selectedAddress: _propTypes.default.string.isRequired,
  sendAssetAddress: _propTypes.default.string,
  updateSendAsset: _propTypes.default.func.isRequired,
  nativeCurrency: _propTypes.default.string,
  nativeCurrencyImage: _propTypes.default.string
});
(0, _defineProperty2.default)(SendAssetRow, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-asset-row/send-asset-row.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/send-amount-row.component.js", {"../../../../components/app/user-preferenced-currency-input":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/index.js","../../../../components/app/user-preferenced-token-input":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/index.js","../../../../ducks/send":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/send/index.js","../send-row-wrapper":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/index.js","./amount-max-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/amount-max-button/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/send-amount-row.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _sendRowWrapper = _interopRequireDefault(require("../send-row-wrapper"));

var _userPreferencedCurrencyInput = _interopRequireDefault(require("../../../../components/app/user-preferenced-currency-input"));

var _userPreferencedTokenInput = _interopRequireDefault(require("../../../../components/app/user-preferenced-token-input"));

var _send = require("../../../../ducks/send");

var _amountMaxButton = _interopRequireDefault(require("./amount-max-button"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SendAmountRow extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "handleChange", newAmount => {
      this.props.updateSendAmount(newAmount);
    });
  }

  renderInput() {
    const {
      amount,
      inError,
      asset
    } = this.props;
    return asset.type === _send.ASSET_TYPES.TOKEN ? /*#__PURE__*/_react.default.createElement(_userPreferencedTokenInput.default, {
      error: inError,
      onChange: this.handleChange,
      token: asset.details,
      value: amount
    }) : /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyInput.default, {
      error: inError,
      onChange: this.handleChange,
      value: amount
    });
  }

  render() {
    const {
      inError
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_sendRowWrapper.default, {
      label: `${this.context.t('amount')}:`,
      showError: inError,
      errorType: "amount"
    }, /*#__PURE__*/_react.default.createElement(_amountMaxButton.default, {
      inError: inError
    }), this.renderInput());
  }

}

exports.default = SendAmountRow;
(0, _defineProperty2.default)(SendAmountRow, "propTypes", {
  amount: _propTypes.default.string,
  inError: _propTypes.default.bool,
  asset: _propTypes.default.object,
  updateSendAmount: _propTypes.default.func
});
(0, _defineProperty2.default)(SendAmountRow, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/send-amount-row.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/account-list-item/account-list-item.js", {"../../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../ui/account-mismatch-warning/account-mismatch-warning.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-mismatch-warning/account-mismatch-warning.component.js","../../ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/account-list-item/account-list-item.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AccountListItem;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _identicon = _interopRequireDefault(require("../../ui/identicon"));

var _accountMismatchWarning = _interopRequireDefault(require("../../ui/account-mismatch-warning/account-mismatch-warning.component"));

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

function AccountListItem({
  account,
  className,
  displayAddress = false,
  handleClick,
  icon = null
}) {
  const {
    name,
    address,
    balance
  } = account || {};
  return /*#__PURE__*/_react.default.createElement("div", {
    className: `account-list-item ${className}`,
    onClick: () => handleClick === null || handleClick === void 0 ? void 0 : handleClick({
      name,
      address,
      balance
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "account-list-item__top-row"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: address,
    className: "account-list-item__identicon",
    diameter: 18
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "account-list-item__account-name"
  }, name || address), icon ? /*#__PURE__*/_react.default.createElement("div", {
    className: "account-list-item__icon"
  }, icon) : null, /*#__PURE__*/_react.default.createElement(_accountMismatchWarning.default, {
    address: address
  })), displayAddress && name && /*#__PURE__*/_react.default.createElement("div", {
    className: "account-list-item__account-address"
  }, (0, _hexstringUtils.toChecksumHexAddress)(address)));
}

AccountListItem.propTypes = {
  /**
   * An account object that has name, address, and balance data
   */
  account: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string,
    name: _propTypes.default.string
  }),

  /**
   * Additional className to add to the root div element of AccountListItem
   */
  className: _propTypes.default.string,

  /**
   * Display the address of the account object
   */
  displayAddress: _propTypes.default.bool,

  /**
   * The onClick handler of the AccountListItem
   */
  handleClick: _propTypes.default.func,

  /**
   * Pass icon component to be displayed. Currently not used
   */
  icon: _propTypes.default.node
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/account-list-item/account-list-item.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/index.js", {"./confirm-page-container-content.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-content.component.js","./confirm-page-container-summary":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-summary/index.js","./confirm-page-container-warning":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-warning/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ConfirmPageContainerSummary", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerSummary.default;
  }
});
Object.defineProperty(exports, "ConfirmPageContainerWarning", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerWarning.default;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerContent.default;
  }
});

var _confirmPageContainerContent = _interopRequireDefault(require("./confirm-page-container-content.component"));

var _confirmPageContainerSummary = _interopRequireDefault(require("./confirm-page-container-summary"));

var _confirmPageContainerWarning = _interopRequireDefault(require("./confirm-page-container-warning"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-header/index.js", {"./signature-request-header.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-header/signature-request-header.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-header/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestHeader.default;
  }
});

var _signatureRequestHeader = _interopRequireDefault(require("./signature-request-header.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-header/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-footer/index.js", {"./signature-request-footer.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-footer/signature-request-footer.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-footer/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestFooter.default;
  }
});

var _signatureRequestFooter = _interopRequireDefault(require("./signature-request-footer.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-footer/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-message/index.js", {"./signature-request-message.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-message/signature-request-message.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-message/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestMessage.default;
  }
});

var _signatureRequestMessage = _interopRequireDefault(require("./signature-request-message.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-message/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/index.js", {"./dom-inspector/DOMInspector":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/DOMInspector.js","./object-inspector/ObjectInspector":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectInspector.js","./object-inspector/ObjectLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectLabel.js","./object-inspector/ObjectRootLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectRootLabel.js","./object/ObjectName":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectName.js","./object/ObjectValue":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectValue.js","./styles/themes":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/index.js","./table-inspector/TableInspector":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/TableInspector.js","babel-runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js","babel-runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/objectWithoutProperties.js","is-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-dom/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/index.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Inspector = exports.ObjectName = exports.ObjectValue = exports.ObjectRootLabel = exports.ObjectLabel = exports.DOMInspector = exports.TableInspector = exports.ObjectInspector = exports.chromeDark = exports.chromeLight = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _themes = require('./styles/themes');

Object.defineProperty(exports, 'chromeLight', {
  enumerable: true,
  get: function get() {
    return _themes.chromeLight;
  }
});
Object.defineProperty(exports, 'chromeDark', {
  enumerable: true,
  get: function get() {
    return _themes.chromeDark;
  }
});

var _ObjectInspector2 = require('./object-inspector/ObjectInspector');

var _ObjectInspector3 = _interopRequireDefault(_ObjectInspector2);

var _TableInspector2 = require('./table-inspector/TableInspector');

var _TableInspector3 = _interopRequireDefault(_TableInspector2);

var _DOMInspector2 = require('./dom-inspector/DOMInspector');

var _DOMInspector3 = _interopRequireDefault(_DOMInspector2);

var _ObjectLabel2 = require('./object-inspector/ObjectLabel');

var _ObjectLabel3 = _interopRequireDefault(_ObjectLabel2);

var _ObjectRootLabel2 = require('./object-inspector/ObjectRootLabel');

var _ObjectRootLabel3 = _interopRequireDefault(_ObjectRootLabel2);

var _ObjectValue2 = require('./object/ObjectValue');

var _ObjectValue3 = _interopRequireDefault(_ObjectValue2);

var _ObjectName2 = require('./object/ObjectName');

var _ObjectName3 = _interopRequireDefault(_ObjectName2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _isDom = require('is-dom');

var _isDom2 = _interopRequireDefault(_isDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.ObjectInspector = _ObjectInspector3.default;
exports.TableInspector = _TableInspector3.default;
exports.DOMInspector = _DOMInspector3.default;
exports.ObjectLabel = _ObjectLabel3.default;
exports.ObjectRootLabel = _ObjectRootLabel3.default;
exports.ObjectValue = _ObjectValue3.default;
exports.ObjectName = _ObjectName3.default;

// Wrapping the inspectors

var Inspector = function Inspector(_ref) {
  var _ref$table = _ref.table,
      table = _ref$table === undefined ? false : _ref$table,
      data = _ref.data,
      rest = (0, _objectWithoutProperties3.default)(_ref, ['table', 'data']);

  if (table) {
    return _react2.default.createElement(_TableInspector3.default, (0, _extends3.default)({ data: data }, rest));
  }

  if ((0, _isDom2.default)(data)) return _react2.default.createElement(_DOMInspector3.default, (0, _extends3.default)({ data: data }, rest));

  return _react2.default.createElement(_ObjectInspector3.default, (0, _extends3.default)({ data: data }, rest));
};

Inspector.propTypes = {
  data: _propTypes2.default.any,
  name: _propTypes2.default.string,
  table: _propTypes2.default.bool
};

exports.Inspector = Inspector;
exports.default = Inspector;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/disclosure/disclosure.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/disclosure/disclosure.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Disclosure = ({
  children,
  title,
  size
}) => {
  const disclosureFooterEl = (0, _react.useRef)(null);
  const [open, setOpen] = (0, _react.useState)(false);

  const scrollToBottom = () => {
    disclosureFooterEl && disclosureFooterEl.current && disclosureFooterEl.current.scrollIntoView({
      behavior: 'smooth'
    });
  };

  (0, _react.useEffect)(() => {
    if (open) {
      scrollToBottom();
    }
  }, [open]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "disclosure",
    onClick: () => setOpen(state => !state)
  }, title ? /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", {
    className: "disclosure__title disclosure__summary typography--weight-bold typography--color-black"
  }, title, ":", ' '), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('disclosure__content', size)
  }, children), /*#__PURE__*/_react.default.createElement("div", {
    ref: disclosureFooterEl,
    className: "disclosure__footer"
  })) : children);
};

Disclosure.propTypes = {
  children: _propTypes.default.node.isRequired,
  title: _propTypes.default.string,
  size: _propTypes.default.string
};
Disclosure.defaultProps = {
  size: 'normal',
  title: null
};
var _default = Disclosure;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/disclosure/disclosure.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/ledger-instruction-field/ledger-instruction-field.js", {"../../../../app/scripts/lib/util":"/home/clarisco/Desktop/metamask-extension-develop/app/scripts/lib/util.js","../../../../shared/constants/app":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/app.js","../../../../shared/constants/hardware-wallets":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/hardware-wallets.js","../../../ducks/app/app":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/app/app.js","../../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../ui/dialog":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/dialog/index.js","../../ui/typography/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/typography.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/ledger-instruction-field/ledger-instruction-field.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LedgerInstructionField;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hardwareWallets = require("../../../../shared/constants/hardware-wallets");

var _app = require("../../../../shared/constants/app");

var _app2 = require("../../../ducks/app/app");

var _typography = _interopRequireDefault(require("../../ui/typography/typography"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _designSystem = require("../../../helpers/constants/design-system");

var _dialog = _interopRequireDefault(require("../../ui/dialog"));

var _util = require("../../../../app/scripts/lib/util");

var _metamask = require("../../../ducks/metamask/metamask");

var _actions = require("../../../store/actions");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const renderInstructionStep = (text, show = true, color = _designSystem.COLORS.PRIMARY3) => {
  return show && /*#__PURE__*/_react.default.createElement(_typography.default, {
    boxProps: {
      margin: 0
    },
    color: color,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    variant: _designSystem.TYPOGRAPHY.H7
  }, text);
};

function LedgerInstructionField({
  showDataInstruction
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const webHidConnectedStatus = (0, _reactRedux.useSelector)(_app2.getLedgerWebHidConnectedStatus);
  const ledgerTransportType = (0, _reactRedux.useSelector)(_metamask.getLedgerTransportType);
  const transportStatus = (0, _reactRedux.useSelector)(_app2.getLedgerTransportStatus);
  const environmentType = (0, _util.getEnvironmentType)();
  const environmentTypeIsFullScreen = environmentType === _app.ENVIRONMENT_TYPE_FULLSCREEN;
  (0, _react.useEffect)(() => {
    const initialConnectedDeviceCheck = async () => {
      if (ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID && webHidConnectedStatus !== _hardwareWallets.WEBHID_CONNECTED_STATUSES.CONNECTED) {
        const devices = await window.navigator.hid.getDevices();
        const webHidIsConnected = devices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));
        dispatch((0, _app2.setLedgerWebHidConnectedStatus)(webHidIsConnected ? _hardwareWallets.WEBHID_CONNECTED_STATUSES.CONNECTED : _hardwareWallets.WEBHID_CONNECTED_STATUSES.NOT_CONNECTED));
      }
    };

    const determineTransportStatus = async () => {
      if (ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID && webHidConnectedStatus === _hardwareWallets.WEBHID_CONNECTED_STATUSES.CONNECTED && transportStatus === _hardwareWallets.TRANSPORT_STATES.NONE) {
        try {
          const transportedCreated = await (0, _actions.attemptLedgerTransportCreation)();
          dispatch((0, _app2.setLedgerTransportStatus)(transportedCreated ? _hardwareWallets.TRANSPORT_STATES.VERIFIED : _hardwareWallets.TRANSPORT_STATES.UNKNOWN_FAILURE));
        } catch (e) {
          if (e.message.match('Failed to open the device')) {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.TRANSPORT_STATES.DEVICE_OPEN_FAILURE));
          } else if (e.message.match('the device is already open')) {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.TRANSPORT_STATES.VERIFIED));
          } else {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.TRANSPORT_STATES.UNKNOWN_FAILURE));
          }
        }
      }
    };

    determineTransportStatus();
    initialConnectedDeviceCheck();
  }, [dispatch, ledgerTransportType, webHidConnectedStatus, transportStatus]);
  (0, _react.useEffect)(() => {
    return () => {
      dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.TRANSPORT_STATES.NONE));
    };
  }, [dispatch]);
  const usingLedgerLive = ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.LIVE;
  const usingWebHID = ledgerTransportType === _hardwareWallets.LEDGER_TRANSPORT_TYPES.WEBHID;

  const isFirefox = (0, _util.getPlatform)() === _app.PLATFORM_FIREFOX;

  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-detail-row"
  }, /*#__PURE__*/_react.default.createElement(_dialog.default, {
    type: "message"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "ledger-live-dialog"
  }, renderInstructionStep(t('ledgerConnectionInstructionHeader')), renderInstructionStep(`- ${t('ledgerConnectionInstructionStepOne')}`, !isFirefox && usingLedgerLive), renderInstructionStep(`- ${t('ledgerConnectionInstructionStepTwo')}`, !isFirefox && usingLedgerLive), renderInstructionStep(`- ${t('ledgerConnectionInstructionStepThree')}`), renderInstructionStep(`- ${t('ledgerConnectionInstructionStepFour')}`, showDataInstruction), renderInstructionStep( /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: async () => {
      if (environmentTypeIsFullScreen) {
        window.location.reload();
      } else {
        global.platform.openExtensionInBrowser(null, null, true);
      }
    }
  }, t('ledgerConnectionInstructionCloseOtherApps'))), transportStatus === _hardwareWallets.TRANSPORT_STATES.DEVICE_OPEN_FAILURE), renderInstructionStep( /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: async () => {
      if (environmentTypeIsFullScreen) {
        const connectedDevices = await window.navigator.hid.requestDevice({
          filters: [{
            vendorId: _hardwareWallets.LEDGER_USB_VENDOR_ID
          }]
        });
        const webHidIsConnected = connectedDevices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));
        dispatch((0, _app2.setLedgerWebHidConnectedStatus)({
          webHidConnectedStatus: webHidIsConnected ? _hardwareWallets.WEBHID_CONNECTED_STATUSES.CONNECTED : _hardwareWallets.WEBHID_CONNECTED_STATUSES.NOT_CONNECTED
        }));
      } else {
        global.platform.openExtensionInBrowser(null, null, true);
      }
    }
  }, environmentTypeIsFullScreen ? t('clickToConnectLedgerViaWebHID') : t('openFullScreenForLedgerWebHid'))), usingWebHID && webHidConnectedStatus === _hardwareWallets.WEBHID_CONNECTED_STATUSES.NOT_CONNECTED, _designSystem.COLORS.SECONDARY1)))));
}

LedgerInstructionField.propTypes = {
  showDataInstruction: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/ledger-instruction-field/ledger-instruction-field.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/gas-details-item/gas-details-item.js", {"../../../components/app/gas-timing/gas-timing.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-timing/gas-timing.component.js","../../../components/app/transaction-detail-item/transaction-detail-item.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-detail-item/transaction-detail-item.component.js","../../../components/app/user-preferenced-currency-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-display/index.js","../../../components/ui/box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/index.js","../../../components/ui/i18n-value":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/i18n-value/index.js","../../../components/ui/loading-heartbeat":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/loading-heartbeat/index.js","../../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","./gas-details-item-title":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/gas-details-item/gas-details-item-title/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/gas-details-item/gas-details-item.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _designSystem = require("../../../helpers/constants/design-system");

var _common = require("../../../helpers/constants/common");

var _conversions = require("../../../helpers/utils/conversions.util");

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _gasTiming = _interopRequireDefault(require("../../../components/app/gas-timing/gas-timing.component"));

var _i18nValue = _interopRequireDefault(require("../../../components/ui/i18n-value"));

var _loadingHeartbeat = _interopRequireDefault(require("../../../components/ui/loading-heartbeat"));

var _transactionDetailItem = _interopRequireDefault(require("../../../components/app/transaction-detail-item/transaction-detail-item.component"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../../components/app/user-preferenced-currency-display"));

var _gasFee = require("../../../contexts/gasFee");

var _gasDetailsItemTitle = _interopRequireDefault(require("./gas-details-item-title"));

const GasDetailsItem = ({
  hexMaximumTransactionFee,
  hexMinimumTransactionFee,
  maxFeePerGas,
  maxPriorityFeePerGas,
  userAcknowledgedGasMissing,
  useNativeCurrencyAsPrimaryCurrency
}) => {
  const {
    estimateUsed,
    hasSimulationError,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  if (hasSimulationError && !userAcknowledgedGasMissing) return null;
  return /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "gas-item",
    detailTitle: /*#__PURE__*/_react.default.createElement(_gasDetailsItemTitle.default, null),
    detailTitleColor: _designSystem.COLORS.BLACK,
    detailText: /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, null), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      type: _common.SECONDARY,
      value: hexMinimumTransactionFee,
      hideLabel: Boolean(useNativeCurrencyAsPrimaryCurrency)
    })),
    detailTotal: /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, null), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      type: _common.PRIMARY,
      value: hexMinimumTransactionFee,
      hideLabel: !useNativeCurrencyAsPrimaryCurrency
    })),
    subText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
      key: "editGasSubTextFeeLabel",
      display: "inline-flex",
      className: (0, _classnames.default)('gas-details-item__gasfee-label', {
        'gas-details-item__gas-fee-warning': estimateUsed === 'high'
      })
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, null), /*#__PURE__*/_react.default.createElement(_box.default, {
      marginRight: 1
    }, /*#__PURE__*/_react.default.createElement("strong", null, estimateUsed === 'high' && '⚠ ', /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
      messageKey: "editGasSubTextFeeLabel"
    }))), /*#__PURE__*/_react.default.createElement("div", {
      key: "editGasSubTextFeeValue",
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, null), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      key: "editGasSubTextFeeAmount",
      type: _common.PRIMARY,
      value: hexMaximumTransactionFee,
      hideLabel: !useNativeCurrencyAsPrimaryCurrency
    })))),
    subTitle: /*#__PURE__*/_react.default.createElement(_gasTiming.default, {
      maxPriorityFeePerGas: (0, _conversions.hexWEIToDecGWEI)(maxPriorityFeePerGas || transaction.txParams.maxPriorityFeePerGas),
      maxFeePerGas: (0, _conversions.hexWEIToDecGWEI)(maxFeePerGas || transaction.txParams.maxFeePerGas)
    })
  });
};

GasDetailsItem.propTypes = {
  hexMaximumTransactionFee: _propTypes.default.string,
  hexMinimumTransactionFee: _propTypes.default.string,
  maxFeePerGas: _propTypes.default.string,
  maxPriorityFeePerGas: _propTypes.default.string,
  userAcknowledgedGasMissing: _propTypes.default.bool.isRequired,
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool
};
var _default = GasDetailsItem;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/gas-details-item/gas-details-item.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/transaction-alerts/transaction-alerts.js", {"../../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../components/ui/actionable-message/actionable-message":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/actionable-message/actionable-message.js","../../../components/ui/error-message":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/error-message/index.js","../../../components/ui/i18n-value":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/i18n-value/index.js","../../../components/ui/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/index.js","../../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../helpers/constants/error-keys":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/error-keys.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../selectors/transactions":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/transactions.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/transaction-alerts/transaction-alerts.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _gas = require("../../../../shared/constants/gas");

var _errorKeys = require("../../../helpers/constants/error-keys");

var _transactions = require("../../../selectors/transactions");

var _gasFee = require("../../../contexts/gasFee");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _actionableMessage = _interopRequireDefault(require("../../../components/ui/actionable-message/actionable-message"));

var _errorMessage = _interopRequireDefault(require("../../../components/ui/error-message"));

var _i18nValue = _interopRequireDefault(require("../../../components/ui/i18n-value"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

const TransactionAlerts = ({
  userAcknowledgedGasMissing,
  setUserAcknowledgedGasMissing
}) => {
  const {
    balanceError,
    estimateUsed,
    hasSimulationError,
    supportsEIP1559V2
  } = (0, _gasFee.useGasFeeContext)();
  const pendingTransactions = (0, _reactRedux.useSelector)(_transactions.submittedPendingTransactionsSelector);
  const t = (0, _useI18nContext.useI18nContext)();
  if (!supportsEIP1559V2) return null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "transaction-alerts"
  }, hasSimulationError && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
      messageKey: "simulationErrorMessageV2"
    }),
    useIcon: true,
    iconFillColor: "#d73a49",
    type: "danger",
    primaryActionV2: userAcknowledgedGasMissing === true ? undefined : {
      label: t('proceedWithTransaction'),
      onClick: setUserAcknowledgedGasMissing
    }
  }), (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) > 0 && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: /*#__PURE__*/_react.default.createElement(_typography.default, {
      align: "left",
      className: "transaction-alerts__pending-transactions",
      margin: [0, 0],
      tag: _designSystem.TYPOGRAPHY.Paragraph,
      variant: _designSystem.TYPOGRAPHY.H7
    }, /*#__PURE__*/_react.default.createElement("strong", null, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
      messageKey: (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) === 1 ? 'pendingTransactionSingle' : 'pendingTransactionMultiple',
      options: [pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length]
    })), ' ', /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
      messageKey: "pendingTransactionInfo"
    }), ' ', /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
      messageKey: "learnCancelSpeeedup",
      options: [/*#__PURE__*/_react.default.createElement("a", {
        key: "cancelSpeedUpInfo",
        href: "https://De-wallet.zendesk.com/hc/en-us/articles/360015489251-How-to-speed-up-or-cancel-a-pending-transaction",
        rel: "noopener noreferrer",
        target: "_blank"
      }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
        messageKey: "cancelSpeedUp"
      }))]
    })),
    useIcon: true,
    iconFillColor: "#f8c000",
    type: "warning"
  }), balanceError && /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
    errorKey: _errorKeys.INSUFFICIENT_FUNDS_ERROR_KEY
  }), estimateUsed === _gas.PRIORITY_LEVELS.LOW && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: /*#__PURE__*/_react.default.createElement(_typography.default, {
      align: "left",
      margin: [0, 0],
      tag: _designSystem.TYPOGRAPHY.Paragraph,
      variant: _designSystem.TYPOGRAPHY.H7
    }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
      messageKey: "lowPriorityMessage"
    })),
    useIcon: true,
    iconFillColor: "#f8c000",
    type: "warning"
  }));
};

TransactionAlerts.propTypes = {
  userAcknowledgedGasMissing: _propTypes.default.bool,
  setUserAcknowledgedGasMissing: _propTypes.default.func
};
var _default = TransactionAlerts;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/confirm-transaction-base/transaction-alerts/transaction-alerts.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/multilayer-fee-message/multi-layer-fee-message.js", {"../../../../shared/modules/conversion.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/conversion.utils.js","../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../helpers/utils/optimism/fetchEstimatedL1Fee":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/optimism/fetchEstimatedL1Fee.js","../../../helpers/utils/transactions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/transactions.util.js","../transaction-detail-item/transaction-detail-item.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-detail-item/transaction-detail-item.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@sentry/browser":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@sentry/browser/dist/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/multilayer-fee-message/multi-layer-fee-message.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MultilayerFeeMessage;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _browser = require("@sentry/browser");

var _transactionDetailItem = _interopRequireDefault(require("../transaction-detail-item/transaction-detail-item.component"));

var _fetchEstimatedL1Fee = _interopRequireDefault(require("../../../helpers/utils/optimism/fetchEstimatedL1Fee"));

var _i18n = require("../../../contexts/i18n");

var _transactions = require("../../../helpers/utils/transactions.util");

var _conversion = require("../../../../shared/modules/conversion.utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function MultilayerFeeMessage({
  transaction,
  layer2fee,
  nativeCurrency,
  plainStyle
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [fetchedLayer1Total, setLayer1Total] = (0, _react.useState)(null);
  let layer1Total = 'unknown';

  if (fetchedLayer1Total !== null) {
    const layer1TotalBN = _conversion.toBigNumber.hex(fetchedLayer1Total);

    layer1Total = `${_conversion.toNormalizedDenomination.WEI(layer1TotalBN).toString(10)} ${nativeCurrency}`;
  }

  const totalInWeiHex = (0, _transactions.sumHexes)(layer2fee || '0x0', fetchedLayer1Total || '0x0', transaction.txParams.value || '0x0');

  const totalBN = _conversion.toBigNumber.hex(totalInWeiHex);

  const totalInEth = `${_conversion.toNormalizedDenomination.WEI(totalBN).toString(10)} ${nativeCurrency}`;
  (0, _react.useEffect)(() => {
    const getEstimatedL1Fee = async () => {
      try {
        const result = await (0, _fetchEstimatedL1Fee.default)(global.eth, transaction);
        setLayer1Total(result);
      } catch (e) {
        (0, _browser.captureException)(e);
        setLayer1Total(null);
      }
    };

    getEstimatedL1Fee();
  }, [transaction]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "total-item",
    detailTitle: t('layer1Fees'),
    detailTotal: layer1Total,
    noBold: plainStyle,
    flexWidthValues: plainStyle
  }), /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "total-item",
    detailTitle: t('total'),
    detailTotal: totalInEth,
    subTitle: t('transactionDetailMultiLayerTotalSubtitle'),
    noBold: plainStyle,
    flexWidthValues: plainStyle
  }));
}

MultilayerFeeMessage.propTypes = {
  transaction: _propTypes.default.object,
  layer2fee: _propTypes.default.string,
  nativeCurrency: _propTypes.default.string,
  plainStyle: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/multilayer-fee-message/multi-layer-fee-message.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/copy-raw-data/copy-raw-data.component.js", {"../../../../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../../../../hooks/useCopyToClipboard":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCopyToClipboard.js","../../../../../ui/icon/copy-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/copy-icon.component.js","../../../../../ui/tooltip/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/tooltip.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/copy-raw-data/copy-raw-data.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tooltip = _interopRequireDefault(require("../../../../../ui/tooltip/tooltip"));

var _copyIcon = _interopRequireDefault(require("../../../../../ui/icon/copy-icon.component"));

var _i18n = require("../../../../../../contexts/i18n");

var _useCopyToClipboard = require("../../../../../../hooks/useCopyToClipboard");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const CopyRawData = ({
  data
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "copy-raw-data"
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "right",
    title: copied ? t('copiedExclamation') : ''
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => {
      handleCopy(data);
    },
    className: "copy-raw-data__button"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "copy-raw-data__icon"
  }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
    size: 12,
    color: "#BBC0C5"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "copy-raw-data__label"
  }, t('copyRawTransactionData')))));
};

CopyRawData.propTypes = {
  data: _propTypes.default.string.isRequired
};
var _default = CopyRawData;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/copy-raw-data/copy-raw-data.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-header/index.js", {"./confirm-page-container-header.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-header/confirm-page-container-header.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-header/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerHeader.default;
  }
});

var _confirmPageContainerHeader = _interopRequireDefault(require("./confirm-page-container-header.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-header/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-detail-row/index.js", {"./confirm-detail-row.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-detail-row/confirm-detail-row.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-detail-row/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmDetailRow.default;
  }
});

var _confirmDetailRow = _interopRequireDefault(require("./confirm-detail-row.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-detail-row/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-navigation/index.js", {"./confirm-page-container-navigation.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-navigation/confirm-page-container-navigation.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-navigation/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerNavigation.default;
  }
});

var _confirmPageContainerNavigation = _interopRequireDefault(require("./confirm-page-container-navigation.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-navigation/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container.container.js", {"../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","./confirm-page-container.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _confirmPageContainer = _interopRequireDefault(require("./confirm-page-container.component"));

function mapStateToProps(state, ownProps) {
  const to = ownProps.toAddress;
  const contact = (0, _selectors.getAddressBookEntry)(state, to);
  return {
    contact,
    toName: (contact === null || contact === void 0 ? void 0 : contact.name) || ownProps.toName,
    isOwnedAccount: (0, _selectors.getAccountsWithLabels)(state).map(accountWithLabel => accountWithLabel.address).includes(to),
    to
  };
}

var _default = (0, _reactRedux.connect)(mapStateToProps)(_confirmPageContainer.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/transaction-decoding.component.js", {"../../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../../helpers/utils/fetch-with-cache":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/fetch-with-cache.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../ui/error-message":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/error-message/index.js","../../ui/spinner":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/spinner/index.js","./components/decoding/address":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/decoding/address/index.js","./components/ui/accreditation":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/accreditation/index.js","./components/ui/copy-raw-data":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/copy-raw-data/index.js","./constants":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/constants.js","./transaction-decoding.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/transaction-decoding.util.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@truffle/codec":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/index.js","@truffle/decoder":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/index.js","browser-util-inspect":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/browser-util-inspect/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/transaction-decoding.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionDecoding;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _browserUtilInspect = _interopRequireDefault(require("browser-util-inspect"));

var _decoder = require("@truffle/decoder");

var _reactRedux = require("react-redux");

var Codec = _interopRequireWildcard(require("@truffle/codec"));

var _spinner = _interopRequireDefault(require("../../ui/spinner"));

var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));

var _fetchWithCache = _interopRequireDefault(require("../../../helpers/utils/fetch-with-cache"));

var _selectors = require("../../../selectors");

var _conversions = require("../../../helpers/utils/conversions.util");

var _i18n = require("../../../contexts/i18n");

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

var _transactionDecoding = require("./transaction-decoding.util");

var _constants = require("./constants");

var _address = _interopRequireDefault(require("./components/decoding/address"));

var _copyRawData = _interopRequireDefault(require("./components/ui/copy-raw-data"));

var _accreditation = _interopRequireDefault(require("./components/ui/accreditation"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function TransactionDecoding({
  to = '',
  inputData: data = ''
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [tx, setTx] = (0, _react.useState)([]);
  const [sourceAddress, setSourceAddress] = (0, _react.useState)('');
  const [sourceFetchedVia, setSourceFetchedVia] = (0, _react.useState)('');
  const {
    address: from
  } = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount);
  const network = (0, _conversions.hexToDecimal)((0, _reactRedux.useSelector)(_selectors.getCurrentChainId));
  const [loading, setLoading] = (0, _react.useState)(false);
  const [hasError, setError] = (0, _react.useState)(false);
  const [errorMessage, setErrorMessage] = (0, _react.useState)('');
  (0, _react.useEffect)(() => {
    (async () => {
      setLoading(true);

      try {
        const networks = await (0, _fetchWithCache.default)(_constants.FETCH_SUPPORTED_NETWORKS_URI, {
          method: 'GET'
        });

        if (!networks.some(n => n.active && Number(n.chainId) === Number(network))) {
          throw new Error(t('transactionDecodingUnsupportedNetworkError', [network]));
        }

        const requestUrl = `${_constants.FETCH_PROJECT_INFO_URI}?${new URLSearchParams({
          to,
          'network-id': network
        })}`;
        const response = await (0, _fetchWithCache.default)(requestUrl, {
          method: 'GET'
        });
        const {
          info: projectInfo,
          fetchedVia,
          address
        } = response; // update source information

        if (address) {
          setSourceAddress(address);
        }

        if (fetchedVia) {
          setSourceFetchedVia(fetchedVia);
        } // creating instance of the truffle decoder


        const decoder = await (0, _decoder.forAddress)(to, {
          provider: global.ethereumProvider,
          projectInfo
        }); // decode tx input data

        const decoding = await decoder.decodeTransaction({
          from,
          to,
          input: data,
          blockNumber: null
        }); // transform tx decoding arguments into tree data

        const params = (0, _transactionDecoding.transformTxDecoding)(decoding === null || decoding === void 0 ? void 0 : decoding.arguments);
        setTx(params);
        setLoading(false);
      } catch (error) {
        setLoading(false);
        setError(true);

        if (error !== null && error !== void 0 && error.message.match('400')) {
          setErrorMessage(t('txInsightsNotSupported'));
        } else {
          setErrorMessage(error === null || error === void 0 ? void 0 : error.message);
        }
      }
    })();
  }, [t, from, to, network, data]); // ***********************************************************
  // component rendering methods
  // ***********************************************************

  const renderLeaf = ({
    name,
    kind,
    typeClass,
    value
  }) => {
    switch (kind) {
      case 'error':
        return /*#__PURE__*/_react.default.createElement("span", {
          className: "sol-item solidity-error"
        }, /*#__PURE__*/_react.default.createElement("span", null, "Malformed data"));

      default:
        switch (typeClass) {
          case 'int':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item solidity-int"
            }, [value.asBN || value.asString].toString());

          case 'uint':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item solidity-uint"
            }, [value.asBN || value.asString].toString());

          case 'bytes':
            return /*#__PURE__*/_react.default.createElement("span", {
              className: "sol-item solidity-bytes"
            }, value.asHex);

          case 'array':
            return /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", {
              className: "typography--color-black"
            }, name, ": "), /*#__PURE__*/_react.default.createElement("ol", null, value.map((itemValue, index) => {
              var _itemValue$type, _itemValue$type2;

              return /*#__PURE__*/_react.default.createElement("li", {
                key: `${(_itemValue$type = itemValue.type) === null || _itemValue$type === void 0 ? void 0 : _itemValue$type.typeClass}-${index}`
              }, renderLeaf({
                typeClass: (_itemValue$type2 = itemValue.type) === null || _itemValue$type2 === void 0 ? void 0 : _itemValue$type2.typeClass,
                value: itemValue.value,
                kind: itemValue.kind
              }));
            })));

          case 'address':
            {
              const address = value === null || value === void 0 ? void 0 : value.asAddress;
              return /*#__PURE__*/_react.default.createElement(_address.default, {
                addressOnly: true,
                checksummedRecipientAddress: (0, _hexstringUtils.toChecksumHexAddress)(address)
              });
            }

          default:
            return /*#__PURE__*/_react.default.createElement("pre", {
              className: "sol-item solidity-raw"
            }, (0, _browserUtilInspect.default)(new Codec.Format.Utils.Inspect.ResultInspector(value)));
        }

    }
  };

  const renderTree = ({
    name,
    kind,
    typeClass,
    type,
    value,
    children
  }, index) => {
    return children ? /*#__PURE__*/_react.default.createElement("li", {
      key: `${typeClass}-${index}`
    }, /*#__PURE__*/_react.default.createElement("details", {
      open: index === 0 ? 'open' : ''
    }, /*#__PURE__*/_react.default.createElement("summary", null, name, ": "), /*#__PURE__*/_react.default.createElement("ol", null, children.map(renderTree)))) : /*#__PURE__*/_react.default.createElement("li", {
      className: "solidity-value"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "solidity-named-item solidity-item"
    }, typeClass !== 'array' && !Array.isArray(value) ? /*#__PURE__*/_react.default.createElement("span", {
      className: "param-name typography--color-black"
    }, name, ": ") : null, /*#__PURE__*/_react.default.createElement("span", {
      className: "sol-item solidity-uint"
    }, renderLeaf({
      name,
      typeClass,
      type,
      value,
      kind
    }))));
  };

  const renderTransactionDecoding = () => {
    if (loading) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "tx-insight-loading"
      }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
        color: "#3ca7f2"
      }));
    }

    if (hasError) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "tx-insight-error"
      }, /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
        errorMessage: errorMessage
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content__tree-component"
    }, /*#__PURE__*/_react.default.createElement("ol", null, tx.map(renderTree))), /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content__copy-raw-tx"
    }, /*#__PURE__*/_react.default.createElement(_copyRawData.default, {
      data: data
    })), sourceFetchedVia && sourceAddress ? /*#__PURE__*/_react.default.createElement("div", {
      className: "tx-insight-content__accreditation"
    }, /*#__PURE__*/_react.default.createElement(_accreditation.default, {
      address: sourceAddress,
      fetchVia: sourceFetchedVia
    })) : null);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tx-insight"
  }, renderTransactionDecoding());
}

TransactionDecoding.propTypes = {
  to: _propTypes.default.string.isRequired,
  inputData: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/transaction-decoding.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/css.js", {"./merge":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/merge.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/toConsumableArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/toConsumableArray.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/css.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _merge = _interopRequireDefault(require("./merge"));

function omit(input, fields) {
  var output = {};
  Object.keys(input).forEach(function (prop) {
    if (fields.indexOf(prop) === -1) {
      output[prop] = input[prop];
    }
  });
  return output;
}

function css(styleFunction) {
  var newStyleFunction = function newStyleFunction(props) {
    var output = styleFunction(props);

    if (props.css) {
      return (0, _extends2.default)((0, _extends2.default)({}, (0, _merge.default)(output, styleFunction((0, _extends2.default)({
        theme: props.theme
      }, props.css)))), omit(props.css, [styleFunction.filterProps]));
    }

    return output;
  };

  newStyleFunction.propTypes = "development" !== 'production' ? (0, _extends2.default)((0, _extends2.default)({}, styleFunction.propTypes), {}, {
    css: _propTypes.default.object
  }) : {};
  newStyleFunction.filterProps = ['css'].concat((0, _toConsumableArray2.default)(styleFunction.filterProps));
  return newStyleFunction;
}

var _default = css;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/css.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/breakpoints.js", {"./merge":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/merge.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/toConsumableArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/toConsumableArray.js","@babel/runtime/helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/typeof.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/breakpoints.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleBreakpoints = handleBreakpoints;
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _merge = _interopRequireDefault(require("./merge"));

// The breakpoint **start** at this value.
// For instance with the first breakpoint xs: [xs, sm[.
var values = {
  xs: 0,
  sm: 600,
  md: 960,
  lg: 1280,
  xl: 1920
};
var defaultBreakpoints = {
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
  up: function up(key) {
    return "@media (min-width:".concat(values[key], "px)");
  }
};

function handleBreakpoints(props, propValue, styleFromPropValue) {
  if ("development" !== 'production') {
    if (!props.theme) {
      console.error('Material-UI: You are calling a style function without a theme value.');
    }
  }

  if (Array.isArray(propValue)) {
    var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
    return propValue.reduce(function (acc, item, index) {
      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
      return acc;
    }, {});
  }

  if ((0, _typeof2.default)(propValue) === 'object') {
    var _themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;

    return Object.keys(propValue).reduce(function (acc, breakpoint) {
      acc[_themeBreakpoints.up(breakpoint)] = styleFromPropValue(propValue[breakpoint]);
      return acc;
    }, {});
  }

  var output = styleFromPropValue(propValue);
  return output;
}

function breakpoints(styleFunction) {
  var newStyleFunction = function newStyleFunction(props) {
    var base = styleFunction(props);
    var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
    var extended = themeBreakpoints.keys.reduce(function (acc, key) {
      if (props[key]) {
        acc = acc || {};
        acc[themeBreakpoints.up(key)] = styleFunction((0, _extends2.default)({
          theme: props.theme
        }, props[key]));
      }

      return acc;
    }, null);
    return (0, _merge.default)(base, extended);
  };

  newStyleFunction.propTypes = "development" !== 'production' ? (0, _extends2.default)((0, _extends2.default)({}, styleFunction.propTypes), {}, {
    xs: _propTypes.default.object,
    sm: _propTypes.default.object,
    md: _propTypes.default.object,
    lg: _propTypes.default.object,
    xl: _propTypes.default.object
  }) : {};
  newStyleFunction.filterProps = ['xs', 'sm', 'md', 'lg', 'xl'].concat((0, _toConsumableArray2.default)(styleFunction.filterProps));
  return newStyleFunction;
}

var _default = breakpoints;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/breakpoints.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/borders.js", {"./compose":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js","./style":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/borders.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.borderRadius = exports.borderColor = exports.borderLeft = exports.borderBottom = exports.borderRight = exports.borderTop = exports.border = void 0;

var _style = _interopRequireDefault(require("./style"));

var _compose = _interopRequireDefault(require("./compose"));

function getBorder(value) {
  if (typeof value !== 'number') {
    return value;
  }

  return "".concat(value, "px solid");
}

var border = (0, _style.default)({
  prop: 'border',
  themeKey: 'borders',
  transform: getBorder
});
exports.border = border;
var borderTop = (0, _style.default)({
  prop: 'borderTop',
  themeKey: 'borders',
  transform: getBorder
});
exports.borderTop = borderTop;
var borderRight = (0, _style.default)({
  prop: 'borderRight',
  themeKey: 'borders',
  transform: getBorder
});
exports.borderRight = borderRight;
var borderBottom = (0, _style.default)({
  prop: 'borderBottom',
  themeKey: 'borders',
  transform: getBorder
});
exports.borderBottom = borderBottom;
var borderLeft = (0, _style.default)({
  prop: 'borderLeft',
  themeKey: 'borders',
  transform: getBorder
});
exports.borderLeft = borderLeft;
var borderColor = (0, _style.default)({
  prop: 'borderColor',
  themeKey: 'palette'
});
exports.borderColor = borderColor;
var borderRadius = (0, _style.default)({
  prop: 'borderRadius',
  themeKey: 'shape'
});
exports.borderRadius = borderRadius;
var borders = (0, _compose.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderRadius);
var _default = borders;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/borders.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/display.js", {"./compose":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js","./style":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/display.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.whiteSpace = exports.visibility = exports.textOverflow = exports.overflow = exports.displayRaw = exports.displayPrint = void 0;

var _style = _interopRequireDefault(require("./style"));

var _compose = _interopRequireDefault(require("./compose"));

var displayPrint = (0, _style.default)({
  prop: 'displayPrint',
  cssProperty: false,
  transform: function transform(value) {
    return {
      '@media print': {
        display: value
      }
    };
  }
});
exports.displayPrint = displayPrint;
var displayRaw = (0, _style.default)({
  prop: 'display'
});
exports.displayRaw = displayRaw;
var overflow = (0, _style.default)({
  prop: 'overflow'
});
exports.overflow = overflow;
var textOverflow = (0, _style.default)({
  prop: 'textOverflow'
});
exports.textOverflow = textOverflow;
var visibility = (0, _style.default)({
  prop: 'visibility'
});
exports.visibility = visibility;
var whiteSpace = (0, _style.default)({
  prop: 'whiteSpace'
});
exports.whiteSpace = whiteSpace;

var _default = (0, _compose.default)(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/display.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/flexbox.js", {"./compose":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js","./style":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/flexbox.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.justifySelf = exports.justifyItems = exports.alignSelf = exports.flexShrink = exports.flexGrow = exports.flex = exports.order = exports.alignContent = exports.alignItems = exports.justifyContent = exports.flexWrap = exports.flexDirection = exports.flexBasis = void 0;

var _style = _interopRequireDefault(require("./style"));

var _compose = _interopRequireDefault(require("./compose"));

var flexBasis = (0, _style.default)({
  prop: 'flexBasis'
});
exports.flexBasis = flexBasis;
var flexDirection = (0, _style.default)({
  prop: 'flexDirection'
});
exports.flexDirection = flexDirection;
var flexWrap = (0, _style.default)({
  prop: 'flexWrap'
});
exports.flexWrap = flexWrap;
var justifyContent = (0, _style.default)({
  prop: 'justifyContent'
});
exports.justifyContent = justifyContent;
var alignItems = (0, _style.default)({
  prop: 'alignItems'
});
exports.alignItems = alignItems;
var alignContent = (0, _style.default)({
  prop: 'alignContent'
});
exports.alignContent = alignContent;
var order = (0, _style.default)({
  prop: 'order'
});
exports.order = order;
var flex = (0, _style.default)({
  prop: 'flex'
});
exports.flex = flex;
var flexGrow = (0, _style.default)({
  prop: 'flexGrow'
});
exports.flexGrow = flexGrow;
var flexShrink = (0, _style.default)({
  prop: 'flexShrink'
});
exports.flexShrink = flexShrink;
var alignSelf = (0, _style.default)({
  prop: 'alignSelf'
});
exports.alignSelf = alignSelf;
var justifyItems = (0, _style.default)({
  prop: 'justifyItems'
});
exports.justifyItems = justifyItems;
var justifySelf = (0, _style.default)({
  prop: 'justifySelf'
});
exports.justifySelf = justifySelf;
var flexbox = (0, _compose.default)(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
var _default = flexbox;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/flexbox.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/grid.js", {"./compose":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js","./style":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/grid.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.gridArea = exports.gridTemplateAreas = exports.gridTemplateRows = exports.gridTemplateColumns = exports.gridAutoRows = exports.gridAutoColumns = exports.gridAutoFlow = exports.gridRow = exports.gridColumn = exports.gridRowGap = exports.gridColumnGap = exports.gridGap = void 0;

var _style = _interopRequireDefault(require("./style"));

var _compose = _interopRequireDefault(require("./compose"));

var gridGap = (0, _style.default)({
  prop: 'gridGap'
});
exports.gridGap = gridGap;
var gridColumnGap = (0, _style.default)({
  prop: 'gridColumnGap'
});
exports.gridColumnGap = gridColumnGap;
var gridRowGap = (0, _style.default)({
  prop: 'gridRowGap'
});
exports.gridRowGap = gridRowGap;
var gridColumn = (0, _style.default)({
  prop: 'gridColumn'
});
exports.gridColumn = gridColumn;
var gridRow = (0, _style.default)({
  prop: 'gridRow'
});
exports.gridRow = gridRow;
var gridAutoFlow = (0, _style.default)({
  prop: 'gridAutoFlow'
});
exports.gridAutoFlow = gridAutoFlow;
var gridAutoColumns = (0, _style.default)({
  prop: 'gridAutoColumns'
});
exports.gridAutoColumns = gridAutoColumns;
var gridAutoRows = (0, _style.default)({
  prop: 'gridAutoRows'
});
exports.gridAutoRows = gridAutoRows;
var gridTemplateColumns = (0, _style.default)({
  prop: 'gridTemplateColumns'
});
exports.gridTemplateColumns = gridTemplateColumns;
var gridTemplateRows = (0, _style.default)({
  prop: 'gridTemplateRows'
});
exports.gridTemplateRows = gridTemplateRows;
var gridTemplateAreas = (0, _style.default)({
  prop: 'gridTemplateAreas'
});
exports.gridTemplateAreas = gridTemplateAreas;
var gridArea = (0, _style.default)({
  prop: 'gridArea'
});
exports.gridArea = gridArea;
var grid = (0, _compose.default)(gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
var _default = grid;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/grid.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/palette.js", {"./compose":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js","./style":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/palette.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bgcolor = exports.color = void 0;

var _style = _interopRequireDefault(require("./style"));

var _compose = _interopRequireDefault(require("./compose"));

var color = (0, _style.default)({
  prop: 'color',
  themeKey: 'palette'
});
exports.color = color;
var bgcolor = (0, _style.default)({
  prop: 'bgcolor',
  cssProperty: 'backgroundColor',
  themeKey: 'palette'
});
exports.bgcolor = bgcolor;
var palette = (0, _compose.default)(color, bgcolor);
var _default = palette;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/palette.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/positions.js", {"./compose":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js","./style":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/positions.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.left = exports.bottom = exports.right = exports.top = exports.zIndex = exports.position = void 0;

var _style = _interopRequireDefault(require("./style"));

var _compose = _interopRequireDefault(require("./compose"));

var position = (0, _style.default)({
  prop: 'position'
});
exports.position = position;
var zIndex = (0, _style.default)({
  prop: 'zIndex',
  themeKey: 'zIndex'
});
exports.zIndex = zIndex;
var top = (0, _style.default)({
  prop: 'top'
});
exports.top = top;
var right = (0, _style.default)({
  prop: 'right'
});
exports.right = right;
var bottom = (0, _style.default)({
  prop: 'bottom'
});
exports.bottom = bottom;
var left = (0, _style.default)({
  prop: 'left'
});
exports.left = left;

var _default = (0, _compose.default)(position, zIndex, top, right, bottom, left);

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/positions.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/sizing.js", {"./compose":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js","./style":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/sizing.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.boxSizing = exports.sizeHeight = exports.sizeWidth = exports.minHeight = exports.maxHeight = exports.height = exports.minWidth = exports.maxWidth = exports.width = void 0;

var _style = _interopRequireDefault(require("./style"));

var _compose = _interopRequireDefault(require("./compose"));

function transform(value) {
  return value <= 1 ? "".concat(value * 100, "%") : value;
}

var width = (0, _style.default)({
  prop: 'width',
  transform: transform
});
exports.width = width;
var maxWidth = (0, _style.default)({
  prop: 'maxWidth',
  transform: transform
});
exports.maxWidth = maxWidth;
var minWidth = (0, _style.default)({
  prop: 'minWidth',
  transform: transform
});
exports.minWidth = minWidth;
var height = (0, _style.default)({
  prop: 'height',
  transform: transform
});
exports.height = height;
var maxHeight = (0, _style.default)({
  prop: 'maxHeight',
  transform: transform
});
exports.maxHeight = maxHeight;
var minHeight = (0, _style.default)({
  prop: 'minHeight',
  transform: transform
});
exports.minHeight = minHeight;
var sizeWidth = (0, _style.default)({
  prop: 'size',
  cssProperty: 'width',
  transform: transform
});
exports.sizeWidth = sizeWidth;
var sizeHeight = (0, _style.default)({
  prop: 'size',
  cssProperty: 'height',
  transform: transform
});
exports.sizeHeight = sizeHeight;
var boxSizing = (0, _style.default)({
  prop: 'boxSizing'
});
exports.boxSizing = boxSizing;
var sizing = (0, _compose.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
var _default = sizing;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/sizing.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/shadows.js", {"./style":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/shadows.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _style = _interopRequireDefault(require("./style"));

var boxShadow = (0, _style.default)({
  prop: 'boxShadow',
  themeKey: 'shadows'
});
var _default = boxShadow;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/shadows.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js", {"./breakpoints":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/breakpoints.js","./responsivePropType":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/responsivePropType.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _responsivePropType = _interopRequireDefault(require("./responsivePropType"));

var _breakpoints = require("./breakpoints");

function getPath(obj, path) {
  if (!path || typeof path !== 'string') {
    return null;
  }

  return path.split('.').reduce(function (acc, item) {
    return acc && acc[item] ? acc[item] : null;
  }, obj);
}

function style(options) {
  var prop = options.prop,
      _options$cssProperty = options.cssProperty,
      cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty,
      themeKey = options.themeKey,
      transform = options.transform;

  var fn = function fn(props) {
    if (props[prop] == null) {
      return null;
    }

    var propValue = props[prop];
    var theme = props.theme;
    var themeMapping = getPath(theme, themeKey) || {};

    var styleFromPropValue = function styleFromPropValue(propValueFinal) {
      var value;

      if (typeof themeMapping === 'function') {
        value = themeMapping(propValueFinal);
      } else if (Array.isArray(themeMapping)) {
        value = themeMapping[propValueFinal] || propValueFinal;
      } else {
        value = getPath(themeMapping, propValueFinal) || propValueFinal;

        if (transform) {
          value = transform(value);
        }
      }

      if (cssProperty === false) {
        return value;
      }

      return (0, _defineProperty2.default)({}, cssProperty, value);
    };

    return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
  };

  fn.propTypes = "development" !== 'production' ? (0, _defineProperty2.default)({}, prop, _responsivePropType.default) : {};
  fn.filterProps = [prop];
  return fn;
}

var _default = style;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/typography.js", {"./compose":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js","./style":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/style.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/typography.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.textAlign = exports.lineHeight = exports.letterSpacing = exports.fontWeight = exports.fontStyle = exports.fontSize = exports.fontFamily = void 0;

var _style = _interopRequireDefault(require("./style"));

var _compose = _interopRequireDefault(require("./compose"));

var fontFamily = (0, _style.default)({
  prop: 'fontFamily',
  themeKey: 'typography'
});
exports.fontFamily = fontFamily;
var fontSize = (0, _style.default)({
  prop: 'fontSize',
  themeKey: 'typography'
});
exports.fontSize = fontSize;
var fontStyle = (0, _style.default)({
  prop: 'fontStyle',
  themeKey: 'typography'
});
exports.fontStyle = fontStyle;
var fontWeight = (0, _style.default)({
  prop: 'fontWeight',
  themeKey: 'typography'
});
exports.fontWeight = fontWeight;
var letterSpacing = (0, _style.default)({
  prop: 'letterSpacing'
});
exports.letterSpacing = letterSpacing;
var lineHeight = (0, _style.default)({
  prop: 'lineHeight'
});
exports.lineHeight = lineHeight;
var textAlign = (0, _style.default)({
  prop: 'textAlign'
});
exports.textAlign = textAlign;
var typography = (0, _compose.default)(fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
var _default = typography;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/typography.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js", {"./merge":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/merge.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _merge = _interopRequireDefault(require("./merge"));

function compose() {
  for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
    styles[_key] = arguments[_key];
  }

  var fn = function fn(props) {
    return styles.reduce(function (acc, style) {
      var output = style(props);

      if (output) {
        return (0, _merge.default)(acc, output);
      }

      return acc;
    }, {});
  }; // Alternative approach that doesn't yield any performance gain.
  // const handlers = styles.reduce((acc, style) => {
  //   style.filterProps.forEach(prop => {
  //     acc[prop] = style;
  //   });
  //   return acc;
  // }, {});
  // const fn = props => {
  //   return Object.keys(props).reduce((acc, prop) => {
  //     if (handlers[prop]) {
  //       return merge(acc, handlers[prop](props));
  //     }
  //     return acc;
  //   }, {});
  // };


  fn.propTypes = "development" !== 'production' ? styles.reduce(function (acc, style) {
    return (0, _extends2.default)(acc, style.propTypes);
  }, {}) : {};
  fn.filterProps = styles.reduce(function (acc, style) {
    return acc.concat(style.filterProps);
  }, []);
  return fn;
}

var _default = compose;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/compose.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/spacing.js", {"./breakpoints":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/breakpoints.js","./memoize":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/memoize.js","./merge":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/merge.js","./responsivePropType":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/responsivePropType.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/slicedToArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/slicedToArray.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/spacing.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnarySpacing = createUnarySpacing;
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _responsivePropType = _interopRequireDefault(require("./responsivePropType"));

var _breakpoints = require("./breakpoints");

var _merge = _interopRequireDefault(require("./merge"));

var _memoize = _interopRequireDefault(require("./memoize"));

var properties = {
  m: 'margin',
  p: 'padding'
};
var directions = {
  t: 'Top',
  r: 'Right',
  b: 'Bottom',
  l: 'Left',
  x: ['Left', 'Right'],
  y: ['Top', 'Bottom']
};
var aliases = {
  marginX: 'mx',
  marginY: 'my',
  paddingX: 'px',
  paddingY: 'py'
}; // memoize() impact:
// From 300,000 ops/sec
// To 350,000 ops/sec

var getCssProperties = (0, _memoize.default)(function (prop) {
  // It's not a shorthand notation.
  if (prop.length > 2) {
    if (aliases[prop]) {
      prop = aliases[prop];
    } else {
      return [prop];
    }
  }

  var _prop$split = prop.split(''),
      _prop$split2 = (0, _slicedToArray2.default)(_prop$split, 2),
      a = _prop$split2[0],
      b = _prop$split2[1];

  var property = properties[a];
  var direction = directions[b] || '';
  return Array.isArray(direction) ? direction.map(function (dir) {
    return property + dir;
  }) : [property + direction];
});
var spacingKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY'];

function createUnarySpacing(theme) {
  var themeSpacing = theme.spacing || 8;

  if (typeof themeSpacing === 'number') {
    return function (abs) {
      if ("development" !== 'production') {
        if (typeof abs !== 'number') {
          console.error("Material-UI: Expected spacing argument to be a number, got ".concat(abs, "."));
        }
      }

      return themeSpacing * abs;
    };
  }

  if (Array.isArray(themeSpacing)) {
    return function (abs) {
      if ("development" !== 'production') {
        if (abs > themeSpacing.length - 1) {
          console.error(["Material-UI: The value provided (".concat(abs, ") overflows."), "The supported values are: ".concat(JSON.stringify(themeSpacing), "."), "".concat(abs, " > ").concat(themeSpacing.length - 1, ", you need to add the missing values.")].join('\n'));
        }
      }

      return themeSpacing[abs];
    };
  }

  if (typeof themeSpacing === 'function') {
    return themeSpacing;
  }

  if ("development" !== 'production') {
    console.error(["Material-UI: The `theme.spacing` value (".concat(themeSpacing, ") is invalid."), 'It should be a number, an array or a function.'].join('\n'));
  }

  return function () {
    return undefined;
  };
}

function getValue(transformer, propValue) {
  if (typeof propValue === 'string') {
    return propValue;
  }

  var abs = Math.abs(propValue);
  var transformed = transformer(abs);

  if (propValue >= 0) {
    return transformed;
  }

  if (typeof transformed === 'number') {
    return -transformed;
  }

  return "-".concat(transformed);
}

function getStyleFromPropValue(cssProperties, transformer) {
  return function (propValue) {
    return cssProperties.reduce(function (acc, cssProperty) {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  };
}

function spacing(props) {
  var theme = props.theme;
  var transformer = createUnarySpacing(theme);
  return Object.keys(props).map(function (prop) {
    // Using a hash computation over an array iteration could be faster, but with only 28 items,
    // it's doesn't worth the bundle size.
    if (spacingKeys.indexOf(prop) === -1) {
      return null;
    }

    var cssProperties = getCssProperties(prop);
    var styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    var propValue = props[prop];
    return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
  }).reduce(_merge.default, {});
}

spacing.propTypes = "development" !== 'production' ? spacingKeys.reduce(function (obj, key) {
  obj[key] = _responsivePropType.default;
  return obj;
}, {}) : {};
spacing.filterProps = spacingKeys;
var _default = spacing;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/spacing.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/ThemeProvider/nested.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/ThemeProvider/nested.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var _default = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/styles",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/ThemeProvider/nested.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss/dist/jss.cjs.js", {"@babel/runtime/helpers/assertThisInitialized":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/assertThisInitialized.js","@babel/runtime/helpers/createClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/createClass.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/inheritsLoose":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/inheritsLoose.js","@babel/runtime/helpers/objectWithoutPropertiesLoose":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","is-in-browser":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-in-browser/dist/index.js","tiny-warning":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/tiny-warning/dist/tiny-warning.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/jss/dist/jss.cjs.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var isInBrowser = _interopDefault(require('is-in-browser'));
var warning = _interopDefault(require('tiny-warning'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/createClass'));
var _inheritsLoose = _interopDefault(require('@babel/runtime/helpers/inheritsLoose'));
var _assertThisInitialized = _interopDefault(require('@babel/runtime/helpers/assertThisInitialized'));
var _objectWithoutPropertiesLoose = _interopDefault(require('@babel/runtime/helpers/objectWithoutPropertiesLoose'));

var plainObjectConstrurctor = {}.constructor;
function cloneStyle(style) {
  if (style == null || typeof style !== 'object') return style;
  if (Array.isArray(style)) return style.map(cloneStyle);
  if (style.constructor !== plainObjectConstrurctor) return style;
  var newStyle = {};

  for (var name in style) {
    newStyle[name] = cloneStyle(style[name]);
  }

  return newStyle;
}

/**
 * Create a rule instance.
 */

function createRule(name, decl, options) {
  if (name === void 0) {
    name = 'unnamed';
  }

  var jss = options.jss;
  var declCopy = cloneStyle(decl);
  var rule = jss.plugins.onCreateRule(name, declCopy, options);
  if (rule) return rule; // It is an at-rule and it has no instance.

  if (name[0] === '@') {
    "development" !== "production" ? warning(false, "[JSS] Unknown rule " + name) : void 0;
  }

  return null;
}

var join = function join(value, by) {
  var result = '';

  for (var i = 0; i < value.length; i++) {
    // Remove !important from the value, it will be readded later.
    if (value[i] === '!important') break;
    if (result) result += by;
    result += value[i];
  }

  return result;
};
/**
 * Converts array values to string.
 *
 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
 * `border: ['1px', '2px']` > `border: 1px, 2px;`
 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
 * `color: ['red', !important]` > `color: red !important;`
 */


function toCssValue(value, ignoreImportant) {
  if (ignoreImportant === void 0) {
    ignoreImportant = false;
  }

  if (!Array.isArray(value)) return value;
  var cssValue = ''; // Support space separated values via `[['5px', '10px']]`.

  if (Array.isArray(value[0])) {
    for (var i = 0; i < value.length; i++) {
      if (value[i] === '!important') break;
      if (cssValue) cssValue += ', ';
      cssValue += join(value[i], ' ');
    }
  } else cssValue = join(value, ', '); // Add !important, because it was ignored.


  if (!ignoreImportant && value[value.length - 1] === '!important') {
    cssValue += ' !important';
  }

  return cssValue;
}

/**
 * Indent a string.
 * http://jsperf.com/array-join-vs-for
 */
function indentStr(str, indent) {
  var result = '';

  for (var index = 0; index < indent; index++) {
    result += '  ';
  }

  return result + str;
}
/**
 * Converts a Rule to CSS string.
 */


function toCss(selector, style, options) {
  if (options === void 0) {
    options = {};
  }

  var result = '';
  if (!style) return result;
  var _options = options,
      _options$indent = _options.indent,
      indent = _options$indent === void 0 ? 0 : _options$indent;
  var fallbacks = style.fallbacks;
  if (selector) indent++; // Apply fallbacks first.

  if (fallbacks) {
    // Array syntax {fallbacks: [{prop: value}]}
    if (Array.isArray(fallbacks)) {
      for (var index = 0; index < fallbacks.length; index++) {
        var fallback = fallbacks[index];

        for (var prop in fallback) {
          var value = fallback[prop];

          if (value != null) {
            if (result) result += '\n';
            result += "" + indentStr(prop + ": " + toCssValue(value) + ";", indent);
          }
        }
      }
    } else {
      // Object syntax {fallbacks: {prop: value}}
      for (var _prop in fallbacks) {
        var _value = fallbacks[_prop];

        if (_value != null) {
          if (result) result += '\n';
          result += "" + indentStr(_prop + ": " + toCssValue(_value) + ";", indent);
        }
      }
    }
  }

  for (var _prop2 in style) {
    var _value2 = style[_prop2];

    if (_value2 != null && _prop2 !== 'fallbacks') {
      if (result) result += '\n';
      result += "" + indentStr(_prop2 + ": " + toCssValue(_value2) + ";", indent);
    }
  } // Allow empty style in this case, because properties will be added dynamically.


  if (!result && !options.allowEmpty) return result; // When rule is being stringified before selector was defined.

  if (!selector) return result;
  indent--;
  if (result) result = "\n" + result + "\n";
  return indentStr(selector + " {" + result, indent) + indentStr('}', indent);
}

var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
var nativeEscape = typeof CSS !== 'undefined' && CSS.escape;
var escape = (function (str) {
  return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, '\\$1');
});

var BaseStyleRule =
/*#__PURE__*/
function () {
  function BaseStyleRule(key, style, options) {
    this.type = 'style';
    this.key = void 0;
    this.isProcessed = false;
    this.style = void 0;
    this.renderer = void 0;
    this.renderable = void 0;
    this.options = void 0;
    var sheet = options.sheet,
        Renderer = options.Renderer;
    this.key = key;
    this.options = options;
    this.style = style;
    if (sheet) this.renderer = sheet.renderer;else if (Renderer) this.renderer = new Renderer();
  }
  /**
   * Get or set a style property.
   */


  var _proto = BaseStyleRule.prototype;

  _proto.prop = function prop(name, value, options) {
    // It's a getter.
    if (value === undefined) return this.style[name]; // Don't do anything if the value has not changed.

    var force = options ? options.force : false;
    if (!force && this.style[name] === value) return this;
    var newValue = value;

    if (!options || options.process !== false) {
      newValue = this.options.jss.plugins.onChangeValue(value, name, this);
    }

    var isEmpty = newValue == null || newValue === false;
    var isDefined = name in this.style; // Value is empty and wasn't defined before.

    if (isEmpty && !isDefined && !force) return this; // We are going to remove this value.

    var remove = isEmpty && isDefined;
    if (remove) delete this.style[name];else this.style[name] = newValue; // Renderable is defined if StyleSheet option `link` is true.

    if (this.renderable && this.renderer) {
      if (remove) this.renderer.removeProperty(this.renderable, name);else this.renderer.setProperty(this.renderable, name, newValue);
      return this;
    }

    var sheet = this.options.sheet;

    if (sheet && sheet.attached) {
      "development" !== "production" ? warning(false, '[JSS] Rule is not linked. Missing sheet option "link: true".') : void 0;
    }

    return this;
  };

  return BaseStyleRule;
}();
var StyleRule =
/*#__PURE__*/
function (_BaseStyleRule) {
  _inheritsLoose(StyleRule, _BaseStyleRule);

  function StyleRule(key, style, options) {
    var _this;

    _this = _BaseStyleRule.call(this, key, style, options) || this;
    _this.selectorText = void 0;
    _this.id = void 0;
    _this.renderable = void 0;
    var selector = options.selector,
        scoped = options.scoped,
        sheet = options.sheet,
        generateId = options.generateId;

    if (selector) {
      _this.selectorText = selector;
    } else if (scoped !== false) {
      _this.id = generateId(_assertThisInitialized(_assertThisInitialized(_this)), sheet);
      _this.selectorText = "." + escape(_this.id);
    }

    return _this;
  }
  /**
   * Set selector string.
   * Attention: use this with caution. Most browsers didn't implement
   * selectorText setter, so this may result in rerendering of entire Style Sheet.
   */


  var _proto2 = StyleRule.prototype;

  /**
   * Apply rule to an element inline.
   */
  _proto2.applyTo = function applyTo(renderable) {
    var renderer = this.renderer;

    if (renderer) {
      var json = this.toJSON();

      for (var prop in json) {
        renderer.setProperty(renderable, prop, json[prop]);
      }
    }

    return this;
  }
  /**
   * Returns JSON representation of the rule.
   * Fallbacks are not supported.
   * Useful for inline styles.
   */
  ;

  _proto2.toJSON = function toJSON() {
    var json = {};

    for (var prop in this.style) {
      var value = this.style[prop];
      if (typeof value !== 'object') json[prop] = value;else if (Array.isArray(value)) json[prop] = toCssValue(value);
    }

    return json;
  }
  /**
   * Generates a CSS string.
   */
  ;

  _proto2.toString = function toString(options) {
    var sheet = this.options.sheet;
    var link = sheet ? sheet.options.link : false;
    var opts = link ? _extends({}, options, {
      allowEmpty: true
    }) : options;
    return toCss(this.selectorText, this.style, opts);
  };

  _createClass(StyleRule, [{
    key: "selector",
    set: function set(selector) {
      if (selector === this.selectorText) return;
      this.selectorText = selector;
      var renderer = this.renderer,
          renderable = this.renderable;
      if (!renderable || !renderer) return;
      var hasChanged = renderer.setSelector(renderable, selector); // If selector setter is not implemented, rerender the rule.

      if (!hasChanged) {
        renderer.replaceRule(renderable, this);
      }
    }
    /**
     * Get selector string.
     */
    ,
    get: function get() {
      return this.selectorText;
    }
  }]);

  return StyleRule;
}(BaseStyleRule);
var pluginStyleRule = {
  onCreateRule: function onCreateRule(name, style, options) {
    if (name[0] === '@' || options.parent && options.parent.type === 'keyframes') {
      return null;
    }

    return new StyleRule(name, style, options);
  }
};

var defaultToStringOptions = {
  indent: 1,
  children: true
};
var atRegExp = /@([\w-]+)/;
/**
 * Conditional rule for @media, @supports
 */

var ConditionalRule =
/*#__PURE__*/
function () {
  function ConditionalRule(key, styles, options) {
    this.type = 'conditional';
    this.at = void 0;
    this.key = void 0;
    this.query = void 0;
    this.rules = void 0;
    this.options = void 0;
    this.isProcessed = false;
    this.renderable = void 0;
    this.key = key; // Key might contain a unique suffix in case the `name` passed by user was duplicate.

    this.query = options.name;
    var atMatch = key.match(atRegExp);
    this.at = atMatch ? atMatch[1] : 'unknown';
    this.options = options;
    this.rules = new RuleList(_extends({}, options, {
      parent: this
    }));

    for (var name in styles) {
      this.rules.add(name, styles[name]);
    }

    this.rules.process();
  }
  /**
   * Get a rule.
   */


  var _proto = ConditionalRule.prototype;

  _proto.getRule = function getRule(name) {
    return this.rules.get(name);
  }
  /**
   * Get index of a rule.
   */
  ;

  _proto.indexOf = function indexOf(rule) {
    return this.rules.indexOf(rule);
  }
  /**
   * Create and register rule, run plugins.
   */
  ;

  _proto.addRule = function addRule(name, style, options) {
    var rule = this.rules.add(name, style, options);
    if (!rule) return null;
    this.options.jss.plugins.onProcessRule(rule);
    return rule;
  }
  /**
   * Generates a CSS string.
   */
  ;

  _proto.toString = function toString(options) {
    if (options === void 0) {
      options = defaultToStringOptions;
    }

    if (options.indent == null) options.indent = defaultToStringOptions.indent;
    if (options.children == null) options.children = defaultToStringOptions.children;

    if (options.children === false) {
      return this.query + " {}";
    }

    var children = this.rules.toString(options);
    return children ? this.query + " {\n" + children + "\n}" : '';
  };

  return ConditionalRule;
}();
var keyRegExp = /@media|@supports\s+/;
var pluginConditionalRule = {
  onCreateRule: function onCreateRule(key, styles, options) {
    return keyRegExp.test(key) ? new ConditionalRule(key, styles, options) : null;
  }
};

var defaultToStringOptions$1 = {
  indent: 1,
  children: true
};
var nameRegExp = /@keyframes\s+([\w-]+)/;
/**
 * Rule for @keyframes
 */

var KeyframesRule =
/*#__PURE__*/
function () {
  function KeyframesRule(key, frames, options) {
    this.type = 'keyframes';
    this.at = '@keyframes';
    this.key = void 0;
    this.name = void 0;
    this.id = void 0;
    this.rules = void 0;
    this.options = void 0;
    this.isProcessed = false;
    this.renderable = void 0;
    var nameMatch = key.match(nameRegExp);

    if (nameMatch && nameMatch[1]) {
      this.name = nameMatch[1];
    } else {
      this.name = 'noname';
      "development" !== "production" ? warning(false, "[JSS] Bad keyframes name " + key) : void 0;
    }

    this.key = this.type + "-" + this.name;
    this.options = options;
    var scoped = options.scoped,
        sheet = options.sheet,
        generateId = options.generateId;
    this.id = scoped === false ? this.name : escape(generateId(this, sheet));
    this.rules = new RuleList(_extends({}, options, {
      parent: this
    }));

    for (var name in frames) {
      this.rules.add(name, frames[name], _extends({}, options, {
        parent: this
      }));
    }

    this.rules.process();
  }
  /**
   * Generates a CSS string.
   */


  var _proto = KeyframesRule.prototype;

  _proto.toString = function toString(options) {
    if (options === void 0) {
      options = defaultToStringOptions$1;
    }

    if (options.indent == null) options.indent = defaultToStringOptions$1.indent;
    if (options.children == null) options.children = defaultToStringOptions$1.children;

    if (options.children === false) {
      return this.at + " " + this.id + " {}";
    }

    var children = this.rules.toString(options);
    if (children) children = "\n" + children + "\n";
    return this.at + " " + this.id + " {" + children + "}";
  };

  return KeyframesRule;
}();
var keyRegExp$1 = /@keyframes\s+/;
var refRegExp = /\$([\w-]+)/g;

var findReferencedKeyframe = function findReferencedKeyframe(val, keyframes) {
  if (typeof val === 'string') {
    return val.replace(refRegExp, function (match, name) {
      if (name in keyframes) {
        return keyframes[name];
      }

      "development" !== "production" ? warning(false, "[JSS] Referenced keyframes rule \"" + name + "\" is not defined.") : void 0;
      return match;
    });
  }

  return val;
};
/**
 * Replace the reference for a animation name.
 */


var replaceRef = function replaceRef(style, prop, keyframes) {
  var value = style[prop];
  var refKeyframe = findReferencedKeyframe(value, keyframes);

  if (refKeyframe !== value) {
    style[prop] = refKeyframe;
  }
};

var plugin = {
  onCreateRule: function onCreateRule(key, frames, options) {
    return typeof key === 'string' && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;
  },
  // Animation name ref replacer.
  onProcessStyle: function onProcessStyle(style, rule, sheet) {
    if (rule.type !== 'style' || !sheet) return style;
    if ('animation-name' in style) replaceRef(style, 'animation-name', sheet.keyframes);
    if ('animation' in style) replaceRef(style, 'animation', sheet.keyframes);
    return style;
  },
  onChangeValue: function onChangeValue(val, prop, rule) {
    var sheet = rule.options.sheet;

    if (!sheet) {
      return val;
    }

    switch (prop) {
      case 'animation':
        return findReferencedKeyframe(val, sheet.keyframes);

      case 'animation-name':
        return findReferencedKeyframe(val, sheet.keyframes);

      default:
        return val;
    }
  }
};

var KeyframeRule =
/*#__PURE__*/
function (_BaseStyleRule) {
  _inheritsLoose(KeyframeRule, _BaseStyleRule);

  function KeyframeRule() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BaseStyleRule.call.apply(_BaseStyleRule, [this].concat(args)) || this;
    _this.renderable = void 0;
    return _this;
  }

  var _proto = KeyframeRule.prototype;

  /**
   * Generates a CSS string.
   */
  _proto.toString = function toString(options) {
    var sheet = this.options.sheet;
    var link = sheet ? sheet.options.link : false;
    var opts = link ? _extends({}, options, {
      allowEmpty: true
    }) : options;
    return toCss(this.key, this.style, opts);
  };

  return KeyframeRule;
}(BaseStyleRule);
var pluginKeyframeRule = {
  onCreateRule: function onCreateRule(key, style, options) {
    if (options.parent && options.parent.type === 'keyframes') {
      return new KeyframeRule(key, style, options);
    }

    return null;
  }
};

var FontFaceRule =
/*#__PURE__*/
function () {
  function FontFaceRule(key, style, options) {
    this.type = 'font-face';
    this.at = '@font-face';
    this.key = void 0;
    this.style = void 0;
    this.options = void 0;
    this.isProcessed = false;
    this.renderable = void 0;
    this.key = key;
    this.style = style;
    this.options = options;
  }
  /**
   * Generates a CSS string.
   */


  var _proto = FontFaceRule.prototype;

  _proto.toString = function toString(options) {
    if (Array.isArray(this.style)) {
      var str = '';

      for (var index = 0; index < this.style.length; index++) {
        str += toCss(this.at, this.style[index]);
        if (this.style[index + 1]) str += '\n';
      }

      return str;
    }

    return toCss(this.at, this.style, options);
  };

  return FontFaceRule;
}();
var keyRegExp$2 = /@font-face/;
var pluginFontFaceRule = {
  onCreateRule: function onCreateRule(key, style, options) {
    return keyRegExp$2.test(key) ? new FontFaceRule(key, style, options) : null;
  }
};

var ViewportRule =
/*#__PURE__*/
function () {
  function ViewportRule(key, style, options) {
    this.type = 'viewport';
    this.at = '@viewport';
    this.key = void 0;
    this.style = void 0;
    this.options = void 0;
    this.isProcessed = false;
    this.renderable = void 0;
    this.key = key;
    this.style = style;
    this.options = options;
  }
  /**
   * Generates a CSS string.
   */


  var _proto = ViewportRule.prototype;

  _proto.toString = function toString(options) {
    return toCss(this.key, this.style, options);
  };

  return ViewportRule;
}();
var pluginViewportRule = {
  onCreateRule: function onCreateRule(key, style, options) {
    return key === '@viewport' || key === '@-ms-viewport' ? new ViewportRule(key, style, options) : null;
  }
};

var SimpleRule =
/*#__PURE__*/
function () {
  function SimpleRule(key, value, options) {
    this.type = 'simple';
    this.key = void 0;
    this.value = void 0;
    this.options = void 0;
    this.isProcessed = false;
    this.renderable = void 0;
    this.key = key;
    this.value = value;
    this.options = options;
  }
  /**
   * Generates a CSS string.
   */
  // eslint-disable-next-line no-unused-vars


  var _proto = SimpleRule.prototype;

  _proto.toString = function toString(options) {
    if (Array.isArray(this.value)) {
      var str = '';

      for (var index = 0; index < this.value.length; index++) {
        str += this.key + " " + this.value[index] + ";";
        if (this.value[index + 1]) str += '\n';
      }

      return str;
    }

    return this.key + " " + this.value + ";";
  };

  return SimpleRule;
}();
var keysMap = {
  '@charset': true,
  '@import': true,
  '@namespace': true
};
var pluginSimpleRule = {
  onCreateRule: function onCreateRule(key, value, options) {
    return key in keysMap ? new SimpleRule(key, value, options) : null;
  }
};

var plugins = [pluginStyleRule, pluginConditionalRule, plugin, pluginKeyframeRule, pluginFontFaceRule, pluginViewportRule, pluginSimpleRule];

var defaultUpdateOptions = {
  process: true
};
var forceUpdateOptions = {
  force: true,
  process: true
  /**
   * Contains rules objects and allows adding/removing etc.
   * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
   */

};

var RuleList =
/*#__PURE__*/
function () {
  // Rules registry for access by .get() method.
  // It contains the same rule registered by name and by selector.
  // Original styles object.
  // Used to ensure correct rules order.
  function RuleList(options) {
    this.map = {};
    this.raw = {};
    this.index = [];
    this.counter = 0;
    this.options = void 0;
    this.classes = void 0;
    this.keyframes = void 0;
    this.options = options;
    this.classes = options.classes;
    this.keyframes = options.keyframes;
  }
  /**
   * Create and register rule.
   *
   * Will not render after Style Sheet was rendered the first time.
   */


  var _proto = RuleList.prototype;

  _proto.add = function add(name, decl, ruleOptions) {
    var _this$options = this.options,
        parent = _this$options.parent,
        sheet = _this$options.sheet,
        jss = _this$options.jss,
        Renderer = _this$options.Renderer,
        generateId = _this$options.generateId,
        scoped = _this$options.scoped;

    var options = _extends({
      classes: this.classes,
      parent: parent,
      sheet: sheet,
      jss: jss,
      Renderer: Renderer,
      generateId: generateId,
      scoped: scoped,
      name: name
    }, ruleOptions); // When user uses .createStyleSheet(), duplicate names are not possible, but
    // `sheet.addRule()` opens the door for any duplicate rule name. When this happens
    // we need to make the key unique within this RuleList instance scope.


    var key = name;

    if (name in this.raw) {
      key = name + "-d" + this.counter++;
    } // We need to save the original decl before creating the rule
    // because cache plugin needs to use it as a key to return a cached rule.


    this.raw[key] = decl;

    if (key in this.classes) {
      // E.g. rules inside of @media container
      options.selector = "." + escape(this.classes[key]);
    }

    var rule = createRule(key, decl, options);
    if (!rule) return null;
    this.register(rule);
    var index = options.index === undefined ? this.index.length : options.index;
    this.index.splice(index, 0, rule);
    return rule;
  }
  /**
   * Get a rule.
   */
  ;

  _proto.get = function get(name) {
    return this.map[name];
  }
  /**
   * Delete a rule.
   */
  ;

  _proto.remove = function remove(rule) {
    this.unregister(rule);
    delete this.raw[rule.key];
    this.index.splice(this.index.indexOf(rule), 1);
  }
  /**
   * Get index of a rule.
   */
  ;

  _proto.indexOf = function indexOf(rule) {
    return this.index.indexOf(rule);
  }
  /**
   * Run `onProcessRule()` plugins on every rule.
   */
  ;

  _proto.process = function process() {
    var plugins = this.options.jss.plugins; // We need to clone array because if we modify the index somewhere else during a loop
    // we end up with very hard-to-track-down side effects.

    this.index.slice(0).forEach(plugins.onProcessRule, plugins);
  }
  /**
   * Register a rule in `.map`, `.classes` and `.keyframes` maps.
   */
  ;

  _proto.register = function register(rule) {
    this.map[rule.key] = rule;

    if (rule instanceof StyleRule) {
      this.map[rule.selector] = rule;
      if (rule.id) this.classes[rule.key] = rule.id;
    } else if (rule instanceof KeyframesRule && this.keyframes) {
      this.keyframes[rule.name] = rule.id;
    }
  }
  /**
   * Unregister a rule.
   */
  ;

  _proto.unregister = function unregister(rule) {
    delete this.map[rule.key];

    if (rule instanceof StyleRule) {
      delete this.map[rule.selector];
      delete this.classes[rule.key];
    } else if (rule instanceof KeyframesRule) {
      delete this.keyframes[rule.name];
    }
  }
  /**
   * Update the function values with a new data.
   */
  ;

  _proto.update = function update() {
    var name;
    var data;
    var options;

    if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {
      name = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe

      data = arguments.length <= 1 ? undefined : arguments[1]; // $FlowFixMe

      options = arguments.length <= 2 ? undefined : arguments[2];
    } else {
      data = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe

      options = arguments.length <= 1 ? undefined : arguments[1];
      name = null;
    }

    if (name) {
      this.updateOne(this.map[name], data, options);
    } else {
      for (var index = 0; index < this.index.length; index++) {
        this.updateOne(this.index[index], data, options);
      }
    }
  }
  /**
   * Execute plugins, update rule props.
   */
  ;

  _proto.updateOne = function updateOne(rule, data, options) {
    if (options === void 0) {
      options = defaultUpdateOptions;
    }

    var _this$options2 = this.options,
        plugins = _this$options2.jss.plugins,
        sheet = _this$options2.sheet; // It is a rules container like for e.g. ConditionalRule.

    if (rule.rules instanceof RuleList) {
      rule.rules.update(data, options);
      return;
    }

    var styleRule = rule;
    var style = styleRule.style;
    plugins.onUpdate(data, rule, sheet, options); // We rely on a new `style` ref in case it was mutated during onUpdate hook.

    if (options.process && style && style !== styleRule.style) {
      // We need to run the plugins in case new `style` relies on syntax plugins.
      plugins.onProcessStyle(styleRule.style, styleRule, sheet); // Update and add props.

      for (var prop in styleRule.style) {
        var nextValue = styleRule.style[prop];
        var prevValue = style[prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
        // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

        if (nextValue !== prevValue) {
          styleRule.prop(prop, nextValue, forceUpdateOptions);
        }
      } // Remove props.


      for (var _prop in style) {
        var _nextValue = styleRule.style[_prop];
        var _prevValue = style[_prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
        // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

        if (_nextValue == null && _nextValue !== _prevValue) {
          styleRule.prop(_prop, null, forceUpdateOptions);
        }
      }
    }
  }
  /**
   * Convert rules to a CSS string.
   */
  ;

  _proto.toString = function toString(options) {
    var str = '';
    var sheet = this.options.sheet;
    var link = sheet ? sheet.options.link : false;

    for (var index = 0; index < this.index.length; index++) {
      var rule = this.index[index];
      var css = rule.toString(options); // No need to render an empty rule.

      if (!css && !link) continue;
      if (str) str += '\n';
      str += css;
    }

    return str;
  };

  return RuleList;
}();

var StyleSheet =
/*#__PURE__*/
function () {
  function StyleSheet(styles, options) {
    this.options = void 0;
    this.deployed = void 0;
    this.attached = void 0;
    this.rules = void 0;
    this.renderer = void 0;
    this.classes = void 0;
    this.keyframes = void 0;
    this.queue = void 0;
    this.attached = false;
    this.deployed = false;
    this.classes = {};
    this.keyframes = {};
    this.options = _extends({}, options, {
      sheet: this,
      parent: this,
      classes: this.classes,
      keyframes: this.keyframes
    });

    if (options.Renderer) {
      this.renderer = new options.Renderer(this);
    }

    this.rules = new RuleList(this.options);

    for (var name in styles) {
      this.rules.add(name, styles[name]);
    }

    this.rules.process();
  }
  /**
   * Attach renderable to the render tree.
   */


  var _proto = StyleSheet.prototype;

  _proto.attach = function attach() {
    if (this.attached) return this;
    if (this.renderer) this.renderer.attach();
    this.attached = true; // Order is important, because we can't use insertRule API if style element is not attached.

    if (!this.deployed) this.deploy();
    return this;
  }
  /**
   * Remove renderable from render tree.
   */
  ;

  _proto.detach = function detach() {
    if (!this.attached) return this;
    if (this.renderer) this.renderer.detach();
    this.attached = false;
    return this;
  }
  /**
   * Add a rule to the current stylesheet.
   * Will insert a rule also after the stylesheet has been rendered first time.
   */
  ;

  _proto.addRule = function addRule(name, decl, options) {
    var queue = this.queue; // Plugins can create rules.
    // In order to preserve the right order, we need to queue all `.addRule` calls,
    // which happen after the first `rules.add()` call.

    if (this.attached && !queue) this.queue = [];
    var rule = this.rules.add(name, decl, options);
    if (!rule) return null;
    this.options.jss.plugins.onProcessRule(rule);

    if (this.attached) {
      if (!this.deployed) return rule; // Don't insert rule directly if there is no stringified version yet.
      // It will be inserted all together when .attach is called.

      if (queue) queue.push(rule);else {
        this.insertRule(rule);

        if (this.queue) {
          this.queue.forEach(this.insertRule, this);
          this.queue = undefined;
        }
      }
      return rule;
    } // We can't add rules to a detached style node.
    // We will redeploy the sheet once user will attach it.


    this.deployed = false;
    return rule;
  }
  /**
   * Insert rule into the StyleSheet
   */
  ;

  _proto.insertRule = function insertRule(rule) {
    if (this.renderer) {
      this.renderer.insertRule(rule);
    }
  }
  /**
   * Create and add rules.
   * Will render also after Style Sheet was rendered the first time.
   */
  ;

  _proto.addRules = function addRules(styles, options) {
    var added = [];

    for (var name in styles) {
      var rule = this.addRule(name, styles[name], options);
      if (rule) added.push(rule);
    }

    return added;
  }
  /**
   * Get a rule by name.
   */
  ;

  _proto.getRule = function getRule(name) {
    return this.rules.get(name);
  }
  /**
   * Delete a rule by name.
   * Returns `true`: if rule has been deleted from the DOM.
   */
  ;

  _proto.deleteRule = function deleteRule(name) {
    var rule = typeof name === 'object' ? name : this.rules.get(name);
    if (!rule) return false;
    this.rules.remove(rule);

    if (this.attached && rule.renderable && this.renderer) {
      return this.renderer.deleteRule(rule.renderable);
    }

    return true;
  }
  /**
   * Get index of a rule.
   */
  ;

  _proto.indexOf = function indexOf(rule) {
    return this.rules.indexOf(rule);
  }
  /**
   * Deploy pure CSS string to a renderable.
   */
  ;

  _proto.deploy = function deploy() {
    if (this.renderer) this.renderer.deploy();
    this.deployed = true;
    return this;
  }
  /**
   * Update the function values with a new data.
   */
  ;

  _proto.update = function update() {
    var _this$rules;

    (_this$rules = this.rules).update.apply(_this$rules, arguments);

    return this;
  }
  /**
   * Updates a single rule.
   */
  ;

  _proto.updateOne = function updateOne(rule, data, options) {
    this.rules.updateOne(rule, data, options);
    return this;
  }
  /**
   * Convert rules to a CSS string.
   */
  ;

  _proto.toString = function toString(options) {
    return this.rules.toString(options);
  };

  return StyleSheet;
}();

var PluginsRegistry =
/*#__PURE__*/
function () {
  function PluginsRegistry() {
    this.plugins = {
      internal: [],
      external: []
    };
    this.registry = void 0;
  }

  var _proto = PluginsRegistry.prototype;

  /**
   * Call `onCreateRule` hooks and return an object if returned by a hook.
   */
  _proto.onCreateRule = function onCreateRule(name, decl, options) {
    for (var i = 0; i < this.registry.onCreateRule.length; i++) {
      var rule = this.registry.onCreateRule[i](name, decl, options);
      if (rule) return rule;
    }

    return null;
  }
  /**
   * Call `onProcessRule` hooks.
   */
  ;

  _proto.onProcessRule = function onProcessRule(rule) {
    if (rule.isProcessed) return;
    var sheet = rule.options.sheet;

    for (var i = 0; i < this.registry.onProcessRule.length; i++) {
      this.registry.onProcessRule[i](rule, sheet);
    }

    if (rule.style) this.onProcessStyle(rule.style, rule, sheet);
    rule.isProcessed = true;
  }
  /**
   * Call `onProcessStyle` hooks.
   */
  ;

  _proto.onProcessStyle = function onProcessStyle(style, rule, sheet) {
    for (var i = 0; i < this.registry.onProcessStyle.length; i++) {
      // $FlowFixMe
      rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
    }
  }
  /**
   * Call `onProcessSheet` hooks.
   */
  ;

  _proto.onProcessSheet = function onProcessSheet(sheet) {
    for (var i = 0; i < this.registry.onProcessSheet.length; i++) {
      this.registry.onProcessSheet[i](sheet);
    }
  }
  /**
   * Call `onUpdate` hooks.
   */
  ;

  _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
    for (var i = 0; i < this.registry.onUpdate.length; i++) {
      this.registry.onUpdate[i](data, rule, sheet, options);
    }
  }
  /**
   * Call `onChangeValue` hooks.
   */
  ;

  _proto.onChangeValue = function onChangeValue(value, prop, rule) {
    var processedValue = value;

    for (var i = 0; i < this.registry.onChangeValue.length; i++) {
      processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
    }

    return processedValue;
  }
  /**
   * Register a plugin.
   */
  ;

  _proto.use = function use(newPlugin, options) {
    if (options === void 0) {
      options = {
        queue: 'external'
      };
    }

    var plugins = this.plugins[options.queue]; // Avoids applying same plugin twice, at least based on ref.

    if (plugins.indexOf(newPlugin) !== -1) {
      return;
    }

    plugins.push(newPlugin);
    this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function (registry, plugin) {
      for (var name in plugin) {
        if (name in registry) {
          registry[name].push(plugin[name]);
        } else {
          "development" !== "production" ? warning(false, "[JSS] Unknown hook \"" + name + "\".") : void 0;
        }
      }

      return registry;
    }, {
      onCreateRule: [],
      onProcessRule: [],
      onProcessStyle: [],
      onProcessSheet: [],
      onChangeValue: [],
      onUpdate: []
    });
  };

  return PluginsRegistry;
}();

/**
 * Sheets registry to access them all at one place.
 */
var SheetsRegistry =
/*#__PURE__*/
function () {
  function SheetsRegistry() {
    this.registry = [];
  }

  var _proto = SheetsRegistry.prototype;

  /**
   * Register a Style Sheet.
   */
  _proto.add = function add(sheet) {
    var registry = this.registry;
    var index = sheet.options.index;
    if (registry.indexOf(sheet) !== -1) return;

    if (registry.length === 0 || index >= this.index) {
      registry.push(sheet);
      return;
    } // Find a position.


    for (var i = 0; i < registry.length; i++) {
      if (registry[i].options.index > index) {
        registry.splice(i, 0, sheet);
        return;
      }
    }
  }
  /**
   * Reset the registry.
   */
  ;

  _proto.reset = function reset() {
    this.registry = [];
  }
  /**
   * Remove a Style Sheet.
   */
  ;

  _proto.remove = function remove(sheet) {
    var index = this.registry.indexOf(sheet);
    this.registry.splice(index, 1);
  }
  /**
   * Convert all attached sheets to a CSS string.
   */
  ;

  _proto.toString = function toString(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        attached = _ref.attached,
        options = _objectWithoutPropertiesLoose(_ref, ["attached"]);

    var css = '';

    for (var i = 0; i < this.registry.length; i++) {
      var sheet = this.registry[i];

      if (attached != null && sheet.attached !== attached) {
        continue;
      }

      if (css) css += '\n';
      css += sheet.toString(options);
    }

    return css;
  };

  _createClass(SheetsRegistry, [{
    key: "index",

    /**
     * Current highest index number.
     */
    get: function get() {
      return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
    }
  }]);

  return SheetsRegistry;
}();

/**
 * This is a global sheets registry. Only DomRenderer will add sheets to it.
 * On the server one should use an own SheetsRegistry instance and add the
 * sheets to it, because you need to make sure to create a new registry for
 * each request in order to not leak sheets across requests.
 */

var sheets = new SheetsRegistry();

/* eslint-disable */
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var globalThis = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();

var ns = '2f1acc6c3a606b082e5eef5e54414ffb';
if (globalThis[ns] == null) globalThis[ns] = 0; // Bundle may contain multiple JSS versions at the same time. In order to identify
// the current version with just one short number and use it for classes generation
// we use a counter. Also it is more accurate, because user can manually reevaluate
// the module.

var moduleId = globalThis[ns]++;

var maxRules = 1e10;

/**
 * Returns a function which generates unique class names based on counters.
 * When new generator function is created, rule counter is reseted.
 * We need to reset the rule counter for SSR for each request.
 */
var createGenerateId = function createGenerateId(options) {
  if (options === void 0) {
    options = {};
  }

  var ruleCounter = 0;
  return function (rule, sheet) {
    ruleCounter += 1;

    if (ruleCounter > maxRules) {
      "development" !== "production" ? warning(false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".") : void 0;
    }

    var jssId = '';
    var prefix = '';

    if (sheet) {
      if (sheet.options.classNamePrefix) {
        prefix = sheet.options.classNamePrefix;
      }

      if (sheet.options.jss.id != null) {
        jssId = String(sheet.options.jss.id);
      }
    }

    if (options.minify) {
      // Using "c" because a number can't be the first char in a class name.
      return "" + (prefix || 'c') + moduleId + jssId + ruleCounter;
    }

    return prefix + rule.key + "-" + moduleId + (jssId ? "-" + jssId : '') + "-" + ruleCounter;
  };
};

/**
 * Cache the value from the first time a function is called.
 */
var memoize = function memoize(fn) {
  var value;
  return function () {
    if (!value) value = fn();
    return value;
  };
};
/**
 * Get a style property value.
 */


function getPropertyValue(cssRule, prop) {
  try {
    // Support CSSTOM.
    if (cssRule.attributeStyleMap) {
      return cssRule.attributeStyleMap.get(prop);
    }

    return cssRule.style.getPropertyValue(prop);
  } catch (err) {
    // IE may throw if property is unknown.
    return '';
  }
}
/**
 * Set a style property.
 */


function setProperty(cssRule, prop, value) {
  try {
    var cssValue = value;

    if (Array.isArray(value)) {
      cssValue = toCssValue(value, true);

      if (value[value.length - 1] === '!important') {
        cssRule.style.setProperty(prop, cssValue, 'important');
        return true;
      }
    } // Support CSSTOM.


    if (cssRule.attributeStyleMap) {
      cssRule.attributeStyleMap.set(prop, cssValue);
    } else {
      cssRule.style.setProperty(prop, cssValue);
    }
  } catch (err) {
    // IE may throw if property is unknown.
    return false;
  }

  return true;
}
/**
 * Remove a style property.
 */


function removeProperty(cssRule, prop) {
  try {
    // Support CSSTOM.
    if (cssRule.attributeStyleMap) {
      cssRule.attributeStyleMap.delete(prop);
    } else {
      cssRule.style.removeProperty(prop);
    }
  } catch (err) {
    "development" !== "production" ? warning(false, "[JSS] DOMException \"" + err.message + "\" was thrown. Tried to remove property \"" + prop + "\".") : void 0;
  }
}
/**
 * Set the selector.
 */


function setSelector(cssRule, selectorText) {
  cssRule.selectorText = selectorText; // Return false if setter was not successful.
  // Currently works in chrome only.

  return cssRule.selectorText === selectorText;
}
/**
 * Gets the `head` element upon the first call and caches it.
 * We assume it can't be null.
 */


var getHead = memoize(function () {
  return document.querySelector('head');
});
/**
 * Find attached sheet with an index higher than the passed one.
 */

function findHigherSheet(registry, options) {
  for (var i = 0; i < registry.length; i++) {
    var sheet = registry[i];

    if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
      return sheet;
    }
  }

  return null;
}
/**
 * Find attached sheet with the highest index.
 */


function findHighestSheet(registry, options) {
  for (var i = registry.length - 1; i >= 0; i--) {
    var sheet = registry[i];

    if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
      return sheet;
    }
  }

  return null;
}
/**
 * Find a comment with "jss" inside.
 */


function findCommentNode(text) {
  var head = getHead();

  for (var i = 0; i < head.childNodes.length; i++) {
    var node = head.childNodes[i];

    if (node.nodeType === 8 && node.nodeValue.trim() === text) {
      return node;
    }
  }

  return null;
}

/**
 * Find a node before which we can insert the sheet.
 */
function findPrevNode(options) {
  var registry = sheets.registry;

  if (registry.length > 0) {
    // Try to insert before the next higher sheet.
    var sheet = findHigherSheet(registry, options);

    if (sheet && sheet.renderer) {
      return {
        parent: sheet.renderer.element.parentNode,
        node: sheet.renderer.element
      };
    } // Otherwise insert after the last attached.


    sheet = findHighestSheet(registry, options);

    if (sheet && sheet.renderer) {
      return {
        parent: sheet.renderer.element.parentNode,
        node: sheet.renderer.element.nextSibling
      };
    }
  } // Try to find a comment placeholder if registry is empty.


  var insertionPoint = options.insertionPoint;

  if (insertionPoint && typeof insertionPoint === 'string') {
    var comment = findCommentNode(insertionPoint);

    if (comment) {
      return {
        parent: comment.parentNode,
        node: comment.nextSibling
      };
    } // If user specifies an insertion point and it can't be found in the document -
    // bad specificity issues may appear.


    "development" !== "production" ? warning(false, "[JSS] Insertion point \"" + insertionPoint + "\" not found.") : void 0;
  }

  return false;
}
/**
 * Insert style element into the DOM.
 */


function insertStyle(style, options) {
  var insertionPoint = options.insertionPoint;
  var nextNode = findPrevNode(options);

  if (nextNode !== false && nextNode.parent) {
    nextNode.parent.insertBefore(style, nextNode.node);
    return;
  } // Works with iframes and any node types.


  if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
    // https://stackoverflow.com/questions/41328728/force-casting-in-flow
    var insertionPointElement = insertionPoint;
    var parentNode = insertionPointElement.parentNode;
    if (parentNode) parentNode.insertBefore(style, insertionPointElement.nextSibling);else "development" !== "production" ? warning(false, '[JSS] Insertion point is not in the DOM.') : void 0;
    return;
  }

  getHead().appendChild(style);
}
/**
 * Read jss nonce setting from the page if the user has set it.
 */


var getNonce = memoize(function () {
  var node = document.querySelector('meta[property="csp-nonce"]');
  return node ? node.getAttribute('content') : null;
});

var _insertRule = function insertRule(container, rule, index) {
  var maxIndex = container.cssRules.length; // In case previous insertion fails, passed index might be wrong

  if (index === undefined || index > maxIndex) {
    // eslint-disable-next-line no-param-reassign
    index = maxIndex;
  }

  try {
    if ('insertRule' in container) {
      var c = container;
      c.insertRule(rule, index);
    } // Keyframes rule.
    else if ('appendRule' in container) {
        var _c = container;

        _c.appendRule(rule);
      }
  } catch (err) {
    "development" !== "production" ? warning(false, "[JSS] " + err.message) : void 0;
    return false;
  }

  return container.cssRules[index];
};

var createStyle = function createStyle() {
  var el = document.createElement('style'); // Without it, IE will have a broken source order specificity if we
  // insert rules after we insert the style tag.
  // It seems to kick-off the source order specificity algorithm.

  el.textContent = '\n';
  return el;
};

var DomRenderer =
/*#__PURE__*/
function () {
  // HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696
  function DomRenderer(sheet) {
    this.getPropertyValue = getPropertyValue;
    this.setProperty = setProperty;
    this.removeProperty = removeProperty;
    this.setSelector = setSelector;
    this.element = void 0;
    this.sheet = void 0;
    this.hasInsertedRules = false;
    // There is no sheet when the renderer is used from a standalone StyleRule.
    if (sheet) sheets.add(sheet);
    this.sheet = sheet;

    var _ref = this.sheet ? this.sheet.options : {},
        media = _ref.media,
        meta = _ref.meta,
        element = _ref.element;

    this.element = element || createStyle();
    this.element.setAttribute('data-jss', '');
    if (media) this.element.setAttribute('media', media);
    if (meta) this.element.setAttribute('data-meta', meta);
    var nonce = getNonce();
    if (nonce) this.element.setAttribute('nonce', nonce);
  }
  /**
   * Insert style element into render tree.
   */


  var _proto = DomRenderer.prototype;

  _proto.attach = function attach() {
    // In the case the element node is external and it is already in the DOM.
    if (this.element.parentNode || !this.sheet) return;
    insertStyle(this.element, this.sheet.options); // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
    // most browsers create a new CSSStyleSheet, except of all IEs.

    var deployed = Boolean(this.sheet && this.sheet.deployed);

    if (this.hasInsertedRules && deployed) {
      this.hasInsertedRules = false;
      this.deploy();
    }
  }
  /**
   * Remove style element from render tree.
   */
  ;

  _proto.detach = function detach() {
    var parentNode = this.element.parentNode;
    if (parentNode) parentNode.removeChild(this.element);
  }
  /**
   * Inject CSS string into element.
   */
  ;

  _proto.deploy = function deploy() {
    var sheet = this.sheet;
    if (!sheet) return;

    if (sheet.options.link) {
      this.insertRules(sheet.rules);
      return;
    }

    this.element.textContent = "\n" + sheet.toString() + "\n";
  }
  /**
   * Insert RuleList into an element.
   */
  ;

  _proto.insertRules = function insertRules(rules, nativeParent) {
    for (var i = 0; i < rules.index.length; i++) {
      this.insertRule(rules.index[i], i, nativeParent);
    }
  }
  /**
   * Insert a rule into element.
   */
  ;

  _proto.insertRule = function insertRule(rule, index, nativeParent) {
    if (nativeParent === void 0) {
      nativeParent = this.element.sheet;
    }

    if (rule.rules) {
      var parent = rule;
      var latestNativeParent = nativeParent;

      if (rule.type === 'conditional' || rule.type === 'keyframes') {
        // We need to render the container without children first.
        latestNativeParent = _insertRule(nativeParent, parent.toString({
          children: false
        }), index);

        if (latestNativeParent === false) {
          return false;
        }
      }

      this.insertRules(parent.rules, latestNativeParent);
      return latestNativeParent;
    } // IE keeps the CSSStyleSheet after style node has been reattached,
    // so we need to check if the `renderable` reference the right style sheet and not
    // rerender those rules.


    if (rule.renderable && rule.renderable.parentStyleSheet === this.element.sheet) {
      return rule.renderable;
    }

    var ruleStr = rule.toString();
    if (!ruleStr) return false;

    var nativeRule = _insertRule(nativeParent, ruleStr, index);

    if (nativeRule === false) {
      return false;
    }

    this.hasInsertedRules = true;
    rule.renderable = nativeRule;
    return nativeRule;
  }
  /**
   * Delete a rule.
   */
  ;

  _proto.deleteRule = function deleteRule(cssRule) {
    var sheet = this.element.sheet;
    var index = this.indexOf(cssRule);
    if (index === -1) return false;
    sheet.deleteRule(index);
    return true;
  }
  /**
   * Get index of a CSS Rule.
   */
  ;

  _proto.indexOf = function indexOf(cssRule) {
    var cssRules = this.element.sheet.cssRules;

    for (var index = 0; index < cssRules.length; index++) {
      if (cssRule === cssRules[index]) return index;
    }

    return -1;
  }
  /**
   * Generate a new CSS rule and replace the existing one.
   *
   * Only used for some old browsers because they can't set a selector.
   */
  ;

  _proto.replaceRule = function replaceRule(cssRule, rule) {
    var index = this.indexOf(cssRule);
    if (index === -1) return false;
    this.element.sheet.deleteRule(index);
    return this.insertRule(rule, index);
  }
  /**
   * Get all rules elements.
   */
  ;

  _proto.getRules = function getRules() {
    return this.element.sheet.cssRules;
  };

  return DomRenderer;
}();

var instanceCounter = 0;

var Jss =
/*#__PURE__*/
function () {
  function Jss(options) {
    this.id = instanceCounter++;
    this.version = "10.3.0";
    this.plugins = new PluginsRegistry();
    this.options = {
      id: {
        minify: false
      },
      createGenerateId: createGenerateId,
      Renderer: isInBrowser ? DomRenderer : null,
      plugins: []
    };
    this.generateId = createGenerateId({
      minify: false
    });

    for (var i = 0; i < plugins.length; i++) {
      this.plugins.use(plugins[i], {
        queue: 'internal'
      });
    }

    this.setup(options);
  }
  /**
   * Prepares various options, applies plugins.
   * Should not be used twice on the same instance, because there is no plugins
   * deduplication logic.
   */


  var _proto = Jss.prototype;

  _proto.setup = function setup(options) {
    if (options === void 0) {
      options = {};
    }

    if (options.createGenerateId) {
      this.options.createGenerateId = options.createGenerateId;
    }

    if (options.id) {
      this.options.id = _extends({}, this.options.id, options.id);
    }

    if (options.createGenerateId || options.id) {
      this.generateId = this.options.createGenerateId(this.options.id);
    }

    if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;

    if ('Renderer' in options) {
      this.options.Renderer = options.Renderer;
    } // eslint-disable-next-line prefer-spread


    if (options.plugins) this.use.apply(this, options.plugins);
    return this;
  }
  /**
   * Create a Style Sheet.
   */
  ;

  _proto.createStyleSheet = function createStyleSheet(styles, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        index = _options.index;

    if (typeof index !== 'number') {
      index = sheets.index === 0 ? 0 : sheets.index + 1;
    }

    var sheet = new StyleSheet(styles, _extends({}, options, {
      jss: this,
      generateId: options.generateId || this.generateId,
      insertionPoint: this.options.insertionPoint,
      Renderer: this.options.Renderer,
      index: index
    }));
    this.plugins.onProcessSheet(sheet);
    return sheet;
  }
  /**
   * Detach the Style Sheet and remove it from the registry.
   */
  ;

  _proto.removeStyleSheet = function removeStyleSheet(sheet) {
    sheet.detach();
    sheets.remove(sheet);
    return this;
  }
  /**
   * Create a rule without a Style Sheet.
   * [Deprecated] will be removed in the next major version.
   */
  ;

  _proto.createRule = function createRule$1(name, style, options) {
    if (style === void 0) {
      style = {};
    }

    if (options === void 0) {
      options = {};
    }

    // Enable rule without name for inline styles.
    if (typeof name === 'object') {
      return this.createRule(undefined, name, style);
    }

    var ruleOptions = _extends({}, options, {
      name: name,
      jss: this,
      Renderer: this.options.Renderer
    });

    if (!ruleOptions.generateId) ruleOptions.generateId = this.generateId;
    if (!ruleOptions.classes) ruleOptions.classes = {};
    if (!ruleOptions.keyframes) ruleOptions.keyframes = {};

    var rule = createRule(name, style, ruleOptions);

    if (rule) this.plugins.onProcessRule(rule);
    return rule;
  }
  /**
   * Register plugin. Passed function will be invoked with a rule instance.
   */
  ;

  _proto.use = function use() {
    var _this = this;

    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }

    plugins.forEach(function (plugin) {
      _this.plugins.use(plugin);
    });
    return this;
  };

  return Jss;
}();

/**
 * Extracts a styles object with only props that contain function values.
 */
function getDynamicStyles(styles) {
  var to = null;

  for (var key in styles) {
    var value = styles[key];
    var type = typeof value;

    if (type === 'function') {
      if (!to) to = {};
      to[key] = value;
    } else if (type === 'object' && value !== null && !Array.isArray(value)) {
      var extracted = getDynamicStyles(value);

      if (extracted) {
        if (!to) to = {};
        to[key] = extracted;
      }
    }
  }

  return to;
}

/**
 * SheetsManager is like a WeakMap which is designed to count StyleSheet
 * instances and attach/detach automatically.
 */
var SheetsManager =
/*#__PURE__*/
function () {
  function SheetsManager() {
    this.length = 0;
    this.sheets = new WeakMap();
  }

  var _proto = SheetsManager.prototype;

  _proto.get = function get(key) {
    var entry = this.sheets.get(key);
    return entry && entry.sheet;
  };

  _proto.add = function add(key, sheet) {
    if (this.sheets.has(key)) return;
    this.length++;
    this.sheets.set(key, {
      sheet: sheet,
      refs: 0
    });
  };

  _proto.manage = function manage(key) {
    var entry = this.sheets.get(key);

    if (entry) {
      if (entry.refs === 0) {
        entry.sheet.attach();
      }

      entry.refs++;
      return entry.sheet;
    }

    warning(false, "[JSS] SheetsManager: can't find sheet to manage");
    return undefined;
  };

  _proto.unmanage = function unmanage(key) {
    var entry = this.sheets.get(key);

    if (entry) {
      if (entry.refs > 0) {
        entry.refs--;
        if (entry.refs === 0) entry.sheet.detach();
      }
    } else {
      warning(false, "SheetsManager: can't find sheet to unmanage");
    }
  };

  _createClass(SheetsManager, [{
    key: "size",
    get: function get() {
      return this.length;
    }
  }]);

  return SheetsManager;
}();

/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */

/**
 * Export a constant indicating if this browser has CSSTOM support.
 * https://developers.google.com/web/updates/2018/03/cssom
 */
var hasCSSTOMSupport = typeof CSS !== 'undefined' && CSS && 'number' in CSS;
/**
 * Creates a new instance of Jss.
 */

var create = function create(options) {
  return new Jss(options);
};
/**
 * A global Jss instance.
 */

var index = create();

exports.RuleList = RuleList;
exports.SheetsManager = SheetsManager;
exports.SheetsRegistry = SheetsRegistry;
exports.create = create;
exports.createGenerateId = createGenerateId;
exports.createRule = createRule;
exports.default = index;
exports.getDynamicStyles = getDynamicStyles;
exports.hasCSSTOMSupport = hasCSSTOMSupport;
exports.sheets = sheets;
exports.toCssValue = toCssValue;

      };
    };
  }
}, {package:"jss",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss/dist/jss.cjs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/useTheme/ThemeContext.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/useTheme/ThemeContext.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var ThemeContext = _react.default.createContext(null);

if ("development" !== 'production') {
  ThemeContext.displayName = 'ThemeContext';
}

var _default = ThemeContext;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/styles",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/useTheme/ThemeContext.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/makeStyles/multiKeyStore.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/makeStyles/multiKeyStore.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Used https://github.com/thinkloop/multi-key-cache as inspiration
var multiKeyStore = {
  set: function set(cache, key1, key2, value) {
    var subCache = cache.get(key1);

    if (!subCache) {
      subCache = new Map();
      cache.set(key1, subCache);
    }

    subCache.set(key2, value);
  },
  get: function get(cache, key1, key2) {
    var subCache = cache.get(key1);
    return subCache ? subCache.get(key2) : undefined;
  },
  delete: function _delete(cache, key1, key2) {
    var subCache = cache.get(key1);
    subCache.delete(key2);
  }
};
var _default = multiKeyStore;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/styles",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/makeStyles/multiKeyStore.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/makeStyles/indexCounter.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/makeStyles/indexCounter.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.increment = increment;

/* eslint-disable import/prefer-default-export */
// Global index counter to preserve source order.
// We create the style sheet during the creation of the component,
// children are handled after the parents, so the order of style elements would be parent->child.
// It is a problem though when a parent passes a className
// which needs to override any child's styles.
// StyleSheet of the child has a higher specificity, because of the source order.
// So our solution is to render sheets them in the reverse order child->sheet, so
// that parent has a higher specificity.
var indexCounter = -1e9;

function increment() {
  indexCounter += 1;

  if ("development" !== 'production') {
    if (indexCounter >= 0) {
      console.warn(['Material-UI: You might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join('\n'));
    }
  }

  return indexCounter;
}
      };
    };
  }
}, {package:"@material-ui/styles",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/makeStyles/indexCounter.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/noopTheme.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/noopTheme.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// We use the same empty object to ref count the styles that don't need a theme object.
var noopTheme = {};
var _default = noopTheme;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/styles",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/noopTheme.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/index.js", {"./getStylesCreator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/getStylesCreator.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _getStylesCreator.default;
  }
});

var _getStylesCreator = _interopRequireDefault(require("./getStylesCreator"));
      };
    };
  }
}, {package:"@material-ui/styles",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.cjs.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.cjs.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Sort props by length.
 */
function jssPropsSort() {
  var sort = function sort(prop0, prop1) {
    if (prop0.length === prop1.length) {
      return prop0 > prop1 ? 1 : -1;
    }

    return prop0.length - prop1.length;
  };

  return {
    onProcessStyle: function onProcessStyle(style, rule) {
      if (rule.type !== 'style') return style;
      var newStyle = {};
      var props = Object.keys(style).sort(sort);

      for (var i = 0; i < props.length; i++) {
        newStyle[props[i]] = style[props[i]];
      }

      return newStyle;
    }
  };
}

exports.default = jssPropsSort;

      };
    };
  }
}, {package:"jss-plugin-props-sort",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.cjs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.cjs.js", {"jss":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss/dist/jss.cjs.js","tiny-warning":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/tiny-warning/dist/tiny-warning.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.cjs.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var warning = _interopDefault(require('tiny-warning'));
var jss = require('jss');

var now = Date.now();
var fnValuesNs = "fnValues" + now;
var fnRuleNs = "fnStyle" + ++now;
function functionPlugin() {
  return {
    onCreateRule: function onCreateRule(name, decl, options) {
      if (typeof decl !== 'function') return null;
      var rule = jss.createRule(name, {}, options);
      rule[fnRuleNs] = decl;
      return rule;
    },
    onProcessStyle: function onProcessStyle(style, rule) {
      // We need to extract function values from the declaration, so that we can keep core unaware of them.
      // We need to do that only once.
      // We don't need to extract functions on each style update, since this can happen only once.
      // We don't support function values inside of function rules.
      if (fnValuesNs in rule || fnRuleNs in rule) return style;
      var fnValues = {};

      for (var prop in style) {
        var value = style[prop];
        if (typeof value !== 'function') continue;
        delete style[prop];
        fnValues[prop] = value;
      } // $FlowFixMe


      rule[fnValuesNs] = fnValues;
      return style;
    },
    onUpdate: function onUpdate(data, rule, sheet, options) {
      var styleRule = rule;
      var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object
      // will be returned from that function.

      if (fnRule) {
        // Empty object will remove all currently defined props
        // in case function rule returns a falsy value.
        styleRule.style = fnRule(data) || {};

        if ("development" === 'development') {
          for (var prop in styleRule.style) {
            if (typeof styleRule.style[prop] === 'function') {
              "development" !== "production" ? warning(false, '[JSS] Function values inside function rules are not supported.') : void 0;
              break;
            }
          }
        }
      }

      var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.

      if (fnValues) {
        for (var _prop in fnValues) {
          styleRule.prop(_prop, fnValues[_prop](data), options);
        }
      }
    }
  };
}

exports.default = functionPlugin;

      };
    };
  }
}, {package:"jss-plugin-rule-value-function",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.cjs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.cjs.js", {"jss":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss/dist/jss.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.cjs.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jss = require('jss');

var px = jss.hasCSSTOMSupport && CSS ? CSS.px : 'px';
var ms = jss.hasCSSTOMSupport && CSS ? CSS.ms : 'ms';
var percent = jss.hasCSSTOMSupport && CSS ? CSS.percent : '%';
/**
 * Generated jss-plugin-default-unit CSS property units
 *
 * @type object
 */

var defaultUnits = {
  // Animation properties
  'animation-delay': ms,
  'animation-duration': ms,
  // Background properties
  'background-position': px,
  'background-position-x': px,
  'background-position-y': px,
  'background-size': px,
  // Border Properties
  border: px,
  'border-bottom': px,
  'border-bottom-left-radius': px,
  'border-bottom-right-radius': px,
  'border-bottom-width': px,
  'border-left': px,
  'border-left-width': px,
  'border-radius': px,
  'border-right': px,
  'border-right-width': px,
  'border-top': px,
  'border-top-left-radius': px,
  'border-top-right-radius': px,
  'border-top-width': px,
  'border-width': px,
  // Margin properties
  margin: px,
  'margin-bottom': px,
  'margin-left': px,
  'margin-right': px,
  'margin-top': px,
  // Padding properties
  padding: px,
  'padding-bottom': px,
  'padding-left': px,
  'padding-right': px,
  'padding-top': px,
  // Mask properties
  'mask-position-x': px,
  'mask-position-y': px,
  'mask-size': px,
  // Width and height properties
  height: px,
  width: px,
  'min-height': px,
  'max-height': px,
  'min-width': px,
  'max-width': px,
  // Position properties
  bottom: px,
  left: px,
  top: px,
  right: px,
  // Shadow properties
  'box-shadow': px,
  'text-shadow': px,
  // Column properties
  'column-gap': px,
  'column-rule': px,
  'column-rule-width': px,
  'column-width': px,
  // Font and text properties
  'font-size': px,
  'font-size-delta': px,
  'letter-spacing': px,
  'text-indent': px,
  'text-stroke': px,
  'text-stroke-width': px,
  'word-spacing': px,
  // Motion properties
  motion: px,
  'motion-offset': px,
  // Outline properties
  outline: px,
  'outline-offset': px,
  'outline-width': px,
  // Perspective properties
  perspective: px,
  'perspective-origin-x': percent,
  'perspective-origin-y': percent,
  // Transform properties
  'transform-origin': percent,
  'transform-origin-x': percent,
  'transform-origin-y': percent,
  'transform-origin-z': percent,
  // Transition properties
  'transition-delay': ms,
  'transition-duration': ms,
  // Alignment properties
  'vertical-align': px,
  'flex-basis': px,
  // Some random properties
  'shape-margin': px,
  size: px,
  // Grid properties
  grid: px,
  'grid-gap': px,
  'grid-row-gap': px,
  'grid-column-gap': px,
  'grid-template-rows': px,
  'grid-template-columns': px,
  'grid-auto-rows': px,
  'grid-auto-columns': px,
  // Not existing properties.
  // Used to avoid issues with jss-plugin-expand integration.
  'box-shadow-x': px,
  'box-shadow-y': px,
  'box-shadow-blur': px,
  'box-shadow-spread': px,
  'font-line-height': px,
  'text-shadow-x': px,
  'text-shadow-y': px,
  'text-shadow-blur': px
};

/**
 * Clones the object and adds a camel cased property version.
 */
function addCamelCasedVersion(obj) {
  var regExp = /(-[a-z])/g;

  var replace = function replace(str) {
    return str[1].toUpperCase();
  };

  var newObj = {};

  for (var _key in obj) {
    newObj[_key] = obj[_key];
    newObj[_key.replace(regExp, replace)] = obj[_key];
  }

  return newObj;
}

var units = addCamelCasedVersion(defaultUnits);
/**
 * Recursive deep style passing function
 */

function iterate(prop, value, options) {
  if (!value) return value;

  if (Array.isArray(value)) {
    for (var i = 0; i < value.length; i++) {
      value[i] = iterate(prop, value[i], options);
    }
  } else if (typeof value === 'object') {
    if (prop === 'fallbacks') {
      for (var innerProp in value) {
        value[innerProp] = iterate(innerProp, value[innerProp], options);
      }
    } else {
      for (var _innerProp in value) {
        value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
      }
    }
  } else if (typeof value === 'number') {
    var unit = options[prop] || units[prop];

    if (unit) {
      return typeof unit === 'function' ? unit(value).toString() : "" + value + unit;
    }

    return value.toString();
  }

  return value;
}
/**
 * Add unit to numeric values.
 */


function defaultUnit(options) {
  if (options === void 0) {
    options = {};
  }

  var camelCasedOptions = addCamelCasedVersion(options);

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;

    for (var prop in style) {
      style[prop] = iterate(prop, style[prop], camelCasedOptions);
    }

    return style;
  }

  function onChangeValue(value, prop) {
    return iterate(prop, value, camelCasedOptions);
  }

  return {
    onProcessStyle: onProcessStyle,
    onChangeValue: onChangeValue
  };
}

exports.default = defaultUnit;

      };
    };
  }
}, {package:"jss-plugin-default-unit",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.cjs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.cjs.js", {"hyphenate-style-name":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/hyphenate-style-name/index.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.cjs.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var hyphenate = _interopDefault(require('hyphenate-style-name'));

/**
 * Convert camel cased property names to dash separated.
 *
 * @param {Object} style
 * @return {Object}
 */

function convertCase(style) {
  var converted = {};

  for (var prop in style) {
    var key = prop.indexOf('--') === 0 ? prop : hyphenate(prop);
    converted[key] = style[prop];
  }

  if (style.fallbacks) {
    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);
  }

  return converted;
}
/**
 * Allow camel cased property names by converting them back to dasherized.
 *
 * @param {Rule} rule
 */


function camelCase() {
  function onProcessStyle(style) {
    if (Array.isArray(style)) {
      // Handle rules like @font-face, which can have multiple styles in an array
      for (var index = 0; index < style.length; index++) {
        style[index] = convertCase(style[index]);
      }

      return style;
    }

    return convertCase(style);
  }

  function onChangeValue(value, prop, rule) {
    if (prop.indexOf('--') === 0) {
      return value;
    }

    var hyphenatedProp = hyphenate(prop); // There was no camel case in place

    if (prop === hyphenatedProp) return value;
    rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.

    return null;
  }

  return {
    onProcessStyle: onProcessStyle,
    onChangeValue: onChangeValue
  };
}

exports.default = camelCase;

      };
    };
  }
}, {package:"jss-plugin-camel-case",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.cjs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-global/dist/jss-plugin-global.cjs.js", {"@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","jss":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss/dist/jss.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-global/dist/jss-plugin-global.cjs.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var jss = require('jss');

var at = '@global';
var atPrefix = '@global ';

var GlobalContainerRule =
/*#__PURE__*/
function () {
  function GlobalContainerRule(key, styles, options) {
    this.type = 'global';
    this.at = at;
    this.rules = void 0;
    this.options = void 0;
    this.key = void 0;
    this.isProcessed = false;
    this.key = key;
    this.options = options;
    this.rules = new jss.RuleList(_extends({}, options, {
      parent: this
    }));

    for (var selector in styles) {
      this.rules.add(selector, styles[selector]);
    }

    this.rules.process();
  }
  /**
   * Get a rule.
   */


  var _proto = GlobalContainerRule.prototype;

  _proto.getRule = function getRule(name) {
    return this.rules.get(name);
  }
  /**
   * Create and register rule, run plugins.
   */
  ;

  _proto.addRule = function addRule(name, style, options) {
    var rule = this.rules.add(name, style, options);
    this.options.jss.plugins.onProcessRule(rule);
    return rule;
  }
  /**
   * Get index of a rule.
   */
  ;

  _proto.indexOf = function indexOf(rule) {
    return this.rules.indexOf(rule);
  }
  /**
   * Generates a CSS string.
   */
  ;

  _proto.toString = function toString() {
    return this.rules.toString();
  };

  return GlobalContainerRule;
}();

var GlobalPrefixedRule =
/*#__PURE__*/
function () {
  function GlobalPrefixedRule(key, style, options) {
    this.type = 'global';
    this.at = at;
    this.options = void 0;
    this.rule = void 0;
    this.isProcessed = false;
    this.key = void 0;
    this.key = key;
    this.options = options;
    var selector = key.substr(atPrefix.length);
    this.rule = options.jss.createRule(selector, style, _extends({}, options, {
      parent: this
    }));
  }

  var _proto2 = GlobalPrefixedRule.prototype;

  _proto2.toString = function toString(options) {
    return this.rule ? this.rule.toString(options) : '';
  };

  return GlobalPrefixedRule;
}();

var separatorRegExp = /\s*,\s*/g;

function addScope(selector, scope) {
  var parts = selector.split(separatorRegExp);
  var scoped = '';

  for (var i = 0; i < parts.length; i++) {
    scoped += scope + " " + parts[i].trim();
    if (parts[i + 1]) scoped += ', ';
  }

  return scoped;
}

function handleNestedGlobalContainerRule(rule) {
  var options = rule.options,
      style = rule.style;
  var rules = style ? style[at] : null;
  if (!rules) return;

  for (var name in rules) {
    options.sheet.addRule(name, rules[name], _extends({}, options, {
      selector: addScope(name, rule.selector)
    }));
  }

  delete style[at];
}

function handlePrefixedGlobalRule(rule) {
  var options = rule.options,
      style = rule.style;

  for (var prop in style) {
    if (prop[0] !== '@' || prop.substr(0, at.length) !== at) continue;
    var selector = addScope(prop.substr(at.length), rule.selector);
    options.sheet.addRule(selector, style[prop], _extends({}, options, {
      selector: selector
    }));
    delete style[prop];
  }
}
/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */


function jssGlobal() {
  function onCreateRule(name, styles, options) {
    if (!name) return null;

    if (name === at) {
      return new GlobalContainerRule(name, styles, options);
    }

    if (name[0] === '@' && name.substr(0, atPrefix.length) === atPrefix) {
      return new GlobalPrefixedRule(name, styles, options);
    }

    var parent = options.parent;

    if (parent) {
      if (parent.type === 'global' || parent.options.parent && parent.options.parent.type === 'global') {
        options.scoped = false;
      }
    }

    if (options.scoped === false) {
      options.selector = name;
    }

    return null;
  }

  function onProcessRule(rule) {
    if (rule.type !== 'style') return;
    handleNestedGlobalContainerRule(rule);
    handlePrefixedGlobalRule(rule);
  }

  return {
    onCreateRule: onCreateRule,
    onProcessRule: onProcessRule
  };
}

exports.default = jssGlobal;

      };
    };
  }
}, {package:"jss-plugin-global",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-global/dist/jss-plugin-global.cjs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-nested/dist/jss-plugin-nested.cjs.js", {"@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","tiny-warning":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/tiny-warning/dist/tiny-warning.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-nested/dist/jss-plugin-nested.cjs.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var warning = _interopDefault(require('tiny-warning'));

var separatorRegExp = /\s*,\s*/g;
var parentRegExp = /&/g;
var refRegExp = /\$([\w-]+)/g;
/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */

function jssNested() {
  // Get a function to be used for $ref replacement.
  function getReplaceRef(container, sheet) {
    return function (match, key) {
      var rule = container.getRule(key) || sheet && sheet.getRule(key);

      if (rule) {
        rule = rule;
        return rule.selector;
      }

      "development" !== "production" ? warning(false, "[JSS] Could not find the referenced rule \"" + key + "\" in \"" + (container.options.meta || container.toString()) + "\".") : void 0;
      return key;
    };
  }

  function replaceParentRefs(nestedProp, parentProp) {
    var parentSelectors = parentProp.split(separatorRegExp);
    var nestedSelectors = nestedProp.split(separatorRegExp);
    var result = '';

    for (var i = 0; i < parentSelectors.length; i++) {
      var parent = parentSelectors[i];

      for (var j = 0; j < nestedSelectors.length; j++) {
        var nested = nestedSelectors[j];
        if (result) result += ', '; // Replace all & by the parent or prefix & with the parent.

        result += nested.indexOf('&') !== -1 ? nested.replace(parentRegExp, parent) : parent + " " + nested;
      }
    }

    return result;
  }

  function getOptions(rule, container, prevOptions) {
    // Options has been already created, now we only increase index.
    if (prevOptions) return _extends({}, prevOptions, {
      index: prevOptions.index + 1
    });
    var nestingLevel = rule.options.nestingLevel;
    nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;

    var options = _extends({}, rule.options, {
      nestingLevel: nestingLevel,
      index: container.indexOf(rule) + 1 // We don't need the parent name to be set options for chlid.

    });

    delete options.name;
    return options;
  }

  function onProcessStyle(style, rule, sheet) {
    if (rule.type !== 'style') return style;
    var styleRule = rule;
    var container = styleRule.options.parent;
    var options;
    var replaceRef;

    for (var prop in style) {
      var isNested = prop.indexOf('&') !== -1;
      var isNestedConditional = prop[0] === '@';
      if (!isNested && !isNestedConditional) continue;
      options = getOptions(styleRule, container, options);

      if (isNested) {
        var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for
        // all nested rules within the sheet.

        if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.

        selector = selector.replace(refRegExp, replaceRef);
        container.addRule(selector, style[prop], _extends({}, options, {
          selector: selector
        }));
      } else if (isNestedConditional) {
        // Place conditional right after the parent rule to ensure right ordering.
        container.addRule(prop, {}, options) // Flow expects more options but they aren't required
        // And flow doesn't know this will always be a StyleRule which has the addRule method
        // $FlowFixMe
        .addRule(styleRule.key, style[prop], {
          selector: styleRule.selector
        });
      }

      delete style[prop];
    }

    return style;
  }

  return {
    onProcessStyle: onProcessStyle
  };
}

exports.default = jssNested;

      };
    };
  }
}, {package:"jss-plugin-nested",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-nested/dist/jss-plugin-nested.cjs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.cjs.js", {"css-vendor":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/css-vendor/dist/css-vendor.cjs.js","jss":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss/dist/jss.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.cjs.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vendor = require('css-vendor');
var jss = require('jss');

/**
 * Add vendor prefix to a property name when needed.
 *
 * @api public
 */

function jssVendorPrefixer() {
  function onProcessRule(rule) {
    if (rule.type === 'keyframes') {
      var atRule = rule;
      atRule.at = vendor.supportedKeyframes(atRule.at);
    }
  }

  function prefixStyle(style) {
    for (var prop in style) {
      var value = style[prop];

      if (prop === 'fallbacks' && Array.isArray(value)) {
        style[prop] = value.map(prefixStyle);
        continue;
      }

      var changeProp = false;
      var supportedProp = vendor.supportedProperty(prop);
      if (supportedProp && supportedProp !== prop) changeProp = true;
      var changeValue = false;
      var supportedValue = vendor.supportedValue(supportedProp, jss.toCssValue(value));
      if (supportedValue && supportedValue !== value) changeValue = true;

      if (changeProp || changeValue) {
        if (changeProp) delete style[prop];
        style[supportedProp || prop] = supportedValue || value;
      }
    }

    return style;
  }

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;
    return prefixStyle(style);
  }

  function onChangeValue(value, prop) {
    return vendor.supportedValue(prop, jss.toCssValue(value)) || value;
  }

  return {
    onProcessRule: onProcessRule,
    onProcessStyle: onProcessStyle,
    onChangeValue: onChangeValue
  };
}

exports.default = jssVendorPrefixer;

      };
    };
  }
}, {package:"jss-plugin-vendor-prefixer",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.cjs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/index.js", {"./InputBase":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/InputBase.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _InputBase.default;
  }
});

var _InputBase = _interopRequireDefault(require("./InputBase"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/formControlState.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/formControlState.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formControlState;

function formControlState(_ref) {
  var props = _ref.props,
      states = _ref.states,
      muiFormControl = _ref.muiFormControl;
  return states.reduce(function (acc, state) {
    acc[state] = props[state];

    if (muiFormControl) {
      if (typeof props[state] === 'undefined') {
        acc[state] = muiFormControl[state];
      }
    }

    return acc;
  }, {});
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/formControlState.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/utils.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/utils.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasValue = hasValue;
exports.isFilled = isFilled;
exports.isAdornedStart = isAdornedStart;

// Supports determination of isControlled().
// Controlled input accepts its current value as a prop.
//
// @see https://facebook.github.io/react/docs/forms.html#controlled-components
// @param value
// @returns {boolean} true if string (including '') or number (including zero)
function hasValue(value) {
  return value != null && !(Array.isArray(value) && value.length === 0);
} // Determine if field is empty or filled.
// Response determines if label is presented above field or as placeholder.
//
// @param obj
// @param SSR
// @returns {boolean} False when not present or empty string.
//                    True when any number or string with length.


function isFilled(obj) {
  var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
} // Determine if an Input is adorned on start.
// It's corresponding to the left with LTR.
//
// @param obj
// @returns {boolean} False when no adornments.
//                    True when adorned at the start.


function isAdornedStart(obj) {
  return obj.startAdornment;
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/utils.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/isMuiElement.js", {"@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/isMuiElement.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isMuiElement;

var React = _interopRequireWildcard(require("react"));

function isMuiElement(element, muiNames) {
  return /*#__PURE__*/React.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/isMuiElement.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/OutlinedInput/NotchedOutline.js", {"../styles/useTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/useTheme.js","../styles/withStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withStyles.js","../utils/capitalize":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/capitalize.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","clsx":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/OutlinedInput/NotchedOutline.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _withStyles = _interopRequireDefault(require("../styles/withStyles"));

var _useTheme = _interopRequireDefault(require("../styles/useTheme"));

var _capitalize = _interopRequireDefault(require("../utils/capitalize"));

var styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      position: 'absolute',
      bottom: 0,
      right: 0,
      top: -5,
      left: 0,
      margin: 0,
      padding: '0 8px',
      pointerEvents: 'none',
      borderRadius: 'inherit',
      borderStyle: 'solid',
      borderWidth: 1,
      overflow: 'hidden'
    },

    /* Styles applied to the legend element when `labelWidth` is provided. */
    legend: {
      textAlign: 'left',
      padding: 0,
      lineHeight: '11px',
      // sync with `height` in `legend` styles
      transition: theme.transitions.create('width', {
        duration: 150,
        easing: theme.transitions.easing.easeOut
      })
    },

    /* Styles applied to the legend element. */
    legendLabelled: {
      display: 'block',
      width: 'auto',
      textAlign: 'left',
      padding: 0,
      height: 11,
      // sync with `lineHeight` in `legend` styles
      fontSize: '0.75em',
      visibility: 'hidden',
      maxWidth: 0.01,
      transition: theme.transitions.create('max-width', {
        duration: 50,
        easing: theme.transitions.easing.easeOut
      }),
      '& > span': {
        paddingLeft: 5,
        paddingRight: 5,
        display: 'inline-block'
      }
    },

    /* Styles applied to the legend element is notched. */
    legendNotched: {
      maxWidth: 1000,
      transition: theme.transitions.create('max-width', {
        duration: 100,
        easing: theme.transitions.easing.easeOut,
        delay: 50
      })
    }
  };
};
/**
 * @ignore - internal component.
 */


exports.styles = styles;
var NotchedOutline = /*#__PURE__*/React.forwardRef(function NotchedOutline(props, ref) {
  var children = props.children,
      classes = props.classes,
      className = props.className,
      label = props.label,
      labelWidthProp = props.labelWidth,
      notched = props.notched,
      style = props.style,
      other = (0, _objectWithoutProperties2.default)(props, ["children", "classes", "className", "label", "labelWidth", "notched", "style"]);
  var theme = (0, _useTheme.default)();
  var align = theme.direction === 'rtl' ? 'right' : 'left';

  if (label !== undefined) {
    return /*#__PURE__*/React.createElement("fieldset", (0, _extends3.default)({
      "aria-hidden": true,
      className: (0, _clsx.default)(classes.root, className),
      ref: ref,
      style: style
    }, other), /*#__PURE__*/React.createElement("legend", {
      className: (0, _clsx.default)(classes.legendLabelled, notched && classes.legendNotched)
    }, label ? /*#__PURE__*/React.createElement("span", null, label) : /*#__PURE__*/React.createElement("span", {
      dangerouslySetInnerHTML: {
        __html: '&#8203;'
      }
    })));
  }

  var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0.01;
  return /*#__PURE__*/React.createElement("fieldset", (0, _extends3.default)({
    "aria-hidden": true,
    style: (0, _extends3.default)((0, _defineProperty2.default)({}, "padding".concat((0, _capitalize.default)(align)), 8), style),
    className: (0, _clsx.default)(classes.root, className),
    ref: ref
  }, other), /*#__PURE__*/React.createElement("legend", {
    className: classes.legend,
    style: {
      // IE 11: fieldset with legend does not render
      // a border radius. This maintains consistency
      // by always having a legend rendered
      width: notched ? labelWidth : 0.01
    }
  }, /*#__PURE__*/React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: '&#8203;'
    }
  })));
});
"development" !== "production" ? NotchedOutline.propTypes = {
  /**
   * The content of the component.
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: _propTypes.default.object,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The label.
   */
  label: _propTypes.default.node,

  /**
   * The width of the label.
   */
  labelWidth: _propTypes.default.number.isRequired,

  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: _propTypes.default.bool.isRequired,

  /**
   * @ignore
   */
  style: _propTypes.default.object
} : void 0;

var _default = (0, _withStyles.default)(styles, {
  name: 'PrivateNotchedOutline'
})(NotchedOutline);

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/OutlinedInput/NotchedOutline.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormLabel/index.js", {"./FormLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormLabel/FormLabel.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormLabel/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _FormLabel.default;
  }
});

var _FormLabel = _interopRequireDefault(require("./FormLabel"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormLabel/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/NativeSelectInput.js", {"../utils/capitalize":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/capitalize.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js","clsx":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/NativeSelectInput.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _utils = require("@material-ui/utils");

var _capitalize = _interopRequireDefault(require("../utils/capitalize"));

/**
 * @ignore - internal component.
 */
var NativeSelectInput = /*#__PURE__*/React.forwardRef(function NativeSelectInput(props, ref) {
  var classes = props.classes,
      className = props.className,
      disabled = props.disabled,
      IconComponent = props.IconComponent,
      inputRef = props.inputRef,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? 'standard' : _props$variant,
      other = (0, _objectWithoutProperties2.default)(props, ["classes", "className", "disabled", "IconComponent", "inputRef", "variant"]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("select", (0, _extends2.default)({
    className: (0, _clsx.default)(classes.root, // TODO v5: merge root and select
    classes.select, classes[variant], className, disabled && classes.disabled),
    disabled: disabled,
    ref: inputRef || ref
  }, other)), props.multiple ? null : /*#__PURE__*/React.createElement(IconComponent, {
    className: (0, _clsx.default)(classes.icon, classes["icon".concat((0, _capitalize.default)(variant))], disabled && classes.disabled)
  }));
});
"development" !== "production" ? NativeSelectInput.propTypes = {
  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: _propTypes.default.object.isRequired,

  /**
   * The CSS class name of the select element.
   */
  className: _propTypes.default.string,

  /**
   * If `true`, the select will be disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * The icon that displays the arrow.
   */
  IconComponent: _propTypes.default.elementType.isRequired,

  /**
   * Use that prop to pass a ref to the native select element.
   * @deprecated
   */
  inputRef: _utils.refType,

  /**
   * @ignore
   */
  multiple: _propTypes.default.bool,

  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: _propTypes.default.string,

  /**
   * Callback function fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: _propTypes.default.func,

  /**
   * The input value.
   */
  value: _propTypes.default.any,

  /**
   * The variant to use.
   */
  variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled'])
} : void 0;
var _default = NativeSelectInput;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/NativeSelectInput.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/NativeSelect.js", {"../FormControl/formControlState":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/formControlState.js","../FormControl/useFormControl":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/useFormControl.js","../Input":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Input/index.js","../internal/svg-icons/ArrowDropDown":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/internal/svg-icons/ArrowDropDown.js","../styles/withStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withStyles.js","./NativeSelectInput":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/NativeSelectInput.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/NativeSelect.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _NativeSelectInput = _interopRequireDefault(require("./NativeSelectInput"));

var _withStyles = _interopRequireDefault(require("../styles/withStyles"));

var _formControlState = _interopRequireDefault(require("../FormControl/formControlState"));

var _useFormControl = _interopRequireDefault(require("../FormControl/useFormControl"));

var _ArrowDropDown = _interopRequireDefault(require("../internal/svg-icons/ArrowDropDown"));

var _Input = _interopRequireDefault(require("../Input"));

var styles = function styles(theme) {
  return {
    /* Styles applied to the select component `root` class. */
    root: {},

    /* Styles applied to the select component `select` class. */
    select: {
      '-moz-appearance': 'none',
      // Reset
      '-webkit-appearance': 'none',
      // Reset
      // When interacting quickly, the text can end up selected.
      // Native select can't be selected either.
      userSelect: 'none',
      borderRadius: 0,
      // Reset
      minWidth: 16,
      // So it doesn't collapse.
      cursor: 'pointer',
      '&:focus': {
        // Show that it's not an text input
        backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
        borderRadius: 0 // Reset Chrome style

      },
      // Remove IE 11 arrow
      '&::-ms-expand': {
        display: 'none'
      },
      '&$disabled': {
        cursor: 'default'
      },
      '&[multiple]': {
        height: 'auto'
      },
      '&:not([multiple]) option, &:not([multiple]) optgroup': {
        backgroundColor: theme.palette.background.paper
      },
      '&&': {
        paddingRight: 24
      }
    },

    /* Styles applied to the select component if `variant="filled"`. */
    filled: {
      '&&': {
        paddingRight: 32
      }
    },

    /* Styles applied to the select component if `variant="outlined"`. */
    outlined: {
      borderRadius: theme.shape.borderRadius,
      '&&': {
        paddingRight: 32
      }
    },

    /* Styles applied to the select component `selectMenu` class. */
    selectMenu: {
      height: 'auto',
      // Resets for multpile select with chips
      minHeight: '1.1876em',
      // Required for select\text-field height consistency
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      overflow: 'hidden'
    },

    /* Pseudo-class applied to the select component `disabled` class. */
    disabled: {},

    /* Styles applied to the icon component. */
    icon: {
      // We use a position absolute over a flexbox in order to forward the pointer events
      // to the input and to support wrapping tags..
      position: 'absolute',
      right: 0,
      top: 'calc(50% - 12px)',
      // Center vertically
      pointerEvents: 'none',
      // Don't block pointer events on the select under the icon.
      color: theme.palette.action.active,
      '&$disabled': {
        color: theme.palette.action.disabled
      }
    },

    /* Styles applied to the icon component if the popup is open. */
    iconOpen: {
      transform: 'rotate(180deg)'
    },

    /* Styles applied to the icon component if `variant="filled"`. */
    iconFilled: {
      right: 7
    },

    /* Styles applied to the icon component if `variant="outlined"`. */
    iconOutlined: {
      right: 7
    },

    /* Styles applied to the underlying native input component. */
    nativeInput: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      opacity: 0,
      pointerEvents: 'none',
      width: '100%'
    }
  };
};

exports.styles = styles;
var defaultInput = /*#__PURE__*/React.createElement(_Input.default, null);
/**
 * An alternative to `<Select native />` with a much smaller bundle size footprint.
 */

var NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(props, ref) {
  var children = props.children,
      classes = props.classes,
      _props$IconComponent = props.IconComponent,
      IconComponent = _props$IconComponent === void 0 ? _ArrowDropDown.default : _props$IconComponent,
      _props$input = props.input,
      input = _props$input === void 0 ? defaultInput : _props$input,
      inputProps = props.inputProps,
      variant = props.variant,
      other = (0, _objectWithoutProperties2.default)(props, ["children", "classes", "IconComponent", "input", "inputProps", "variant"]);
  var muiFormControl = (0, _useFormControl.default)();
  var fcs = (0, _formControlState.default)({
    props: props,
    muiFormControl: muiFormControl,
    states: ['variant']
  });
  return /*#__PURE__*/React.cloneElement(input, (0, _extends2.default)({
    // Most of the logic is implemented in `NativeSelectInput`.
    // The `Select` component is a simple API wrapper to expose something better to play with.
    inputComponent: _NativeSelectInput.default,
    inputProps: (0, _extends2.default)({
      children: children,
      classes: classes,
      IconComponent: IconComponent,
      variant: fcs.variant,
      type: undefined
    }, inputProps, input ? input.props.inputProps : {}),
    ref: ref
  }, other));
});
"development" !== "production" ? NativeSelect.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: _propTypes.default.object,

  /**
   * The icon that displays the arrow.
   */
  IconComponent: _propTypes.default.elementType,

  /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   */
  input: _propTypes.default.element,

  /**
   * Attributes applied to the `select` element.
   */
  inputProps: _propTypes.default.object,

  /**
   * Callback function fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: _propTypes.default.func,

  /**
   * The input value. The DOM API casts this to a string.
   */
  value: _propTypes.default.any,

  /**
   * The variant to use.
   */
  variant: _propTypes.default.oneOf(['filled', 'outlined', 'standard'])
} : void 0;
NativeSelect.muiName = 'Select';

var _default = (0, _withStyles.default)(styles, {
  name: 'MuiNativeSelect'
})(NativeSelect);

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/NativeSelect.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/internal/svg-icons/ArrowDropDown.js", {"../../utils/createSvgIcon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/createSvgIcon.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/internal/svg-icons/ArrowDropDown.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _createSvgIcon = _interopRequireDefault(require("../../utils/createSvgIcon"));

/**
 * @ignore - internal component.
 */
var _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement("path", {
  d: "M7 10l5 5 5-5z"
}), 'ArrowDropDown');

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/internal/svg-icons/ArrowDropDown.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Select/SelectInput.js", {"../InputBase/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/utils.js","../Menu/Menu":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Menu/Menu.js","../utils/capitalize":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/capitalize.js","../utils/ownerDocument":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/ownerDocument.js","../utils/useControlled":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useControlled.js","../utils/useForkRef":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useForkRef.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","@babel/runtime/helpers/slicedToArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/slicedToArray.js","@babel/runtime/helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/typeof.js","@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js","clsx":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-is":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-is/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Select/SelectInput.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _utils = require("@material-ui/utils");

var React = _interopRequireWildcard(require("react"));

var _reactIs = require("react-is");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _ownerDocument = _interopRequireDefault(require("../utils/ownerDocument"));

var _capitalize = _interopRequireDefault(require("../utils/capitalize"));

var _Menu = _interopRequireDefault(require("../Menu/Menu"));

var _utils2 = require("../InputBase/utils");

var _useForkRef = _interopRequireDefault(require("../utils/useForkRef"));

var _useControlled3 = _interopRequireDefault(require("../utils/useControlled"));

function areEqualValues(a, b) {
  if ((0, _typeof2.default)(b) === 'object' && b !== null) {
    return a === b;
  }

  return String(a) === String(b);
}

function isEmpty(display) {
  return display == null || typeof display === 'string' && !display.trim();
}
/**
 * @ignore - internal component.
 */


var SelectInput = /*#__PURE__*/React.forwardRef(function SelectInput(props, ref) {
  var ariaLabel = props['aria-label'],
      autoFocus = props.autoFocus,
      autoWidth = props.autoWidth,
      children = props.children,
      classes = props.classes,
      className = props.className,
      defaultValue = props.defaultValue,
      disabled = props.disabled,
      displayEmpty = props.displayEmpty,
      IconComponent = props.IconComponent,
      inputRefProp = props.inputRef,
      labelId = props.labelId,
      _props$MenuProps = props.MenuProps,
      MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps,
      multiple = props.multiple,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onClose = props.onClose,
      onFocus = props.onFocus,
      onOpen = props.onOpen,
      openProp = props.open,
      readOnly = props.readOnly,
      renderValue = props.renderValue,
      _props$SelectDisplayP = props.SelectDisplayProps,
      SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP,
      tabIndexProp = props.tabIndex,
      type = props.type,
      valueProp = props.value,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? 'standard' : _props$variant,
      other = (0, _objectWithoutProperties2.default)(props, ["aria-label", "autoFocus", "autoWidth", "children", "classes", "className", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"]);

  var _useControlled = (0, _useControlled3.default)({
    controlled: valueProp,
    default: defaultValue,
    name: 'Select'
  }),
      _useControlled2 = (0, _slicedToArray2.default)(_useControlled, 2),
      value = _useControlled2[0],
      setValue = _useControlled2[1];

  var inputRef = React.useRef(null);

  var _React$useState = React.useState(null),
      displayNode = _React$useState[0],
      setDisplayNode = _React$useState[1];

  var _React$useRef = React.useRef(openProp != null),
      isOpenControlled = _React$useRef.current;

  var _React$useState2 = React.useState(),
      menuMinWidthState = _React$useState2[0],
      setMenuMinWidthState = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      openState = _React$useState3[0],
      setOpenState = _React$useState3[1];

  var handleRef = (0, _useForkRef.default)(ref, inputRefProp);
  React.useImperativeHandle(handleRef, function () {
    return {
      focus: function focus() {
        displayNode.focus();
      },
      node: inputRef.current,
      value: value
    };
  }, [displayNode, value]);
  React.useEffect(function () {
    if (autoFocus && displayNode) {
      displayNode.focus();
    }
  }, [autoFocus, displayNode]);
  React.useEffect(function () {
    if (displayNode) {
      var label = (0, _ownerDocument.default)(displayNode).getElementById(labelId);

      if (label) {
        var handler = function handler() {
          if (getSelection().isCollapsed) {
            displayNode.focus();
          }
        };

        label.addEventListener('click', handler);
        return function () {
          label.removeEventListener('click', handler);
        };
      }
    }

    return undefined;
  }, [labelId, displayNode]);

  var update = function update(open, event) {
    if (open) {
      if (onOpen) {
        onOpen(event);
      }
    } else if (onClose) {
      onClose(event);
    }

    if (!isOpenControlled) {
      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
      setOpenState(open);
    }
  };

  var handleMouseDown = function handleMouseDown(event) {
    // Ignore everything but left-click
    if (event.button !== 0) {
      return;
    } // Hijack the default focus behavior.


    event.preventDefault();
    displayNode.focus();
    update(true, event);
  };

  var handleClose = function handleClose(event) {
    update(false, event);
  };

  var childrenArray = React.Children.toArray(children); // Support autofill.

  var handleChange = function handleChange(event) {
    var index = childrenArray.map(function (child) {
      return child.props.value;
    }).indexOf(event.target.value);

    if (index === -1) {
      return;
    }

    var child = childrenArray[index];
    setValue(child.props.value);

    if (onChange) {
      onChange(event, child);
    }
  };

  var handleItemClick = function handleItemClick(child) {
    return function (event) {
      if (!multiple) {
        update(false, event);
      }

      var newValue;

      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        var itemIndex = value.indexOf(child.props.value);

        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }

      if (child.props.onClick) {
        child.props.onClick(event);
      }

      if (value === newValue) {
        return;
      }

      setValue(newValue);

      if (onChange) {
        event.persist(); // Preact support, target is read only property on a native event.

        Object.defineProperty(event, 'target', {
          writable: true,
          value: {
            value: newValue,
            name: name
          }
        });
        onChange(event, child);
      }
    };
  };

  var handleKeyDown = function handleKeyDown(event) {
    if (!readOnly) {
      var validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by
      // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html
      'Enter'];

      if (validKeys.indexOf(event.key) !== -1) {
        event.preventDefault();
        update(true, event);
      }
    }
  };

  var open = displayNode !== null && (isOpenControlled ? openProp : openState);

  var handleBlur = function handleBlur(event) {
    // if open event.stopImmediatePropagation
    if (!open && onBlur) {
      event.persist(); // Preact support, target is read only property on a native event.

      Object.defineProperty(event, 'target', {
        writable: true,
        value: {
          value: value,
          name: name
        }
      });
      onBlur(event);
    }
  };

  delete other['aria-invalid'];
  var display;
  var displaySingle;
  var displayMultiple = [];
  var computeDisplay = false;
  var foundMatch = false; // No need to display any value if the field is empty.

  if ((0, _utils2.isFilled)({
    value: value
  }) || displayEmpty) {
    if (renderValue) {
      display = renderValue(value);
    } else {
      computeDisplay = true;
    }
  }

  var items = childrenArray.map(function (child) {
    if (! /*#__PURE__*/React.isValidElement(child)) {
      return null;
    }

    if ("development" !== 'production') {
      if ((0, _reactIs.isFragment)(child)) {
        console.error(["Material-UI: The Select component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
      }
    }

    var selected;

    if (multiple) {
      if (!Array.isArray(value)) {
        throw new Error("development" !== "production" ? "Material-UI: The `value` prop must be an array when using the `Select` component with `multiple`." : (0, _utils.formatMuiErrorMessage)(2));
      }

      selected = value.some(function (v) {
        return areEqualValues(v, child.props.value);
      });

      if (selected && computeDisplay) {
        displayMultiple.push(child.props.children);
      }
    } else {
      selected = areEqualValues(value, child.props.value);

      if (selected && computeDisplay) {
        displaySingle = child.props.children;
      }
    }

    if (selected) {
      foundMatch = true;
    }

    return /*#__PURE__*/React.cloneElement(child, {
      'aria-selected': selected ? 'true' : undefined,
      onClick: handleItemClick(child),
      onKeyUp: function onKeyUp(event) {
        if (event.key === ' ') {
          // otherwise our MenuItems dispatches a click event
          // it's not behavior of the native <option> and causes
          // the select to close immediately since we open on space keydown
          event.preventDefault();
        }

        if (child.props.onKeyUp) {
          child.props.onKeyUp(event);
        }
      },
      role: 'option',
      selected: selected,
      value: undefined,
      // The value is most likely not a valid HTML attribute.
      'data-value': child.props.value // Instead, we provide it as a data attribute.

    });
  });

  if ("development" !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(function () {
      if (!foundMatch && !multiple && value !== '') {
        var values = childrenArray.map(function (child) {
          return child.props.value;
        });
        console.warn(["Material-UI: You have provided an out-of-range value `".concat(value, "` for the select ").concat(name ? "(name=\"".concat(name, "\") ") : '', "component."), "Consider providing a value that matches one of the available options or ''.", "The available values are ".concat(values.filter(function (x) {
          return x != null;
        }).map(function (x) {
          return "`".concat(x, "`");
        }).join(', ') || '""', ".")].join('\n'));
      }
    }, [foundMatch, childrenArray, multiple, name, value]);
  }

  if (computeDisplay) {
    display = multiple ? displayMultiple.join(', ') : displaySingle;
  } // Avoid performing a layout computation in the render method.


  var menuMinWidth = menuMinWidthState;

  if (!autoWidth && isOpenControlled && displayNode) {
    menuMinWidth = displayNode.clientWidth;
  }

  var tabIndex;

  if (typeof tabIndexProp !== 'undefined') {
    tabIndex = tabIndexProp;
  } else {
    tabIndex = disabled ? null : 0;
  }

  var buttonId = SelectDisplayProps.id || (name ? "mui-component-select-".concat(name) : undefined);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    className: (0, _clsx.default)(classes.root, // TODO v5: merge root and select
    classes.select, classes.selectMenu, classes[variant], className, disabled && classes.disabled),
    ref: setDisplayNode,
    tabIndex: tabIndex,
    role: "button",
    "aria-disabled": disabled ? 'true' : undefined,
    "aria-expanded": open ? 'true' : undefined,
    "aria-haspopup": "listbox",
    "aria-label": ariaLabel,
    "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
    onKeyDown: handleKeyDown,
    onMouseDown: disabled || readOnly ? null : handleMouseDown,
    onBlur: handleBlur,
    onFocus: onFocus
  }, SelectDisplayProps, {
    // The id is required for proper a11y
    id: buttonId
  }), isEmpty(display) ?
  /*#__PURE__*/
  // eslint-disable-next-line react/no-danger
  React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: '&#8203;'
    }
  }) : display), /*#__PURE__*/React.createElement("input", (0, _extends2.default)({
    value: Array.isArray(value) ? value.join(',') : value,
    name: name,
    ref: inputRef,
    "aria-hidden": true,
    onChange: handleChange,
    tabIndex: -1,
    className: classes.nativeInput,
    autoFocus: autoFocus
  }, other)), /*#__PURE__*/React.createElement(IconComponent, {
    className: (0, _clsx.default)(classes.icon, classes["icon".concat((0, _capitalize.default)(variant))], open && classes.iconOpen, disabled && classes.disabled)
  }), /*#__PURE__*/React.createElement(_Menu.default, (0, _extends2.default)({
    id: "menu-".concat(name || ''),
    anchorEl: displayNode,
    open: open,
    onClose: handleClose
  }, MenuProps, {
    MenuListProps: (0, _extends2.default)({
      'aria-labelledby': labelId,
      role: 'listbox',
      disableListWrap: true
    }, MenuProps.MenuListProps),
    PaperProps: (0, _extends2.default)({}, MenuProps.PaperProps, {
      style: (0, _extends2.default)({
        minWidth: menuMinWidth
      }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
    })
  }), items));
});
"development" !== "production" ? SelectInput.propTypes = {
  /**
   * @ignore
   */
  'aria-label': _propTypes.default.string,

  /**
   * @ignore
   */
  autoFocus: _propTypes.default.bool,

  /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   */
  autoWidth: _propTypes.default.bool,

  /**
   * The option elements to populate the select with.
   * Can be some `<MenuItem>` elements.
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: _propTypes.default.object.isRequired,

  /**
   * The CSS class name of the select element.
   */
  className: _propTypes.default.string,

  /**
   * The default element value. Use when the component is not controlled.
   */
  defaultValue: _propTypes.default.any,

  /**
   * If `true`, the select will be disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * If `true`, the selected item is displayed even if its value is empty.
   */
  displayEmpty: _propTypes.default.bool,

  /**
   * The icon that displays the arrow.
   */
  IconComponent: _propTypes.default.elementType.isRequired,

  /**
   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
   * Equivalent to `ref`
   */
  inputRef: _utils.refType,

  /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */
  labelId: _propTypes.default.string,

  /**
   * Props applied to the [`Menu`](/api/menu/) element.
   */
  MenuProps: _propTypes.default.object,

  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   */
  multiple: _propTypes.default.bool,

  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: _propTypes.default.string,

  /**
   * @ignore
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback function fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * @param {object} [child] The react element that was selected.
   */
  onChange: _propTypes.default.func,

  /**
   * Callback fired when the component requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onClose: _propTypes.default.func,

  /**
   * @ignore
   */
  onFocus: _propTypes.default.func,

  /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: _propTypes.default.func,

  /**
   * Control `select` open state.
   */
  open: _propTypes.default.bool,

  /**
   * @ignore
   */
  readOnly: _propTypes.default.bool,

  /**
   * Render the selected value.
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */
  renderValue: _propTypes.default.func,

  /**
   * Props applied to the clickable div element.
   */
  SelectDisplayProps: _propTypes.default.object,

  /**
   * @ignore
   */
  tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * @ignore
   */
  type: _propTypes.default.any,

  /**
   * The input value.
   */
  value: _propTypes.default.any,

  /**
   * The variant to use.
   */
  variant: _propTypes.default.oneOf(['standard', 'outlined', 'filled'])
} : void 0;
var _default = SelectInput;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Select/SelectInput.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_arrayFilter.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_arrayFilter.js
      return function (require, module, exports) {
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/_arrayFilter.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/stubArray.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/stubArray.js
      return function (require, module, exports) {
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

      };
    };
  }
}, {package:"lodash",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/stubArray.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@download/blockies/dist/blockies.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@download/blockies/dist/blockies.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// The random number is a js implementation of the Xorshift PRNG
const randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values

function seedrand(seed) {
	randseed.fill(0);

	for(let i = 0; i < seed.length; i++) {
		randseed[i%4] = ((randseed[i%4] << 5) - randseed[i%4]) + seed.charCodeAt(i);
	}
}

function rand() {
	// based on Java's String.hashCode(), expanded to 4 32bit values
	const t = randseed[0] ^ (randseed[0] << 11);

	randseed[0] = randseed[1];
	randseed[1] = randseed[2];
	randseed[2] = randseed[3];
	randseed[3] = (randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8));

	return (randseed[3] >>> 0) / ((1 << 31) >>> 0);
}

function createColor() {
	//saturation is the whole color spectrum
	const h = Math.floor(rand() * 360);
	//saturation goes from 40 to 100, it avoids greyish colors
	const s = ((rand() * 60) + 40) + '%';
	//lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%
	const l = ((rand() + rand() + rand() + rand()) * 25) + '%';

	return 'hsl(' + h + ',' + s + ',' + l + ')';
}

function createImageData(size) {
	const width = size; // Only support square icons for now
	const height = size;

	const dataWidth = Math.ceil(width / 2);
	const mirrorWidth = width - dataWidth;

	const data = [];
	for(let y = 0; y < height; y++) {
		let row = [];
		for(let x = 0; x < dataWidth; x++) {
			// this makes foreground and background color to have a 43% (1/2.3) probability
			// spot color has 13% chance
			row[x] = Math.floor(rand()*2.3);
		}
		const r = row.slice(0, mirrorWidth);
		r.reverse();
		row = row.concat(r);

		for(let i = 0; i < row.length; i++) {
			data.push(row[i]);
		}
	}

	return data;
}

function buildOpts(opts) {
	const newOpts = {};

	newOpts.seed = opts.seed || Math.floor((Math.random()*Math.pow(10,16))).toString(16);

	seedrand(newOpts.seed);

	newOpts.size = opts.size || 8;
	newOpts.scale = opts.scale || 4;
	newOpts.color = opts.color || createColor();
	newOpts.bgcolor = opts.bgcolor || createColor();
	newOpts.spotcolor = opts.spotcolor || createColor();

	return newOpts;
}

function renderIcon(opts, canvas) {
	opts = buildOpts(opts || {});
	const imageData = createImageData(opts.size);
	const width = Math.sqrt(imageData.length);

	canvas.width = canvas.height = opts.size * opts.scale;

	const cc = canvas.getContext('2d');
	cc.fillStyle = opts.bgcolor;
	cc.fillRect(0, 0, canvas.width, canvas.height);
	cc.fillStyle = opts.color;

	for(let i = 0; i < imageData.length; i++) {

		// if data is 0, leave the background
		if(imageData[i]) {
			const row = Math.floor(i / width);
			const col = i % width;

			// if data is 2, choose spot color, if 1 choose foreground
			cc.fillStyle = (imageData[i] == 1) ? opts.color : opts.spotcolor;

			cc.fillRect(col * opts.scale, row * opts.scale, opts.scale, opts.scale);
		}
	}

	return canvas;
}

function createIcon(opts) {
	var canvas = document.createElement('canvas');

	renderIcon(opts, canvas);

	return canvas;
}

exports.renderIcon = renderIcon;
exports.createIcon = createIcon;

      };
    };
  }
}, {package:"@download/blockies",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@download/blockies/dist/blockies.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/icon-factory.js", {"../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/icon-factory.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = iconFactoryGenerator;

var _hexstringUtils = require("../../../shared/modules/hexstring-utils");

let iconFactory;

function iconFactoryGenerator(jazzicon) {
  if (!iconFactory) {
    iconFactory = new IconFactory(jazzicon);
  }

  return iconFactory;
}

function IconFactory(jazzicon) {
  this.jazzicon = jazzicon;
  this.cache = {};
}

IconFactory.prototype.iconForAddress = function (address, diameter, useTokenDetection, tokenList) {
  // When useTokenDetection flag is true the tokenList contains tokens with non-checksum address from the dynamic token service api,
  // When useTokenDetection flag is false the tokenList contains tokens with checksum addresses from contract-metadata.
  // So the flag indicates whether the address of tokens currently on the tokenList is checksum or not.
  // And since the token.address from allTokens is checksumaddress
  // tokenAddress have to be changed to lowercase when we are using dynamic list
  const addr = useTokenDetection ? address.toLowerCase() : (0, _hexstringUtils.toChecksumHexAddress)(address);

  if (iconExistsFor(addr, tokenList)) {
    return imageElFor(addr, useTokenDetection, tokenList);
  }

  return this.generateIdenticonSvg(address, diameter);
}; // returns svg dom element


IconFactory.prototype.generateIdenticonSvg = function (address, diameter) {
  const cacheId = `${address}:${diameter}`; // check cache, lazily generate and populate cache

  const identicon = this.cache[cacheId] || (this.cache[cacheId] = this.generateNewIdenticon(address, diameter)); // create a clean copy so you can modify it

  const cleanCopy = identicon.cloneNode(true);
  return cleanCopy;
}; // creates a new identicon


IconFactory.prototype.generateNewIdenticon = function (address, diameter) {
  const numericRepresentation = jsNumberForAddress(address);
  const identicon = this.jazzicon(diameter, numericRepresentation);
  return identicon;
}; // util


function iconExistsFor(address, tokenList) {
  return tokenList[address] && (0, _hexstringUtils.isValidHexAddress)(address, {
    allowNonPrefixed: false
  }) && tokenList[address].iconUrl;
}

function imageElFor(address, useTokenDetection, tokenList) {
  const tokenMetadata = tokenList[address];
  const fileName = tokenMetadata === null || tokenMetadata === void 0 ? void 0 : tokenMetadata.iconUrl; // token from dynamic api list is fetched when useTokenDetection is true
  // In the static list, the iconUrl will be holding only a filename for the image,
  // the corresponding images will be available in the `images/contract/` location when the contract-metadata package was added to the extension
  //  so that it can be accessed using the filename in iconUrl.

  const path = useTokenDetection ? fileName : `images/contract/${fileName}`;
  const img = document.createElement('img');
  img.src = path;
  img.style.width = '100%';
  return img;
}

function jsNumberForAddress(address) {
  const addr = address.slice(2, 10);
  const seed = parseInt(addr, 16);
  return seed;
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/icon-factory.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/index.js", {"./colors":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/colors.js","./paper":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/paper.js","color":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color/index.js","mersenne-twister":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/mersenne-twister/src/mersenne-twister.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/index.js
      return function (require, module, exports) {
var MersenneTwister = require('mersenne-twister');
var paperGen = require('./paper')
var Color = require('color')
var colors = require('./colors')
var shapeCount = 4
var svgns = 'http://www.w3.org/2000/svg'

module.exports = generateIdenticon

var generator
function generateIdenticon(diameter, seed) {
  generator = new MersenneTwister(seed);
  var remainingColors = hueShift(colors.slice(), generator)

  var elements = paperGen(diameter, genColor(remainingColors))
  var container = elements.container

  var svg = document.createElementNS(svgns, 'svg')
  svg.setAttributeNS(null, 'x', '0')
  svg.setAttributeNS(null, 'y', '0')
  svg.setAttributeNS(null, 'width', diameter)
  svg.setAttributeNS(null, 'height', diameter)

  container.appendChild(svg)

  for(var i = 0; i < shapeCount - 1; i++) {
    genShape(remainingColors, diameter, i, shapeCount - 1, svg)
  }

  return container
}

function genShape(remainingColors, diameter, i, total, svg) {
  var center = diameter / 2

  var shape = document.createElementNS(svgns, 'rect')
  shape.setAttributeNS(null, 'x', '0')
  shape.setAttributeNS(null, 'y', '0')
  shape.setAttributeNS(null, 'width', diameter)
  shape.setAttributeNS(null, 'height', diameter)

  var firstRot = generator.random()
  var angle = Math.PI * 2 * firstRot
  var velocity = diameter / total * generator.random() + (i * diameter / total)

  var tx = (Math.cos(angle) * velocity)
  var ty = (Math.sin(angle) * velocity)

  var translate = 'translate(' + tx + ' ' +  ty + ')'

  // Third random is a shape rotation on top of all of that.
  var secondRot = generator.random()
  var rot = (firstRot * 360) + secondRot * 180
  var rotate = 'rotate(' + rot.toFixed(1) + ' ' + center + ' ' + center + ')'
  var transform = translate + ' ' + rotate
  shape.setAttributeNS(null, 'transform', transform)
  var fill = genColor(remainingColors)
  shape.setAttributeNS(null, 'fill', fill)

  svg.appendChild(shape)
}

function genColor(colors) {
  var rand = generator.random()
  var idx = Math.floor(colors.length * generator.random())
  var color = colors.splice(idx,1)[0]
  return color
}

var wobble = 30
function hueShift(colors, generator) {
  var amount = (generator.random() * 30) - (wobble / 2)
  return colors.map(function(hex) {
    var color = Color(hex)
    color.rotate(amount)
    return color.hexString()
  })
}

      };
    };
  }
}, {package:"@metamask/jazzicon",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-popper/lib/cjs/utils.js", {"react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-popper/lib/cjs/utils.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIsomorphicLayoutEffect = exports.fromEntries = exports.setRef = exports.safeInvoke = exports.unwrapArray = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Takes an argument and if it's an array, returns the first item in the array,
 * otherwise returns the argument. Used for Preact compatibility.
 */
var unwrapArray = function unwrapArray(arg) {
  return Array.isArray(arg) ? arg[0] : arg;
};
/**
 * Takes a maybe-undefined function and arbitrary args and invokes the function
 * only if it is defined.
 */


exports.unwrapArray = unwrapArray;

var safeInvoke = function safeInvoke(fn) {
  if (typeof fn === 'function') {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return fn.apply(void 0, args);
  }
};
/**
 * Sets a ref using either a ref callback or a ref object
 */


exports.safeInvoke = safeInvoke;

var setRef = function setRef(ref, node) {
  // if its a function call it
  if (typeof ref === 'function') {
    return safeInvoke(ref, node);
  } // otherwise we should treat it as a ref object
  else if (ref != null) {
      ref.current = node;
    }
};
/**
 * Simple ponyfill for Object.fromEntries
 */


exports.setRef = setRef;

var fromEntries = function fromEntries(entries) {
  return entries.reduce(function (acc, _ref) {
    var key = _ref[0],
        value = _ref[1];
    acc[key] = value;
    return acc;
  }, {});
};
/**
 * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs
 */


exports.fromEntries = fromEntries;
var useIsomorphicLayoutEffect = typeof window !== 'undefined' && window.document && window.document.createElement ? React.useLayoutEffect : React.useEffect;
exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
      };
    };
  }
}, {package:"react-popper",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-popper/lib/cjs/utils.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/warning/warning.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/warning/warning.js
      return function (require, module, exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var __DEV__ = "development" !== 'production';

var warning = function() {};

if (__DEV__) {
  var printWarning = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);
    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }
    var argIndex = 0;
    var message = 'Warning: ' +
      format.replace(/%s/g, function() {
        return args[argIndex++];
      });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  }

  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
          '`warning(condition, format, ...args)` requires a warning ' +
          'message argument'
      );
    }
    if (!condition) {
      printWarning.apply(null, [format].concat(args));
    }
  };
}

module.exports = warning;

      };
    };
  }
}, {package:"warning",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/warning/warning.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-fast-compare/index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-fast-compare/index.js
      return function (require, module, exports) {
/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */

var hasElementType = typeof Element !== 'undefined';
var hasMap = typeof Map === 'function';
var hasSet = typeof Set === 'function';
var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;

// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

function equal(a, b) {
  // START: fast-deep-equal es6/index.js 3.1.1
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;

    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }

    // START: Modifications:
    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
    //    to co-exist with es5.
    // 2. Replace `for of` with es5 compliant iteration using `for`.
    //    Basically, take:
    //
    //    ```js
    //    for (i of a.entries())
    //      if (!b.has(i[0])) return false;
    //    ```
    //
    //    ... and convert to:
    //
    //    ```js
    //    it = a.entries();
    //    while (!(i = it.next()).done)
    //      if (!b.has(i.value[0])) return false;
    //    ```
    //
    //    **Note**: `i` access switches to `i.value`.
    var it;
    if (hasMap && (a instanceof Map) && (b instanceof Map)) {
      if (a.size !== b.size) return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!b.has(i.value[0])) return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!equal(i.value[1], b.get(i.value[0]))) return false;
      return true;
    }

    if (hasSet && (a instanceof Set) && (b instanceof Set)) {
      if (a.size !== b.size) return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!b.has(i.value[0])) return false;
      return true;
    }
    // END: Modifications

    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (a[i] !== b[i]) return false;
      return true;
    }

    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
    // END: fast-deep-equal

    // START: react-fast-compare
    // custom handling for DOM elements
    if (hasElementType && a instanceof Element) return false;

    // custom handling for React/Preact
    for (i = length; i-- !== 0;) {
      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
        // React-specific: avoid traversing React elements' _owner
        // Preact-specific: avoid traversing Preact elements' __v and __o
        //    __v = $_original / $_vnode
        //    __o = $_owner
        // These properties contain circular references and are not needed when
        // comparing the actual elements (and not their owners)
        // .$$typeof and ._store on just reasonable markers of elements

        continue;
      }

      // all other properties should be traversed as usual
      if (!equal(a[keys[i]], b[keys[i]])) return false;
    }
    // END: react-fast-compare

    // START: fast-deep-equal
    return true;
  }

  return a !== a && b !== b;
}
// end fast-deep-equal

module.exports = function isEqual(a, b) {
  try {
    return equal(a, b);
  } catch (error) {
    if (((error.message || '').match(/stack|recursion/i))) {
      // warn on circular references, don't crash
      // browsers give this different errors name and messages:
      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
      // firefox: "InternalError", too much recursion"
      // edge: "Error", "Out of stack space"
      console.warn('react-fast-compare cannot handle circular refs');
      return false;
    }
    // some other error. we should definitely know about these
    throw error;
  }
};

      };
    };
  }
}, {package:"react-fast-compare",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-fast-compare/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@popperjs/core/dist/cjs/popper.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@popperjs/core/dist/cjs/popper.js
      return function (require, module, exports) {
/**
 * @popperjs/core v2.9.2 - MIT License
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement);
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback

  );
}

function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }

  return getScrollParent(getParentNode(node));
}

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}

function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

  if (isIE && isHTMLElement(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = getComputedStyle(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = getParentNode(element);

  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}

var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    Object.keys(modifier).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }

          break;

        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }

        case 'phase':
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
          }

          break;

        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'effect':
          if (typeof modifier.effect !== 'function') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'requires':
          if (!Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }

          break;

        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }

          break;

        case 'options':
        case 'data':
          break;

        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }

      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);

    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}

var max = Math.max;
var min = Math.min;
var round = Math.round;

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;

  if (getComputedStyle(body || html).direction === 'rtl') {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

function getVariation(placement) {
  return placement.split('-')[1];
}

function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
    }
  }

  return offsets;
}

function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(referenceElement);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(options) {
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if ("development" !== "production") {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);

          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });

            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }

          var _getComputedStyle = getComputedStyle(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer


          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if ("development" !== "production") {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if ("development" !== "production") {
            __debug_loops__ += 1;

            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if ("development" !== "production") {
        console.error(INVALID_ELEMENT_ERROR);
      }

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}

var passive = {
  passive: true
};

function effect$2(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


var eventListeners = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect$2,
  data: {}
};

function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var popperOffsets$1 = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(round(x * dpr) / dpr) || 0,
    y: round(round(y * dpr) / dpr) || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets;

  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
      _ref3$x = _ref3.x,
      x = _ref3$x === void 0 ? 0 : _ref3$x,
      _ref3$y = _ref3.y,
      y = _ref3$y === void 0 ? 0 : _ref3$y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = top;
  var win = window;

  if (adaptive) {
    var offsetParent = getOffsetParent(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);

      if (getComputedStyle(offsetParent).position !== 'static') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === top) {
      sideY = bottom; // $FlowFixMe[prop-missing]

      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === left) {
      sideX = right; // $FlowFixMe[prop-missing]

      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref4) {
  var state = _ref4.state,
      options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if ("development" !== "production") {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }

  var commonStyles = {
    placement: getBasePlacement(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var computeStyles$1 = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect$1(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


var applyStyles$1 = {
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect$1,
  requires: ['computeStyles']
};

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var offset$1 = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};

var hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash$1[matched];
  });
}

var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;

    if ("development" !== "production") {
      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    }
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }

  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = getBasePlacement(placement);

    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }

    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


var flip$1 = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};

function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}

function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === 'y' ? top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min$1 = popperOffsets[mainAxis] + overflow[mainSide];
    var max$1 = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

    if (checkMainAxis) {
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var preventOverflow$1 = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if ("development" !== "production") {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }

  if (!contains(state.elements.popper, arrowElement)) {
    if ("development" !== "production") {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


var arrow$1 = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};

function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


var hide$1 = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};

var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
var createPopper$1 = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers$1
}); // eslint-disable-next-line import/no-unused-modules

var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

exports.applyStyles = applyStyles$1;
exports.arrow = arrow$1;
exports.computeStyles = computeStyles$1;
exports.createPopper = createPopper;
exports.createPopperLite = createPopper$1;
exports.defaultModifiers = defaultModifiers;
exports.detectOverflow = detectOverflow;
exports.eventListeners = eventListeners;
exports.flip = flip$1;
exports.hide = hide$1;
exports.offset = offset$1;
exports.popperGenerator = popperGenerator;
exports.popperOffsets = popperOffsets$1;
exports.preventOverflow = preventOverflow$1;
//# sourceMappingURL=popper.js.map

      };
    };
  }
}, {package:"@popperjs/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@popperjs/core/dist/cjs/popper.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/list-item/list-item.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/list-item/list-item.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ListItem;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function ListItem({
  title,
  subtitle,
  onClick,
  children,
  titleIcon,
  icon,
  rightContent,
  midContent,
  className,
  'data-testid': dataTestId
}) {
  const primaryClassName = (0, _classnames.default)('list-item', className, subtitle || children ? '' : 'list-item--single-content-row');
  return /*#__PURE__*/_react.default.createElement("div", {
    className: primaryClassName,
    onClick: onClick,
    "data-testid": dataTestId,
    role: "button",
    tabIndex: 0,
    onKeyPress: event => {
      if (event.key === 'Enter') {
        onClick();
      }
    }
  }, icon ? /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__icon"
  }, icon) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__heading"
  }, /*#__PURE__*/_react.default.isValidElement(title) ? title : /*#__PURE__*/_react.default.createElement("h2", {
    className: "list-item__title"
  }, title), titleIcon && /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__heading-wrap"
  }, titleIcon)), subtitle ? /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__subheading"
  }, subtitle) : null, children ? /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__actions"
  }, children) : null, midContent ? /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__mid-content"
  }, midContent) : null, rightContent ? /*#__PURE__*/_react.default.createElement("div", {
    className: "list-item__right-content"
  }, rightContent) : null);
}

ListItem.propTypes = {
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  titleIcon: _propTypes.default.node,
  subtitle: _propTypes.default.node,
  children: _propTypes.default.node,
  icon: _propTypes.default.node,
  rightContent: _propTypes.default.node,
  midContent: _propTypes.default.node,
  className: _propTypes.default.string,
  onClick: _propTypes.default.func,
  'data-testid': _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/list-item/list-item.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/common.util.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/common.util.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.camelCaseToCapitalize = camelCaseToCapitalize;

function camelCaseToCapitalize(str = '') {
  return str.replace(/([A-Z])/gu, ' $1').replace(/^./u, s => s.toUpperCase());
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/common.util.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenDisplayValue.js", {"../helpers/utils/token-util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/token-util.js","./useTokenData":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenData.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenDisplayValue.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTokenDisplayValue = useTokenDisplayValue;

var _react = require("react");

var _tokenUtil = require("../helpers/utils/token-util");

var _useTokenData = require("./useTokenData");

/**
 * Defines the shape for the Token input parameter for useTokenDisplayValue
 * @typedef {Object} Token
 * @property {string} symbol   - The string to use as a suffix for the token (eg. DAI)
 * @property {number} decimals - The number of decimals to show when displaying this type of token
 */

/**
 * useTokenDisplayValue
 * Given the data string from txParams and a token object with symbol and decimals, return
 * a displayValue that represents a string representing that token amount as a string. Also
 * return a tokenData object for downstream usage and the suffix for the token to use as props
 * for other hooks and/or components
 * @param {string}  [transactionData]    - Raw data string from token transaction
 * @param {Token}   [token]              - The token associated with this transaction
 * @param {boolean} [isTokenTransaction] - Due to the nature of hooks, it isn't possible
 *                                         to conditionally call this hook. This flag will
 *                                         force this hook to return null if it set as false
 *                                         which indicates the transaction is not associated
 *                                         with a token.
 * @return {string} - The computed displayValue of the provided transactionData and token
 */
function useTokenDisplayValue(transactionData, token, isTokenTransaction = true) {
  var _tokenData$args;

  const tokenData = (0, _useTokenData.useTokenData)(transactionData, isTokenTransaction);
  const shouldCalculateTokenValue = Boolean( // If we are currently processing a token transaction
  isTokenTransaction && // and raw transaction data string is provided
  transactionData && // and a token object has been provided
  token && ( // and we are able to parse the token details from the raw data
  tokenData === null || tokenData === void 0 ? void 0 : (_tokenData$args = tokenData.args) === null || _tokenData$args === void 0 ? void 0 : _tokenData$args.length));
  const displayValue = (0, _react.useMemo)(() => {
    if (!shouldCalculateTokenValue) {
      return null;
    }

    const tokenValue = (0, _tokenUtil.getTokenValueParam)(tokenData);
    return (0, _tokenUtil.calcTokenAmount)(tokenValue, token.decimals).toString(10);
  }, [shouldCalculateTokenValue, tokenData, token]);
  return displayValue;
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenDisplayValue.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenData.js", {"../helpers/utils/transactions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/transactions.util.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenData.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTokenData = useTokenData;

var _react = require("react");

var _transactions = require("../helpers/utils/transactions.util");

/**
 * useTokenData
 * Given the data string from txParams return a decoded object of the details of the
 * transaction data.
 * @param {string} [transactionData]     - Raw data string from token transaction
 * @param {boolean} [isTokenTransaction] - Due to the nature of hooks, it isn't possible
 *                                         to conditionally call this hook. This flag will
 *                                         force this hook to return null if it set as false
 *                                         which indicates the transaction is not associated
 *                                         with a token.
 * @return {Object} - Decoded token data
 */
function useTokenData(transactionData, isTokenTransaction = true) {
  return (0, _react.useMemo)(() => {
    if (!isTokenTransaction || !transactionData) {
      return null;
    }

    return (0, _transactions.getTokenData)(transactionData);
  }, [isTokenTransaction, transactionData]);
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenData.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useSwappedTokenValue.js", {"../../shared/constants/transaction":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/transaction.js","../../shared/modules/swaps.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/swaps.utils.js","../pages/swaps/swaps.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/swaps.util.js","../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","./useTokenFiatAmount":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenFiatAmount.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useSwappedTokenValue.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSwappedTokenValue = useSwappedTokenValue;

var _reactRedux = require("react-redux");

var _transaction = require("../../shared/constants/transaction");

var _swaps = require("../../shared/modules/swaps.utils");

var _swaps2 = require("../pages/swaps/swaps.util");

var _selectors = require("../selectors");

var _useTokenFiatAmount = require("./useTokenFiatAmount");

/**
 * @typedef {Object} SwappedTokenValue
 * @property {string} swapTokenValue - a primary currency string formatted for display
 * @property {string} swapTokenFiatAmount - a secondary currency string formatted for display
 * @property {boolean} isViewingReceivedTokenFromSwap - true if user is on the asset page for the
 *                                                      destination/received asset in a swap.
 */

/**
 * A Swap transaction group's primaryTransaction contains details of the swap,
 * including the source (from) and destination (to) token type (ETH, DAI, etc..)
 * When viewing an asset page that is not for the current chain's default token, we
 * need to determine if that asset is the token that was received (destination) from
 * the swap. In that circumstance we would want to show the primaryCurrency in the
 * activity list that is most relevant for that token (- 1000 DAI, for example, when
 * swapping DAI for ETH).
 * @param {__import__('../selectors').transactionGroup} transactionGroup - Group of transactions by nonce
 * @param {__import__('./useTokenDisplayValue').Token} currentAsset - The current asset the user is looking at
 * @returns {SwappedTokenValue}
 */
function useSwappedTokenValue(transactionGroup, currentAsset) {
  const {
    symbol,
    decimals,
    address
  } = currentAsset;
  const {
    primaryTransaction,
    initialTransaction
  } = transactionGroup;
  const {
    type
  } = initialTransaction;
  const {
    from: senderAddress
  } = initialTransaction.txParams || {};
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const isViewingReceivedTokenFromSwap = (currentAsset === null || currentAsset === void 0 ? void 0 : currentAsset.symbol) === primaryTransaction.destinationTokenSymbol || (0, _swaps.isSwapsDefaultTokenAddress)(currentAsset.address, chainId) && (0, _swaps.isSwapsDefaultTokenSymbol)(primaryTransaction.destinationTokenSymbol, chainId);
  const swapTokenValue = type === _transaction.TRANSACTION_TYPES.SWAP && isViewingReceivedTokenFromSwap ? (0, _swaps2.getSwapsTokensReceivedFromTxMeta)(primaryTransaction.destinationTokenSymbol, initialTransaction, address, senderAddress, decimals, null, chainId) : type === _transaction.TRANSACTION_TYPES.SWAP && primaryTransaction.swapTokenValue;
  const isNegative = typeof swapTokenValue === 'string' ? Math.sign(swapTokenValue) === -1 : false;

  const _swapTokenFiatAmount = (0, _useTokenFiatAmount.useTokenFiatAmount)(address, swapTokenValue || '', symbol);

  const swapTokenFiatAmount = swapTokenValue && isViewingReceivedTokenFromSwap && _swapTokenFiatAmount;
  return {
    swapTokenValue,
    swapTokenFiatAmount,
    isViewingReceivedTokenFromSwap,
    isNegative
  };
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useSwappedTokenValue.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCurrentAsset.js", {"../../shared/constants/swaps":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/swaps.js","../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCurrentAsset.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCurrentAsset = useCurrentAsset;

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _metamask = require("../ducks/metamask/metamask");

var _selectors = require("../selectors");

var _routes = require("../helpers/constants/routes");

var _util = require("../helpers/utils/util");

var _swaps = require("../../shared/constants/swaps");

/**
 * Returns a token object for the asset that is currently being viewed.
 * Will return the default token object for the current chain when the
 * user is viewing either the primary, unfiltered, activity list or the
 * default token asset page.
 * @returns {__import__('./useTokenDisplayValue').Token}
 */
function useCurrentAsset() {
  var _match$params;

  // To determine which primary currency to display for swaps transactions we need to be aware
  // of which asset, if any, we are viewing at present
  const match = (0, _reactRouterDom.useRouteMatch)({
    path: `${_routes.ASSET_ROUTE}/:asset`,
    exact: true,
    strict: true
  });
  const tokenAddress = match === null || match === void 0 ? void 0 : (_match$params = match.params) === null || _match$params === void 0 ? void 0 : _match$params.asset;
  const knownTokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const token = tokenAddress && knownTokens.find(({
    address
  }) => (0, _util.isEqualCaseInsensitive)(address, tokenAddress));
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  return token !== null && token !== void 0 ? token : _swaps.SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId] || _swaps.ETH_SWAPS_TOKEN_OBJECT;
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCurrentAsset.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-icon/transaction-icon.js", {"../../../../shared/constants/transaction":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/transaction.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","../../ui/icon/approve-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/approve-icon.component.js","../../ui/icon/interaction-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/interaction-icon.component.js","../../ui/icon/receive-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/receive-icon.component.js","../../ui/icon/send-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/send-icon.component.js","../../ui/icon/sign-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/sign-icon.component.js","../../ui/icon/swap-icon-for-list.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/swap-icon-for-list.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-icon/transaction-icon.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransactionIcon;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _approveIcon = _interopRequireDefault(require("../../ui/icon/approve-icon.component"));

var _interactionIcon = _interopRequireDefault(require("../../ui/icon/interaction-icon.component"));

var _receiveIcon = _interopRequireDefault(require("../../ui/icon/receive-icon.component"));

var _sendIcon = _interopRequireDefault(require("../../ui/icon/send-icon.component"));

var _signIcon = _interopRequireDefault(require("../../ui/icon/sign-icon.component"));

var _swapIconForList = _interopRequireDefault(require("../../ui/icon/swap-icon-for-list.component"));

var _transaction = require("../../../../shared/constants/transaction");

var _actions = require("../../../store/actions");

const ICON_MAP = {
  [_transaction.TRANSACTION_GROUP_CATEGORIES.APPROVAL]: _approveIcon.default,
  [_transaction.TRANSACTION_GROUP_CATEGORIES.INTERACTION]: _interactionIcon.default,
  [_transaction.TRANSACTION_GROUP_CATEGORIES.SEND]: _sendIcon.default,
  [_transaction.TRANSACTION_GROUP_CATEGORIES.SIGNATURE_REQUEST]: _signIcon.default,
  [_transaction.TRANSACTION_GROUP_CATEGORIES.RECEIVE]: _receiveIcon.default,
  [_transaction.TRANSACTION_GROUP_CATEGORIES.SWAP]: _swapIconForList.default
};
const FAIL_COLOR = '#D73A49';
const PENDING_COLOR = '#6A737D';
const OK_COLOR = '#2F80ED';
const COLOR_MAP = {
  [_transaction.TRANSACTION_GROUP_STATUSES.PENDING]: PENDING_COLOR,
  [_transaction.TRANSACTION_STATUSES.UNAPPROVED]: PENDING_COLOR,
  [_transaction.TRANSACTION_STATUSES.APPROVED]: PENDING_COLOR,
  [_transaction.TRANSACTION_STATUSES.FAILED]: FAIL_COLOR,
  [_transaction.TRANSACTION_STATUSES.REJECTED]: FAIL_COLOR,
  [_transaction.TRANSACTION_GROUP_STATUSES.CANCELLED]: FAIL_COLOR,
  [_transaction.TRANSACTION_STATUSES.DROPPED]: FAIL_COLOR,
  [_transaction.TRANSACTION_STATUSES.SUBMITTED]: PENDING_COLOR
};

function TransactionIcon({
  status,
  category
}) {
  const dispatch = (0, _reactRedux.useDispatch)();
  const color = COLOR_MAP[status] || OK_COLOR;
  const Icon = ICON_MAP[category];

  if (!Icon) {
    dispatch((0, _actions.captureSingleException)(`The category prop passed to TransactionIcon is not supported. The prop is: ${category}`));
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-icon__grey-circle"
    });
  }

  return /*#__PURE__*/_react.default.createElement(Icon, {
    color: color,
    size: 28
  });
}

TransactionIcon.propTypes = {
  status: _propTypes.default.oneOf([_transaction.TRANSACTION_GROUP_STATUSES.PENDING, _transaction.TRANSACTION_STATUSES.UNAPPROVED, _transaction.TRANSACTION_STATUSES.APPROVED, _transaction.TRANSACTION_STATUSES.FAILED, _transaction.TRANSACTION_STATUSES.REJECTED, _transaction.TRANSACTION_GROUP_STATUSES.CANCELLED, _transaction.TRANSACTION_STATUSES.DROPPED, _transaction.TRANSACTION_STATUSES.CONFIRMED, _transaction.TRANSACTION_STATUSES.SUBMITTED]).isRequired,
  category: _propTypes.default.oneOf([_transaction.TRANSACTION_GROUP_CATEGORIES.APPROVAL, _transaction.TRANSACTION_GROUP_CATEGORIES.INTERACTION, _transaction.TRANSACTION_GROUP_CATEGORIES.SEND, _transaction.TRANSACTION_GROUP_CATEGORIES.SIGNATURE_REQUEST, _transaction.TRANSACTION_GROUP_CATEGORIES.RECEIVE, _transaction.TRANSACTION_GROUP_CATEGORIES.SWAP]).isRequired
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-icon/transaction-icon.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/cancel-button/cancel-button.js", {"../../../../shared/modules/gas.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/gas.utils.js","../../../ducks/metamask/metamask":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/metamask/metamask.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../hooks/useIncrementedGasFees":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useIncrementedGasFees.js","../../../pages/send/send.utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send.utils.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@material-ui/core":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/index.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/cancel-button/cancel-button.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CancelButton;

var _core = require("@material-ui/core");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _classnames = _interopRequireDefault(require("classnames"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _gas = require("../../../../shared/modules/gas.utils");

var _metamask = require("../../../ducks/metamask/metamask");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _useIncrementedGasFees = require("../../../hooks/useIncrementedGasFees");

var _send = require("../../../pages/send/send.utils");

var _selectors = require("../../../selectors");

function CancelButton({
  cancelTransaction,
  transaction,
  detailsModal
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const customCancelGasSettings = (0, _useIncrementedGasFees.useIncrementedGasFees)(transaction);
  const selectedAccount = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const hasEnoughCancelGas = (0, _send.isBalanceSufficient)({
    amount: '0x0',
    gasTotal: (0, _gas.getMaximumGasTotalInHexWei)(customCancelGasSettings),
    balance: selectedAccount.balance,
    conversionRate
  });

  const btn = /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: cancelTransaction,
    type: "secondary",
    className: (0, _classnames.default)({
      'transaction-list-item__header-button': !detailsModal,
      'transaction-list-item-details__header-button-rounded-button': detailsModal
    }),
    disabled: !hasEnoughCancelGas
  }, t('cancel'));

  return hasEnoughCancelGas ? btn : /*#__PURE__*/_react.default.createElement(_core.Tooltip, {
    title: t('notEnoughGas'),
    "data-testid": "not-enough-gas__tooltip",
    position: "bottom"
  }, /*#__PURE__*/_react.default.createElement("div", null, btn));
}

CancelButton.propTypes = {
  transaction: _propTypes.default.object,
  cancelTransaction: _propTypes.default.func,
  detailsModal: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/cancel-button/cancel-button.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item-details/transaction-list-item-details.container.js", {"../../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","./transaction-list-item-details.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item-details/transaction-list-item-details.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item-details/transaction-list-item-details.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

var _transactionListItemDetails = _interopRequireDefault(require("./transaction-list-item-details.component"));

const mapStateToProps = (state, ownProps) => {
  const {
    metamask
  } = state;
  const {
    ensResolutionsByAddress
  } = metamask;
  const {
    recipientAddress,
    senderAddress
  } = ownProps;
  let recipientEns;

  if (recipientAddress) {
    const address = (0, _hexstringUtils.toChecksumHexAddress)(recipientAddress);
    recipientEns = ensResolutionsByAddress[address] || '';
  }

  const addressBook = (0, _selectors.getAddressBook)(state);

  const getNickName = address => {
    const entry = addressBook.find(contact => {
      return address.toLowerCase() === contact.address.toLowerCase();
    });
    return entry && entry.name || '';
  };

  const rpcPrefs = (0, _selectors.getRpcPrefsForCurrentProvider)(state);
  return {
    rpcPrefs,
    recipientEns,
    senderNickname: getNickName(senderAddress),
    recipientNickname: recipientAddress ? getNickName(recipientAddress) : null
  };
};

const mapDispatchToProps = dispatch => {
  return {
    tryReverseResolveAddress: address => {
      return dispatch((0, _actions.tryReverseResolveAddress)(address));
    }
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_transactionListItemDetails.default);

exports.default = _default;


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item-details/transaction-list-item-details.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/qr.js/lib/math.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/qr.js/lib/math.js
      return function (require, module, exports) {
var QRMath = {

	glog : function(n) {
	
		if (n < 1) {
			throw new Error("glog(" + n + ")");
		}
		
		return QRMath.LOG_TABLE[n];
	},
	
	gexp : function(n) {
	
		while (n < 0) {
			n += 255;
		}
	
		while (n >= 256) {
			n -= 255;
		}
	
		return QRMath.EXP_TABLE[n];
	},
	
	EXP_TABLE : new Array(256),
	
	LOG_TABLE : new Array(256)

};
	
for (var i = 0; i < 8; i++) {
	QRMath.EXP_TABLE[i] = 1 << i;
}
for (var i = 8; i < 256; i++) {
	QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4]
		^ QRMath.EXP_TABLE[i - 5]
		^ QRMath.EXP_TABLE[i - 6]
		^ QRMath.EXP_TABLE[i - 8];
}
for (var i = 0; i < 255; i++) {
	QRMath.LOG_TABLE[QRMath.EXP_TABLE[i] ] = i;
}

module.exports = QRMath;

      };
    };
  }
}, {package:"qr.js",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/qr.js/lib/math.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/qr.js/lib/mode.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/qr.js/lib/mode.js
      return function (require, module, exports) {
module.exports = {
	MODE_NUMBER :		1 << 0,
	MODE_ALPHA_NUM : 	1 << 1,
	MODE_8BIT_BYTE : 	1 << 2,
	MODE_KANJI :		1 << 3
};

      };
    };
  }
}, {package:"qr.js",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/qr.js/lib/mode.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@zxing/browser/cjs/common/navigator-utils.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@zxing/browser/cjs/common/navigator-utils.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canEnumerateDevices = exports.hasNavigator = void 0;
/**
 * If navigator is present.
 */
function hasNavigator() {
    return typeof navigator !== 'undefined';
}
exports.hasNavigator = hasNavigator;
/**
 * If mediaDevices under navigator is supported.
 */
function isMediaDevicesSupported() {
    return hasNavigator() && !!navigator.mediaDevices;
}
/**
 * If enumerateDevices under navigator is supported.
 */
function canEnumerateDevices() {
    return !!(isMediaDevicesSupported() && navigator.mediaDevices.enumerateDevices);
}
exports.canEnumerateDevices = canEnumerateDevices;
//# sourceMappingURL=navigator-utils.js.map
      };
    };
  }
}, {package:"@zxing/browser",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@zxing/browser/cjs/common/navigator-utils.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-price-button-group/gas-price-button-group.component.js", {"../../../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../ui/button-group":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button-group/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-price-button-group/gas-price-button-group.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _buttonGroup = _interopRequireDefault(require("../../../ui/button-group"));

var _button = _interopRequireDefault(require("../../../ui/button"));

var _common = require("../../../../helpers/constants/common");

const _excluded = ["buttonDataLoading", "handleGasPriceSelection"],
      _excluded2 = ["priceInHexWei"],
      _excluded3 = ["gasButtonInfo", "defaultActiveButtonIndex", "newActiveButtonIndex", "noButtonActiveByDefault", "buttonDataLoading"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const GAS_OBJECT_PROPTYPES_SHAPE = {
  gasEstimateType: _propTypes.default.oneOf(Object.values(_common.GAS_ESTIMATE_TYPES)).isRequired,
  feeInPrimaryCurrency: _propTypes.default.string,
  feeInSecondaryCurrency: _propTypes.default.string,
  timeEstimate: _propTypes.default.string,
  priceInHexWei: _propTypes.default.string
};

class GasPriceButtonGroup extends _react.Component {
  gasEstimateTypeLabel(gasEstimateType) {
    if (gasEstimateType === _common.GAS_ESTIMATE_TYPES.SLOW) {
      return this.context.t('slow');
    } else if (gasEstimateType === _common.GAS_ESTIMATE_TYPES.AVERAGE) {
      return this.context.t('average');
    } else if (gasEstimateType === _common.GAS_ESTIMATE_TYPES.FAST) {
      return this.context.t('fast');
    } else if (gasEstimateType === _common.GAS_ESTIMATE_TYPES.FASTEST) {
      return this.context.t('fastest');
    }

    throw new Error(`Unrecognized gas estimate type: ${gasEstimateType}`);
  }

  renderButtonContent({
    gasEstimateType,
    feeInPrimaryCurrency,
    feeInSecondaryCurrency,
    timeEstimate
  }, {
    className,
    showCheck
  }) {
    return /*#__PURE__*/_react.default.createElement("div", null, gasEstimateType && /*#__PURE__*/_react.default.createElement("div", {
      className: `${className}__label`
    }, this.gasEstimateTypeLabel(gasEstimateType)), timeEstimate && /*#__PURE__*/_react.default.createElement("div", {
      className: `${className}__time-estimate`
    }, timeEstimate), feeInPrimaryCurrency && /*#__PURE__*/_react.default.createElement("div", {
      className: `${className}__primary-currency`
    }, feeInPrimaryCurrency), feeInSecondaryCurrency && /*#__PURE__*/_react.default.createElement("div", {
      className: `${className}__secondary-currency`
    }, feeInSecondaryCurrency), showCheck && /*#__PURE__*/_react.default.createElement("div", {
      className: "button-check-wrapper"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check fa-sm"
    })));
  }

  renderButton(_ref, _ref2, index) {
    let {
      buttonDataLoading: _,
      handleGasPriceSelection
    } = _ref2,
        buttonContentPropsAndFlags = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
    let {
      priceInHexWei
    } = _ref,
        renderableGasInfo = (0, _objectWithoutProperties2.default)(_ref, _excluded2);
    return /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: () => handleGasPriceSelection({
        gasPrice: priceInHexWei,
        gasEstimateType: renderableGasInfo.gasEstimateType
      }),
      key: `gas-price-button-${index}`
    }, this.renderButtonContent(renderableGasInfo, buttonContentPropsAndFlags));
  }

  render() {
    const _this$props = this.props,
          {
      gasButtonInfo,
      defaultActiveButtonIndex = 1,
      newActiveButtonIndex,
      noButtonActiveByDefault = false,
      buttonDataLoading
    } = _this$props,
          buttonPropsAndFlags = (0, _objectWithoutProperties2.default)(_this$props, _excluded3);
    return buttonDataLoading ? /*#__PURE__*/_react.default.createElement("div", {
      className: `${buttonPropsAndFlags.className}__loading-container`
    }, this.context.t('loading')) : /*#__PURE__*/_react.default.createElement(_buttonGroup.default, {
      className: buttonPropsAndFlags.className,
      defaultActiveButtonIndex: defaultActiveButtonIndex,
      newActiveButtonIndex: newActiveButtonIndex,
      noButtonActiveByDefault: noButtonActiveByDefault
    }, gasButtonInfo.map((obj, index) => this.renderButton(obj, buttonPropsAndFlags, index)));
  }

}

exports.default = GasPriceButtonGroup;
(0, _defineProperty2.default)(GasPriceButtonGroup, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(GasPriceButtonGroup, "propTypes", {
  buttonDataLoading: _propTypes.default.bool,
  className: _propTypes.default.string,
  defaultActiveButtonIndex: _propTypes.default.number,
  gasButtonInfo: _propTypes.default.arrayOf(_propTypes.default.shape(GAS_OBJECT_PROPTYPES_SHAPE)),
  handleGasPriceSelection: _propTypes.default.func,
  newActiveButtonIndex: _propTypes.default.number,
  noButtonActiveByDefault: _propTypes.default.bool,
  showCheck: _propTypes.default.bool
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/gas-customization/gas-price-button-group/gas-price-button-group.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/import-with-seed-phrase/import-with-seed-phrase.component.js", {"../../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../../components/ui/text-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/text-field/index.js","../../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","ethers":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethers/lib/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/import-with-seed-phrase/import-with-seed-phrase.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ethers = require("ethers");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _textField = _interopRequireDefault(require("../../../../components/ui/text-field"));

var _button = _interopRequireDefault(require("../../../../components/ui/button"));

var _routes = require("../../../../helpers/constants/routes");

var _util = require("../../../../helpers/utils/util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const {
  isValidMnemonic
} = _ethers.ethers.utils;

class ImportWithSeedPhrase extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      seedPhrase: '',
      showSeedPhrase: false,
      password: '',
      confirmPassword: '',
      seedPhraseError: '',
      passwordError: '',
      confirmPasswordError: '',
      termsChecked: false
    });
    (0, _defineProperty2.default)(this, "parseSeedPhrase", seedPhrase => {
      var _trim$toLowerCase$mat;

      return ((_trim$toLowerCase$mat = (seedPhrase || '').trim().toLowerCase().match(/\w+/gu)) === null || _trim$toLowerCase$mat === void 0 ? void 0 : _trim$toLowerCase$mat.join(' ')) || '';
    });
    (0, _defineProperty2.default)(this, "handleImport", async event => {
      event.preventDefault();

      if (!this.isValid()) {
        return;
      }

      const {
        password,
        seedPhrase
      } = this.state;
      const {
        history,
        onSubmit,
        setSeedPhraseBackedUp,
        initializeThreeBox
      } = this.props;

      try {
        await onSubmit(password, this.parseSeedPhrase(seedPhrase));
        this.context.metricsEvent({
          eventOpts: {
            category: 'Onboarding',
            action: 'Import Seed Phrase',
            name: 'Import Complete'
          }
        });
        setSeedPhraseBackedUp(true).then(async () => {
          initializeThreeBox();
          history.replace(_routes.INITIALIZE_END_OF_FLOW_ROUTE);
        });
      } catch (error) {
        this.setState({
          seedPhraseError: error.message
        });
      }
    });
    (0, _defineProperty2.default)(this, "onTermsKeyPress", ({
      key
    }) => {
      if (key === ' ' || key === 'Enter') {
        this.toggleTermsCheck();
      }
    });
    (0, _defineProperty2.default)(this, "toggleTermsCheck", () => {
      this.context.metricsEvent({
        eventOpts: {
          category: 'Onboarding',
          action: 'Import Seed Phrase',
          name: 'Check ToS'
        }
      });
      this.setState(prevState => ({
        termsChecked: !prevState.termsChecked
      }));
    });
    (0, _defineProperty2.default)(this, "toggleShowSeedPhrase", () => {
      this.setState(({
        showSeedPhrase
      }) => ({
        showSeedPhrase: !showSeedPhrase
      }));
    });
  }

  UNSAFE_componentWillMount() {
    this._onBeforeUnload = () => this.context.metricsEvent({
      eventOpts: {
        category: 'Onboarding',
        action: 'Import Seed Phrase',
        name: 'Close window on import screen'
      },
      customVariables: {
        errorLabel: 'Seed Phrase Error',
        errorMessage: this.state.seedPhraseError
      }
    });

    window.addEventListener('beforeunload', this._onBeforeUnload);
  }

  componentWillUnmount() {
    window.removeEventListener('beforeunload', this._onBeforeUnload);
  }

  handleSeedPhraseChange(seedPhrase) {
    let seedPhraseError = '';

    if (seedPhrase) {
      const parsedSeedPhrase = this.parseSeedPhrase(seedPhrase);
      const wordCount = parsedSeedPhrase.split(/\s/u).length;

      if (wordCount % 3 !== 0 || wordCount > 24 || wordCount < 12) {
        seedPhraseError = this.context.t('seedPhraseReq');
      } else if (!isValidMnemonic(parsedSeedPhrase)) {
        seedPhraseError = this.context.t('invalidSeedPhrase');
      }
    }

    this.setState({
      seedPhrase,
      seedPhraseError
    });
  }

  handlePasswordChange(password) {
    const {
      t
    } = this.context;
    this.setState(state => {
      const {
        confirmPassword
      } = state;
      let confirmPasswordError = '';
      let passwordError = '';

      if (password && password.length < 8) {
        passwordError = t('passwordNotLongEnough');
      }

      if (confirmPassword && password !== confirmPassword) {
        confirmPasswordError = t('passwordsDontMatch');
      }

      return {
        password,
        passwordError,
        confirmPasswordError
      };
    });
  }

  handleConfirmPasswordChange(confirmPassword) {
    const {
      t
    } = this.context;
    this.setState(state => {
      const {
        password
      } = state;
      let confirmPasswordError = '';

      if (password !== confirmPassword) {
        confirmPasswordError = t('passwordsDontMatch');
      }

      return {
        confirmPassword,
        confirmPasswordError
      };
    });
  }

  isValid() {
    const {
      seedPhrase,
      password,
      confirmPassword,
      passwordError,
      confirmPasswordError,
      seedPhraseError
    } = this.state;

    if (!password || !confirmPassword || !seedPhrase || password !== confirmPassword) {
      return false;
    }

    if (password.length < 8) {
      return false;
    }

    return !passwordError && !confirmPasswordError && !seedPhraseError;
  }

  render() {
    const {
      t
    } = this.context;
    const {
      seedPhraseError,
      showSeedPhrase,
      passwordError,
      confirmPasswordError,
      termsChecked
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("form", {
      className: "first-time-flow__form",
      onSubmit: this.handleImport
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__create-back"
    }, /*#__PURE__*/_react.default.createElement("a", {
      onClick: e => {
        e.preventDefault();
        this.context.metricsEvent({
          eventOpts: {
            category: 'Onboarding',
            action: 'Import Seed Phrase',
            name: 'Go Back from Onboarding Import'
          },
          customVariables: {
            errorLabel: 'Seed Phrase Error',
            errorMessage: seedPhraseError
          }
        });
        this.props.history.push(_routes.INITIALIZE_SELECT_ACTION_ROUTE);
      },
      href: "#"
    }, `< ${t('back')}`)), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__header"
    }, t('importAccountSeedPhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__text-block"
    }, t('secretPhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__textarea-wrapper"
    }, /*#__PURE__*/_react.default.createElement("label", null, t('secretRecoveryPhrase')), showSeedPhrase ? /*#__PURE__*/_react.default.createElement("textarea", {
      className: "first-time-flow__textarea",
      onChange: e => this.handleSeedPhraseChange(e.target.value),
      onPaste: _util.clearClipboard,
      value: this.state.seedPhrase,
      placeholder: t('seedPhrasePlaceholder'),
      autoComplete: "off"
    }) : /*#__PURE__*/_react.default.createElement(_textField.default, {
      className: "first-time-flow__textarea first-time-flow__seedphrase",
      type: "password",
      onChange: e => this.handleSeedPhraseChange(e.target.value),
      value: this.state.seedPhrase,
      placeholder: t('seedPhrasePlaceholderPaste'),
      autoComplete: "off",
      onPaste: _util.clearClipboard
    }), seedPhraseError ? /*#__PURE__*/_react.default.createElement("span", {
      className: "error"
    }, seedPhraseError) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__checkbox-container",
      onClick: this.toggleShowSeedPhrase
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__checkbox",
      tabIndex: "0",
      role: "checkbox",
      onKeyPress: this.toggleShowSeedPhrase,
      "aria-checked": showSeedPhrase,
      "aria-labelledby": "ftf-chk1-label"
    }, showSeedPhrase ? /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check fa-2x"
    }) : null), /*#__PURE__*/_react.default.createElement("span", {
      id: "ftf-chk1-label",
      className: "first-time-flow__checkbox-label"
    }, t('showSeedPhrase')))), /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: "password",
      label: t('newPassword'),
      type: "password",
      className: "first-time-flow__input",
      value: this.state.password,
      onChange: event => this.handlePasswordChange(event.target.value),
      error: passwordError,
      autoComplete: "new-password",
      margin: "normal",
      largeLabel: true
    }), /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: "confirm-password",
      label: t('confirmPassword'),
      type: "password",
      className: "first-time-flow__input",
      value: this.state.confirmPassword,
      onChange: event => this.handleConfirmPasswordChange(event.target.value),
      error: confirmPasswordError,
      autoComplete: "new-password",
      margin: "normal",
      largeLabel: true
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__checkbox-container",
      onClick: this.toggleTermsCheck
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "first-time-flow__checkbox first-time-flow__terms",
      tabIndex: "0",
      role: "checkbox",
      onKeyPress: this.onTermsKeyPress,
      "aria-checked": termsChecked,
      "aria-labelledby": "ftf-chk1-label"
    }, termsChecked ? /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check fa-2x"
    }) : null), /*#__PURE__*/_react.default.createElement("span", {
      id: "ftf-chk1-label",
      className: "first-time-flow__checkbox-label"
    }, t('acceptTermsOfUse', [/*#__PURE__*/_react.default.createElement("a", {
      onClick: e => e.stopPropagation(),
      key: "first-time-flow__link-text",
      href: "https://d-wallet.io/terms",
      target: "_blank",
      rel: "noopener noreferrer"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "first-time-flow__link-text"
    }, t('terms')))]))), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      submit: true,
      className: "first-time-flow__button",
      disabled: !this.isValid() || !termsChecked
    }, t('import')));
  }

}

exports.default = ImportWithSeedPhrase;
(0, _defineProperty2.default)(ImportWithSeedPhrase, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(ImportWithSeedPhrase, "propTypes", {
  history: _propTypes.default.object,
  onSubmit: _propTypes.default.func.isRequired,
  setSeedPhraseBackedUp: _propTypes.default.func,
  initializeThreeBox: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/create-password/import-with-seed-phrase/import-with-seed-phrase.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/utils/discount_lodash.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/utils/discount_lodash.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function memoize(fn) {
    var result = null;
    var memoized = function () {
        if (result == null) {
            result = fn();
        }
        return result;
    };
    return memoized;
}
exports.memoize = memoize;
/**
 * drop-in replacement for _.without
 */
function without(items, item) {
    return items.filter(function (i) { return i !== item; });
}
exports.without = without;
function union(itemsA, itemsB) {
    var set = new Set();
    var insertItem = function (item) { return set.add(item); };
    itemsA.forEach(insertItem);
    itemsB.forEach(insertItem);
    var result = [];
    set.forEach(function (key) { return result.push(key); });
    return result;
}
exports.union = union;

      };
    };
  }
}, {package:"react-dnd-html5-backend",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/utils/discount_lodash.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/MonotonicInterpolant.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/MonotonicInterpolant.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MonotonicInterpolant = /** @class */ (function () {
    function MonotonicInterpolant(xs, ys) {
        var length = xs.length;
        // Rearrange xs and ys so that xs is sorted
        var indexes = [];
        for (var i = 0; i < length; i++) {
            indexes.push(i);
        }
        indexes.sort(function (a, b) { return (xs[a] < xs[b] ? -1 : 1); });
        // Get consecutive differences and slopes
        var dys = [];
        var dxs = [];
        var ms = [];
        var dx;
        var dy;
        for (var i = 0; i < length - 1; i++) {
            dx = xs[i + 1] - xs[i];
            dy = ys[i + 1] - ys[i];
            dxs.push(dx);
            dys.push(dy);
            ms.push(dy / dx);
        }
        // Get degree-1 coefficients
        var c1s = [ms[0]];
        for (var i = 0; i < dxs.length - 1; i++) {
            var m2 = ms[i];
            var mNext = ms[i + 1];
            if (m2 * mNext <= 0) {
                c1s.push(0);
            }
            else {
                dx = dxs[i];
                var dxNext = dxs[i + 1];
                var common = dx + dxNext;
                c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));
            }
        }
        c1s.push(ms[ms.length - 1]);
        // Get degree-2 and degree-3 coefficients
        var c2s = [];
        var c3s = [];
        var m;
        for (var i = 0; i < c1s.length - 1; i++) {
            m = ms[i];
            var c1 = c1s[i];
            var invDx = 1 / dxs[i];
            var common = c1 + c1s[i + 1] - m - m;
            c2s.push((m - c1 - common) * invDx);
            c3s.push(common * invDx * invDx);
        }
        this.xs = xs;
        this.ys = ys;
        this.c1s = c1s;
        this.c2s = c2s;
        this.c3s = c3s;
    }
    MonotonicInterpolant.prototype.interpolate = function (x) {
        var _a = this, xs = _a.xs, ys = _a.ys, c1s = _a.c1s, c2s = _a.c2s, c3s = _a.c3s;
        // The rightmost point in the dataset should give an exact result
        var i = xs.length - 1;
        if (x === xs[i]) {
            return ys[i];
        }
        // Search for the interval x is in, returning the corresponding y if x is one of the original xs
        var low = 0;
        var high = c3s.length - 1;
        var mid;
        while (low <= high) {
            mid = Math.floor(0.5 * (low + high));
            var xHere = xs[mid];
            if (xHere < x) {
                low = mid + 1;
            }
            else if (xHere > x) {
                high = mid - 1;
            }
            else {
                return ys[mid];
            }
        }
        i = Math.max(0, high);
        // Interpolate
        var diff = x - xs[i];
        var diffSq = diff * diff;
        return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;
    };
    return MonotonicInterpolant;
}());
exports.default = MonotonicInterpolant;

      };
    };
  }
}, {package:"react-dnd-html5-backend",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/MonotonicInterpolant.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeDragSources/NativeDragSource.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeDragSources/NativeDragSource.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NativeDragSource = /** @class */ (function () {
    function NativeDragSource(config) {
        var _this = this;
        this.config = config;
        this.item = {};
        Object.keys(this.config.exposeProperties).forEach(function (property) {
            Object.defineProperty(_this.item, property, {
                configurable: true,
                enumerable: true,
                get: function () {
                    // tslint:disable-next-line no-console
                    console.warn("Browser doesn't allow reading \"" + property + "\" until the drop event.");
                    return null;
                },
            });
        });
    }
    NativeDragSource.prototype.mutateItemByReadingDataTransfer = function (dataTransfer) {
        var _this = this;
        var newProperties = {};
        if (dataTransfer) {
            Object.keys(this.config.exposeProperties).forEach(function (property) {
                newProperties[property] = {
                    value: _this.config.exposeProperties[property](dataTransfer, _this.config.matchesTypes),
                };
            });
        }
        Object.defineProperties(this.item, newProperties);
    };
    NativeDragSource.prototype.canDrag = function () {
        return true;
    };
    NativeDragSource.prototype.beginDrag = function () {
        return this.item;
    };
    NativeDragSource.prototype.isDragging = function (monitor, handle) {
        return handle === monitor.getSourceId();
    };
    NativeDragSource.prototype.endDrag = function () {
        // empty
    };
    return NativeDragSource;
}());
exports.NativeDragSource = NativeDragSource;

      };
    };
  }
}, {package:"react-dnd-html5-backend",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeDragSources/NativeDragSource.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeDragSources/nativeTypesConfig.js", {"../NativeTypes":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeTypes.js","./getDataFromDataTransfer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeDragSources/getDataFromDataTransfer.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeDragSources/nativeTypesConfig.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var NativeTypes = require("../NativeTypes");
var getDataFromDataTransfer_1 = require("./getDataFromDataTransfer");
exports.nativeTypesConfig = (_a = {},
    _a[NativeTypes.FILE] = {
        exposeProperties: {
            files: function (dataTransfer) {
                return Array.prototype.slice.call(dataTransfer.files);
            },
            items: function (dataTransfer) { return dataTransfer.items; },
        },
        matchesTypes: ['Files'],
    },
    _a[NativeTypes.URL] = {
        exposeProperties: {
            urls: function (dataTransfer, matchesTypes) {
                return getDataFromDataTransfer_1.getDataFromDataTransfer(dataTransfer, matchesTypes, '').split('\n');
            },
        },
        matchesTypes: ['Url', 'text/uri-list'],
    },
    _a[NativeTypes.TEXT] = {
        exposeProperties: {
            text: function (dataTransfer, matchesTypes) {
                return getDataFromDataTransfer_1.getDataFromDataTransfer(dataTransfer, matchesTypes, '');
            },
        },
        matchesTypes: ['Text', 'text/plain'],
    },
    _a);

      };
    };
  }
}, {package:"react-dnd-html5-backend",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeDragSources/nativeTypesConfig.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/confirm-seed-phrase/draggable-seed.component.js", {"@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-dnd":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/confirm-seed-phrase/draggable-seed.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactDnd = require("react-dnd");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class DraggableSeed extends _react.Component {
  UNSAFE_componentWillReceiveProps(nextProps) {
    const {
      isOver,
      setHoveringIndex
    } = this.props;

    if (isOver && !nextProps.isOver) {
      setHoveringIndex(-1);
    }
  }

  render() {
    const {
      connectDragSource,
      connectDropTarget,
      isDragging,
      index,
      word,
      selected,
      className,
      onClick,
      isOver,
      canDrop
    } = this.props;
    return connectDropTarget(connectDragSource( /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      className: (0, _classnames.default)('btn-secondary notranslate confirm-seed-phrase__seed-word', className, {
        'confirm-seed-phrase__seed-word--selected btn-primary': selected,
        'confirm-seed-phrase__seed-word--dragging': isDragging,
        'confirm-seed-phrase__seed-word--empty': !word,
        'confirm-seed-phrase__seed-word--active-drop': !isOver && canDrop,
        'confirm-seed-phrase__seed-word--drop-hover': isOver && canDrop
      }),
      onClick: onClick,
      "data-testid": `draggable-seed-${selected ? 'selected-' : ''}${word}`
    }, word)));
  }

}

(0, _defineProperty2.default)(DraggableSeed, "propTypes", {
  // React DnD Props
  connectDragSource: _propTypes.default.func.isRequired,
  connectDropTarget: _propTypes.default.func.isRequired,
  isDragging: _propTypes.default.bool,
  isOver: _propTypes.default.bool,
  canDrop: _propTypes.default.bool,
  // Own Props
  onClick: _propTypes.default.func,
  setHoveringIndex: _propTypes.default.func.isRequired,
  index: _propTypes.default.number,
  word: _propTypes.default.string,
  className: _propTypes.default.string,
  selected: _propTypes.default.bool
});
(0, _defineProperty2.default)(DraggableSeed, "defaultProps", {
  className: '',
  onClick: undefined
});
const SEEDWORD = 'SEEDWORD';
const seedSource = {
  beginDrag(props) {
    setTimeout(() => props.setDraggingSeedIndex(props.seedIndex), 0);
    return {
      seedIndex: props.seedIndex,
      word: props.word
    };
  },

  canDrag(props) {
    return props.draggable;
  },

  endDrag(props, monitor) {
    const dropTarget = monitor.getDropResult();

    if (!dropTarget) {
      setTimeout(() => props.setDraggingSeedIndex(-1), 0);
      return;
    }

    props.onDrop(dropTarget.targetIndex);
  }

};
const seedTarget = {
  drop(props) {
    return {
      targetIndex: props.index
    };
  },

  canDrop(props) {
    return props.droppable;
  },

  hover(props) {
    props.setHoveringIndex(props.index);
  }

};

const collectDrag = (connect, monitor) => {
  return {
    connectDragSource: connect.dragSource(),
    isDragging: monitor.isDragging()
  };
};

const collectDrop = (connect, monitor) => {
  return {
    connectDropTarget: connect.dropTarget(),
    isOver: monitor.isOver(),
    canDrop: monitor.canDrop()
  };
};

var _default = (0, _reactDnd.DropTarget)(SEEDWORD, seedTarget, collectDrop)((0, _reactDnd.DragSource)(SEEDWORD, seedSource, collectDrag)(DraggableSeed));

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/first-time-flow/seed-phrase/confirm-seed-phrase/draggable-seed.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/lock-icon/index.js", {"./lock-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/lock-icon/lock-icon.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/lock-icon/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _lockIcon.default;
  }
});

var _lockIcon = _interopRequireDefault(require("./lock-icon.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/lock-icon/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/index.js", {"./CompositeDisposable":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/CompositeDisposable.js","./Disposable":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/Disposable.js","./SerialDisposable":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/SerialDisposable.js","./isDisposable":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/isDisposable.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/index.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _isDisposable2 = require('./isDisposable');

var _isDisposable3 = _interopRequireDefault(_isDisposable2);

exports.isDisposable = _isDisposable3['default'];

var _Disposable2 = require('./Disposable');

var _Disposable3 = _interopRequireDefault(_Disposable2);

exports.Disposable = _Disposable3['default'];

var _CompositeDisposable2 = require('./CompositeDisposable');

var _CompositeDisposable3 = _interopRequireDefault(_CompositeDisposable2);

exports.CompositeDisposable = _CompositeDisposable3['default'];

var _SerialDisposable2 = require('./SerialDisposable');

var _SerialDisposable3 = _interopRequireDefault(_SerialDisposable2);

exports.SerialDisposable = _SerialDisposable3['default'];
      };
    };
  }
}, {package:"disposables",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/wrapConnectorHooks.js", {"./utils/cloneWithRef":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/utils/cloneWithRef.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/wrapConnectorHooks.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var cloneWithRef_1 = __importDefault(require("./utils/cloneWithRef"));
function throwIfCompositeComponentElement(element) {
    // Custom components can no longer be wrapped directly in React DnD 2.0
    // so that we don't need to depend on findDOMNode() from react-dom.
    if (typeof element.type === 'string') {
        return;
    }
    var displayName = element.type.displayName || element.type.name || 'the component';
    throw new Error('Only native element nodes can now be passed to React DnD connectors.' +
        ("You can either wrap " + displayName + " into a <div>, or turn it into a ") +
        'drag source or a drop target itself.');
}
function wrapHookToRecognizeElement(hook) {
    return function (elementOrNode, options) {
        if (elementOrNode === void 0) { elementOrNode = null; }
        if (options === void 0) { options = null; }
        // When passed a node, call the hook straight away.
        if (!react_1.isValidElement(elementOrNode)) {
            var node = elementOrNode;
            hook(node, options);
            return undefined;
        }
        // If passed a ReactElement, clone it and attach this function as a ref.
        // This helps us achieve a neat API where user doesn't even know that refs
        // are being used under the hood.
        var element = elementOrNode;
        throwIfCompositeComponentElement(element);
        // When no options are passed, use the hook directly
        var ref = options ? function (node) { return hook(node, options); } : hook;
        return cloneWithRef_1.default(element, ref);
    };
}
function wrapConnectorHooks(hooks) {
    var wrappedHooks = {};
    Object.keys(hooks).forEach(function (key) {
        var hook = hooks[key];
        var wrappedHook = wrapHookToRecognizeElement(hook);
        wrappedHooks[key] = function () { return wrappedHook; };
    });
    return wrappedHooks;
}
exports.default = wrapConnectorHooks;
//# sourceMappingURL=wrapConnectorHooks.js.map
      };
    };
  }
}, {package:"react-dnd",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/wrapConnectorHooks.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/interfaces.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/interfaces.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HandlerRole;
(function (HandlerRole) {
    HandlerRole["SOURCE"] = "SOURCE";
    HandlerRole["TARGET"] = "TARGET";
})(HandlerRole = exports.HandlerRole || (exports.HandlerRole = {}));
//# sourceMappingURL=interfaces.js.map
      };
    };
  }
}, {package:"dnd-core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/interfaces.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/factories.js", {"./DragDropManagerImpl":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/DragDropManagerImpl.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/factories.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var DragDropManagerImpl_1 = __importDefault(require("./DragDropManagerImpl"));
function createDragDropManager(backend, context) {
    return new DragDropManagerImpl_1.default(backend, context);
}
exports.createDragDropManager = createDragDropManager;
//# sourceMappingURL=factories.js.map
      };
    };
  }
}, {package:"dnd-core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/factories.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/edit-contact/edit-contact.component.js", {"../../../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../../../components/ui/button/button.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/button.component.js","../../../../components/ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../../../components/ui/page-container/page-container-footer":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/page-container-footer/index.js","../../../../components/ui/text-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/text-field/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/edit-contact/edit-contact.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _identicon = _interopRequireDefault(require("../../../../components/ui/identicon"));

var _button = _interopRequireDefault(require("../../../../components/ui/button/button.component"));

var _textField = _interopRequireDefault(require("../../../../components/ui/text-field"));

var _pageContainerFooter = _interopRequireDefault(require("../../../../components/ui/page-container/page-container-footer"));

var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class EditContact extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      newName: this.props.name,
      newAddress: this.props.address,
      newMemo: this.props.memo,
      error: ''
    });
  }

  render() {
    const {
      t
    } = this.context;
    const {
      address,
      addToAddressBook,
      chainId,
      history,
      listRoute,
      memo,
      name,
      removeFromAddressBook,
      viewRoute
    } = this.props;

    if (!address) {
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: listRoute
        }
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row address-book__edit-contact"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__header address-book__header--edit"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: address,
      diameter: 60
    }), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "settings-page__address-book-button",
      onClick: async () => {
        await removeFromAddressBook(chainId, address);
        history.push(listRoute);
      }
    }, t('deleteAccount'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__edit-contact__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__label"
    }, t('userName')), /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "text",
      id: "nickname",
      placeholder: this.context.t('addAlias'),
      value: this.state.newName,
      onChange: e => this.setState({
        newName: e.target.value
      }),
      fullWidth: true,
      margin: "dense"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__label"
    }, t('ethereumPublicAddress')), /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "text",
      id: "address",
      value: this.state.newAddress,
      error: this.state.error,
      onChange: e => this.setState({
        newAddress: e.target.value
      }),
      fullWidth: true,
      multiline: true,
      rows: 3,
      margin: "dense",
      classes: {
        inputMultiline: 'address-book__view-contact__address__text-area',
        inputRoot: 'address-book__view-contact__address'
      }
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__label--capitalized"
    }, t('memo')), /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "text",
      id: "memo",
      placeholder: memo,
      value: this.state.newMemo,
      onChange: e => this.setState({
        newMemo: e.target.value
      }),
      fullWidth: true,
      margin: "dense",
      multiline: true,
      rows: 3,
      classes: {
        inputMultiline: 'address-book__view-contact__text-area',
        inputRoot: 'address-book__view-contact__text-area-wrapper'
      }
    }))), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      cancelText: this.context.t('cancel'),
      onSubmit: async () => {
        if (this.state.newAddress !== '' && this.state.newAddress !== address) {
          // if the user makes a valid change to the address field, remove the original address
          if (!(0, _hexstringUtils.isBurnAddress)(this.state.newAddress) && (0, _hexstringUtils.isValidHexAddress)(this.state.newAddress, {
            mixedCaseUseChecksum: true
          })) {
            await removeFromAddressBook(chainId, address);
            await addToAddressBook(this.state.newAddress, this.state.newName || name, this.state.newMemo || memo);
            history.push(listRoute);
          } else {
            this.setState({
              error: this.context.t('invalidAddress')
            });
          }
        } else {
          // update name
          await addToAddressBook(address, this.state.newName || name, this.state.newMemo || memo);
          history.push(listRoute);
        }
      },
      onCancel: () => {
        history.push(`${viewRoute}/${address}`);
      },
      submitText: this.context.t('save')
    }));
  }

}

exports.default = EditContact;
(0, _defineProperty2.default)(EditContact, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(EditContact, "propTypes", {
  addToAddressBook: _propTypes.default.func,
  removeFromAddressBook: _propTypes.default.func,
  history: _propTypes.default.object,
  name: _propTypes.default.string,
  address: _propTypes.default.string,
  chainId: _propTypes.default.string,
  memo: _propTypes.default.string,
  viewRoute: _propTypes.default.string,
  listRoute: _propTypes.default.string
});
(0, _defineProperty2.default)(EditContact, "defaultProps", {
  name: '',
  memo: ''
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/edit-contact/edit-contact.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/view-contact/view-contact.component.js", {"../../../../components/ui/button/button.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/button.component.js","../../../../components/ui/icon/copy-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/copy-icon.component.js","../../../../components/ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../../../components/ui/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","../../../../hooks/useCopyToClipboard":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCopyToClipboard.js","../../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/view-contact/view-contact.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _identicon = _interopRequireDefault(require("../../../../components/ui/identicon"));

var _copyIcon = _interopRequireDefault(require("../../../../components/ui/icon/copy-icon.component"));

var _button = _interopRequireDefault(require("../../../../components/ui/button/button.component"));

var _tooltip = _interopRequireDefault(require("../../../../components/ui/tooltip"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _useCopyToClipboard = require("../../../../hooks/useCopyToClipboard");

function quadSplit(address) {
  return `0x ${address.slice(2).match(/.{1,4}/gu).join(' ')}`;
}

function ViewContact({
  history,
  name,
  address,
  checkSummedAddress,
  memo,
  editRoute,
  listRoute
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();

  if (!address) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: listRoute
      }
    });
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "settings-page__content-row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "settings-page__content-item"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "settings-page__header address-book__header"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: address,
    diameter: 60
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__header__name"
  }, name)), /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    onClick: () => {
      history.push(`${editRoute}/${address}`);
    }
  }, t('edit'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group__label"
  }, t('ethereumPublicAddress')), /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group__value"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group__static-address"
  }, quadSplit(checkSummedAddress)), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    title: copied ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: "address-book__view-contact__group__static-address--copy-icon",
    onClick: () => {
      handleCopy(checkSummedAddress);
    }
  }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
    size: 20,
    color: "#3098DC"
  }))))), /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group__label--capitalized"
  }, t('memo')), /*#__PURE__*/_react.default.createElement("div", {
    className: "address-book__view-contact__group__static-address"
  }, memo))));
}

ViewContact.propTypes = {
  name: _propTypes.default.string,
  address: _propTypes.default.string,
  history: _propTypes.default.object,
  checkSummedAddress: _propTypes.default.string,
  memo: _propTypes.default.string,
  editRoute: _propTypes.default.string,
  listRoute: _propTypes.default.string.isRequired
};

var _default = /*#__PURE__*/_react.default.memo(ViewContact);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/view-contact/view-contact.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/add-contact/add-contact.component.js", {"../../../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../../../components/ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../../../components/ui/page-container/page-container-footer":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/page-container-footer/index.js","../../../../components/ui/text-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/text-field/index.js","../../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../send/send-content/add-recipient/ens-input":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/add-recipient/ens-input.js","../../../send/send.constants":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send.constants.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","lodash":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/lodash.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/add-contact/add-contact.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _identicon = _interopRequireDefault(require("../../../../components/ui/identicon"));

var _textField = _interopRequireDefault(require("../../../../components/ui/text-field"));

var _routes = require("../../../../helpers/constants/routes");

var _util = require("../../../../helpers/utils/util");

var _ensInput = _interopRequireDefault(require("../../../send/send-content/add-recipient/ens-input"));

var _pageContainerFooter = _interopRequireDefault(require("../../../../components/ui/page-container/page-container-footer"));

var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");

var _send = require("../../../send/send.constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class AddContact extends _react.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "state", {
      newName: '',
      ethAddress: '',
      error: '',
      input: ''
    });
    (0, _defineProperty2.default)(this, "validate", address => {
      const valid = !(0, _hexstringUtils.isBurnAddress)(address) && (0, _hexstringUtils.isValidHexAddress)(address, {
        mixedCaseUseChecksum: true
      });
      const validEnsAddress = (0, _util.isValidDomainName)(address);

      if (valid || validEnsAddress || address === '') {
        this.setState({
          error: '',
          ethAddress: address
        });
      } else {
        this.setState({
          error: _send.INVALID_RECIPIENT_ADDRESS_ERROR
        });
      }
    });
    (0, _defineProperty2.default)(this, "onChange", input => {
      this.setState({
        input
      });
      this.dValidate(input);
    });
    this.dValidate = (0, _lodash.debounce)(this.validate, 500);
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.qrCodeData) {
      if (nextProps.qrCodeData.type === 'address') {
        const {
          ensResolution
        } = this.props;
        const scannedAddress = nextProps.qrCodeData.values.address.toLowerCase();
        const currentAddress = ensResolution || this.state.ethAddress;

        if (currentAddress.toLowerCase() !== scannedAddress) {
          this.setState({
            input: scannedAddress
          });
          this.validate(scannedAddress); // Clean up QR code data after handling

          this.props.qrCodeDetected(null);
        }
      }
    }
  }

  renderInput() {
    return /*#__PURE__*/_react.default.createElement(_ensInput.default, {
      scanQrCode: _ => {
        this.props.scanQrCode();
      },
      onChange: this.onChange,
      onPaste: text => {
        this.setState({
          input: text
        });
        this.validate(text);
      },
      onReset: () => {
        this.props.resetEnsResolution();
        this.setState({
          ethAddress: '',
          input: ''
        });
      },
      userInput: this.state.input
    });
  }

  render() {
    const {
      t
    } = this.context;
    const {
      history,
      addToAddressBook,
      ensError,
      ensResolution
    } = this.props;
    const errorToRender = ensError || this.state.error;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "settings-page__content-row address-book__add-contact"
    }, ensResolution && /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: ensResolution,
      diameter: 60
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__value"
    }, ensResolution)), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__add-contact__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__label"
    }, t('userName')), /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "text",
      id: "nickname",
      value: this.state.newName,
      onChange: e => this.setState({
        newName: e.target.value
      }),
      fullWidth: true,
      margin: "dense"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__view-contact__group__label"
    }, t('ethereumPublicAddress')), this.renderInput(), errorToRender && /*#__PURE__*/_react.default.createElement("div", {
      className: "address-book__add-contact__error"
    }, t(errorToRender)))), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      cancelText: this.context.t('cancel'),
      disabled: Boolean(this.state.error),
      onSubmit: async () => {
        await addToAddressBook(ensResolution || this.state.ethAddress, this.state.newName);
        history.push(_routes.CONTACT_LIST_ROUTE);
      },
      onCancel: () => {
        history.push(_routes.CONTACT_LIST_ROUTE);
      },
      submitText: this.context.t('save')
    }));
  }

}

exports.default = AddContact;
(0, _defineProperty2.default)(AddContact, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(AddContact, "propTypes", {
  addToAddressBook: _propTypes.default.func,
  history: _propTypes.default.object,
  scanQrCode: _propTypes.default.func,
  qrCodeData: _propTypes.default.object
  /* eslint-disable-line react/no-unused-prop-types */
  ,
  qrCodeDetected: _propTypes.default.func,
  ensResolution: _propTypes.default.string,
  ensError: _propTypes.default.string,
  resetEnsResolution: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/contact-list-tab/add-contact/add-contact.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list/networks-list.js", {"../networks-list-item":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list-item/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list/networks-list.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _networksListItem = _interopRequireDefault(require("../networks-list-item"));

const NetworksList = ({
  networkIsSelected,
  networksToRender,
  networkDefaultedToProvider,
  selectedRpcUrl
}) => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('networks-tab__networks-list', {
      'networks-tab__networks-list--selection': networkIsSelected && !networkDefaultedToProvider
    })
  }, networksToRender.map(network => /*#__PURE__*/_react.default.createElement(_networksListItem.default, {
    key: `settings-network-list:${network.rpcUrl}`,
    network: network,
    networkIsSelected: networkIsSelected,
    selectedRpcUrl: selectedRpcUrl
  })));
};

NetworksList.propTypes = {
  networkDefaultedToProvider: _propTypes.default.bool,
  networkIsSelected: _propTypes.default.bool,
  networksToRender: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  selectedRpcUrl: _propTypes.default.string
};
var _default = NetworksList;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list/networks-list.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/has-symbols/shams.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/has-symbols/shams.js
      return function (require, module, exports) {
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

      };
    };
  }
}, {package:"has-symbols",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/has-symbols/shams.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/get-intrinsic/index.js", {"function-bind":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/function-bind/index.js","has":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/has/src/index.js","has-symbols":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/has-symbols/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/get-intrinsic/index.js
      return function (require, module, exports) {
'use strict';

var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

      };
    };
  }
}, {package:"get-intrinsic",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/get-intrinsic/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/function-bind/index.js", {"./implementation":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/function-bind/implementation.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/function-bind/index.js
      return function (require, module, exports) {
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

      };
    };
  }
}, {package:"function-bind",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/function-bind/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs-abi/lib/utils/index.js", {"bn.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/bn.js/lib/bn.js","buffer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/browserify/node_modules/buffer/index.js","js-sha3":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/js-sha3/src/sha3.js","number-to-bn":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/number-to-bn/src/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs-abi/lib/utils/index.js
      return function (require, module, exports) {
(function (Buffer){(function (){
'use strict';

var BN = require('bn.js');
var numberToBN = require('number-to-bn');
var keccak256 = require('js-sha3').keccak_256;

// from ethereumjs-util
function stripZeros(aInput) {
  var a = aInput; // eslint-disable-line
  var first = a[0]; // eslint-disable-line
  while (a.length > 0 && first.toString() === '0') {
    a = a.slice(1);
    first = a[0];
  }
  return a;
}

function bnToBuffer(bnInput) {
  var bn = bnInput; // eslint-disable-line
  var hex = bn.toString(16); // eslint-disable-line
  if (hex.length % 2) {
    hex = '0' + hex;
  }
  return stripZeros(new Buffer(hex, 'hex'));
}

function isHexString(value, length) {
  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}

function hexOrBuffer(valueInput, name) {
  var value = valueInput; // eslint-disable-line
  if (!Buffer.isBuffer(value)) {
    if (!isHexString(value)) {
      var error = new Error(name ? '[ethjs-abi] invalid ' + name : '[ethjs-abi] invalid hex or buffer, must be a prefixed alphanumeric even length hex string');
      error.reason = '[ethjs-abi] invalid hex string, hex must be prefixed and alphanumeric (e.g. 0x023..)';
      error.value = value;
      throw error;
    }

    value = value.substring(2);
    if (value.length % 2) {
      value = '0' + value;
    }
    value = new Buffer(value, 'hex');
  }

  return value;
}

function hexlify(value) {
  if (typeof value === 'number') {
    return '0x' + bnToBuffer(new BN(value)).toString('hex');
  } else if (value.mod || value.modulo) {
    return '0x' + bnToBuffer(value).toString('hex');
  } else {
    // eslint-disable-line
    return '0x' + hexOrBuffer(value).toString('hex');
  }
}

// getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
function getKeys(params, key, allowEmpty) {
  var result = []; // eslint-disable-line

  if (!Array.isArray(params)) {
    throw new Error('[ethjs-abi] while getting keys, invalid params value ' + JSON.stringify(params));
  }

  for (var i = 0; i < params.length; i++) {
    // eslint-disable-line
    var value = params[i][key]; // eslint-disable-line
    if (allowEmpty && !value) {
      value = '';
    } else if (typeof value !== 'string') {
      throw new Error('[ethjs-abi] while getKeys found invalid ABI data structure, type value not string');
    }
    result.push(value);
  }

  return result;
}

function coderNumber(size, signed) {
  return {
    encode: function encodeNumber(valueInput) {
      var value = valueInput; // eslint-disable-line

      if (typeof value === 'object' && value.toString && (value.toTwos || value.dividedToIntegerBy)) {
        value = value.toString(10).split('.')[0];
      }

      if (typeof value === 'string' || typeof value === 'number') {
        value = String(value).split('.')[0];
      }

      value = numberToBN(value);
      value = value.toTwos(size * 8).maskn(size * 8);
      if (signed) {
        value = value.fromTwos(size * 8).toTwos(256);
      }
      return value.toArrayLike(Buffer, 'be', 32);
    },
    decode: function decodeNumber(data, offset) {
      var junkLength = 32 - size; // eslint-disable-line
      var value = new BN(data.slice(offset + junkLength, offset + 32)); // eslint-disable-line
      if (signed) {
        value = value.fromTwos(size * 8);
      } else {
        value = value.maskn(size * 8);
      }
      return {
        consumed: 32,
        value: new BN(value.toString(10))
      };
    }
  };
}
var uint256Coder = coderNumber(32, false);

var coderBoolean = {
  encode: function encodeBoolean(value) {
    return uint256Coder.encode(value ? 1 : 0);
  },
  decode: function decodeBoolean(data, offset) {
    var result = uint256Coder.decode(data, offset); // eslint-disable-line
    return {
      consumed: result.consumed,
      value: !result.value.isZero()
    };
  }
};

function coderFixedBytes(length) {
  return {
    encode: function encodeFixedBytes(valueInput) {
      var value = valueInput; // eslint-disable-line
      value = hexOrBuffer(value);

      if (value.length === 32) {
        return value;
      }

      var result = new Buffer(32); // eslint-disable-line
      result.fill(0);
      value.copy(result);
      return result;
    },
    decode: function decodeFixedBytes(data, offset) {
      if (data.length !== 0 && data.length < offset + 32) {
        throw new Error('[ethjs-abi] while decoding fixed bytes, invalid bytes data length: ' + length);
      }

      return {
        consumed: 32,
        value: '0x' + data.slice(offset, offset + length).toString('hex')
      };
    }
  };
}

var coderAddress = {
  encode: function encodeAddress(valueInput) {
    var value = valueInput; // eslint-disable-line
    var result = new Buffer(32); // eslint-disable-line
    if (!isHexString(value, 20)) {
      throw new Error('[ethjs-abi] while encoding address, invalid address value, not alphanumeric 20 byte hex string');
    }
    value = hexOrBuffer(value);
    result.fill(0);
    value.copy(result, 12);
    return result;
  },
  decode: function decodeAddress(data, offset) {
    if (data.length === 0) {
      return {
        consumed: 32,
        value: '0x'
      };
    }
    if (data.length !== 0 && data.length < offset + 32) {
      throw new Error('[ethjs-abi] while decoding address data, invalid address data, invalid byte length ' + data.length);
    }
    return {
      consumed: 32,
      value: '0x' + data.slice(offset + 12, offset + 32).toString('hex')
    };
  }
};

function encodeDynamicBytesHelper(value) {
  var dataLength = parseInt(32 * Math.ceil(value.length / 32)); // eslint-disable-line
  var padding = new Buffer(dataLength - value.length); // eslint-disable-line
  padding.fill(0);

  return Buffer.concat([uint256Coder.encode(value.length), value, padding]);
}

function decodeDynamicBytesHelper(data, offset) {
  if (data.length !== 0 && data.length < offset + 32) {
    throw new Error('[ethjs-abi] while decoding dynamic bytes data, invalid bytes length: ' + data.length + ' should be less than ' + (offset + 32));
  }

  var length = uint256Coder.decode(data, offset).value; // eslint-disable-line
  length = length.toNumber();
  if (data.length !== 0 && data.length < offset + 32 + length) {
    throw new Error('[ethjs-abi] while decoding dynamic bytes data, invalid bytes length: ' + data.length + ' should be less than ' + (offset + 32 + length));
  }

  return {
    consumed: parseInt(32 + 32 * Math.ceil(length / 32), 10),
    value: data.slice(offset + 32, offset + 32 + length)
  };
}

var coderDynamicBytes = {
  encode: function encodeDynamicBytes(value) {
    return encodeDynamicBytesHelper(hexOrBuffer(value));
  },
  decode: function decodeDynamicBytes(data, offset) {
    var result = decodeDynamicBytesHelper(data, offset); // eslint-disable-line
    result.value = '0x' + result.value.toString('hex');
    return result;
  },
  dynamic: true
};

var coderString = {
  encode: function encodeString(value) {
    return encodeDynamicBytesHelper(new Buffer(value, 'utf8'));
  },
  decode: function decodeString(data, offset) {
    var result = decodeDynamicBytesHelper(data, offset); // eslint-disable-line
    result.value = result.value.toString('utf8');
    return result;
  },
  dynamic: true
};

function coderArray(coder, lengthInput) {
  return {
    encode: function encodeArray(value) {
      var result = new Buffer(0); // eslint-disable-line
      var length = lengthInput; // eslint-disable-line

      if (!Array.isArray(value)) {
        throw new Error('[ethjs-abi] while encoding array, invalid array data, not type Object (Array)');
      }

      if (length === -1) {
        length = value.length;
        result = uint256Coder.encode(length);
      }

      if (length !== value.length) {
        throw new Error('[ethjs-abi] while encoding array, size mismatch array length ' + length + ' does not equal ' + value.length);
      }

      value.forEach(function (resultValue) {
        result = Buffer.concat([result, coder.encode(resultValue)]);
      });

      return result;
    },
    decode: function decodeArray(data, offsetInput) {
      var length = lengthInput; // eslint-disable-line
      var offset = offsetInput; // eslint-disable-line
      // @TODO:
      // if (data.length < offset + length * 32) { throw new Error('invalid array'); }

      var consumed = 0; // eslint-disable-line
      var decodeResult; // eslint-disable-line

      if (length === -1) {
        decodeResult = uint256Coder.decode(data, offset);
        length = decodeResult.value.toNumber();
        consumed += decodeResult.consumed;
        offset += decodeResult.consumed;
      }

      var value = []; // eslint-disable-line

      for (var i = 0; i < length; i++) {
        // eslint-disable-line
        var loopResult = coder.decode(data, offset);
        consumed += loopResult.consumed;
        offset += loopResult.consumed;
        value.push(loopResult.value);
      }

      return {
        consumed: consumed,
        value: value
      };
    },
    dynamic: lengthInput === -1
  };
}

// Break the type up into [staticType][staticArray]*[dynamicArray]? | [dynamicType] and
// build the coder up from its parts
var paramTypePart = new RegExp(/^((u?int|bytes)([0-9]*)|(address|bool|string)|(\[([0-9]*)\]))/);

function getParamCoder(typeInput) {
  var type = typeInput; // eslint-disable-line
  var coder = null; // eslint-disable-line
  var invalidTypeErrorMessage = '[ethjs-abi] while getting param coder (getParamCoder) type value ' + JSON.stringify(type) + ' is either invalid or unsupported by ethjs-abi.';

  while (type) {
    var part = type.match(paramTypePart); // eslint-disable-line
    if (!part) {
      throw new Error(invalidTypeErrorMessage);
    }
    type = type.substring(part[0].length);

    var prefix = part[2] || part[4] || part[5]; // eslint-disable-line
    switch (prefix) {
      case 'int':case 'uint':
        if (coder) {
          throw new Error(invalidTypeErrorMessage);
        }
        var intSize = parseInt(part[3] || 256); // eslint-disable-line
        if (intSize === 0 || intSize > 256 || intSize % 8 !== 0) {
          throw new Error('[ethjs-abi] while getting param coder for type ' + type + ', invalid ' + prefix + '<N> width: ' + type);
        }

        coder = coderNumber(intSize / 8, prefix === 'int');
        break;

      case 'bool':
        if (coder) {
          throw new Error(invalidTypeErrorMessage);
        }
        coder = coderBoolean;
        break;

      case 'string':
        if (coder) {
          throw new Error(invalidTypeErrorMessage);
        }
        coder = coderString;
        break;

      case 'bytes':
        if (coder) {
          throw new Error(invalidTypeErrorMessage);
        }
        if (part[3]) {
          var size = parseInt(part[3]); // eslint-disable-line
          if (size === 0 || size > 32) {
            throw new Error('[ethjs-abi] while getting param coder for prefix bytes, invalid type ' + type + ', size ' + size + ' should be 0 or greater than 32');
          }
          coder = coderFixedBytes(size);
        } else {
          coder = coderDynamicBytes;
        }
        break;

      case 'address':
        if (coder) {
          throw new Error(invalidTypeErrorMessage);
        }
        coder = coderAddress;
        break;

      case '[]':
        if (!coder || coder.dynamic) {
          throw new Error(invalidTypeErrorMessage);
        }
        coder = coderArray(coder, -1);
        break;

      // "[0-9+]"
      default:
        if (!coder || coder.dynamic) {
          throw new Error(invalidTypeErrorMessage);
        }
        var defaultSize = parseInt(part[6]); // eslint-disable-line
        coder = coderArray(coder, defaultSize);
    }
  }

  if (!coder) {
    throw new Error(invalidTypeErrorMessage);
  }
  return coder;
}

module.exports = {
  BN: BN,
  bnToBuffer: bnToBuffer,
  isHexString: isHexString,
  hexOrBuffer: hexOrBuffer,
  hexlify: hexlify,
  stripZeros: stripZeros,

  keccak256: keccak256,

  getKeys: getKeys,
  numberToBN: numberToBN,
  coderNumber: coderNumber,
  uint256Coder: uint256Coder,
  coderBoolean: coderBoolean,
  coderFixedBytes: coderFixedBytes,
  coderAddress: coderAddress,
  coderDynamicBytes: coderDynamicBytes,
  coderString: coderString,
  coderArray: coderArray,
  paramTypePart: paramTypePart,
  getParamCoder: getParamCoder
};
}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"ethjs-abi",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs-abi/lib/utils/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/node_modules/ethjs-abi/lib/index.js", {"./utils/index.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/node_modules/ethjs-abi/lib/utils/index.js","buffer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/browserify/node_modules/buffer/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/node_modules/ethjs-abi/lib/index.js
      return function (require, module, exports) {
(function (Buffer){(function (){
'use strict';

/* eslint-disable */

var utils = require('./utils/index.js');
var uint256Coder = utils.uint256Coder;
var coderBoolean = utils.coderBoolean;
var coderFixedBytes = utils.coderFixedBytes;
var coderAddress = utils.coderAddress;
var coderDynamicBytes = utils.coderDynamicBytes;
var coderString = utils.coderString;
var coderArray = utils.coderArray;
var paramTypePart = utils.paramTypePart;
var getParamCoder = utils.getParamCoder;

function Result() {}

function encodeParams(types, values) {
  if (types.length !== values.length) {
    throw new Error('[ethjs-abi] while encoding params, types/values mismatch, Your contract requires ' + types.length + ' types (arguments), and you passed in ' + values.length);
  }

  var parts = [];

  types.forEach(function (type, index) {
    var coder = getParamCoder(type);
    parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });
  });

  function alignSize(size) {
    return parseInt(32 * Math.ceil(size / 32));
  }

  var staticSize = 0,
      dynamicSize = 0;
  parts.forEach(function (part) {
    if (part.dynamic) {
      staticSize += 32;
      dynamicSize += alignSize(part.value.length);
    } else {
      staticSize += alignSize(part.value.length);
    }
  });

  var offset = 0,
      dynamicOffset = staticSize;
  var data = new Buffer(staticSize + dynamicSize);

  parts.forEach(function (part, index) {
    if (part.dynamic) {
      uint256Coder.encode(dynamicOffset).copy(data, offset);
      offset += 32;

      part.value.copy(data, dynamicOffset);
      dynamicOffset += alignSize(part.value.length);
    } else {
      part.value.copy(data, offset);
      offset += alignSize(part.value.length);
    }
  });

  return '0x' + data.toString('hex');
}

// decode bytecode data from output names and types
function decodeParams(names, types, data) {
  var useNumberedParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  // Names is optional, so shift over all the parameters if not provided
  if (arguments.length < 3) {
    data = types;
    types = names;
    names = [];
  }

  data = utils.hexOrBuffer(data);
  var values = new Result();

  var offset = 0;
  types.forEach(function (type, index) {
    var coder = getParamCoder(type);
    if (coder.dynamic) {
      var dynamicOffset = uint256Coder.decode(data, offset);
      var result = coder.decode(data, dynamicOffset.value.toNumber());
      offset += dynamicOffset.consumed;
    } else {
      var result = coder.decode(data, offset);
      offset += result.consumed;
    }
    if (useNumberedParams) values[index] = result.value;
    if (names[index]) {
      values[names[index]] = result.value;
    }
  });
  return values;
}

// encode method ABI object with values in an array, output bytecode
function encodeMethod(method, values) {
  var signature = method.name + '(' + utils.getKeys(method.inputs, 'type').join(',') + ')';
  var signatureEncoded = '0x' + new Buffer(utils.keccak256(signature), 'hex').slice(0, 4).toString('hex');
  var paramsEncoded = encodeParams(utils.getKeys(method.inputs, 'type'), values).substring(2);

  return '' + signatureEncoded + paramsEncoded;
}

// decode method data bytecode, from method ABI object
function decodeMethod(method, data) {
  var outputNames = utils.getKeys(method.outputs, 'name', true);
  var outputTypes = utils.getKeys(method.outputs, 'type');

  return decodeParams(outputNames, outputTypes, utils.hexOrBuffer(data));
}

// decode method data bytecode, from method ABI object
function encodeEvent(eventObject, values) {
  return encodeMethod(eventObject, values);
}

function eventSignature(eventObject) {
  var signature = eventObject.name + '(' + utils.getKeys(eventObject.inputs, 'type').join(',') + ')';
  return '0x' + utils.keccak256(signature);
}

// decode method data bytecode, from method ABI object
function decodeEvent(eventObject, data, topics) {
  var useNumberedParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var nonIndexed = eventObject.inputs.filter(function (input) {
    return !input.indexed;
  });
  var nonIndexedNames = utils.getKeys(nonIndexed, 'name', true);
  var nonIndexedTypes = utils.getKeys(nonIndexed, 'type');
  var event = decodeParams(nonIndexedNames, nonIndexedTypes, utils.hexOrBuffer(data), useNumberedParams);
  var topicOffset = eventObject.anonymous ? 0 : 1;
  eventObject.inputs.filter(function (input) {
    return input.indexed;
  }).map(function (input, i) {
    var topic = new Buffer(topics[i + topicOffset].slice(2), 'hex');
    var coder = getParamCoder(input.type);
    event[input.name] = coder.decode(topic, 0).value;
  });
  event._eventName = eventObject.name;
  return event;
}

// Decode a specific log item with a specific event abi
function decodeLogItem(eventObject, log) {
  var useNumberedParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (eventObject && log.topics[0] === eventSignature(eventObject)) {
    return decodeEvent(eventObject, log.data, log.topics, useNumberedParams);
  }
}

// Create a decoder for all events defined in an abi. It returns a function which is called
// on an array of log entries such as received from getLogs or getTransactionReceipt and parses
// any matching log entries
function logDecoder(abi) {
  var useNumberedParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var eventMap = {};
  abi.filter(function (item) {
    return item.type === 'event';
  }).map(function (item) {
    eventMap[eventSignature(item)] = item;
  });
  return function (logItems) {
    return logItems.map(function (log) {
      return decodeLogItem(eventMap[log.topics[0]], log, useNumberedParams);
    }).filter(function (i) {
      return i;
    });
  };
}

module.exports = {
  encodeParams: encodeParams,
  decodeParams: decodeParams,
  encodeMethod: encodeMethod,
  decodeMethod: decodeMethod,
  encodeEvent: encodeEvent,
  decodeEvent: decodeEvent,
  decodeLogItem: decodeLogItem,
  logDecoder: logDecoder,
  eventSignature: eventSignature
};
}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"ethjs-abi",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/node_modules/ethjs-abi/lib/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/has-tx-object.js", {"babel-runtime/core-js/object/keys":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/keys.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/has-tx-object.js
      return function (require, module, exports) {
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var txObjectProperties = ['from', 'to', 'data', 'value', 'gasPrice', 'gas'];

module.exports = hasTransactionObject;

function hasTransactionObject(args) {
  // bad/empty args: bad
  if (!Array.isArray(args) || args.length === 0) {
    return false;
  }
  var lastArg = args[args.length - 1];
  // missing or non-object: bad
  if (!lastArg) return false;
  if (typeof lastArg !== 'object') {
    return false;
  }
  // empty object: good
  if ((0, _keys2['default'])(lastArg).length === 0) {
    return true;
  }
  // txParams object: good
  var keys = (0, _keys2['default'])(lastArg);
  var hasMatchingKeys = txObjectProperties.some(function (value) {
    return keys.includes(value);
  });
  if (hasMatchingKeys) {
    return true;
  }
  // no match
  return false;
}
      };
    };
  }
}, {package:"ethjs-contract",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/has-tx-object.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/contract.js", {"./has-tx-object":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/has-tx-object.js","babel-runtime/core-js/json/stringify":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/json/stringify.js","babel-runtime/core-js/object/assign":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/assign.js","babel-runtime/helpers/asyncToGenerator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/asyncToGenerator.js","babel-runtime/regenerator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/regenerator/index.js","ethjs-abi":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/node_modules/ethjs-abi/lib/index.js","ethjs-filter":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethjs-filter/lib/index.js","ethjs-util":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethjs-util/lib/index.js","js-sha3":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/js-sha3/src/sha3.js","promise-to-callback":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/promise-to-callback/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/contract.js
      return function (require, module, exports) {
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var abi = require('ethjs-abi'); // eslint-disable-line
var EthFilter = require('ethjs-filter'); // eslint-disable-line
var getKeys = require('ethjs-util').getKeys; // eslint-disable-line
var keccak256 = require('js-sha3').keccak_256; // eslint-disable-line
var hasTransactionObject = require('./has-tx-object');
var promiseToCallback = require('promise-to-callback');

module.exports = Contract;

function Contract() {
  var performCall = function () {
    var _ref2 = (0, _asyncToGenerator3['default'])( /*#__PURE__*/_regenerator2['default'].mark(function _callee(_ref) {
      var methodObject = _ref.methodObject,
          methodArgs = _ref.methodArgs;
      var queryMethod, providedTxObject, methodTxObject, queryResult, decodedMethodResult, decodingError;
      return _regenerator2['default'].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              queryMethod = 'call'; // eslint-disable-line

              providedTxObject = {}; // eslint-disable-line

              if (hasTransactionObject(methodArgs)) providedTxObject = methodArgs.pop();
              methodTxObject = (0, _assign2['default'])({}, self.defaultTxObject, providedTxObject, {
                to: self.address
              });

              methodTxObject.data = abi.encodeMethod(methodObject, methodArgs);

              if (methodObject.constant === false) {
                queryMethod = 'sendTransaction';
              }

              _context.next = 8;
              return self.query[queryMethod](methodTxObject);

            case 8:
              queryResult = _context.sent;

              if (!(queryMethod === 'call')) {
                _context.next = 19;
                break;
              }

              _context.prev = 10;
              decodedMethodResult = abi.decodeMethod(methodObject, queryResult);
              return _context.abrupt('return', decodedMethodResult);

            case 15:
              _context.prev = 15;
              _context.t0 = _context['catch'](10);
              decodingError = new Error('[ethjs-contract] while formatting incoming raw call data ' + (0, _stringify2['default'])(queryResult) + ' ' + _context.t0);
              throw decodingError;

            case 19:
              return _context.abrupt('return', queryResult);

            case 20:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this, [[10, 15]]);
    }));

    return function performCall(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var self = this;
  self.abi = opts.contractABI || [];
  self.query = opts.query;
  self.address = opts.address || '0x';
  self.bytecode = opts.contractBytecode || '0x';
  self.defaultTxObject = opts.contractDefaultTxObject || {};
  self.filters = new EthFilter(self.query);

  getCallableMethodsFromABI(self.abi).forEach(function (methodObject) {
    if (methodObject.type === 'function') {
      self[methodObject.name] = createContractFunction(methodObject);
    } else if (methodObject.type === 'event') {
      self[methodObject.name] = createContractEvent(methodObject);
    }
  });

  function createContractEvent(methodObject) {
    return function contractEvent() {
      var methodArgs = [].slice.call(arguments); // eslint-disable-line

      var filterInputTypes = getKeys(methodObject.inputs, 'type', false);
      var filterTopic = '0x' + keccak256(methodObject.name + '(' + filterInputTypes.join(',') + ')');
      var filterTopcis = [filterTopic];
      var argsObject = (0, _assign2['default'])({}, methodArgs[0]) || {};

      var defaultFilterObject = (0, _assign2['default'])({}, methodArgs[0] || {}, {
        to: self.address,
        topics: filterTopcis
      });
      var filterOpts = (0, _assign2['default'])({}, argsObject, {
        decoder: function decoder(logData) {
          return abi.decodeEvent(methodObject, logData, filterTopcis);
        },
        defaultFilterObject: defaultFilterObject
      });

      return new self.filters.Filter(filterOpts);
    };
  }

  function createContractFunction(methodObject) {
    return function contractFunction() {
      var methodCallback = void 0; // eslint-disable-line
      var methodArgs = [].slice.call(arguments); // eslint-disable-line
      if (typeof methodArgs[methodArgs.length - 1] === 'function') {
        methodCallback = methodArgs.pop();
      }

      var promise = performCall({ methodObject: methodObject, methodArgs: methodArgs });

      if (methodCallback) {
        return promiseToCallback(promise)(methodCallback);
      }

      return promise;
    };
  }
}

function getCallableMethodsFromABI(contractABI) {
  return contractABI.filter(function (json) {
    return (json.type === 'function' || json.type === 'event') && json.name.length > 0;
  });
}
      };
    };
  }
}, {package:"ethjs-contract",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/lib/contract.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/list-item-search/list-item-search.component.js", {"../../../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../../../components/ui/text-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/text-field/index.js","../../../../hooks/usePrevious":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/usePrevious.js","../../../../selectors/selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/selectors.js","../../swaps.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/swaps.util.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@material-ui/core/InputAdornment":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputAdornment/index.js","fuse.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/fuse.js/dist/fuse.js","loglevel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/loglevel/lib/loglevel.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/list-item-search/list-item-search.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ListItemSearch;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fuse = _interopRequireDefault(require("fuse.js"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _InputAdornment = _interopRequireDefault(require("@material-ui/core/InputAdornment"));

var _textField = _interopRequireDefault(require("../../../../components/ui/text-field"));

var _usePrevious = require("../../../../hooks/usePrevious");

var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");

var _swaps = require("../../swaps.util");

var _selectors = require("../../../../selectors/selectors");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const renderAdornment = () => /*#__PURE__*/_react.default.createElement(_InputAdornment.default, {
  position: "start",
  style: {
    marginRight: '12px'
  }
}, /*#__PURE__*/_react.default.createElement("img", {
  src: "images/search.svg",
  width: "17",
  height: "17",
  alt: ""
}));

function ListItemSearch({
  onSearch,
  error,
  listToSearch = [],
  fuseSearchKeys,
  searchPlaceholderText,
  defaultToAll,
  shouldSearchForImports
}) {
  const fuseRef = (0, _react.useRef)();
  const [searchQuery, setSearchQuery] = (0, _react.useState)('');
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  /**
   * Search a custom token for import based on a contract address.
   * @param {String} contractAddress
   */

  const handleSearchTokenForImport = async contractAddress => {
    setSearchQuery(contractAddress);

    try {
      const token = await (0, _swaps.fetchToken)(contractAddress, chainId);

      if (token) {
        token.primaryLabel = token.symbol;
        token.secondaryLabel = token.name;
        token.notImported = true;
        onSearch({
          searchQuery: contractAddress,
          results: [token]
        });
        return;
      }
    } catch (e) {
      _loglevel.default.error('Token not found, show 0 results.', e);
    }

    onSearch({
      searchQuery: contractAddress,
      results: [] // No token for import found.

    });
  };

  const handleSearch = async newSearchQuery => {
    const trimmedNewSearchQuery = newSearchQuery.trim();
    const validHexAddress = (0, _hexstringUtils.isValidHexAddress)(trimmedNewSearchQuery);
    const fuseSearchResult = fuseRef.current.search(newSearchQuery);
    const results = defaultToAll && newSearchQuery === '' ? listToSearch : fuseSearchResult;

    if (shouldSearchForImports && results.length === 0 && validHexAddress) {
      await handleSearchTokenForImport(trimmedNewSearchQuery);
      return;
    }

    setSearchQuery(newSearchQuery);
    onSearch({
      searchQuery: newSearchQuery,
      results
    });
  };

  (0, _react.useEffect)(() => {
    if (!fuseRef.current) {
      fuseRef.current = new _fuse.default(listToSearch, {
        shouldSort: true,
        threshold: 0.45,
        location: 0,
        distance: 100,
        maxPatternLength: 32,
        minMatchCharLength: 1,
        keys: fuseSearchKeys
      });
    }
  }, [fuseSearchKeys, listToSearch]);
  const previousListToSearch = (0, _usePrevious.usePrevious)(listToSearch !== null && listToSearch !== void 0 ? listToSearch : []);
  (0, _react.useEffect)(() => {
    if (fuseRef.current && searchQuery && previousListToSearch !== listToSearch) {
      fuseRef.current.setCollection(listToSearch);
      const fuseSearchResult = fuseRef.current.search(searchQuery);
      onSearch({
        searchQuery,
        results: fuseSearchResult
      });
    }
  }, [listToSearch, searchQuery, onSearch, previousListToSearch]);
  return /*#__PURE__*/_react.default.createElement(_textField.default, {
    "data-testid": "search-list-items",
    className: "searchable-item-list__search",
    placeholder: searchPlaceholderText,
    type: "text",
    value: searchQuery,
    onChange: e => handleSearch(e.target.value),
    error: error,
    fullWidth: true,
    startAdornment: renderAdornment(),
    autoComplete: "off",
    autoFocus: true
  });
}

ListItemSearch.propTypes = {
  onSearch: _propTypes.default.func,
  error: _propTypes.default.string,
  listToSearch: _propTypes.default.array.isRequired,
  fuseSearchKeys: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  searchPlaceholderText: _propTypes.default.string,
  defaultToAll: _propTypes.default.bool,
  shouldSearchForImports: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/list-item-search/list-item-search.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/item-list/item-list.component.js", {"../../../../../shared/constants/swaps":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/swaps.js","../../../../components/ui/actionable-message/actionable-message":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/actionable-message/actionable-message.js","../../../../components/ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../../components/ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../../../components/ui/url-icon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/url-icon/index.js","../../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../../hooks/useMetricEvent":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useMetricEvent.js","../../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/item-list/item-list.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ItemList;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _identicon = _interopRequireDefault(require("../../../../components/ui/identicon"));

var _urlIcon = _interopRequireDefault(require("../../../../components/ui/url-icon"));

var _button = _interopRequireDefault(require("../../../../components/ui/button"));

var _actionableMessage = _interopRequireDefault(require("../../../../components/ui/actionable-message/actionable-message"));

var _i18n = require("../../../../contexts/i18n");

var _selectors = require("../../../../selectors");

var _swaps = require("../../../../../shared/constants/swaps");

var _useMetricEvent = require("../../../../hooks/useMetricEvent");

var _util = require("../../../../helpers/utils/util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ItemList({
  results = [],
  onClickItem,
  onOpenImportTokenModalClick,
  Placeholder,
  listTitle,
  maxListItems = 6,
  searchQuery = '',
  containerRef,
  hideRightLabels,
  hideItemIf,
  listContainerClassName
}) {
  var _ref, _rpcPrefs$blockExplor;

  const t = (0, _react.useContext)(_i18n.I18nContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const blockExplorerLink = (_ref = (_rpcPrefs$blockExplor = rpcPrefs.blockExplorerUrl) !== null && _rpcPrefs$blockExplor !== void 0 ? _rpcPrefs$blockExplor : _swaps.SWAPS_CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId]) !== null && _ref !== void 0 ? _ref : null;
  const blockExplorerLabel = rpcPrefs.blockExplorerUrl ? (0, _util.getURLHostName)(blockExplorerLink) : t('etherscan');
  const blockExplorerLinkClickedEvent = (0, _useMetricEvent.useNewMetricEvent)({
    category: 'Swaps',
    event: 'Clicked Block Explorer Link',
    properties: {
      link_type: 'Token Tracker',
      action: 'Verify Contract Address',
      block_explorer_domain: (0, _util.getURLHostName)(blockExplorerLink)
    }
  }); // If there is a token for import based on a contract address, it's the only one in the list.

  const hasTokenForImport = results.length === 1 && results[0].notImported;
  const placeholder = Placeholder ? /*#__PURE__*/_react.default.createElement(Placeholder, {
    searchQuery: searchQuery
  }) : null;
  return results.length === 0 ? placeholder : /*#__PURE__*/_react.default.createElement("div", {
    className: "searchable-item-list"
  }, listTitle ? /*#__PURE__*/_react.default.createElement("div", {
    className: "searchable-item-list__title"
  }, listTitle) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('searchable-item-list__list-container', listContainerClassName),
    ref: containerRef
  }, results.slice(0, maxListItems).map((result, i) => {
    if (hideItemIf !== null && hideItemIf !== void 0 && hideItemIf(result)) {
      return null;
    }

    const onClick = () => {
      if (result.notImported) {
        onOpenImportTokenModalClick(result);
      } else {
        onClickItem === null || onClickItem === void 0 ? void 0 : onClickItem(result);
      }
    };

    const {
      iconUrl,
      identiconAddress,
      selected,
      disabled,
      primaryLabel,
      secondaryLabel,
      rightPrimaryLabel,
      rightSecondaryLabel,
      IconComponent
    } = result;
    return /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: "0",
      className: (0, _classnames.default)('searchable-item-list__item', {
        'searchable-item-list__item--selected': selected,
        'searchable-item-list__item--disabled': disabled
      }),
      onClick: onClick,
      onKeyUp: e => e.key === 'Enter' && onClick(),
      key: `searchable-item-list-item-${i}`
    }, iconUrl || primaryLabel ? /*#__PURE__*/_react.default.createElement(_urlIcon.default, {
      url: iconUrl,
      name: primaryLabel
    }) : null, !(iconUrl || primaryLabel) && identiconAddress ? /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__identicon"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: identiconAddress,
      diameter: 24
    })) : null, IconComponent ? /*#__PURE__*/_react.default.createElement(IconComponent, null) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__labels"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__item-labels"
    }, primaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__primary-label"
    }, primaryLabel) : null, secondaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__secondary-label"
    }, secondaryLabel) : null), !hideRightLabels && (rightPrimaryLabel || rightSecondaryLabel) ? /*#__PURE__*/_react.default.createElement("div", {
      className: "searchable-item-list__right-labels"
    }, rightPrimaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__right-primary-label"
    }, rightPrimaryLabel) : null, rightSecondaryLabel ? /*#__PURE__*/_react.default.createElement("span", {
      className: "searchable-item-list__right-secondary-label"
    }, rightSecondaryLabel) : null) : null), result.notImported && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "confirm",
      onClick: onClick
    }, t('import')));
  }), !hasTokenForImport && /*#__PURE__*/_react.default.createElement("div", {
    tabIndex: "0",
    className: "searchable-item-list__item searchable-item-list__item--add-token",
    key: "searchable-item-list-item-last"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    message: blockExplorerLink && t('addCustomTokenByContractAddress', [/*#__PURE__*/_react.default.createElement("a", {
      key: "searchable-item-list__etherscan-link",
      onClick: () => {
        blockExplorerLinkClickedEvent();
        global.platform.openTab({
          url: blockExplorerLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer"
    }, blockExplorerLabel)])
  }))));
}

ItemList.propTypes = {
  results: _propTypes.default.arrayOf(_propTypes.default.shape({
    iconUrl: _propTypes.default.string,
    selected: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    primaryLabel: _propTypes.default.string,
    secondaryLabel: _propTypes.default.string,
    rightPrimaryLabel: _propTypes.default.string,
    rightSecondaryLabel: _propTypes.default.string
  })),
  onClickItem: _propTypes.default.func,
  onOpenImportTokenModalClick: _propTypes.default.func,
  Placeholder: _propTypes.default.func,
  listTitle: _propTypes.default.string,
  maxListItems: _propTypes.default.number,
  searchQuery: _propTypes.default.string,
  containerRef: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(window.Element)
  }),
  hideRightLabels: _propTypes.default.bool,
  hideItemIf: _propTypes.default.func,
  listContainerClassName: _propTypes.default.string
};


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/swaps/searchable-item-list/item-list/item-list.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/latest-priority-fee-field/latest-priority-fee-field.js", {"../../../../../../shared/modules/conversion.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/conversion.utils.js","../../../../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../../../ui/i18n-value":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/i18n-value/index.js","../tooltips":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/tooltips.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","lodash":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/lodash.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/latest-priority-fee-field/latest-priority-fee-field.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LatestPriorityFeeField;

var _react = _interopRequireDefault(require("react"));

var _lodash = require("lodash");

var _conversion = require("../../../../../../shared/modules/conversion.utils");

var _gasFee = require("../../../../../contexts/gasFee");

var _i18nValue = _interopRequireDefault(require("../../../../ui/i18n-value"));

var _tooltips = require("../tooltips");

function roundToDecimalPlacesRemovingExtraZeroes(numberish, numberOfDecimalPlaces) {
  return _conversion.toBigNumber.dec(_conversion.toBigNumber.dec(numberish).toFixed(numberOfDecimalPlaces));
}

function LatestPriorityFeeField() {
  const {
    gasFeeEstimates
  } = (0, _gasFee.useGasFeeContext)();

  const renderPriorityFeeRange = () => {
    const {
      latestPriorityFeeRange
    } = gasFeeEstimates;

    if (latestPriorityFeeRange) {
      const formattedRange = (0, _lodash.uniq)(latestPriorityFeeRange.map(priorityFee => roundToDecimalPlacesRemovingExtraZeroes(priorityFee, 1))).join(' - ');
      return `${formattedRange} GWEI`;
    }

    return null;
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__info__field latest-priority-fee-field"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__info__field-data"
  }, /*#__PURE__*/_react.default.createElement(_tooltips.PriorityFeeTooltip, null, renderPriorityFeeRange())), /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__info__field-label"
  }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
    messageKey: "priorityFee"
  })));
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/latest-priority-fee-field/latest-priority-fee-field.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/status-slider/status-slider.js", {"../../../../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../../../ui/i18n-value":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/i18n-value/index.js","../tooltips":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/tooltips.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/status-slider/status-slider.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _gasFee = require("../../../../../contexts/gasFee");

var _i18nValue = _interopRequireDefault(require("../../../../ui/i18n-value"));

var _tooltips = require("../tooltips");

const GRADIENT_COLORS = ['#037DD6', '#1876C8', '#2D70BA', '#4369AB', '#57629E', '#6A5D92', '#805683', '#9A4D71', '#B44561', '#C54055', '#D73A49'];

const determineStatusInfo = givenNetworkCongestion => {
  const networkCongestion = givenNetworkCongestion !== null && givenNetworkCongestion !== void 0 ? givenNetworkCongestion : 0.5;
  const colorIndex = Math.round(networkCongestion * 10);
  const color = GRADIENT_COLORS[colorIndex];
  const sliderTickValue = colorIndex * 10;

  if (networkCongestion <= 0.33) {
    return {
      statusLabel: 'notBusy',
      tooltipLabel: 'lowLowercase',
      color,
      sliderTickValue
    };
  } else if (networkCongestion > 0.66) {
    return {
      statusLabel: 'busy',
      tooltipLabel: 'highLowercase',
      color,
      sliderTickValue
    };
  }

  return {
    statusLabel: 'stable',
    tooltipLabel: 'stableLowercase',
    color,
    sliderTickValue
  };
};

const StatusSlider = () => {
  const {
    gasFeeEstimates
  } = (0, _gasFee.useGasFeeContext)();
  const statusInfo = determineStatusInfo(gasFeeEstimates.networkCongestion);
  return /*#__PURE__*/_react.default.createElement(_tooltips.NetworkStabilityTooltip, {
    color: statusInfo.color,
    tooltipLabel: statusInfo.tooltipLabel
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow-border",
    style: {
      marginLeft: `${statusInfo.sliderTickValue}%`
    },
    "data-testid": "status-slider-arrow-border"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow",
    style: {
      borderTopColor: statusInfo.color
    },
    "data-testid": "status-slider-arrow"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__line"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__label",
    style: {
      color: statusInfo.color
    },
    "data-testid": "status-slider-label"
  }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
    messageKey: statusInfo.statusLabel
  }))));
};

var _default = StatusSlider;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/network-statistics/status-slider/status-slider.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/base-fee-input/base-fee-input.js", {"../../../../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../../../../shared/modules/conversion.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/conversion.utils.js","../../../../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../../../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../../../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../../../hooks/useCurrencyDisplay":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCurrencyDisplay.js","../../../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../../../hooks/useUserPreferencedCurrency":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useUserPreferencedCurrency.js","../../../../../pages/send/send.constants":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send.constants.js","../../../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../../ui/box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/index.js","../../../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../../ui/form-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/form-field/index.js","../../../../ui/i18n-value":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/i18n-value/index.js","../../advanced-gas-fee-input-subtext":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-input-subtext/index.js","../../context":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/context/index.js","../utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/utils.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/base-fee-input/base-fee-input.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _send = require("../../../../../pages/send/send.constants");

var _gas = require("../../../../../../shared/constants/gas");

var _conversion = require("../../../../../../shared/modules/conversion.utils");

var _common = require("../../../../../helpers/constants/common");

var _util = require("../../../../../helpers/utils/util");

var _conversions = require("../../../../../helpers/utils/conversions.util");

var _selectors = require("../../../../../selectors");

var _gasFee = require("../../../../../contexts/gasFee");

var _useI18nContext = require("../../../../../hooks/useI18nContext");

var _useUserPreferencedCurrency = require("../../../../../hooks/useUserPreferencedCurrency");

var _useCurrencyDisplay = require("../../../../../hooks/useCurrencyDisplay");

var _button = _interopRequireDefault(require("../../../../ui/button"));

var _box = _interopRequireDefault(require("../../../../ui/box"));

var _formField = _interopRequireDefault(require("../../../../ui/form-field"));

var _i18nValue = _interopRequireDefault(require("../../../../ui/i18n-value"));

var _context = require("../../context");

var _advancedGasFeeInputSubtext = _interopRequireDefault(require("../../advanced-gas-fee-input-subtext"));

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const divideCurrencyValues = (value, baseFee) => {
  if (baseFee === 0) {
    return 0;
  }

  return (0, _conversion.divideCurrencies)(value, baseFee, {
    numberOfDecimals: 2,
    dividendBase: 10,
    divisorBase: 10
  }).toNumber();
};

const multiplyCurrencyValues = (baseFee, value, numberOfDecimals) => (0, _conversion.multiplyCurrencies)(baseFee, value, {
  numberOfDecimals,
  multiplicandBase: 10,
  multiplierBase: 10
}).toNumber();

const validateBaseFee = (editingInGwei, value, gasFeeEstimates, maxPriorityFeePerGas) => {
  if ((0, _util.bnGreaterThan)(maxPriorityFeePerGas, value)) {
    return editingInGwei ? 'editGasMaxBaseFeeGWEIImbalance' : 'editGasMaxBaseFeeMultiplierImbalance';
  }

  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates.low && (0, _util.bnLessThan)(value, gasFeeEstimates.low.suggestedMaxFeePerGas)) {
    return 'editGasMaxBaseFeeLow';
  }

  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates.high && (0, _util.bnGreaterThan)(value, gasFeeEstimates.high.suggestedMaxFeePerGas * _send.HIGH_FEE_WARNING_MULTIPLIER)) {
    return 'editGasMaxBaseFeeHigh';
  }

  return null;
};

const BaseFeeInput = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    gasFeeEstimates,
    estimateUsed,
    maxFeePerGas
  } = (0, _gasFee.useGasFeeContext)();
  const {
    maxPriorityFeePerGas,
    setErrorValue,
    setMaxFeePerGas,
    setBaseFeeMultiplier
  } = (0, _context.useAdvancedGasFeePopoverContext)();
  const {
    estimatedBaseFee,
    historicalBaseFeeRange,
    baseFeeTrend
  } = gasFeeEstimates;
  const [feeTrend, setFeeTrend] = (0, _react.useState)(baseFeeTrend);
  const [baseFeeError, setBaseFeeError] = (0, _react.useState)();
  const {
    numberOfDecimals: numberOfDecimalsPrimary
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.PRIMARY);
  const {
    currency,
    numberOfDecimals: numberOfDecimalsFiat
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.SECONDARY);
  const advancedGasFeeValues = (0, _reactRedux.useSelector)(_selectors.getAdvancedGasFeeValues);
  const [editingInGwei, setEditingInGwei] = (0, _react.useState)(false);
  const [maxBaseFeeGWEI, setMaxBaseFeeGWEI] = (0, _react.useState)(() => {
    if (estimateUsed !== _gas.PRIORITY_LEVELS.CUSTOM && advancedGasFeeValues !== null && advancedGasFeeValues !== void 0 && advancedGasFeeValues.maxBaseFee) {
      return multiplyCurrencyValues(estimatedBaseFee, advancedGasFeeValues.maxBaseFee, numberOfDecimalsPrimary);
    }

    return maxFeePerGas;
  });
  const [maxBaseFeeMultiplier, setMaxBaseFeeMultiplier] = (0, _react.useState)(() => {
    if (estimateUsed !== _gas.PRIORITY_LEVELS.CUSTOM && advancedGasFeeValues !== null && advancedGasFeeValues !== void 0 && advancedGasFeeValues.maxBaseFee) {
      return advancedGasFeeValues.maxBaseFee;
    }

    return divideCurrencyValues(maxFeePerGas, estimatedBaseFee);
  });
  const [, {
    value: baseFeeInFiat
  }] = (0, _useCurrencyDisplay.useCurrencyDisplay)((0, _conversions.decGWEIToHexWEI)(maxBaseFeeGWEI), {
    currency,
    numberOfDecimalsFiat
  });
  const updateBaseFee = (0, _react.useCallback)(value => {
    let baseFeeInGWEI;
    let baseFeeMultiplierValue;

    if (editingInGwei) {
      baseFeeInGWEI = value;
      baseFeeMultiplierValue = divideCurrencyValues(value, estimatedBaseFee);
    } else {
      baseFeeInGWEI = multiplyCurrencyValues(estimatedBaseFee, value, numberOfDecimalsPrimary);
      baseFeeMultiplierValue = value;
    }

    setMaxBaseFeeGWEI(baseFeeInGWEI);
    setMaxBaseFeeMultiplier(baseFeeMultiplierValue);
  }, [editingInGwei, estimatedBaseFee, numberOfDecimalsPrimary, setMaxBaseFeeGWEI, setMaxBaseFeeMultiplier]);
  (0, _react.useEffect)(() => {
    setMaxFeePerGas(maxBaseFeeGWEI);
    const error = validateBaseFee(editingInGwei, maxBaseFeeGWEI, gasFeeEstimates, maxPriorityFeePerGas);
    setBaseFeeError(error);
    setErrorValue('maxFeePerGas', error === 'editGasMaxBaseFeeGWEIImbalance' || error === 'editGasMaxBaseFeeMultiplierImbalance');

    if (baseFeeTrend !== 'level' && baseFeeTrend !== feeTrend) {
      setFeeTrend(baseFeeTrend);
    }

    setBaseFeeMultiplier(maxBaseFeeMultiplier);
  }, [feeTrend, editingInGwei, baseFeeTrend, gasFeeEstimates, maxBaseFeeGWEI, maxPriorityFeePerGas, maxBaseFeeMultiplier, setBaseFeeError, setErrorValue, setMaxFeePerGas, setFeeTrend, setBaseFeeMultiplier]);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "base-fee-input",
    margin: [0, 2]
  }, /*#__PURE__*/_react.default.createElement(_formField.default, {
    error: baseFeeError ? t(baseFeeError) : '',
    onChange: updateBaseFee,
    titleText: t('maxBaseFee'),
    titleUnit: editingInGwei ? 'GWEI' : `(${t('multiplier')})`,
    tooltipText: t('advancedBaseGasFeeToolTip'),
    titleDetail: /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "base-fee-input__edit-link",
      type: "link",
      onClick: () => setEditingInGwei(!editingInGwei)
    }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
      messageKey: editingInGwei ? 'editInMultiplier' : 'editInGwei'
    })),
    value: editingInGwei ? maxBaseFeeGWEI : maxBaseFeeMultiplier,
    detailText: `≈ ${baseFeeInFiat}`,
    numeric: true
  }), /*#__PURE__*/_react.default.createElement(_advancedGasFeeInputSubtext.default, {
    latest: `${(0, _utils.roundToDecimalPlacesRemovingExtraZeroes)(estimatedBaseFee, 2)} GWEI`,
    historical: (0, _utils.renderFeeRange)(historicalBaseFeeRange),
    feeTrend: feeTrend
  }));
};

var _default = BaseFeeInput;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/base-fee-input/base-fee-input.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/priority-fee-input/priority-fee-input.js", {"../../../../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../../../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../../../../helpers/utils/conversions.util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/conversions.util.js","../../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../../../hooks/useCurrencyDisplay":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCurrencyDisplay.js","../../../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../../../hooks/useUserPreferencedCurrency":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useUserPreferencedCurrency.js","../../../../../pages/send/send.constants":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send.constants.js","../../../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../../ui/box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/index.js","../../../../ui/form-field":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/form-field/index.js","../../advanced-gas-fee-input-subtext":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-input-subtext/index.js","../../context":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/context/index.js","../utils":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/utils.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/priority-fee-input/priority-fee-input.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _send = require("../../../../../pages/send/send.constants");

var _gas = require("../../../../../../shared/constants/gas");

var _common = require("../../../../../helpers/constants/common");

var _conversions = require("../../../../../helpers/utils/conversions.util");

var _selectors = require("../../../../../selectors");

var _useCurrencyDisplay = require("../../../../../hooks/useCurrencyDisplay");

var _gasFee = require("../../../../../contexts/gasFee");

var _useI18nContext = require("../../../../../hooks/useI18nContext");

var _useUserPreferencedCurrency = require("../../../../../hooks/useUserPreferencedCurrency");

var _formField = _interopRequireDefault(require("../../../../ui/form-field"));

var _box = _interopRequireDefault(require("../../../../ui/box"));

var _util = require("../../../../../helpers/utils/util");

var _context = require("../../context");

var _advancedGasFeeInputSubtext = _interopRequireDefault(require("../../advanced-gas-fee-input-subtext"));

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const validatePriorityFee = (value, gasFeeEstimates) => {
  if (value <= 0) {
    return 'editGasMaxPriorityFeeBelowMinimumV2';
  }

  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates.low && (0, _util.bnLessThan)(value, gasFeeEstimates.low.suggestedMaxPriorityFeePerGas)) {
    return 'editGasMaxPriorityFeeLowV2';
  }

  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates.high && (0, _util.bnGreaterThan)(value, gasFeeEstimates.high.suggestedMaxPriorityFeePerGas * _send.HIGH_FEE_WARNING_MULTIPLIER)) {
    return 'editGasMaxPriorityFeeHighV2';
  }

  return null;
};

const PriorityFeeInput = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const advancedGasFeeValues = (0, _reactRedux.useSelector)(_selectors.getAdvancedGasFeeValues);
  const {
    setErrorValue,
    setMaxPriorityFeePerGas
  } = (0, _context.useAdvancedGasFeePopoverContext)();
  const {
    estimateUsed,
    gasFeeEstimates,
    maxPriorityFeePerGas
  } = (0, _gasFee.useGasFeeContext)();
  const {
    latestPriorityFeeRange,
    historicalPriorityFeeRange,
    priorityFeeTrend
  } = gasFeeEstimates;
  const [feeTrend, setFeeTrend] = (0, _react.useState)(priorityFeeTrend);
  const [priorityFeeError, setPriorityFeeError] = (0, _react.useState)();
  const [priorityFee, setPriorityFee] = (0, _react.useState)(() => {
    if (estimateUsed !== _gas.PRIORITY_LEVELS.CUSTOM && advancedGasFeeValues !== null && advancedGasFeeValues !== void 0 && advancedGasFeeValues.priorityFee) return advancedGasFeeValues.priorityFee;
    return maxPriorityFeePerGas;
  });
  const {
    currency,
    numberOfDecimals
  } = (0, _useUserPreferencedCurrency.useUserPreferencedCurrency)(_common.SECONDARY);
  const [, {
    value: priorityFeeInFiat
  }] = (0, _useCurrencyDisplay.useCurrencyDisplay)((0, _conversions.decGWEIToHexWEI)(priorityFee), {
    currency,
    numberOfDecimals
  });

  const updatePriorityFee = value => {
    setPriorityFee(value);
  };

  (0, _react.useEffect)(() => {
    setMaxPriorityFeePerGas(priorityFee);
    const error = validatePriorityFee(priorityFee, gasFeeEstimates);
    setErrorValue('maxPriorityFeePerGas', error === 'editGasMaxPriorityFeeBelowMinimumV2');
    setPriorityFeeError(error);

    if (priorityFeeTrend !== 'level' && priorityFeeTrend !== feeTrend) {
      setFeeTrend(priorityFeeTrend);
    }
  }, [feeTrend, priorityFeeTrend, gasFeeEstimates, priorityFee, setErrorValue, setMaxPriorityFeePerGas, setPriorityFeeError, setFeeTrend]);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: [0, 2]
  }, /*#__PURE__*/_react.default.createElement(_formField.default, {
    error: priorityFeeError ? t(priorityFeeError) : '',
    onChange: updatePriorityFee,
    titleText: t('priorityFeeProperCase'),
    titleUnit: "(GWEI)",
    tooltipText: t('advancedPriorityFeeToolTip'),
    value: priorityFee,
    detailText: `≈ ${priorityFeeInFiat}`,
    numeric: true
  }), /*#__PURE__*/_react.default.createElement(_advancedGasFeeInputSubtext.default, {
    latest: (0, _utils.renderFeeRange)(latestPriorityFeeRange),
    historical: (0, _utils.renderFeeRange)(historicalPriorityFeeRange),
    feeTrend: feeTrend
  }));
};

var _default = PriorityFeeInput;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/priority-fee-input/priority-fee-input.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/token-cell/token-cell.js", {"../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../hooks/useTokenFiatAmount":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useTokenFiatAmount.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../asset-list-item":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/asset-list-item/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/token-cell/token-cell.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenCell;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _assetListItem = _interopRequireDefault(require("../asset-list-item"));

var _selectors = require("../../../selectors");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _useTokenFiatAmount = require("../../../hooks/useTokenFiatAmount");

function TokenCell({
  address,
  decimals,
  balanceError,
  symbol,
  string,
  image,
  onClick,
  isERC721
}) {
  const userAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const t = (0, _useI18nContext.useI18nContext)();
  const formattedFiat = (0, _useTokenFiatAmount.useTokenFiatAmount)(address, string, symbol);
  const warning = balanceError ? /*#__PURE__*/_react.default.createElement("span", null, t('troubleTokenBalances'), /*#__PURE__*/_react.default.createElement("a", {
    href: `https://ethplorer.io/address/${userAddress}`,
    rel: "noopener noreferrer",
    target: "_blank",
    onClick: event => event.stopPropagation(),
    style: {
      color: '#F7861C'
    }
  }, t('here'))) : null;
  return /*#__PURE__*/_react.default.createElement(_assetListItem.default, {
    className: (0, _classnames.default)('token-cell', {
      'token-cell--outdated': Boolean(balanceError)
    }),
    iconClassName: "token-cell__icon",
    onClick: onClick.bind(null, address),
    tokenAddress: address,
    tokenImage: image,
    tokenSymbol: symbol,
    tokenDecimals: decimals,
    warning: warning,
    primary: `${string || 0}`,
    secondary: formattedFiat,
    isERC721: isERC721
  });
}

TokenCell.propTypes = {
  address: _propTypes.default.string,
  balanceError: _propTypes.default.object,
  symbol: _propTypes.default.string,
  decimals: _propTypes.default.number,
  string: _propTypes.default.string,
  image: _propTypes.default.string,
  onClick: _propTypes.default.func.isRequired,
  isERC721: _propTypes.default.bool
};
TokenCell.defaultProps = {
  balanceError: null
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/token-cell/token-cell.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/index.js", {"./send-row-wrapper.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/send-row-wrapper.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _sendRowWrapper.default;
  }
});

var _sendRowWrapper = _interopRequireDefault(require("./send-row-wrapper.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/nickname-popover/nickname-popover.component.js", {"../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../hooks/useCopyToClipboard":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useCopyToClipboard.js","../button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../icon/copy-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/copy-icon.component.js","../identicon/identicon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/identicon.component.js","../popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/popover/index.js","../tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/nickname-popover/nickname-popover.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _i18n = require("../../../contexts/i18n");

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _popover = _interopRequireDefault(require("../popover"));

var _button = _interopRequireDefault(require("../button"));

var _identicon = _interopRequireDefault(require("../identicon/identicon.component"));

var _util = require("../../../helpers/utils/util");

var _copyIcon = _interopRequireDefault(require("../icon/copy-icon.component"));

var _useCopyToClipboard = require("../../../hooks/useCopyToClipboard");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const NicknamePopover = ({
  address,
  nickname,
  onClose = null,
  onAdd = null,
  explorerLink
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const onAddClick = (0, _react.useCallback)(() => {
    onAdd();
  }, [onAdd]);
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "nickname-popover"
  }, /*#__PURE__*/_react.default.createElement(_popover.default, {
    onClose: onClose,
    className: "nickname-popover__popover-wrap"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: address,
    diameter: 36,
    className: "nickname-popover__identicon"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "nickname-popover__address"
  }, nickname || (0, _util.shortenAddress)(address)), /*#__PURE__*/_react.default.createElement("div", {
    className: "nickname-popover__public-address"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "nickname-popover__public-address__constant"
  }, address), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    title: copied ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement("button", {
    type: "link",
    onClick: () => {
      handleCopy(address);
    },
    title: ""
  }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
    size: 11,
    color: "#989a9b"
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: "nickname-popover__view-on-block-explorer"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "nickname-popover__etherscan-link",
    onClick: () => {
      global.platform.openTab({
        url: explorerLink
      });
    },
    target: "_blank",
    rel: "noopener noreferrer",
    title: t('etherscanView')
  }, t('viewOnBlockExplorer'))), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "nickname-popover__footer-button",
    onClick: onAddClick
  }, nickname ? t('editANickname') : t('addANickname'))));
};

NicknamePopover.propTypes = {
  address: _propTypes.default.string,
  nickname: _propTypes.default.string,
  onClose: _propTypes.default.func,
  onAdd: _propTypes.default.func,
  explorerLink: _propTypes.default.string
};
var _default = NicknamePopover;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/nickname-popover/nickname-popover.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/amount-max-button/index.js", {"./amount-max-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/amount-max-button/amount-max-button.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/amount-max-button/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _amountMaxButton.default;
  }
});

var _amountMaxButton = _interopRequireDefault(require("./amount-max-button"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/amount-max-button/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/index.js", {"./user-preferenced-token-input.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/user-preferenced-token-input.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _userPreferencedTokenInput.default;
  }
});

var _userPreferencedTokenInput = _interopRequireDefault(require("./user-preferenced-token-input.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/index.js", {"./user-preferenced-currency-input.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/user-preferenced-currency-input.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _userPreferencedCurrencyInput.default;
  }
});

var _userPreferencedCurrencyInput = _interopRequireDefault(require("./user-preferenced-currency-input.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-mismatch-warning/account-mismatch-warning.component.js", {"../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../icon/info-icon.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/info-icon.component.js","../tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-mismatch-warning/account-mismatch-warning.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AccountMismatchWarning;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _selectors = require("../../../selectors");

var _infoIcon = _interopRequireDefault(require("../icon/info-icon.component"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _designSystem = require("../../../helpers/constants/design-system");

function AccountMismatchWarning({
  address
}) {
  const selectedAccount = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount);
  const t = (0, _useI18nContext.useI18nContext)();

  if (selectedAccount.address === address) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    html: /*#__PURE__*/_react.default.createElement("p", null, t('notCurrentAccount')),
    wrapperClassName: "account-mismatch-warning__tooltip-wrapper",
    containerClassName: "account-mismatch-warning__tooltip-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "account-mismatch-warning__tooltip-container-icon"
  }, /*#__PURE__*/_react.default.createElement(_infoIcon.default, {
    severity: _designSystem.SEVERITIES.WARNING
  })));
}

AccountMismatchWarning.propTypes = {
  address: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-mismatch-warning/account-mismatch-warning.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-content.component.js", {".":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/index.js","../../../ui/actionable-message/actionable-message":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/actionable-message/actionable-message.js","../../../ui/error-message":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/error-message/index.js","../../../ui/page-container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/index.js","../../../ui/tabs":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tabs/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-content.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _tabs = require("../../../ui/tabs");

var _errorMessage = _interopRequireDefault(require("../../../ui/error-message"));

var _actionableMessage = _interopRequireDefault(require("../../../ui/actionable-message/actionable-message"));

var _pageContainer = require("../../../ui/page-container");

var _ = require(".");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ConfirmPageContainerContent extends _react.Component {
  renderContent() {
    const {
      detailsComponent,
      dataComponent
    } = this.props;

    if (detailsComponent && dataComponent) {
      return this.renderTabs();
    }

    return detailsComponent || dataComponent;
  }

  renderTabs() {
    const {
      t
    } = this.context;
    const {
      detailsComponent,
      dataComponent,
      dataHexComponent
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_tabs.Tabs, null, /*#__PURE__*/_react.default.createElement(_tabs.Tab, {
      className: "confirm-page-container-content__tab",
      name: t('details')
    }, detailsComponent), /*#__PURE__*/_react.default.createElement(_tabs.Tab, {
      className: "confirm-page-container-content__tab",
      name: t('data')
    }, dataComponent), dataHexComponent && /*#__PURE__*/_react.default.createElement(_tabs.Tab, {
      className: "confirm-page-container-content__tab",
      name: t('dataHex')
    }, dataHexComponent));
  }

  render() {
    const {
      action,
      errorKey,
      errorMessage,
      hasSimulationError,
      title,
      titleComponent,
      subtitleComponent,
      hideSubtitle,
      identiconAddress,
      nonce,
      detailsComponent,
      dataComponent,
      warning,
      onCancelAll,
      onCancel,
      cancelText,
      onSubmit,
      submitText,
      disabled,
      unapprovedTxCount,
      rejectNText,
      origin,
      ethGasPriceWarning,
      hideTitle,
      setUserAcknowledgedGasMissing,
      hideUserAcknowledgedGasMissing,
      supportsEIP1559V2
    } = this.props;
    const primaryAction = hideUserAcknowledgedGasMissing ? null : {
      label: this.context.t('tryAnywayOption'),
      onClick: setUserAcknowledgedGasMissing
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content"
    }, warning ? /*#__PURE__*/_react.default.createElement(_.ConfirmPageContainerWarning, {
      warning: warning
    }) : null, ethGasPriceWarning && /*#__PURE__*/_react.default.createElement(_.ConfirmPageContainerWarning, {
      warning: ethGasPriceWarning
    }), hasSimulationError && /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__error-container"
    }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      type: "danger",
      primaryAction: primaryAction,
      message: this.context.t('simulationErrorMessage')
    })), /*#__PURE__*/_react.default.createElement(_.ConfirmPageContainerSummary, {
      className: (0, _classnames.default)({
        'confirm-page-container-summary--border': !detailsComponent || !dataComponent
      }),
      action: action,
      title: title,
      titleComponent: titleComponent,
      subtitleComponent: subtitleComponent,
      hideSubtitle: hideSubtitle,
      identiconAddress: identiconAddress,
      nonce: nonce,
      origin: origin,
      hideTitle: hideTitle
    }), this.renderContent(), !supportsEIP1559V2 && !hasSimulationError && (errorKey || errorMessage) && /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-page-container-content__error-container"
    }, /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
      errorMessage: errorMessage,
      errorKey: errorKey
    })), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      onCancel: onCancel,
      cancelText: cancelText,
      onSubmit: onSubmit,
      submitText: submitText,
      disabled: disabled
    }, unapprovedTxCount > 1 ? /*#__PURE__*/_react.default.createElement("a", {
      onClick: onCancelAll
    }, rejectNText) : null));
  }

}

exports.default = ConfirmPageContainerContent;
(0, _defineProperty2.default)(ConfirmPageContainerContent, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
(0, _defineProperty2.default)(ConfirmPageContainerContent, "propTypes", {
  action: _propTypes.default.string,
  dataComponent: _propTypes.default.node,
  dataHexComponent: _propTypes.default.node,
  detailsComponent: _propTypes.default.node,
  errorKey: _propTypes.default.string,
  errorMessage: _propTypes.default.string,
  hasSimulationError: _propTypes.default.bool,
  hideSubtitle: _propTypes.default.bool,
  identiconAddress: _propTypes.default.string,
  nonce: _propTypes.default.string,
  subtitleComponent: _propTypes.default.node,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  titleComponent: _propTypes.default.node,
  warning: _propTypes.default.string,
  origin: _propTypes.default.string.isRequired,
  ethGasPriceWarning: _propTypes.default.string,
  // Footer
  onCancelAll: _propTypes.default.func,
  onCancel: _propTypes.default.func,
  cancelText: _propTypes.default.string,
  onSubmit: _propTypes.default.func,
  setUserAcknowledgedGasMissing: _propTypes.default.func,
  submitText: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  hideUserAcknowledgedGasMissing: _propTypes.default.bool,
  unapprovedTxCount: _propTypes.default.number,
  rejectNText: _propTypes.default.string,
  hideTitle: _propTypes.default.bool,
  supportsEIP1559V2: _propTypes.default.bool
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-content.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-summary/index.js", {"./confirm-page-container-summary.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-summary/confirm-page-container-summary.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-summary/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerSummary.default;
  }
});

var _confirmPageContainerSummary = _interopRequireDefault(require("./confirm-page-container-summary.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-summary/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-warning/index.js", {"./confirm-page-container-warning.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-warning/confirm-page-container-warning.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-warning/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmPageContainerWarning.default;
  }
});

var _confirmPageContainerWarning = _interopRequireDefault(require("./confirm-page-container-warning.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-warning/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-header/signature-request-header.component.js", {"../../account-list-item":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/account-list-item/index.js","../../network-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/network-display/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-header/signature-request-header.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _accountListItem = _interopRequireDefault(require("../../account-list-item"));

var _networkDisplay = _interopRequireDefault(require("../../network-display"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SignatureRequestHeader extends _react.PureComponent {
  render() {
    const {
      fromAccount
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-header--account"
    }, fromAccount ? /*#__PURE__*/_react.default.createElement(_accountListItem.default, {
      account: fromAccount
    }) : null), /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-header--network"
    }, /*#__PURE__*/_react.default.createElement(_networkDisplay.default, {
      colored: false
    })));
  }

}

exports.default = SignatureRequestHeader;
(0, _defineProperty2.default)(SignatureRequestHeader, "propTypes", {
  fromAccount: _propTypes.default.object
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-header/signature-request-header.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-footer/signature-request-footer.component.js", {"../../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-footer/signature-request-footer.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../../ui/button"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SignatureRequestFooter extends _react.PureComponent {
  render() {
    const {
      cancelAction,
      signAction,
      disabled = false
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-footer"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: cancelAction,
      type: "secondary",
      large: true
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: signAction,
      type: "primary",
      disabled: disabled,
      large: true
    }, this.context.t('sign')));
  }

}

exports.default = SignatureRequestFooter;
(0, _defineProperty2.default)(SignatureRequestFooter, "propTypes", {
  cancelAction: _propTypes.default.func.isRequired,
  signAction: _propTypes.default.func.isRequired,
  disabled: _propTypes.default.bool
});
(0, _defineProperty2.default)(SignatureRequestFooter, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-footer/signature-request-footer.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-message/signature-request-message.component.js", {"@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-message/signature-request-message.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SignatureRequestMessage extends _react.PureComponent {
  renderNode(data) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-message--node"
    }, Object.entries(data).map(([label, value], i) => /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('signature-request-message--node', {
        'signature-request-message--node-leaf': typeof value !== 'object' || value === null
      }),
      key: i
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "signature-request-message--node-label"
    }, label, ":", ' '), typeof value === 'object' && value !== null ? this.renderNode(value) : /*#__PURE__*/_react.default.createElement("span", {
      className: "signature-request-message--node-value"
    }, `${value}`))));
  }

  render() {
    const {
      data
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-message"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-message__title"
    }, this.context.t('signatureRequest1')), /*#__PURE__*/_react.default.createElement("div", {
      className: "signature-request-message--root"
    }, this.renderNode(data)));
  }

}

exports.default = SignatureRequestMessage;
(0, _defineProperty2.default)(SignatureRequestMessage, "propTypes", {
  data: _propTypes.default.object.isRequired
});
(0, _defineProperty2.default)(SignatureRequestMessage, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/signature-request/signature-request-message/signature-request-message.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/objectWithoutProperties.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/objectWithoutProperties.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

exports.default = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/objectWithoutProperties.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/index.js", {"./chromeDark":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/chromeDark.js","./chromeLight":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/chromeLight.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/index.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chromeLight = exports.chromeDark = undefined;

var _chromeDark2 = require('./chromeDark');

var _chromeDark3 = _interopRequireDefault(_chromeDark2);

var _chromeLight2 = require('./chromeLight');

var _chromeLight3 = _interopRequireDefault(_chromeLight2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.chromeDark = _chromeDark3.default;
exports.chromeLight = _chromeLight3.default;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectLabel.js", {"../object/ObjectName":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectName.js","../object/ObjectValue":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectValue.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectLabel.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ObjectName = require('../object/ObjectName');

var _ObjectName2 = _interopRequireDefault(_ObjectName);

var _ObjectValue = require('../object/ObjectValue');

var _ObjectValue2 = _interopRequireDefault(_ObjectValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * if isNonenumerable is specified, render the name dimmed
 */
var ObjectLabel = function ObjectLabel(_ref) {
  var name = _ref.name,
      data = _ref.data,
      isNonenumerable = _ref.isNonenumerable;

  var object = data;

  return _react2.default.createElement(
    'span',
    null,
    _react2.default.createElement(_ObjectName2.default, { name: name, dimmed: isNonenumerable }),
    _react2.default.createElement(
      'span',
      null,
      ': '
    ),
    _react2.default.createElement(_ObjectValue2.default, { object: object })
  );
};

ObjectLabel.propTypes = {
  /** Non enumerable object property will be dimmed */
  isNonenumerable: _propTypes2.default.bool
};

ObjectLabel.defaultProps = {
  isNonenumerable: false
};

exports.default = ObjectLabel;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectLabel.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-dom/index.js", {"is-object":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-object/index.js","is-window":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-window/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/is-dom/index.js
      return function (require, module, exports) {
var isObject = require('is-object')
var isWindow = require('is-window')

function isNode (val) {
  if (!isObject(val) || !isWindow(window) || typeof window.Node !== 'function') {
    return false
  }

  return typeof val.nodeType === 'number' &&
    typeof val.nodeName === 'string'
}

module.exports = isNode

      };
    };
  }
}, {package:"is-dom",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-dom/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js", {"../core-js/object/assign":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/assign.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

var _assign = require("../core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/DOMInspector.js", {"../styles/ThemeProvider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/ThemeProvider.js","../tree-view/TreeView":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/TreeView.js","./DOMNodePreview":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/DOMNodePreview.js","./shouldInline":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/shouldInline.js","babel-runtime/helpers/classCallCheck":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/classCallCheck.js","babel-runtime/helpers/createClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/createClass.js","babel-runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js","babel-runtime/helpers/inherits":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/inherits.js","babel-runtime/helpers/possibleConstructorReturn":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/possibleConstructorReturn.js","babel-runtime/regenerator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/regenerator/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/DOMInspector.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _DOMNodePreview = require('./DOMNodePreview');

var _DOMNodePreview2 = _interopRequireDefault(_DOMNodePreview);

var _TreeView = require('../tree-view/TreeView');

var _TreeView2 = _interopRequireDefault(_TreeView);

var _shouldInline = require('./shouldInline');

var _shouldInline2 = _interopRequireDefault(_shouldInline);

var _ThemeProvider = require('../styles/ThemeProvider');

var _ThemeProvider2 = _interopRequireDefault(_ThemeProvider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var domIterator = /*#__PURE__*/_regenerator2.default.mark(function domIterator(data) {
  var textInlined, i, node;
  return _regenerator2.default.wrap(function domIterator$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(data && data.childNodes)) {
            _context.next = 17;
            break;
          }

          textInlined = (0, _shouldInline2.default)(data);

          if (!textInlined) {
            _context.next = 4;
            break;
          }

          return _context.abrupt('return');

        case 4:
          i = 0;

        case 5:
          if (!(i < data.childNodes.length)) {
            _context.next = 14;
            break;
          }

          node = data.childNodes[i];

          if (!(node.nodeType === Node.TEXT_NODE && node.textContent.trim().length === 0)) {
            _context.next = 9;
            break;
          }

          return _context.abrupt('continue', 11);

        case 9:
          _context.next = 11;
          return {
            name: node.tagName + '[' + i + ']',
            data: node
          };

        case 11:
          i++;
          _context.next = 5;
          break;

        case 14:
          if (!data.tagName) {
            _context.next = 17;
            break;
          }

          _context.next = 17;
          return {
            name: 'CLOSE_TAG',
            data: {
              tagName: data.tagName
            },
            isCloseTag: true
          };

        case 17:
        case 'end':
          return _context.stop();
      }
    }
  }, domIterator, this);
});

var DOMInspector = function (_Component) {
  (0, _inherits3.default)(DOMInspector, _Component);

  function DOMInspector() {
    (0, _classCallCheck3.default)(this, DOMInspector);
    return (0, _possibleConstructorReturn3.default)(this, (DOMInspector.__proto__ || Object.getPrototypeOf(DOMInspector)).apply(this, arguments));
  }

  (0, _createClass3.default)(DOMInspector, [{
    key: 'render',
    value: function render() {
      var nodeRenderer = _DOMNodePreview2.default;

      return _react2.default.createElement(
        _ThemeProvider2.default,
        { theme: this.props.theme },
        _react2.default.createElement(_TreeView2.default, (0, _extends3.default)({ nodeRenderer: nodeRenderer, dataIterator: domIterator }, this.props))
      );
    }
  }]);
  return DOMInspector;
}(_react.Component);

DOMInspector.propTypes = {
  /** The DOM Node to inspect */
  data: _propTypes2.default.object.isRequired
};
DOMInspector.defaultProps = {
  theme: 'chromeLight'
};
exports.default = DOMInspector;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/DOMInspector.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectValue.js", {"../styles/createStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js","babel-runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js","babel-runtime/helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectValue.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createStyles = require('../styles/createStyles');

var _createStyles2 = _interopRequireDefault(_createStyles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A short description of the object values.
 * Can be used to render tree node in ObjectInspector
 * or render objects in TableInspector.
 */
var ObjectValue = function ObjectValue(_ref, _ref2) {
  var object = _ref.object,
      styles = _ref.styles;
  var theme = _ref2.theme;

  var themeStyles = (0, _createStyles2.default)('ObjectValue', theme);

  var mkStyle = function mkStyle(key) {
    return (0, _extends3.default)({}, themeStyles[key], styles);
  };

  switch (typeof object === 'undefined' ? 'undefined' : (0, _typeof3.default)(object)) {
    case 'number':
      return _react2.default.createElement(
        'span',
        { style: mkStyle('objectValueNumber') },
        String(object)
      );
    case 'string':
      return _react2.default.createElement(
        'span',
        { style: mkStyle('objectValueString') },
        '"',
        object,
        '"'
      );
    case 'boolean':
      return _react2.default.createElement(
        'span',
        { style: mkStyle('objectValueBoolean') },
        String(object)
      );
    case 'undefined':
      return _react2.default.createElement(
        'span',
        { style: mkStyle('objectValueUndefined') },
        'undefined'
      );
    case 'object':
      if (object === null) {
        return _react2.default.createElement(
          'span',
          { style: mkStyle('objectValueNull') },
          'null'
        );
      }
      if (object instanceof Date) {
        return _react2.default.createElement(
          'span',
          null,
          object.toString()
        );
      }
      if (object instanceof RegExp) {
        return _react2.default.createElement(
          'span',
          { style: mkStyle('objectValueRegExp') },
          object.toString()
        );
      }
      if (Array.isArray(object)) {
        return _react2.default.createElement(
          'span',
          null,
          'Array[' + object.length + ']'
        );
      }

      if (!object.constructor) {
        return _react2.default.createElement(
          'span',
          null,
          'Object'
        );
      }

      return _react2.default.createElement(
        'span',
        null,
        object.constructor.name
      );
    case 'function':
      return _react2.default.createElement(
        'span',
        null,
        _react2.default.createElement(
          'span',
          { style: mkStyle('objectValueFunctionKeyword') },
          'function'
        ),
        _react2.default.createElement(
          'span',
          { style: mkStyle('objectValueFunctionName') },
          '\xA0',
          object.name,
          '()'
        )
      );
    case 'symbol':
      return _react2.default.createElement(
        'span',
        { style: mkStyle('objectValueSymbol') },
        object.toString()
      );
    default:
      return _react2.default.createElement('span', null);
  }
};

ObjectValue.propTypes = {
  /** the object to describe */
  object: _propTypes2.default.any
};

ObjectValue.contextTypes = {
  theme: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
};

exports.default = ObjectValue;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectValue.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectName.js", {"../styles/createStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js","babel-runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectName.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createStyles = require('../styles/createStyles');

var _createStyles2 = _interopRequireDefault(_createStyles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A view for object property names.
 *
 * If the property name is enumerable (in Object.keys(object)),
 * the property name will be rendered normally.
 *
 * If the property name is not enumerable (`Object.prototype.propertyIsEnumerable()`),
 * the property name will be dimmed to show the difference.
 */
var ObjectName = function ObjectName(_ref, _ref2) {
  var name = _ref.name,
      dimmed = _ref.dimmed,
      styles = _ref.styles;
  var theme = _ref2.theme;

  var themeStyles = (0, _createStyles2.default)('ObjectName', theme);
  var appliedStyles = (0, _extends3.default)({}, themeStyles.base, dimmed ? themeStyles['dimmed'] : {}, styles);

  return _react2.default.createElement(
    'span',
    { style: appliedStyles },
    name
  );
};

ObjectName.propTypes = {
  /** Property name */
  name: _propTypes2.default.string,
  /** Should property name be dimmed */
  dimmed: _propTypes2.default.bool
};

ObjectName.defaultProps = {
  dimmed: false
};

ObjectName.contextTypes = {
  theme: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
};

exports.default = ObjectName;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectName.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectRootLabel.js", {"../object/ObjectName":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectName.js","./ObjectPreview":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectPreview.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectRootLabel.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ObjectName = require('../object/ObjectName');

var _ObjectName2 = _interopRequireDefault(_ObjectName);

var _ObjectPreview = require('./ObjectPreview');

var _ObjectPreview2 = _interopRequireDefault(_ObjectPreview);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ObjectRootLabel = function ObjectRootLabel(_ref) {
  var name = _ref.name,
      data = _ref.data;

  if (typeof name === 'string') {
    return _react2.default.createElement(
      'span',
      null,
      _react2.default.createElement(_ObjectName2.default, { name: name }),
      _react2.default.createElement(
        'span',
        null,
        ': '
      ),
      _react2.default.createElement(_ObjectPreview2.default, { data: data })
    );
  } else {
    return _react2.default.createElement(_ObjectPreview2.default, { data: data });
  }
};

exports.default = ObjectRootLabel;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectRootLabel.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectInspector.js", {"../styles/ThemeProvider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/ThemeProvider.js","../tree-view/TreeView":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/TreeView.js","./ObjectLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectLabel.js","./ObjectRootLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectRootLabel.js","babel-runtime/helpers/classCallCheck":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/classCallCheck.js","babel-runtime/helpers/createClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/createClass.js","babel-runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js","babel-runtime/helpers/inherits":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/inherits.js","babel-runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/objectWithoutProperties.js","babel-runtime/helpers/possibleConstructorReturn":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/possibleConstructorReturn.js","babel-runtime/helpers/slicedToArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/slicedToArray.js","babel-runtime/helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js","babel-runtime/regenerator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/regenerator/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectInspector.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TreeView = require('../tree-view/TreeView');

var _TreeView2 = _interopRequireDefault(_TreeView);

var _ObjectRootLabel = require('./ObjectRootLabel');

var _ObjectRootLabel2 = _interopRequireDefault(_ObjectRootLabel);

var _ObjectLabel = require('./ObjectLabel');

var _ObjectLabel2 = _interopRequireDefault(_ObjectLabel);

var _ThemeProvider = require('../styles/ThemeProvider');

var _ThemeProvider2 = _interopRequireDefault(_ThemeProvider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createIterator = function createIterator(showNonenumerable, sortObjectKeys) {
  var objectIterator = /*#__PURE__*/_regenerator2.default.mark(function objectIterator(data) {
    var shouldIterate, i, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry, _entry, k, v, keys, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, propertyName, propertyValue, _propertyValue;

    return _regenerator2.default.wrap(function objectIterator$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            shouldIterate = (typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object' && data !== null || typeof data === 'function';

            if (shouldIterate) {
              _context.next = 3;
              break;
            }

            return _context.abrupt('return');

          case 3:
            if (!(!Array.isArray(data) && data[Symbol.iterator])) {
              _context.next = 40;
              break;
            }

            i = 0;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 8;
            _iterator = data[Symbol.iterator]();

          case 10:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 24;
              break;
            }

            entry = _step.value;

            if (!(Array.isArray(entry) && entry.length === 2)) {
              _context.next = 18;
              break;
            }

            _entry = (0, _slicedToArray3.default)(entry, 2), k = _entry[0], v = _entry[1];
            _context.next = 16;
            return {
              name: k,
              data: v
            };

          case 16:
            _context.next = 20;
            break;

          case 18:
            _context.next = 20;
            return {
              name: i.toString(),
              data: entry
            };

          case 20:
            i++;

          case 21:
            _iteratorNormalCompletion = true;
            _context.next = 10;
            break;

          case 24:
            _context.next = 30;
            break;

          case 26:
            _context.prev = 26;
            _context.t0 = _context['catch'](8);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 30:
            _context.prev = 30;
            _context.prev = 31;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 33:
            _context.prev = 33;

            if (!_didIteratorError) {
              _context.next = 36;
              break;
            }

            throw _iteratorError;

          case 36:
            return _context.finish(33);

          case 37:
            return _context.finish(30);

          case 38:
            _context.next = 81;
            break;

          case 40:
            keys = Object.getOwnPropertyNames(data);

            if (sortObjectKeys === true) {
              keys.sort();
            } else if (typeof sortObjectKeys === 'function') {
              keys.sort(sortObjectKeys);
            }

            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context.prev = 45;
            _iterator2 = keys[Symbol.iterator]();

          case 47:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context.next = 64;
              break;
            }

            propertyName = _step2.value;

            if (!data.propertyIsEnumerable(propertyName)) {
              _context.next = 55;
              break;
            }

            propertyValue = data[propertyName];
            _context.next = 53;
            return {
              name: propertyName || '""',
              data: propertyValue
            };

          case 53:
            _context.next = 61;
            break;

          case 55:
            if (!showNonenumerable) {
              _context.next = 61;
              break;
            }

            // To work around the error (happens some time when propertyName === 'caller' || propertyName === 'arguments')
            // 'caller' and 'arguments' are restricted function properties and cannot be accessed in this context
            // http://stackoverflow.com/questions/31921189/caller-and-arguments-are-restricted-function-properties-and-cannot-be-access
            _propertyValue = void 0;

            try {
              _propertyValue = data[propertyName];
            } catch (e) {
              // console.warn(e)
            }

            if (!(_propertyValue !== undefined)) {
              _context.next = 61;
              break;
            }

            _context.next = 61;
            return {
              name: propertyName,
              data: _propertyValue,
              isNonenumerable: true
            };

          case 61:
            _iteratorNormalCompletion2 = true;
            _context.next = 47;
            break;

          case 64:
            _context.next = 70;
            break;

          case 66:
            _context.prev = 66;
            _context.t1 = _context['catch'](45);
            _didIteratorError2 = true;
            _iteratorError2 = _context.t1;

          case 70:
            _context.prev = 70;
            _context.prev = 71;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 73:
            _context.prev = 73;

            if (!_didIteratorError2) {
              _context.next = 76;
              break;
            }

            throw _iteratorError2;

          case 76:
            return _context.finish(73);

          case 77:
            return _context.finish(70);

          case 78:
            if (!(showNonenumerable && data !== Object.prototype /* already added */)) {
              _context.next = 81;
              break;
            }

            _context.next = 81;
            return {
              name: '__proto__',
              data: Object.getPrototypeOf(data),
              isNonenumerable: true
            };

          case 81:
          case 'end':
            return _context.stop();
        }
      }
    }, objectIterator, this, [[8, 26, 30, 38], [31,, 33, 37], [45, 66, 70, 78], [71,, 73, 77]]);
  });

  return objectIterator;
};

var defaultNodeRenderer = function defaultNodeRenderer(_ref) {
  var depth = _ref.depth,
      name = _ref.name,
      data = _ref.data,
      isNonenumerable = _ref.isNonenumerable;
  return depth === 0 ? _react2.default.createElement(_ObjectRootLabel2.default, { name: name, data: data }) : _react2.default.createElement(_ObjectLabel2.default, { name: name, data: data, isNonenumerable: isNonenumerable });
};

/**
 * Tree-view for objects
 */

var ObjectInspector = function (_Component) {
  (0, _inherits3.default)(ObjectInspector, _Component);

  function ObjectInspector() {
    (0, _classCallCheck3.default)(this, ObjectInspector);
    return (0, _possibleConstructorReturn3.default)(this, (ObjectInspector.__proto__ || Object.getPrototypeOf(ObjectInspector)).apply(this, arguments));
  }

  (0, _createClass3.default)(ObjectInspector, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          showNonenumerable = _props.showNonenumerable,
          sortObjectKeys = _props.sortObjectKeys,
          nodeRenderer = _props.nodeRenderer,
          rest = (0, _objectWithoutProperties3.default)(_props, ['showNonenumerable', 'sortObjectKeys', 'nodeRenderer']);

      var dataIterator = createIterator(showNonenumerable, sortObjectKeys);

      var renderer = nodeRenderer ? nodeRenderer : defaultNodeRenderer;

      return _react2.default.createElement(
        _ThemeProvider2.default,
        { theme: this.props.theme },
        _react2.default.createElement(_TreeView2.default, (0, _extends3.default)({ nodeRenderer: renderer, dataIterator: dataIterator }, rest))
      );
    }
  }]);
  return ObjectInspector;
}(_react.Component);

ObjectInspector.defaultProps = {
  showNonenumerable: false,

  theme: 'chromeLight'
};
ObjectInspector.propTypes = {
  /** An integer specifying to which level the tree should be initially expanded. */
  expandLevel: _propTypes2.default.number,
  /** An array containing all the paths that should be expanded when the component is initialized, or a string of just one path */
  expandPaths: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.array]),

  name: _propTypes2.default.string,
  /** Not required prop because we also allow undefined value */
  data: _propTypes2.default.any,

  /** A known theme or theme object */
  theme: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),

  /** Show non-enumerable properties */
  showNonenumerable: _propTypes2.default.bool,
  /** Sort object keys with optional compare function. */
  sortObjectKeys: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),

  /** Provide a custom nodeRenderer */
  nodeRenderer: _propTypes2.default.func
};
exports.default = ObjectInspector;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectInspector.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/TableInspector.js", {"../styles/ThemeProvider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/ThemeProvider.js","../styles/createStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js","./DataContainer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/DataContainer.js","./HeaderContainer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/HeaderContainer.js","./getHeaders":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/getHeaders.js","babel-runtime/helpers/classCallCheck":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/classCallCheck.js","babel-runtime/helpers/createClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/createClass.js","babel-runtime/helpers/inherits":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/inherits.js","babel-runtime/helpers/possibleConstructorReturn":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/possibleConstructorReturn.js","babel-runtime/helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/TableInspector.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ThemeProvider = require('../styles/ThemeProvider');

var _ThemeProvider2 = _interopRequireDefault(_ThemeProvider);

var _createStyles = require('../styles/createStyles');

var _createStyles2 = _interopRequireDefault(_createStyles);

var _getHeaders2 = require('./getHeaders');

var _getHeaders3 = _interopRequireDefault(_getHeaders2);

var _DataContainer = require('./DataContainer');

var _DataContainer2 = _interopRequireDefault(_DataContainer);

var _HeaderContainer = require('./HeaderContainer');

var _HeaderContainer2 = _interopRequireDefault(_HeaderContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TableInspector = function (_Component) {
  (0, _inherits3.default)(TableInspector, _Component);

  function TableInspector(props) {
    (0, _classCallCheck3.default)(this, TableInspector);

    var _this = (0, _possibleConstructorReturn3.default)(this, (TableInspector.__proto__ || Object.getPrototypeOf(TableInspector)).call(this, props));

    _this.state = {
      sorted: false, // has user ever clicked the <th> tag to sort?
      sortIndexColumn: false, // is index column sorted?
      sortColumn: undefined, // which column is sorted?
      sortAscending: false // is sorting ascending or descending?
    };
    return _this;
  }

  (0, _createClass3.default)(TableInspector, [{
    key: 'handleIndexTHClick',
    value: function handleIndexTHClick() {
      this.setState(function (_ref) {
        var sortIndexColumn = _ref.sortIndexColumn,
            sortAscending = _ref.sortAscending;
        return {
          sorted: true,
          sortIndexColumn: true,
          sortColumn: undefined,
          // when changed to a new column, default to asending
          sortAscending: sortIndexColumn ? !sortAscending : true
        };
      });
    }
  }, {
    key: 'handleTHClick',
    value: function handleTHClick(col) {
      this.setState(function (_ref2) {
        var sortColumn = _ref2.sortColumn,
            sortAscending = _ref2.sortAscending;
        return {
          sorted: true,
          sortIndexColumn: false,
          // update sort column
          sortColumn: col,
          // when changed to a new column, default to asending
          sortAscending: col === sortColumn ? !sortAscending : true
        };
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var data = this.props.data;
      var columns = this.props.columns;

      var theme = this.props.theme;

      var styles = (0, _createStyles2.default)('TableInspector', theme);

      if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) !== 'object' || data === null) {
        return _react2.default.createElement('div', null);
      }

      var _getHeaders = (0, _getHeaders3.default)(data),
          rowHeaders = _getHeaders.rowHeaders,
          colHeaders = _getHeaders.colHeaders;

      // columns to be displayed are specified
      // NOTE: there's some space for optimization here


      if (columns !== undefined) {
        colHeaders = columns;
      }

      var rowsData = rowHeaders.map(function (rowHeader) {
        return data[rowHeader];
      });

      var sortIndexColumn = this.state.sortIndexColumn,
          sortColumn = this.state.sortColumn,
          sortAscending = this.state.sortAscending;

      var columnDataWithRowIndexes = void 0; /* row indexes are [0..nRows-1] */
      // TODO: refactor
      if (sortColumn !== undefined) {
        // the column to be sorted (rowsData, column) => [[columnData, rowIndex]]
        columnDataWithRowIndexes = rowsData.map(function (rowData, index) {
          // normalize rowData
          if ((typeof rowData === 'undefined' ? 'undefined' : (0, _typeof3.default)(rowData)) === 'object' && rowData !== null /*&& rowData.hasOwnProperty(sortColumn)*/
          ) {
              var columnData = rowData[sortColumn];
              return [columnData, index];
            }
          return [undefined, index];
        });
      } else {
        if (sortIndexColumn) {
          columnDataWithRowIndexes = rowHeaders.map(function (rowData, index) {
            var columnData = rowHeaders[index];
            return [columnData, index];
          });
        }
      }
      if (columnDataWithRowIndexes !== undefined) {
        // apply a mapper before sorting (because we need to access inside a container)
        var comparator = function comparator(mapper, ascending) {
          return function (a, b) {
            var v1 = mapper(a); // the datum
            var v2 = mapper(b);
            var type1 = typeof v1 === 'undefined' ? 'undefined' : (0, _typeof3.default)(v1);
            var type2 = typeof v2 === 'undefined' ? 'undefined' : (0, _typeof3.default)(v2);
            // use '<' operator to compare same type of values or compare type precedence order #
            var lt = function lt(v1, v2) {
              if (v1 < v2) {
                return -1;
              } else if (v1 > v2) {
                return 1;
              } else {
                return 0;
              }
            };
            var result = void 0;
            if (type1 === type2) {
              result = lt(v1, v2);
            } else {
              // order of different types
              var order = {
                string: 0,
                number: 1,
                object: 2,
                symbol: 3,
                boolean: 4,
                undefined: 5,
                function: 6
              };
              result = lt(order[type1], order[type2]);
            }
            // reverse result if descending
            if (!ascending) result = -result;
            return result;
          };
        };
        var sortedRowIndexes = columnDataWithRowIndexes.sort(comparator(function (item) {
          return item[0];
        }, sortAscending)).map(function (item) {
          return item[1];
        }); // sorted row indexes
        rowHeaders = sortedRowIndexes.map(function (i) {
          return rowHeaders[i];
        });
        rowsData = sortedRowIndexes.map(function (i) {
          return rowsData[i];
        });
      }

      return _react2.default.createElement(
        _ThemeProvider2.default,
        { theme: this.props.theme },
        _react2.default.createElement(
          'div',
          { style: styles.base },
          _react2.default.createElement(_HeaderContainer2.default, {
            columns: colHeaders
            /* for sorting */
            , sorted: this.state.sorted,
            sortIndexColumn: this.state.sortIndexColumn,
            sortColumn: this.state.sortColumn,
            sortAscending: this.state.sortAscending,
            onTHClick: this.handleTHClick.bind(this),
            onIndexTHClick: this.handleIndexTHClick.bind(this)
          }),
          _react2.default.createElement(_DataContainer2.default, { rows: rowHeaders, columns: colHeaders, rowsData: rowsData })
        )
      );
    }
  }]);
  return TableInspector;
}(_react.Component); /**
                      * Specs:
                      * https://developer.chrome.com/devtools/docs/commandline-api#tabledata-columns
                      * https://developer.mozilla.org/en-US/docs/Web/API/Console/table
                      */

exports.default = TableInspector;


TableInspector.propTypes = {
  /**
   * the Javascript object you would like to inspect, either an array or an object
   */
  data: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object]),
  /**
   * An array of the names of the columns you'd like to display in the table
   */
  columns: _propTypes2.default.array
};

TableInspector.defaultProps = {
  data: undefined,
  columns: undefined,
  theme: 'chromeLight'
};
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/TableInspector.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/optimism/fetchEstimatedL1Fee.js", {"./buildUnserializedTransaction":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/optimism/buildUnserializedTransaction.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@eth-optimism/contracts":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/index.js","ethers":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethers/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/optimism/fetchEstimatedL1Fee.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fetchEstimatedL1Fee;

var ethers = _interopRequireWildcard(require("ethers"));

var optimismContracts = _interopRequireWildcard(require("@eth-optimism/contracts"));

var _buildUnserializedTransaction = _interopRequireDefault(require("./buildUnserializedTransaction"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// The code in this file is largely drawn from https://community.optimism.io/docs/developers/l2/new-fees.html#for-frontend-and-wallet-developers
function buildOVMGasPriceOracleContract(eth) {
  const OVMGasPriceOracle = optimismContracts.getContractFactory('OVM_GasPriceOracle').attach(optimismContracts.predeploys.OVM_GasPriceOracle);
  const abi = JSON.parse(OVMGasPriceOracle.interface.format(ethers.utils.FormatTypes.json));
  return eth.contract(abi).at(OVMGasPriceOracle.address);
}

async function fetchEstimatedL1Fee(eth, txMeta) {
  var _result$;

  const contract = buildOVMGasPriceOracleContract(eth);
  const serializedTransaction = (0, _buildUnserializedTransaction.default)(txMeta).serialize();
  const result = await contract.getL1Fee(serializedTransaction);
  return result === null || result === void 0 ? void 0 : (_result$ = result[0]) === null || _result$ === void 0 ? void 0 : _result$.toString(16);
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/optimism/fetchEstimatedL1Fee.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-header/confirm-page-container-header.component.js", {"../../../../../app/scripts/lib/util":"/home/clarisco/Desktop/metamask-extension-develop/app/scripts/lib/util.js","../../../../../shared/constants/app":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/app.js","../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../ui/account-mismatch-warning/account-mismatch-warning.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-mismatch-warning/account-mismatch-warning.component.js","../../../ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../network-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/network-display/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-header/confirm-page-container-header.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmPageContainerHeader;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _app = require("../../../../../shared/constants/app");

var _util = require("../../../../../app/scripts/lib/util");

var _networkDisplay = _interopRequireDefault(require("../../network-display"));

var _identicon = _interopRequireDefault(require("../../../ui/identicon"));

var _util2 = require("../../../../helpers/utils/util");

var _accountMismatchWarning = _interopRequireDefault(require("../../../ui/account-mismatch-warning/account-mismatch-warning.component"));

var _useI18nContext = require("../../../../hooks/useI18nContext");

function ConfirmPageContainerHeader({
  onEdit,
  showEdit,
  accountAddress,
  showAccountInHeader,
  children
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const windowType = (0, _util.getEnvironmentType)();
  const isFullScreen = windowType !== _app.ENVIRONMENT_TYPE_NOTIFICATION && windowType !== _app.ENVIRONMENT_TYPE_POPUP;

  if (!showEdit && isFullScreen) {
    return children;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-header__row"
  }, showAccountInHeader ? /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-header__address-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-header__address-identicon"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: accountAddress,
    diameter: 24
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-header__address"
  }, (0, _util2.shortenAddress)(accountAddress)), /*#__PURE__*/_react.default.createElement(_accountMismatchWarning.default, {
    address: accountAddress
  })) : /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-header__back-button-container",
    style: {
      visibility: showEdit ? 'initial' : 'hidden'
    }
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/caret-left.svg",
    alt: ""
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "confirm-page-container-header__back-button",
    onClick: () => onEdit()
  }, t('edit'))), isFullScreen ? null : /*#__PURE__*/_react.default.createElement(_networkDisplay.default, null)), children);
}

ConfirmPageContainerHeader.propTypes = {
  accountAddress: _propTypes.default.string,
  showAccountInHeader: _propTypes.default.bool,
  showEdit: _propTypes.default.bool,
  onEdit: _propTypes.default.func,
  children: _propTypes.default.node
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-header/confirm-page-container-header.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-detail-row/confirm-detail-row.component.js", {"../../../../helpers/constants/common":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/common.js","../../user-preferenced-currency-display":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-display/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-detail-row/confirm-detail-row.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../user-preferenced-currency-display"));

var _common = require("../../../../helpers/constants/common");

const ConfirmDetailRow = props => {
  const {
    label,
    primaryText,
    secondaryText,
    onHeaderClick,
    primaryValueTextColor,
    headerText,
    headerTextClassName,
    value
  } = props;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-detail-row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-detail-row__label"
  }, label), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-detail-row__details"
  }, headerText && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('confirm-detail-row__header-text', headerTextClassName),
    onClick: () => onHeaderClick === null || onHeaderClick === void 0 ? void 0 : onHeaderClick()
  }, headerText), primaryText ? /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-detail-row__primary",
    style: {
      color: primaryValueTextColor
    }
  }, primaryText) : /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    className: "confirm-detail-row__primary",
    type: _common.PRIMARY,
    value: value,
    showEthLogo: true,
    ethLogoHeight: "18",
    style: {
      color: primaryValueTextColor
    },
    hideLabel: true
  }), secondaryText ? /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-detail-row__secondary"
  }, secondaryText) : /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    className: "confirm-detail-row__secondary",
    type: _common.SECONDARY,
    value: value,
    showEthLogo: true,
    hideLabel: true
  })));
};

ConfirmDetailRow.propTypes = {
  headerText: _propTypes.default.string,
  headerTextClassName: _propTypes.default.string,
  label: _propTypes.default.string,
  onHeaderClick: _propTypes.default.func,
  primaryValueTextColor: _propTypes.default.string,
  primaryText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  secondaryText: _propTypes.default.string,
  value: _propTypes.default.string
};
var _default = ConfirmDetailRow;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-detail-row/confirm-detail-row.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-navigation/confirm-page-container-navigation.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-navigation/confirm-page-container-navigation.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

const ConfirmPageContainerNavigation = props => {
  const {
    onNextTx,
    totalTx,
    positionOfCurrentTx,
    nextTxId,
    prevTxId,
    showNavigation,
    firstTx,
    lastTx,
    ofText,
    requestsWaitingText
  } = props;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-navigation",
    style: {
      display: showNavigation ? 'flex' : 'none'
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-navigation__container",
    style: {
      visibility: prevTxId ? 'initial' : 'hidden'
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-navigation__arrow",
    "data-testid": "first-page",
    onClick: () => onNextTx(firstTx)
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/double-arrow.svg",
    alt: ""
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-navigation__arrow",
    "data-testid": "previous-page",
    onClick: () => onNextTx(prevTxId)
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/single-arrow.svg",
    alt: ""
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-navigation__textcontainer"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-navigation__navtext"
  }, positionOfCurrentTx, " ", ofText, " ", totalTx), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-navigation__longtext"
  }, requestsWaitingText)), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-navigation__container",
    style: {
      visibility: nextTxId ? 'initial' : 'hidden'
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-navigation__arrow",
    "data-testid": "next-page",
    onClick: () => onNextTx(nextTxId)
  }, /*#__PURE__*/_react.default.createElement("img", {
    className: "confirm-page-container-navigation__imageflip",
    src: "./images/single-arrow.svg",
    alt: ""
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-navigation__arrow",
    "data-testid": "last-page",
    onClick: () => onNextTx(lastTx)
  }, /*#__PURE__*/_react.default.createElement("img", {
    className: "confirm-page-container-navigation__imageflip",
    src: "./images/double-arrow.svg",
    alt: ""
  }))));
};

ConfirmPageContainerNavigation.propTypes = {
  totalTx: _propTypes.default.number,
  positionOfCurrentTx: _propTypes.default.number,
  onNextTx: _propTypes.default.func,
  nextTxId: _propTypes.default.string,
  prevTxId: _propTypes.default.string,
  showNavigation: _propTypes.default.bool,
  firstTx: _propTypes.default.string,
  lastTx: _propTypes.default.string,
  ofText: _propTypes.default.string,
  requestsWaitingText: _propTypes.default.string
};
var _default = ConfirmPageContainerNavigation;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-navigation/confirm-page-container-navigation.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container.component.js", {".":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/index.js","../../../../shared/constants/gas":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/gas.js","../../../../shared/constants/transaction":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/transaction.js","../../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../ui/dialog":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/dialog/index.js","../../ui/error-message":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/error-message/index.js","../../ui/page-container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/page-container/index.js","../../ui/sender-to-recipient":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/index.js","../advanced-gas-fee-popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/index.js","../edit-gas-fee-popover/edit-gas-fee-popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-fee-popover/edit-gas-fee-popover.js","../edit-gas-popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/edit-gas-popover/index.js","../modals/nickname-popovers":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/nickname-popovers/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _gas = require("../../../../shared/constants/gas");

var _gasFee = require("../../../contexts/gasFee");

var _transaction = require("../../../../shared/constants/transaction");

var _pageContainer = require("../../ui/page-container");

var _dialog = _interopRequireDefault(require("../../ui/dialog"));

var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));

var _senderToRecipient = _interopRequireDefault(require("../../ui/sender-to-recipient"));

var _nicknamePopovers = _interopRequireDefault(require("../modals/nickname-popovers"));

var _advancedGasFeePopover = _interopRequireDefault(require("../advanced-gas-fee-popover"));

var _editGasFeePopover = _interopRequireDefault(require("../edit-gas-fee-popover/edit-gas-fee-popover"));

var _editGasPopover = _interopRequireDefault(require("../edit-gas-popover"));

var _ = require(".");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ConfirmPageContainer extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      showNicknamePopovers: false
    });
  }

  render() {
    var _currentTransaction$t;

    const {
      showEdit,
      onEdit,
      fromName,
      fromAddress,
      toName,
      toEns,
      toNickname,
      toAddress,
      disabled,
      errorKey,
      errorMessage,
      contentComponent,
      action,
      title,
      titleComponent,
      subtitleComponent,
      hideSubtitle,
      detailsComponent,
      dataComponent,
      dataHexComponent,
      onCancelAll,
      onCancel,
      onSubmit,
      identiconAddress,
      nonce,
      unapprovedTxCount,
      warning,
      totalTx,
      positionOfCurrentTx,
      nextTxId,
      prevTxId,
      showNavigation,
      onNextTx,
      firstTx,
      lastTx,
      ofText,
      requestsWaitingText,
      hideSenderToRecipient,
      showAccountInHeader,
      origin,
      ethGasPriceWarning,
      editingGas,
      handleCloseEditGas,
      currentTransaction,
      contact = {},
      isOwnedAccount,
      supportsEIP1559V2
    } = this.props;
    const showAddToAddressDialog = !contact.name && toAddress && !isOwnedAccount && !hideSenderToRecipient;
    const shouldDisplayWarning = contentComponent && disabled && (errorKey || errorMessage);
    const hideTitle = (currentTransaction.type === _transaction.TRANSACTION_TYPES.CONTRACT_INTERACTION || currentTransaction.type === _transaction.TRANSACTION_TYPES.DEPLOY_CONTRACT) && ((_currentTransaction$t = currentTransaction.txParams) === null || _currentTransaction$t === void 0 ? void 0 : _currentTransaction$t.value) === '0x0';
    return /*#__PURE__*/_react.default.createElement(_gasFee.GasFeeContextProvider, {
      transaction: currentTransaction
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container"
    }, /*#__PURE__*/_react.default.createElement(_.ConfirmPageContainerNavigation, {
      totalTx: totalTx,
      positionOfCurrentTx: positionOfCurrentTx,
      nextTxId: nextTxId,
      prevTxId: prevTxId,
      showNavigation: showNavigation,
      onNextTx: txId => onNextTx(txId),
      firstTx: firstTx,
      lastTx: lastTx,
      ofText: ofText,
      requestsWaitingText: requestsWaitingText
    }), /*#__PURE__*/_react.default.createElement(_.ConfirmPageContainerHeader, {
      showEdit: showEdit,
      onEdit: () => onEdit(),
      showAccountInHeader: showAccountInHeader,
      accountAddress: fromAddress
    }, hideSenderToRecipient ? null : /*#__PURE__*/_react.default.createElement(_senderToRecipient.default, {
      senderName: fromName,
      senderAddress: fromAddress,
      recipientName: toName,
      recipientAddress: toAddress,
      recipientEns: toEns,
      recipientNickname: toNickname
    })), /*#__PURE__*/_react.default.createElement("div", null, showAddToAddressDialog && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_dialog.default, {
      type: "message",
      className: "send__dialog",
      onClick: () => this.setState({
        showNicknamePopovers: true
      })
    }, this.context.t('newAccountDetectedDialogMessage')), this.state.showNicknamePopovers ? /*#__PURE__*/_react.default.createElement(_nicknamePopovers.default, {
      onClose: () => this.setState({
        showNicknamePopovers: false
      }),
      address: toAddress
    }) : null)), contentComponent || /*#__PURE__*/_react.default.createElement(_.ConfirmPageContainerContent, {
      action: action,
      title: title,
      titleComponent: titleComponent,
      subtitleComponent: subtitleComponent,
      hideSubtitle: hideSubtitle,
      detailsComponent: detailsComponent,
      dataComponent: dataComponent,
      dataHexComponent: dataHexComponent,
      errorMessage: errorMessage,
      errorKey: errorKey,
      identiconAddress: identiconAddress,
      nonce: nonce,
      warning: warning,
      onCancelAll: onCancelAll,
      onCancel: onCancel,
      cancelText: this.context.t('reject'),
      onSubmit: onSubmit,
      submitText: this.context.t('confirm'),
      disabled: disabled,
      unapprovedTxCount: unapprovedTxCount,
      rejectNText: this.context.t('rejectTxsN', [unapprovedTxCount]),
      origin: origin,
      ethGasPriceWarning: ethGasPriceWarning,
      hideTitle: hideTitle,
      supportsEIP1559V2: supportsEIP1559V2
    }), shouldDisplayWarning && /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-approve-content__warning"
    }, /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
      errorKey: errorKey
    })), contentComponent && /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      onCancel: onCancel,
      cancelText: this.context.t('reject'),
      onSubmit: onSubmit,
      submitText: this.context.t('confirm'),
      disabled: disabled
    }, unapprovedTxCount > 1 && /*#__PURE__*/_react.default.createElement("a", {
      onClick: onCancelAll
    }, this.context.t('rejectTxsN', [unapprovedTxCount]))), editingGas && !supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement(_editGasPopover.default, {
      mode: _gas.EDIT_GAS_MODES.MODIFY_IN_PLACE,
      onClose: handleCloseEditGas,
      transaction: currentTransaction
    }), supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_editGasFeePopover.default, null), /*#__PURE__*/_react.default.createElement(_advancedGasFeePopover.default, null))));
  }

}

exports.default = ConfirmPageContainer;
(0, _defineProperty2.default)(ConfirmPageContainer, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(ConfirmPageContainer, "propTypes", {
  // Header
  action: _propTypes.default.string,
  hideSubtitle: _propTypes.default.bool,
  onEdit: _propTypes.default.func,
  showEdit: _propTypes.default.bool,
  subtitleComponent: _propTypes.default.node,
  title: _propTypes.default.string,
  titleComponent: _propTypes.default.node,
  hideSenderToRecipient: _propTypes.default.bool,
  showAccountInHeader: _propTypes.default.bool,
  // Sender to Recipient
  fromAddress: _propTypes.default.string,
  fromName: _propTypes.default.string,
  toAddress: _propTypes.default.string,
  toName: _propTypes.default.string,
  toEns: _propTypes.default.string,
  toNickname: _propTypes.default.string,
  // Content
  contentComponent: _propTypes.default.node,
  errorKey: _propTypes.default.string,
  errorMessage: _propTypes.default.string,
  dataComponent: _propTypes.default.node,
  dataHexComponent: _propTypes.default.node,
  detailsComponent: _propTypes.default.node,
  identiconAddress: _propTypes.default.string,
  nonce: _propTypes.default.string,
  warning: _propTypes.default.string,
  unapprovedTxCount: _propTypes.default.number,
  origin: _propTypes.default.string.isRequired,
  ethGasPriceWarning: _propTypes.default.string,
  // Navigation
  totalTx: _propTypes.default.number,
  positionOfCurrentTx: _propTypes.default.number,
  nextTxId: _propTypes.default.string,
  prevTxId: _propTypes.default.string,
  showNavigation: _propTypes.default.bool,
  onNextTx: _propTypes.default.func,
  firstTx: _propTypes.default.string,
  lastTx: _propTypes.default.string,
  ofText: _propTypes.default.string,
  requestsWaitingText: _propTypes.default.string,
  // Footer
  onCancelAll: _propTypes.default.func,
  onCancel: _propTypes.default.func,
  onSubmit: _propTypes.default.func,
  disabled: _propTypes.default.bool,
  editingGas: _propTypes.default.bool,
  handleCloseEditGas: _propTypes.default.func,
  // Gas Popover
  currentTransaction: _propTypes.default.object.isRequired,
  contact: _propTypes.default.object,
  isOwnedAccount: _propTypes.default.bool,
  supportsEIP1559V2: _propTypes.default.bool
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/constants.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FETCH_SUPPORTED_NETWORKS_URI = exports.FETCH_PROJECT_INFO_URI = void 0;
const TX_INSIGHTS_BASE_URI = 'https://tx-insights.metaswap.codefi.network';
const FETCH_PROJECT_INFO_URI = `${TX_INSIGHTS_BASE_URI}/fetch-project`;
exports.FETCH_PROJECT_INFO_URI = FETCH_PROJECT_INFO_URI;
const FETCH_SUPPORTED_NETWORKS_URI = `${TX_INSIGHTS_BASE_URI}/networks`;
exports.FETCH_SUPPORTED_NETWORKS_URI = FETCH_SUPPORTED_NETWORKS_URI;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/constants.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/browser-util-inspect/index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/browser-util-inspect/index.js
      return function (require, module, exports) {
/**
 * Module exports.
 */

module.exports = inspect;

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 * @license MIT (© Joyent)
 */
/* legacy: obj, showHidden, depth, colors*/

function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeNoColor(str, styleType) {
  return str;
}

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

function isUndefined(arg) {
  return arg === void 0;
}

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function isFunction(arg) {
  return typeof arg === 'function';
}

function isString(arg) {
  return typeof arg === 'string';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isNull(arg) {
  return arg === null;
}

function hasOwn(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwn(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  try {
    if (ctx.showHidden && Object.getOwnPropertyNames) {
      keys = Object.getOwnPropertyNames(value);
    }
  } catch (e) {
    // ignore
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (Array.isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = { value: void 0 };
  try {
    // ie6 › navigator.toString
    // throws Error: Object doesn't support this property or method
    desc.value = value[key];
  } catch (e) {
    // ignore
  }
  try {
    // ie10 › Object.getOwnPropertyDescriptor(window.location, 'hash')
    // throws TypeError: Object doesn't support this action
    if (Object.getOwnPropertyDescriptor) {
      desc = Object.getOwnPropertyDescriptor(value, key) || desc;
    }
  } catch (e) {
    // ignore
  }
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwn(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
}

      };
    };
  }
}, {package:"browser-util-inspect",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/browser-util-inspect/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/transaction-decoding.util.js", {"@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/transaction-decoding.util.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformTxDecoding = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// *********************************************
// data transformation utils
// *********************************************
const transformTxDecoding = params => {
  return params.map(node => {
    const nodeName = node.name;
    const nodeValue = node.value;
    const nodeKind = nodeValue.kind;
    const nodeTypeClass = nodeValue.type.typeClass;
    const treeItem = {
      name: nodeName,
      kind: nodeKind,
      typeClass: nodeTypeClass,
      type: nodeValue.type
    };

    if (nodeTypeClass === 'struct') {
      return _objectSpread(_objectSpread({}, treeItem), {}, {
        children: transformTxDecoding(nodeValue.value)
      });
    }

    return _objectSpread(_objectSpread({}, treeItem), {}, {
      value: nodeValue.value ? nodeValue.value : nodeValue
    });
  });
};

exports.transformTxDecoding = transformTxDecoding;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/transaction-decoding.util.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/decoding/address/index.js", {"./address.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/decoding/address/address.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/decoding/address/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _address.default;
  }
});

var _address = _interopRequireDefault(require("./address.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/decoding/address/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/accreditation/index.js", {"./accreditation.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/accreditation/accreditation.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/accreditation/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accreditation.default;
  }
});

var _accreditation = _interopRequireDefault(require("./accreditation.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/accreditation/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/index.js", {"./abi-data":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/index.js","./abify":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abify.js","./ast":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast/index.js","./ast-constant":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast-constant/index.js","./basic":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/basic/index.js","./bytes":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/bytes/index.js","./common":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/common/index.js","./compilations":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compilations/index.js","./compiler":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compiler/index.js","./contexts":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/contexts/index.js","./conversion":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/conversion.js","./core":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/core.js","./errors":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/errors.js","./evm":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/evm/index.js","./export":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/export.js","./format":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/format/index.js","./mapping-key":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/mapping-key/index.js","./memory":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/memory/index.js","./special":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/special/index.js","./stack":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/stack/index.js","./storage":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/storage/index.js","./topic":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/topic/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/index.js
      return function (require, module, exports) {
"use strict";
/**
 * # Truffle Codec
 *
 * This module provides low-level decoding and encoding functionality for
 * Solidity and the Solidity ABI.  Many parts of this module are intended
 * primarily for internal use by Truffle and so remain largely undocumented,
 * but some of its types are also output by @truffle/decoder, which provides
 * a higher-level interface to much of this module's functionality.
 *
 * ## If you're here from Truffle Decoder
 *
 * If you're coming here from [[@truffle/decoder]], you probably just want to
 * know about the parts that are relevant to you.  These are:
 *
 * * The "data" category (specifically [[Format]])
 * * The "output" and "enumerations" categories ([[CalldataDecoding]], [[LogDecoding]], et al., see below)
 * * The "errors" category (specifically [[UnknownUserDefinedTypeError]])
 *
 * Note that the data category is largely scarce in
 * documentation, although that's because it's largely self-explanatory.
 *
 * If you're not just here from Truffle Decoder, but are actually
 * interested in the lower-level workings, read on.
 *
 * ## How this module differs from Truffle Decoder
 *
 * Unlike Truffle Decoder, this library makes no network connections
 * and avoids dependencies that do.  Instead, its decoding functionality
 * is generator-based; calling one of the decoding functions returns a
 * generator.  This generator's `next()` function may return a finished
 * result, or it may return a request for more information.  It is up to
 * the caller to fulfill these requests -- say, by making a network
 * connection of its own.  This is how @truffle/decoder works; @truffle/codec
 * makes requests, and @truffle/decoder fulfills them by
 * looking up the necessary information on the blockchain.
 *
 * This library also provides additional functionality beyond what's used by
 * Truffle Decoder.  In particular, this library also exists to support Truffle
 * Debugger, and so it provides encoding functionality not just for
 * transactions, logs, and state variables, but also for Solidity variables
 * during transaction execution, including circularity detection for memroy
 * structures.  It includes functionality for decoding Solidity's internal
 * function pointers, which the debugger uses, but which Truffle Decoder
 * currently does not (although this is planned for the future).
 *
 * There is also functionality for decoding return values and revert messages
 * that goes beyond what's currently available in @truffle/decoder; this may get
 * a better interface in the future.
 *
 * ## How to use
 *
 * You should probably use [[@truffle/decoder]] instead, if your use case doesn't
 * preclude it.  This module has little documentation, where it has any at all,
 * and it's likely that parts of its interface may change (particularly
 * regarding allocation).  That said, if you truly need the functionality here,
 * Truffle Decoder can perhaps serve as something of a reference implementation
 * (and perhaps Truffle Debugger as well, though that code is much harder to
 * read or copy).
 *
 * @module @truffle/codec
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Export = exports.Evm = exports.Conversion = exports.Contexts = exports.Compilations = exports.Compiler = exports.Ast = exports.AstConstant = exports.Storage = exports.Stack = exports.Special = exports.Memory = exports.MappingKey = exports.Topic = exports.AbiData = exports.Bytes = exports.Basic = exports.abifyReturndataDecoding = exports.abifyLogDecoding = exports.abifyCalldataDecoding = exports.StopDecodingError = exports.DecodingError = exports.decodeRevert = exports.decodeReturndata = exports.decodeCalldata = exports.decodeEvent = exports.decodeVariable = exports.Format = void 0;
//So, what shall codec export...?
//First: export the data format
const Format = __importStar(require("./format"));
exports.Format = Format;
//now... various low-level stuff we want to export!
//the actual decoding functions and related errors
var core_1 = require("./core");
Object.defineProperty(exports, "decodeVariable", { enumerable: true, get: function () { return core_1.decodeVariable; } });
Object.defineProperty(exports, "decodeEvent", { enumerable: true, get: function () { return core_1.decodeEvent; } });
Object.defineProperty(exports, "decodeCalldata", { enumerable: true, get: function () { return core_1.decodeCalldata; } });
Object.defineProperty(exports, "decodeReturndata", { enumerable: true, get: function () { return core_1.decodeReturndata; } });
Object.defineProperty(exports, "decodeRevert", { enumerable: true, get: function () { return core_1.decodeRevert; } });
var errors_1 = require("./errors");
Object.defineProperty(exports, "DecodingError", { enumerable: true, get: function () { return errors_1.DecodingError; } });
Object.defineProperty(exports, "StopDecodingError", { enumerable: true, get: function () { return errors_1.StopDecodingError; } });
__exportStar(require("./common"), exports);
var abify_1 = require("./abify");
Object.defineProperty(exports, "abifyCalldataDecoding", { enumerable: true, get: function () { return abify_1.abifyCalldataDecoding; } });
Object.defineProperty(exports, "abifyLogDecoding", { enumerable: true, get: function () { return abify_1.abifyLogDecoding; } });
Object.defineProperty(exports, "abifyReturndataDecoding", { enumerable: true, get: function () { return abify_1.abifyReturndataDecoding; } });
// data locations - common
const Basic = __importStar(require("./basic"));
exports.Basic = Basic;
const Bytes = __importStar(require("./bytes"));
exports.Bytes = Bytes;
// data locations - abi
const AbiData = __importStar(require("./abi-data"));
exports.AbiData = AbiData;
const Topic = __importStar(require("./topic"));
exports.Topic = Topic;
// data locations - solidity
const MappingKey = __importStar(require("./mapping-key"));
exports.MappingKey = MappingKey;
const Memory = __importStar(require("./memory"));
exports.Memory = Memory;
const Special = __importStar(require("./special"));
exports.Special = Special;
const Stack = __importStar(require("./stack"));
exports.Stack = Stack;
const Storage = __importStar(require("./storage"));
exports.Storage = Storage;
const AstConstant = __importStar(require("./ast-constant"));
exports.AstConstant = AstConstant;
const Ast = __importStar(require("./ast"));
exports.Ast = Ast;
const Compiler = __importStar(require("./compiler"));
exports.Compiler = Compiler;
const Compilations = __importStar(require("./compilations"));
exports.Compilations = Compilations;
const Contexts = __importStar(require("./contexts"));
exports.Contexts = Contexts;
const Conversion = __importStar(require("./conversion"));
exports.Conversion = Conversion;
const Evm = __importStar(require("./evm"));
exports.Evm = Evm;
const Export = __importStar(require("./export"));
exports.Export = Export;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/index.js", {"./decoders":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/decoders.js","./errors":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/errors.js","@truffle/codec":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/index.js
      return function (require, module, exports) {
"use strict";
/**
# Truffle Decoder

This module provides an interface for decoding contract state, transaction
calldata, events, and return values and revert strings.  It's an interface to
the same low-level decoding functionality that Truffle Debugger uses.  However,
it has additional functionality that the debugger does not need, and the
debugger has additional functionality that this decoder does not need.

The interface is split into three classes: The project decoder, the contract
decoder, and the contract instance decoder.  The project decoder is associated
to the project as a whole and decodes transaction calldata and events.  The
contract decoder is associated to a specific contract class.  It has all the
capabilities of the project decoder, but it can also decode return values from
calls made by the given contract class.  The contract instance decoder is
associated to a specific contract instance; it again has all the capabilities
of the project decoder and contract decoder, but it can also decode the state
variables for the specific instance.  (In addition, in the case that the
contract does not include a `deployedBytecode` field in its artifact, which can
hinder decoding certain things, the contract instance decoder can sometimes
work around this where the other decoders cannot.)

This documentation describes the current state of the decoder, but further
improvements are planned.

## Usage

### Initialization

Create a decoder with one of the various constructor functions.

For a project decoder, use the [[forProject|`forProject`]] function.

For a contract decoder, use the [[forArtifact|`forArtifact`]] or
[[forContract|`forContract`]] function.

For a contract instance decoder, use one of the following:
* [[forDeployedArtifact|`forDeployedArtifact`]]
* [[forDeployedContract|`forDeployedContract`]]
* [[forArtifactAt|`forArtifactAt`]]
* [[forContractAt|`forContractAt`]]
* [[forContractInstance|`forContractInstance`]]
* [[forAddress|`forAddress`]]

See the documentation of these functions for details, or below for usage
examples.

All of these functions take a final argument in which information about the
project is specified; currently only a few methods for specifying project
information are allowed, but more are planned.

One can also spawn decoders from other decoders by supplying additional
information.  See the documentation for the individual decoder classes for a
method listing.

### Decoder methods

See the documentation for the individual decoder classes for a method listing.

### Output format information

The decoder outputs lossless, machine-readable [[Format.Values.Result]] objects
containing individual decoded values. See the [[Format|format documentation]]
for an overview and complete module listing.

### Decoding modes, abification, and caveats

The decoder runs in either of two modes: full mode or ABI mode. Full mode
requires some additional constraints but returns substantially more detailed
information. Please see the notes on [decoding modes](../#decoding-modes) for
more about this distinction.

See also the notes about [decoding state variables](../#additional-notes-on-decoding-state-variables) for additional
caveats about what may or may not be fully decodable.

### Basic usage examples

#### Decoding a log with the project decoder

This usage example is for a project with two contracts, `Contract1` and
`Contract2`.

```typescript
import { forProject } from "@truffle/decoder";
const contract1 = artifacts.require("Contract1");
const contract2 = artifacts.require("Contract2");
const provider = web3.currentProvider;
const decoder = await Decoder.forProject(provider, [contract1, contract2]);
const decodings = await decoder.decodeLog(log);
```

The usage of [[ProjectDecoder.decodeTransaction|decodeTransaction]] is similar.

For getting already-decoded logs meeting appropriate conditions, see
[[ProjectDecoder.events]].

#### Decoding state variables with the contract instance decoder

This usage example is for decoding the state variables of a contract `Contract`
in a project that also contains a contract `OtherContract`.

```typescript
import { forContract } from "@truffle/decoder";
const contract = artifacts.require("Contract");
const otherContract = artifacts.require("OtherContract");
const decoder = await Decoder.forContract(contract, [otherContract]);
const instanceDecoder = await decoder.forInstance();
const variables = await instanceDecoder.variables();
```

In this example, we use the deployed version of `Contract`.  If we wanted an
instance at a different address, we could pass the address to `forInstance`.

In addition, rather than using `forContract` and then `forInstance`, we could
also use [[forDeployedContract|`forContractInstance`]] to perform both of these
in one step.  If we wanted to do this with a specified address, we could use
[[forContractAt|`forContractAt`]].

Yet another way would be:
```typescript
import { forContractInstance } from "@truffle/decoder";
const contract = artifacts.require("Contract");
const otherContract = artifacts.require("OtherContract");
const deployedContract = await contract.deployed();
const instanceDecoder = await Decoder.forContractInstance(deployedContract, [otherContract]);
const variables = await instanceDecoder.variables();
```

These examples are not exhaustive.

One can find more advanced decoding examples with
[[ContractInstanceDecoder.variable|`variable`]] and
[[ContractInstanceDecoder.watchMappingKey|`watchMappingKey`]] at the
documentation for these individual functions.
 *
 * @module @truffle/decoder
 * @packageDocumentation
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.forAddress = exports.forContractInstance = exports.forContractAt = exports.forArtifactAt = exports.forDeployedContract = exports.forDeployedArtifact = exports.forContract = exports.forArtifact = exports.forProject = exports.NoProviderError = exports.VariableNotFoundError = exports.InvalidAddressError = exports.ContractAllocationFailedError = exports.ContractNotFoundError = exports.ContractBeingDecodedHasNoNodeError = exports.ProjectDecoder = exports.ContractInstanceDecoder = exports.ContractDecoder = void 0;
const decoders_1 = require("./decoders");
Object.defineProperty(exports, "ContractDecoder", { enumerable: true, get: function () { return decoders_1.ContractDecoder; } });
Object.defineProperty(exports, "ContractInstanceDecoder", { enumerable: true, get: function () { return decoders_1.ContractInstanceDecoder; } });
Object.defineProperty(exports, "ProjectDecoder", { enumerable: true, get: function () { return decoders_1.ProjectDecoder; } });
var errors_1 = require("./errors");
Object.defineProperty(exports, "ContractBeingDecodedHasNoNodeError", { enumerable: true, get: function () { return errors_1.ContractBeingDecodedHasNoNodeError; } });
Object.defineProperty(exports, "ContractNotFoundError", { enumerable: true, get: function () { return errors_1.ContractNotFoundError; } });
Object.defineProperty(exports, "ContractAllocationFailedError", { enumerable: true, get: function () { return errors_1.ContractAllocationFailedError; } });
Object.defineProperty(exports, "InvalidAddressError", { enumerable: true, get: function () { return errors_1.InvalidAddressError; } });
Object.defineProperty(exports, "VariableNotFoundError", { enumerable: true, get: function () { return errors_1.VariableNotFoundError; } });
Object.defineProperty(exports, "NoProviderError", { enumerable: true, get: function () { return errors_1.NoProviderError; } });
const codec_1 = require("@truffle/codec");
/**
 * **This function is asynchronous.**
 *
 * Constructs a project decoder for the project.
 * See the [[DecoderSettings]] documentation for further information.
 * @category Provider-based Constructor
 */
function forProject(settings) {
    return __awaiter(this, void 0, void 0, function* () {
        let compilations = codec_1.Compilations.Utils.infoToCompilations(settings.projectInfo);
        let ensSettings = ensSettingsForInfo(settings);
        return new decoders_1.ProjectDecoder(compilations, settings.provider, ensSettings);
    });
}
exports.forProject = forProject;
/**
 * **This function is asynchronous.**
 *
 * Constructs a contract decoder for a given contract artifact.
 * @param artifact The artifact for the contract.
 *
 *   A contract constructor object may be substituted for the artifact, so if
 *   you're not sure which you're dealing with, it's OK.
 * @param settings The [[DecoderSettings]] to use, including the provider;
 *   see the documentation for that type for more information.
 * @category Provider-based Constructor
 */
function forArtifact(artifact, settings) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!settings.projectInfo) {
            settings = Object.assign(Object.assign({}, settings), { projectInfo: { artifacts: [artifact] } });
        }
        let projectDecoder = yield forProject(settings);
        return yield projectDecoder.forArtifact(artifact);
    });
}
exports.forArtifact = forArtifact;
/**
 * **This function is asynchronous.**
 *
 * Constructs a contract decoder for a given contract.
 * @param contract The contract constructor object corresponding to the type of
 *   the contract.
 * @param settings The [[DecoderSettings]] to use; see the documentation for
 *   that type for more information.  If absent, the decoder will be based on
 *   just the single contract provided; it is recommended to pass more
 *   information to get the decoder's full power.
 * @category Truffle Contract-based Constructor
 */
function forContract(contract, settings = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield forArtifact(contract, Object.assign({ provider: contract.web3.currentProvider }, settings));
    });
}
exports.forContract = forContract;
/**
 * **This function is asynchronous.**
 *
 * Constructs a contract instance decoder for a deployed contract instance.
 * @param artifact The artifact corresponding to the type of the contract.
 *
 *   A contract constructor object may be substituted for the artifact, so if
 *   you're not sure which you're dealing with, it's OK.
 * @param settings The [[DecoderSettings]] to use, including the provider;
 *   see the documentation for that type for more information.
 * @category Provider-based Constructor
 */
function forDeployedArtifact(artifact, settings) {
    return __awaiter(this, void 0, void 0, function* () {
        let contractDecoder = yield forArtifact(artifact, settings);
        let instanceDecoder = yield contractDecoder.forInstance();
        return instanceDecoder;
    });
}
exports.forDeployedArtifact = forDeployedArtifact;
/**
 * **This function is asynchronous.**
 *
 * Constructs a contract instance decoder for a deployed contract instance.
 * @param contract The contract constructor object corresponding to the type of the contract.
 * @param settings The [[DecoderSettings]] to use; see the documentation for
 *   that type for more information.  If absent, the decoder will be based on just the
 *   single contract provided; it is recommended to pass more information to get the
 *   decoder's full power.
 * @category Truffle Contract-based Constructor
 */
function forDeployedContract(contract, settings = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        let contractDecoder = yield forContract(contract, settings);
        let instanceDecoder = yield contractDecoder.forInstance();
        return instanceDecoder;
    });
}
exports.forDeployedContract = forDeployedContract;
/**
 * **This function is asynchronous.**
 *
 * Constructs a contract instance decoder for a contract instance at a given address.
 * @param artifact The artifact corresponding to the type of the contract.
 *
 *   A contract constructor object may be substituted for the artifact, so if
 *   you're not sure which you're dealing with, it's OK.
 * @param address The address of the contract instance to decode.
 *
 *   Address must either be checksummed, or in all one case to circumvent the checksum.
 *   Mixed-case with bad checksum will cause this function to throw an exception.
 * @param settings The [[DecoderSettings]] to use, including the provider;
 *   see the documentation for that type for more information.
 * @category Provider-based Constructor
 */
function forArtifactAt(artifact, address, settings) {
    return __awaiter(this, void 0, void 0, function* () {
        let contractDecoder = yield forArtifact(artifact, settings);
        let instanceDecoder = yield contractDecoder.forInstance(address);
        return instanceDecoder;
    });
}
exports.forArtifactAt = forArtifactAt;
/**
 * **This function is asynchronous.**
 *
 * Constructs a contract instance decoder for a contract instance at a given address.
 * @param contract The contract constructor object corresponding to the type of the contract.
 * @param address The address of the contract instance to decode.
 *
 *   Address must either be checksummed, or in all one case to circumvent the checksum.
 *   Mixed-case with bad checksum will cause this function to throw an exception.
 * @param settings The [[DecoderSettings]] to use; see the documentation for
 *   that type for more information.  If absent, the decoder will be based on just the
 *   single contract provided; it is recommended to pass more information to get the
 *   decoder's full power.
 * @category Truffle Contract-based Constructor
 */
function forContractAt(contract, address, settings = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        let contractDecoder = yield forContract(contract, settings);
        let instanceDecoder = yield contractDecoder.forInstance(address);
        return instanceDecoder;
    });
}
exports.forContractAt = forContractAt;
/**
 * **This function is asynchronous.**
 *
 * Constructs a contract instance decoder for a given contract instance.
 * @param contract The contract abstraction object corresponding to the contract instance.
 * @param settings The [[DecoderSettings]] to use; see the documentation for
 *   that type for more information.  If absent, the decoder will be based on just the
 *   single contract provided; it is recommended to pass more information to get the
 *   decoder's full power.
 * @category Truffle Contract-based Constructor
 */
function forContractInstance(contract, settings = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield forContractAt(contract.constructor, contract.address, settings);
    });
}
exports.forContractInstance = forContractInstance;
/**
 * **This function is asynchronous.**
 *
 * Constructs a contract instance decoder for a given instance of a contract in this
 * project.  Unlike the other functions, this method doesn't require giving an
 * artifact for the address itself; however, the address had better correspond to
 * a contract of a type given in the project info, or you'll get an exception.
 * @param address The address of the contract instance to decode.
 *   If an invalid address is provided, this method will throw an exception.
 * @param settings The [[DecoderSettings]] to use, including the provider;
 *   see the documentation for that type for more information.
 * @category Provider-based Constructor
 */
function forAddress(address, settings = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        let projectDecoder = yield forProject(settings);
        return yield projectDecoder.forAddress(address);
    });
}
exports.forAddress = forAddress;
//warning: copypasted from @truffle/encoder!
//Also the category is fake but is put here to hide it :P
/**
 * @category Provider-based constructor
 */
function ensSettingsForInfo(settings) {
    if (settings.ens) {
        return settings.ens;
    }
    else {
        return {
            provider: settings.provider
        };
    }
}
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/decoder",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/merge.js", {"@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/merge.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("@material-ui/utils");

function merge(acc, item) {
  if (!item) {
    return acc;
  }

  return (0, _utils.deepmerge)(acc, item, {
    clone: false // No need to clone deep, it's way faster.

  });
}

var _default = merge;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/merge.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/responsivePropType.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/responsivePropType.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var responsivePropType = "development" !== 'production' ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
var _default = responsivePropType;
exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/responsivePropType.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/memoize.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/memoize.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = memoize;

function memoize(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) {
      cache[arg] = fn(arg);
    }

    return cache[arg];
  };
}
      };
    };
  }
}, {package:"@material-ui/system",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/system/memoize.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-in-browser/dist/index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/is-in-browser/dist/index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isBrowser = exports.isBrowser = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof(document)) === 'object' && document.nodeType === 9;

exports.default = isBrowser;
      };
    };
  }
}, {package:"is-in-browser",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-in-browser/dist/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/getStylesCreator.js", {"./noopTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/noopTheme.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/typeof.js","@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/getStylesCreator.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getStylesCreator;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _utils = require("@material-ui/utils");

var _noopTheme = _interopRequireDefault(require("./noopTheme"));

function getStylesCreator(stylesOrCreator) {
  var themingEnabled = typeof stylesOrCreator === 'function';

  if ("development" !== 'production') {
    if ((0, _typeof2.default)(stylesOrCreator) !== 'object' && !themingEnabled) {
      console.error(['Material-UI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\n'));
    }
  }

  return {
    create: function create(theme, name) {
      var styles;

      try {
        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
      } catch (err) {
        if ("development" !== 'production') {
          if (themingEnabled === true && theme === _noopTheme.default) {
            // TODO: prepend error message/name instead
            console.error(['Material-UI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
          }
        }

        throw err;
      }

      if (!name || !theme.overrides || !theme.overrides[name]) {
        return styles;
      }

      var overrides = theme.overrides[name];
      var stylesWithOverrides = (0, _extends2.default)({}, styles);
      Object.keys(overrides).forEach(function (key) {
        if ("development" !== 'production') {
          if (!stylesWithOverrides[key]) {
            console.warn(['Material-UI: You are trying to override a style that does not exist.', "Fix the `".concat(key, "` key of `theme.overrides.").concat(name, "`.")].join('\n'));
          }
        }

        stylesWithOverrides[key] = (0, _utils.deepmerge)(stylesWithOverrides[key], overrides[key]);
      });
      return stylesWithOverrides;
    },
    options: {}
  };
}
      };
    };
  }
}, {package:"@material-ui/styles",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/styles/getStylesCreator/getStylesCreator.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/hyphenate-style-name/index.cjs.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/hyphenate-style-name/index.cjs.js
      return function (require, module, exports) {
'use strict';

/* eslint-disable no-var, prefer-template */
var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {};

function toHyphenLower(match) {
  return '-' + match.toLowerCase()
}

function hyphenateStyleName(name) {
  if (cache.hasOwnProperty(name)) {
    return cache[name]
  }

  var hName = name.replace(uppercasePattern, toHyphenLower);
  return (cache[name] = msPattern.test(hName) ? '-' + hName : hName)
}

module.exports = hyphenateStyleName;

      };
    };
  }
}, {package:"hyphenate-style-name",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/hyphenate-style-name/index.cjs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/css-vendor/dist/css-vendor.cjs.js", {"@babel/runtime/helpers/toConsumableArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/toConsumableArray.js","is-in-browser":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-in-browser/dist/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/css-vendor/dist/css-vendor.cjs.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var isInBrowser = _interopDefault(require('is-in-browser'));
var _toConsumableArray = _interopDefault(require('@babel/runtime/helpers/toConsumableArray'));

// Export javascript style and css style vendor prefixes.
var js = '';
var css = '';
var vendor = '';
var browser = '';
var isTouch = isInBrowser && 'ontouchstart' in document.documentElement; // We should not do anything if required serverside.

if (isInBrowser) {
  // Order matters. We need to check Webkit the last one because
  // other vendors use to add Webkit prefixes to some properties
  var jsCssMap = {
    Moz: '-moz-',
    ms: '-ms-',
    O: '-o-',
    Webkit: '-webkit-'
  };

  var _document$createEleme = document.createElement('p'),
      style = _document$createEleme.style;

  var testProp = 'Transform';

  for (var key in jsCssMap) {
    if (key + testProp in style) {
      js = key;
      css = jsCssMap[key];
      break;
    }
  } // Correctly detect the Edge browser.


  if (js === 'Webkit' && 'msHyphens' in style) {
    js = 'ms';
    css = jsCssMap.ms;
    browser = 'edge';
  } // Correctly detect the Safari browser.


  if (js === 'Webkit' && '-apple-trailing-word' in style) {
    vendor = 'apple';
  }
}
/**
 * Vendor prefix string for the current browser.
 *
 * @type {{js: String, css: String, vendor: String, browser: String}}
 * @api public
 */


var prefix = {
  js: js,
  css: css,
  vendor: vendor,
  browser: browser,
  isTouch: isTouch
};

/**
 * Test if a keyframe at-rule should be prefixed or not
 *
 * @param {String} vendor prefix string for the current browser.
 * @return {String}
 * @api public
 */

function supportedKeyframes(key) {
  // Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'
  if (key[1] === '-') return key; // No need to prefix IE/Edge. Older browsers will ignore unsupported rules.
  // https://caniuse.com/#search=keyframes

  if (prefix.js === 'ms') return key;
  return "@" + prefix.css + "keyframes" + key.substr(10);
}

// https://caniuse.com/#search=appearance

var appearence = {
  noPrefill: ['appearance'],
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'appearance') return false;
    if (prefix.js === 'ms') return "-webkit-" + prop;
    return prefix.css + prop;
  }
};

// https://caniuse.com/#search=color-adjust

var colorAdjust = {
  noPrefill: ['color-adjust'],
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'color-adjust') return false;
    if (prefix.js === 'Webkit') return prefix.css + "print-" + prop;
    return prop;
  }
};

var regExp = /[-\s]+(.)?/g;
/**
 * Replaces the letter with the capital letter
 *
 * @param {String} match
 * @param {String} c
 * @return {String}
 * @api private
 */

function toUpper(match, c) {
  return c ? c.toUpperCase() : '';
}
/**
 * Convert dash separated strings to camel-cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */


function camelize(str) {
  return str.replace(regExp, toUpper);
}

/**
 * Convert dash separated strings to pascal cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function pascalize(str) {
  return camelize("-" + str);
}

// but we can use a longhand property instead.
// https://caniuse.com/#search=mask

var mask = {
  noPrefill: ['mask'],
  supportedProperty: function supportedProperty(prop, style) {
    if (!/^mask/.test(prop)) return false;

    if (prefix.js === 'Webkit') {
      var longhand = 'mask-image';

      if (camelize(longhand) in style) {
        return prop;
      }

      if (prefix.js + pascalize(longhand) in style) {
        return prefix.css + prop;
      }
    }

    return prop;
  }
};

// https://caniuse.com/#search=text-orientation

var textOrientation = {
  noPrefill: ['text-orientation'],
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'text-orientation') return false;

    if (prefix.vendor === 'apple' && !prefix.isTouch) {
      return prefix.css + prop;
    }

    return prop;
  }
};

// https://caniuse.com/#search=transform

var transform = {
  noPrefill: ['transform'],
  supportedProperty: function supportedProperty(prop, style, options) {
    if (prop !== 'transform') return false;

    if (options.transform) {
      return prop;
    }

    return prefix.css + prop;
  }
};

// https://caniuse.com/#search=transition

var transition = {
  noPrefill: ['transition'],
  supportedProperty: function supportedProperty(prop, style, options) {
    if (prop !== 'transition') return false;

    if (options.transition) {
      return prop;
    }

    return prefix.css + prop;
  }
};

// https://caniuse.com/#search=writing-mode

var writingMode = {
  noPrefill: ['writing-mode'],
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'writing-mode') return false;

    if (prefix.js === 'Webkit' || prefix.js === 'ms' && prefix.browser !== 'edge') {
      return prefix.css + prop;
    }

    return prop;
  }
};

// https://caniuse.com/#search=user-select

var userSelect = {
  noPrefill: ['user-select'],
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'user-select') return false;

    if (prefix.js === 'Moz' || prefix.js === 'ms' || prefix.vendor === 'apple') {
      return prefix.css + prop;
    }

    return prop;
  }
};

// https://caniuse.com/#search=multicolumn
// https://github.com/postcss/autoprefixer/issues/491
// https://github.com/postcss/autoprefixer/issues/177

var breakPropsOld = {
  supportedProperty: function supportedProperty(prop, style) {
    if (!/^break-/.test(prop)) return false;

    if (prefix.js === 'Webkit') {
      var jsProp = "WebkitColumn" + pascalize(prop);
      return jsProp in style ? prefix.css + "column-" + prop : false;
    }

    if (prefix.js === 'Moz') {
      var _jsProp = "page" + pascalize(prop);

      return _jsProp in style ? "page-" + prop : false;
    }

    return false;
  }
};

// See https://github.com/postcss/autoprefixer/issues/324.

var inlineLogicalOld = {
  supportedProperty: function supportedProperty(prop, style) {
    if (!/^(border|margin|padding)-inline/.test(prop)) return false;
    if (prefix.js === 'Moz') return prop;
    var newProp = prop.replace('-inline', '');
    return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
  }
};

// Camelization is required because we can't test using.
// CSS syntax for e.g. in FF.

var unprefixed = {
  supportedProperty: function supportedProperty(prop, style) {
    return camelize(prop) in style ? prop : false;
  }
};

var prefixed = {
  supportedProperty: function supportedProperty(prop, style) {
    var pascalized = pascalize(prop); // Return custom CSS variable without prefixing.

    if (prop[0] === '-') return prop; // Return already prefixed value without prefixing.

    if (prop[0] === '-' && prop[1] === '-') return prop;
    if (prefix.js + pascalized in style) return prefix.css + prop; // Try webkit fallback.

    if (prefix.js !== 'Webkit' && "Webkit" + pascalized in style) return "-webkit-" + prop;
    return false;
  }
};

// https://caniuse.com/#search=scroll-snap

var scrollSnap = {
  supportedProperty: function supportedProperty(prop) {
    if (prop.substring(0, 11) !== 'scroll-snap') return false;

    if (prefix.js === 'ms') {
      return "" + prefix.css + prop;
    }

    return prop;
  }
};

// https://caniuse.com/#search=overscroll-behavior

var overscrollBehavior = {
  supportedProperty: function supportedProperty(prop) {
    if (prop !== 'overscroll-behavior') return false;

    if (prefix.js === 'ms') {
      return prefix.css + "scroll-chaining";
    }

    return prop;
  }
};

var propMap = {
  'flex-grow': 'flex-positive',
  'flex-shrink': 'flex-negative',
  'flex-basis': 'flex-preferred-size',
  'justify-content': 'flex-pack',
  order: 'flex-order',
  'align-items': 'flex-align',
  'align-content': 'flex-line-pack' // 'align-self' is handled by 'align-self' plugin.

}; // Support old flex spec from 2012.

var flex2012 = {
  supportedProperty: function supportedProperty(prop, style) {
    var newProp = propMap[prop];
    if (!newProp) return false;
    return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
  }
};

var propMap$1 = {
  flex: 'box-flex',
  'flex-grow': 'box-flex',
  'flex-direction': ['box-orient', 'box-direction'],
  order: 'box-ordinal-group',
  'align-items': 'box-align',
  'flex-flow': ['box-orient', 'box-direction'],
  'justify-content': 'box-pack'
};
var propKeys = Object.keys(propMap$1);

var prefixCss = function prefixCss(p) {
  return prefix.css + p;
}; // Support old flex spec from 2009.


var flex2009 = {
  supportedProperty: function supportedProperty(prop, style, _ref) {
    var multiple = _ref.multiple;

    if (propKeys.indexOf(prop) > -1) {
      var newProp = propMap$1[prop];

      if (!Array.isArray(newProp)) {
        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
      }

      if (!multiple) return false;

      for (var i = 0; i < newProp.length; i++) {
        if (!(prefix.js + pascalize(newProp[0]) in style)) {
          return false;
        }
      }

      return newProp.map(prefixCss);
    }

    return false;
  }
};

// plugins = [
//   ...plugins,
//    breakPropsOld,
//    inlineLogicalOld,
//    unprefixed,
//    prefixed,
//    scrollSnap,
//    flex2012,
//    flex2009
// ]
// Plugins without 'noPrefill' value, going last.
// 'flex-*' plugins should be at the bottom.
// 'flex2009' going after 'flex2012'.
// 'prefixed' going after 'unprefixed'

var plugins = [appearence, colorAdjust, mask, textOrientation, transform, transition, writingMode, userSelect, breakPropsOld, inlineLogicalOld, unprefixed, prefixed, scrollSnap, overscrollBehavior, flex2012, flex2009];
var propertyDetectors = plugins.filter(function (p) {
  return p.supportedProperty;
}).map(function (p) {
  return p.supportedProperty;
});
var noPrefill = plugins.filter(function (p) {
  return p.noPrefill;
}).reduce(function (a, p) {
  a.push.apply(a, _toConsumableArray(p.noPrefill));
  return a;
}, []);

var el;
var cache = {};

if (isInBrowser) {
  el = document.createElement('p'); // We test every property on vendor prefix requirement.
  // Once tested, result is cached. It gives us up to 70% perf boost.
  // http://jsperf.com/element-style-object-access-vs-plain-object
  //
  // Prefill cache with known css properties to reduce amount of
  // properties we need to feature test at runtime.
  // http://davidwalsh.name/vendor-prefix

  var computed = window.getComputedStyle(document.documentElement, '');

  for (var key$1 in computed) {
    // eslint-disable-next-line no-restricted-globals
    if (!isNaN(key$1)) cache[computed[key$1]] = computed[key$1];
  } // Properties that cannot be correctly detected using the
  // cache prefill method.


  noPrefill.forEach(function (x) {
    return delete cache[x];
  });
}
/**
 * Test if a property is supported, returns supported property with vendor
 * prefix if required. Returns `false` if not supported.
 *
 * @param {String} prop dash separated
 * @param {Object} [options]
 * @return {String|Boolean}
 * @api public
 */


function supportedProperty(prop, options) {
  if (options === void 0) {
    options = {};
  }

  // For server-side rendering.
  if (!el) return prop; // Remove cache for benchmark tests or return property from the cache.

  if ("development" !== 'benchmark' && cache[prop] != null) {
    return cache[prop];
  } // Check if 'transition' or 'transform' natively supported in browser.


  if (prop === 'transition' || prop === 'transform') {
    options[prop] = prop in el.style;
  } // Find a plugin for current prefix property.


  for (var i = 0; i < propertyDetectors.length; i++) {
    cache[prop] = propertyDetectors[i](prop, el.style, options); // Break loop, if value found.

    if (cache[prop]) break;
  } // Reset styles for current property.
  // Firefox can even throw an error for invalid properties, e.g., "0".


  try {
    el.style[prop] = '';
  } catch (err) {
    return false;
  }

  return cache[prop];
}

var cache$1 = {};
var transitionProperties = {
  transition: 1,
  'transition-property': 1,
  '-webkit-transition': 1,
  '-webkit-transition-property': 1
};
var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
var el$1;
/**
 * Returns prefixed value transition/transform if needed.
 *
 * @param {String} match
 * @param {String} p1
 * @param {String} p2
 * @return {String}
 * @api private
 */

function prefixTransitionCallback(match, p1, p2) {
  if (p1 === 'var') return 'var';
  if (p1 === 'all') return 'all';
  if (p2 === 'all') return ', all';
  var prefixedValue = p1 ? supportedProperty(p1) : ", " + supportedProperty(p2);
  if (!prefixedValue) return p1 || p2;
  return prefixedValue;
}

if (isInBrowser) el$1 = document.createElement('p');
/**
 * Returns prefixed value if needed. Returns `false` if value is not supported.
 *
 * @param {String} property
 * @param {String} value
 * @return {String|Boolean}
 * @api public
 */

function supportedValue(property, value) {
  // For server-side rendering.
  var prefixedValue = value;
  if (!el$1 || property === 'content') return value; // It is a string or a number as a string like '1'.
  // We want only prefixable values here.
  // eslint-disable-next-line no-restricted-globals

  if (typeof prefixedValue !== 'string' || !isNaN(parseInt(prefixedValue, 10))) {
    return prefixedValue;
  } // Create cache key for current value.


  var cacheKey = property + prefixedValue; // Remove cache for benchmark tests or return value from cache.

  if ("development" !== 'benchmark' && cache$1[cacheKey] != null) {
    return cache$1[cacheKey];
  } // IE can even throw an error in some cases, for e.g. style.content = 'bar'.


  try {
    // Test value as it is.
    el$1.style[property] = prefixedValue;
  } catch (err) {
    // Return false if value not supported.
    cache$1[cacheKey] = false;
    return false;
  } // If 'transition' or 'transition-property' property.


  if (transitionProperties[property]) {
    prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
  } else if (el$1.style[property] === '') {
    // Value with a vendor prefix.
    prefixedValue = prefix.css + prefixedValue; // Hardcode test to convert "flex" to "-ms-flexbox" for IE10.

    if (prefixedValue === '-ms-flex') el$1.style[property] = '-ms-flexbox'; // Test prefixed value.

    el$1.style[property] = prefixedValue; // Return false if value not supported.

    if (el$1.style[property] === '') {
      cache$1[cacheKey] = false;
      return false;
    }
  } // Reset styles for current property.


  el$1.style[property] = ''; // Write current value to cache.

  cache$1[cacheKey] = prefixedValue;
  return cache$1[cacheKey];
}

exports.prefix = prefix;
exports.supportedKeyframes = supportedKeyframes;
exports.supportedProperty = supportedProperty;
exports.supportedValue = supportedValue;

      };
    };
  }
}, {package:"css-vendor",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/css-vendor/dist/css-vendor.cjs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/InputBase.js", {"../FormControl/FormControlContext":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/FormControlContext.js","../FormControl/formControlState":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/formControlState.js","../TextareaAutosize":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TextareaAutosize/index.js","../styles/withStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withStyles.js","../utils/capitalize":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/capitalize.js","../utils/useForkRef":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useForkRef.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/utils.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js","clsx":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/InputBase.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _utils = require("@material-ui/utils");

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _formControlState = _interopRequireDefault(require("../FormControl/formControlState"));

var _FormControlContext = _interopRequireWildcard(require("../FormControl/FormControlContext"));

var _withStyles = _interopRequireDefault(require("../styles/withStyles"));

var _capitalize = _interopRequireDefault(require("../utils/capitalize"));

var _useForkRef = _interopRequireDefault(require("../utils/useForkRef"));

var _TextareaAutosize = _interopRequireDefault(require("../TextareaAutosize"));

var _utils2 = require("./utils");

/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */
var styles = function styles(theme) {
  var light = theme.palette.type === 'light';
  var placeholder = {
    color: 'currentColor',
    opacity: light ? 0.42 : 0.5,
    transition: theme.transitions.create('opacity', {
      duration: theme.transitions.duration.shorter
    })
  };
  var placeholderHidden = {
    opacity: '0 !important'
  };
  var placeholderVisible = {
    opacity: light ? 0.42 : 0.5
  };
  return {
    '@global': {
      '@keyframes mui-auto-fill': {},
      '@keyframes mui-auto-fill-cancel': {}
    },

    /* Styles applied to the root element. */
    root: (0, _extends2.default)({}, theme.typography.body1, {
      color: theme.palette.text.primary,
      lineHeight: '1.1876em',
      // Reset (19px), match the native input line-height
      boxSizing: 'border-box',
      // Prevent padding issue with fullWidth.
      position: 'relative',
      cursor: 'text',
      display: 'inline-flex',
      alignItems: 'center',
      '&$disabled': {
        color: theme.palette.text.disabled,
        cursor: 'default'
      }
    }),

    /* Styles applied to the root element if the component is a descendant of `FormControl`. */
    formControl: {},

    /* Styles applied to the root element if the component is focused. */
    focused: {},

    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Styles applied to the root element if `startAdornment` is provided. */
    adornedStart: {},

    /* Styles applied to the root element if `endAdornment` is provided. */
    adornedEnd: {},

    /* Pseudo-class applied to the root element if `error={true}`. */
    error: {},

    /* Styles applied to the `input` element if `margin="dense"`. */
    marginDense: {},

    /* Styles applied to the root element if `multiline={true}`. */
    multiline: {
      padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
      '&$marginDense': {
        paddingTop: 4 - 1
      }
    },

    /* Styles applied to the root element if the color is secondary. */
    colorSecondary: {},

    /* Styles applied to the root element if `fullWidth={true}`. */
    fullWidth: {
      width: '100%'
    },

    /* Styles applied to the `input` element. */
    input: {
      font: 'inherit',
      letterSpacing: 'inherit',
      color: 'currentColor',
      padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
      border: 0,
      boxSizing: 'content-box',
      background: 'none',
      height: '1.1876em',
      // Reset (19px), match the native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: 'transparent',
      display: 'block',
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: '100%',
      // Fix IE 11 width issue
      animationName: 'mui-auto-fill-cancel',
      animationDuration: '10ms',
      '&::-webkit-input-placeholder': placeholder,
      '&::-moz-placeholder': placeholder,
      // Firefox 19+
      '&:-ms-input-placeholder': placeholder,
      // IE 11
      '&::-ms-input-placeholder': placeholder,
      // Edge
      '&:focus': {
        outline: 0
      },
      // Reset Firefox invalid required input style
      '&:invalid': {
        boxShadow: 'none'
      },
      '&::-webkit-search-decoration': {
        // Remove the padding when type=search.
        '-webkit-appearance': 'none'
      },
      // Show and hide the placeholder logic
      'label[data-shrink=false] + $formControl &': {
        '&::-webkit-input-placeholder': placeholderHidden,
        '&::-moz-placeholder': placeholderHidden,
        // Firefox 19+
        '&:-ms-input-placeholder': placeholderHidden,
        // IE 11
        '&::-ms-input-placeholder': placeholderHidden,
        // Edge
        '&:focus::-webkit-input-placeholder': placeholderVisible,
        '&:focus::-moz-placeholder': placeholderVisible,
        // Firefox 19+
        '&:focus:-ms-input-placeholder': placeholderVisible,
        // IE 11
        '&:focus::-ms-input-placeholder': placeholderVisible // Edge

      },
      '&$disabled': {
        opacity: 1 // Reset iOS opacity

      },
      '&:-webkit-autofill': {
        animationDuration: '5000s',
        animationName: 'mui-auto-fill'
      }
    },

    /* Styles applied to the `input` element if `margin="dense"`. */
    inputMarginDense: {
      paddingTop: 4 - 1
    },

    /* Styles applied to the `input` element if `multiline={true}`. */
    inputMultiline: {
      height: 'auto',
      resize: 'none',
      padding: 0
    },

    /* Styles applied to the `input` element if `type="search"`. */
    inputTypeSearch: {
      // Improve type search style.
      '-moz-appearance': 'textfield',
      '-webkit-appearance': 'textfield'
    },

    /* Styles applied to the `input` element if `startAdornment` is provided. */
    inputAdornedStart: {},

    /* Styles applied to the `input` element if `endAdornment` is provided. */
    inputAdornedEnd: {},

    /* Styles applied to the `input` element if `hiddenLabel={true}`. */
    inputHiddenLabel: {}
  };
};

exports.styles = styles;
var useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;
/**
 * `InputBase` contains as few styles as possible.
 * It aims to be a simple building block for creating an input.
 * It contains a load of style reset and some state logic.
 */

var InputBase = /*#__PURE__*/React.forwardRef(function InputBase(props, ref) {
  var ariaDescribedby = props['aria-describedby'],
      autoComplete = props.autoComplete,
      autoFocus = props.autoFocus,
      classes = props.classes,
      className = props.className,
      color = props.color,
      defaultValue = props.defaultValue,
      disabled = props.disabled,
      endAdornment = props.endAdornment,
      error = props.error,
      _props$fullWidth = props.fullWidth,
      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
      id = props.id,
      _props$inputComponent = props.inputComponent,
      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
      _props$inputProps = props.inputProps,
      inputPropsProp = _props$inputProps === void 0 ? {} : _props$inputProps,
      inputRefProp = props.inputRef,
      margin = props.margin,
      _props$multiline = props.multiline,
      multiline = _props$multiline === void 0 ? false : _props$multiline,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onClick = props.onClick,
      onFocus = props.onFocus,
      onKeyDown = props.onKeyDown,
      onKeyUp = props.onKeyUp,
      placeholder = props.placeholder,
      readOnly = props.readOnly,
      renderSuffix = props.renderSuffix,
      rows = props.rows,
      rowsMax = props.rowsMax,
      rowsMin = props.rowsMin,
      startAdornment = props.startAdornment,
      _props$type = props.type,
      type = _props$type === void 0 ? 'text' : _props$type,
      valueProp = props.value,
      other = (0, _objectWithoutProperties2.default)(props, ["aria-describedby", "autoComplete", "autoFocus", "classes", "className", "color", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "rowsMax", "rowsMin", "startAdornment", "type", "value"]);
  var value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;

  var _React$useRef = React.useRef(value != null),
      isControlled = _React$useRef.current;

  var inputRef = React.useRef();
  var handleInputRefWarning = React.useCallback(function (instance) {
    if ("development" !== 'production') {
      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
        console.error(['Material-UI: You have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` prop.', 'Make sure the `inputRef` prop is called with a HTMLInputElement.'].join('\n'));
      }
    }
  }, []);
  var handleInputPropsRefProp = (0, _useForkRef.default)(inputPropsProp.ref, handleInputRefWarning);
  var handleInputRefProp = (0, _useForkRef.default)(inputRefProp, handleInputPropsRefProp);
  var handleInputRef = (0, _useForkRef.default)(inputRef, handleInputRefProp);

  var _React$useState = React.useState(false),
      focused = _React$useState[0],
      setFocused = _React$useState[1];

  var muiFormControl = (0, _FormControlContext.useFormControl)();

  if ("development" !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(function () {
      if (muiFormControl) {
        return muiFormControl.registerEffect();
      }

      return undefined;
    }, [muiFormControl]);
  }

  var fcs = (0, _formControlState.default)({
    props: props,
    muiFormControl: muiFormControl,
    states: ['color', 'disabled', 'error', 'hiddenLabel', 'margin', 'required', 'filled']
  });
  fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
  // We need to book keep the focused state manually.

  React.useEffect(function () {
    if (!muiFormControl && disabled && focused) {
      setFocused(false);

      if (onBlur) {
        onBlur();
      }
    }
  }, [muiFormControl, disabled, focused, onBlur]);
  var onFilled = muiFormControl && muiFormControl.onFilled;
  var onEmpty = muiFormControl && muiFormControl.onEmpty;
  var checkDirty = React.useCallback(function (obj) {
    if ((0, _utils2.isFilled)(obj)) {
      if (onFilled) {
        onFilled();
      }
    } else if (onEmpty) {
      onEmpty();
    }
  }, [onFilled, onEmpty]);
  useEnhancedEffect(function () {
    if (isControlled) {
      checkDirty({
        value: value
      });
    }
  }, [value, checkDirty, isControlled]);

  var handleFocus = function handleFocus(event) {
    // Fix a bug with IE 11 where the focus/blur events are triggered
    // while the input is disabled.
    if (fcs.disabled) {
      event.stopPropagation();
      return;
    }

    if (onFocus) {
      onFocus(event);
    }

    if (inputPropsProp.onFocus) {
      inputPropsProp.onFocus(event);
    }

    if (muiFormControl && muiFormControl.onFocus) {
      muiFormControl.onFocus(event);
    } else {
      setFocused(true);
    }
  };

  var handleBlur = function handleBlur(event) {
    if (onBlur) {
      onBlur(event);
    }

    if (inputPropsProp.onBlur) {
      inputPropsProp.onBlur(event);
    }

    if (muiFormControl && muiFormControl.onBlur) {
      muiFormControl.onBlur(event);
    } else {
      setFocused(false);
    }
  };

  var handleChange = function handleChange(event) {
    if (!isControlled) {
      var element = event.target || inputRef.current;

      if (element == null) {
        throw new Error("development" !== "production" ? "Material-UI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://material-ui.com/r/input-component-ref-interface for more info." : (0, _utils.formatMuiErrorMessage)(1));
      }

      checkDirty({
        value: element.value
      });
    }

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (inputPropsProp.onChange) {
      inputPropsProp.onChange.apply(inputPropsProp, [event].concat(args));
    } // Perform in the willUpdate


    if (onChange) {
      onChange.apply(void 0, [event].concat(args));
    }
  }; // Check the input state on mount, in case it was filled by the user
  // or auto filled by the browser before the hydration (for SSR).


  React.useEffect(function () {
    checkDirty(inputRef.current);
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  var handleClick = function handleClick(event) {
    if (inputRef.current && event.currentTarget === event.target) {
      inputRef.current.focus();
    }

    if (onClick) {
      onClick(event);
    }
  };

  var InputComponent = inputComponent;
  var inputProps = (0, _extends2.default)({}, inputPropsProp, {
    ref: handleInputRef
  });

  if (typeof InputComponent !== 'string') {
    inputProps = (0, _extends2.default)({
      // Rename ref to inputRef as we don't know the
      // provided `inputComponent` structure.
      inputRef: handleInputRef,
      type: type
    }, inputProps, {
      ref: null
    });
  } else if (multiline) {
    if (rows && !rowsMax && !rowsMin) {
      InputComponent = 'textarea';
    } else {
      inputProps = (0, _extends2.default)({
        rows: rows,
        rowsMax: rowsMax
      }, inputProps);
      InputComponent = _TextareaAutosize.default;
    }
  } else {
    inputProps = (0, _extends2.default)({
      type: type
    }, inputProps);
  }

  var handleAutoFill = function handleAutoFill(event) {
    // Provide a fake value as Chrome might not let you access it for security reasons.
    checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
      value: 'x'
    });
  };

  React.useEffect(function () {
    if (muiFormControl) {
      muiFormControl.setAdornedStart(Boolean(startAdornment));
    }
  }, [muiFormControl, startAdornment]);
  return /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    className: (0, _clsx.default)(classes.root, classes["color".concat((0, _capitalize.default)(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, fcs.margin === 'dense' && classes.marginDense),
    onClick: handleClick,
    ref: ref
  }, other), startAdornment, /*#__PURE__*/React.createElement(_FormControlContext.default.Provider, {
    value: null
  }, /*#__PURE__*/React.createElement(InputComponent, (0, _extends2.default)({
    "aria-invalid": fcs.error,
    "aria-describedby": ariaDescribedby,
    autoComplete: autoComplete,
    autoFocus: autoFocus,
    defaultValue: defaultValue,
    disabled: fcs.disabled,
    id: id,
    onAnimationStart: handleAutoFill,
    name: name,
    placeholder: placeholder,
    readOnly: readOnly,
    required: fcs.required,
    rows: rows,
    value: value,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp
  }, inputProps, {
    className: (0, _clsx.default)(classes.input, inputPropsProp.className, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, type === 'search' && classes.inputTypeSearch, fcs.margin === 'dense' && classes.inputMarginDense),
    onBlur: handleBlur,
    onChange: handleChange,
    onFocus: handleFocus
  }))), endAdornment, renderSuffix ? renderSuffix((0, _extends2.default)({}, fcs, {
    startAdornment: startAdornment
  })) : null);
});
"development" !== "production" ? InputBase.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * @ignore
   */
  'aria-describedby': _propTypes.default.string,

  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: _propTypes.default.string,

  /**
   * If `true`, the `input` element will be focused during the first mount.
   */
  autoFocus: _propTypes.default.bool,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: _propTypes.default.object,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: _propTypes.default.oneOf(['primary', 'secondary']),

  /**
   * The default `input` element value. Use when the component is not controlled.
   */
  defaultValue: _propTypes.default.any,

  /**
   * If `true`, the `input` element will be disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: _propTypes.default.node,

  /**
   * If `true`, the input will indicate an error. This is normally obtained via context from
   * FormControl.
   */
  error: _propTypes.default.bool,

  /**
   * If `true`, the input will take up the full width of its container.
   */
  fullWidth: _propTypes.default.bool,

  /**
   * The id of the `input` element.
   */
  id: _propTypes.default.string,

  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   */
  inputComponent: _propTypes.default.elementType,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: _propTypes.default.object,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: _utils.refType,

  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: _propTypes.default.oneOf(['dense', 'none']),

  /**
   * If `true`, a textarea element will be rendered.
   */
  multiline: _propTypes.default.bool,

  /**
   * Name attribute of the `input` element.
   */
  name: _propTypes.default.string,

  /**
   * Callback fired when the input is blurred.
   *
   * Notice that the first argument (event) might be undefined.
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: _propTypes.default.func,

  /**
   * @ignore
   */
  onClick: _propTypes.default.func,

  /**
   * @ignore
   */
  onFocus: _propTypes.default.func,

  /**
   * @ignore
   */
  onKeyDown: _propTypes.default.func,

  /**
   * @ignore
   */
  onKeyUp: _propTypes.default.func,

  /**
   * The short hint displayed in the input before the user enters a value.
   */
  placeholder: _propTypes.default.string,

  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: _propTypes.default.bool,

  /**
   * @ignore
   */
  renderSuffix: _propTypes.default.func,

  /**
   * If `true`, the `input` element will be required.
   */
  required: _propTypes.default.bool,

  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  rowsMax: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  rowsMin: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: _propTypes.default.node,

  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: _propTypes.default.string,

  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: _propTypes.default.any
} : void 0;

var _default = (0, _withStyles.default)(styles, {
  name: 'MuiInputBase'
})(InputBase);

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/InputBase.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormLabel/FormLabel.js", {"../FormControl/formControlState":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/formControlState.js","../FormControl/useFormControl":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/useFormControl.js","../styles/withStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withStyles.js","../utils/capitalize":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/capitalize.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","clsx":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormLabel/FormLabel.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _formControlState = _interopRequireDefault(require("../FormControl/formControlState"));

var _useFormControl = _interopRequireDefault(require("../FormControl/useFormControl"));

var _capitalize = _interopRequireDefault(require("../utils/capitalize"));

var _withStyles = _interopRequireDefault(require("../styles/withStyles"));

var styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: (0, _extends2.default)({
      color: theme.palette.text.secondary
    }, theme.typography.body1, {
      lineHeight: 1,
      padding: 0,
      '&$focused': {
        color: theme.palette.primary.main
      },
      '&$disabled': {
        color: theme.palette.text.disabled
      },
      '&$error': {
        color: theme.palette.error.main
      }
    }),

    /* Styles applied to the root element if the color is secondary. */
    colorSecondary: {
      '&$focused': {
        color: theme.palette.secondary.main
      }
    },

    /* Pseudo-class applied to the root element if `focused={true}`. */
    focused: {},

    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Pseudo-class applied to the root element if `error={true}`. */
    error: {},

    /* Pseudo-class applied to the root element if `filled={true}`. */
    filled: {},

    /* Pseudo-class applied to the root element if `required={true}`. */
    required: {},

    /* Styles applied to the asterisk element. */
    asterisk: {
      '&$error': {
        color: theme.palette.error.main
      }
    }
  };
};

exports.styles = styles;
var FormLabel = /*#__PURE__*/React.forwardRef(function FormLabel(props, ref) {
  var children = props.children,
      classes = props.classes,
      className = props.className,
      color = props.color,
      _props$component = props.component,
      Component = _props$component === void 0 ? 'label' : _props$component,
      disabled = props.disabled,
      error = props.error,
      filled = props.filled,
      focused = props.focused,
      required = props.required,
      other = (0, _objectWithoutProperties2.default)(props, ["children", "classes", "className", "color", "component", "disabled", "error", "filled", "focused", "required"]);
  var muiFormControl = (0, _useFormControl.default)();
  var fcs = (0, _formControlState.default)({
    props: props,
    muiFormControl: muiFormControl,
    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
  });
  return /*#__PURE__*/React.createElement(Component, (0, _extends2.default)({
    className: (0, _clsx.default)(classes.root, classes["color".concat((0, _capitalize.default)(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),
    ref: ref
  }, other), children, fcs.required && /*#__PURE__*/React.createElement("span", {
    "aria-hidden": true,
    className: (0, _clsx.default)(classes.asterisk, fcs.error && classes.error)
  }, "\u2009", '*'));
});
"development" !== "production" ? FormLabel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The content of the component.
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: _propTypes.default.object,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: _propTypes.default.oneOf(['primary', 'secondary']),

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .elementType,

  /**
   * If `true`, the label should be displayed in a disabled state.
   */
  disabled: _propTypes.default.bool,

  /**
   * If `true`, the label should be displayed in an error state.
   */
  error: _propTypes.default.bool,

  /**
   * If `true`, the label should use filled classes key.
   */
  filled: _propTypes.default.bool,

  /**
   * If `true`, the input of this label is focused (used by `FormGroup` components).
   */
  focused: _propTypes.default.bool,

  /**
   * If `true`, the label will indicate that the input is required.
   */
  required: _propTypes.default.bool
} : void 0;

var _default = (0, _withStyles.default)(styles, {
  name: 'MuiFormLabel'
})(FormLabel);

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormLabel/FormLabel.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/createSvgIcon.js", {"../SvgIcon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SvgIcon/index.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/createSvgIcon.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createSvgIcon;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _SvgIcon = _interopRequireDefault(require("../SvgIcon"));

/**
 * Private module reserved for @material-ui/x packages.
 */
function createSvgIcon(path, displayName) {
  var Component = function Component(props, ref) {
    return /*#__PURE__*/_react.default.createElement(_SvgIcon.default, (0, _extends2.default)({
      ref: ref
    }, props), path);
  };

  if ("development" !== 'production') {
    // Need to set `displayName` on the inner component for React.memo.
    // React prior to 16.14 ignores `displayName` on the wrapper.
    Component.displayName = "".concat(displayName, "Icon");
  }

  Component.muiName = _SvgIcon.default.muiName;
  return /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(Component));
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/createSvgIcon.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/ownerDocument.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/ownerDocument.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ownerDocument;

function ownerDocument(node) {
  return node && node.ownerDocument || document;
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/ownerDocument.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useForkRef.js", {"./setRef":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/setRef.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useForkRef.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useForkRef;

var React = _interopRequireWildcard(require("react"));

var _setRef = _interopRequireDefault(require("./setRef"));

function useForkRef(refA, refB) {
  /**
   * This will create a new function if the ref props change and are defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior
   */
  return React.useMemo(function () {
    if (refA == null && refB == null) {
      return null;
    }

    return function (refValue) {
      (0, _setRef.default)(refA, refValue);
      (0, _setRef.default)(refB, refValue);
    };
  }, [refA, refB]);
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useForkRef.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useControlled.js", {"@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useControlled.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useControlled;

var React = _interopRequireWildcard(require("react"));

/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */
function useControlled(_ref) {
  var controlled = _ref.controlled,
      defaultProp = _ref.default,
      name = _ref.name,
      _ref$state = _ref.state,
      state = _ref$state === void 0 ? 'value' : _ref$state;

  var _React$useRef = React.useRef(controlled !== undefined),
      isControlled = _React$useRef.current;

  var _React$useState = React.useState(defaultProp),
      valueState = _React$useState[0],
      setValue = _React$useState[1];

  var value = isControlled ? controlled : valueState;

  if ("development" !== 'production') {
    React.useEffect(function () {
      if (isControlled !== (controlled !== undefined)) {
        console.error(["Material-UI: A component is changing the ".concat(isControlled ? '' : 'un', "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? 'un' : '', "controlled."), 'Elements should not switch from uncontrolled to controlled (or vice versa).', "Decide between using a controlled or uncontrolled ".concat(name, " ") + 'element for the lifetime of the component.', "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
      }
    }, [controlled]);

    var _React$useRef2 = React.useRef(defaultProp),
        defaultValue = _React$useRef2.current;

    React.useEffect(function () {
      if (!isControlled && defaultValue !== defaultProp) {
        console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join('\n'));
      }
    }, [JSON.stringify(defaultProp)]);
  }

  var setValueIfUncontrolled = React.useCallback(function (newValue) {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useControlled.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Menu/Menu.js", {"../MenuList":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuList/index.js","../Popover":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popover/index.js","../styles/useTheme":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/useTheme.js","../styles/withStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/withStyles.js","../utils/setRef":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/setRef.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","@material-ui/utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/utils/index.js","clsx":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/clsx/dist/clsx.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dom/index.js","react-is":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-is/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Menu/Menu.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _reactIs = require("react-is");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _utils = require("@material-ui/utils");

var _withStyles = _interopRequireDefault(require("../styles/withStyles"));

var _Popover = _interopRequireDefault(require("../Popover"));

var _MenuList = _interopRequireDefault(require("../MenuList"));

var ReactDOM = _interopRequireWildcard(require("react-dom"));

var _setRef = _interopRequireDefault(require("../utils/setRef"));

var _useTheme = _interopRequireDefault(require("../styles/useTheme"));

var RTL_ORIGIN = {
  vertical: 'top',
  horizontal: 'right'
};
var LTR_ORIGIN = {
  vertical: 'top',
  horizontal: 'left'
};
var styles = {
  /* Styles applied to the `Paper` component. */
  paper: {
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tapable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: 'calc(100% - 96px)',
    // Add iOS momentum scrolling.
    WebkitOverflowScrolling: 'touch'
  },

  /* Styles applied to the `List` component via `MenuList`. */
  list: {
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  }
};
exports.styles = styles;
var Menu = /*#__PURE__*/React.forwardRef(function Menu(props, ref) {
  var _props$autoFocus = props.autoFocus,
      autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,
      children = props.children,
      classes = props.classes,
      _props$disableAutoFoc = props.disableAutoFocusItem,
      disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
      _props$MenuListProps = props.MenuListProps,
      MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps,
      onClose = props.onClose,
      onEntering = props.onEntering,
      open = props.open,
      _props$PaperProps = props.PaperProps,
      PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
      PopoverClasses = props.PopoverClasses,
      _props$transitionDura = props.transitionDuration,
      transitionDuration = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,
      other = (0, _objectWithoutProperties2.default)(props, ["autoFocus", "children", "classes", "disableAutoFocusItem", "MenuListProps", "onClose", "onEntering", "open", "PaperProps", "PopoverClasses", "transitionDuration", "variant"]);
  var theme = (0, _useTheme.default)();
  var autoFocusItem = autoFocus && !disableAutoFocusItem && open;
  var menuListActionsRef = React.useRef(null);
  var contentAnchorRef = React.useRef(null);

  var getContentAnchorEl = function getContentAnchorEl() {
    return contentAnchorRef.current;
  };

  var handleEntering = function handleEntering(element, isAppearing) {
    if (menuListActionsRef.current) {
      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
    }

    if (onEntering) {
      onEntering(element, isAppearing);
    }
  };

  var handleListKeyDown = function handleListKeyDown(event) {
    if (event.key === 'Tab') {
      event.preventDefault();

      if (onClose) {
        onClose(event, 'tabKeyDown');
      }
    }
  };
  /**
   * the index of the item should receive focus
   * in a `variant="selectedMenu"` it's the first `selected` item
   * otherwise it's the very first item.
   */


  var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
  // to check if there is a `selected` item. We're looking for the last `selected`
  // item and use the first valid item as a fallback

  React.Children.map(children, function (child, index) {
    if (! /*#__PURE__*/React.isValidElement(child)) {
      return;
    }

    if ("development" !== 'production') {
      if ((0, _reactIs.isFragment)(child)) {
        console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
      }
    }

    if (!child.props.disabled) {
      if (variant !== "menu" && child.props.selected) {
        activeItemIndex = index;
      } else if (activeItemIndex === -1) {
        activeItemIndex = index;
      }
    }
  });
  var items = React.Children.map(children, function (child, index) {
    if (index === activeItemIndex) {
      return /*#__PURE__*/React.cloneElement(child, {
        ref: function ref(instance) {
          // #StrictMode ready
          contentAnchorRef.current = ReactDOM.findDOMNode(instance);
          (0, _setRef.default)(child.ref, instance);
        }
      });
    }

    return child;
  });
  return /*#__PURE__*/React.createElement(_Popover.default, (0, _extends2.default)({
    getContentAnchorEl: getContentAnchorEl,
    classes: PopoverClasses,
    onClose: onClose,
    onEntering: handleEntering,
    anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
    transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
    PaperProps: (0, _extends2.default)({}, PaperProps, {
      classes: (0, _extends2.default)({}, PaperProps.classes, {
        root: classes.paper
      })
    }),
    open: open,
    ref: ref,
    transitionDuration: transitionDuration
  }, other), /*#__PURE__*/React.createElement(_MenuList.default, (0, _extends2.default)({
    onKeyDown: handleListKeyDown,
    actions: menuListActionsRef,
    autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
    autoFocusItem: autoFocusItem,
    variant: variant
  }, MenuListProps, {
    className: (0, _clsx.default)(classes.list, MenuListProps.className)
  }), items));
});
"development" !== "production" ? Menu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * A HTML element, or a function that returns it.
   * It's used to set the position of the menu.
   */
  anchorEl: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .oneOfType([_utils.HTMLElementType, _propTypes.default.func]),

  /**
   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
   * children are not focusable. If you set this prop to `false` focus will be placed
   * on the parent modal container. This has severe accessibility implications
   * and should only be considered if you manage focus otherwise.
   */
  autoFocus: _propTypes.default.bool,

  /**
   * Menu contents, normally `MenuItem`s.
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: _propTypes.default.object,

  /**
   * When opening the menu will not focus the active item but the `[role="menu"]`
   * unless `autoFocus` is also set to `false`. Not using the default means not
   * following WAI-ARIA authoring practices. Please be considerate about possible
   * accessibility implications.
   */
  disableAutoFocusItem: _propTypes.default.bool,

  /**
   * Props applied to the [`MenuList`](/api/menu-list/) element.
   */
  MenuListProps: _propTypes.default.object,

  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
   */
  onClose: _propTypes.default.func,

  /**
   * Callback fired before the Menu enters.
   */
  onEnter: _propTypes.default.func,

  /**
   * Callback fired when the Menu has entered.
   */
  onEntered: _propTypes.default.func,

  /**
   * Callback fired when the Menu is entering.
   */
  onEntering: _propTypes.default.func,

  /**
   * Callback fired before the Menu exits.
   */
  onExit: _propTypes.default.func,

  /**
   * Callback fired when the Menu has exited.
   */
  onExited: _propTypes.default.func,

  /**
   * Callback fired when the Menu is exiting.
   */
  onExiting: _propTypes.default.func,

  /**
   * If `true`, the menu is visible.
   */
  open: _propTypes.default.bool.isRequired,

  /**
   * @ignore
   */
  PaperProps: _propTypes.default.object,

  /**
   * `classes` prop applied to the [`Popover`](/api/popover/) element.
   */
  PopoverClasses: _propTypes.default.object,

  /**
   * The length of the transition in `ms`, or 'auto'
   */
  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.shape({
    appear: _propTypes.default.number,
    enter: _propTypes.default.number,
    exit: _propTypes.default.number
  })]),

  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
   * and the vertical alignment relative to the anchor element.
   */
  variant: _propTypes.default.oneOf(['menu', 'selectedMenu'])
} : void 0;

var _default = (0, _withStyles.default)(styles, {
  name: 'MuiMenu'
})(Menu);

exports.default = _default;
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Menu/Menu.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/paper.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/paper.js
      return function (require, module, exports) {
function newPaper(diameter, color) {
  var container = document.createElement('div')
  container.style.borderRadius = '50px'
  container.style.overflow = 'hidden'
  container.style.padding = '0px'
  container.style.margin = '0px'
  container.style.width = '' + diameter + 'px'
  container.style.height = '' + diameter + 'px'
  container.style.display = 'inline-block'
  container.style.background = color
  return {
    container: container,
  }
}

module.exports = newPaper

      };
    };
  }
}, {package:"@metamask/jazzicon",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/paper.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/colors.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/colors.js
      return function (require, module, exports) {
module.exports = [
	'#01888C', // teal
  '#FC7500', // bright orange
  '#034F5D', // dark teal
  '#F73F01', // orangered
  '#FC1960', // magenta
  '#C7144C', // raspberry
  '#F3C100', // goldenrod
  '#1598F2', // lightning blue
  '#2465E1', // sail blue
  '#F19E02', // gold
]

      };
    };
  }
}, {package:"@metamask/jazzicon",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/jazzicon/colors.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/mersenne-twister/src/mersenne-twister.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/mersenne-twister/src/mersenne-twister.js
      return function (require, module, exports) {
/*
  https://github.com/banksean wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace
  so it's better encapsulated. Now you can have multiple random number generators
  and they won't stomp all over eachother's state.

  If you want to use this as a substitute for Math.random(), use the random()
  method like so:

  var m = new MersenneTwister();
  var randomNumber = m.random();

  You can also call the other genrand_{foo}() methods on the instance.

  If you want to use a specific seed in order to get a repeatable random
  sequence, pass an integer into the constructor:

  var m = new MersenneTwister(123);

  and that will always produce the same random sequence.

  Sean McCullough (banksean@gmail.com)
*/

/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_seed(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

var MersenneTwister = function(seed) {
	if (seed == undefined) {
		seed = new Date().getTime();
	}

	/* Period parameters */
	this.N = 624;
	this.M = 397;
	this.MATRIX_A = 0x9908b0df;   /* constant vector a */
	this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
	this.LOWER_MASK = 0x7fffffff; /* least significant r bits */

	this.mt = new Array(this.N); /* the array for the state vector */
	this.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */

	if (seed.constructor == Array) {
		this.init_by_array(seed, seed.length);
	}
	else {
		this.init_seed(seed);
	}
}

/* initializes mt[N] with a seed */
/* origin name init_genrand */
MersenneTwister.prototype.init_seed = function(s) {
	this.mt[0] = s >>> 0;
	for (this.mti=1; this.mti<this.N; this.mti++) {
		var s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);
		this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)
		+ this.mti;
		/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
		/* In the previous versions, MSBs of the seed affect   */
		/* only MSBs of the array mt[].                        */
		/* 2002/01/09 modified by Makoto Matsumoto             */
		this.mt[this.mti] >>>= 0;
		/* for >32 bit machines */
	}
}

/* initialize by an array with array-length */
/* init_key is the array for initializing keys */
/* key_length is its length */
/* slight change for C++, 2004/2/26 */
MersenneTwister.prototype.init_by_array = function(init_key, key_length) {
	var i, j, k;
	this.init_seed(19650218);
	i=1; j=0;
	k = (this.N>key_length ? this.N : key_length);
	for (; k; k--) {
		var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30)
		this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))
		+ init_key[j] + j; /* non linear */
		this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
		i++; j++;
		if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }
		if (j>=key_length) j=0;
	}
	for (k=this.N-1; k; k--) {
		var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);
		this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))
		- i; /* non linear */
		this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
		i++;
		if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }
	}

	this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
}

/* generates a random number on [0,0xffffffff]-interval */
/* origin name genrand_int32 */
MersenneTwister.prototype.random_int = function() {
	var y;
	var mag01 = new Array(0x0, this.MATRIX_A);
	/* mag01[x] = x * MATRIX_A  for x=0,1 */

	if (this.mti >= this.N) { /* generate N words at one time */
		var kk;

		if (this.mti == this.N+1)  /* if init_seed() has not been called, */
			this.init_seed(5489);  /* a default initial seed is used */

		for (kk=0;kk<this.N-this.M;kk++) {
			y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);
			this.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
		}
		for (;kk<this.N-1;kk++) {
			y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);
			this.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
		}
		y = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);
		this.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];

		this.mti = 0;
	}

	y = this.mt[this.mti++];

	/* Tempering */
	y ^= (y >>> 11);
	y ^= (y << 7) & 0x9d2c5680;
	y ^= (y << 15) & 0xefc60000;
	y ^= (y >>> 18);

	return y >>> 0;
}

/* generates a random number on [0,0x7fffffff]-interval */
/* origin name genrand_int31 */
MersenneTwister.prototype.random_int31 = function() {
	return (this.random_int()>>>1);
}

/* generates a random number on [0,1]-real-interval */
/* origin name genrand_real1 */
MersenneTwister.prototype.random_incl = function() {
	return this.random_int()*(1.0/4294967295.0);
	/* divided by 2^32-1 */
}

/* generates a random number on [0,1)-real-interval */
MersenneTwister.prototype.random = function() {
	return this.random_int()*(1.0/4294967296.0);
	/* divided by 2^32 */
}

/* generates a random number on (0,1)-real-interval */
/* origin name genrand_real3 */
MersenneTwister.prototype.random_excl = function() {
	return (this.random_int() + 0.5)*(1.0/4294967296.0);
	/* divided by 2^32 */
}

/* generates a random number on [0,1) with 53-bit resolution*/
/* origin name genrand_res53 */
MersenneTwister.prototype.random_long = function() {
	var a=this.random_int()>>>5, b=this.random_int()>>>6;
	return(a*67108864.0+b)*(1.0/9007199254740992.0);
}

/* These real versions are due to Isaku Wada, 2002/01/09 added */

module.exports = MersenneTwister;

      };
    };
  }
}, {package:"mersenne-twister",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/mersenne-twister/src/mersenne-twister.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/color/index.js", {"clone":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color/node_modules/clone/clone.js","color-convert":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color-convert/index.js","color-string":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color-string/color-string.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/color/index.js
      return function (require, module, exports) {
/* MIT license */
var clone = require('clone');
var convert = require('color-convert');
var string = require('color-string');

var Color = function (obj) {
	if (obj instanceof Color) {
		return obj;
	}
	if (!(this instanceof Color)) {
		return new Color(obj);
	}

	this.values = {
		rgb: [0, 0, 0],
		hsl: [0, 0, 0],
		hsv: [0, 0, 0],
		hwb: [0, 0, 0],
		cmyk: [0, 0, 0, 0],
		alpha: 1
	};

	// parse Color() argument
	var vals;
	if (typeof obj === 'string') {
		vals = string.getRgba(obj);
		if (vals) {
			this.setValues('rgb', vals);
		} else if (vals = string.getHsla(obj)) {
			this.setValues('hsl', vals);
		} else if (vals = string.getHwb(obj)) {
			this.setValues('hwb', vals);
		} else {
			throw new Error('Unable to parse color from string "' + obj + '"');
		}
	} else if (typeof obj === 'object') {
		vals = obj;
		if (vals.r !== undefined || vals.red !== undefined) {
			this.setValues('rgb', vals);
		} else if (vals.l !== undefined || vals.lightness !== undefined) {
			this.setValues('hsl', vals);
		} else if (vals.v !== undefined || vals.value !== undefined) {
			this.setValues('hsv', vals);
		} else if (vals.w !== undefined || vals.whiteness !== undefined) {
			this.setValues('hwb', vals);
		} else if (vals.c !== undefined || vals.cyan !== undefined) {
			this.setValues('cmyk', vals);
		} else {
			throw new Error('Unable to parse color from object ' + JSON.stringify(obj));
		}
	}
};

Color.prototype = {
	rgb: function () {
		return this.setSpace('rgb', arguments);
	},
	hsl: function () {
		return this.setSpace('hsl', arguments);
	},
	hsv: function () {
		return this.setSpace('hsv', arguments);
	},
	hwb: function () {
		return this.setSpace('hwb', arguments);
	},
	cmyk: function () {
		return this.setSpace('cmyk', arguments);
	},

	rgbArray: function () {
		return this.values.rgb;
	},
	hslArray: function () {
		return this.values.hsl;
	},
	hsvArray: function () {
		return this.values.hsv;
	},
	hwbArray: function () {
		if (this.values.alpha !== 1) {
			return this.values.hwb.concat([this.values.alpha]);
		}
		return this.values.hwb;
	},
	cmykArray: function () {
		return this.values.cmyk;
	},
	rgbaArray: function () {
		var rgb = this.values.rgb;
		return rgb.concat([this.values.alpha]);
	},
	rgbaArrayNormalized: function () {
		var rgb = this.values.rgb;
		var glRgba = [];
		for (var i = 0; i < 3; i++) {
			glRgba[i] = rgb[i] / 255;
		}
		glRgba.push(this.values.alpha);
		return glRgba;
	},
	hslaArray: function () {
		var hsl = this.values.hsl;
		return hsl.concat([this.values.alpha]);
	},
	alpha: function (val) {
		if (val === undefined) {
			return this.values.alpha;
		}
		this.setValues('alpha', val);
		return this;
	},

	red: function (val) {
		return this.setChannel('rgb', 0, val);
	},
	green: function (val) {
		return this.setChannel('rgb', 1, val);
	},
	blue: function (val) {
		return this.setChannel('rgb', 2, val);
	},
	hue: function (val) {
		if (val) {
			val %= 360;
			val = val < 0 ? 360 + val : val;
		}
		return this.setChannel('hsl', 0, val);
	},
	saturation: function (val) {
		return this.setChannel('hsl', 1, val);
	},
	lightness: function (val) {
		return this.setChannel('hsl', 2, val);
	},
	saturationv: function (val) {
		return this.setChannel('hsv', 1, val);
	},
	whiteness: function (val) {
		return this.setChannel('hwb', 1, val);
	},
	blackness: function (val) {
		return this.setChannel('hwb', 2, val);
	},
	value: function (val) {
		return this.setChannel('hsv', 2, val);
	},
	cyan: function (val) {
		return this.setChannel('cmyk', 0, val);
	},
	magenta: function (val) {
		return this.setChannel('cmyk', 1, val);
	},
	yellow: function (val) {
		return this.setChannel('cmyk', 2, val);
	},
	black: function (val) {
		return this.setChannel('cmyk', 3, val);
	},

	hexString: function () {
		return string.hexString(this.values.rgb);
	},
	rgbString: function () {
		return string.rgbString(this.values.rgb, this.values.alpha);
	},
	rgbaString: function () {
		return string.rgbaString(this.values.rgb, this.values.alpha);
	},
	percentString: function () {
		return string.percentString(this.values.rgb, this.values.alpha);
	},
	hslString: function () {
		return string.hslString(this.values.hsl, this.values.alpha);
	},
	hslaString: function () {
		return string.hslaString(this.values.hsl, this.values.alpha);
	},
	hwbString: function () {
		return string.hwbString(this.values.hwb, this.values.alpha);
	},
	keyword: function () {
		return string.keyword(this.values.rgb, this.values.alpha);
	},

	rgbNumber: function () {
		return (this.values.rgb[0] << 16) | (this.values.rgb[1] << 8) | this.values.rgb[2];
	},

	luminosity: function () {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		var rgb = this.values.rgb;
		var lum = [];
		for (var i = 0; i < rgb.length; i++) {
			var chan = rgb[i] / 255;
			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
		}
		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast: function (color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		var lum1 = this.luminosity();
		var lum2 = color2.luminosity();
		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}
		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level: function (color2) {
		var contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7.1) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	dark: function () {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		var rgb = this.values.rgb;
		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
		return yiq < 128;
	},

	light: function () {
		return !this.dark();
	},

	negate: function () {
		var rgb = [];
		for (var i = 0; i < 3; i++) {
			rgb[i] = 255 - this.values.rgb[i];
		}
		this.setValues('rgb', rgb);
		return this;
	},

	lighten: function (ratio) {
		this.values.hsl[2] += this.values.hsl[2] * ratio;
		this.setValues('hsl', this.values.hsl);
		return this;
	},

	darken: function (ratio) {
		this.values.hsl[2] -= this.values.hsl[2] * ratio;
		this.setValues('hsl', this.values.hsl);
		return this;
	},

	saturate: function (ratio) {
		this.values.hsl[1] += this.values.hsl[1] * ratio;
		this.setValues('hsl', this.values.hsl);
		return this;
	},

	desaturate: function (ratio) {
		this.values.hsl[1] -= this.values.hsl[1] * ratio;
		this.setValues('hsl', this.values.hsl);
		return this;
	},

	whiten: function (ratio) {
		this.values.hwb[1] += this.values.hwb[1] * ratio;
		this.setValues('hwb', this.values.hwb);
		return this;
	},

	blacken: function (ratio) {
		this.values.hwb[2] += this.values.hwb[2] * ratio;
		this.setValues('hwb', this.values.hwb);
		return this;
	},

	greyscale: function () {
		var rgb = this.values.rgb;
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		this.setValues('rgb', [val, val, val]);
		return this;
	},

	clearer: function (ratio) {
		this.setValues('alpha', this.values.alpha - (this.values.alpha * ratio));
		return this;
	},

	opaquer: function (ratio) {
		this.setValues('alpha', this.values.alpha + (this.values.alpha * ratio));
		return this;
	},

	rotate: function (degrees) {
		var hue = this.values.hsl[0];
		hue = (hue + degrees) % 360;
		hue = hue < 0 ? 360 + hue : hue;
		this.values.hsl[0] = hue;
		this.setValues('hsl', this.values.hsl);
		return this;
	},

	/**
	 * Ported from sass implementation in C
	 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
	 */
	mix: function (mixinColor, weight) {
		var color1 = this;
		var color2 = mixinColor;
		var p = weight === undefined ? 0.5 : weight;

		var w = 2 * p - 1;
		var a = color1.alpha() - color2.alpha();

		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
		var w2 = 1 - w1;

		return this
			.rgb(
				w1 * color1.red() + w2 * color2.red(),
				w1 * color1.green() + w2 * color2.green(),
				w1 * color1.blue() + w2 * color2.blue()
			)
			.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
	},

	toJSON: function () {
		return this.rgb();
	},

	clone: function () {
		var col = new Color();
		col.values = clone(this.values);
		return col;
	}
};

Color.prototype.getValues = function (space) {
	var vals = {};

	for (var i = 0; i < space.length; i++) {
		vals[space.charAt(i)] = this.values[space][i];
	}

	if (this.values.alpha !== 1) {
		vals.a = this.values.alpha;
	}

	// {r: 255, g: 255, b: 255, a: 0.4}
	return vals;
};

Color.prototype.setValues = function (space, vals) {
	var spaces = {
		rgb: ['red', 'green', 'blue'],
		hsl: ['hue', 'saturation', 'lightness'],
		hsv: ['hue', 'saturation', 'value'],
		hwb: ['hue', 'whiteness', 'blackness'],
		cmyk: ['cyan', 'magenta', 'yellow', 'black']
	};

	var maxes = {
		rgb: [255, 255, 255],
		hsl: [360, 100, 100],
		hsv: [360, 100, 100],
		hwb: [360, 100, 100],
		cmyk: [100, 100, 100, 100]
	};

	var i;
	var alpha = 1;
	if (space === 'alpha') {
		alpha = vals;
	} else if (vals.length) {
		// [10, 10, 10]
		this.values[space] = vals.slice(0, space.length);
		alpha = vals[space.length];
	} else if (vals[space.charAt(0)] !== undefined) {
		// {r: 10, g: 10, b: 10}
		for (i = 0; i < space.length; i++) {
			this.values[space][i] = vals[space.charAt(i)];
		}

		alpha = vals.a;
	} else if (vals[spaces[space][0]] !== undefined) {
		// {red: 10, green: 10, blue: 10}
		var chans = spaces[space];

		for (i = 0; i < space.length; i++) {
			this.values[space][i] = vals[chans[i]];
		}

		alpha = vals.alpha;
	}

	this.values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? this.values.alpha : alpha)));

	if (space === 'alpha') {
		return false;
	}

	var capped;

	// cap values of the space prior converting all values
	for (i = 0; i < space.length; i++) {
		capped = Math.max(0, Math.min(maxes[space][i], this.values[space][i]));
		this.values[space][i] = Math.round(capped);
	}

	// convert to all the other color spaces
	for (var sname in spaces) {
		if (sname !== space) {
			this.values[sname] = convert[space][sname](this.values[space]);
		}

		// cap values
		for (i = 0; i < sname.length; i++) {
			capped = Math.max(0, Math.min(maxes[sname][i], this.values[sname][i]));
			this.values[sname][i] = Math.round(capped);
		}
	}

	return true;
};

Color.prototype.setSpace = function (space, args) {
	var vals = args[0];

	if (vals === undefined) {
		// color.rgb()
		return this.getValues(space);
	}

	// color.rgb(10, 10, 10)
	if (typeof vals === 'number') {
		vals = Array.prototype.slice.call(args);
	}

	this.setValues(space, vals);
	return this;
};

Color.prototype.setChannel = function (space, index, val) {
	if (val === undefined) {
		// color.red()
		return this.values[space][index];
	} else if (val === this.values[space][index]) {
		// color.red(color.red())
		return this;
	}

	// color.red(100)
	this.values[space][index] = val;
	this.setValues(space, this.values[space]);

	return this;
};

module.exports = Color;

      };
    };
  }
}, {package:"color",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/receive-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/receive-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

const Receive = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  className: className,
  width: size,
  height: size,
  viewBox: "0 0 28 28",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("rect", {
  x: "0.5",
  y: "0.5",
  width: "27",
  height: "27",
  rx: "13.5",
  stroke: color
}), /*#__PURE__*/_react.default.createElement("path", {
  d: "M14.3465 17.3611C14.3661 17.3402 14.3846 17.3181 14.4018 17.2952L17.597 14.0999C17.7961 13.9063 17.8756 13.6206 17.805 13.352C17.7344 13.0834 17.5246 12.8737 17.2561 12.8031C16.9875 12.7325 16.7017 12.812 16.5082 13.0111L14.5559 14.9633L14.5559 7.25598C14.5616 6.97721 14.4161 6.71715 14.1756 6.5761C13.9351 6.43505 13.6371 6.43505 13.3966 6.5761C13.1561 6.71715 13.0106 6.97721 13.0163 7.25598L13.0163 14.9633L11.064 13.0111C10.8705 12.812 10.5847 12.7325 10.3161 12.8031C10.0476 12.8737 9.83782 13.0834 9.76721 13.352C9.69661 13.6206 9.77608 13.9063 9.97519 14.0999L13.1726 17.2973C13.3093 17.4779 13.5186 17.5891 13.7447 17.6014C13.9709 17.6137 14.191 17.5258 14.3465 17.3611Z",
  fill: color
}), /*#__PURE__*/_react.default.createElement("rect", {
  x: "7.875",
  y: "19.25",
  width: "12.25",
  height: "1.75",
  rx: "0.875",
  fill: color
}));

Receive.defaultProps = {
  className: undefined
};
Receive.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40 and is required
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Receive;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/receive-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/interaction-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/interaction-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

const Interaction = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  className: className,
  width: size,
  height: size,
  viewBox: "0 0 30 30",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M15 29C22.732 29 29 22.732 29 15C29 7.26801 22.732 1 15 1C7.26801 1 1 7.26801 1 15C1 22.732 7.26801 29 15 29Z",
  stroke: color
}), /*#__PURE__*/_react.default.createElement("path", {
  d: "M18.8889 18.65C18.8889 18.8433 18.7322 19 18.5389 19H11.4611C11.2678 19 11.1111 18.8433 11.1111 18.65V17.4621C11.1111 17.1479 10.7292 16.9928 10.5102 17.2181L8.2372 19.556C8.10513 19.6919 8.10513 19.9081 8.2372 20.044L10.5102 22.3819C10.7292 22.6072 11.1111 22.4521 11.1111 22.1379V20.95C11.1111 20.7567 11.2678 20.6 11.4611 20.6H20.0944C20.2877 20.6 20.4444 20.4433 20.4444 20.25V16.15C20.4444 15.9567 20.2877 15.8 20.0944 15.8H19.2389C19.0456 15.8 18.8889 15.9567 18.8889 16.15V18.65ZM11.1111 12.35C11.1111 12.1567 11.2678 12 11.4611 12H18.5389C18.7322 12 18.8889 12.1567 18.8889 12.35V13.5379C18.8889 13.8521 19.2708 14.0072 19.4898 13.7819L21.7628 11.444C21.8949 11.3081 21.8949 11.0919 21.7628 10.956L19.4898 8.61812C19.2708 8.39284 18.8889 8.5479 18.8889 8.8621V10.05C18.8889 10.2433 18.7322 10.4 18.5389 10.4H9.90556C9.71226 10.4 9.55556 10.5567 9.55556 10.75V14.85C9.55556 15.0433 9.71226 15.2 9.90556 15.2H10.7611C10.9544 15.2 11.1111 15.0433 11.1111 14.85V12.35Z",
  fill: color
}));

Interaction.defaultProps = {
  className: undefined
};
Interaction.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Interaction;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/interaction-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/approve-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/approve-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

const Approve = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  className: className,
  width: size,
  height: size,
  viewBox: "0 0 30 30",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M15 29C22.732 29 29 22.732 29 15C29 7.26801 22.732 1 15 1C7.26801 1 1 7.26801 1 15C1 22.732 7.26801 29 15 29Z",
  stroke: color
}), /*#__PURE__*/_react.default.createElement("path", {
  d: "M5.34426 16.0923C5.15708 16.2694 5.15656 16.5672 5.34311 16.745L9.49708 20.7032C9.67134 20.8692 9.94541 20.8687 10.1191 20.7021L10.682 20.1619C10.867 19.9844 10.8665 19.6883 10.6808 19.5114L6.53084 15.557C6.35747 15.3918 6.08509 15.3914 5.91113 15.556L5.34426 16.0923ZM24.0891 10.2959C23.9152 10.1303 23.6419 10.1303 23.4681 10.2961L14.9882 18.3839C14.8143 18.5498 14.5407 18.5497 14.3668 18.3837L11.4072 15.5567C11.2343 15.3916 10.9625 15.3905 10.7882 15.5542L10.2154 16.0924C10.0272 16.2692 10.0261 16.5679 10.2131 16.7461L14.367 20.7042C14.5408 20.8698 14.814 20.8698 14.9878 20.7042L24.6581 11.4897C24.8442 11.3124 24.8442 11.0155 24.6581 10.8382L24.0891 10.2959ZM19.7905 11.4886C19.9761 11.3117 19.9767 11.0156 19.7916 10.8381L19.2288 10.2979C19.0551 10.1313 18.781 10.1308 18.6068 10.2968L13.799 14.878C13.6125 15.0557 13.613 15.3535 13.8002 15.5306L14.367 16.067C14.541 16.2316 14.8134 16.2311 14.9868 16.0659L19.7905 11.4886Z",
  fill: color
}));

Approve.defaultProps = {
  className: undefined
};
Approve.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Approve;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/approve-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/swap-icon-for-list.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/swap-icon-for-list.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

const Swap = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size,
  height: size,
  viewBox: "0 0 34 34",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg",
  className: className
}, /*#__PURE__*/_react.default.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M17 33C25.8366 33 33 25.8366 33 17C33 8.16344 25.8366 1 17 1C8.16344 1 1 8.16344 1 17C1 25.8366 8.16344 33 17 33Z",
  stroke: color
}), /*#__PURE__*/_react.default.createElement("path", {
  d: "M21.4444 21.2214C21.4444 21.4147 21.2877 21.5714 21.0944 21.5714H12.9056C12.7123 21.5714 12.5556 21.4147 12.5556 21.2214V19.6907C12.5556 19.3765 12.1736 19.2214 11.9546 19.4467L9.2372 22.2417C9.10513 22.3776 9.10513 22.5938 9.2372 22.7297L11.9546 25.5247C12.1736 25.75 12.5556 25.595 12.5556 25.2808V23.75C12.5556 23.5567 12.7123 23.4 12.9056 23.4H22.8722C23.0655 23.4 23.2222 23.2433 23.2222 23.05V18.2643C23.2222 18.071 23.0655 17.9143 22.8722 17.9143H21.7944C21.6011 17.9143 21.4444 18.071 21.4444 18.2643V21.2214ZM12.5556 13.9214C12.5556 13.7281 12.7123 13.5714 12.9056 13.5714H21.0944C21.2877 13.5714 21.4444 13.7281 21.4444 13.9214V15.4522C21.4444 15.7664 21.8264 15.9214 22.0454 15.6962L24.7628 12.9011C24.8949 12.7653 24.8949 12.549 24.7628 12.4132L22.0454 9.61812C21.8264 9.39284 21.4444 9.5479 21.4444 9.8621V11.3929C21.4444 11.5862 21.2877 11.7429 21.0944 11.7429H11.1278C10.9345 11.7429 10.7778 11.8996 10.7778 12.0929V16.8786C10.7778 17.0719 10.9345 17.2286 11.1278 17.2286H12.2056C12.3989 17.2286 12.5556 17.0719 12.5556 16.8786V13.9214Z",
  fill: color
}));

Swap.defaultProps = {
  className: undefined
};
Swap.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40 and is required
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Swap;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/swap-icon-for-list.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/sign-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/sign-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Sign;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function Sign({
  className,
  size,
  color
}) {
  return /*#__PURE__*/_react.default.createElement("svg", {
    className: className,
    width: size,
    height: size,
    viewBox: "0 0 34 34",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M17 33C25.8366 33 33 25.8366 33 17C33 8.16344 25.8366 1 17 1C8.16344 1 1 8.16344 1 17C1 25.8366 8.16344 33 17 33Z",
    stroke: color
  }), /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M21.2073 9.65858C21.2854 9.58047 21.4121 9.58047 21.4902 9.65858L23.8722 12.0406C23.9503 12.1187 23.9503 12.2453 23.8722 12.3234L22.3941 13.8015L19.7293 11.1367L21.2073 9.65858ZM18.5979 12.268L10.7361 20.1299C10.7086 20.1573 10.6898 20.1921 10.6818 20.2301L10.0466 23.2473C10.0168 23.3886 10.1421 23.5139 10.2835 23.4842L13.3007 22.849C13.3386 22.841 13.3734 22.8221 13.4009 22.7947L21.2627 14.9328L18.5979 12.268ZM22.6215 8.52721C21.9186 7.82426 20.7789 7.82427 20.076 8.52721L9.60469 18.9985C9.35778 19.2454 9.18802 19.5588 9.11609 19.9005L8.48089 22.9176C8.21306 24.1898 9.34091 25.3177 10.6131 25.0498L13.6303 24.4146C13.972 24.3427 14.2853 24.173 14.5323 23.9261L25.0035 13.4548C25.7065 12.7518 25.7065 11.6121 25.0035 10.9092L22.6215 8.52721Z",
    fill: color
  }));
}

Sign.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40 and is required
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/sign-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/send-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/send-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

const Send = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  className: className,
  width: size,
  height: size,
  viewBox: "0 0 30 30",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("rect", {
  x: "0.5",
  y: "0.5",
  width: "29",
  height: "29",
  rx: "14.5",
  stroke: color
}), /*#__PURE__*/_react.default.createElement("path", {
  d: "M18.5851 9.88921C18.5586 9.89005 18.5321 9.89238 18.5057 9.89618H14.3207C14.0635 9.89254 13.8243 10.0276 13.6947 10.2497C13.565 10.4719 13.565 10.7466 13.6947 10.9687C13.8243 11.1908 14.0635 11.3259 14.3207 11.3222H16.8777L9.53811 18.6614C9.35182 18.8402 9.27679 19.1058 9.34193 19.3557C9.40707 19.6056 9.60222 19.8007 9.85211 19.8658C10.102 19.931 10.3676 19.8559 10.5464 19.6697L17.886 12.3305V14.8874C17.8823 15.1445 18.0175 15.3837 18.2396 15.5133C18.4617 15.643 18.7364 15.643 18.9585 15.5133C19.1806 15.3837 19.3158 15.1445 19.3121 14.8874V10.6997C19.3409 10.4919 19.2767 10.282 19.1366 10.1259C18.9965 9.96973 18.7948 9.88316 18.5851 9.88921Z",
  fill: color
}));

Send.defaultProps = {
  className: undefined
};
Send.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40 and is required
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Send;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/icon/send-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/index.js", {"./Accordion":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Accordion/index.js","./AccordionActions":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionActions/index.js","./AccordionDetails":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionDetails/index.js","./AccordionSummary":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionSummary/index.js","./AppBar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AppBar/index.js","./Avatar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Avatar/index.js","./Backdrop":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Backdrop/index.js","./Badge":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Badge/index.js","./BottomNavigation":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/BottomNavigation/index.js","./BottomNavigationAction":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/BottomNavigationAction/index.js","./Box":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Box/index.js","./Breadcrumbs":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Breadcrumbs/index.js","./Button":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Button/index.js","./ButtonBase":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ButtonBase/index.js","./ButtonGroup":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ButtonGroup/index.js","./Card":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Card/index.js","./CardActionArea":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardActionArea/index.js","./CardActions":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardActions/index.js","./CardContent":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardContent/index.js","./CardHeader":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardHeader/index.js","./CardMedia":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardMedia/index.js","./Checkbox":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Checkbox/index.js","./Chip":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Chip/index.js","./CircularProgress":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CircularProgress/index.js","./ClickAwayListener":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ClickAwayListener/index.js","./Collapse":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Collapse/index.js","./Container":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Container/index.js","./CssBaseline":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CssBaseline/index.js","./Dialog":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Dialog/index.js","./DialogActions":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogActions/index.js","./DialogContent":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogContent/index.js","./DialogContentText":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogContentText/index.js","./DialogTitle":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogTitle/index.js","./Divider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Divider/index.js","./Drawer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Drawer/index.js","./ExpansionPanel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanel/index.js","./ExpansionPanelActions":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelActions/index.js","./ExpansionPanelDetails":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelDetails/index.js","./ExpansionPanelSummary":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelSummary/index.js","./Fab":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Fab/index.js","./Fade":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Fade/index.js","./FilledInput":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FilledInput/index.js","./FormControl":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControl/index.js","./FormControlLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControlLabel/index.js","./FormGroup":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormGroup/index.js","./FormHelperText":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormHelperText/index.js","./FormLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormLabel/index.js","./Grid":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Grid/index.js","./GridList":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridList/index.js","./GridListTile":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridListTile/index.js","./GridListTileBar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridListTileBar/index.js","./Grow":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Grow/index.js","./Hidden":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Hidden/index.js","./Icon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Icon/index.js","./IconButton":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/IconButton/index.js","./Input":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Input/index.js","./InputAdornment":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputAdornment/index.js","./InputBase":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputBase/index.js","./InputLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/InputLabel/index.js","./LinearProgress":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/LinearProgress/index.js","./Link":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Link/index.js","./List":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/List/index.js","./ListItem":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItem/index.js","./ListItemAvatar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemAvatar/index.js","./ListItemIcon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemIcon/index.js","./ListItemSecondaryAction":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemSecondaryAction/index.js","./ListItemText":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemText/index.js","./ListSubheader":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListSubheader/index.js","./Menu":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Menu/index.js","./MenuItem":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuItem/index.js","./MenuList":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuList/index.js","./MobileStepper":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MobileStepper/index.js","./Modal":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Modal/index.js","./NativeSelect":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/index.js","./NoSsr":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NoSsr/index.js","./OutlinedInput":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/OutlinedInput/index.js","./Paper":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Paper/index.js","./Popover":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popover/index.js","./Popper":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popper/index.js","./Portal":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Portal/index.js","./Radio":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Radio/index.js","./RadioGroup":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RadioGroup/index.js","./RootRef":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RootRef/index.js","./Select":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Select/index.js","./Slide":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Slide/index.js","./Slider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Slider/index.js","./Snackbar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Snackbar/index.js","./SnackbarContent":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SnackbarContent/index.js","./Step":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Step/index.js","./StepButton":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepButton/index.js","./StepConnector":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepConnector/index.js","./StepContent":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepContent/index.js","./StepIcon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepIcon/index.js","./StepLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepLabel/index.js","./Stepper":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Stepper/index.js","./SvgIcon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SvgIcon/index.js","./SwipeableDrawer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SwipeableDrawer/index.js","./Switch":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Switch/index.js","./Tab":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tab/index.js","./TabScrollButton":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TabScrollButton/index.js","./Table":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Table/index.js","./TableBody":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableBody/index.js","./TableCell":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableCell/index.js","./TableContainer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableContainer/index.js","./TableFooter":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableFooter/index.js","./TableHead":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableHead/index.js","./TablePagination":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TablePagination/index.js","./TableRow":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableRow/index.js","./TableSortLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableSortLabel/index.js","./Tabs":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tabs/index.js","./TextField":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TextField/index.js","./TextareaAutosize":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TextareaAutosize/index.js","./Toolbar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Toolbar/index.js","./Tooltip":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tooltip/index.js","./Typography":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Typography/index.js","./Unstable_TrapFocus":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Unstable_TrapFocus/index.js","./Zoom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Zoom/index.js","./colors":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/index.js","./styles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/styles/index.js","./useMediaQuery":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/useMediaQuery/index.js","./useScrollTrigger":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/useScrollTrigger/index.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/index.js","./withMobileDialog":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/withMobileDialog/index.js","./withWidth":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/withWidth/index.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/index.js
      return function (require, module, exports) {
/** @license Material-UI v4.11.0
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  colors: true,
  Accordion: true,
  AccordionActions: true,
  AccordionDetails: true,
  AccordionSummary: true,
  AppBar: true,
  Avatar: true,
  Backdrop: true,
  Badge: true,
  BottomNavigation: true,
  BottomNavigationAction: true,
  Box: true,
  Breadcrumbs: true,
  Button: true,
  ButtonBase: true,
  ButtonGroup: true,
  Card: true,
  CardActionArea: true,
  CardActions: true,
  CardContent: true,
  CardHeader: true,
  CardMedia: true,
  Checkbox: true,
  Chip: true,
  CircularProgress: true,
  ClickAwayListener: true,
  Collapse: true,
  Container: true,
  CssBaseline: true,
  Dialog: true,
  DialogActions: true,
  DialogContent: true,
  DialogContentText: true,
  DialogTitle: true,
  Divider: true,
  Drawer: true,
  ExpansionPanel: true,
  ExpansionPanelActions: true,
  ExpansionPanelDetails: true,
  ExpansionPanelSummary: true,
  Fab: true,
  Fade: true,
  FilledInput: true,
  FormControl: true,
  FormControlLabel: true,
  FormGroup: true,
  FormHelperText: true,
  FormLabel: true,
  Grid: true,
  GridList: true,
  GridListTile: true,
  GridListTileBar: true,
  Grow: true,
  Hidden: true,
  Icon: true,
  IconButton: true,
  Input: true,
  InputAdornment: true,
  InputBase: true,
  InputLabel: true,
  LinearProgress: true,
  Link: true,
  List: true,
  ListItem: true,
  ListItemAvatar: true,
  ListItemIcon: true,
  ListItemSecondaryAction: true,
  ListItemText: true,
  ListSubheader: true,
  Menu: true,
  MenuItem: true,
  MenuList: true,
  MobileStepper: true,
  Modal: true,
  NativeSelect: true,
  NoSsr: true,
  OutlinedInput: true,
  Paper: true,
  Popover: true,
  Popper: true,
  Portal: true,
  Radio: true,
  RadioGroup: true,
  RootRef: true,
  Select: true,
  Slide: true,
  Slider: true,
  Snackbar: true,
  SnackbarContent: true,
  Step: true,
  StepButton: true,
  StepConnector: true,
  StepContent: true,
  StepIcon: true,
  StepLabel: true,
  Stepper: true,
  SvgIcon: true,
  SwipeableDrawer: true,
  Switch: true,
  Tab: true,
  Table: true,
  TableBody: true,
  TableCell: true,
  TableContainer: true,
  TableFooter: true,
  TableHead: true,
  TablePagination: true,
  TableRow: true,
  TableSortLabel: true,
  Tabs: true,
  TabScrollButton: true,
  TextField: true,
  TextareaAutosize: true,
  Toolbar: true,
  Tooltip: true,
  Typography: true,
  Unstable_TrapFocus: true,
  useMediaQuery: true,
  useScrollTrigger: true,
  withMobileDialog: true,
  withWidth: true,
  Zoom: true
};
Object.defineProperty(exports, "Accordion", {
  enumerable: true,
  get: function get() {
    return _Accordion.default;
  }
});
Object.defineProperty(exports, "AccordionActions", {
  enumerable: true,
  get: function get() {
    return _AccordionActions.default;
  }
});
Object.defineProperty(exports, "AccordionDetails", {
  enumerable: true,
  get: function get() {
    return _AccordionDetails.default;
  }
});
Object.defineProperty(exports, "AccordionSummary", {
  enumerable: true,
  get: function get() {
    return _AccordionSummary.default;
  }
});
Object.defineProperty(exports, "AppBar", {
  enumerable: true,
  get: function get() {
    return _AppBar.default;
  }
});
Object.defineProperty(exports, "Avatar", {
  enumerable: true,
  get: function get() {
    return _Avatar.default;
  }
});
Object.defineProperty(exports, "Backdrop", {
  enumerable: true,
  get: function get() {
    return _Backdrop.default;
  }
});
Object.defineProperty(exports, "Badge", {
  enumerable: true,
  get: function get() {
    return _Badge.default;
  }
});
Object.defineProperty(exports, "BottomNavigation", {
  enumerable: true,
  get: function get() {
    return _BottomNavigation.default;
  }
});
Object.defineProperty(exports, "BottomNavigationAction", {
  enumerable: true,
  get: function get() {
    return _BottomNavigationAction.default;
  }
});
Object.defineProperty(exports, "Box", {
  enumerable: true,
  get: function get() {
    return _Box.default;
  }
});
Object.defineProperty(exports, "Breadcrumbs", {
  enumerable: true,
  get: function get() {
    return _Breadcrumbs.default;
  }
});
Object.defineProperty(exports, "Button", {
  enumerable: true,
  get: function get() {
    return _Button.default;
  }
});
Object.defineProperty(exports, "ButtonBase", {
  enumerable: true,
  get: function get() {
    return _ButtonBase.default;
  }
});
Object.defineProperty(exports, "ButtonGroup", {
  enumerable: true,
  get: function get() {
    return _ButtonGroup.default;
  }
});
Object.defineProperty(exports, "Card", {
  enumerable: true,
  get: function get() {
    return _Card.default;
  }
});
Object.defineProperty(exports, "CardActionArea", {
  enumerable: true,
  get: function get() {
    return _CardActionArea.default;
  }
});
Object.defineProperty(exports, "CardActions", {
  enumerable: true,
  get: function get() {
    return _CardActions.default;
  }
});
Object.defineProperty(exports, "CardContent", {
  enumerable: true,
  get: function get() {
    return _CardContent.default;
  }
});
Object.defineProperty(exports, "CardHeader", {
  enumerable: true,
  get: function get() {
    return _CardHeader.default;
  }
});
Object.defineProperty(exports, "CardMedia", {
  enumerable: true,
  get: function get() {
    return _CardMedia.default;
  }
});
Object.defineProperty(exports, "Checkbox", {
  enumerable: true,
  get: function get() {
    return _Checkbox.default;
  }
});
Object.defineProperty(exports, "Chip", {
  enumerable: true,
  get: function get() {
    return _Chip.default;
  }
});
Object.defineProperty(exports, "CircularProgress", {
  enumerable: true,
  get: function get() {
    return _CircularProgress.default;
  }
});
Object.defineProperty(exports, "ClickAwayListener", {
  enumerable: true,
  get: function get() {
    return _ClickAwayListener.default;
  }
});
Object.defineProperty(exports, "Collapse", {
  enumerable: true,
  get: function get() {
    return _Collapse.default;
  }
});
Object.defineProperty(exports, "Container", {
  enumerable: true,
  get: function get() {
    return _Container.default;
  }
});
Object.defineProperty(exports, "CssBaseline", {
  enumerable: true,
  get: function get() {
    return _CssBaseline.default;
  }
});
Object.defineProperty(exports, "Dialog", {
  enumerable: true,
  get: function get() {
    return _Dialog.default;
  }
});
Object.defineProperty(exports, "DialogActions", {
  enumerable: true,
  get: function get() {
    return _DialogActions.default;
  }
});
Object.defineProperty(exports, "DialogContent", {
  enumerable: true,
  get: function get() {
    return _DialogContent.default;
  }
});
Object.defineProperty(exports, "DialogContentText", {
  enumerable: true,
  get: function get() {
    return _DialogContentText.default;
  }
});
Object.defineProperty(exports, "DialogTitle", {
  enumerable: true,
  get: function get() {
    return _DialogTitle.default;
  }
});
Object.defineProperty(exports, "Divider", {
  enumerable: true,
  get: function get() {
    return _Divider.default;
  }
});
Object.defineProperty(exports, "Drawer", {
  enumerable: true,
  get: function get() {
    return _Drawer.default;
  }
});
Object.defineProperty(exports, "ExpansionPanel", {
  enumerable: true,
  get: function get() {
    return _ExpansionPanel.default;
  }
});
Object.defineProperty(exports, "ExpansionPanelActions", {
  enumerable: true,
  get: function get() {
    return _ExpansionPanelActions.default;
  }
});
Object.defineProperty(exports, "ExpansionPanelDetails", {
  enumerable: true,
  get: function get() {
    return _ExpansionPanelDetails.default;
  }
});
Object.defineProperty(exports, "ExpansionPanelSummary", {
  enumerable: true,
  get: function get() {
    return _ExpansionPanelSummary.default;
  }
});
Object.defineProperty(exports, "Fab", {
  enumerable: true,
  get: function get() {
    return _Fab.default;
  }
});
Object.defineProperty(exports, "Fade", {
  enumerable: true,
  get: function get() {
    return _Fade.default;
  }
});
Object.defineProperty(exports, "FilledInput", {
  enumerable: true,
  get: function get() {
    return _FilledInput.default;
  }
});
Object.defineProperty(exports, "FormControl", {
  enumerable: true,
  get: function get() {
    return _FormControl.default;
  }
});
Object.defineProperty(exports, "FormControlLabel", {
  enumerable: true,
  get: function get() {
    return _FormControlLabel.default;
  }
});
Object.defineProperty(exports, "FormGroup", {
  enumerable: true,
  get: function get() {
    return _FormGroup.default;
  }
});
Object.defineProperty(exports, "FormHelperText", {
  enumerable: true,
  get: function get() {
    return _FormHelperText.default;
  }
});
Object.defineProperty(exports, "FormLabel", {
  enumerable: true,
  get: function get() {
    return _FormLabel.default;
  }
});
Object.defineProperty(exports, "Grid", {
  enumerable: true,
  get: function get() {
    return _Grid.default;
  }
});
Object.defineProperty(exports, "GridList", {
  enumerable: true,
  get: function get() {
    return _GridList.default;
  }
});
Object.defineProperty(exports, "GridListTile", {
  enumerable: true,
  get: function get() {
    return _GridListTile.default;
  }
});
Object.defineProperty(exports, "GridListTileBar", {
  enumerable: true,
  get: function get() {
    return _GridListTileBar.default;
  }
});
Object.defineProperty(exports, "Grow", {
  enumerable: true,
  get: function get() {
    return _Grow.default;
  }
});
Object.defineProperty(exports, "Hidden", {
  enumerable: true,
  get: function get() {
    return _Hidden.default;
  }
});
Object.defineProperty(exports, "Icon", {
  enumerable: true,
  get: function get() {
    return _Icon.default;
  }
});
Object.defineProperty(exports, "IconButton", {
  enumerable: true,
  get: function get() {
    return _IconButton.default;
  }
});
Object.defineProperty(exports, "Input", {
  enumerable: true,
  get: function get() {
    return _Input.default;
  }
});
Object.defineProperty(exports, "InputAdornment", {
  enumerable: true,
  get: function get() {
    return _InputAdornment.default;
  }
});
Object.defineProperty(exports, "InputBase", {
  enumerable: true,
  get: function get() {
    return _InputBase.default;
  }
});
Object.defineProperty(exports, "InputLabel", {
  enumerable: true,
  get: function get() {
    return _InputLabel.default;
  }
});
Object.defineProperty(exports, "LinearProgress", {
  enumerable: true,
  get: function get() {
    return _LinearProgress.default;
  }
});
Object.defineProperty(exports, "Link", {
  enumerable: true,
  get: function get() {
    return _Link.default;
  }
});
Object.defineProperty(exports, "List", {
  enumerable: true,
  get: function get() {
    return _List.default;
  }
});
Object.defineProperty(exports, "ListItem", {
  enumerable: true,
  get: function get() {
    return _ListItem.default;
  }
});
Object.defineProperty(exports, "ListItemAvatar", {
  enumerable: true,
  get: function get() {
    return _ListItemAvatar.default;
  }
});
Object.defineProperty(exports, "ListItemIcon", {
  enumerable: true,
  get: function get() {
    return _ListItemIcon.default;
  }
});
Object.defineProperty(exports, "ListItemSecondaryAction", {
  enumerable: true,
  get: function get() {
    return _ListItemSecondaryAction.default;
  }
});
Object.defineProperty(exports, "ListItemText", {
  enumerable: true,
  get: function get() {
    return _ListItemText.default;
  }
});
Object.defineProperty(exports, "ListSubheader", {
  enumerable: true,
  get: function get() {
    return _ListSubheader.default;
  }
});
Object.defineProperty(exports, "Menu", {
  enumerable: true,
  get: function get() {
    return _Menu.default;
  }
});
Object.defineProperty(exports, "MenuItem", {
  enumerable: true,
  get: function get() {
    return _MenuItem.default;
  }
});
Object.defineProperty(exports, "MenuList", {
  enumerable: true,
  get: function get() {
    return _MenuList.default;
  }
});
Object.defineProperty(exports, "MobileStepper", {
  enumerable: true,
  get: function get() {
    return _MobileStepper.default;
  }
});
Object.defineProperty(exports, "Modal", {
  enumerable: true,
  get: function get() {
    return _Modal.default;
  }
});
Object.defineProperty(exports, "NativeSelect", {
  enumerable: true,
  get: function get() {
    return _NativeSelect.default;
  }
});
Object.defineProperty(exports, "NoSsr", {
  enumerable: true,
  get: function get() {
    return _NoSsr.default;
  }
});
Object.defineProperty(exports, "OutlinedInput", {
  enumerable: true,
  get: function get() {
    return _OutlinedInput.default;
  }
});
Object.defineProperty(exports, "Paper", {
  enumerable: true,
  get: function get() {
    return _Paper.default;
  }
});
Object.defineProperty(exports, "Popover", {
  enumerable: true,
  get: function get() {
    return _Popover.default;
  }
});
Object.defineProperty(exports, "Popper", {
  enumerable: true,
  get: function get() {
    return _Popper.default;
  }
});
Object.defineProperty(exports, "Portal", {
  enumerable: true,
  get: function get() {
    return _Portal.default;
  }
});
Object.defineProperty(exports, "Radio", {
  enumerable: true,
  get: function get() {
    return _Radio.default;
  }
});
Object.defineProperty(exports, "RadioGroup", {
  enumerable: true,
  get: function get() {
    return _RadioGroup.default;
  }
});
Object.defineProperty(exports, "RootRef", {
  enumerable: true,
  get: function get() {
    return _RootRef.default;
  }
});
Object.defineProperty(exports, "Select", {
  enumerable: true,
  get: function get() {
    return _Select.default;
  }
});
Object.defineProperty(exports, "Slide", {
  enumerable: true,
  get: function get() {
    return _Slide.default;
  }
});
Object.defineProperty(exports, "Slider", {
  enumerable: true,
  get: function get() {
    return _Slider.default;
  }
});
Object.defineProperty(exports, "Snackbar", {
  enumerable: true,
  get: function get() {
    return _Snackbar.default;
  }
});
Object.defineProperty(exports, "SnackbarContent", {
  enumerable: true,
  get: function get() {
    return _SnackbarContent.default;
  }
});
Object.defineProperty(exports, "Step", {
  enumerable: true,
  get: function get() {
    return _Step.default;
  }
});
Object.defineProperty(exports, "StepButton", {
  enumerable: true,
  get: function get() {
    return _StepButton.default;
  }
});
Object.defineProperty(exports, "StepConnector", {
  enumerable: true,
  get: function get() {
    return _StepConnector.default;
  }
});
Object.defineProperty(exports, "StepContent", {
  enumerable: true,
  get: function get() {
    return _StepContent.default;
  }
});
Object.defineProperty(exports, "StepIcon", {
  enumerable: true,
  get: function get() {
    return _StepIcon.default;
  }
});
Object.defineProperty(exports, "StepLabel", {
  enumerable: true,
  get: function get() {
    return _StepLabel.default;
  }
});
Object.defineProperty(exports, "Stepper", {
  enumerable: true,
  get: function get() {
    return _Stepper.default;
  }
});
Object.defineProperty(exports, "SvgIcon", {
  enumerable: true,
  get: function get() {
    return _SvgIcon.default;
  }
});
Object.defineProperty(exports, "SwipeableDrawer", {
  enumerable: true,
  get: function get() {
    return _SwipeableDrawer.default;
  }
});
Object.defineProperty(exports, "Switch", {
  enumerable: true,
  get: function get() {
    return _Switch.default;
  }
});
Object.defineProperty(exports, "Tab", {
  enumerable: true,
  get: function get() {
    return _Tab.default;
  }
});
Object.defineProperty(exports, "Table", {
  enumerable: true,
  get: function get() {
    return _Table.default;
  }
});
Object.defineProperty(exports, "TableBody", {
  enumerable: true,
  get: function get() {
    return _TableBody.default;
  }
});
Object.defineProperty(exports, "TableCell", {
  enumerable: true,
  get: function get() {
    return _TableCell.default;
  }
});
Object.defineProperty(exports, "TableContainer", {
  enumerable: true,
  get: function get() {
    return _TableContainer.default;
  }
});
Object.defineProperty(exports, "TableFooter", {
  enumerable: true,
  get: function get() {
    return _TableFooter.default;
  }
});
Object.defineProperty(exports, "TableHead", {
  enumerable: true,
  get: function get() {
    return _TableHead.default;
  }
});
Object.defineProperty(exports, "TablePagination", {
  enumerable: true,
  get: function get() {
    return _TablePagination.default;
  }
});
Object.defineProperty(exports, "TableRow", {
  enumerable: true,
  get: function get() {
    return _TableRow.default;
  }
});
Object.defineProperty(exports, "TableSortLabel", {
  enumerable: true,
  get: function get() {
    return _TableSortLabel.default;
  }
});
Object.defineProperty(exports, "Tabs", {
  enumerable: true,
  get: function get() {
    return _Tabs.default;
  }
});
Object.defineProperty(exports, "TabScrollButton", {
  enumerable: true,
  get: function get() {
    return _TabScrollButton.default;
  }
});
Object.defineProperty(exports, "TextField", {
  enumerable: true,
  get: function get() {
    return _TextField.default;
  }
});
Object.defineProperty(exports, "TextareaAutosize", {
  enumerable: true,
  get: function get() {
    return _TextareaAutosize.default;
  }
});
Object.defineProperty(exports, "Toolbar", {
  enumerable: true,
  get: function get() {
    return _Toolbar.default;
  }
});
Object.defineProperty(exports, "Tooltip", {
  enumerable: true,
  get: function get() {
    return _Tooltip.default;
  }
});
Object.defineProperty(exports, "Typography", {
  enumerable: true,
  get: function get() {
    return _Typography.default;
  }
});
Object.defineProperty(exports, "Unstable_TrapFocus", {
  enumerable: true,
  get: function get() {
    return _Unstable_TrapFocus.default;
  }
});
Object.defineProperty(exports, "useMediaQuery", {
  enumerable: true,
  get: function get() {
    return _useMediaQuery.default;
  }
});
Object.defineProperty(exports, "useScrollTrigger", {
  enumerable: true,
  get: function get() {
    return _useScrollTrigger.default;
  }
});
Object.defineProperty(exports, "withMobileDialog", {
  enumerable: true,
  get: function get() {
    return _withMobileDialog.default;
  }
});
Object.defineProperty(exports, "withWidth", {
  enumerable: true,
  get: function get() {
    return _withWidth.default;
  }
});
Object.defineProperty(exports, "Zoom", {
  enumerable: true,
  get: function get() {
    return _Zoom.default;
  }
});
exports.colors = void 0;

var colors = _interopRequireWildcard(require("./colors"));

exports.colors = colors;

var _styles = require("./styles");

Object.keys(_styles).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _styles[key];
    }
  });
});

var _utils = require("./utils");

Object.keys(_utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _utils[key];
    }
  });
});

var _Accordion = _interopRequireWildcard(require("./Accordion"));

Object.keys(_Accordion).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Accordion[key];
    }
  });
});

var _AccordionActions = _interopRequireWildcard(require("./AccordionActions"));

Object.keys(_AccordionActions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _AccordionActions[key];
    }
  });
});

var _AccordionDetails = _interopRequireWildcard(require("./AccordionDetails"));

Object.keys(_AccordionDetails).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _AccordionDetails[key];
    }
  });
});

var _AccordionSummary = _interopRequireWildcard(require("./AccordionSummary"));

Object.keys(_AccordionSummary).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _AccordionSummary[key];
    }
  });
});

var _AppBar = _interopRequireWildcard(require("./AppBar"));

Object.keys(_AppBar).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _AppBar[key];
    }
  });
});

var _Avatar = _interopRequireWildcard(require("./Avatar"));

Object.keys(_Avatar).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Avatar[key];
    }
  });
});

var _Backdrop = _interopRequireWildcard(require("./Backdrop"));

Object.keys(_Backdrop).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Backdrop[key];
    }
  });
});

var _Badge = _interopRequireWildcard(require("./Badge"));

Object.keys(_Badge).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Badge[key];
    }
  });
});

var _BottomNavigation = _interopRequireWildcard(require("./BottomNavigation"));

Object.keys(_BottomNavigation).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _BottomNavigation[key];
    }
  });
});

var _BottomNavigationAction = _interopRequireWildcard(require("./BottomNavigationAction"));

Object.keys(_BottomNavigationAction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _BottomNavigationAction[key];
    }
  });
});

var _Box = _interopRequireWildcard(require("./Box"));

Object.keys(_Box).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Box[key];
    }
  });
});

var _Breadcrumbs = _interopRequireWildcard(require("./Breadcrumbs"));

Object.keys(_Breadcrumbs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Breadcrumbs[key];
    }
  });
});

var _Button = _interopRequireWildcard(require("./Button"));

Object.keys(_Button).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Button[key];
    }
  });
});

var _ButtonBase = _interopRequireWildcard(require("./ButtonBase"));

Object.keys(_ButtonBase).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ButtonBase[key];
    }
  });
});

var _ButtonGroup = _interopRequireWildcard(require("./ButtonGroup"));

Object.keys(_ButtonGroup).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ButtonGroup[key];
    }
  });
});

var _Card = _interopRequireWildcard(require("./Card"));

Object.keys(_Card).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Card[key];
    }
  });
});

var _CardActionArea = _interopRequireWildcard(require("./CardActionArea"));

Object.keys(_CardActionArea).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _CardActionArea[key];
    }
  });
});

var _CardActions = _interopRequireWildcard(require("./CardActions"));

Object.keys(_CardActions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _CardActions[key];
    }
  });
});

var _CardContent = _interopRequireWildcard(require("./CardContent"));

Object.keys(_CardContent).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _CardContent[key];
    }
  });
});

var _CardHeader = _interopRequireWildcard(require("./CardHeader"));

Object.keys(_CardHeader).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _CardHeader[key];
    }
  });
});

var _CardMedia = _interopRequireWildcard(require("./CardMedia"));

Object.keys(_CardMedia).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _CardMedia[key];
    }
  });
});

var _Checkbox = _interopRequireWildcard(require("./Checkbox"));

Object.keys(_Checkbox).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Checkbox[key];
    }
  });
});

var _Chip = _interopRequireWildcard(require("./Chip"));

Object.keys(_Chip).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Chip[key];
    }
  });
});

var _CircularProgress = _interopRequireWildcard(require("./CircularProgress"));

Object.keys(_CircularProgress).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _CircularProgress[key];
    }
  });
});

var _ClickAwayListener = _interopRequireWildcard(require("./ClickAwayListener"));

Object.keys(_ClickAwayListener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ClickAwayListener[key];
    }
  });
});

var _Collapse = _interopRequireWildcard(require("./Collapse"));

Object.keys(_Collapse).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Collapse[key];
    }
  });
});

var _Container = _interopRequireWildcard(require("./Container"));

Object.keys(_Container).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Container[key];
    }
  });
});

var _CssBaseline = _interopRequireWildcard(require("./CssBaseline"));

Object.keys(_CssBaseline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _CssBaseline[key];
    }
  });
});

var _Dialog = _interopRequireWildcard(require("./Dialog"));

Object.keys(_Dialog).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Dialog[key];
    }
  });
});

var _DialogActions = _interopRequireWildcard(require("./DialogActions"));

Object.keys(_DialogActions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _DialogActions[key];
    }
  });
});

var _DialogContent = _interopRequireWildcard(require("./DialogContent"));

Object.keys(_DialogContent).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _DialogContent[key];
    }
  });
});

var _DialogContentText = _interopRequireWildcard(require("./DialogContentText"));

Object.keys(_DialogContentText).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _DialogContentText[key];
    }
  });
});

var _DialogTitle = _interopRequireWildcard(require("./DialogTitle"));

Object.keys(_DialogTitle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _DialogTitle[key];
    }
  });
});

var _Divider = _interopRequireWildcard(require("./Divider"));

Object.keys(_Divider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Divider[key];
    }
  });
});

var _Drawer = _interopRequireWildcard(require("./Drawer"));

Object.keys(_Drawer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Drawer[key];
    }
  });
});

var _ExpansionPanel = _interopRequireWildcard(require("./ExpansionPanel"));

Object.keys(_ExpansionPanel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ExpansionPanel[key];
    }
  });
});

var _ExpansionPanelActions = _interopRequireWildcard(require("./ExpansionPanelActions"));

Object.keys(_ExpansionPanelActions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ExpansionPanelActions[key];
    }
  });
});

var _ExpansionPanelDetails = _interopRequireWildcard(require("./ExpansionPanelDetails"));

Object.keys(_ExpansionPanelDetails).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ExpansionPanelDetails[key];
    }
  });
});

var _ExpansionPanelSummary = _interopRequireWildcard(require("./ExpansionPanelSummary"));

Object.keys(_ExpansionPanelSummary).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ExpansionPanelSummary[key];
    }
  });
});

var _Fab = _interopRequireWildcard(require("./Fab"));

Object.keys(_Fab).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Fab[key];
    }
  });
});

var _Fade = _interopRequireWildcard(require("./Fade"));

Object.keys(_Fade).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Fade[key];
    }
  });
});

var _FilledInput = _interopRequireWildcard(require("./FilledInput"));

Object.keys(_FilledInput).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _FilledInput[key];
    }
  });
});

var _FormControl = _interopRequireWildcard(require("./FormControl"));

Object.keys(_FormControl).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _FormControl[key];
    }
  });
});

var _FormControlLabel = _interopRequireWildcard(require("./FormControlLabel"));

Object.keys(_FormControlLabel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _FormControlLabel[key];
    }
  });
});

var _FormGroup = _interopRequireWildcard(require("./FormGroup"));

Object.keys(_FormGroup).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _FormGroup[key];
    }
  });
});

var _FormHelperText = _interopRequireWildcard(require("./FormHelperText"));

Object.keys(_FormHelperText).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _FormHelperText[key];
    }
  });
});

var _FormLabel = _interopRequireWildcard(require("./FormLabel"));

Object.keys(_FormLabel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _FormLabel[key];
    }
  });
});

var _Grid = _interopRequireWildcard(require("./Grid"));

Object.keys(_Grid).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Grid[key];
    }
  });
});

var _GridList = _interopRequireWildcard(require("./GridList"));

Object.keys(_GridList).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _GridList[key];
    }
  });
});

var _GridListTile = _interopRequireWildcard(require("./GridListTile"));

Object.keys(_GridListTile).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _GridListTile[key];
    }
  });
});

var _GridListTileBar = _interopRequireWildcard(require("./GridListTileBar"));

Object.keys(_GridListTileBar).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _GridListTileBar[key];
    }
  });
});

var _Grow = _interopRequireWildcard(require("./Grow"));

Object.keys(_Grow).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Grow[key];
    }
  });
});

var _Hidden = _interopRequireWildcard(require("./Hidden"));

Object.keys(_Hidden).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Hidden[key];
    }
  });
});

var _Icon = _interopRequireWildcard(require("./Icon"));

Object.keys(_Icon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Icon[key];
    }
  });
});

var _IconButton = _interopRequireWildcard(require("./IconButton"));

Object.keys(_IconButton).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _IconButton[key];
    }
  });
});

var _Input = _interopRequireWildcard(require("./Input"));

Object.keys(_Input).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Input[key];
    }
  });
});

var _InputAdornment = _interopRequireWildcard(require("./InputAdornment"));

Object.keys(_InputAdornment).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _InputAdornment[key];
    }
  });
});

var _InputBase = _interopRequireWildcard(require("./InputBase"));

Object.keys(_InputBase).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _InputBase[key];
    }
  });
});

var _InputLabel = _interopRequireWildcard(require("./InputLabel"));

Object.keys(_InputLabel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _InputLabel[key];
    }
  });
});

var _LinearProgress = _interopRequireWildcard(require("./LinearProgress"));

Object.keys(_LinearProgress).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _LinearProgress[key];
    }
  });
});

var _Link = _interopRequireWildcard(require("./Link"));

Object.keys(_Link).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Link[key];
    }
  });
});

var _List = _interopRequireWildcard(require("./List"));

Object.keys(_List).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _List[key];
    }
  });
});

var _ListItem = _interopRequireWildcard(require("./ListItem"));

Object.keys(_ListItem).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ListItem[key];
    }
  });
});

var _ListItemAvatar = _interopRequireWildcard(require("./ListItemAvatar"));

Object.keys(_ListItemAvatar).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ListItemAvatar[key];
    }
  });
});

var _ListItemIcon = _interopRequireWildcard(require("./ListItemIcon"));

Object.keys(_ListItemIcon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ListItemIcon[key];
    }
  });
});

var _ListItemSecondaryAction = _interopRequireWildcard(require("./ListItemSecondaryAction"));

Object.keys(_ListItemSecondaryAction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ListItemSecondaryAction[key];
    }
  });
});

var _ListItemText = _interopRequireWildcard(require("./ListItemText"));

Object.keys(_ListItemText).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ListItemText[key];
    }
  });
});

var _ListSubheader = _interopRequireWildcard(require("./ListSubheader"));

Object.keys(_ListSubheader).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ListSubheader[key];
    }
  });
});

var _Menu = _interopRequireWildcard(require("./Menu"));

Object.keys(_Menu).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Menu[key];
    }
  });
});

var _MenuItem = _interopRequireWildcard(require("./MenuItem"));

Object.keys(_MenuItem).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _MenuItem[key];
    }
  });
});

var _MenuList = _interopRequireWildcard(require("./MenuList"));

Object.keys(_MenuList).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _MenuList[key];
    }
  });
});

var _MobileStepper = _interopRequireWildcard(require("./MobileStepper"));

Object.keys(_MobileStepper).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _MobileStepper[key];
    }
  });
});

var _Modal = _interopRequireWildcard(require("./Modal"));

Object.keys(_Modal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Modal[key];
    }
  });
});

var _NativeSelect = _interopRequireWildcard(require("./NativeSelect"));

Object.keys(_NativeSelect).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _NativeSelect[key];
    }
  });
});

var _NoSsr = _interopRequireWildcard(require("./NoSsr"));

Object.keys(_NoSsr).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _NoSsr[key];
    }
  });
});

var _OutlinedInput = _interopRequireWildcard(require("./OutlinedInput"));

Object.keys(_OutlinedInput).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _OutlinedInput[key];
    }
  });
});

var _Paper = _interopRequireWildcard(require("./Paper"));

Object.keys(_Paper).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Paper[key];
    }
  });
});

var _Popover = _interopRequireWildcard(require("./Popover"));

Object.keys(_Popover).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Popover[key];
    }
  });
});

var _Popper = _interopRequireWildcard(require("./Popper"));

Object.keys(_Popper).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Popper[key];
    }
  });
});

var _Portal = _interopRequireWildcard(require("./Portal"));

Object.keys(_Portal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Portal[key];
    }
  });
});

var _Radio = _interopRequireWildcard(require("./Radio"));

Object.keys(_Radio).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Radio[key];
    }
  });
});

var _RadioGroup = _interopRequireWildcard(require("./RadioGroup"));

Object.keys(_RadioGroup).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _RadioGroup[key];
    }
  });
});

var _RootRef = _interopRequireWildcard(require("./RootRef"));

Object.keys(_RootRef).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _RootRef[key];
    }
  });
});

var _Select = _interopRequireWildcard(require("./Select"));

Object.keys(_Select).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Select[key];
    }
  });
});

var _Slide = _interopRequireWildcard(require("./Slide"));

Object.keys(_Slide).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Slide[key];
    }
  });
});

var _Slider = _interopRequireWildcard(require("./Slider"));

Object.keys(_Slider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Slider[key];
    }
  });
});

var _Snackbar = _interopRequireWildcard(require("./Snackbar"));

Object.keys(_Snackbar).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Snackbar[key];
    }
  });
});

var _SnackbarContent = _interopRequireWildcard(require("./SnackbarContent"));

Object.keys(_SnackbarContent).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _SnackbarContent[key];
    }
  });
});

var _Step = _interopRequireWildcard(require("./Step"));

Object.keys(_Step).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Step[key];
    }
  });
});

var _StepButton = _interopRequireWildcard(require("./StepButton"));

Object.keys(_StepButton).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _StepButton[key];
    }
  });
});

var _StepConnector = _interopRequireWildcard(require("./StepConnector"));

Object.keys(_StepConnector).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _StepConnector[key];
    }
  });
});

var _StepContent = _interopRequireWildcard(require("./StepContent"));

Object.keys(_StepContent).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _StepContent[key];
    }
  });
});

var _StepIcon = _interopRequireWildcard(require("./StepIcon"));

Object.keys(_StepIcon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _StepIcon[key];
    }
  });
});

var _StepLabel = _interopRequireWildcard(require("./StepLabel"));

Object.keys(_StepLabel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _StepLabel[key];
    }
  });
});

var _Stepper = _interopRequireWildcard(require("./Stepper"));

Object.keys(_Stepper).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Stepper[key];
    }
  });
});

var _SvgIcon = _interopRequireWildcard(require("./SvgIcon"));

Object.keys(_SvgIcon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _SvgIcon[key];
    }
  });
});

var _SwipeableDrawer = _interopRequireWildcard(require("./SwipeableDrawer"));

Object.keys(_SwipeableDrawer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _SwipeableDrawer[key];
    }
  });
});

var _Switch = _interopRequireWildcard(require("./Switch"));

Object.keys(_Switch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Switch[key];
    }
  });
});

var _Tab = _interopRequireWildcard(require("./Tab"));

Object.keys(_Tab).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Tab[key];
    }
  });
});

var _Table = _interopRequireWildcard(require("./Table"));

Object.keys(_Table).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Table[key];
    }
  });
});

var _TableBody = _interopRequireWildcard(require("./TableBody"));

Object.keys(_TableBody).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TableBody[key];
    }
  });
});

var _TableCell = _interopRequireWildcard(require("./TableCell"));

Object.keys(_TableCell).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TableCell[key];
    }
  });
});

var _TableContainer = _interopRequireWildcard(require("./TableContainer"));

Object.keys(_TableContainer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TableContainer[key];
    }
  });
});

var _TableFooter = _interopRequireWildcard(require("./TableFooter"));

Object.keys(_TableFooter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TableFooter[key];
    }
  });
});

var _TableHead = _interopRequireWildcard(require("./TableHead"));

Object.keys(_TableHead).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TableHead[key];
    }
  });
});

var _TablePagination = _interopRequireWildcard(require("./TablePagination"));

Object.keys(_TablePagination).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TablePagination[key];
    }
  });
});

var _TableRow = _interopRequireWildcard(require("./TableRow"));

Object.keys(_TableRow).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TableRow[key];
    }
  });
});

var _TableSortLabel = _interopRequireWildcard(require("./TableSortLabel"));

Object.keys(_TableSortLabel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TableSortLabel[key];
    }
  });
});

var _Tabs = _interopRequireWildcard(require("./Tabs"));

Object.keys(_Tabs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Tabs[key];
    }
  });
});

var _TabScrollButton = _interopRequireWildcard(require("./TabScrollButton"));

Object.keys(_TabScrollButton).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TabScrollButton[key];
    }
  });
});

var _TextField = _interopRequireWildcard(require("./TextField"));

Object.keys(_TextField).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TextField[key];
    }
  });
});

var _TextareaAutosize = _interopRequireWildcard(require("./TextareaAutosize"));

Object.keys(_TextareaAutosize).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TextareaAutosize[key];
    }
  });
});

var _Toolbar = _interopRequireWildcard(require("./Toolbar"));

Object.keys(_Toolbar).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Toolbar[key];
    }
  });
});

var _Tooltip = _interopRequireWildcard(require("./Tooltip"));

Object.keys(_Tooltip).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Tooltip[key];
    }
  });
});

var _Typography = _interopRequireWildcard(require("./Typography"));

Object.keys(_Typography).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Typography[key];
    }
  });
});

var _Unstable_TrapFocus = _interopRequireWildcard(require("./Unstable_TrapFocus"));

Object.keys(_Unstable_TrapFocus).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Unstable_TrapFocus[key];
    }
  });
});

var _useMediaQuery = _interopRequireWildcard(require("./useMediaQuery"));

Object.keys(_useMediaQuery).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _useMediaQuery[key];
    }
  });
});

var _useScrollTrigger = _interopRequireWildcard(require("./useScrollTrigger"));

Object.keys(_useScrollTrigger).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _useScrollTrigger[key];
    }
  });
});

var _withMobileDialog = _interopRequireWildcard(require("./withMobileDialog"));

Object.keys(_withMobileDialog).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _withMobileDialog[key];
    }
  });
});

var _withWidth = _interopRequireWildcard(require("./withWidth"));

Object.keys(_withWidth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _withWidth[key];
    }
  });
});

var _Zoom = _interopRequireWildcard(require("./Zoom"));

Object.keys(_Zoom).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Zoom[key];
    }
  });
});
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item-details/transaction-list-item-details.component.js", {"../../../../shared/constants/time":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/time.js","../../../../shared/constants/transaction":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/transaction.js","../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../ui/disclosure":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/disclosure/index.js","../../ui/popover":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/popover/index.js","../../ui/sender-to-recipient":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/index.js","../../ui/sender-to-recipient/sender-to-recipient.constants":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/sender-to-recipient.constants.js","../../ui/tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","../cancel-button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/cancel-button/index.js","../transaction-activity-log":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-activity-log/index.js","../transaction-breakdown":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-breakdown/index.js","../transaction-decoding":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@metamask/etherscan-link":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/etherscan-link/dist/index.js","copy-to-clipboard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/copy-to-clipboard/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item-details/transaction-list-item-details.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _etherscanLink = require("@metamask/etherscan-link");

var _senderToRecipient = _interopRequireDefault(require("../../ui/sender-to-recipient"));

var _senderToRecipient2 = require("../../ui/sender-to-recipient/sender-to-recipient.constants");

var _disclosure = _interopRequireDefault(require("../../ui/disclosure"));

var _transactionActivityLog = _interopRequireDefault(require("../transaction-activity-log"));

var _transactionBreakdown = _interopRequireDefault(require("../transaction-breakdown"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));

var _cancelButton = _interopRequireDefault(require("../cancel-button"));

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _time = require("../../../../shared/constants/time");

var _transaction = require("../../../../shared/constants/transaction");

var _util = require("../../../helpers/utils/util");

var _transactionDecoding = _interopRequireDefault(require("../transaction-decoding"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class TransactionListItemDetails extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      justCopied: false
    });
    (0, _defineProperty2.default)(this, "handleBlockExplorerClick", () => {
      const {
        transactionGroup: {
          primaryTransaction
        },
        rpcPrefs
      } = this.props;
      const blockExplorerLink = (0, _etherscanLink.getBlockExplorerLink)(primaryTransaction, rpcPrefs);
      this.context.trackEvent({
        category: 'Transactions',
        event: 'Clicked Block Explorer Link',
        properties: {
          link_type: 'Transaction Block Explorer',
          action: 'Transaction Details',
          block_explorer_domain: (0, _util.getURLHostName)(blockExplorerLink)
        }
      });
      global.platform.openTab({
        url: blockExplorerLink
      });
    });
    (0, _defineProperty2.default)(this, "handleCancel", event => {
      const {
        onCancel,
        onClose
      } = this.props;
      onCancel(event);
      onClose();
    });
    (0, _defineProperty2.default)(this, "handleRetry", event => {
      const {
        onClose,
        onRetry
      } = this.props;
      onRetry(event);
      onClose();
    });
    (0, _defineProperty2.default)(this, "handleCopyTxId", () => {
      const {
        transactionGroup
      } = this.props;
      const {
        primaryTransaction: transaction
      } = transactionGroup;
      const {
        hash
      } = transaction;
      this.context.metricsEvent({
        eventOpts: {
          category: 'Navigation',
          action: 'Activity Log',
          name: 'Copied Transaction ID'
        }
      });
      this.setState({
        justCopied: true
      }, () => {
        (0, _copyToClipboard.default)(hash);
        setTimeout(() => this.setState({
          justCopied: false
        }), _time.SECOND);
      });
    });
  }

  componentDidMount() {
    const {
      recipientAddress,
      tryReverseResolveAddress
    } = this.props;

    if (recipientAddress) {
      tryReverseResolveAddress(recipientAddress);
    }
  }

  render() {
    var _transactionGroup$ini, _transactionGroup$ini2, _transactionGroup$ini3, _transactionGroup$ini4;

    const {
      t
    } = this.context;
    const {
      justCopied
    } = this.state;
    const {
      transactionGroup,
      primaryCurrency,
      showSpeedUp,
      showRetry,
      recipientEns,
      recipientAddress,
      senderAddress,
      isEarliestNonce,
      senderNickname,
      title,
      onClose,
      recipientNickname,
      showCancel,
      transactionStatus: TransactionStatus
    } = this.props;
    const {
      primaryTransaction: transaction,
      initialTransaction: {
        type
      }
    } = transactionGroup;
    const {
      hash
    } = transaction;
    return /*#__PURE__*/_react.default.createElement(_popover.default, {
      title: title,
      onClose: onClose
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__operations"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__header-buttons"
    }, showSpeedUp && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: this.handleRetry,
      className: "transaction-list-item-details__header-button-rounded-button"
    }, t('speedUp')), showCancel && /*#__PURE__*/_react.default.createElement(_cancelButton.default, {
      transaction: transaction,
      cancelTransaction: this.handleCancel,
      detailsModal: true
    }), showRetry && /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      title: t('retryTransaction')
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "raised",
      onClick: this.handleRetry,
      className: "transaction-list-item-details__header-button"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-sync"
    }))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__tx-status"
    }, /*#__PURE__*/_react.default.createElement("div", null, "Status"), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(TransactionStatus, null))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__tx-hash"
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      onClick: this.handleBlockExplorerClick,
      disabled: !hash
    }, t('viewOnBlockExplorer'))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      wrapperClassName: "transaction-list-item-details__header-button",
      containerClassName: "transaction-list-item-details__header-button-tooltip-container",
      title: justCopied ? t('copiedExclamation') : null
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      onClick: this.handleCopyTxId,
      disabled: !hash
    }, t('copyTransactionId')))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__body"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__sender-to-recipient-header"
    }, /*#__PURE__*/_react.default.createElement("div", null, t('from')), /*#__PURE__*/_react.default.createElement("div", null, t('to'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__sender-to-recipient-container"
    }, /*#__PURE__*/_react.default.createElement(_senderToRecipient.default, {
      warnUserOnAccountMismatch: false,
      variant: _senderToRecipient2.DEFAULT_VARIANT,
      addressOnly: true,
      recipientEns: recipientEns,
      recipientAddress: recipientAddress,
      recipientNickname: recipientNickname,
      senderName: senderNickname,
      senderAddress: senderAddress,
      onRecipientClick: () => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Navigation',
            action: 'Activity Log',
            name: 'Copied "To" Address'
          }
        });
      },
      onSenderClick: () => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Navigation',
            action: 'Activity Log',
            name: 'Copied "From" Address'
          }
        });
      }
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-list-item-details__cards-container"
    }, /*#__PURE__*/_react.default.createElement(_transactionBreakdown.default, {
      nonce: transactionGroup.initialTransaction.txParams.nonce,
      isTokenApprove: type === _transaction.TRANSACTION_TYPES.TOKEN_METHOD_APPROVE,
      transaction: transaction,
      primaryCurrency: primaryCurrency,
      className: "transaction-list-item-details__transaction-breakdown"
    }), transactionGroup.initialTransaction.type !== _transaction.TRANSACTION_TYPES.INCOMING && /*#__PURE__*/_react.default.createElement(_disclosure.default, {
      title: t('activityLog'),
      size: "small"
    }, /*#__PURE__*/_react.default.createElement(_transactionActivityLog.default, {
      transactionGroup: transactionGroup,
      className: "transaction-list-item-details__transaction-activity-log",
      onCancel: this.handleCancel,
      onRetry: this.handleRetry,
      isEarliestNonce: isEarliestNonce
    })), (_transactionGroup$ini = transactionGroup.initialTransaction) !== null && _transactionGroup$ini !== void 0 && (_transactionGroup$ini2 = _transactionGroup$ini.txParams) !== null && _transactionGroup$ini2 !== void 0 && _transactionGroup$ini2.data ? /*#__PURE__*/_react.default.createElement(_disclosure.default, {
      title: "Transaction data",
      size: "small"
    }, /*#__PURE__*/_react.default.createElement(_transactionDecoding.default, {
      title: t('transactionData'),
      to: (_transactionGroup$ini3 = transactionGroup.initialTransaction.txParams) === null || _transactionGroup$ini3 === void 0 ? void 0 : _transactionGroup$ini3.to,
      inputData: (_transactionGroup$ini4 = transactionGroup.initialTransaction.txParams) === null || _transactionGroup$ini4 === void 0 ? void 0 : _transactionGroup$ini4.data
    })) : null))));
  }

}

exports.default = TransactionListItemDetails;
(0, _defineProperty2.default)(TransactionListItemDetails, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(TransactionListItemDetails, "defaultProps", {
  recipientEns: null
});
(0, _defineProperty2.default)(TransactionListItemDetails, "propTypes", {
  onCancel: _propTypes.default.func,
  onRetry: _propTypes.default.func,
  showCancel: _propTypes.default.bool,
  showSpeedUp: _propTypes.default.bool,
  showRetry: _propTypes.default.bool,
  isEarliestNonce: _propTypes.default.bool,
  primaryCurrency: _propTypes.default.string,
  transactionGroup: _propTypes.default.object,
  title: _propTypes.default.string.isRequired,
  onClose: _propTypes.default.func.isRequired,
  recipientEns: _propTypes.default.string,
  recipientAddress: _propTypes.default.string,
  rpcPrefs: _propTypes.default.object,
  senderAddress: _propTypes.default.string.isRequired,
  tryReverseResolveAddress: _propTypes.default.func.isRequired,
  senderNickname: _propTypes.default.string.isRequired,
  recipientNickname: _propTypes.default.string,
  transactionStatus: _propTypes.default.func
});


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-list-item-details/transaction-list-item-details.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeDragSources/getDataFromDataTransfer.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeDragSources/getDataFromDataTransfer.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getDataFromDataTransfer(dataTransfer, typesToTry, defaultValue) {
    var result = typesToTry.reduce(function (resultSoFar, typeToTry) { return resultSoFar || dataTransfer.getData(typeToTry); }, '');
    return result != null ? result : defaultValue;
}
exports.getDataFromDataTransfer = getDataFromDataTransfer;

      };
    };
  }
}, {package:"react-dnd-html5-backend",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd-html5-backend/lib/cjs/NativeDragSources/getDataFromDataTransfer.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/lock-icon/lock-icon.component.js", {"@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/lock-icon/lock-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LockIcon;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

function LockIcon(props) {
  return /*#__PURE__*/_react.default.createElement("svg", (0, _extends2.default)({
    version: "1.1",
    id: "Capa_1",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    width: "401.998px",
    height: "401.998px",
    viewBox: "0 0 401.998 401.998",
    style: {
      enableBackground: 'new 0 0 401.998 401.998'
    },
    xmlSpace: "preserve"
  }, props), /*#__PURE__*/_react.default.createElement("g", null, /*#__PURE__*/_react.default.createElement("path", {
    d: "M357.45,190.721c-5.331-5.33-11.8-7.993-19.417-7.993h-9.131v-54.821c0-35.022-12.559-65.093-37.685-90.218 C266.093,12.563,236.025,0,200.998,0c-35.026,0-65.1,12.563-90.222,37.688C85.65,62.814,73.091,92.884,73.091,127.907v54.821 h-9.135c-7.611,0-14.084,2.663-19.414,7.993c-5.33,5.326-7.994,11.799-7.994,19.417V374.59c0,7.611,2.665,14.086,7.994,19.417 c5.33,5.325,11.803,7.991,19.414,7.991H338.04c7.617,0,14.085-2.663,19.417-7.991c5.325-5.331,7.994-11.806,7.994-19.417V210.135 C365.455,202.523,362.782,196.051,357.45,190.721z M274.087,182.728H127.909v-54.821c0-20.175,7.139-37.402,21.414-51.675 c14.277-14.275,31.501-21.411,51.678-21.411c20.179,0,37.399,7.135,51.677,21.411c14.271,14.272,21.409,31.5,21.409,51.675V182.728 z"
  })));
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/lock-icon/lock-icon.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/isDisposable.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/isDisposable.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;
exports['default'] = isDisposable;

function isDisposable(obj) {
  return Boolean(obj && typeof obj.dispose === 'function');
}

module.exports = exports['default'];
      };
    };
  }
}, {package:"disposables",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/isDisposable.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/Disposable.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/Disposable.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var noop = function noop() {};

/**
 * The basic disposable.
 */

var Disposable = (function () {
  _createClass(Disposable, null, [{
    key: "empty",
    value: { dispose: noop },
    enumerable: true
  }]);

  function Disposable(action) {
    _classCallCheck(this, Disposable);

    this.isDisposed = false;
    this.action = action || noop;
  }

  Disposable.prototype.dispose = function dispose() {
    if (!this.isDisposed) {
      this.action.call(null);
      this.isDisposed = true;
    }
  };

  return Disposable;
})();

exports["default"] = Disposable;
module.exports = exports["default"];
      };
    };
  }
}, {package:"disposables",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/Disposable.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/CompositeDisposable.js", {"./isDisposable":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/isDisposable.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/CompositeDisposable.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _isDisposable = require('./isDisposable');

var _isDisposable2 = _interopRequireDefault(_isDisposable);

/**
 * Represents a group of disposable resources that are disposed together.
 */

var CompositeDisposable = (function () {
  function CompositeDisposable() {
    for (var _len = arguments.length, disposables = Array(_len), _key = 0; _key < _len; _key++) {
      disposables[_key] = arguments[_key];
    }

    _classCallCheck(this, CompositeDisposable);

    if (Array.isArray(disposables[0]) && disposables.length === 1) {
      disposables = disposables[0];
    }

    for (var i = 0; i < disposables.length; i++) {
      if (!_isDisposable2['default'](disposables[i])) {
        throw new Error('Expected a disposable');
      }
    }

    this.disposables = disposables;
    this.isDisposed = false;
  }

  /**
   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
   * @param {Disposable} item Disposable to add.
   */

  CompositeDisposable.prototype.add = function add(item) {
    if (this.isDisposed) {
      item.dispose();
    } else {
      this.disposables.push(item);
    }
  };

  /**
   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
   * @param {Disposable} item Disposable to remove.
   * @returns {Boolean} true if found; false otherwise.
   */

  CompositeDisposable.prototype.remove = function remove(item) {
    if (this.isDisposed) {
      return false;
    }

    var index = this.disposables.indexOf(item);
    if (index === -1) {
      return false;
    }

    this.disposables.splice(index, 1);
    item.dispose();
    return true;
  };

  /**
   * Disposes all disposables in the group and removes them from the group.
   */

  CompositeDisposable.prototype.dispose = function dispose() {
    if (this.isDisposed) {
      return;
    }

    var len = this.disposables.length;
    var currentDisposables = new Array(len);
    for (var i = 0; i < len; i++) {
      currentDisposables[i] = this.disposables[i];
    }

    this.isDisposed = true;
    this.disposables = [];
    this.length = 0;

    for (var i = 0; i < len; i++) {
      currentDisposables[i].dispose();
    }
  };

  return CompositeDisposable;
})();

exports['default'] = CompositeDisposable;
module.exports = exports['default'];
      };
    };
  }
}, {package:"disposables",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/CompositeDisposable.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/SerialDisposable.js", {"./isDisposable":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/isDisposable.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/SerialDisposable.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _isDisposable = require('./isDisposable');

var _isDisposable2 = _interopRequireDefault(_isDisposable);

var SerialDisposable = (function () {
  function SerialDisposable() {
    _classCallCheck(this, SerialDisposable);

    this.isDisposed = false;
    this.current = null;
  }

  /**
   * Gets the underlying disposable.
   * @return The underlying disposable.
   */

  SerialDisposable.prototype.getDisposable = function getDisposable() {
    return this.current;
  };

  /**
   * Sets the underlying disposable.
   * @param {Disposable} value The new underlying disposable.
   */

  SerialDisposable.prototype.setDisposable = function setDisposable() {
    var value = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

    if (value != null && !_isDisposable2['default'](value)) {
      throw new Error('Expected either an empty value or a valid disposable');
    }

    var isDisposed = this.isDisposed;
    var previous = undefined;

    if (!isDisposed) {
      previous = this.current;
      this.current = value;
    }

    if (previous) {
      previous.dispose();
    }

    if (isDisposed && value) {
      value.dispose();
    }
  };

  /**
   * Disposes the underlying disposable as well as all future replacements.
   */

  SerialDisposable.prototype.dispose = function dispose() {
    if (this.isDisposed) {
      return;
    }

    this.isDisposed = true;
    var previous = this.current;
    this.current = null;

    if (previous) {
      previous.dispose();
    }
  };

  return SerialDisposable;
})();

exports['default'] = SerialDisposable;
module.exports = exports['default'];
      };
    };
  }
}, {package:"disposables",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/disposables/modules/SerialDisposable.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/utils/cloneWithRef.js", {"invariant":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/invariant/browser.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/utils/cloneWithRef.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var invariant_1 = __importDefault(require("invariant"));
var react_1 = require("react");
function cloneWithRef(element, newRef) {
    var previousRef = element.ref;
    invariant_1.default(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' +
        'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' +
        'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');
    if (!previousRef) {
        // When there is no ref on the element, use the new ref directly
        return react_1.cloneElement(element, {
            ref: newRef,
        });
    }
    return react_1.cloneElement(element, {
        ref: function (node) {
            newRef(node);
            if (previousRef) {
                previousRef(node);
            }
        },
    });
}
exports.default = cloneWithRef;
//# sourceMappingURL=cloneWithRef.js.map
      };
    };
  }
}, {package:"react-dnd",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-dnd/lib/utils/cloneWithRef.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/DragDropManagerImpl.js", {"./DragDropMonitorImpl":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/DragDropMonitorImpl.js","./HandlerRegistryImpl":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/HandlerRegistryImpl.js","./actions/dragDrop":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/actions/dragDrop.js","./reducers":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/reducers/index.js","redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/redux/lib/redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/DragDropManagerImpl.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var redux_1 = require("redux");
var reducers_1 = __importDefault(require("./reducers"));
var dragDrop_1 = __importDefault(require("./actions/dragDrop"));
var DragDropMonitorImpl_1 = __importDefault(require("./DragDropMonitorImpl"));
var HandlerRegistryImpl_1 = __importDefault(require("./HandlerRegistryImpl"));
var DragDropManagerImpl = /** @class */ (function () {
    function DragDropManagerImpl(createBackend, context) {
        if (context === void 0) { context = {}; }
        this.context = context;
        this.isSetUp = false;
        var store = redux_1.createStore(reducers_1.default);
        this.store = store;
        this.monitor = new DragDropMonitorImpl_1.default(store, new HandlerRegistryImpl_1.default(store));
        this.backend = createBackend(this);
        store.subscribe(this.handleRefCountChange.bind(this));
    }
    DragDropManagerImpl.prototype.getContext = function () {
        return this.context;
    };
    DragDropManagerImpl.prototype.getMonitor = function () {
        return this.monitor;
    };
    DragDropManagerImpl.prototype.getBackend = function () {
        return this.backend;
    };
    DragDropManagerImpl.prototype.getRegistry = function () {
        return this.monitor.registry;
    };
    DragDropManagerImpl.prototype.getActions = function () {
        var manager = this;
        var dispatch = this.store.dispatch;
        function bindActionCreator(actionCreator) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var action = actionCreator.apply(manager, args);
                if (typeof action !== 'undefined') {
                    dispatch(action);
                }
            };
        }
        var actions = dragDrop_1.default(this);
        return Object.keys(actions).reduce(function (boundActions, key) {
            var action = actions[key];
            boundActions[key] = bindActionCreator(action); // eslint-disable-line no-param-reassign
            return boundActions;
        }, {});
    };
    DragDropManagerImpl.prototype.dispatch = function (action) {
        this.store.dispatch(action);
    };
    DragDropManagerImpl.prototype.handleRefCountChange = function () {
        var shouldSetUp = this.store.getState().refCount > 0;
        if (shouldSetUp && !this.isSetUp) {
            this.backend.setup();
            this.isSetUp = true;
        }
        else if (!shouldSetUp && this.isSetUp) {
            this.backend.teardown();
            this.isSetUp = false;
        }
    };
    return DragDropManagerImpl;
}());
exports.default = DragDropManagerImpl;
//# sourceMappingURL=DragDropManagerImpl.js.map
      };
    };
  }
}, {package:"dnd-core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/DragDropManagerImpl.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list-item/index.js", {"./networks-list-item":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list-item/networks-list-item.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list-item/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networksListItem.default;
  }
});

var _networksListItem = _interopRequireDefault(require("./networks-list-item"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list-item/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/has/src/index.js", {"function-bind":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/function-bind/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/has/src/index.js
      return function (require, module, exports) {
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

      };
    };
  }
}, {package:"has",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/has/src/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/function-bind/implementation.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/function-bind/implementation.js
      return function (require, module, exports) {
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

      };
    };
  }
}, {package:"function-bind",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/function-bind/implementation.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/node_modules/ethjs-abi/lib/utils/index.js", {"bn.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/bn.js/lib/bn.js","buffer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/browserify/node_modules/buffer/index.js","js-sha3":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/js-sha3/src/sha3.js","number-to-bn":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/number-to-bn/src/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/node_modules/ethjs-abi/lib/utils/index.js
      return function (require, module, exports) {
(function (Buffer){(function (){
'use strict';

var BN = require('bn.js');
var numberToBN = require('number-to-bn');
var keccak256 = require('js-sha3').keccak_256;

// from ethereumjs-util
function stripZeros(aInput) {
  var a = aInput; // eslint-disable-line
  var first = a[0]; // eslint-disable-line
  while (a.length > 0 && first.toString() === '0') {
    a = a.slice(1);
    first = a[0];
  }
  return a;
}

function bnToBuffer(bnInput) {
  var bn = bnInput; // eslint-disable-line
  var hex = bn.toString(16); // eslint-disable-line
  if (hex.length % 2) {
    hex = '0' + hex;
  }
  return stripZeros(new Buffer(hex, 'hex'));
}

function isHexString(value, length) {
  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}

function hexOrBuffer(valueInput, name) {
  var value = valueInput; // eslint-disable-line
  if (!Buffer.isBuffer(value)) {
    if (!isHexString(value)) {
      var error = new Error(name ? '[ethjs-abi] invalid ' + name : '[ethjs-abi] invalid hex or buffer, must be a prefixed alphanumeric even length hex string');
      error.reason = '[ethjs-abi] invalid hex string, hex must be prefixed and alphanumeric (e.g. 0x023..)';
      error.value = value;
      throw error;
    }

    value = value.substring(2);
    if (value.length % 2) {
      value = '0' + value;
    }
    value = new Buffer(value, 'hex');
  }

  return value;
}

function hexlify(value) {
  if (typeof value === 'number') {
    return '0x' + bnToBuffer(new BN(value)).toString('hex');
  } else if (value.mod || value.modulo) {
    return '0x' + bnToBuffer(value).toString('hex');
  } else {
    // eslint-disable-line
    return '0x' + hexOrBuffer(value).toString('hex');
  }
}

// getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
function getKeys(params, key, allowEmpty) {
  var result = []; // eslint-disable-line

  if (!Array.isArray(params)) {
    throw new Error('[ethjs-abi] while getting keys, invalid params value ' + JSON.stringify(params));
  }

  for (var i = 0; i < params.length; i++) {
    // eslint-disable-line
    var value = params[i][key]; // eslint-disable-line
    if (allowEmpty && !value) {
      value = '';
    } else if (typeof value !== 'string') {
      throw new Error('[ethjs-abi] while getKeys found invalid ABI data structure, type value not string');
    }
    result.push(value);
  }

  return result;
}

function coderNumber(size, signed) {
  return {
    encode: function encodeNumber(valueInput) {
      var value = valueInput; // eslint-disable-line

      if (typeof value === 'object' && value.toString && (value.toTwos || value.dividedToIntegerBy)) {
        value = value.toString(10).split('.')[0];
      }

      if (typeof value === 'string' || typeof value === 'number') {
        value = String(value).split('.')[0];
      }

      value = numberToBN(value);
      value = value.toTwos(size * 8).maskn(size * 8);
      if (signed) {
        value = value.fromTwos(size * 8).toTwos(256);
      }
      return value.toArrayLike(Buffer, 'be', 32);
    },
    decode: function decodeNumber(data, offset) {
      var junkLength = 32 - size; // eslint-disable-line
      var value = new BN(data.slice(offset + junkLength, offset + 32)); // eslint-disable-line
      if (signed) {
        value = value.fromTwos(size * 8);
      } else {
        value = value.maskn(size * 8);
      }
      return {
        consumed: 32,
        value: new BN(value.toString(10))
      };
    }
  };
}
var uint256Coder = coderNumber(32, false);

var coderBoolean = {
  encode: function encodeBoolean(value) {
    return uint256Coder.encode(value ? 1 : 0);
  },
  decode: function decodeBoolean(data, offset) {
    var result = uint256Coder.decode(data, offset); // eslint-disable-line
    return {
      consumed: result.consumed,
      value: !result.value.isZero()
    };
  }
};

function coderFixedBytes(length) {
  return {
    encode: function encodeFixedBytes(valueInput) {
      var value = valueInput; // eslint-disable-line
      value = hexOrBuffer(value);

      if (value.length === 32) {
        return value;
      }

      var result = new Buffer(32); // eslint-disable-line
      result.fill(0);
      value.copy(result);
      return result;
    },
    decode: function decodeFixedBytes(data, offset) {
      if (data.length !== 0 && data.length < offset + 32) {
        throw new Error('[ethjs-abi] while decoding fixed bytes, invalid bytes data length: ' + length);
      }

      return {
        consumed: 32,
        value: '0x' + data.slice(offset, offset + length).toString('hex')
      };
    }
  };
}

var coderAddress = {
  encode: function encodeAddress(valueInput) {
    var value = valueInput; // eslint-disable-line
    var result = new Buffer(32); // eslint-disable-line
    if (!isHexString(value, 20)) {
      throw new Error('[ethjs-abi] while encoding address, invalid address value, not alphanumeric 20 byte hex string');
    }
    value = hexOrBuffer(value);
    result.fill(0);
    value.copy(result, 12);
    return result;
  },
  decode: function decodeAddress(data, offset) {
    if (data.length === 0) {
      return {
        consumed: 32,
        value: '0x'
      };
    }
    if (data.length !== 0 && data.length < offset + 32) {
      throw new Error('[ethjs-abi] while decoding address data, invalid address data, invalid byte length ' + data.length);
    }
    return {
      consumed: 32,
      value: '0x' + data.slice(offset + 12, offset + 32).toString('hex')
    };
  }
};

function encodeDynamicBytesHelper(value) {
  var dataLength = parseInt(32 * Math.ceil(value.length / 32)); // eslint-disable-line
  var padding = new Buffer(dataLength - value.length); // eslint-disable-line
  padding.fill(0);

  return Buffer.concat([uint256Coder.encode(value.length), value, padding]);
}

function decodeDynamicBytesHelper(data, offset) {
  if (data.length !== 0 && data.length < offset + 32) {
    throw new Error('[ethjs-abi] while decoding dynamic bytes data, invalid bytes length: ' + data.length + ' should be less than ' + (offset + 32));
  }

  var length = uint256Coder.decode(data, offset).value; // eslint-disable-line
  length = length.toNumber();
  if (data.length !== 0 && data.length < offset + 32 + length) {
    throw new Error('[ethjs-abi] while decoding dynamic bytes data, invalid bytes length: ' + data.length + ' should be less than ' + (offset + 32 + length));
  }

  return {
    consumed: parseInt(32 + 32 * Math.ceil(length / 32), 10),
    value: data.slice(offset + 32, offset + 32 + length)
  };
}

var coderDynamicBytes = {
  encode: function encodeDynamicBytes(value) {
    return encodeDynamicBytesHelper(hexOrBuffer(value));
  },
  decode: function decodeDynamicBytes(data, offset) {
    var result = decodeDynamicBytesHelper(data, offset); // eslint-disable-line
    result.value = '0x' + result.value.toString('hex');
    return result;
  },
  dynamic: true
};

var coderString = {
  encode: function encodeString(value) {
    return encodeDynamicBytesHelper(new Buffer(value, 'utf8'));
  },
  decode: function decodeString(data, offset) {
    var result = decodeDynamicBytesHelper(data, offset); // eslint-disable-line
    result.value = result.value.toString('utf8');
    return result;
  },
  dynamic: true
};

function coderArray(coder, lengthInput) {
  return {
    encode: function encodeArray(value) {
      var result = new Buffer(0); // eslint-disable-line
      var length = lengthInput; // eslint-disable-line

      if (!Array.isArray(value)) {
        throw new Error('[ethjs-abi] while encoding array, invalid array data, not type Object (Array)');
      }

      if (length === -1) {
        length = value.length;
        result = uint256Coder.encode(length);
      }

      if (length !== value.length) {
        throw new Error('[ethjs-abi] while encoding array, size mismatch array length ' + length + ' does not equal ' + value.length);
      }

      value.forEach(function (resultValue) {
        result = Buffer.concat([result, coder.encode(resultValue)]);
      });

      return result;
    },
    decode: function decodeArray(data, offsetInput) {
      var length = lengthInput; // eslint-disable-line
      var offset = offsetInput; // eslint-disable-line
      // @TODO:
      // if (data.length < offset + length * 32) { throw new Error('invalid array'); }

      var consumed = 0; // eslint-disable-line
      var decodeResult; // eslint-disable-line

      if (length === -1) {
        decodeResult = uint256Coder.decode(data, offset);
        length = decodeResult.value.toNumber();
        consumed += decodeResult.consumed;
        offset += decodeResult.consumed;
      }

      var value = []; // eslint-disable-line

      for (var i = 0; i < length; i++) {
        // eslint-disable-line
        var loopResult = coder.decode(data, offset);
        consumed += loopResult.consumed;
        offset += loopResult.consumed;
        value.push(loopResult.value);
      }

      return {
        consumed: consumed,
        value: value
      };
    },
    dynamic: lengthInput === -1
  };
}

// Break the type up into [staticType][staticArray]*[dynamicArray]? | [dynamicType] and
// build the coder up from its parts
var paramTypePart = new RegExp(/^((u?int|bytes)([0-9]*)|(address|bool|string)|(\[([0-9]*)\]))/);

function getParamCoder(typeInput) {
  var type = typeInput; // eslint-disable-line
  var coder = null; // eslint-disable-line
  var invalidTypeErrorMessage = '[ethjs-abi] while getting param coder (getParamCoder) type value ' + JSON.stringify(type) + ' is either invalid or unsupported by ethjs-abi.';

  while (type) {
    var part = type.match(paramTypePart); // eslint-disable-line
    if (!part) {
      throw new Error(invalidTypeErrorMessage);
    }
    type = type.substring(part[0].length);

    var prefix = part[2] || part[4] || part[5]; // eslint-disable-line
    switch (prefix) {
      case 'int':case 'uint':
        if (coder) {
          throw new Error(invalidTypeErrorMessage);
        }
        var intSize = parseInt(part[3] || 256); // eslint-disable-line
        if (intSize === 0 || intSize > 256 || intSize % 8 !== 0) {
          throw new Error('[ethjs-abi] while getting param coder for type ' + type + ', invalid ' + prefix + '<N> width: ' + type);
        }

        coder = coderNumber(intSize / 8, prefix === 'int');
        break;

      case 'bool':
        if (coder) {
          throw new Error(invalidTypeErrorMessage);
        }
        coder = coderBoolean;
        break;

      case 'string':
        if (coder) {
          throw new Error(invalidTypeErrorMessage);
        }
        coder = coderString;
        break;

      case 'bytes':
        if (coder) {
          throw new Error(invalidTypeErrorMessage);
        }
        if (part[3]) {
          var size = parseInt(part[3]); // eslint-disable-line
          if (size === 0 || size > 32) {
            throw new Error('[ethjs-abi] while getting param coder for prefix bytes, invalid type ' + type + ', size ' + size + ' should be 0 or greater than 32');
          }
          coder = coderFixedBytes(size);
        } else {
          coder = coderDynamicBytes;
        }
        break;

      case 'address':
        if (coder) {
          throw new Error(invalidTypeErrorMessage);
        }
        coder = coderAddress;
        break;

      case '[]':
        if (!coder || coder.dynamic) {
          throw new Error(invalidTypeErrorMessage);
        }
        coder = coderArray(coder, -1);
        break;

      // "[0-9+]"
      default:
        if (!coder || coder.dynamic) {
          throw new Error(invalidTypeErrorMessage);
        }
        var defaultSize = parseInt(part[6]); // eslint-disable-line
        coder = coderArray(coder, defaultSize);
    }
  }

  if (!coder) {
    throw new Error(invalidTypeErrorMessage);
  }
  return coder;
}

module.exports = {
  BN: BN,
  bnToBuffer: bnToBuffer,
  isHexString: isHexString,
  hexOrBuffer: hexOrBuffer,
  hexlify: hexlify,
  stripZeros: stripZeros,

  keccak256: keccak256,

  getKeys: getKeys,
  numberToBN: numberToBN,
  coderNumber: coderNumber,
  uint256Coder: uint256Coder,
  coderBoolean: coderBoolean,
  coderFixedBytes: coderFixedBytes,
  coderAddress: coderAddress,
  coderDynamicBytes: coderDynamicBytes,
  coderString: coderString,
  coderArray: coderArray,
  paramTypePart: paramTypePart,
  getParamCoder: getParamCoder
};
}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"ethjs-abi",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/eth-token-tracker/node_modules/ethjs/node_modules/ethjs-contract/node_modules/ethjs-abi/lib/utils/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/utils.js", {"../../../../../shared/modules/conversion.utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/conversion.utils.js","lodash":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/lodash.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/utils.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderFeeRange = void 0;
exports.roundToDecimalPlacesRemovingExtraZeroes = roundToDecimalPlacesRemovingExtraZeroes;

var _lodash = require("lodash");

var _conversion = require("../../../../../shared/modules/conversion.utils");

function roundToDecimalPlacesRemovingExtraZeroes(numberish, numberOfDecimalPlaces) {
  if (numberish) {
    return _conversion.toBigNumber.dec(_conversion.toBigNumber.dec(numberish).toFixed(numberOfDecimalPlaces));
  }

  return null;
}

const renderFeeRange = feeRange => {
  if (feeRange) {
    const formattedRange = (0, _lodash.uniq)(feeRange.map(fee => roundToDecimalPlacesRemovingExtraZeroes(fee, 2))).join(' - ');
    return `${formattedRange} GWEI`;
  }

  return null;
};

exports.renderFeeRange = renderFeeRange;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-inputs/utils.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-input-subtext/index.js", {"./advanced-gas-fee-input-subtext":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-input-subtext/advanced-gas-fee-input-subtext.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-input-subtext/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _advancedGasFeeInputSubtext.default;
  }
});

var _advancedGasFeeInputSubtext = _interopRequireDefault(require("./advanced-gas-fee-input-subtext"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-input-subtext/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/send-row-wrapper.component.js", {"./send-row-error-message":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/send-row-error-message/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/send-row-wrapper.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _sendRowErrorMessage = _interopRequireDefault(require("./send-row-error-message"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SendRowWrapper extends _react.Component {
  renderAmountFormRow() {
    const {
      children,
      errorType = '',
      label,
      showError = false
    } = this.props;
    const formField = Array.isArray(children) ? children[1] || children[0] : children;
    const customLabelContent = children.length > 1 ? children[0] : null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__form-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__form-label"
    }, label, customLabelContent), /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__form-field-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__form-field"
    }, formField), /*#__PURE__*/_react.default.createElement("div", null, showError ? /*#__PURE__*/_react.default.createElement(_sendRowErrorMessage.default, {
      errorType: errorType
    }) : null)));
  }

  renderFormRow() {
    const {
      children,
      errorType = '',
      label,
      showError = false
    } = this.props;
    const formField = Array.isArray(children) ? children[1] || children[0] : children;
    const customLabelContent = (Array.isArray(children) && children.length) > 1 ? children[0] : null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__form-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__form-label"
    }, label, showError ? /*#__PURE__*/_react.default.createElement(_sendRowErrorMessage.default, {
      errorType: errorType
    }) : null, customLabelContent), /*#__PURE__*/_react.default.createElement("div", {
      className: "send-v2__form-field"
    }, formField));
  }

  render() {
    const {
      errorType = ''
    } = this.props;
    return errorType === 'amount' ? this.renderAmountFormRow() : this.renderFormRow();
  }

}

exports.default = SendRowWrapper;
(0, _defineProperty2.default)(SendRowWrapper, "propTypes", {
  children: _propTypes.default.node,
  errorType: _propTypes.default.string,
  label: _propTypes.default.string,
  showError: _propTypes.default.bool
});
(0, _defineProperty2.default)(SendRowWrapper, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/send-row-wrapper.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/amount-max-button/amount-max-button.js", {"../../../../../ducks/send":"/home/clarisco/Desktop/metamask-extension-develop/ui/ducks/send/index.js","../../../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../../../hooks/useMetricEvent":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useMetricEvent.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/amount-max-button/amount-max-button.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AmountMaxButton;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactRedux = require("react-redux");

var _send = require("../../../../../ducks/send");

var _useI18nContext = require("../../../../../hooks/useI18nContext");

var _useMetricEvent = require("../../../../../hooks/useMetricEvent");

function AmountMaxButton() {
  const isDraftTransactionInvalid = (0, _reactRedux.useSelector)(_send.isSendFormInvalid);
  const maxModeOn = (0, _reactRedux.useSelector)(_send.getSendMaxModeState);
  const dispatch = (0, _reactRedux.useDispatch)();
  const trackClickedMax = (0, _useMetricEvent.useMetricEvent)({
    eventOpts: {
      category: 'Transactions',
      action: 'Edit Screen',
      name: 'Clicked "Amount Max"'
    }
  });
  const t = (0, _useI18nContext.useI18nContext)();

  const onMaxClick = () => {
    trackClickedMax();
    dispatch((0, _send.toggleSendMaxMode)());
  };

  const disabled = isDraftTransactionInvalid;
  return /*#__PURE__*/_react.default.createElement("button", {
    className: "send-v2__amount-max",
    disabled: disabled,
    onClick: onMaxClick
  }, /*#__PURE__*/_react.default.createElement("input", {
    type: "checkbox",
    checked: maxModeOn,
    readOnly: true
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('send-v2__amount-max__button', {
      'send-v2__amount-max__button__disabled': disabled
    })
  }, t('max')));
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-amount-row/amount-max-button/amount-max-button.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/user-preferenced-token-input.container.js", {"../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","./user-preferenced-token-input.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/user-preferenced-token-input.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/user-preferenced-token-input.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _selectors = require("../../../selectors");

var _userPreferencedTokenInput = _interopRequireDefault(require("./user-preferenced-token-input.component"));

const mapStateToProps = state => {
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  return {
    useNativeCurrencyAsPrimaryCurrency
  };
};

const UserPreferencedTokenInputContainer = (0, _reactRedux.connect)(mapStateToProps)(_userPreferencedTokenInput.default);
UserPreferencedTokenInputContainer.propTypes = {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired
};
var _default = UserPreferencedTokenInputContainer;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/user-preferenced-token-input.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/user-preferenced-currency-input.container.js", {"../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","./user-preferenced-currency-input.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/user-preferenced-currency-input.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/user-preferenced-currency-input.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _userPreferencedCurrencyInput = _interopRequireDefault(require("./user-preferenced-currency-input.component"));

const mapStateToProps = state => {
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  return {
    useNativeCurrencyAsPrimaryCurrency
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_userPreferencedCurrencyInput.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/user-preferenced-currency-input.container.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-summary/confirm-page-container-summary.component.js", {"../../../../../contexts/gasFee":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/gasFee.js","../../../../ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-summary/confirm-page-container-summary.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _identicon = _interopRequireDefault(require("../../../../ui/identicon"));

var _gasFee = require("../../../../../contexts/gasFee");

/* eslint-disable no-negated-condition */
const ConfirmPageContainerSummary = props => {
  const {
    action,
    title,
    titleComponent,
    subtitleComponent,
    hideSubtitle,
    className,
    identiconAddress,
    nonce,
    origin,
    hideTitle
  } = props;
  const {
    supportsEIP1559V2
  } = (0, _gasFee.useGasFeeContext)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('confirm-page-container-summary', className)
  }, origin === 'metamask' ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-summary__origin"
  }, origin), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-summary__action-row"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-summary__action"
  }, action), nonce && /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-summary__nonce"
  }, `#${nonce}`)), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-summary__title"
  }, identiconAddress && /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "confirm-page-container-summary__identicon",
    diameter: 36,
    address: identiconAddress
  }), !hideTitle ? /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-summary__title-text"
  }, titleComponent || title) : null), !hideSubtitle && !supportsEIP1559V2 && /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-summary__subtitle"
  }, subtitleComponent));
};

ConfirmPageContainerSummary.propTypes = {
  action: _propTypes.default.string,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  titleComponent: _propTypes.default.node,
  subtitleComponent: _propTypes.default.node,
  hideSubtitle: _propTypes.default.bool,
  className: _propTypes.default.string,
  identiconAddress: _propTypes.default.string,
  nonce: _propTypes.default.string,
  origin: _propTypes.default.string.isRequired,
  hideTitle: _propTypes.default.boolean
};
var _default = ConfirmPageContainerSummary;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-summary/confirm-page-container-summary.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-warning/confirm-page-container-warning.component.js", {"@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-warning/confirm-page-container-warning.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

const ConfirmPageContainerWarning = props => {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-warning"
  }, /*#__PURE__*/_react.default.createElement("img", {
    className: "confirm-page-container-warning__icon",
    src: "./images/alert.svg",
    alt: ""
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-page-container-warning__warning"
  }, props.warning));
};

ConfirmPageContainerWarning.propTypes = {
  warning: _propTypes.default.string
};
var _default = ConfirmPageContainerWarning;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/confirm-page-container/confirm-page-container-content/confirm-page-container-warning/confirm-page-container-warning.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/chromeDark.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/chromeDark.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var theme = {
  BASE_FONT_FAMILY: 'Menlo, monospace',
  BASE_FONT_SIZE: '11px',
  BASE_LINE_HEIGHT: '14px',

  BASE_BACKGROUND_COLOR: 'rgb(36, 36, 36)',
  BASE_COLOR: 'rgb(213, 213, 213)',

  OBJECT_NAME_COLOR: 'rgb(227, 110, 236)',
  OBJECT_VALUE_NULL_COLOR: 'rgb(127, 127, 127)',
  OBJECT_VALUE_UNDEFINED_COLOR: 'rgb(127, 127, 127)',
  OBJECT_VALUE_REGEXP_COLOR: 'rgb(233, 63, 59)',
  OBJECT_VALUE_STRING_COLOR: 'rgb(233, 63, 59)',
  OBJECT_VALUE_SYMBOL_COLOR: 'rgb(233, 63, 59)',
  OBJECT_VALUE_NUMBER_COLOR: 'hsl(252, 100%, 75%)',
  OBJECT_VALUE_BOOLEAN_COLOR: 'hsl(252, 100%, 75%)',
  OBJECT_VALUE_FUNCTION_KEYWORD_COLOR: 'rgb(242, 85, 217)',

  HTML_TAG_COLOR: 'rgb(93, 176, 215)',
  HTML_TAGNAME_COLOR: 'rgb(93, 176, 215)',
  HTML_TAGNAME_TEXT_TRANSFORM: 'lowercase',
  HTML_ATTRIBUTE_NAME_COLOR: 'rgb(155, 187, 220)',
  HTML_ATTRIBUTE_VALUE_COLOR: 'rgb(242, 151, 102)',
  HTML_COMMENT_COLOR: 'rgb(137, 137, 137)',
  HTML_DOCTYPE_COLOR: 'rgb(192, 192, 192)',

  ARROW_COLOR: 'rgb(145, 145, 145)',
  ARROW_MARGIN_RIGHT: 3,
  ARROW_FONT_SIZE: 12,

  TREENODE_FONT_FAMILY: 'Menlo, monospace',
  TREENODE_FONT_SIZE: '11px',
  TREENODE_LINE_HEIGHT: '14px',
  TREENODE_PADDING_LEFT: 12,

  TABLE_BORDER_COLOR: 'rgb(85, 85, 85)',
  TABLE_TH_BACKGROUND_COLOR: 'rgb(44, 44, 44)',
  TABLE_TH_HOVER_COLOR: 'rgb(48, 48, 48)',
  TABLE_SORT_ICON_COLOR: 'black', //'rgb(48, 57, 66)',
  TABLE_DATA_BACKGROUND_IMAGE: 'linear-gradient(rgba(255, 255, 255, 0), rgba(255, 255, 255, 0) 50%, rgba(51, 139, 255, 0.0980392) 50%, rgba(51, 139, 255, 0.0980392))',
  TABLE_DATA_BACKGROUND_SIZE: '128px 32px'
};

exports.default = theme;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/chromeDark.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/chromeLight.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/chromeLight.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var theme = {
  BASE_FONT_FAMILY: 'Menlo, monospace',
  BASE_FONT_SIZE: '11px',
  BASE_LINE_HEIGHT: '14px',

  BASE_BACKGROUND_COLOR: 'white',
  BASE_COLOR: 'black',

  OBJECT_NAME_COLOR: 'rgb(136, 19, 145)',
  OBJECT_VALUE_NULL_COLOR: 'rgb(128, 128, 128)',
  OBJECT_VALUE_UNDEFINED_COLOR: 'rgb(128, 128, 128)',
  OBJECT_VALUE_REGEXP_COLOR: 'rgb(196, 26, 22)',
  OBJECT_VALUE_STRING_COLOR: 'rgb(196, 26, 22)',
  OBJECT_VALUE_SYMBOL_COLOR: 'rgb(196, 26, 22)',
  OBJECT_VALUE_NUMBER_COLOR: 'rgb(28, 0, 207)',
  OBJECT_VALUE_BOOLEAN_COLOR: 'rgb(28, 0, 207)',
  OBJECT_VALUE_FUNCTION_KEYWORD_COLOR: 'rgb(170, 13, 145)',

  HTML_TAG_COLOR: 'rgb(168, 148, 166)',
  HTML_TAGNAME_COLOR: 'rgb(136, 18, 128)',
  HTML_TAGNAME_TEXT_TRANSFORM: 'lowercase',
  HTML_ATTRIBUTE_NAME_COLOR: 'rgb(153, 69, 0)',
  HTML_ATTRIBUTE_VALUE_COLOR: 'rgb(26, 26, 166)',
  HTML_COMMENT_COLOR: 'rgb(35, 110, 37)',
  HTML_DOCTYPE_COLOR: 'rgb(192, 192, 192)',

  ARROW_COLOR: '#6e6e6e',
  ARROW_MARGIN_RIGHT: 3,
  ARROW_FONT_SIZE: 12,

  TREENODE_FONT_FAMILY: 'Menlo, monospace',
  TREENODE_FONT_SIZE: '11px',
  TREENODE_LINE_HEIGHT: '14px',
  TREENODE_PADDING_LEFT: 12,

  TABLE_BORDER_COLOR: '#aaa',
  TABLE_TH_BACKGROUND_COLOR: '#eee',
  TABLE_TH_HOVER_COLOR: 'hsla(0, 0%, 90%, 1)',
  TABLE_SORT_ICON_COLOR: '#6e6e6e',
  TABLE_DATA_BACKGROUND_IMAGE: 'linear-gradient(to bottom, white, white 50%, rgb(234, 243, 255) 50%, rgb(234, 243, 255))',
  TABLE_DATA_BACKGROUND_SIZE: '128px 32px'
};

exports.default = theme;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/chromeLight.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-window/index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/is-window/index.js
      return function (require, module, exports) {
'use strict';

module.exports = function (obj) {

  if (obj == null) {
    return false;
  }

  var o = Object(obj);

  return o === o.window;
};

      };
    };
  }
}, {package:"is-window",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-window/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-object/index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/is-object/index.js
      return function (require, module, exports) {
"use strict";

module.exports = function isObject(x) {
	return typeof x === "object" && x !== null;
};

      };
    };
  }
}, {package:"is-object",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/is-object/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/TreeView.js", {"./TreeNode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/TreeNode.js","./pathUtils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/pathUtils.js","babel-runtime/helpers/classCallCheck":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/classCallCheck.js","babel-runtime/helpers/createClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/createClass.js","babel-runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/defineProperty.js","babel-runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js","babel-runtime/helpers/inherits":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/inherits.js","babel-runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/objectWithoutProperties.js","babel-runtime/helpers/possibleConstructorReturn":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/possibleConstructorReturn.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/TreeView.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TreeNode = require('./TreeNode');

var _TreeNode2 = _interopRequireDefault(_TreeNode);

var _pathUtils = require('./pathUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reducer = function reducer(state, action) {
  switch (action.type) {
    case 'TOGGLE_EXPAND':
      {
        var path = action.path;
        var expandedPaths = state.expandedPaths;
        var expanded = !!expandedPaths[path];

        return Object.assign({}, state, {
          expandedPaths: Object.assign({}, state.expandedPaths, (0, _defineProperty3.default)({}, path, !expanded))
        });
      }
    default:
      return state;
  }
};

var ConnectedTreeNode = function (_Component) {
  (0, _inherits3.default)(ConnectedTreeNode, _Component);

  function ConnectedTreeNode(props, context) {
    (0, _classCallCheck3.default)(this, ConnectedTreeNode);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ConnectedTreeNode.__proto__ || Object.getPrototypeOf(ConnectedTreeNode)).call(this, props));

    _this.state = context.store.storeState;
    return _this;
  }

  (0, _createClass3.default)(ConnectedTreeNode, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !!nextState.expandedPaths[nextProps.path] !== !!this.state.expandedPaths[this.props.path] || nextProps.data !== this.props.data || nextProps.name !== this.props.name;
    }
  }, {
    key: 'handleClick',
    value: function handleClick(path) {
      this.context.store.storeState = reducer(this.context.store.storeState, {
        type: 'TOGGLE_EXPAND',
        path: path
      });
      this.setState(this.context.store.storeState);
    }
  }, {
    key: 'renderChildNodes',
    value: function renderChildNodes(parentData, parentPath) {
      var dataIterator = this.props.dataIterator;
      var depth = this.props.depth;
      var nodeRenderer = this.props.nodeRenderer;


      var childNodes = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = dataIterator(parentData)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref2 = _step.value;
          var name = _ref2.name,
              data = _ref2.data,
              props = (0, _objectWithoutProperties3.default)(_ref2, ['name', 'data']);

          var key = name;
          var path = parentPath + '.' + key;
          childNodes.push(_react2.default.createElement(ConnectedTreeNode, (0, _extends3.default)({
            name: name,
            data: data,
            depth: depth + 1,
            path: path,
            key: key,
            dataIterator: dataIterator,
            nodeRenderer: nodeRenderer
          }, props)) // props for nodeRenderer
          );
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return childNodes;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          data = _props.data,
          dataIterator = _props.dataIterator,
          path = _props.path,
          depth = _props.depth;


      var nodeHasChildNodes = (0, _pathUtils.hasChildNodes)(data, dataIterator);
      var expandedPaths = this.state.expandedPaths;

      var expanded = !!expandedPaths[path];

      var nodeRenderer = this.props.nodeRenderer;


      return _react2.default.createElement(
        _TreeNode2.default,
        (0, _extends3.default)({
          expanded: expanded,
          onClick: nodeHasChildNodes ? this.handleClick.bind(this, path) : function () {}
          // show arrow anyway even if not expanded and not rendering children
          , shouldShowArrow: nodeHasChildNodes
          // show placeholder only for non root nodes
          , shouldShowPlaceholder: depth > 0
          // Render a node from name and data (or possibly other props like isNonenumerable)
          , nodeRenderer: nodeRenderer
        }, this.props),
        // only render if the node is expanded
        expanded ? this.renderChildNodes(data, path) : undefined
      );
    }
  }]);
  return ConnectedTreeNode;
}(_react.Component);

ConnectedTreeNode.propTypes = {
  name: _propTypes2.default.string,
  data: _propTypes2.default.any,
  dataIterator: _propTypes2.default.func,

  depth: _propTypes2.default.number,
  expanded: _propTypes2.default.bool,

  nodeRenderer: _propTypes2.default.func
};

ConnectedTreeNode.contextTypes = {
  store: _propTypes2.default.any
};

var TreeView = function (_Component2) {
  (0, _inherits3.default)(TreeView, _Component2);

  function TreeView(props) {
    (0, _classCallCheck3.default)(this, TreeView);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (TreeView.__proto__ || Object.getPrototypeOf(TreeView)).call(this, props));

    _this2.store = {
      storeState: {
        expandedPaths: (0, _pathUtils.getExpandedPaths)(props.data, props.dataIterator, props.expandPaths, props.expandLevel)
      }
    };
    return _this2;
  }

  (0, _createClass3.default)(TreeView, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.store = {
        storeState: {
          expandedPaths: (0, _pathUtils.getExpandedPaths)(nextProps.data, nextProps.dataIterator, nextProps.expandPaths, nextProps.expandLevel, this.store.storeState.expandedPaths)
        }
      };
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        store: this.store
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          name = _props2.name,
          data = _props2.data,
          dataIterator = _props2.dataIterator;
      var nodeRenderer = this.props.nodeRenderer;


      var rootPath = _pathUtils.DEFAULT_ROOT_PATH;

      return _react2.default.createElement(ConnectedTreeNode, {
        name: name,
        data: data,
        dataIterator: dataIterator,
        depth: 0,
        path: rootPath,
        nodeRenderer: nodeRenderer
      });
    }
  }]);
  return TreeView;
}(_react.Component);

TreeView.defaultProps = {
  expandLevel: 0,
  expandPaths: []
};
TreeView.childContextTypes = {
  store: _propTypes2.default.any
};


TreeView.propTypes = {
  name: _propTypes2.default.string,
  data: _propTypes2.default.any,
  dataIterator: _propTypes2.default.func,

  nodeRenderer: _propTypes2.default.func
};

TreeView.defaultProps = {
  name: undefined
};

exports.default = TreeView;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/TreeView.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/ThemeProvider.js", {"babel-runtime/helpers/classCallCheck":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/classCallCheck.js","babel-runtime/helpers/createClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/createClass.js","babel-runtime/helpers/inherits":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/inherits.js","babel-runtime/helpers/possibleConstructorReturn":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/possibleConstructorReturn.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/ThemeProvider.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ThemeProvider = function (_Component) {
  (0, _inherits3.default)(ThemeProvider, _Component);

  function ThemeProvider() {
    (0, _classCallCheck3.default)(this, ThemeProvider);
    return (0, _possibleConstructorReturn3.default)(this, (ThemeProvider.__proto__ || Object.getPrototypeOf(ThemeProvider)).apply(this, arguments));
  }

  (0, _createClass3.default)(ThemeProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var theme = this.props.theme;

      return {
        // createStyles: createStyles
        theme: theme
      };
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);
  return ThemeProvider;
}(_react.Component);

ThemeProvider.childContextTypes = {
  theme: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
};

exports.default = ThemeProvider;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/ThemeProvider.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/shouldInline.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/shouldInline.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var TEXT_NODE_MAX_INLINE_CHARS = 80;

var shouldInline = function shouldInline(data) {
  return data.childNodes.length === 0 || data.childNodes.length === 1 && data.childNodes[0].nodeType === Node.TEXT_NODE && data.textContent.length < TEXT_NODE_MAX_INLINE_CHARS;
};

exports.default = shouldInline;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/shouldInline.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/DOMNodePreview.js", {"../styles/createStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js","./shouldInline":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/shouldInline.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/DOMNodePreview.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createStyles = require('../styles/createStyles');

var _createStyles2 = _interopRequireDefault(_createStyles);

var _shouldInline = require('./shouldInline');

var _shouldInline2 = _interopRequireDefault(_shouldInline);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OpenTag = function OpenTag(_ref) {
  var tagName = _ref.tagName,
      attributes = _ref.attributes,
      styles = _ref.styles;

  return _react2.default.createElement(
    'span',
    { style: styles.base },
    '<',
    _react2.default.createElement(
      'span',
      { style: styles.tagName },
      tagName
    ),
    function () {
      if (attributes) {
        var attributeNodes = [];
        for (var i = 0; i < attributes.length; i++) {
          var attribute = attributes[i];
          attributeNodes.push(_react2.default.createElement(
            'span',
            { key: i },
            ' ',
            _react2.default.createElement(
              'span',
              { style: styles.htmlAttributeName },
              attribute.name
            ),
            '="',
            _react2.default.createElement(
              'span',
              { style: styles.htmlAttributeValue },
              attribute.value
            ),
            '"'
          ));
        }
        return attributeNodes;
      }
    }(),
    '>'
  );
};

// isChildNode style={{ marginLeft: -12 /* hack: offset placeholder */ }}
var CloseTag = function CloseTag(_ref2) {
  var tagName = _ref2.tagName,
      _ref2$isChildNode = _ref2.isChildNode,
      isChildNode = _ref2$isChildNode === undefined ? false : _ref2$isChildNode,
      styles = _ref2.styles;
  return _react2.default.createElement(
    'span',
    { style: Object.assign({}, styles.base, isChildNode && styles.offsetLeft) },
    '</',
    _react2.default.createElement(
      'span',
      { style: styles.tagName },
      tagName
    ),
    '>'
  );
};

var nameByNodeType = {
  1: 'ELEMENT_NODE',
  3: 'TEXT_NODE',
  7: 'PROCESSING_INSTRUCTION_NODE',
  8: 'COMMENT_NODE',
  9: 'DOCUMENT_NODE',
  10: 'DOCUMENT_TYPE_NODE', // http://stackoverflow.com/questions/6088972/get-doctype-of-an-html-as-string-with-javascript
  11: 'DOCUMENT_FRAGMENT_NODE'
};

var DOMNodePreview = function DOMNodePreview(_ref3, _ref4) {
  var isCloseTag = _ref3.isCloseTag,
      data = _ref3.data,
      expanded = _ref3.expanded;
  var theme = _ref4.theme;

  var styles = (0, _createStyles2.default)('DOMNodePreview', theme);

  if (isCloseTag) {
    return _react2.default.createElement(CloseTag, { styles: styles.htmlCloseTag, isChildNode: true, tagName: data.tagName });
  }

  switch (data.nodeType) {
    case Node.ELEMENT_NODE:
      return _react2.default.createElement(
        'span',
        null,
        _react2.default.createElement(OpenTag, {
          tagName: data.tagName,
          attributes: data.attributes,
          styles: styles.htmlOpenTag
        }),
        (0, _shouldInline2.default)(data) ? data.textContent : !expanded && '…',
        !expanded && _react2.default.createElement(CloseTag, { tagName: data.tagName, styles: styles.htmlCloseTag })
      );
    case Node.TEXT_NODE:
      return _react2.default.createElement(
        'span',
        null,
        data.textContent
      );
    case Node.CDATA_SECTION_NODE:
      return _react2.default.createElement(
        'span',
        null,
        '<![CDATA[' + data.textContent + ']]>'
      );
    case Node.COMMENT_NODE:
      return _react2.default.createElement(
        'span',
        { style: styles.htmlComment },
        '< ! --',
        data.textContent,
        '-- >'
      );
    case Node.PROCESSING_INSTRUCTION_NODE:
      return _react2.default.createElement(
        'span',
        null,
        data.nodeName
      );
    case Node.DOCUMENT_TYPE_NODE:
      return _react2.default.createElement(
        'span',
        { style: styles.htmlDoctype },
        '<!DOCTYPE ',
        data.name,
        data.publicId ? ' PUBLIC "' + data.publicId + '"' : '',
        !data.publicId && data.systemId ? ' SYSTEM' : '',
        data.systemId ? ' "' + data.systemId + '"' : '',
        '>'
      );
    case Node.DOCUMENT_NODE:
      return _react2.default.createElement(
        'span',
        null,
        data.nodeName
      );
    case Node.DOCUMENT_FRAGMENT_NODE:
      return _react2.default.createElement(
        'span',
        null,
        data.nodeName
      );
    default:
      return _react2.default.createElement(
        'span',
        null,
        nameByNodeType[data.nodeType]
      );
  }
};

DOMNodePreview.propTypes = {
  /** If true, just render a close tag */
  isCloseTag: _propTypes2.default.bool,
  /**  */
  name: _propTypes2.default.string,
  /** The DOM Node */
  data: _propTypes2.default.object.isRequired,
  /** Whether the DOM node has been expanded. */
  expanded: _propTypes2.default.bool.isRequired
};

DOMNodePreview.contextTypes = {
  theme: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
};

exports.default = DOMNodePreview;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/dom-inspector/DOMNodePreview.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/classCallCheck.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/classCallCheck.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/classCallCheck.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/createClass.js", {"../core-js/object/define-property":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/define-property.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/createClass.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/createClass.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/possibleConstructorReturn.js", {"../helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/possibleConstructorReturn.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/possibleConstructorReturn.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/inherits.js", {"../core-js/object/create":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/create.js","../core-js/object/set-prototype-of":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/set-prototype-of.js","../helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/inherits.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

var _setPrototypeOf = require("../core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require("../core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/inherits.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js", {"./base":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/base.js","./themes":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/themes/index.js","babel-runtime/helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _themes = require('./themes');

var themes = _interopRequireWildcard(_themes);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var styles = Object.keys(themes).reduce(function (styles, themeName) {
  styles[themeName] = (0, _base2.default)(themes[themeName]);
  return styles;
}, {});

var createStyles = function createStyles(key, theme) {
  // console.debug(styles, theme, styles[theme])
  if (typeof theme === 'string') {
    return styles[theme][key];
  } else if ((typeof theme === 'undefined' ? 'undefined' : (0, _typeof3.default)(theme)) === 'object') {
    return (0, _base2.default)(theme)[key];
  }
  // Default styles
  return styles['chromeLight'][key];
};

exports.default = createStyles;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js", {"../core-js/symbol":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/symbol.js","../core-js/symbol/iterator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/symbol/iterator.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectPreview.js", {"../object/ObjectName":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectName.js","../object/ObjectValue":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectValue.js","babel-runtime/helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectPreview.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ObjectValue = require('../object/ObjectValue');

var _ObjectValue2 = _interopRequireDefault(_ObjectValue);

var _ObjectName = require('../object/ObjectName');

var _ObjectName2 = _interopRequireDefault(_ObjectName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* NOTE: Chrome console.log is italic */
var styles = {
  preview: {
    fontStyle: 'italic'
  }
};

/* intersperse arr with separator */
function intersperse(arr, sep) {
  if (arr.length === 0) {
    return [];
  }

  return arr.slice(1).reduce(function (xs, x) {
    return xs.concat([sep, x]);
  }, [arr[0]]);
}

/**
 * A preview of the object
 */
var ObjectPreview = function ObjectPreview(_ref) {
  var data = _ref.data,
      maxProperties = _ref.maxProperties;

  var object = data;

  if ((typeof object === 'undefined' ? 'undefined' : (0, _typeof3.default)(object)) !== 'object' || object === null || object instanceof Date || object instanceof RegExp) {
    return _react2.default.createElement(_ObjectValue2.default, { object: object });
  }

  if (Array.isArray(object)) {
    return _react2.default.createElement(
      'span',
      { style: styles.preview },
      '[',
      intersperse(object.map(function (element, index) {
        return _react2.default.createElement(_ObjectValue2.default, { key: index, object: element });
      }), ', '),
      ']'
    );
  } else {
    var propertyNodes = [];
    for (var propertyName in object) {
      var propertyValue = object[propertyName];
      if (object.hasOwnProperty(propertyName)) {
        var ellipsis = void 0;
        if (propertyNodes.length === maxProperties - 1 && Object.keys(object).length > maxProperties) {
          ellipsis = _react2.default.createElement(
            'span',
            { key: 'ellipsis' },
            '\u2026'
          );
        }
        propertyNodes.push(_react2.default.createElement(
          'span',
          { key: propertyName },
          _react2.default.createElement(_ObjectName2.default, { name: propertyName || '""' }),
          ':\xA0',
          _react2.default.createElement(_ObjectValue2.default, { object: propertyValue }),
          ellipsis
        ));
        if (ellipsis) break;
      }
    }

    return _react2.default.createElement(
      'span',
      { style: styles.preview },
      object.constructor.name + ' {',
      intersperse(propertyNodes, ', '),
      '}'
    );
  }
};

ObjectPreview.propTypes = {
  /**
   * max number of properties shown in the property view
   */
  maxProperties: _propTypes2.default.number
};
ObjectPreview.defaultProps = {
  maxProperties: 5
};

exports.default = ObjectPreview;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object-inspector/ObjectPreview.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/slicedToArray.js", {"../core-js/get-iterator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/get-iterator.js","../core-js/is-iterable":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/is-iterable.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/slicedToArray.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

var _isIterable2 = require("../core-js/is-iterable");

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = require("../core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/slicedToArray.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/DataContainer.js", {"../object/ObjectValue":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/object/ObjectValue.js","../styles/createStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js","babel-runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js","babel-runtime/helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/DataContainer.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createStyles = require('../styles/createStyles');

var _createStyles2 = _interopRequireDefault(_createStyles);

var _ObjectValue = require('../object/ObjectValue');

var _ObjectValue2 = _interopRequireDefault(_ObjectValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DataContainer = function DataContainer(_ref, _ref2) {
  var rows = _ref.rows,
      columns = _ref.columns,
      rowsData = _ref.rowsData;
  var theme = _ref2.theme;

  var styles = (0, _createStyles2.default)('TableInspectorDataContainer', theme);
  var borderStyles = (0, _createStyles2.default)('TableInspectorLeftBorder', theme);

  return _react2.default.createElement(
    'div',
    { style: styles.div },
    _react2.default.createElement(
      'table',
      { style: styles.table },
      _react2.default.createElement('colgroup', null),
      _react2.default.createElement(
        'tbody',
        null,
        rows.map(function (row, i) {
          return _react2.default.createElement(
            'tr',
            { key: row, style: styles.tr },
            _react2.default.createElement(
              'td',
              { style: (0, _extends3.default)({}, styles.td, borderStyles.none) },
              row
            ),
            columns.map(function (column) {
              var rowData = rowsData[i];
              // rowData could be
              //  object -> index by key
              //    array -> index by array index
              //    null -> pass
              //  boolean -> pass
              //  string -> pass (hasOwnProperty returns true for [0..len-1])
              //  number -> pass
              //  function -> pass
              //  symbol
              //  undefined -> pass
              if ((typeof rowData === 'undefined' ? 'undefined' : (0, _typeof3.default)(rowData)) === 'object' && rowData !== null && rowData.hasOwnProperty(column)) {
                return _react2.default.createElement(
                  'td',
                  { key: column, style: (0, _extends3.default)({}, styles.td, borderStyles.solid) },
                  _react2.default.createElement(_ObjectValue2.default, { object: rowData[column] })
                );
              } else {
                return _react2.default.createElement('td', { key: column, style: (0, _extends3.default)({}, styles.td, borderStyles.solid) });
              }
            })
          );
        })
      )
    )
  );
};

DataContainer.contextTypes = {
  theme: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
};

exports.default = DataContainer;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/DataContainer.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/HeaderContainer.js", {"../styles/createStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js","./TH":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/TH.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/HeaderContainer.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createStyles = require('../styles/createStyles');

var _createStyles2 = _interopRequireDefault(_createStyles);

var _TH = require('./TH');

var _TH2 = _interopRequireDefault(_TH);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HeaderContainer = function HeaderContainer(_ref, _ref2) {
  var indexColumnText = _ref.indexColumnText,
      columns = _ref.columns,
      sorted = _ref.sorted,
      sortIndexColumn = _ref.sortIndexColumn,
      sortColumn = _ref.sortColumn,
      sortAscending = _ref.sortAscending,
      onTHClick = _ref.onTHClick,
      onIndexTHClick = _ref.onIndexTHClick;
  var theme = _ref2.theme;

  var styles = (0, _createStyles2.default)('TableInspectorHeaderContainer', theme);
  var borderStyles = (0, _createStyles2.default)('TableInspectorLeftBorder', theme);
  return _react2.default.createElement(
    'div',
    { style: styles.base },
    _react2.default.createElement(
      'table',
      { style: styles.table },
      _react2.default.createElement(
        'tbody',
        null,
        _react2.default.createElement(
          'tr',
          null,
          _react2.default.createElement(
            _TH2.default,
            {
              borderStyle: borderStyles.none,
              sorted: sorted && sortIndexColumn,
              sortAscending: sortAscending,
              onClick: onIndexTHClick
            },
            indexColumnText
          ),
          columns.map(function (column) {
            return _react2.default.createElement(
              _TH2.default,
              {
                borderStyle: borderStyles.solid,
                key: column,
                sorted: sorted && sortColumn === column,
                sortAscending: sortAscending,
                onClick: onTHClick.bind(undefined, column)
              },
              column
            );
          })
        )
      )
    )
  );
};

HeaderContainer.defaultProps = {
  indexColumnText: '(index)',
  columns: []
};

HeaderContainer.contextTypes = {
  theme: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
};

exports.default = HeaderContainer;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/HeaderContainer.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/getHeaders.js", {"babel-runtime/helpers/toConsumableArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/toConsumableArray.js","babel-runtime/helpers/typeof":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/typeof.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/getHeaders.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

exports.default = getHeaders;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Polyfill for running tests
 * `includes` is an ES2016 feature
 */
if (!Array.prototype.includes) {
  Array.prototype.includes = function (searchElement /*, fromIndex*/) {
    var O = Object(this);
    var len = parseInt(O.length) || 0;
    if (len === 0) {
      return false;
    }
    var n = parseInt(arguments[1]) || 0;
    var k;
    if (n >= 0) {
      k = n;
    } else {
      k = len + n;
      if (k < 0) {
        k = 0;
      }
    }
    var currentElement;
    while (k < len) {
      currentElement = O[k];
      if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
        // NaN !== NaN
        return true;
      }
      k++;
    }
    return false;
  };
}

function getHeaders(data) {
  if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object') {
    var rowHeaders = void 0;
    // is an array
    if (Array.isArray(data)) {
      var nRows = data.length;
      rowHeaders = [].concat((0, _toConsumableArray3.default)(Array(nRows).keys()));
    } else if (data !== null) {
      // is an object
      // keys are row indexes
      rowHeaders = Object.keys(data);
    }

    // Time: O(nRows * nCols)
    var colHeaders = rowHeaders.reduce(function (colHeaders, rowHeader) {
      var row = data[rowHeader];
      if ((typeof row === 'undefined' ? 'undefined' : (0, _typeof3.default)(row)) === 'object' && row !== null) {
        /* O(nCols) Could optimize `includes` here */
        var cols = Object.keys(row);
        cols.reduce(function (xs, x) {
          if (!xs.includes(x)) {
            /* xs is the colHeaders to be filled by searching the row's indexes */
            xs.push(x);
          }
          return xs;
        }, colHeaders);
      }
      return colHeaders;
    }, []);
    return {
      rowHeaders: rowHeaders,
      colHeaders: colHeaders
    };
  }
  return undefined;
}
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/getHeaders.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/optimism/buildUnserializedTransaction.js", {"@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@ethereumjs/common":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@ethereumjs/common/dist.browser/index.js","@ethereumjs/tx":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@ethereumjs/tx/dist.browser/index.js","ethereumjs-util":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethereumjs-util/dist.browser/index.js","lodash":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/lodash.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/optimism/buildUnserializedTransaction.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = buildUnserializedTransaction;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _ethereumjsUtil = require("ethereumjs-util");

var _common = _interopRequireWildcard(require("@ethereumjs/common"));

var _tx = require("@ethereumjs/tx");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function buildTxParams(txMeta) {
  return _objectSpread(_objectSpread({}, (0, _lodash.omit)(txMeta.txParams, 'gas')), {}, {
    gasLimit: txMeta.txParams.gas
  });
}

function buildTransactionCommon(txMeta) {
  // This produces a transaction whose information does not completely match an
  // Optimism transaction — for instance, DEFAULT_CHAIN is still 'mainnet' and
  // genesis points to the mainnet genesis, not the Optimism genesis — but
  // considering that all we want to do is serialize a transaction, this works
  // fine for our use case.
  return _common.default.forCustomChain(_common.Chain.Mainnet, {
    chainId: new _ethereumjsUtil.BN((0, _ethereumjsUtil.stripHexPrefix)(txMeta.chainId), 16),
    networkId: new _ethereumjsUtil.BN(txMeta.metamaskNetworkId, 10),
    // Optimism only supports type-0 transactions; it does not support any of
    // the newer EIPs since EIP-155. Source:
    // <https://github.com/ethereum-optimism/optimism/blob/develop/specs/l2geth/transaction-types.md>
    defaultHardfork: _common.Hardfork.SpuriousDragon
  });
}

function buildUnserializedTransaction(txMeta) {
  const txParams = buildTxParams(txMeta);
  const common = buildTransactionCommon(txMeta);
  return _tx.TransactionFactory.fromTxData(txParams, {
    common
  });
}

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/optimism/buildUnserializedTransaction.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/index.js", {"./connect-contracts":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/connect-contracts.js","./contract-defs":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/contract-defs.js","./predeploys":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/predeploys.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/index.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./contract-defs"), exports);
__exportStar(require("./predeploys"), exports);
__exportStar(require("./connect-contracts"), exports);
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@eth-optimism/contracts",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/index.js", {"./sender-to-recipient.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/sender-to-recipient.component.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _senderToRecipient.default;
  }
});

var _senderToRecipient = _interopRequireDefault(require("./sender-to-recipient.component"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/decoding/address/address.component.js", {"../../../../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../../../ui/identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../../../../modals/nickname-popovers":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/nickname-popovers/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","copy-to-clipboard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/copy-to-clipboard/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/decoding/address/address.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _util = require("../../../../../../helpers/utils/util");

var _identicon = _interopRequireDefault(require("../../../../../ui/identicon"));

var _useI18nContext = require("../../../../../../hooks/useI18nContext");

var _selectors = require("../../../../../../selectors");

var _nicknamePopovers = _interopRequireDefault(require("../../../../modals/nickname-popovers"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Address = ({
  checksummedRecipientAddress,
  onRecipientClick,
  addressOnly,
  recipientEns,
  recipientName
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [showNicknamePopovers, setShowNicknamePopovers] = (0, _react.useState)(false);
  const addressBook = (0, _reactRedux.useSelector)(_selectors.getAddressBook);
  const addressBookEntryObject = addressBook.find(entry => entry.address === checksummedRecipientAddress);
  const recipientNickname = addressBookEntryObject === null || addressBookEntryObject === void 0 ? void 0 : addressBookEntryObject.name;
  const recipientToRender = addressOnly ? recipientNickname || recipientEns || (0, _util.shortenAddress)(checksummedRecipientAddress) : recipientNickname || recipientEns || recipientName || t('newContract');
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "tx-insight tx-insight-component tx-insight-component-address",
    onClick: () => {
      (0, _copyToClipboard.default)(checksummedRecipientAddress);

      if (onRecipientClick) {
        onRecipientClick();
      }
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "tx-insight-component-address__sender-icon"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: checksummedRecipientAddress,
    diameter: 18
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "address__name",
    onClick: () => setShowNicknamePopovers(true)
  }, recipientToRender), showNicknamePopovers ? /*#__PURE__*/_react.default.createElement(_nicknamePopovers.default, {
    onClose: () => setShowNicknamePopovers(false),
    address: checksummedRecipientAddress
  }) : null);
};

Address.propTypes = {
  checksummedRecipientAddress: _propTypes.default.string,
  recipientName: _propTypes.default.string,
  recipientEns: _propTypes.default.string,
  addressOnly: _propTypes.default.bool,
  onRecipientClick: _propTypes.default.func
};
var _default = Address;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/decoding/address/address.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/accreditation/accreditation.component.js", {"../../../../../../contexts/i18n":"/home/clarisco/Desktop/metamask-extension-develop/ui/contexts/i18n.js","../../../../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../../../ui/button":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/button/index.js","../../../../../ui/typography":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/typography/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@metamask/etherscan-link":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@metamask/etherscan-link/dist/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/accreditation/accreditation.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _etherscanLink = require("@metamask/etherscan-link");

var _selectors = require("../../../../../../selectors");

var _i18n = require("../../../../../../contexts/i18n");

var _designSystem = require("../../../../../../helpers/constants/design-system");

var _button = _interopRequireDefault(require("../../../../../ui/button"));

var _typography = _interopRequireDefault(require("../../../../../ui/typography"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Accreditation = ({
  fetchVia,
  address
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const addressLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);

  const AccreditationLink = () => {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7,
      className: "accreditation__prefix",
      boxProps: {
        margin: 0
      }
    }, t('transactionDecodingAccreditationVerified', [/*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "accreditation__link",
      onClick: () => {
        global.platform.openTab({
          url: addressLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer",
      title: t('etherscanView'),
      key: "accreditation-link-button"
    }, fetchVia)])), /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TYPOGRAPHY.H7,
      boxProps: {
        margin: 0
      }
    }, t('transactionDecodingAccreditationDecoded')));
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "accreditation"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "accreditation__icon"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-info-circle"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "accreditation__info"
  }, /*#__PURE__*/_react.default.createElement(AccreditationLink, null)));
};

Accreditation.propTypes = {
  fetchVia: _propTypes.default.string.isRequired,
  address: _propTypes.default.string.isRequired
};
var _default = Accreditation;
exports.default = _default;


      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-decoding/components/ui/accreditation/accreditation.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/errors.js", {"./format":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/format/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/errors.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoProjectInfoError = exports.handleDecodingError = exports.StopDecodingError = exports.DecodingError = void 0;
const Format = __importStar(require("./format"));
//For when we need to throw an error, here's a wrapper class that extends Error.
//Apologies about the confusing name, but I wanted something that would make
//sense should it not be caught and thus accidentally exposed to the outside.
/**
 * @hidden
 */
class DecodingError extends Error {
    constructor(error) {
        super(Format.Utils.Exception.message(error));
        this.error = error;
        this.name = "DecodingError";
    }
}
exports.DecodingError = DecodingError;
//used to stop decoding; like DecodingError, but used in contexts
//where I don't expect it to be caught
//NOTE: currently we don't actually check the type of a thrown error,
//we just rely on context.  still, I think it makes sense to be a separate
//type.
/**
 * @hidden
 */
class StopDecodingError extends Error {
    //when decoding in full mode, we allow an ABI-mode retry.  (if we were already in
    //ABI mode, we give up.)
    constructor(error, allowRetry) {
        const message = `Stopping decoding: ${error.kind}`; //sorry about the bare-bones message,
        //but again, users shouldn't actually see this, so I think this should suffice for now
        super(message);
        this.error = error;
        this.allowRetry = Boolean(allowRetry);
    }
}
exports.StopDecodingError = StopDecodingError;
/**
 * @hidden
 */
function handleDecodingError(dataType, error, strict = false) {
    if (error instanceof DecodingError) {
        //expected error
        if (strict) {
            //strict mode -- stop decoding on errors
            throw new StopDecodingError(error.error);
        }
        else {
            //nonstrict mode -- return an error result
            return {
                //I don't know why TS's inference is failing here and needs the coercion
                type: dataType,
                kind: "error",
                error: error.error
            };
        }
    }
    else {
        //if it's *not* an expected error, we better not swallow it -- rethrow!
        throw error;
    }
}
exports.handleDecodingError = handleDecodingError;
/**
 * This error indicates that the user attempted to instantiate a decoder
 * with no project information (by explicitly overriding the default).
 * @category Exception
 */
class NoProjectInfoError extends Error {
    constructor() {
        super("No project information specified.");
        this.name = "NoProjectInfoError";
    }
}
exports.NoProjectInfoError = NoProjectInfoError;
//# sourceMappingURL=errors.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/errors.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/common/index.js", {"./types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/common/types.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/common/index.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./types"), exports); //can't do 'export type *' :-/
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/common/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abify.js", {"./common":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/common/index.js","./conversion":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/conversion.js","./format":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/format/index.js","debug":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/debug/src/browser.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abify.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.abifyReturndataDecoding = exports.abifyLogDecoding = exports.abifyCalldataDecoding = exports.abifyResult = exports.abifyType = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("codec:abify");
const Format = __importStar(require("./format"));
const Common = __importStar(require("./common"));
const Conversion = __importStar(require("./conversion"));
/** @category ABIfication */
function abifyType(dataType, userDefinedTypes) {
    switch (dataType.typeClass) {
        //we only need to specially handle types that don't go in
        //the ABI, or that have some information loss when going
        //in the ABI
        //note that we do need to handle arrays, due to recursion!
        //First: types that do not go in the ABI
        case "mapping":
        case "magic":
        case "type":
            return undefined;
        //Next: address & contract, these can get handled together
        case "address":
        case "contract":
            return {
                typeClass: "address",
                kind: "general",
                typeHint: Format.Types.typeString(dataType)
            };
        case "function":
            switch (dataType.visibility) {
                case "external":
                    return {
                        typeClass: "function",
                        visibility: "external",
                        kind: "general",
                        typeHint: Format.Types.typeString(dataType)
                    };
                case "internal": //these don't go in the ABI
                    return undefined;
            }
            break; //to satisfy TypeScript
        //the complex cases: struct & enum
        case "struct": {
            const fullType = (Format.Types.fullType(dataType, userDefinedTypes));
            if (!fullType.memberTypes) {
                let typeToDisplay = Format.Types.typeString(dataType);
                throw new Common.UnknownUserDefinedTypeError(dataType.id, typeToDisplay);
            }
            const memberTypes = fullType.memberTypes.map(({ name, type: memberType }) => ({
                name,
                type: abifyType(memberType, userDefinedTypes)
            }));
            return {
                typeClass: "tuple",
                typeHint: Format.Types.typeString(fullType),
                memberTypes
            };
        }
        case "enum": {
            const fullType = (Format.Types.fullType(dataType, userDefinedTypes));
            if (!fullType.options) {
                let typeToDisplay = Format.Types.typeString(dataType);
                throw new Common.UnknownUserDefinedTypeError(dataType.id, typeToDisplay);
            }
            let numOptions = fullType.options.length;
            let bits = 8 * Math.ceil(Math.log2(numOptions) / 8);
            return {
                typeClass: "uint",
                bits,
                typeHint: Format.Types.typeString(fullType)
            };
        }
        case "userDefinedValueType": {
            const fullType = (Format.Types.fullType(dataType, userDefinedTypes));
            if (!fullType.underlyingType) {
                let typeToDisplay = Format.Types.typeString(dataType);
                throw new Common.UnknownUserDefinedTypeError(dataType.id, typeToDisplay);
            }
            const abifiedUnderlying = abifyType(fullType.underlyingType, userDefinedTypes);
            return Object.assign(Object.assign({}, abifiedUnderlying), { typeHint: Format.Types.typeStringWithoutLocation(dataType) });
        }
        //finally: arrays
        case "array":
            return Object.assign(Object.assign({}, dataType), { typeHint: Format.Types.typeString(dataType), baseType: abifyType(dataType.baseType, userDefinedTypes) });
        //default case: just leave as-is
        default:
            return dataType;
    }
}
exports.abifyType = abifyType;
/** @category ABIfication */
function abifyResult(result, userDefinedTypes) {
    switch (result.type.typeClass) {
        case "mapping": //doesn't go in ABI
        case "magic": //doesn't go in ABI
        case "type": //doesn't go in ABI
            return undefined;
        case "address":
            //abify the type but leave the value alone
            return Object.assign(Object.assign({}, result), { type: abifyType(result.type, userDefinedTypes) });
        case "contract": {
            let coercedResult = result;
            switch (coercedResult.kind) {
                case "value":
                    return {
                        type: (abifyType(result.type, userDefinedTypes)),
                        kind: "value",
                        value: {
                            asAddress: coercedResult.value.address,
                            rawAsHex: coercedResult.value.rawAddress
                        }
                    };
                case "error":
                    switch (coercedResult.error.kind) {
                        case "ContractPaddingError":
                            return {
                                type: (abifyType(result.type, userDefinedTypes)),
                                kind: "error",
                                error: {
                                    kind: "AddressPaddingError",
                                    paddingType: coercedResult.error.paddingType,
                                    raw: coercedResult.error.raw
                                }
                            };
                        default:
                            //other contract errors are generic errors!
                            //but TS doesn't know this so we coerce
                            return Object.assign(Object.assign({}, coercedResult), { type: (abifyType(result.type, userDefinedTypes)) });
                    }
            }
            break; //to satisfy typescript
        }
        case "function":
            switch (result.type.visibility) {
                case "external": {
                    let coercedResult = result;
                    return Object.assign(Object.assign({}, coercedResult), { type: (abifyType(result.type, userDefinedTypes)) });
                }
                case "internal": //these don't go in the ABI
                    return undefined;
            }
            break; //to satisfy TypeScript
        case "struct": {
            let coercedResult = result;
            switch (coercedResult.kind) {
                case "value":
                    if (coercedResult.reference !== undefined) {
                        return undefined; //no circular values in the ABI!
                    }
                    let abifiedMembers = coercedResult.value.map(({ name, value: member }) => ({
                        name,
                        value: abifyResult(member, userDefinedTypes)
                    }));
                    return {
                        kind: "value",
                        type: (abifyType(result.type, userDefinedTypes)),
                        value: abifiedMembers
                    };
                case "error":
                    return Object.assign(Object.assign({}, coercedResult), { type: (abifyType(result.type, userDefinedTypes)) //note: may throw exception
                     });
            }
        }
        case "userDefinedValueType": {
            const coercedResult = result;
            switch (coercedResult.kind) {
                case "value":
                    return abifyResult(coercedResult.value, userDefinedTypes);
                case "error":
                    return Object.assign(Object.assign({}, coercedResult), { type: abifyType(result.type, userDefinedTypes) });
            }
            break; //to satisfy TS :P
        }
        case "enum": {
            //NOTE: this is the one case where errors are converted to non-error values!!
            //(other than recursively, I mean)
            //be aware!
            let coercedResult = result;
            let uintType = (abifyType(result.type, userDefinedTypes)); //may throw exception
            switch (coercedResult.kind) {
                case "value":
                    return {
                        type: uintType,
                        kind: "value",
                        value: {
                            asBN: coercedResult.value.numericAsBN.clone()
                        }
                    };
                case "error":
                    switch (coercedResult.error.kind) {
                        case "EnumOutOfRangeError":
                            return {
                                type: uintType,
                                kind: "value",
                                value: {
                                    asBN: coercedResult.error.rawAsBN.clone()
                                }
                            };
                        case "EnumPaddingError":
                            return {
                                type: uintType,
                                kind: "error",
                                error: {
                                    kind: "UintPaddingError",
                                    paddingType: coercedResult.error.paddingType,
                                    raw: coercedResult.error.raw
                                }
                            };
                        case "EnumNotFoundDecodingError":
                            let numericValue = coercedResult.error.rawAsBN.clone();
                            if (numericValue.bitLength() <= uintType.bits) {
                                return {
                                    type: uintType,
                                    kind: "value",
                                    value: {
                                        asBN: numericValue
                                    }
                                };
                            }
                            else {
                                return {
                                    type: uintType,
                                    kind: "error",
                                    error: {
                                        kind: "UintPaddingError",
                                        paddingType: "left",
                                        raw: Conversion.toHexString(numericValue)
                                    }
                                };
                            }
                        default:
                            return {
                                type: uintType,
                                kind: "error",
                                error: coercedResult.error
                            };
                    }
            }
        }
        case "array": {
            let coercedResult = result;
            switch (coercedResult.kind) {
                case "value":
                    if (coercedResult.reference !== undefined) {
                        return undefined; //no circular values in the ABI!
                    }
                    let abifiedMembers = coercedResult.value.map(member => abifyResult(member, userDefinedTypes));
                    return {
                        kind: "value",
                        type: (abifyType(result.type, userDefinedTypes)),
                        value: abifiedMembers
                    };
                case "error":
                    return Object.assign(Object.assign({}, coercedResult), { type: (abifyType(result.type, userDefinedTypes)) });
            }
        }
        default:
            return result; //just coerce :-/
    }
}
exports.abifyResult = abifyResult;
/** @category ABIfication */
function abifyCalldataDecoding(decoding, userDefinedTypes) {
    if (decoding.decodingMode === "abi") {
        return decoding;
    }
    switch (decoding.kind) {
        case "function":
        case "constructor":
            return Object.assign(Object.assign({}, decoding), { decodingMode: "abi", arguments: decoding.arguments.map(argument => (Object.assign(Object.assign({}, argument), { value: abifyResult(argument.value, userDefinedTypes) }))) });
        default:
            return Object.assign(Object.assign({}, decoding), { decodingMode: "abi" });
    }
}
exports.abifyCalldataDecoding = abifyCalldataDecoding;
/** @category ABIfication */
function abifyLogDecoding(decoding, userDefinedTypes) {
    if (decoding.decodingMode === "abi") {
        return decoding;
    }
    return Object.assign(Object.assign({}, decoding), { decodingMode: "abi", arguments: decoding.arguments.map(argument => (Object.assign(Object.assign({}, argument), { value: abifyResult(argument.value, userDefinedTypes) }))) });
}
exports.abifyLogDecoding = abifyLogDecoding;
/** @category ABIfication */
function abifyReturndataDecoding(decoding, userDefinedTypes) {
    if (decoding.decodingMode === "abi") {
        return decoding;
    }
    switch (decoding.kind) {
        case "return":
        case "revert":
            return Object.assign(Object.assign({}, decoding), { decodingMode: "abi", arguments: decoding.arguments.map(argument => (Object.assign(Object.assign({}, argument), { value: abifyResult(argument.value, userDefinedTypes) }))) });
        case "bytecode":
            return Object.assign(Object.assign({}, decoding), { decodingMode: "abi", immutables: undefined });
        default:
            return Object.assign(Object.assign({}, decoding), { decodingMode: "abi" });
    }
}
exports.abifyReturndataDecoding = abifyReturndataDecoding;
//# sourceMappingURL=abify.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abify.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/conversion.js", {"big.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/big.js/big.js","bn.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/node_modules/bn.js/lib/bn.js","debug":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/debug/src/browser.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/conversion.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanBool = exports.countDecimalPlaces = exports.shiftBigDown = exports.shiftBigUp = exports.toBytes = exports.toHexString = exports.toBig = exports.toBigInt = exports.toSignedBN = exports.toBN = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("codec:conversion");
const bn_js_1 = __importDefault(require("bn.js"));
const big_js_1 = __importDefault(require("big.js"));
/**
 * @param bytes - undefined | string | number | BN | Uint8Array | Big
 * @return {BN}
 */
function toBN(bytes) {
    if (bytes === undefined) {
        return undefined;
    }
    else if (typeof bytes == "string") {
        return new bn_js_1.default(bytes, 16);
    }
    else if (typeof bytes == "number" || bn_js_1.default.isBN(bytes)) {
        return new bn_js_1.default(bytes);
    }
    else if (bytes instanceof big_js_1.default) {
        return new bn_js_1.default(bytes.toFixed()); //warning, better hope input is integer!
        //note: going through string may seem silly but it's actually not terrible here,
        //since BN is binary-based and Big is decimal-based
        //[toFixed is like toString except it guarantees scientific notation is not used]
    }
    else if (typeof bytes.reduce === "function") {
        return bytes.reduce((num, byte) => num.shln(8).addn(byte), new bn_js_1.default(0));
    }
}
exports.toBN = toBN;
/**
 * @param bytes - Uint8Array
 * @return {BN}
 */
function toSignedBN(bytes) {
    if (bytes[0] < 0x80) {
        // if first bit is 0
        return toBN(bytes);
    }
    else {
        return toBN(bytes.map(b => 0xff - b))
            .addn(1)
            .neg();
    }
}
exports.toSignedBN = toSignedBN;
function toBigInt(value) {
    //BN is binary-based, so we convert by means of a hex string in order
    //to avoid having to do a binary-decimal conversion and back :P
    return !value.isNeg()
        ? BigInt("0x" + value.toString(16))
        : -BigInt("0x" + value.neg().toString(16)); //can't directly make negative BigInt from hex string
}
exports.toBigInt = toBigInt;
function toBig(value) {
    //note: going through string may seem silly but it's actually not terrible here,
    //since BN (& number) is binary-based and Big is decimal-based
    return new big_js_1.default(value.toString());
}
exports.toBig = toBig;
/**
 * @param bytes - Uint8Array | BN
 * @param padLength - number - minimum desired byte length (left-pad with zeroes)
 * @return {string}
 */
function toHexString(bytes, padLength = 0, padRight = false //pad on right instead of length
) {
    if (bn_js_1.default.isBN(bytes)) {
        bytes = toBytes(bytes);
    }
    const pad = (s) => `${"00".slice(0, 2 - s.length)}${s}`;
    //                                          0  1  2  3  4
    //                                 0  1  2  3  4  5  6  7
    // bytes.length:        5  -  0x(          e5 c2 aa 09 11 )
    // length (preferred):  8  -  0x( 00 00 00 e5 c2 aa 09 11 )
    //                                `--.---'
    //                                     offset 3
    if (bytes.length < padLength) {
        let prior = bytes;
        bytes = new Uint8Array(padLength);
        if (padRight) {
            //unusual case: pad on right
            bytes.set(prior);
        }
        else {
            //usual case
            bytes.set(prior, padLength - prior.length);
        }
    }
    debug("bytes: %o", bytes);
    let string = bytes.reduce((str, byte) => `${str}${pad(byte.toString(16))}`, "");
    return `0x${string}`;
}
exports.toHexString = toHexString;
function toBytes(data, length = 0) {
    //note that length is a minimum output length
    //strings will be 0-padded on left
    //numbers/BNs will be sign-padded on left
    //NOTE: if a number/BN is passed in that is too big for the given length,
    //you will get an error!
    //(note that strings passed in should be hex strings; this is not for converting
    //generic strings to hex)
    if (typeof data === "string") {
        let hex = data; //renaming for clarity
        if (hex.startsWith("0x")) {
            hex = hex.slice(2);
        }
        if (hex === "") {
            //this special case is necessary because the match below will return null,
            //not an empty array, when given an empty string
            return new Uint8Array(0);
        }
        if (hex.length % 2 == 1) {
            hex = `0${hex}`;
        }
        let bytes = new Uint8Array(hex.match(/.{2}/g).map(byte => parseInt(byte, 16)));
        if (bytes.length < length) {
            let prior = bytes;
            bytes = new Uint8Array(length);
            bytes.set(prior, length - prior.length);
        }
        return bytes;
    }
    else {
        // BN/Big/number case
        if (typeof data === "number") {
            data = new bn_js_1.default(data);
        }
        else if (data instanceof big_js_1.default) {
            //note: going through string may seem silly but it's actually not terrible here,
            //since BN is binary-based and Big is decimal-based
            data = new bn_js_1.default(data.toFixed());
            //[toFixed is like toString except it guarantees scientific notation is not used]
        }
        //note that the argument for toTwos is given in bits
        return data.toTwos(length * 8).toArrayLike(Uint8Array, "be", length);
        //big-endian
    }
}
exports.toBytes = toBytes;
//computes value * 10**decimalPlaces
function shiftBigUp(value, decimalPlaces) {
    let newValue = new big_js_1.default(value);
    newValue.e += decimalPlaces;
    return newValue;
}
exports.shiftBigUp = shiftBigUp;
//computes value * 10**-decimalPlaces
function shiftBigDown(value, decimalPlaces) {
    let newValue = new big_js_1.default(value);
    newValue.e -= decimalPlaces;
    return newValue;
}
exports.shiftBigDown = shiftBigDown;
//we don't need this yet, but we will eventually
function countDecimalPlaces(value) {
    return Math.max(0, value.c.length - value.e - 1);
}
exports.countDecimalPlaces = countDecimalPlaces;
//converts out of range booleans to true; something of a HACK
//NOTE: does NOT do this recursively inside structs, arrays, etc!
//I mean, those aren't elementary and therefore aren't in the domain
//anyway, but still
function cleanBool(result) {
    switch (result.kind) {
        case "value":
            return result;
        case "error":
            switch (result.error.kind) {
                case "BoolOutOfRangeError":
                    //return true
                    return {
                        type: result.type,
                        kind: "value",
                        value: {
                            asBoolean: true
                        }
                    };
                default:
                    return result;
            }
    }
}
exports.cleanBool = cleanBool;
//# sourceMappingURL=conversion.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/conversion.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compilations/index.js", {"./types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compilations/types.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compilations/utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compilations/index.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
__exportStar(require("./types"), exports); //'export type *' is not allowed
const Utils = __importStar(require("./utils"));
exports.Utils = Utils;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compilations/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/evm/index.js", {"./import":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/evm/import/index.js","./types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/evm/types.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/evm/utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/evm/index.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Import = exports.Utils = void 0;
__exportStar(require("./types"), exports); //'export type *' is not allowed
const Utils = __importStar(require("./utils"));
exports.Utils = Utils;
const Import = __importStar(require("./import"));
exports.Import = Import;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/evm/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/basic/index.js", {"./allocate":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/basic/allocate/index.js","./decode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/basic/decode/index.js","./encode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/basic/encode/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/basic/index.js
      return function (require, module, exports) {
"use strict";
/**
 * For decoding of primitives and constants
 *
 * @protected
 *
 * @packageDocumentation
 */
//Category: Common data location
//[NOT making this an actual category for now
//since there's nothing public in it]
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Allocate = exports.Encode = exports.Decode = void 0;
const Decode = __importStar(require("./decode"));
exports.Decode = Decode;
const Encode = __importStar(require("./encode"));
exports.Encode = Encode;
const Allocate = __importStar(require("./allocate"));
exports.Allocate = Allocate;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/basic/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/bytes/index.js", {"./decode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/bytes/decode/index.js","./encode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/bytes/encode/index.js","./read":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/bytes/read/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/bytes/index.js
      return function (require, module, exports) {
"use strict";
/**
 * Contains functions for dealing with raw bytestrings
 * @protected
 *
 * @packageDocumentation
 */
//Category: Common data location
//[NOT making this an actual category for now
//since there's nothing public in it]
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encode = exports.Decode = exports.Read = void 0;
const Read = __importStar(require("./read"));
exports.Read = Read;
const Decode = __importStar(require("./decode"));
exports.Decode = Decode;
const Encode = __importStar(require("./encode"));
exports.Encode = Encode;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/bytes/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/topic/index.js", {"./decode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/topic/decode/index.js","./encode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/topic/encode/index.js","./read":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/topic/read/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/topic/index.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Read = exports.Encode = exports.Decode = void 0;
/**
 * For decoding of event topics
 *
 * @protected
 * @category ABI data location
 *
 * @packageDocumentation
 */
const Decode = __importStar(require("./decode"));
exports.Decode = Decode;
const Encode = __importStar(require("./encode"));
exports.Encode = Encode;
const Read = __importStar(require("./read"));
exports.Read = Read;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/topic/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/mapping-key/index.js", {"./encode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/mapping-key/encode/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/mapping-key/index.js
      return function (require, module, exports) {
"use strict";
/**
 * For encoding mapping keys
 *
 * @protected
 * @category Solidity data location
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encode = void 0;
const Encode = __importStar(require("./encode"));
exports.Encode = Encode;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/mapping-key/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/memory/index.js", {"./allocate":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/memory/allocate/index.js","./decode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/memory/decode/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/memory/index.js
      return function (require, module, exports) {
"use strict";
/**
 * For allocation and decoding of memory data
 *
 * @category Solidity data location
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decode = exports.Allocate = void 0;
const Allocate = __importStar(require("./allocate"));
exports.Allocate = Allocate;
const Decode = __importStar(require("./decode"));
exports.Decode = Decode;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/memory/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/stack/index.js", {"./decode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/stack/decode/index.js","./read":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/stack/read/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/stack/index.js
      return function (require, module, exports) {
"use strict";
/**
 * For decoding stack variables
 *
 * @category Solidity data location
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Read = exports.Decode = void 0;
const Decode = __importStar(require("./decode"));
exports.Decode = Decode;
const Read = __importStar(require("./read"));
exports.Read = Read;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/stack/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/special/index.js", {"./decode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/special/decode/index.js","./read":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/special/read/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/special/index.js
      return function (require, module, exports) {
"use strict";
/**
 * For decoding of special/magic variables
 *
 * @protected
 * @category Solidity data location
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Read = exports.Decode = void 0;
const Decode = __importStar(require("./decode"));
exports.Decode = Decode;
const Read = __importStar(require("./read"));
exports.Read = Read;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/special/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/storage/index.js", {"./allocate":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/storage/allocate/index.js","./decode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/storage/decode/index.js","./read":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/storage/read/index.js","./types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/storage/types.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/storage/utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/storage/index.js
      return function (require, module, exports) {
"use strict";
/**
 * For allocation and decoding of storage variables
 *
 * @category Solidity data location
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Read = exports.Decode = exports.Allocate = exports.Utils = void 0;
__exportStar(require("./types"), exports); //can't do 'export type *'
const Utils = __importStar(require("./utils"));
exports.Utils = Utils;
const Allocate = __importStar(require("./allocate"));
exports.Allocate = Allocate;
const Decode = __importStar(require("./decode"));
exports.Decode = Decode;
const Read = __importStar(require("./read"));
exports.Read = Read;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/storage/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast-constant/index.js", {"./decode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast-constant/decode/index.js","./read":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast-constant/read/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast-constant/index.js
      return function (require, module, exports) {
"use strict";
/**
 * For reading/decoding constants expressed as AST nodes
 *
 * @category Solidity data location
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decode = exports.Read = void 0;
const Read = __importStar(require("./read"));
exports.Read = Read;
const Decode = __importStar(require("./decode"));
exports.Decode = Decode;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast-constant/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast/index.js", {"./import":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast/import/index.js","./types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast/types.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast/utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast/index.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Import = exports.Utils = void 0;
__exportStar(require("./types"), exports); //'export type *' is not allowed
const Utils = __importStar(require("./utils"));
exports.Utils = Utils;
const Import = __importStar(require("./import"));
exports.Import = Import;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/export.js", {"./conversion":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/conversion.js","./format/utils/inspect":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/format/utils/inspect.js","buffer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/browserify/node_modules/buffer/index.js","debug":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/debug/src/browser.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/export.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nativizeEventArgs = exports.nativizeReturn = exports.nativize = exports.unsafeNativize = exports.ResultInspector = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("codec:export");
const Conversion = __importStar(require("./conversion"));
const inspect_1 = require("./format/utils/inspect");
Object.defineProperty(exports, "ResultInspector", { enumerable: true, get: function () { return inspect_1.ResultInspector; } });
Object.defineProperty(exports, "unsafeNativize", { enumerable: true, get: function () { return inspect_1.unsafeNativize; } });
/**
 * This function is similar to
 * [[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], but is intended to
 * be safe, and also allows for different output formats.  The only currently
 * supported format is "ethers", which is intended to match the way that
 * Truffle Contract currently returns values (based on the Ethers decoder).  As
 * such, it only handles ABI types, and in addition does not handle the types
 * fixed, ufixed, or function.  Note that in these cases it returns `undefined`
 * rather than throwing, as we want this function to be used in contexts where
 * it had better not throw.  It also does not handle circularities, for similar
 * reasons.
 *
 * To handle numeric types, this function takes an optional numberFormatter
 * option that tells it how to handle numbers; this function should take a
 * BigInt as input.  By default, this function will be the identity, and so
 * numbers will be represented as BigInts.
 *
 * Note that this function begins by calling abify, so out-of-range enums (that
 * aren't so out-of-range as to be padding errors) will not return `undefined`.
 * Out-of-range booleans similarly will return true rather than `undefined`.
 * However, other range errors may return `undefined`; this may technically be a
 * slight incompatibility with existing behavior, but should not be relevant
 * except in quite unusual cases.
 *
 * In order to match the behavior for tuples, tuples will be transformed into
 * arrays, but named entries will additionally be keyed by name.  Moreover,
 * indexed variables of reference type will be nativized to an undecoded hex
 * string.
 */
function nativize(result, options = {}) {
    const numberFormatter = options.numberFormatter || (x => x);
    const format = options.format || "ethers";
    switch (format) {
        case "ethers":
            return ethersCompatibleNativize(result, numberFormatter);
    }
}
exports.nativize = nativize;
function ethersCompatibleNativize(result, numberFormatter = x => x) {
    //note: the original version of this function began by calling abify,
    //but we don't do that here because abify requires a userDefinedTypes
    //parameter and we don't want that.
    //However, it only needs that to handle getting the types right.  Since
    //we don't care about that here, we instead do away with abify and handle
    //such matters ourselves (which is less convenient, yeah).
    switch (result.kind) {
        case "error":
            switch (result.error.kind) {
                case "IndexedReferenceTypeError":
                    //strictly speaking for arrays ethers will fail to decode
                    //rather than do this, but, eh
                    return result.error.raw;
                case "EnumOutOfRangeError":
                    return numberFormatter(Conversion.toBigInt(result.error.rawAsBN));
                default:
                    return undefined;
            }
        case "value":
            switch (result.type.typeClass) {
                case "uint":
                case "int":
                    const asBN = (result).value.asBN;
                    return numberFormatter(Conversion.toBigInt(asBN));
                case "enum":
                    const numericAsBN = (result).value.numericAsBN;
                    return numberFormatter(Conversion.toBigInt(numericAsBN));
                case "bool":
                    return result.value.asBoolean;
                case "bytes":
                    const asHex = result.value.asHex;
                    return asHex !== "0x" ? asHex : null;
                case "address":
                    return result.value.asAddress;
                case "contract":
                    return result.value.address;
                case "string": {
                    const coercedResult = result;
                    switch (coercedResult.value.kind) {
                        case "valid":
                            return coercedResult.value.asString;
                        case "malformed":
                            // this will turn malformed utf-8 into replacement characters (U+FFFD) (WARNING)
                            // note we need to cut off the 0x prefix
                            return Buffer.from(coercedResult.value.asHex.slice(2), "hex").toString();
                    }
                }
                case "userDefinedValueType":
                    return ethersCompatibleNativize(result.value, numberFormatter);
                case "array":
                    return result.value.map(value => ethersCompatibleNativize(value, numberFormatter));
                case "tuple":
                case "struct":
                    //in this case, we need the result to be an array, but also
                    //to have the field names (where extant) as keys
                    const nativized = [];
                    const pairs = result.value;
                    for (const { name, value } of pairs) {
                        const nativizedValue = ethersCompatibleNativize(value, numberFormatter);
                        nativized.push(nativizedValue);
                        if (name) {
                            nativized[name] = nativizedValue;
                        }
                    }
                    return nativized;
                case "function":
                    switch (result.type.visibility) {
                        case "external":
                            const coercedResult = result;
                            //ethers per se doesn't handle this, but web3's hacked version will
                            //sometimes decode these as just a bytes24, so let's do that
                            return coercedResult.value.contract.address.toLowerCase() +
                                coercedResult.value.selector.slice(2);
                        case "internal":
                            return undefined;
                    }
                case "fixed":
                case "ufixed":
                default:
                    return undefined;
            }
    }
}
/**
 * This function is similar to [[nativize]], but takes
 * a [[ReturndataDecoding]].  If there's only one returned value, it
 * will be run through compatibleNativize but otherwise unaltered;
 * otherwise the results will be put in an object.
 *
 * Note that if the ReturndataDecoding is not a [[ReturnDecoding]],
 * this will just return `undefined`.
 */
function nativizeReturn(decoding, options = {}) {
    const numberFormatter = options.numberFormatter || (x => x);
    const format = options.format || "ethers";
    switch (format) {
        case "ethers":
            return ethersCompatibleNativizeReturn(decoding, numberFormatter);
    }
}
exports.nativizeReturn = nativizeReturn;
function ethersCompatibleNativizeReturn(decoding, numberFormatter = x => x) {
    if (decoding.kind !== "return") {
        return undefined;
    }
    if (decoding.arguments.length === 1) {
        return ethersCompatibleNativize(decoding.arguments[0].value, numberFormatter);
    }
    const result = {};
    for (let i = 0; i < decoding.arguments.length; i++) {
        const { name, value } = decoding.arguments[i];
        const nativized = ethersCompatibleNativize(value, numberFormatter);
        result[i] = nativized;
        if (name) {
            result[name] = nativized;
        }
    }
    return result;
}
/**
 * This function is similar to [[compatibleNativize]], but takes
 * a [[LogDecoding]], and puts the results in an object.  Note
 * that this does not return the entire event info, but just the
 * `args` for the event.
 */
function nativizeEventArgs(decoding, options = {}) {
    const numberFormatter = options.numberFormatter || (x => x);
    const format = options.format || "ethers";
    switch (format) {
        case "ethers":
            return ethersCompatibleNativizeEventArgs(decoding, numberFormatter);
    }
}
exports.nativizeEventArgs = nativizeEventArgs;
function ethersCompatibleNativizeEventArgs(decoding, numberFormatter = x => x) {
    const result = {};
    for (let i = 0; i < decoding.arguments.length; i++) {
        const { name, value } = decoding.arguments[i];
        const nativized = ethersCompatibleNativize(value, numberFormatter);
        result[i] = nativized;
        if (name) {
            result[name] = nativized;
        }
    }
    //note: if you have an argument named __length__, what ethers
    //actually does is... weird.  we're just going to do this instead,
    //which is simpler and probably more useful, even if it's not strictly
    //the same (I *seriously* doubt anyone was relying on the old behavior,
    //because it's, uh, not very useful)
    result.__length__ = decoding.arguments.length;
    return result;
}

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/export.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/format/index.js", {"./common":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/format/common.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/format/utils/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/format/index.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = exports.Types = void 0;
/**
 * # Codec Output Format
 *
 * ## Module information
 *
 * This module primarily defines TypeScript types for the output format
 * used in results provided by packages
 * `@truffle/decoder@^4.0.0` and `@truffle/codec@^0.1.0`.
 *
 * See below for complete listing or continue reading
 * [Format information](#format-information) to learn about this format.
 *
 * ### How to import
 *
 * Import either as part of Codec or by itself:
 *
 * ```typescript
 * // when importing entire Codec, use Codec.Format.*:
 * import * as Codec from "@truffle/codec";
 *
 * // or import Format directly:
 * import { Format } from "@truffle/codec";
 * ```
 *
 * ![Example struct decoding](media://example-struct-decoding.png)
 *
 * ## Format information
 *
 * This format is intended for use in smart contract and dapp development
 * tools and libraries, and for use in display contexts, such as when
 * building on-screen components to show transaction and smart contract
 * state information.
 *
 * This format seeks to provide an exhaustive schema for JavaScript
 * objects to encode **lossless**, **machine-readable** representations of
 * all possible Solidity and ABI data types and all possible values of those
 * types.
 *
 * This format targets types and values understood by the
 * [Solidity programming language](https://solidity.readthedocs.io) and
 * the [Contract ABI specification](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html),
 * within the context of the [Ethereum Virtual Machine](https://ethereum.github.io/yellowpaper/paper.pdf)
 * (EVM) and in raw data for transactions and logs according to the
 * [Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC).
 *
 * Objects in this format may be deeply nested and/or contain circular
 * dependencies. As such, **do not** serialize objects in this format or
 * otherwise attempt to display them in full without considering potential
 * risk. **Objects in this format are for the machine to read, not humans!**
 * This module provides utilities for inspecting objects in this format,
 * including the **safe** [[Format.Utils.Inspect.ResultInspector]] wrapper
 * (for [util.inspect](https://nodejs.org/api/util.html#util_util_inspect_object_options)),
 * and the **unsafe** [[Format.Utils.Inspect.unsafeNativize]] function. For more
 * information, please see the documentation for those utilities.
 *
 * ### Specification
 *
 * Individual decoded values are represented by objects of the type
 * [[Format.Values.Result]], which contain the following fields:
 *   1. `type`: This is a [[Format.Types.Type|`Type`]] object describing the value's
 *     type.  Each `Type` has a `typeClass` field describing the overall broad type,
 *     such as `"uint"` or `"bytes"`, together with additional information that gives
 *     the specific type.  For full detail, see [[Format.Types]].
 *
 *   2. `kind`: This is either `"value"`, in which case the `Result` is a
 *     [[Format.Values.Value|`Value`]], or `"error"`, in which case the `Result` is an
 *     [[Format.Errors.ErrorResult|`ErrorResult`]].  In the former case, there will be
 *     a `value` field containin the decoded value.  In the latter case, there will be
 *     an `error` field indicating what went wrong.  *Warning*: When decoding a
 *     complex type, such as an array, mapping, or array, getting a kind of `"value"`
 *     does not necessarily mean the individual elements were decoded successfully.
 *     Even if the `Result` for the array (mapping, struct) as a whole has kind
 *     `"value"`, the elements might still have kind `"error"`.
 *
 *   3. `value`: As mentioned, this is included when `kind` is equal to `"value"`.
 *     It contains information about the actual decoded value.  See
 *     [[Format.Values|`Format.Values`]] for more information.
 *
 *   4. `error`: The alternative to `value`.  Generally includes information about
 *     the raw data that led to the error.  See [[Format.Errors|`Format.Errors`]] for
 *     more information.
 *
 *   5. `reference`: This field is a debugger-only feature and does not
 *      apply to results returned by  @truffle/decoder, so it won't be documented here.
 *
 * ### Values vs. errors
 *
 * It's worth taking a moment here to answer the question: What counts as a value,
 * and what counts as an error?
 *
 * In general, the answer is that anything that can be generated via Solidity
 * alone (i.e. no assembly), with correctly-encoded inputs, and without making use
 * of compiler bugs, is a value, not an error.  That means that, for instance, the
 * following things are values, not errors:
 *   - A variable of contract type whose address does not actually hold a
 *     contract of that type;
 *   - An external function pointer that does not correspond to a valid
 *     function;
 *   - A string containing invalid UTF-8;
 *   - ..., etc.
 *
 * By contrast, the following *are* errors:
 *   - A `bool` which is neither `false` (0) nor `true` (1);
 *   - An `enum` which is out of range;
 *   - ..., etc.
 *
 * (You may be wondering about the enum case here, because if you go sufficiently
 * far back, to Solidity 0.4.4 or earlier, it *was* possible to generate
 * out-of-range enums without resorting to assembly or compiler bugs.  However,
 * enums are only supported in full mode (see
 * [Notes on decoding modes](../#decoding-modes)),
 * which only supports 0.4.12 and later, so
 * we consider out-of-range enums an error.  There are also additional technical
 * reasons why supporting out-of-range enums as a value would be difficult.)
 *
 * There are three special cases here that are likely worthy of note.
 *
 * Firstly, internal function pointers currently can't be meaningfully
 * decoded via @truffle/decoder.  However, they decode to a bare-bones value,
 * not an error, as it is (in a sense) our own fault that we can't decode
 * these, so it doesn't make sense to report an error, which would mean that
 * something is wrong with the encoded data itself.  This value that it
 * decodes to will give the program counter values it corresponds to, but
 * will not include the function name or defining class, as @truffle/decoder
 * is not presently capable of that.  For now, full decoding of internal
 * function pointers remains a debugger-only feature.  (But limited support for
 * this via @truffle/decoder is planned for the future.)
 *
 * (When using the debugger, an invalid internal function pointer will decode to an
 * error.  However, when using @truffle/decoder, we have no way of discerning whether
 * the pointer is valid or not, so internal function pointers will always decode to
 * a value, if an uninformative one.)
 *
 * Secondly, when decoding events, it is impossible to decode indexed parameters
 * of reference type.  Thus, these decode to an error
 * (`IndexedReferenceTypeError`, which see) rather than to a value.
 *
 * Thirdly, the decoder is currently limited when it comes to decoding state
 * variables that are declared constant, and not all such variables are yet
 * supported in decoding; attempting to decode one of these that is not currently
 * supported will yield an error.
 *
 * Similarly, there are various things that decode to errors for technical reasons.
 * Objects with encoded length fields larger than what fits in a JavaScript safe
 * integer, or pointed to by pointers with values larger than what fits in a
 * JavaScript safe integer, will decode to errors, even if they may technically be
 * legal.  Such cases are impractical to handle and should never come up in real
 * use so we decode them to errors.  Errors may also be returned in case of an
 * error in attempting to read the data to be decoded.
 *
 * Finally, except when decoding events, we do not return an error if the pointers
 * in an ABI-encoded array or tuple are arranged in a nonstandard way, or if
 * strings or bytestrings are incorrectly padded, because it is not worth the
 * trouble to detect these conditions.
 *
 *
 * ## Notes on this documentation
 *
 * Most of this doesn't have explanatory documentation
 * because it's largely self-explanatory, but particularly
 * non-obvious parts have been documented for clarity.
 *
 * A note on optional fields: A number of types or values
 * have optional fields.  These contain helpful
 * but non-essential information, or information which
 * for technical reasons we can't guarantee we can determine.
 *
 * @category Data
 *
 * @packageDocumentation
 */
const common_1 = require("./common");
Object.defineProperty(exports, "Types", { enumerable: true, get: function () { return common_1.Types; } });
const Utils = __importStar(require("./utils"));
exports.Utils = Utils;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/format/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/core.js", {"./abi-data":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/index.js","./abify":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abify.js","./ast":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/ast/index.js","./contexts":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/contexts/index.js","./conversion":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/conversion.js","./decode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/decode.js","./errors":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/errors.js","./evm":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/evm/index.js","./read":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/read.js","./topic":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/topic/index.js","debug":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/debug/src/browser.js","web3-utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/node_modules/web3-utils/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/core.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeRevert = exports.decodeReturndata = exports.decodeEvent = exports.decodeCalldata = exports.decodeVariable = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("codec:core");
const Ast = __importStar(require("./ast"));
const AbiData = __importStar(require("./abi-data"));
const Topic = __importStar(require("./topic"));
const Evm = __importStar(require("./evm"));
const Contexts = __importStar(require("./contexts"));
const abify_1 = require("./abify");
const Conversion = __importStar(require("./conversion"));
const errors_1 = require("./errors");
const read_1 = __importDefault(require("./read"));
const decode_1 = __importDefault(require("./decode"));
// untyped import since no @types/web3-utils exists
const Web3Utils = require("web3-utils");
/**
 * @Category Decoding
 */
function* decodeVariable(definition, pointer, info, compilationId) {
    let compiler = info.currentContext.compiler;
    let dataType = Ast.Import.definitionToType(definition, compilationId, compiler);
    return yield* decode_1.default(dataType, pointer, info); //no need to pass an offset
}
exports.decodeVariable = decodeVariable;
/**
 * @Category Decoding
 */
function* decodeCalldata(info, isConstructor //ignored if context! trust context instead if have
) {
    const context = info.currentContext;
    if (context === null) {
        //if we don't know the contract ID, we can't decode
        if (isConstructor) {
            return {
                kind: "create",
                decodingMode: "full",
                bytecode: Conversion.toHexString(info.state.calldata)
            };
        }
        else {
            return {
                kind: "unknown",
                decodingMode: "full",
                data: Conversion.toHexString(info.state.calldata)
            };
        }
    }
    const contextHash = context.context;
    const contractType = Contexts.Import.contextToType(context);
    isConstructor = context.isConstructor;
    const allocations = info.allocations.calldata;
    let allocation;
    let selector;
    //first: is this a creation call?
    if (isConstructor) {
        allocation = (allocations.constructorAllocations[contextHash] || { input: undefined }).input;
    }
    else {
        //skipping any error-handling on this read, as a calldata read can't throw anyway
        let rawSelector = yield* read_1.default({
            location: "calldata",
            start: 0,
            length: Evm.Utils.SELECTOR_SIZE
        }, info.state);
        selector = Conversion.toHexString(rawSelector);
        allocation = ((allocations.functionAllocations[contextHash] || {})[selector] || {
            input: undefined
        }).input;
    }
    if (allocation === undefined) {
        let abiEntry = null;
        if (info.state.calldata.length === 0) {
            //to hell with reads, let's just be direct
            abiEntry = context.fallbackAbi.receive || context.fallbackAbi.fallback;
        }
        else {
            abiEntry = context.fallbackAbi.fallback;
        }
        return {
            kind: "message",
            class: contractType,
            abi: abiEntry,
            data: Conversion.toHexString(info.state.calldata),
            decodingMode: "full"
        };
    }
    let decodingMode = allocation.allocationMode; //starts out this way, degrades to ABI if necessary
    debug("calldata decoding mode: %s", decodingMode);
    //you can't map with a generator, so we have to do this map manually
    let decodedArguments = [];
    for (const argumentAllocation of allocation.arguments) {
        let value;
        let dataType = decodingMode === "full"
            ? argumentAllocation.type
            : abify_1.abifyType(argumentAllocation.type, info.userDefinedTypes);
        try {
            value = yield* decode_1.default(dataType, argumentAllocation.pointer, info, {
                abiPointerBase: allocation.offset,
                allowRetry: decodingMode === "full"
            });
        }
        catch (error) {
            if (error instanceof errors_1.StopDecodingError &&
                error.allowRetry &&
                decodingMode === "full") {
                debug("problem! retrying as ABI");
                debug("error: %O", error);
                //if a retry happens, we've got to do several things in order to switch to ABI mode:
                //1. mark that we're switching to ABI mode;
                decodingMode = "abi";
                //2. abify all previously decoded values;
                decodedArguments = decodedArguments.map(argumentDecoding => (Object.assign(Object.assign({}, argumentDecoding), { value: abify_1.abifyResult(argumentDecoding.value, info.userDefinedTypes) })));
                //3. retry this particular decode in ABI mode.
                //(no try/catch on this one because we can't actually handle errors here!
                //not that they should be occurring)
                value = yield* decode_1.default(abify_1.abifyType(argumentAllocation.type, info.userDefinedTypes), //type is now abified!
                argumentAllocation.pointer, info, {
                    abiPointerBase: allocation.offset
                });
                //4. the remaining parameters will then automatically be decoded in ABI mode due to (1),
                //so we don't need to do anything special there.
            }
            else {
                //we shouldn't be getting other exceptions, but if we do, we don't know
                //how to handle them, so uhhhh just rethrow I guess??
                throw error;
            }
        }
        const name = argumentAllocation.name;
        decodedArguments.push(name //deliberate general falsiness test
            ? { name, value }
            : { value });
    }
    if (isConstructor) {
        return {
            kind: "constructor",
            class: contractType,
            arguments: decodedArguments,
            abi: allocation.abi,
            bytecode: Conversion.toHexString(info.state.calldata.slice(0, allocation.offset)),
            decodingMode
        };
    }
    else {
        return {
            kind: "function",
            class: contractType,
            abi: allocation.abi,
            arguments: decodedArguments,
            selector,
            decodingMode
        };
    }
}
exports.decodeCalldata = decodeCalldata;
/**
 * @Category Decoding
 */
function* decodeEvent(info, address, options = {}) {
    const allocations = info.allocations.event;
    const extras = options.extras || "off";
    let rawSelector;
    let selector;
    let contractAllocations; //for non-anonymous events
    let libraryAllocations; //similar
    let contractAnonymousAllocations;
    let libraryAnonymousAllocations;
    const topicsCount = info.state.eventtopics.length;
    //yeah, it's not great to read directly from the state like this (bypassing read), but what are you gonna do?
    if (allocations[topicsCount]) {
        if (topicsCount > 0) {
            rawSelector = yield* read_1.default({
                location: "eventtopic",
                topic: 0
            }, info.state);
            selector = Conversion.toHexString(rawSelector);
            if (allocations[topicsCount].bySelector[selector]) {
                ({
                    contract: contractAllocations,
                    library: libraryAllocations
                } = allocations[topicsCount].bySelector[selector]);
            }
            else {
                debug("no allocations for that selector!");
                contractAllocations = {};
                libraryAllocations = {};
            }
        }
        else {
            //if we don't have a selector, it means we don't have any non-anonymous events
            contractAllocations = {};
            libraryAllocations = {};
        }
        //now: let's get our allocations for anonymous events
        ({
            contract: contractAnonymousAllocations,
            library: libraryAnonymousAllocations
        } = allocations[topicsCount].anonymous);
    }
    else {
        //if there's not even an allocation for the topics count, we can't
        //decode; we could do this the honest way of setting all four allocation
        //objects to {}, but let's just short circuit
        debug("no allocations for that topic count!");
        return [];
    }
    //now: what contract are we (probably) dealing with? let's get its code to find out
    const codeBytes = yield {
        type: "code",
        address
    };
    const codeAsHex = Conversion.toHexString(codeBytes);
    const contractContext = Contexts.Utils.findContext(info.contexts, codeAsHex);
    let possibleContractAllocations; //excludes anonymous events
    let possibleContractAnonymousAllocations;
    let possibleExtraAllocations; //excludes anonymous events
    let possibleExtraAnonymousAllocations;
    const emittingContextHash = (contractContext || { context: undefined })
        .context;
    if (emittingContextHash) {
        //if we found the contract, maybe it's from that contract
        const contractAllocation = contractAllocations[emittingContextHash];
        const contractAnonymousAllocation = contractAnonymousAllocations[emittingContextHash];
        possibleContractAllocations = contractAllocation || [];
        possibleContractAnonymousAllocations = contractAnonymousAllocation || [];
        //also, we need to set up the extras (everything that's from a
        //non-library contract but *not* this one)
        possibleExtraAllocations = [].concat(...Object.entries(contractAllocations)
            .filter(([key, _]) => key !== emittingContextHash)
            .map(([_, value]) => value));
        possibleExtraAnonymousAllocations = [].concat(...Object.entries(contractAnonymousAllocations)
            .filter(([key, _]) => key !== emittingContextHash)
            .map(([_, value]) => value));
    }
    else {
        //if we couldn't determine the contract, well, we have to assume it's from a library
        debug("couldn't find context");
        possibleContractAllocations = [];
        possibleContractAnonymousAllocations = [];
        //or it's an extra, which could be any of the contracts
        possibleExtraAllocations = [].concat(...Object.values(contractAllocations));
        possibleExtraAnonymousAllocations = [].concat(...Object.values(contractAnonymousAllocations));
    }
    //now we get all the library allocations!
    const possibleLibraryAllocations = [].concat(...Object.values(libraryAllocations));
    const possibleLibraryAnonymousAllocations = [].concat(...Object.values(libraryAnonymousAllocations));
    //now we put it all together!
    const possibleAllocations = possibleContractAllocations.concat(possibleLibraryAllocations);
    const possibleAnonymousAllocations = possibleContractAnonymousAllocations.concat(possibleLibraryAnonymousAllocations);
    const possibleAllocationsTotalMinusExtras = possibleAllocations.concat(possibleAnonymousAllocations);
    //...and also there's the extras
    const possibleExtraAllocationsTotal = possibleExtraAllocations.concat(possibleExtraAnonymousAllocations);
    const possibleAllocationsTotal = possibleAllocationsTotalMinusExtras.concat([null], //HACK: add sentinel value before the extras
    possibleExtraAllocationsTotal);
    //whew!
    let decodings = [];
    allocationAttempts: for (const allocation of possibleAllocationsTotal) {
        debug("trying allocation: %O", allocation);
        //first: check for our sentinel value for extras (yeah, kind of HACKy)
        if (allocation === null) {
            switch (extras) {
                case "on":
                    continue allocationAttempts; //ignore the sentinel and continue
                case "off":
                    break allocationAttempts; //don't include extras; stop here
                case "necessary":
                    //stop on the sentinel and exclude extras *unless* there are no decodings yet
                    if (decodings.length > 0) {
                        break allocationAttempts;
                    }
                    else {
                        continue allocationAttempts;
                    }
            }
        }
        //second: do a name check so we can skip decoding if name is wrong
        //(this will likely be a more detailed check in the future)
        if (options.name !== undefined && allocation.abi.name !== options.name) {
            continue;
        }
        //now: the main part!
        let decodingMode = allocation.allocationMode; //starts out here; degrades to abi if necessary
        const contextHash = allocation.contextHash;
        const attemptContext = info.contexts[contextHash];
        const emittingContractType = Contexts.Import.contextToType(attemptContext);
        const contractType = allocation.definedIn;
        //you can't map with a generator, so we have to do this map manually
        let decodedArguments = [];
        for (const argumentAllocation of allocation.arguments) {
            let value;
            //if in full mode, use the allocation's listed data type.
            //if in ABI mode, abify it before use.
            let dataType = decodingMode === "full"
                ? argumentAllocation.type
                : abify_1.abifyType(argumentAllocation.type, info.userDefinedTypes);
            try {
                value = yield* decode_1.default(dataType, argumentAllocation.pointer, info, {
                    strictAbiMode: true,
                    allowRetry: decodingMode === "full" //this option is unnecessary but including for clarity
                });
            }
            catch (error) {
                if (error instanceof errors_1.StopDecodingError &&
                    error.allowRetry &&
                    decodingMode === "full") {
                    //if a retry happens, we've got to do several things in order to switch to ABI mode:
                    //1. mark that we're switching to ABI mode;
                    decodingMode = "abi";
                    //2. abify all previously decoded values;
                    decodedArguments = decodedArguments.map(argumentDecoding => (Object.assign(Object.assign({}, argumentDecoding), { value: abify_1.abifyResult(argumentDecoding.value, info.userDefinedTypes) })));
                    //3. retry this particular decode in ABI mode.
                    try {
                        value = yield* decode_1.default(abify_1.abifyType(argumentAllocation.type, info.userDefinedTypes), //type is now abified!
                        argumentAllocation.pointer, info, {
                            strictAbiMode: true //turns on STRICT MODE to cause more errors to be thrown
                            //retries no longer allowed, not that this has an effect
                        });
                    }
                    catch (_) {
                        //if an error occurred on the retry, this isn't a valid decoding!
                        debug("rejected due to exception on retry");
                        continue allocationAttempts;
                    }
                    //4. the remaining parameters will then automatically be decoded in ABI mode due to (1),
                    //so we don't need to do anything special there.
                }
                else {
                    //if any other sort of error occurred, this isn't a valid decoding!
                    debug("rejected due to exception on first try: %O", error);
                    continue allocationAttempts;
                }
            }
            const name = argumentAllocation.name;
            const indexed = argumentAllocation.pointer.location === "eventtopic";
            decodedArguments.push(name //deliberate general falsiness test
                ? { name, indexed, value }
                : { indexed, value });
        }
        //OK, so, having decoded the result, the question is: does it reencode to the original?
        //first, we have to filter out the indexed arguments, and also get rid of the name information
        const nonIndexedValues = decodedArguments
            .filter(argument => !argument.indexed)
            .map(argument => argument.value);
        //now, we can encode!
        const reEncodedData = AbiData.Encode.encodeTupleAbi(nonIndexedValues, info.allocations.abi);
        const encodedData = info.state.eventdata; //again, not great to read this directly, but oh well
        //are they equal?
        if (!Evm.Utils.equalData(reEncodedData, encodedData)) {
            //if not, this allocation doesn't work
            debug("rejected due to [non-indexed] mismatch");
            continue;
        }
        //one last check -- let's check that the indexed arguments match up, too
        const indexedValues = decodedArguments
            .filter(argument => argument.indexed)
            .map(argument => argument.value);
        const reEncodedTopics = indexedValues.map(Topic.Encode.encodeTopic);
        const encodedTopics = info.state.eventtopics;
        //now: do *these* match?
        const selectorAdjustment = allocation.anonymous ? 0 : 1;
        for (let i = 0; i < reEncodedTopics.length; i++) {
            if (!Evm.Utils.equalData(reEncodedTopics[i], encodedTopics[i + selectorAdjustment])) {
                debug("rejected due to indexed mismatch");
                continue allocationAttempts;
            }
        }
        //if we've made it here, the allocation works!  hooray!
        debug("allocation accepted!");
        let decoding;
        if (allocation.abi.anonymous) {
            decoding = {
                kind: "anonymous",
                definedIn: contractType,
                class: emittingContractType,
                abi: allocation.abi,
                arguments: decodedArguments,
                decodingMode
            };
        }
        else {
            decoding = {
                kind: "event",
                definedIn: contractType,
                class: emittingContractType,
                abi: allocation.abi,
                arguments: decodedArguments,
                selector,
                decodingMode
            };
        }
        decodings.push(decoding);
        //if we've made this far (so this allocation works), and we were passed an
        //ID, and it matches this ID, bail out & return this as the *only* decoding
        if (options.id && allocation.id === options.id) {
            return [decoding];
        }
    }
    return decodings;
}
exports.decodeEvent = decodeEvent;
const errorSelector = Conversion.toBytes(Web3Utils.soliditySha3({
    type: "string",
    value: "Error(string)"
})).subarray(0, Evm.Utils.SELECTOR_SIZE);
const panicSelector = Conversion.toBytes(Web3Utils.soliditySha3({
    type: "string",
    value: "Panic(uint256)"
})).subarray(0, Evm.Utils.SELECTOR_SIZE);
const defaultRevertAllocations = [
    {
        kind: "revert",
        allocationMode: "full",
        selector: errorSelector,
        abi: {
            name: "Error",
            type: "error",
            inputs: [
                {
                    name: "",
                    type: "string",
                    internalType: "string"
                }
            ]
        },
        definedIn: null,
        arguments: [
            {
                name: "",
                pointer: {
                    location: "returndata",
                    start: errorSelector.length,
                    length: Evm.Utils.WORD_SIZE
                },
                type: {
                    typeClass: "string",
                    typeHint: "string"
                }
            }
        ]
    },
    {
        kind: "revert",
        allocationMode: "full",
        selector: panicSelector,
        abi: {
            name: "Panic",
            type: "error",
            inputs: [
                {
                    name: "",
                    type: "uint256",
                    internalType: "uint256"
                }
            ]
        },
        definedIn: null,
        arguments: [
            {
                name: "",
                pointer: {
                    location: "returndata",
                    start: panicSelector.length,
                    length: Evm.Utils.WORD_SIZE
                },
                type: {
                    typeClass: "uint",
                    bits: Evm.Utils.WORD_SIZE * 8,
                    typeHint: "uint256"
                }
            }
        ]
    }
];
const defaultEmptyAllocations = [
    {
        kind: "failure",
        allocationMode: "full",
        selector: new Uint8Array(),
        arguments: []
    },
    {
        kind: "selfdestruct",
        allocationMode: "full",
        selector: new Uint8Array(),
        arguments: []
    }
];
/**
 * If there are multiple possibilities, they're always returned in
 * the order: return, revert, returnmessage, failure, empty, bytecode, unknownbytecode
 * Moreover, within "revert", builtin ones are put above custom ones
 * @Category Decoding
 */
function* decodeReturndata(info, successAllocation, //null here must be explicit
status, //you can pass this to indicate that you know the status,
id //useful when status = false
) {
    let possibleAllocations;
    const selector = Conversion.toHexString(info.state.returndata.slice(0, 4));
    const contextHash = (info.currentContext || { context: "" }).context; //HACK: "" is used to represent no context
    const customRevertAllocations = (((info.allocations.returndata || { [contextHash]: {} })[contextHash]) || { [selector]: [] })[selector] || [];
    if (successAllocation === null) {
        possibleAllocations = [
            ...defaultRevertAllocations,
            ...customRevertAllocations,
            ...defaultEmptyAllocations
        ];
    }
    else {
        switch (successAllocation.kind) {
            case "return":
                possibleAllocations = [
                    successAllocation,
                    ...defaultRevertAllocations,
                    ...customRevertAllocations,
                    ...defaultEmptyAllocations
                ];
                break;
            case "bytecode":
                possibleAllocations = [
                    ...defaultRevertAllocations,
                    ...customRevertAllocations,
                    ...defaultEmptyAllocations,
                    successAllocation
                ];
                break;
            case "returnmessage":
                possibleAllocations = [
                    ...defaultRevertAllocations,
                    ...customRevertAllocations,
                    successAllocation,
                    ...defaultEmptyAllocations
                ];
                break;
            //Other cases shouldn't happen so I'm leaving them to cause errors!
        }
    }
    let decodings = [];
    allocationAttempts: for (const allocation of possibleAllocations) {
        debug("trying allocation: %O", allocation);
        //before we attempt to use this allocation, we check: does the selector match?
        let encodedData = info.state.returndata; //again, not great to read this directly, but oh well
        const encodedPrefix = encodedData.subarray(0, allocation.selector.length);
        if (!Evm.Utils.equalData(encodedPrefix, allocation.selector)) {
            continue;
        }
        encodedData = encodedData.subarray(allocation.selector.length); //slice off the selector for later
        //also we check, does the status match?
        if (status !== undefined) {
            const successKinds = [
                "return",
                "selfdestruct",
                "bytecode",
                "returnmessage"
            ];
            const failKinds = ["failure", "revert"];
            if (status) {
                if (!successKinds.includes(allocation.kind)) {
                    continue;
                }
            }
            else {
                if (!failKinds.includes(allocation.kind)) {
                    continue;
                }
            }
        }
        if (allocation.kind === "bytecode") {
            //bytecode is special and can't really be integrated with the other cases.
            //so it gets its own function.
            const decoding = yield* decodeBytecode(info);
            if (decoding) {
                decodings.push(decoding);
            }
            continue;
        }
        if (allocation.kind === "returnmessage") {
            //this kind is also special, though thankfully it's easier
            const decoding = {
                kind: "returnmessage",
                status: true,
                data: Conversion.toHexString(info.state.returndata),
                decodingMode: allocation.allocationMode
            };
            decodings.push(decoding);
            continue;
        }
        let decodingMode = allocation.allocationMode; //starts out here; degrades to abi if necessary
        //you can't map with a generator, so we have to do this map manually
        let decodedArguments = [];
        for (const argumentAllocation of allocation.arguments) {
            let value;
            //if in full mode, use the allocation's listed data type.
            //if in ABI mode, abify it before use.
            let dataType = decodingMode === "full"
                ? argumentAllocation.type
                : abify_1.abifyType(argumentAllocation.type, info.userDefinedTypes);
            //now, let's decode!
            try {
                value = yield* decode_1.default(dataType, argumentAllocation.pointer, info, {
                    abiPointerBase: allocation.selector.length,
                    strictAbiMode: true,
                    allowRetry: decodingMode === "full" //this option is unnecessary but including for clarity
                });
                debug("value on first try: %O", value);
            }
            catch (error) {
                if (error instanceof errors_1.StopDecodingError &&
                    error.allowRetry &&
                    decodingMode === "full") {
                    debug("retry!");
                    //if a retry happens, we've got to do several things in order to switch to ABI mode:
                    //1. mark that we're switching to ABI mode;
                    decodingMode = "abi";
                    //2. abify all previously decoded values;
                    decodedArguments = decodedArguments.map(argumentDecoding => (Object.assign(Object.assign({}, argumentDecoding), { value: abify_1.abifyResult(argumentDecoding.value, info.userDefinedTypes) })));
                    //3. retry this particular decode in ABI mode.
                    try {
                        value = yield* decode_1.default(abify_1.abifyType(argumentAllocation.type, info.userDefinedTypes), //type is now abified!
                        argumentAllocation.pointer, info, {
                            abiPointerBase: allocation.selector.length,
                            strictAbiMode: true //turns on STRICT MODE to cause more errors to be thrown
                            //retries no longer allowed, not that this has an effect
                        });
                        debug("value on retry: %O", value);
                    }
                    catch (_) {
                        //if an error occurred on the retry, this isn't a valid decoding!
                        debug("rejected due to exception on retry");
                        continue allocationAttempts;
                    }
                    //4. the remaining parameters will then automatically be decoded in ABI mode due to (1),
                    //so we don't need to do anything special there.
                }
                else {
                    //if any other sort of error occurred, this isn't a valid decoding!
                    debug("rejected due to exception on first try: %O", error);
                    continue allocationAttempts;
                }
            }
            const name = argumentAllocation.name;
            decodedArguments.push(name //deliberate general falsiness test
                ? { name, value }
                : { value });
        }
        //OK, so, having decoded the result, the question is: does it reencode to the original?
        //first, we have to filter out the indexed arguments, and also get rid of the name information
        debug("decodedArguments: %O", decodedArguments);
        const decodedArgumentValues = decodedArguments.map(argument => argument.value);
        const reEncodedData = AbiData.Encode.encodeTupleAbi(decodedArgumentValues, info.allocations.abi);
        //are they equal? note the selector has been stripped off encodedData!
        if (!Evm.Utils.equalData(reEncodedData, encodedData)) {
            //if not, this allocation doesn't work
            debug("rejected due to mismatch");
            continue;
        }
        //if we've made it here, the allocation works!  hooray!
        debug("allocation accepted!");
        let decoding;
        switch (allocation.kind) {
            case "return":
                decoding = {
                    kind: "return",
                    status: true,
                    arguments: decodedArguments,
                    decodingMode
                };
                break;
            case "revert":
                decoding = {
                    kind: "revert",
                    abi: allocation.abi,
                    definedIn: allocation.definedIn,
                    status: false,
                    arguments: decodedArguments,
                    decodingMode
                };
                break;
            case "selfdestruct":
                decoding = {
                    kind: "selfdestruct",
                    status: true,
                    decodingMode
                };
                break;
            case "failure":
                decoding = {
                    kind: "failure",
                    status: false,
                    decodingMode
                };
                break;
        }
        decodings.push(decoding);
        //if we've made this far (so this allocation works), and we were passed an
        //ID, and it matches this ID, bail out & return this as the *only* decoding
        if (id && allocation.kind === "revert" && allocation.id === id) {
            return [decoding];
        }
    }
    return decodings;
}
exports.decodeReturndata = decodeReturndata;
//note: requires the bytecode to be in returndata, not code
function* decodeBytecode(info) {
    let decodingMode = "full"; //as always, degrade as necessary
    const bytecode = Conversion.toHexString(info.state.returndata);
    const context = Contexts.Utils.findContext(info.contexts, bytecode);
    if (!context) {
        return {
            kind: "unknownbytecode",
            status: true,
            decodingMode: "full",
            bytecode
        };
    }
    const contractType = Contexts.Import.contextToType(context);
    //now: ignore original allocation (which we didn't even pass :) )
    //and lookup allocation by context
    const allocation = info.allocations.calldata.constructorAllocations[context.context].output;
    debug("bytecode allocation: %O", allocation);
    //now: add immutables if applicable
    let immutables;
    if (allocation.immutables) {
        immutables = [];
        //NOTE: if we're in here, we can assume decodingMode === "full"
        for (const variable of allocation.immutables) {
            const dataType = variable.type; //we don't conditioning on decodingMode here because we know it
            let value;
            try {
                value = yield* decode_1.default(dataType, variable.pointer, info, {
                    allowRetry: true,
                    strictAbiMode: true,
                    paddingMode: "defaultOrZero"
                });
            }
            catch (error) {
                if (error instanceof errors_1.StopDecodingError && error.allowRetry) {
                    //we "retry" by... not bothering with immutables :P
                    //(but we do set the mode to ABI)
                    decodingMode = "abi";
                    immutables = undefined;
                    break;
                }
                else {
                    //otherwise, this isn't a valid decoding I guess
                    return null;
                }
            }
            immutables.push({
                name: variable.name,
                class: variable.definedIn,
                value
            });
        }
    }
    let decoding = {
        kind: "bytecode",
        status: true,
        decodingMode,
        bytecode,
        immutables,
        class: contractType
    };
    //finally: add address if applicable
    if (allocation.delegatecallGuard) {
        decoding.address = Web3Utils.toChecksumAddress(bytecode.slice(4, 4 + 2 * Evm.Utils.ADDRESS_SIZE) //4 = "0x73".length
        );
    }
    return decoding;
}
/**
 * Decodes the return data from a failed call.
 *
 * @param returndata The returned data, as a Uint8Array.
 * @return An array of possible decodings.  At the moment it's
 *   impossible for there to be more than one.  (If the call didn't actually
 *   fail, or failed in a nonstandard way, you may get no decodings at all, though!)
 *
 *   Decodings can either be decodings of revert messages, or decodings
 *   indicating that there was no revert message.  If somehow both were to be
 *   possible, they'd go in that order, although as mentioned, there (at least
 *   currently) isn't any way for that to occur.
 * @Category Decoding convenience
 */
function decodeRevert(returndata) {
    //coercing because TS doesn't know it'll finish in one go
    return decodeReturndata({
        allocations: {},
        state: {
            storage: {},
            returndata
        }
    }, null, false).next().value;
}
exports.decodeRevert = decodeRevert;
//# sourceMappingURL=core.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/core.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/index.js", {"./allocate":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/allocate/index.js","./decode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/decode/index.js","./encode":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/encode/index.js","./import":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/import/index.js","./types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/types.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/index.js
      return function (require, module, exports) {
"use strict";
/**
 * For allocation, encoding, and decoding of locations related to the ABI
 * (calldata in Solidity, events, etc.)
 *
 * @category ABI data location
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = exports.Import = exports.Decode = exports.Encode = exports.Allocate = void 0;
const Allocate = __importStar(require("./allocate"));
exports.Allocate = Allocate;
const Encode = __importStar(require("./encode"));
exports.Encode = Encode;
const Decode = __importStar(require("./decode"));
exports.Decode = Decode;
const Import = __importStar(require("./import"));
exports.Import = Import;
__exportStar(require("./types"), exports); //can't do 'export type *'
const Utils = __importStar(require("./utils"));
exports.Utils = Utils;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/abi-data/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/contexts/index.js", {"./import":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/contexts/import/index.js","./types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/contexts/types.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/contexts/utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/contexts/index.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = exports.Import = void 0;
__exportStar(require("./types"), exports); //'export type *' is not allowed
const Import = __importStar(require("./import"));
exports.Import = Import;
const Utils = __importStar(require("./utils"));
exports.Utils = Utils;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/contexts/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compiler/index.js", {"./types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compiler/types.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compiler/utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compiler/index.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
__exportStar(require("./types"), exports); //'export type *' is not allowed
const Utils = __importStar(require("./utils"));
exports.Utils = Utils;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/compiler/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/errors.js", {"@truffle/codec":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/errors.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoProviderError = exports.ArrayIndexOutOfBoundsError = exports.MemberNotFoundError = exports.VariableNotFoundError = exports.InvalidAddressError = exports.ContractAllocationFailedError = exports.ContractNotFoundError = exports.ContractBeingDecodedHasNoNodeError = void 0;
const codec_1 = require("@truffle/codec");
/**
 * This error indicates that the contract you are attempting to decode does not have AST
 * information associated with it, or that the decoder cannot find it.  This error will
 * be thrown if you attempt to use functions that require AST information with such a contract.
 * @category Exception
 */
class ContractBeingDecodedHasNoNodeError extends Error {
    constructor(contractName, compilationId) {
        const message = `Contract ${contractName} does not appear to have been compiled with Solidity (cannot locate contract node)`;
        super(message);
        this.contractName = contractName;
        this.compilationId = compilationId;
        this.name = "ContractBeingDecodedHasNoNodeError";
    }
}
exports.ContractBeingDecodedHasNoNodeError = ContractBeingDecodedHasNoNodeError;
/**
 * This error indicates that the contract you are attempting to decode could not be found in
 * the project info.  This error will be thrown if you attempt to spawn a contract decoder or
 * contract instance decoder for a contract not appearing in the project info.
 * @category Exception
 */
class ContractNotFoundError extends Error {
    constructor(contractName, bytecode, deployedBytecode, address) {
        let message;
        if (contractName) {
            message = `Contract ${contractName} could not be found in the project information`;
        }
        else {
            message = `Contract at ${address} could not be found in the project information`;
        }
        super(message);
        this.contractName = contractName;
        this.bytecode = bytecode;
        this.deployedBytecode = deployedBytecode;
        this.address = address;
        this.name = "ContractNotFoundError";
    }
}
exports.ContractNotFoundError = ContractNotFoundError;
/**
 * This error indicates that something went wrong while attempting to determine the location
 * of this contract's state variables.  This error will be thrown if you attempt to use
 * decoding functions after something went wrong during setup.  Unfortunately, we can't
 * always avoid this at the moment; we're hoping to make this more robust in the future
 * with Truffle DB.  In the meantime, it is at least worth noting that you should not encounter
 * this error if your entire project was written in Solidity and all compiled at once.  Sorry.
 * @category Exception
 */
class ContractAllocationFailedError extends Error {
    constructor(id, contractName, compilationId) {
        super(`No allocation found for contract ID ${id} (${contractName}) in compilation ${compilationId}`);
        this.id = id;
        this.contractName = contractName;
        this.compilationId = compilationId;
        this.name = "ContractAllocationFailedError";
    }
}
exports.ContractAllocationFailedError = ContractAllocationFailedError;
/**
 * This error indicates that an invalid address was passed to one of the
 * contract instance decoder spawners ([[forContractInstance]], etc).  Valid
 * addresses are those that Web3 accepts; i.e., either those with correct
 * checksums, or those that are all-lowercase or all-uppercase to deliberately
 * circumvent the checksum.
 * @category Exception
 */
class InvalidAddressError extends Error {
    constructor(address) {
        super(`Invalid address ${address}`);
        this.address = address;
        this.name = "InvalidAddressError";
    }
}
exports.InvalidAddressError = InvalidAddressError;
/**
 * This error indicates that the user requested a variable that does not exist.
 * @category Exception
 */
class VariableNotFoundError extends Error {
    constructor(nameOrId) {
        super(`No such variable ${nameOrId}`);
        this.nameOrId = nameOrId;
        this.name = "VariableNotFoundError";
    }
}
exports.VariableNotFoundError = VariableNotFoundError;
/**
 * This error indicates that the user requested a struct member that does not
 * exist.
 * @category Exception
 */
class MemberNotFoundError extends Error {
    constructor(memberName, structType, variable, indices) {
        const message = `Member ${memberName} does not exist on struct type ${codec_1.Format.Types.typeStringWithoutLocation(structType)} in attempting to access variable ${variable}$, indexSequence ${indices.join(", ")}`;
        super(message);
        this.memberName = memberName;
        this.structType = structType;
        this.variable = variable;
        this.indices = indices;
        this.name = "MemberNotFoundError";
    }
}
exports.MemberNotFoundError = MemberNotFoundError;
/**
 * This error indicates that the user requested an array index that is out
 * of bounds.  Note that currently this error is only thrown when an index
 * is requested that is outside *static* bounds; dynamic array bounds are
 * currently not checked.
 * @category Exception
 */
class ArrayIndexOutOfBoundsError extends Error {
    constructor(index, length, variable, indices) {
        const message = `Index ${index} is out of bounds for array of length ${length} in attempting to access variable ${variable}, index sequence ${indices.join(", ")}`;
        super(message);
        this.index = index.clone();
        this.length = length.clone();
        this.variable = variable;
        this.indices = indices;
        this.name = "ArrayIndexOutOfBoundsError";
    }
}
exports.ArrayIndexOutOfBoundsError = ArrayIndexOutOfBoundsError;
/**
 * This error indicates that no provider was passed to the decoder.
 */
class NoProviderError extends Error {
    constructor() {
        super("No provider was given for the decoder to use.");
        this.name = "NoProviderError";
    }
}
exports.NoProviderError = NoProviderError;
//# sourceMappingURL=errors.js.map
      };
    };
  }
}, {package:"@truffle/decoder",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/errors.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/decoders.js", {"./ProviderAdapter":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/ProviderAdapter.js","./errors":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/errors.js","./utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/utils.js","@truffle/abi-utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/abi-utils/dist/lib/index.js","@truffle/codec":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/index.js","@truffle/compile-common":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/compile-common/dist/src/index.js","@truffle/source-map-utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/source-map-utils/index.js","bn.js":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/node_modules/bn.js/lib/bn.js","debug":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/debug/src/browser.js","web3-utils":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/node_modules/web3-utils/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/decoders.js
      return function (require, module, exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractInstanceDecoder = exports.ContractDecoder = exports.ProjectDecoder = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("decoder:decoders");
const Abi = __importStar(require("@truffle/abi-utils"));
const Codec = __importStar(require("@truffle/codec"));
const codec_1 = require("@truffle/codec");
const Utils = __importStar(require("./utils"));
const web3_utils_1 = __importDefault(require("web3-utils"));
const bn_js_1 = __importDefault(require("bn.js"));
const errors_1 = require("./errors");
const compile_common_1 = require("@truffle/compile-common");
const ProviderAdapter_1 = require("./ProviderAdapter");
//sorry for the untyped import, but...
const SourceMapUtils = require("@truffle/source-map-utils");
/**
 * The ProjectDecoder class.  Decodes transactions and logs.  See below for a method listing.
 * @category Decoder
 */
class ProjectDecoder {
    /**
     * @protected
     */
    constructor(compilations, provider, ensSettings) {
        this.contexts = {}; //all contexts
        this.deployedContexts = {};
        this.contractsAndContexts = [];
        this.codeCache = {};
        if (!provider) {
            throw new errors_1.NoProviderError();
        }
        this.providerAdapter = new ProviderAdapter_1.ProviderAdapter(provider);
        this.compilations = compilations;
        this.ensSettings = ensSettings || {};
        let allocationInfo;
        ({
            definitions: this.referenceDeclarations,
            typesByCompilation: this.userDefinedTypesByCompilation,
            types: this.userDefinedTypes
        } = codec_1.Compilations.Utils.collectUserDefinedTypesAndTaggedOutputs(this.compilations));
        ({
            contexts: this.contexts,
            deployedContexts: this.deployedContexts,
            contractsAndContexts: this.contractsAndContexts,
            allocationInfo
        } = codec_1.AbiData.Allocate.Utils.collectAllocationInfo(this.compilations));
        this.allocations = {};
        this.allocations.abi = codec_1.AbiData.Allocate.getAbiAllocations(this.userDefinedTypes);
        this.allocations.storage = codec_1.Storage.Allocate.getStorageAllocations(this.userDefinedTypesByCompilation); //not used by project decoder itself, but used by contract decoder
        this.allocations.calldata = codec_1.AbiData.Allocate.getCalldataAllocations(allocationInfo, this.referenceDeclarations, this.userDefinedTypes, this.allocations.abi);
        this.allocations.returndata = codec_1.AbiData.Allocate.getReturndataAllocations(allocationInfo, this.referenceDeclarations, this.userDefinedTypes, this.allocations.abi);
        this.allocations.event = codec_1.AbiData.Allocate.getEventAllocations(allocationInfo, this.referenceDeclarations, this.userDefinedTypes, this.allocations.abi);
        this.allocations.state = codec_1.Storage.Allocate.getStateAllocations(allocationInfo, this.referenceDeclarations, this.userDefinedTypes, this.allocations.storage);
        debug("done with allocation");
    }
    /**
     * @protected
     */
    getCode(address, block) {
        return __awaiter(this, void 0, void 0, function* () {
            //if pending, ignore the cache
            if (block === "pending") {
                return codec_1.Conversion.toBytes(yield this.providerAdapter.getCode(address, block));
            }
            //otherwise, start by setting up any preliminary layers as needed
            if (this.codeCache[block] === undefined) {
                this.codeCache[block] = {};
            }
            //now, if we have it cached, just return it
            if (this.codeCache[block][address] !== undefined) {
                return this.codeCache[block][address];
            }
            //otherwise, get it, cache it, and return it
            let code = codec_1.Conversion.toBytes(yield this.providerAdapter.getCode(address, block));
            this.codeCache[block][address] = code;
            return code;
        });
    }
    /**
     * @protected
     */
    regularizeBlock(block) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof block === "number" || block === "pending") {
                return block;
            }
            if (block === null) {
                return "pending";
            }
            return parseInt((yield this.providerAdapter.getBlockByNumber(block)).number);
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Takes a [[Transaction]] object and decodes it.  The result is a
     * [[CalldataDecoding]]; see the documentation on that interface for more.
     *
     * Note that decoding of transactions sent to libraries is presently not
     * supported and may have unreliable results.  Limited support for this is
     * planned for future versions.
     * @param transaction The transaction to be decoded.
     */
    decodeTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.decodeTransactionWithAdditionalContexts(transaction);
        });
    }
    /**
     * @protected
     */
    decodeTransactionWithAdditionalContexts(transaction, additionalContexts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const block = transaction.blockNumber;
            const blockNumber = yield this.regularizeBlock(block);
            const isConstructor = transaction.to === null;
            const context = yield this.getContextByAddress(transaction.to, blockNumber, transaction.input, additionalContexts);
            const data = codec_1.Conversion.toBytes(transaction.input);
            const info = {
                state: {
                    storage: {},
                    calldata: data
                },
                userDefinedTypes: this.userDefinedTypes,
                allocations: this.allocations,
                contexts: Object.assign(Object.assign({}, this.deployedContexts), additionalContexts),
                currentContext: context
            };
            const decoder = codec_1.decodeCalldata(info, isConstructor);
            let result = decoder.next();
            while (result.done === false) {
                let request = result.value;
                let response;
                switch (request.type) {
                    case "code":
                        response = yield this.getCode(request.address, blockNumber);
                        break;
                    //not writing a storage case as it shouldn't occur here!
                }
                result = decoder.next(response);
            }
            //at this point, result.value holds the final value
            return result.value;
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Takes a [[Log]] object and decodes it.  Logs can be ambiguous, so this so
     * this function returns an array of [[LogDecoding|LogDecodings]].
     *
     * Note that logs are decoded in strict mode, so (with one exception) none of the decodings should
     * contain errors; if a decoding would contain an error, instead it is simply excluded from the
     * list of possible decodings.  The one exception to this is that indexed parameters of reference
     * type cannot meaningfully be decoded, so those will decode to an error.
     *
     * If there are multiple possible decodings, they will always be listed in the following order:
     *
     * 1. Non-anonymous events coming from the contract itself (these will moreover be ordered
     *   from most derived to most base)
     * 2. Non-anonymous events coming from libraries
     * 3. Anonymous events coming from the contract itself (again, ordered from most derived
     *   to most base)
     * 4. Anonymous events coming from libraries
     *
     * You can check the kind and class.contractKind fields to distinguish between these.
     *
     * If no possible decodings are found, the returned array of decodings will be empty.
     *
     * Note that different decodings may use different decoding modes.
     *
     * Changing `options.extras = "on"` or `options.extras = "necessary"` will change the
     * above behavior; see the documentation on [[ExtrasAllowed]] for more.
     *
     * @param log The log to be decoded.
     * @param options Options for controlling decoding.
     */
    decodeLog(log, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.decodeLogWithAdditionalOptions(log, options);
        });
    }
    /**
     * @protected
     */
    decodeLogWithAdditionalOptions(log, options = {}, additionalContexts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const block = log.blockNumber;
            const blockNumber = yield this.regularizeBlock(block);
            const data = codec_1.Conversion.toBytes(log.data);
            const topics = log.topics.map(codec_1.Conversion.toBytes);
            const info = {
                state: {
                    storage: {},
                    eventdata: data,
                    eventtopics: topics
                },
                userDefinedTypes: this.userDefinedTypes,
                allocations: this.allocations,
                contexts: Object.assign(Object.assign({}, this.deployedContexts), additionalContexts)
            };
            const decoder = codec_1.decodeEvent(info, log.address, options);
            let result = decoder.next();
            while (result.done === false) {
                let request = result.value;
                let response;
                switch (request.type) {
                    case "code":
                        response = yield this.getCode(request.address, blockNumber);
                        break;
                    //not writing a storage case as it shouldn't occur here!
                }
                result = decoder.next(response);
            }
            //at this point, result.value holds the final value
            return result.value;
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Gets all events meeting certain conditions and decodes them.
     * This function is fairly rudimentary at the moment but more functionality
     * will be added in the future.
     * @param options Used to determine what events to fetch and how to decode
     *   them; see the documentation on the [[EventOptions]] type for more.
     * @return An array of [[DecodedLog|DecodedLogs]].
     *   These consist of a log together with its possible decodings; see that
     *   type for more info.  And see [[decodeLog]] for more info on how log
     *   decoding works in general.
     * @example `events({name: "TestEvent"})` -- get events named "TestEvent"
     *   from the most recent block
     */
    events(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.eventsWithAdditionalContexts(options);
        });
    }
    /**
     * @protected
     */
    eventsWithAdditionalContexts(options = {}, additionalContexts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let { address, name, fromBlock, toBlock } = options;
            if (fromBlock === undefined) {
                fromBlock = "latest";
            }
            if (toBlock === undefined) {
                toBlock = "latest";
            }
            const fromBlockNumber = yield this.regularizeBlock(fromBlock);
            const toBlockNumber = yield this.regularizeBlock(toBlock);
            const logs = yield this.providerAdapter.getPastLogs({
                address,
                fromBlock: fromBlockNumber,
                toBlock: toBlockNumber
            });
            let events = yield Promise.all(logs.map((log) => __awaiter(this, void 0, void 0, function* () {
                return (Object.assign(Object.assign({}, log), { decodings: yield this.decodeLogWithAdditionalOptions(log, options, additionalContexts) }));
            })));
            debug("events: %o", events);
            //if a target name was specified, we'll restrict to events that decoded
            //to something with that name.  (note that only decodings with that name
            //will have been returned from decodeLogs in the first place)
            if (name !== undefined) {
                events = events.filter(event => event.decodings.length > 0);
            }
            return events;
        });
    }
    /**
     * Takes a [[CalldataDecoding]], which may have been produced in full mode or ABI mode,
     * and converts it to its ABI mode equivalent.  See the README for more information.
     *
     * Please only use on decodings produced by this same decoder instance; use
     * on decodings produced by other instances may not work consistently.
     * @param decoding The decoding to abify
     */
    abifyCalldataDecoding(decoding) {
        return Codec.abifyCalldataDecoding(decoding, this.userDefinedTypes);
    }
    /**
     * Takes a [[LogDecoding]], which may have been produced in full mode or ABI mode,
     * and converts it to its ABI mode equivalent.  See the README for more information.
     *
     * Please only use on decodings produced by this same decoder instance; use
     * on decodings produced by other instances may not work consistently.
     * @param decoding The decoding to abify
     */
    abifyLogDecoding(decoding) {
        return Codec.abifyLogDecoding(decoding, this.userDefinedTypes);
    }
    /**
     * Takes a [[ReturndataDecoding]], which may have been produced in full mode
     * or ABI mode, and converts it to its ABI mode equivalent.  See the README
     * for more information.
     *
     * Please only use on decodings produced by this same decoder instance; use
     * on decodings produced by other instances may not work consistently.
     * @param decoding The decoding to abify
     */
    abifyReturndataDecoding(decoding) {
        return Codec.abifyReturndataDecoding(decoding, this.userDefinedTypes);
    }
    //normally, this function gets the code of the given address at the given block,
    //and checks this against the known contexts to determine the contract type
    //however, if this fails and constructorBinary is passed in, it will then also
    //attempt to determine it from that
    getContextByAddress(address, block, constructorBinary, additionalContexts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let code;
            if (address !== null) {
                code = codec_1.Conversion.toHexString(yield this.getCode(address, block));
            }
            else if (constructorBinary) {
                code = constructorBinary;
            }
            //if neither of these hold... we have a problem
            let contexts = Object.assign(Object.assign({}, this.contexts), additionalContexts);
            return codec_1.Contexts.Utils.findContext(contexts, code);
        });
    }
    //finally: the spawners!
    /**
     * **This method is asynchronous.**
     *
     * Constructs a contract decoder for a given contract artifact.
     * @param artifact The artifact for the contract.
     *
     *   A contract constructor object may be substituted for the artifact, so if
     *   you're not sure which you're dealing with, it's OK.
     *
     *   Note: The artifact must be for a contract that the decoder knows about;
     *   otherwise you will have problems.
     */
    forArtifact(artifact) {
        return __awaiter(this, void 0, void 0, function* () {
            const deployedBytecode = compile_common_1.Shims.NewToLegacy.forBytecode(artifact.deployedBytecode);
            const bytecode = compile_common_1.Shims.NewToLegacy.forBytecode(artifact.bytecode);
            const { compilation, contract } = this.compilations.reduce((foundSoFar, compilation) => {
                if (foundSoFar) {
                    return foundSoFar;
                }
                const contractFound = compilation.contracts.find(contract => {
                    if (bytecode) {
                        return (compile_common_1.Shims.NewToLegacy.forBytecode(contract.bytecode) === bytecode &&
                            contract.contractName ===
                                (artifact.contractName || artifact.contract_name));
                    }
                    else if (deployedBytecode) {
                        //I'll just go by one of bytecode or deployedBytecode;
                        //no real need to check both
                        return (compile_common_1.Shims.NewToLegacy.forBytecode(contract.deployedBytecode) ===
                            deployedBytecode &&
                            contract.contractName ===
                                (artifact.contractName || artifact.contract_name));
                    }
                    else {
                        //WARNING: better hope we don't end up here!
                        return (contract.contractName ===
                            (artifact.contractName || artifact.contract_name));
                    }
                });
                if (contractFound) {
                    return { compilation, contract: contractFound };
                }
                else {
                    return undefined;
                }
            }, undefined);
            if (contract === undefined) {
                throw new errors_1.ContractNotFoundError(artifact.contractName, bytecode, deployedBytecode, undefined);
            }
            let contractDecoder = new ContractDecoder(contract, compilation, this, artifact);
            yield contractDecoder.init();
            return contractDecoder;
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Constructs a contract instance decoder for a given instance of a contract in this
     * project.
     * @param artifact The artifact for the contract.
     *
     *   A contract constructor object may be substituted for the artifact, so if
     *   you're not sure which you're dealing with, it's OK.
     *
     *   Note: The artifact must be for a contract that the decoder knows about;
     *   otherwise you will have problems.
     * @param address The address of the contract instance to decode.  If left out, it will be autodetected.
     *   If an invalid address is provided, this method will throw an exception.
     */
    forInstance(artifact, address) {
        return __awaiter(this, void 0, void 0, function* () {
            let contractDecoder = yield this.forArtifact(artifact);
            return yield contractDecoder.forInstance(address);
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Constructs a contract instance decoder for a given instance of a contract in this
     * project.  Unlike [[forInstance]], this method doesn't require an artifact; it
     * will automatically detect the class of the given contract.  If it's not in
     * the project, or the decoder can't identify it, you'll get an exception.
     * @param address The address of the contract instance to decode.
     *   If an invalid address is provided, this method will throw an exception.
     * @param block You can include this argument to specify that this should be
     *   based on the addresses content's at a specific block (if say the contract
     *   has since self-destructed).
     */
    forAddress(address, block = "latest") {
        return __awaiter(this, void 0, void 0, function* () {
            if (!web3_utils_1.default.isAddress(address)) {
                throw new errors_1.InvalidAddressError(address);
            }
            address = web3_utils_1.default.toChecksumAddress(address);
            const blockNumber = yield this.regularizeBlock(block);
            const deployedBytecode = codec_1.Conversion.toHexString(yield this.getCode(address, blockNumber));
            const contractAndContexts = this.contractsAndContexts.find(({ deployedContext }) => deployedContext &&
                codec_1.Contexts.Utils.matchContext(deployedContext, deployedBytecode));
            if (!contractAndContexts) {
                throw new errors_1.ContractNotFoundError(undefined, undefined, deployedBytecode, address);
            }
            const { contract, compilationId } = contractAndContexts;
            const compilation = this.compilations.find(compilation => compilation.id === compilationId);
            let contractDecoder = new ContractDecoder(contract, compilation, this); //no artifact
            //(artifact is only used for address autodetection, and here we're supplying the
            //address, so this won't cause any problems)
            yield contractDecoder.init();
            return yield contractDecoder.forInstance(address);
        });
    }
    //the following functions are intended for internal use only
    /**
     * @protected
     */
    getReferenceDeclarations() {
        return this.referenceDeclarations;
    }
    /**
     * @protected
     */
    getUserDefinedTypes() {
        return this.userDefinedTypes;
    }
    /**
     * @protected
     */
    getAllocations() {
        return this.allocations;
    }
    /**
     * @protected
     */
    getProviderAdapter() {
        return this.providerAdapter;
    }
    /**
     * @protected
     */
    getEnsSettings() {
        return this.ensSettings;
    }
    /**
     * @protected
     */
    getDeployedContexts() {
        return this.deployedContexts;
    }
}
exports.ProjectDecoder = ProjectDecoder;
/**
 * The ContractDecoder class.  Decodes return values, and spawns the
 * [[ContractInstanceDecoder]] class.  Also, decodes transactions logs.  See
 * below for a method listing.
 * @category Decoder
 */
class ContractDecoder {
    /**
     * @protected
     */
    constructor(contract, compilation, projectDecoder, artifact) {
        this.artifact = artifact; //may be undefined; only used for address autodetection in instance decoder
        this.contract = contract;
        this.compilation = compilation;
        this.projectDecoder = projectDecoder;
        this.providerAdapter = projectDecoder.getProviderAdapter();
        this.contexts = projectDecoder.getDeployedContexts();
        this.userDefinedTypes = this.projectDecoder.getUserDefinedTypes();
        this.contractNode = codec_1.Compilations.Utils.getContractNode(this.contract, this.compilation);
        this.allocations = this.projectDecoder.getAllocations();
        //note: ordinarily this.contract.deployedBytecode should equal artifact.deployedBytecode
        //at this point, so it may seem strange that I'm using this longer version (but not
        //doing anything to handle the case we're there not).  This is basically because I don't
        //think such error handling is really necessary right now, but this way at least it won't
        //crash.
        if (this.contract.deployedBytecode &&
            this.contract.deployedBytecode !== "0x") {
            const unnormalizedContext = codec_1.Contexts.Utils.makeContext(this.contract, this.contractNode, this.compilation);
            this.contextHash = unnormalizedContext.context;
            //we now throw away the unnormalized context, instead fetching the correct one from
            //this.contexts (which is normalized) via the context getter below
        }
        else {
            //if there's no bytecode, allocate output data in ABI mode anyway
            const referenceDeclarations = this.projectDecoder.getReferenceDeclarations();
            const compiler = this.compilation.compiler || this.contract.compiler;
            this.noBytecodeAllocations = Object.values(codec_1.AbiData.Allocate.getCalldataAllocations([
                {
                    abi: Abi.normalize(this.contract.abi),
                    compilationId: this.compilation.id,
                    compiler,
                    contractNode: this.contractNode,
                    deployedContext: codec_1.Contexts.Utils.makeContext(Object.assign(Object.assign({}, this.contract), { deployedBytecode: "0x" //only time this should ever appear in a context!
                     }), this.contractNode, this.compilation)
                }
            ], referenceDeclarations, this.userDefinedTypes, this.allocations.abi).functionAllocations)[0];
        }
        if (this.contractNode) {
            //note: there used to be code here to do state allocations for the contract,
            //but now the project decoder does this all up-front
            //(I could change this back if for some reason performance is an issue,
            //but this way is simpler TBH)
            //NOTE: does this change make this intermediate class essentially pointless?
            //Yes.  But not going to get rid of it now!
            if (this.allocations.state[this.compilation.id] &&
                this.allocations.state[this.compilation.id][this.contractNode.id]) {
                this.stateVariableReferences = this.allocations.state[this.compilation.id][this.contractNode.id].members;
            }
            //if it doesn't exist, we will leave it undefined, and then throw an exception when
            //we attempt to decode
        }
    }
    /**
     * @protected
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.contractNetwork = yield this.providerAdapter.getNetworkId();
        });
    }
    get context() {
        return this.contexts[this.contextHash];
    }
    /**
     * **This method is asynchronous.**
     *
     * Decodes the return value of a call.  Return values can be ambiguous, so this so
     * this function returns an array of [[ReturndataDecoding|ReturndataDecodings]].
     *
     * Note that return values are decoded in strict mode, so none of the decodings should
     * contain errors; if a decoding would contain an error, instead it is simply excluded from the
     * list of possible decodings.
     *
     * If there are multiple possible decodings, they will always be listed in the following order:
     * 1. The decoded return value from a successful call.
     * 2. The decoded revert message from a call that reverted with a message.
     * 3. A decoding indicating that the call reverted with no message.
     * 4. A decoding indicating that the call self-destructed.
     *
     * You can check the kind and field to distinguish between these.
     *
     * If no possible decodings are found, the returned array of decodings will be empty.
     *
     * Note that different decodings may use different decoding modes.
     *
     * Decoding creation calls with this method is not supported.  If you simply
     * want to decode a revert message from an arbitrary call that you know
     * failed, you may also want to see the [[decodeRevert]] function in
     * `@truffle/codec`.
     *
     * @param abi The abi entry for the function call whose return value is being decoded.
     * @param data The data to be decoded, as a hex string (beginning with "0x").
     * @param options Additional options, such as the block the call occurred in.
     *   See [[ReturnOptions]] for more information.
     */
    decodeReturnValue(abi, data, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.decodeReturnValueWithAdditionalContexts(abi, data, options);
        });
    }
    /**
     * @protected
     */
    decodeReturnValueWithAdditionalContexts(abi, data, options = {}, additionalContexts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            abi = Abi.normalizeEntry(abi); //just to be absolutely certain!
            const block = options.block !== undefined ? options.block : "latest";
            const blockNumber = yield this.regularizeBlock(block);
            const status = options.status; //true, false, or undefined
            const selector = codec_1.AbiData.Utils.abiSelector(abi);
            let allocation;
            if (this.contextHash !== undefined) {
                allocation = this.allocations.calldata.functionAllocations[this.contextHash][selector].output;
            }
            else {
                allocation = this.noBytecodeAllocations[selector].output;
            }
            debug("this.allocations: %O", this.allocations);
            const bytes = codec_1.Conversion.toBytes(data);
            const info = {
                state: {
                    storage: {},
                    returndata: bytes
                },
                userDefinedTypes: this.userDefinedTypes,
                allocations: this.allocations,
                contexts: Object.assign(Object.assign({}, this.contexts), additionalContexts),
                currentContext: this.context
            };
            const decoder = codec_1.decodeReturndata(info, allocation, status);
            let result = decoder.next();
            while (result.done === false) {
                let request = result.value;
                let response;
                switch (request.type) {
                    case "code":
                        response = yield this.getCode(request.address, blockNumber);
                        break;
                    //not writing a storage case as it shouldn't occur here!
                }
                result = decoder.next(response);
            }
            //at this point, result.value holds the final value
            return result.value;
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Constructs a contract instance decoder for a given instance of this contract.
     * @param address The address of the contract instance decode.  If left out, it will be autodetected.
     *   If an invalid address is provided, this method will throw an exception.
     */
    forInstance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            let instanceDecoder = new ContractInstanceDecoder(this, address);
            yield instanceDecoder.init();
            return instanceDecoder;
        });
    }
    getCode(address, block) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.projectDecoder.getCode(address, block);
        });
    }
    regularizeBlock(block) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.projectDecoder.regularizeBlock(block);
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * See [[ProjectDecoder.decodeTransaction]].
     * @param transaction The transaction to be decoded.
     */
    decodeTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.projectDecoder.decodeTransaction(transaction);
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * See [[ProjectDecoder.decodeLog]].
     * @param log The log to be decoded.
     */
    decodeLog(log, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.projectDecoder.decodeLog(log, options);
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * See [[ProjectDecoder.events]].
     * @param options Used to determine what events to fetch and how to decode them;
     *   see the documentation on the EventOptions type for more.
     */
    events(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.projectDecoder.events(options);
        });
    }
    /**
     * See [[ProjectDecoder.abifyCalldataDecoding]].
     */
    abifyCalldataDecoding(decoding) {
        return this.projectDecoder.abifyCalldataDecoding(decoding);
    }
    /**
     * See [[ProjectDecoder.abifyLogDecoding]].
     */
    abifyLogDecoding(decoding) {
        return this.projectDecoder.abifyLogDecoding(decoding);
    }
    /**
     * See [[ProjectDecoder.abifyReturndataDecoding]].
     */
    abifyReturndataDecoding(decoding) {
        return this.projectDecoder.abifyReturndataDecoding(decoding);
    }
    //the following functions are for internal use
    /**
     * @protected
     */
    getAllocations() {
        return this.allocations;
    }
    /**
     * @protected
     */
    getStateVariableReferences() {
        return this.stateVariableReferences;
    }
    /**
     * @protected
     */
    getProjectDecoder() {
        return this.projectDecoder;
    }
    /**
     * @protected
     */
    getContractInfo() {
        return {
            compilation: this.compilation,
            contract: this.contract,
            artifact: this.artifact,
            contractNode: this.contractNode,
            contractNetwork: this.contractNetwork,
            contextHash: this.contextHash
        };
    }
}
exports.ContractDecoder = ContractDecoder;
/**
 * The ContractInstanceDecoder class.  Decodes storage for a specified
 * instance.  Also, decodes transactions, logs, and return values.  See below
 * for a method listing.
 *
 * Note that when using this class to decode transactions, logs, and return
 * values, it does have one advantage over using the ProjectDecoder or
 * ContractDecoder.  If the artifact for the class does not have a
 * deployedBytecode field, the ProjectDecoder (and therefore also the
 * ContractDecoder) will not be able to tell that this instance is of that
 * class, and so will fail to decode transactions sent to it or logs
 * originating from it, and will fall back to ABI mode when decoding return
 * values received from it.  However, the ContractInstanceDecoder has that
 * information and will make use of it, making it possible for it to decode
 * transactions sent to this instance, or logs originating from it, or decode
 * return values received from it in full mode, even if the deployedBytecode
 * field is misssing.
 * @category Decoder
 */
class ContractInstanceDecoder {
    /**
     * @protected
     */
    constructor(contractDecoder, address) {
        this.contexts = {}; //deployed contexts only
        this.additionalContexts = {}; //for passing to project decoder when contract has no deployedBytecode
        this.mappingKeys = [];
        this.storageCache = {};
        this.contractDecoder = contractDecoder;
        this.projectDecoder = this.contractDecoder.getProjectDecoder();
        this.providerAdapter = this.projectDecoder.getProviderAdapter();
        if (address !== undefined) {
            if (!web3_utils_1.default.isAddress(address)) {
                throw new errors_1.InvalidAddressError(address);
            }
            this.contractAddress = web3_utils_1.default.toChecksumAddress(address);
        }
        this.referenceDeclarations = this.projectDecoder.getReferenceDeclarations();
        this.userDefinedTypes = this.projectDecoder.getUserDefinedTypes();
        this.contexts = this.projectDecoder.getDeployedContexts();
        let artifact;
        ({
            compilation: this.compilation,
            contract: this.contract,
            artifact,
            contractNode: this.contractNode,
            contractNetwork: this.contractNetwork,
            contextHash: this.contextHash
        } = this.contractDecoder.getContractInfo());
        this.allocations = this.contractDecoder.getAllocations();
        this.stateVariableReferences = this.contractDecoder.getStateVariableReferences();
        //note that if we're in the null artifact case, this.contractAddress should have
        //been set by now, so we shouldn't end up here
        if (this.contractAddress === undefined) {
            this.contractAddress = artifact.networks[this.contractNetwork].address;
        }
        this.compiler = this.compilation.compiler || this.contract.compiler;
    }
    /**
     * @protected
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.contractCode = codec_1.Conversion.toHexString(yield this.getCode(this.contractAddress, yield this.providerAdapter.getBlockNumber() //not "latest" because regularized
            ));
            const deployedBytecode = compile_common_1.Shims.NewToLegacy.forBytecode(this.contract.deployedBytecode);
            if (!deployedBytecode || deployedBytecode === "0x") {
                //if this contract does *not* have the deployedBytecode field, then the decoder core
                //has no way of knowing that contracts or function pointers with its address
                //are of its class; this is an especial problem for function pointers, as it
                //won't be able to determine what the selector points to.
                //so, to get around this, we make an "additional context" for the contract,
                //based on its *actual* deployed bytecode as pulled from the blockchain.
                //This way the decoder core can recognize the address as the class, without us having
                //to make serious modifications to contract decoding.  And while sure this requires
                //a little more work, I mean, it's all cached, so, no big deal.
                const contractWithCode = Object.assign(Object.assign({}, this.contract), { deployedBytecode: this.contractCode });
                const extraContext = codec_1.Contexts.Utils.makeContext(contractWithCode, this.contractNode, this.compilation);
                this.contextHash = extraContext.context;
                this.additionalContexts = { [extraContext.context]: extraContext };
                //the following line only has any effect if we're dealing with a library,
                //since the code we pulled from the blockchain obviously does not have unresolved link references!
                //(it's not strictly necessary even then, but, hey, why not?)
                this.additionalContexts = codec_1.Contexts.Utils.normalizeContexts(this.additionalContexts);
                //again, since the code did not have unresolved link references, it is safe to just
                //mash these together like I'm about to
                this.contexts = Object.assign(Object.assign({}, this.contexts), this.additionalContexts);
            }
            //finally: set up internal functions table (only if source order is reliable;
            //otherwise leave as undefined)
            //unlike the debugger, we don't *demand* an answer, so we won't set up
            //some sort of fake table if we don't have a source map, or if any ASTs are missing
            //(if a whole *source* is missing, we'll consider that OK)
            //note: we don't attempt to handle Vyper source maps!
            const compiler = this.compilation.compiler || this.contract.compiler;
            if (!this.compilation.unreliableSourceOrder &&
                this.contract.deployedSourceMap &&
                compiler.name === "solc" &&
                this.compilation.sources.every(source => !source || source.ast)) {
                //WARNING: untyped code in this block!
                let asts = this.compilation.sources.map(source => source ? source.ast : undefined);
                let instructions = SourceMapUtils.getProcessedInstructionsForBinary(this.compilation.sources.map(source => source ? source.source : undefined), this.contractCode, SourceMapUtils.getHumanReadableSourceMap(this.contract.deployedSourceMap));
                try {
                    //this can fail if some of the source files are missing :(
                    this.internalFunctionsTable = SourceMapUtils.getFunctionsByProgramCounter(instructions, asts, asts.map(SourceMapUtils.makeOverlapFunction), this.compilation.id);
                }
                catch (_) {
                    //just leave the internal functions table undefined
                }
            }
        });
    }
    get context() {
        return this.contexts[this.contextHash];
    }
    checkAllocationSuccess() {
        if (!this.contractNode) {
            throw new errors_1.ContractBeingDecodedHasNoNodeError(this.contract.contractName, this.compilation.id);
        }
        if (!this.stateVariableReferences) {
            throw new errors_1.ContractAllocationFailedError(this.contractNode.id, this.contract.contractName, this.compilation.id);
        }
    }
    decodeVariable(variable, block) {
        return __awaiter(this, void 0, void 0, function* () {
            const info = {
                state: {
                    storage: {},
                    code: codec_1.Conversion.toBytes(this.contractCode)
                },
                mappingKeys: this.mappingKeys,
                userDefinedTypes: this.userDefinedTypes,
                allocations: this.allocations,
                contexts: this.contexts,
                currentContext: this.context,
                internalFunctionsTable: this.internalFunctionsTable
            };
            debug("this.contextHash: %s", this.contextHash);
            const decoder = Codec.decodeVariable(variable.definition, variable.pointer, info, this.compilation.id);
            let result = decoder.next();
            while (result.done === false) {
                let request = result.value;
                let response;
                switch (request.type) {
                    case "storage":
                        response = yield this.getStorage(this.contractAddress, request.slot, block);
                        break;
                    case "code":
                        response = yield this.getCode(request.address, block);
                        break;
                }
                result = decoder.next(response);
            }
            //at this point, result.value holds the final value
            debug("definedIn: %o", variable.definedIn);
            let classType = codec_1.Ast.Import.definitionToStoredType(variable.definedIn, this.compilation.id, this.compiler); //can skip reference decls
            return {
                name: variable.definition.name,
                class: classType,
                value: result.value
            };
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Returns information about the state of the contract, but does not include
     * information about the storage or decoded variables.  See the documentation
     * for the [[ContractState]] type for more.
     * @param block The block to inspect the contract's state at.  Defaults to latest.
     *   See [[BlockSpecifier]] for legal values.
     */
    state(block = "latest") {
        return __awaiter(this, void 0, void 0, function* () {
            let blockNumber = yield this.regularizeBlock(block);
            return {
                class: codec_1.Contexts.Import.contextToType(this.context),
                address: this.contractAddress,
                code: this.contractCode,
                balanceAsBN: new bn_js_1.default(yield this.providerAdapter.getBalance(this.contractAddress, blockNumber)),
                nonceAsBN: new bn_js_1.default(yield this.providerAdapter.getTransactionCount(this.contractAddress, blockNumber))
            };
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Decodes the contract's variables; returns an array of these decoded variables.
     * See the documentation of the [[DecodedVariable]] type for more.
     *
     * Note that variable decoding can only operate in full mode; if the decoder wasn't able to
     * start up in full mode, this method will throw a [[ContractAllocationFailedError]].
     *
     * Note that decoding mappings requires first watching mapping keys in order to get any results;
     * see the documentation for [[watchMappingKey]].
     * Additional methods to make mapping decoding a less manual affair are planned for the future.
     *
     * Also, due to a technical limitation, it is not currently possible to
     * usefully decode internal function pointers.  See the
     * [[Format.Values.FunctionInternalValue|FunctionInternalValue]]
     * documentation and the README for more on how these are handled.
     * @param block The block to inspect the contract's state at.  Defaults to latest.
     *   See [[BlockSpecifier]] for legal values.
     */
    variables(block = "latest") {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkAllocationSuccess();
            let blockNumber = yield this.regularizeBlock(block);
            let result = [];
            for (const variable of this.stateVariableReferences) {
                debug("about to decode %s", variable.definition.name);
                const decodedVariable = yield this.decodeVariable(variable, blockNumber);
                debug("decoded");
                result.push(decodedVariable);
            }
            return result;
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Decodes an individual contract variable; returns its value as a
     * [[Format.Values.Result|Result]].  See the documentation for
     * [[variables|variables()]] for various caveats that also apply here.
     *
     * If the variable can't be located, throws an exception.
     * @param nameOrId The name (or numeric ID, if you know that) of the
     *   variable.  Can be given as a qualified name, allowing one to get at
     *   shadowed variables from base contracts.  If given by ID, can be given as a
     *   number or numeric string.
     * @param block The block to inspect the contract's state at.  Defaults to latest.
     *   See [[BlockSpecifier]] for legal values.
     * @example Consider a contract `Derived` inheriting from a contract `Base`.
     *   Suppose `Derived` has a variable `x` and `Base` has variables `x` and
     *   `y`.  One can access `Derived.x` as `variable("x")` or
     *   `variable("Derived.x")`, can access `Base.x` as `variable("Base.x")`,
     *   and can access `Base.y` as `variable("y")` or `variable("Base.y")`.
     */
    variable(nameOrId, block = "latest") {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkAllocationSuccess();
            let blockNumber = yield this.regularizeBlock(block);
            let variable = this.findVariableByNameOrId(nameOrId);
            if (variable === undefined) {
                //if user put in a bad name
                throw new errors_1.VariableNotFoundError(nameOrId);
            }
            return (yield this.decodeVariable(variable, blockNumber)).value;
        });
    }
    findVariableByNameOrId(nameOrId) {
        //case 1: an ID was input
        if (typeof nameOrId === "number" || nameOrId.match(/[0-9]+/)) {
            return this.stateVariableReferences.find(({ definition }) => definition.id === nameOrId);
            //there should be exactly one; returns undefined if none
        }
        //case 2: a name was input
        else if (!nameOrId.includes(".")) {
            //we want to search *backwards*, to get most derived version;
            //we use slice().reverse() to clone before reversing since reverse modifies
            return this.stateVariableReferences
                .slice()
                .reverse()
                .find(({ definition }) => definition.name === nameOrId);
        }
        //case 3: a qualified name was input
        else {
            let [className, variableName] = nameOrId.split(".");
            //again, we'll search backwards, although, uhhh...?
            return this.stateVariableReferences
                .slice()
                .reverse()
                .find(({ definition, definedIn }) => definition.name === variableName && definedIn.name === className);
        }
    }
    getStorage(address, slot, block) {
        return __awaiter(this, void 0, void 0, function* () {
            //if pending, bypass the cache
            if (block === "pending") {
                return codec_1.Conversion.toBytes(yield this.providerAdapter.getStorageAt(address, slot, block), Codec.Evm.Utils.WORD_SIZE);
            }
            //otherwise, start by setting up any preliminary layers as needed
            if (this.storageCache[block] === undefined) {
                this.storageCache[block] = {};
            }
            if (this.storageCache[block][address] === undefined) {
                this.storageCache[block][address] = {};
            }
            //now, if we have it cached, just return it
            if (this.storageCache[block][address][slot.toString()] !== undefined) {
                return this.storageCache[block][address][slot.toString()];
            }
            //otherwise, get it, cache it, and return it
            let word = codec_1.Conversion.toBytes(yield this.providerAdapter.getStorageAt(address, slot, block), Codec.Evm.Utils.WORD_SIZE);
            this.storageCache[block][address][slot.toString()] = word;
            return word;
        });
    }
    getCode(address, block) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.projectDecoder.getCode(address, block);
        });
    }
    regularizeBlock(block) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.projectDecoder.regularizeBlock(block);
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Watches a mapping key; adds it to the decoder's list of watched mapping
     * keys.  This affects the results of both [[variables|variables()]] and
     * [[variable|variable()]].  When a mapping is decoded, only the values at
     * its watched keys will be included in its value.
     *
     * Note that it is possible
     * to watch mappings that are inside structs, arrays, other mappings, etc;
     * see below for more on how to do this.
     *
     * Note that watching mapping keys is
     * only possible in full mode; if the decoder wasn't able to start up in full
     * mode, this method will throw an exception.
     *
     * **Warning**: At the moment, this function does very little to check its
     * input.  Bad input may have unpredictable results.  This will be remedied
     * in the future (by having it throw exceptions on bad input), but right now
     * essentially no checking is implemented.  Also, there may be slight changes
     * to the format of indices in the future.
     *
     * (A bad variable name will cause an exception though; that input is checked.)
     * @param variable The variable that the mapping lives under; this works like
     *   the nameOrId argument to [[variable|variable()]].  If the mapping is a
     *   top-level state variable, put the mapping itself here.  Otherwise, put the
     *   top-level state variable it lives under.
     * @param indices Further arguments to watchMappingKey, if given, will be
     *   interpreted as indices into or members of the variable identified by the
     *   variable argument; see the example.  Array indices and mapping
     *   keys are specified by value; struct members are specified by name.
     *
     *   Numeric values can be given as number, BN, or
     *   numeric string.  Bytestring values are given as hex strings.  Boolean
     *   values are given as booleans, or as the strings "true" or "false".
     *   Address values are given as hex strings; they are currently not required
     *   to be in checksum case, but this will likely change in the future, so
     *   don't rely on that.  Contract values work like address values.
     *   Enum values can be given either as a numeric value or by name;
     *   in the latter case you can use either a qualified name or just the
     *   name of the option (i.e., you can just write `"Option"` rather than
     *   `"Enum.Option"` or `"Contract.Enum.Option"`, but those will work too).
     *
     *   Note that if the path to a given mapping key
     *   includes mapping keys above it, any ancestors will also be watched
     *   automatically.
     * @example First, a simple example.  Say we have a mapping `m` of type
     *   `mapping(uint => uint)`.  You could call `watchMappingKey("m", 0)` to
     *   watch `m[0]`.
     * @example Now for a slightly more complicated example.  Say `m` is of type
     *   `mapping(uint => mapping(uint => uint))`, then to watch `m[3][5]`, you
     *   can call `watchMappingKey("m", 3, 5)`.  This will also automatically
     *   watch `m[3]`; otherwise, watching `m[3][5]` wouldn't do much of
     *   anything.
     * @example Now for a well more complicated example.  Say we have a struct
     *   type `MapStruct` with a member called `map` which is a `mapping(string => string)`,
     *   and say we have a variable `arr` of type `MapStruct[]`, then one could
     *   watch `arr[3].map["hello"]` by calling `watchMappingKey("arr", 3, "map", "hello")`.
     */
    watchMappingKey(variable, ...indices) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkAllocationSuccess();
            let { slot } = yield this.constructSlot(variable, ...indices);
            //add mapping key and all ancestors
            debug("slot: %O", slot);
            while (slot !== undefined &&
                this.mappingKeys.every(existingSlot => !codec_1.Storage.Utils.equalSlots(existingSlot, slot)
                //we put the newness requirement in the while condition rather than a
                //separate if because if we hit one ancestor that's not new, the futher
                //ones won't be either
                )) {
                if (slot.key !== undefined) {
                    //only add mapping keys
                    this.mappingKeys = [...this.mappingKeys, slot];
                }
                slot = slot.path;
            }
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * Opposite of [[watchMappingKey]]; unwatches the specified mapping key.  See
     * watchMappingKey for more on how watching mapping keys works, and on how
     * the parameters work.
     *
     * Note that unwatching a mapping key will also unwatch all its descendants.
     * E.g., if `m` is of type `mapping(uint => mapping(uint => uint))`, then
     * unwatching `m[0]` will also unwatch `m[0][0]`, `m[0][1]`, etc, if these
     * are currently watched
     *
     * This function has the same caveats as watchMappingKey.
     */
    unwatchMappingKey(variable, ...indices) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkAllocationSuccess();
            let { slot } = yield this.constructSlot(variable, ...indices);
            if (slot === undefined) {
                return; //not strictly necessary, but may as well
            }
            //remove mapping key and all descendants
            this.mappingKeys = this.mappingKeys.filter(existingSlot => {
                while (existingSlot !== undefined) {
                    if (codec_1.Storage.Utils.equalSlots(existingSlot, slot)) {
                        return false; //if it matches, remove it
                    }
                    existingSlot = existingSlot.path;
                }
                return true; //if we didn't match, keep the key
            });
        });
    }
    //NOTE: if you decide to add a way to remove a mapping key *without* removing
    //all descendants, you'll need to alter watchMappingKey to use an if rather
    //than a while
    /**
     * **This method is asynchronous.**
     *
     * See [[ProjectDecoder.decodeTransaction]].
     */
    decodeTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.projectDecoder.decodeTransactionWithAdditionalContexts(transaction, this.additionalContexts);
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * See [[ProjectDecoder.decodeLog]].
     */
    decodeLog(log, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.projectDecoder.decodeLogWithAdditionalOptions(log, options, this.additionalContexts);
        });
    }
    /**
     * **This method is asynchronous.**
     *
     * See [[ContractDecoder.decodeReturnValue]].
     *
     * If the contract artifact is missing its bytecode, using this method,
     * rather than the one in [[ContractDecoder]], can sometimes provide
     * additional decoding information.
     */
    decodeReturnValue(abi, data, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.contractDecoder.decodeReturnValueWithAdditionalContexts(abi, data, options, this.additionalContexts);
        });
    }
    /**
     * See [[ProjectDecoder.abifyCalldataDecoding]].
     */
    abifyCalldataDecoding(decoding) {
        return this.projectDecoder.abifyCalldataDecoding(decoding);
    }
    /**
     * See [[ProjectDecoder.abifyLogDecoding]].
     */
    abifyLogDecoding(decoding) {
        return this.projectDecoder.abifyLogDecoding(decoding);
    }
    /**
     * See [[ProjectDecoder.abifyReturndataDecoding]].
     */
    abifyReturndataDecoding(decoding) {
        return this.projectDecoder.abifyReturndataDecoding(decoding);
    }
    /**
     * **This method is asynchronous.**
     *
     * This mostly behaves as [[ProjectDecoder.events]].
     * However, unlike other variants of this function, this one, by default, restricts to events originating from this instance's address.
     * If you don't want to restrict like that, you can explicitly use `address: undefined` in the options to disable this.
     * (You can also of course set a different address to restrict to that.)
     * @param options Used to determine what events to fetch; see the documentation on the [[EventOptions]] type for more.
     */
    events(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.projectDecoder.eventsWithAdditionalContexts(Object.assign({ address: this.contractAddress }, options), this.additionalContexts);
        });
    }
    //in addition to returning the slot we want, it also returns a Type
    //used in the recursive call
    //HOW TO USE:
    //variable may be a variable id (number or numeric string) or name (string) or qualified name (also string)
    //struct members are given by name (string)
    //array indices and numeric mapping keys may be BN, number, or numeric string
    //string mapping keys should be given as strings. duh.
    //bytes mapping keys should be given as hex strings beginning with "0x"
    //address mapping keys are like bytes; checksum case is not required
    //boolean mapping keys may be given either as booleans, or as string "true" or "false"
    constructSlot(variable, ...indices) {
        return __awaiter(this, void 0, void 0, function* () {
            //base case: we need to locate the variable and its definition
            if (indices.length === 0) {
                let allocation = this.findVariableByNameOrId(variable);
                if (!allocation) {
                    throw new errors_1.VariableNotFoundError(variable);
                }
                let dataType = codec_1.Ast.Import.definitionToType(allocation.definition, this.compilation.id, this.contract.compiler, "storage");
                let pointer = allocation.pointer;
                if (pointer.location !== "storage") {
                    //i.e., if it's a constant
                    return { slot: undefined, type: undefined };
                }
                return { slot: pointer.range.from.slot, type: dataType };
            }
            //main case
            let parentIndices = indices.slice(0, -1); //remove last index
            let { slot: parentSlot, type: parentType } = yield this.constructSlot(variable, ...parentIndices);
            if (parentSlot === undefined) {
                return { slot: undefined, type: undefined };
            }
            let rawIndex = indices[indices.length - 1];
            let index;
            let key;
            let slot;
            let dataType;
            switch (parentType.typeClass) {
                case "array":
                    if (rawIndex instanceof bn_js_1.default) {
                        index = rawIndex.clone();
                    }
                    else {
                        index = new bn_js_1.default(rawIndex);
                    }
                    dataType = parentType.baseType;
                    let size = codec_1.Storage.Allocate.storageSize(dataType, this.userDefinedTypes, this.allocations.storage);
                    if (!codec_1.Storage.Utils.isWordsLength(size)) {
                        return { slot: undefined, type: undefined };
                    }
                    slot = {
                        path: parentSlot,
                        offset: index.muln(size.words),
                        hashPath: parentType.kind === "dynamic"
                    };
                    break;
                case "mapping":
                    let keyType = parentType.keyType;
                    if (keyType.typeClass === "enum" ||
                        keyType.typeClass === "userDefinedValueType") {
                        keyType = (codec_1.Format.Types.fullType(keyType, this.userDefinedTypes));
                    }
                    key = Utils.wrapElementaryValue(rawIndex, keyType);
                    dataType = parentType.valueType;
                    slot = {
                        path: parentSlot,
                        key,
                        offset: new bn_js_1.default(0)
                    };
                    break;
                case "struct":
                    //NOTE: due to the reliance on storage allocations,
                    //we don't need to use fullType or what have you
                    let allocation = this.allocations.storage[parentType.id].members.find(({ name }) => name === rawIndex); //there should be exactly one
                    if (!allocation) {
                        throw new errors_1.MemberNotFoundError(rawIndex, parentType, variable, indices);
                    }
                    slot = {
                        path: parentSlot,
                        //need type coercion here -- we know structs don't contain constants but the compiler doesn't
                        offset: allocation.pointer.range.from.slot.offset.clone()
                    };
                    dataType = allocation.type;
                    break;
                default:
                    return { slot: undefined, type: undefined };
            }
            return { slot, type: dataType };
        });
    }
}
exports.ContractInstanceDecoder = ContractInstanceDecoder;
//# sourceMappingURL=decoders.js.map
      };
    };
  }
}, {package:"@truffle/decoder",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/decoder/dist/decoders.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TextareaAutosize/index.js", {"./TextareaAutosize":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TextareaAutosize/TextareaAutosize.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TextareaAutosize/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _TextareaAutosize.default;
  }
});

var _TextareaAutosize = _interopRequireDefault(require("./TextareaAutosize"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TextareaAutosize/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SvgIcon/index.js", {"./SvgIcon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SvgIcon/SvgIcon.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SvgIcon/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _SvgIcon.default;
  }
});

var _SvgIcon = _interopRequireDefault(require("./SvgIcon"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SvgIcon/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/setRef.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/setRef.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setRef;

// TODO v5: consider to make it private
function setRef(ref, value) {
  if (typeof ref === 'function') {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/setRef.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuList/index.js", {"./MenuList":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuList/MenuList.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuList/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _MenuList.default;
  }
});

var _MenuList = _interopRequireDefault(require("./MenuList"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuList/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popover/index.js", {"./Popover":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popover/Popover.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popover/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Popover.default;
  }
});

var _Popover = _interopRequireDefault(require("./Popover"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popover/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/color/node_modules/clone/clone.js", {"buffer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/browserify/node_modules/buffer/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/color/node_modules/clone/clone.js
      return function (require, module, exports) {
(function (Buffer){(function (){
var clone = (function() {
'use strict';

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
*/
function clone(parent, circular, depth, prototype) {
  var filter;
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    filter = circular.filter;
    circular = circular.circular
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth == 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      child = new Buffer(parent.length);
      parent.copy(child);
      return child;
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
};
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
};
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
};
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
};
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
};
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if (typeof module === 'object' && module.exports) {
  module.exports = clone;
}

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"clone",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color/node_modules/clone/clone.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/color-string/color-string.js", {"color-name":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color-name/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/color-string/color-string.js
      return function (require, module, exports) {
/* MIT license */
var colorNames = require('color-name');

module.exports = {
   getRgba: getRgba,
   getHsla: getHsla,
   getRgb: getRgb,
   getHsl: getHsl,
   getHwb: getHwb,
   getAlpha: getAlpha,

   hexString: hexString,
   rgbString: rgbString,
   rgbaString: rgbaString,
   percentString: percentString,
   percentaString: percentaString,
   hslString: hslString,
   hslaString: hslaString,
   hwbString: hwbString,
   keyword: keyword
}

function getRgba(string) {
   if (!string) {
      return;
   }
   var abbr =  /^#([a-fA-F0-9]{3})$/,
       hex =  /^#([a-fA-F0-9]{6})$/,
       rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
       per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
       keyword = /(\D+)/;

   var rgb = [0, 0, 0],
       a = 1,
       match = string.match(abbr);
   if (match) {
      match = match[1];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i] + match[i], 16);
      }
   }
   else if (match = string.match(hex)) {
      match = match[1];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
      }
   }
   else if (match = string.match(rgba)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i + 1]);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(per)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(keyword)) {
      if (match[1] == "transparent") {
         return [0, 0, 0, 0];
      }
      rgb = colorNames[match[1]];
      if (!rgb) {
         return;
      }
   }

   for (var i = 0; i < rgb.length; i++) {
      rgb[i] = scale(rgb[i], 0, 255);
   }
   if (!a && a != 0) {
      a = 1;
   }
   else {
      a = scale(a, 0, 1);
   }
   rgb[3] = a;
   return rgb;
}

function getHsla(string) {
   if (!string) {
      return;
   }
   var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hsl);
   if (match) {
      var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          s = scale(parseFloat(match[2]), 0, 100),
          l = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
   }
}

function getHwb(string) {
   if (!string) {
      return;
   }
   var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hwb);
   if (match) {
    var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          w = scale(parseFloat(match[2]), 0, 100),
          b = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
   }
}

function getRgb(string) {
   var rgba = getRgba(string);
   return rgba && rgba.slice(0, 3);
}

function getHsl(string) {
  var hsla = getHsla(string);
  return hsla && hsla.slice(0, 3);
}

function getAlpha(string) {
   var vals = getRgba(string);
   if (vals) {
      return vals[3];
   }
   else if (vals = getHsla(string)) {
      return vals[3];
   }
   else if (vals = getHwb(string)) {
      return vals[3];
   }
}

// generators
function hexString(rgb) {
   return "#" + hexDouble(rgb[0]) + hexDouble(rgb[1])
              + hexDouble(rgb[2]);
}

function rgbString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return rgbaString(rgba, alpha);
   }
   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
}

function rgbaString(rgba, alpha) {
   if (alpha === undefined) {
      alpha = (rgba[3] !== undefined ? rgba[3] : 1);
   }
   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
           + ", " + alpha + ")";
}

function percentString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return percentaString(rgba, alpha);
   }
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);

   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
}

function percentaString(rgba, alpha) {
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);
   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
}

function hslString(hsla, alpha) {
   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
      return hslaString(hsla, alpha);
   }
   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
}

function hslaString(hsla, alpha) {
   if (alpha === undefined) {
      alpha = (hsla[3] !== undefined ? hsla[3] : 1);
   }
   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
           + alpha + ")";
}

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
function hwbString(hwb, alpha) {
   if (alpha === undefined) {
      alpha = (hwb[3] !== undefined ? hwb[3] : 1);
   }
   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
           + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
}

function keyword(rgb) {
  return reverseNames[rgb.slice(0, 3)];
}

// helpers
function scale(num, min, max) {
   return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
  var str = num.toString(16).toUpperCase();
  return (str.length < 2) ? "0" + str : str;
}


//create a list of reverse color names
var reverseNames = {};
for (var name in colorNames) {
   reverseNames[colorNames[name]] = name;
}

      };
    };
  }
}, {package:"color-string",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color-string/color-string.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/color-convert/index.js", {"./conversions":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color-convert/conversions.js","./route":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color-convert/route.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/color-convert/index.js
      return function (require, module, exports) {
var conversions = require('./conversions');
var route = require('./route');

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;

      };
    };
  }
}, {package:"color-convert",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/color-convert/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Grow/index.js", {"./Grow":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Grow/Grow.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Grow/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Grow.default;
  }
});

var _Grow = _interopRequireDefault(require("./Grow"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Grow/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/List/index.js", {"./List":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/List/List.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/List/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _List.default;
  }
});

var _List = _interopRequireDefault(require("./List"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/List/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Modal/index.js", {"./Modal":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Modal/Modal.js","./ModalManager":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Modal/ModalManager.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Modal/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Modal.default;
  }
});
Object.defineProperty(exports, "ModalManager", {
  enumerable: true,
  get: function get() {
    return _ModalManager.default;
  }
});

var _Modal = _interopRequireDefault(require("./Modal"));

var _ModalManager = _interopRequireDefault(require("./ModalManager"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Modal/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Paper/index.js", {"./Paper":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Paper/Paper.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Paper/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Paper.default;
  }
});

var _Paper = _interopRequireDefault(require("./Paper"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Paper/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/index.js", {"./amber":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/amber.js","./blue":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/blue.js","./blueGrey":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/blueGrey.js","./brown":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/brown.js","./common":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/common.js","./cyan":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/cyan.js","./deepOrange":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/deepOrange.js","./deepPurple":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/deepPurple.js","./green":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/green.js","./grey":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/grey.js","./indigo":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/indigo.js","./lightBlue":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/lightBlue.js","./lightGreen":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/lightGreen.js","./lime":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/lime.js","./orange":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/orange.js","./pink":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/pink.js","./purple":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/purple.js","./red":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/red.js","./teal":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/teal.js","./yellow":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/yellow.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "common", {
  enumerable: true,
  get: function get() {
    return _common.default;
  }
});
Object.defineProperty(exports, "red", {
  enumerable: true,
  get: function get() {
    return _red.default;
  }
});
Object.defineProperty(exports, "pink", {
  enumerable: true,
  get: function get() {
    return _pink.default;
  }
});
Object.defineProperty(exports, "purple", {
  enumerable: true,
  get: function get() {
    return _purple.default;
  }
});
Object.defineProperty(exports, "deepPurple", {
  enumerable: true,
  get: function get() {
    return _deepPurple.default;
  }
});
Object.defineProperty(exports, "indigo", {
  enumerable: true,
  get: function get() {
    return _indigo.default;
  }
});
Object.defineProperty(exports, "blue", {
  enumerable: true,
  get: function get() {
    return _blue.default;
  }
});
Object.defineProperty(exports, "lightBlue", {
  enumerable: true,
  get: function get() {
    return _lightBlue.default;
  }
});
Object.defineProperty(exports, "cyan", {
  enumerable: true,
  get: function get() {
    return _cyan.default;
  }
});
Object.defineProperty(exports, "teal", {
  enumerable: true,
  get: function get() {
    return _teal.default;
  }
});
Object.defineProperty(exports, "green", {
  enumerable: true,
  get: function get() {
    return _green.default;
  }
});
Object.defineProperty(exports, "lightGreen", {
  enumerable: true,
  get: function get() {
    return _lightGreen.default;
  }
});
Object.defineProperty(exports, "lime", {
  enumerable: true,
  get: function get() {
    return _lime.default;
  }
});
Object.defineProperty(exports, "yellow", {
  enumerable: true,
  get: function get() {
    return _yellow.default;
  }
});
Object.defineProperty(exports, "amber", {
  enumerable: true,
  get: function get() {
    return _amber.default;
  }
});
Object.defineProperty(exports, "orange", {
  enumerable: true,
  get: function get() {
    return _orange.default;
  }
});
Object.defineProperty(exports, "deepOrange", {
  enumerable: true,
  get: function get() {
    return _deepOrange.default;
  }
});
Object.defineProperty(exports, "brown", {
  enumerable: true,
  get: function get() {
    return _brown.default;
  }
});
Object.defineProperty(exports, "grey", {
  enumerable: true,
  get: function get() {
    return _grey.default;
  }
});
Object.defineProperty(exports, "blueGrey", {
  enumerable: true,
  get: function get() {
    return _blueGrey.default;
  }
});

var _common = _interopRequireDefault(require("./common"));

var _red = _interopRequireDefault(require("./red"));

var _pink = _interopRequireDefault(require("./pink"));

var _purple = _interopRequireDefault(require("./purple"));

var _deepPurple = _interopRequireDefault(require("./deepPurple"));

var _indigo = _interopRequireDefault(require("./indigo"));

var _blue = _interopRequireDefault(require("./blue"));

var _lightBlue = _interopRequireDefault(require("./lightBlue"));

var _cyan = _interopRequireDefault(require("./cyan"));

var _teal = _interopRequireDefault(require("./teal"));

var _green = _interopRequireDefault(require("./green"));

var _lightGreen = _interopRequireDefault(require("./lightGreen"));

var _lime = _interopRequireDefault(require("./lime"));

var _yellow = _interopRequireDefault(require("./yellow"));

var _amber = _interopRequireDefault(require("./amber"));

var _orange = _interopRequireDefault(require("./orange"));

var _deepOrange = _interopRequireDefault(require("./deepOrange"));

var _brown = _interopRequireDefault(require("./brown"));

var _grey = _interopRequireDefault(require("./grey"));

var _blueGrey = _interopRequireDefault(require("./blueGrey"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/colors/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Menu/index.js", {"./Menu":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Menu/Menu.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Menu/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Menu.default;
  }
});

var _Menu = _interopRequireDefault(require("./Menu"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Menu/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/index.js", {"./NativeSelect":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/NativeSelect.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _NativeSelect.default;
  }
});

var _NativeSelect = _interopRequireDefault(require("./NativeSelect"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NativeSelect/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/index.js", {"./capitalize":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/capitalize.js","./createChainedFunction":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/createChainedFunction.js","./createSvgIcon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/createSvgIcon.js","./debounce":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/debounce.js","./deprecatedPropType":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/deprecatedPropType.js","./isMuiElement":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/isMuiElement.js","./ownerDocument":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/ownerDocument.js","./ownerWindow":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/ownerWindow.js","./requirePropFactory":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/requirePropFactory.js","./setRef":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/setRef.js","./unstable_useId":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/unstable_useId.js","./unsupportedProp":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/unsupportedProp.js","./useControlled":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useControlled.js","./useEventCallback":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useEventCallback.js","./useForkRef":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useForkRef.js","./useIsFocusVisible":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/useIsFocusVisible.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "capitalize", {
  enumerable: true,
  get: function get() {
    return _capitalize.default;
  }
});
Object.defineProperty(exports, "createChainedFunction", {
  enumerable: true,
  get: function get() {
    return _createChainedFunction.default;
  }
});
Object.defineProperty(exports, "createSvgIcon", {
  enumerable: true,
  get: function get() {
    return _createSvgIcon.default;
  }
});
Object.defineProperty(exports, "debounce", {
  enumerable: true,
  get: function get() {
    return _debounce.default;
  }
});
Object.defineProperty(exports, "deprecatedPropType", {
  enumerable: true,
  get: function get() {
    return _deprecatedPropType.default;
  }
});
Object.defineProperty(exports, "isMuiElement", {
  enumerable: true,
  get: function get() {
    return _isMuiElement.default;
  }
});
Object.defineProperty(exports, "ownerDocument", {
  enumerable: true,
  get: function get() {
    return _ownerDocument.default;
  }
});
Object.defineProperty(exports, "ownerWindow", {
  enumerable: true,
  get: function get() {
    return _ownerWindow.default;
  }
});
Object.defineProperty(exports, "requirePropFactory", {
  enumerable: true,
  get: function get() {
    return _requirePropFactory.default;
  }
});
Object.defineProperty(exports, "setRef", {
  enumerable: true,
  get: function get() {
    return _setRef.default;
  }
});
Object.defineProperty(exports, "unsupportedProp", {
  enumerable: true,
  get: function get() {
    return _unsupportedProp.default;
  }
});
Object.defineProperty(exports, "useControlled", {
  enumerable: true,
  get: function get() {
    return _useControlled.default;
  }
});
Object.defineProperty(exports, "useEventCallback", {
  enumerable: true,
  get: function get() {
    return _useEventCallback.default;
  }
});
Object.defineProperty(exports, "useForkRef", {
  enumerable: true,
  get: function get() {
    return _useForkRef.default;
  }
});
Object.defineProperty(exports, "unstable_useId", {
  enumerable: true,
  get: function get() {
    return _unstable_useId.default;
  }
});
Object.defineProperty(exports, "useIsFocusVisible", {
  enumerable: true,
  get: function get() {
    return _useIsFocusVisible.default;
  }
});

var _capitalize = _interopRequireDefault(require("./capitalize"));

var _createChainedFunction = _interopRequireDefault(require("./createChainedFunction"));

var _createSvgIcon = _interopRequireDefault(require("./createSvgIcon"));

var _debounce = _interopRequireDefault(require("./debounce"));

var _deprecatedPropType = _interopRequireDefault(require("./deprecatedPropType"));

var _isMuiElement = _interopRequireDefault(require("./isMuiElement"));

var _ownerDocument = _interopRequireDefault(require("./ownerDocument"));

var _ownerWindow = _interopRequireDefault(require("./ownerWindow"));

var _requirePropFactory = _interopRequireDefault(require("./requirePropFactory"));

var _setRef = _interopRequireDefault(require("./setRef"));

var _unsupportedProp = _interopRequireDefault(require("./unsupportedProp"));

var _useControlled = _interopRequireDefault(require("./useControlled"));

var _useEventCallback = _interopRequireDefault(require("./useEventCallback"));

var _useForkRef = _interopRequireDefault(require("./useForkRef"));

var _unstable_useId = _interopRequireDefault(require("./unstable_useId"));

var _useIsFocusVisible = _interopRequireDefault(require("./useIsFocusVisible"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/utils/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionActions/index.js", {"./AccordionActions":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionActions/AccordionActions.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionActions/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _AccordionActions.default;
  }
});

var _AccordionActions = _interopRequireDefault(require("./AccordionActions"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionActions/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionDetails/index.js", {"./AccordionDetails":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionDetails/AccordionDetails.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionDetails/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _AccordionDetails.default;
  }
});

var _AccordionDetails = _interopRequireDefault(require("./AccordionDetails"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionDetails/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AppBar/index.js", {"./AppBar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AppBar/AppBar.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AppBar/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _AppBar.default;
  }
});

var _AppBar = _interopRequireDefault(require("./AppBar"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AppBar/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Badge/index.js", {"./Badge":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Badge/Badge.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Badge/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Badge.default;
  }
});

var _Badge = _interopRequireDefault(require("./Badge"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Badge/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Backdrop/index.js", {"./Backdrop":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Backdrop/Backdrop.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Backdrop/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Backdrop.default;
  }
});

var _Backdrop = _interopRequireDefault(require("./Backdrop"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Backdrop/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/BottomNavigationAction/index.js", {"./BottomNavigationAction":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/BottomNavigationAction/BottomNavigationAction.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/BottomNavigationAction/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _BottomNavigationAction.default;
  }
});

var _BottomNavigationAction = _interopRequireDefault(require("./BottomNavigationAction"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/BottomNavigationAction/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/BottomNavigation/index.js", {"./BottomNavigation":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/BottomNavigation/BottomNavigation.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/BottomNavigation/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _BottomNavigation.default;
  }
});

var _BottomNavigation = _interopRequireDefault(require("./BottomNavigation"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/BottomNavigation/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Box/index.js", {"./Box":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Box/Box.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Box/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Box.default;
  }
});
Object.defineProperty(exports, "styleFunction", {
  enumerable: true,
  get: function get() {
    return _Box.styleFunction;
  }
});

var _Box = _interopRequireWildcard(require("./Box"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Box/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Button/index.js", {"./Button":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Button/Button.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Button/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Button.default;
  }
});

var _Button = _interopRequireDefault(require("./Button"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Button/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Card/index.js", {"./Card":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Card/Card.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Card/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Card.default;
  }
});

var _Card = _interopRequireDefault(require("./Card"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Card/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ButtonGroup/index.js", {"./ButtonGroup":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ButtonGroup/ButtonGroup.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ButtonGroup/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ButtonGroup.default;
  }
});

var _ButtonGroup = _interopRequireDefault(require("./ButtonGroup"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ButtonGroup/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardActionArea/index.js", {"./CardActionArea":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardActionArea/CardActionArea.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardActionArea/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _CardActionArea.default;
  }
});

var _CardActionArea = _interopRequireDefault(require("./CardActionArea"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardActionArea/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardContent/index.js", {"./CardContent":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardContent/CardContent.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardContent/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _CardContent.default;
  }
});

var _CardContent = _interopRequireDefault(require("./CardContent"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardContent/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardHeader/index.js", {"./CardHeader":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardHeader/CardHeader.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardHeader/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _CardHeader.default;
  }
});

var _CardHeader = _interopRequireDefault(require("./CardHeader"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardHeader/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardMedia/index.js", {"./CardMedia":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardMedia/CardMedia.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardMedia/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _CardMedia.default;
  }
});

var _CardMedia = _interopRequireDefault(require("./CardMedia"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardMedia/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardActions/index.js", {"./CardActions":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardActions/CardActions.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardActions/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _CardActions.default;
  }
});

var _CardActions = _interopRequireDefault(require("./CardActions"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CardActions/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CircularProgress/index.js", {"./CircularProgress":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CircularProgress/CircularProgress.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CircularProgress/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _CircularProgress.default;
  }
});

var _CircularProgress = _interopRequireDefault(require("./CircularProgress"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CircularProgress/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ClickAwayListener/index.js", {"./ClickAwayListener":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ClickAwayListener/ClickAwayListener.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ClickAwayListener/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ClickAwayListener.default;
  }
});

var _ClickAwayListener = _interopRequireDefault(require("./ClickAwayListener"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ClickAwayListener/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Container/index.js", {"./Container":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Container/Container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Container/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Container.default;
  }
});

var _Container = _interopRequireDefault(require("./Container"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Container/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Collapse/index.js", {"./Collapse":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Collapse/Collapse.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Collapse/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Collapse.default;
  }
});

var _Collapse = _interopRequireDefault(require("./Collapse"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Collapse/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CssBaseline/index.js", {"./CssBaseline":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CssBaseline/CssBaseline.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CssBaseline/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _CssBaseline.default;
  }
});

var _CssBaseline = _interopRequireDefault(require("./CssBaseline"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/CssBaseline/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Dialog/index.js", {"./Dialog":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Dialog/Dialog.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Dialog/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Dialog.default;
  }
});

var _Dialog = _interopRequireDefault(require("./Dialog"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Dialog/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogActions/index.js", {"./DialogActions":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogActions/DialogActions.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogActions/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _DialogActions.default;
  }
});

var _DialogActions = _interopRequireDefault(require("./DialogActions"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogActions/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogContent/index.js", {"./DialogContent":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogContent/DialogContent.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogContent/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _DialogContent.default;
  }
});

var _DialogContent = _interopRequireDefault(require("./DialogContent"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogContent/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogContentText/index.js", {"./DialogContentText":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogContentText/DialogContentText.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogContentText/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _DialogContentText.default;
  }
});

var _DialogContentText = _interopRequireDefault(require("./DialogContentText"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogContentText/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Divider/index.js", {"./Divider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Divider/Divider.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Divider/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Divider.default;
  }
});

var _Divider = _interopRequireDefault(require("./Divider"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Divider/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogTitle/index.js", {"./DialogTitle":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogTitle/DialogTitle.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogTitle/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _DialogTitle.default;
  }
});

var _DialogTitle = _interopRequireDefault(require("./DialogTitle"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/DialogTitle/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Drawer/index.js", {"./Drawer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Drawer/Drawer.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Drawer/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Drawer.default;
  }
});

var _Drawer = _interopRequireDefault(require("./Drawer"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Drawer/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelActions/index.js", {"./ExpansionPanelActions":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelActions/ExpansionPanelActions.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelActions/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ExpansionPanelActions.default;
  }
});

var _ExpansionPanelActions = _interopRequireDefault(require("./ExpansionPanelActions"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelActions/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelDetails/index.js", {"./ExpansionPanelDetails":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelDetails/ExpansionPanelDetails.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelDetails/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ExpansionPanelDetails.default;
  }
});

var _ExpansionPanelDetails = _interopRequireDefault(require("./ExpansionPanelDetails"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelDetails/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Fab/index.js", {"./Fab":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Fab/Fab.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Fab/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Fab.default;
  }
});

var _Fab = _interopRequireDefault(require("./Fab"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Fab/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelSummary/index.js", {"./ExpansionPanelSummary":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelSummary/ExpansionPanelSummary.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelSummary/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ExpansionPanelSummary.default;
  }
});

var _ExpansionPanelSummary = _interopRequireDefault(require("./ExpansionPanelSummary"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanelSummary/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControlLabel/index.js", {"./FormControlLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControlLabel/FormControlLabel.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControlLabel/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _FormControlLabel.default;
  }
});

var _FormControlLabel = _interopRequireDefault(require("./FormControlLabel"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormControlLabel/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Fade/index.js", {"./Fade":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Fade/Fade.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Fade/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Fade.default;
  }
});

var _Fade = _interopRequireDefault(require("./Fade"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Fade/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormGroup/index.js", {"./FormGroup":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormGroup/FormGroup.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormGroup/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _FormGroup.default;
  }
});

var _FormGroup = _interopRequireDefault(require("./FormGroup"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/FormGroup/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Grid/index.js", {"./Grid":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Grid/Grid.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Grid/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Grid.default;
  }
});

var _Grid = _interopRequireDefault(require("./Grid"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Grid/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridList/index.js", {"./GridList":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridList/GridList.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridList/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _GridList.default;
  }
});

var _GridList = _interopRequireDefault(require("./GridList"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridList/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridListTileBar/index.js", {"./GridListTileBar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridListTileBar/GridListTileBar.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridListTileBar/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _GridListTileBar.default;
  }
});

var _GridListTileBar = _interopRequireDefault(require("./GridListTileBar"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridListTileBar/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridListTile/index.js", {"./GridListTile":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridListTile/GridListTile.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridListTile/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _GridListTile.default;
  }
});

var _GridListTile = _interopRequireDefault(require("./GridListTile"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/GridListTile/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Icon/index.js", {"./Icon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Icon/Icon.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Icon/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Icon.default;
  }
});

var _Icon = _interopRequireDefault(require("./Icon"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Icon/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/LinearProgress/index.js", {"./LinearProgress":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/LinearProgress/LinearProgress.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/LinearProgress/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _LinearProgress.default;
  }
});

var _LinearProgress = _interopRequireDefault(require("./LinearProgress"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/LinearProgress/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Link/index.js", {"./Link":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Link/Link.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Link/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Link.default;
  }
});

var _Link = _interopRequireDefault(require("./Link"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Link/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/IconButton/index.js", {"./IconButton":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/IconButton/IconButton.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/IconButton/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _IconButton.default;
  }
});

var _IconButton = _interopRequireDefault(require("./IconButton"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/IconButton/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItem/index.js", {"./ListItem":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItem/ListItem.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItem/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ListItem.default;
  }
});

var _ListItem = _interopRequireDefault(require("./ListItem"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItem/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemAvatar/index.js", {"./ListItemAvatar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemAvatar/ListItemAvatar.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemAvatar/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ListItemAvatar.default;
  }
});

var _ListItemAvatar = _interopRequireDefault(require("./ListItemAvatar"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemAvatar/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemIcon/index.js", {"./ListItemIcon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemIcon/ListItemIcon.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemIcon/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ListItemIcon.default;
  }
});

var _ListItemIcon = _interopRequireDefault(require("./ListItemIcon"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemIcon/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemSecondaryAction/index.js", {"./ListItemSecondaryAction":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemSecondaryAction/ListItemSecondaryAction.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemSecondaryAction/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ListItemSecondaryAction.default;
  }
});

var _ListItemSecondaryAction = _interopRequireDefault(require("./ListItemSecondaryAction"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemSecondaryAction/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuItem/index.js", {"./MenuItem":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuItem/MenuItem.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuItem/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _MenuItem.default;
  }
});

var _MenuItem = _interopRequireDefault(require("./MenuItem"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MenuItem/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemText/index.js", {"./ListItemText":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemText/ListItemText.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemText/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ListItemText.default;
  }
});

var _ListItemText = _interopRequireDefault(require("./ListItemText"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListItemText/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListSubheader/index.js", {"./ListSubheader":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListSubheader/ListSubheader.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListSubheader/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ListSubheader.default;
  }
});

var _ListSubheader = _interopRequireDefault(require("./ListSubheader"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ListSubheader/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NoSsr/index.js", {"./NoSsr":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NoSsr/NoSsr.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NoSsr/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _NoSsr.default;
  }
});

var _NoSsr = _interopRequireDefault(require("./NoSsr"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/NoSsr/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MobileStepper/index.js", {"./MobileStepper":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MobileStepper/MobileStepper.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MobileStepper/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _MobileStepper.default;
  }
});

var _MobileStepper = _interopRequireDefault(require("./MobileStepper"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/MobileStepper/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popper/index.js", {"./Popper":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popper/Popper.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popper/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Popper.default;
  }
});

var _Popper = _interopRequireDefault(require("./Popper"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Popper/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Portal/index.js", {"./Portal":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Portal/Portal.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Portal/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Portal.default;
  }
});

var _Portal = _interopRequireDefault(require("./Portal"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Portal/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RootRef/index.js", {"./RootRef":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RootRef/RootRef.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RootRef/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _RootRef.default;
  }
});

var _RootRef = _interopRequireDefault(require("./RootRef"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RootRef/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Snackbar/index.js", {"./Snackbar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Snackbar/Snackbar.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Snackbar/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Snackbar.default;
  }
});

var _Snackbar = _interopRequireDefault(require("./Snackbar"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Snackbar/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Slide/index.js", {"./Slide":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Slide/Slide.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Slide/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Slide.default;
  }
});

var _Slide = _interopRequireDefault(require("./Slide"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Slide/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SnackbarContent/index.js", {"./SnackbarContent":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SnackbarContent/SnackbarContent.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SnackbarContent/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _SnackbarContent.default;
  }
});

var _SnackbarContent = _interopRequireDefault(require("./SnackbarContent"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SnackbarContent/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Step/index.js", {"./Step":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Step/Step.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Step/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Step.default;
  }
});

var _Step = _interopRequireDefault(require("./Step"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Step/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepContent/index.js", {"./StepContent":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepContent/StepContent.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepContent/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _StepContent.default;
  }
});

var _StepContent = _interopRequireDefault(require("./StepContent"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepContent/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepButton/index.js", {"./StepButton":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepButton/StepButton.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepButton/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _StepButton.default;
  }
});

var _StepButton = _interopRequireDefault(require("./StepButton"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepButton/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepConnector/index.js", {"./StepConnector":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepConnector/StepConnector.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepConnector/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _StepConnector.default;
  }
});

var _StepConnector = _interopRequireDefault(require("./StepConnector"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepConnector/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepLabel/index.js", {"./StepLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepLabel/StepLabel.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepLabel/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _StepLabel.default;
  }
});

var _StepLabel = _interopRequireDefault(require("./StepLabel"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepLabel/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Stepper/index.js", {"./Stepper":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Stepper/Stepper.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Stepper/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Stepper.default;
  }
});

var _Stepper = _interopRequireDefault(require("./Stepper"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Stepper/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Switch/index.js", {"./Switch":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Switch/Switch.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Switch/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Switch.default;
  }
});

var _Switch = _interopRequireDefault(require("./Switch"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Switch/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tab/index.js", {"./Tab":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tab/Tab.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tab/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Tab.default;
  }
});

var _Tab = _interopRequireDefault(require("./Tab"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tab/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableBody/index.js", {"./TableBody":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableBody/TableBody.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableBody/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _TableBody.default;
  }
});

var _TableBody = _interopRequireDefault(require("./TableBody"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableBody/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableContainer/index.js", {"./TableContainer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableContainer/TableContainer.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableContainer/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _TableContainer.default;
  }
});

var _TableContainer = _interopRequireDefault(require("./TableContainer"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableContainer/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Table/index.js", {"./Table":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Table/Table.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Table/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Table.default;
  }
});

var _Table = _interopRequireDefault(require("./Table"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Table/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableFooter/index.js", {"./TableFooter":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableFooter/TableFooter.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableFooter/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _TableFooter.default;
  }
});

var _TableFooter = _interopRequireDefault(require("./TableFooter"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableFooter/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableHead/index.js", {"./TableHead":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableHead/TableHead.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableHead/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _TableHead.default;
  }
});

var _TableHead = _interopRequireDefault(require("./TableHead"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableHead/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableRow/index.js", {"./TableRow":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableRow/TableRow.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableRow/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _TableRow.default;
  }
});

var _TableRow = _interopRequireDefault(require("./TableRow"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableRow/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Unstable_TrapFocus/index.js", {"./Unstable_TrapFocus":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Unstable_TrapFocus/Unstable_TrapFocus.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Unstable_TrapFocus/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Unstable_TrapFocus.default;
  }
});

var _Unstable_TrapFocus = _interopRequireDefault(require("./Unstable_TrapFocus"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Unstable_TrapFocus/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Toolbar/index.js", {"./Toolbar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Toolbar/Toolbar.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Toolbar/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Toolbar.default;
  }
});

var _Toolbar = _interopRequireDefault(require("./Toolbar"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Toolbar/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/useMediaQuery/index.js", {"./useMediaQuery":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/useMediaQuery/useMediaQuery.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/useMediaQuery/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _useMediaQuery.default;
  }
});

var _useMediaQuery = _interopRequireDefault(require("./useMediaQuery"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/useMediaQuery/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/withMobileDialog/index.js", {"./withMobileDialog":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/withMobileDialog/withMobileDialog.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/withMobileDialog/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _withMobileDialog.default;
  }
});

var _withMobileDialog = _interopRequireDefault(require("./withMobileDialog"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/withMobileDialog/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/useScrollTrigger/index.js", {"./useScrollTrigger":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/useScrollTrigger/useScrollTrigger.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/useScrollTrigger/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _useScrollTrigger.default;
  }
});

var _useScrollTrigger = _interopRequireDefault(require("./useScrollTrigger"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/useScrollTrigger/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tooltip/index.js", {"./Tooltip":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tooltip/Tooltip.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tooltip/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Tooltip.default;
  }
});

var _Tooltip = _interopRequireDefault(require("./Tooltip"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tooltip/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/withWidth/index.js", {"./withWidth":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/withWidth/withWidth.js","@babel/runtime/helpers/interopRequireWildcard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireWildcard.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/withWidth/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _withWidth.default;
  }
});

var _withWidth = _interopRequireWildcard(require("./withWidth"));

Object.keys(_withWidth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _withWidth[key];
    }
  });
});
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/withWidth/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Zoom/index.js", {"./Zoom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Zoom/Zoom.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Zoom/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Zoom.default;
  }
});

var _Zoom = _interopRequireDefault(require("./Zoom"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Zoom/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionSummary/index.js", {"./AccordionSummary":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionSummary/AccordionSummary.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionSummary/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _AccordionSummary.default;
  }
});

var _AccordionSummary = _interopRequireDefault(require("./AccordionSummary"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/AccordionSummary/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanel/index.js", {"./ExpansionPanel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanel/ExpansionPanel.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanel/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ExpansionPanel.default;
  }
});

var _ExpansionPanel = _interopRequireDefault(require("./ExpansionPanel"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ExpansionPanel/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Hidden/index.js", {"./Hidden":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Hidden/Hidden.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Hidden/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Hidden.default;
  }
});

var _Hidden = _interopRequireDefault(require("./Hidden"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Hidden/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RadioGroup/index.js", {"./RadioGroup":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RadioGroup/RadioGroup.js","./useRadioGroup":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RadioGroup/useRadioGroup.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RadioGroup/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _RadioGroup.default;
  }
});
Object.defineProperty(exports, "useRadioGroup", {
  enumerable: true,
  get: function get() {
    return _useRadioGroup.default;
  }
});

var _RadioGroup = _interopRequireDefault(require("./RadioGroup"));

var _useRadioGroup = _interopRequireDefault(require("./useRadioGroup"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/RadioGroup/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Slider/index.js", {"./Slider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Slider/Slider.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Slider/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Slider.default;
  }
});

var _Slider = _interopRequireDefault(require("./Slider"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Slider/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableCell/index.js", {"./TableCell":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableCell/TableCell.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableCell/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _TableCell.default;
  }
});

var _TableCell = _interopRequireDefault(require("./TableCell"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableCell/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SwipeableDrawer/index.js", {"./SwipeableDrawer":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SwipeableDrawer/SwipeableDrawer.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SwipeableDrawer/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _SwipeableDrawer.default;
  }
});

var _SwipeableDrawer = _interopRequireDefault(require("./SwipeableDrawer"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/SwipeableDrawer/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TablePagination/index.js", {"./TablePagination":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TablePagination/TablePagination.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TablePagination/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _TablePagination.default;
  }
});

var _TablePagination = _interopRequireDefault(require("./TablePagination"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TablePagination/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tabs/index.js", {"./Tabs":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tabs/Tabs.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tabs/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Tabs.default;
  }
});

var _Tabs = _interopRequireDefault(require("./Tabs"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Tabs/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Accordion/index.js", {"./Accordion":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Accordion/Accordion.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Accordion/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Accordion.default;
  }
});

var _Accordion = _interopRequireDefault(require("./Accordion"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Accordion/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ButtonBase/index.js", {"./ButtonBase":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ButtonBase/ButtonBase.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ButtonBase/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ButtonBase.default;
  }
});

var _ButtonBase = _interopRequireDefault(require("./ButtonBase"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/ButtonBase/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Avatar/index.js", {"./Avatar":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Avatar/Avatar.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Avatar/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Avatar.default;
  }
});

var _Avatar = _interopRequireDefault(require("./Avatar"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Avatar/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Checkbox/index.js", {"./Checkbox":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Checkbox/Checkbox.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Checkbox/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Checkbox.default;
  }
});

var _Checkbox = _interopRequireDefault(require("./Checkbox"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Checkbox/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Chip/index.js", {"./Chip":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Chip/Chip.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Chip/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Chip.default;
  }
});

var _Chip = _interopRequireDefault(require("./Chip"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Chip/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepIcon/index.js", {"./StepIcon":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepIcon/StepIcon.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepIcon/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _StepIcon.default;
  }
});

var _StepIcon = _interopRequireDefault(require("./StepIcon"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/StepIcon/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableSortLabel/index.js", {"./TableSortLabel":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableSortLabel/TableSortLabel.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableSortLabel/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _TableSortLabel.default;
  }
});

var _TableSortLabel = _interopRequireDefault(require("./TableSortLabel"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TableSortLabel/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TabScrollButton/index.js", {"./TabScrollButton":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TabScrollButton/TabScrollButton.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TabScrollButton/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _TabScrollButton.default;
  }
});

var _TabScrollButton = _interopRequireDefault(require("./TabScrollButton"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/TabScrollButton/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Breadcrumbs/index.js", {"./Breadcrumbs":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Breadcrumbs/Breadcrumbs.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Breadcrumbs/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Breadcrumbs.default;
  }
});

var _Breadcrumbs = _interopRequireDefault(require("./Breadcrumbs"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Breadcrumbs/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Radio/index.js", {"./Radio":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Radio/Radio.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Radio/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _Radio.default;
  }
});

var _Radio = _interopRequireDefault(require("./Radio"));
      };
    };
  }
}, {package:"@material-ui/core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@material-ui/core/Radio/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/sender-to-recipient.constants.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/sender-to-recipient.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FLAT_VARIANT = exports.DEFAULT_VARIANT = exports.CARDS_VARIANT = void 0;
// Component design variants
const DEFAULT_VARIANT = 'DEFAULT_VARIANT';
exports.DEFAULT_VARIANT = DEFAULT_VARIANT;
const CARDS_VARIANT = 'CARDS_VARIANT';
exports.CARDS_VARIANT = CARDS_VARIANT;
const FLAT_VARIANT = 'FLAT_VARIANT';
exports.FLAT_VARIANT = FLAT_VARIANT;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/sender-to-recipient.constants.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-breakdown/index.js", {"./transaction-breakdown.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-breakdown/transaction-breakdown.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-breakdown/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionBreakdown.default;
  }
});

var _transactionBreakdown = _interopRequireDefault(require("./transaction-breakdown.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-breakdown/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-activity-log/index.js", {"./transaction-activity-log.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-activity-log/transaction-activity-log.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-activity-log/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionActivityLog.default;
  }
});

var _transactionActivityLog = _interopRequireDefault(require("./transaction-activity-log.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/transaction-activity-log/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/actions/dragDrop.js", {"../utils/matchesType":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/utils/matchesType.js","invariant":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/invariant/browser.js","lodash/isArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/isArray.js","lodash/isObject":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/isObject.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/actions/dragDrop.js
      return function (require, module, exports) {
"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var invariant_1 = __importDefault(require("invariant"));
var isArray_1 = __importDefault(require("lodash/isArray"));
var isObject_1 = __importDefault(require("lodash/isObject"));
var matchesType_1 = __importDefault(require("../utils/matchesType"));
exports.BEGIN_DRAG = 'dnd-core/BEGIN_DRAG';
exports.PUBLISH_DRAG_SOURCE = 'dnd-core/PUBLISH_DRAG_SOURCE';
exports.HOVER = 'dnd-core/HOVER';
exports.DROP = 'dnd-core/DROP';
exports.END_DRAG = 'dnd-core/END_DRAG';
function createDragDropActions(manager) {
    return {
        beginDrag: function (sourceIds, _a) {
            if (sourceIds === void 0) { sourceIds = []; }
            var _b = _a === void 0 ? {
                publishSource: true,
            } : _a, publishSource = _b.publishSource, clientOffset = _b.clientOffset, getSourceClientOffset = _b.getSourceClientOffset;
            var monitor = manager.getMonitor();
            var registry = manager.getRegistry();
            invariant_1.default(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');
            for (var _i = 0, sourceIds_1 = sourceIds; _i < sourceIds_1.length; _i++) {
                var s = sourceIds_1[_i];
                invariant_1.default(registry.getSource(s), 'Expected sourceIds to be registered.');
            }
            var sourceId = null;
            for (var i = sourceIds.length - 1; i >= 0; i--) {
                if (monitor.canDragSource(sourceIds[i])) {
                    sourceId = sourceIds[i];
                    break;
                }
            }
            if (sourceId === null) {
                return;
            }
            var sourceClientOffset = null;
            if (clientOffset) {
                invariant_1.default(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');
                sourceClientOffset = getSourceClientOffset(sourceId);
            }
            var source = registry.getSource(sourceId);
            var item = source.beginDrag(monitor, sourceId);
            invariant_1.default(isObject_1.default(item), 'Item must be an object.');
            registry.pinSource(sourceId);
            var itemType = registry.getSourceType(sourceId);
            return {
                type: exports.BEGIN_DRAG,
                payload: {
                    itemType: itemType,
                    item: item,
                    sourceId: sourceId,
                    clientOffset: clientOffset || null,
                    sourceClientOffset: sourceClientOffset || null,
                    isSourcePublic: !!publishSource,
                },
            };
        },
        publishDragSource: function () {
            var monitor = manager.getMonitor();
            if (!monitor.isDragging()) {
                return;
            }
            return { type: exports.PUBLISH_DRAG_SOURCE };
        },
        hover: function (targetIdsArg, _a) {
            var clientOffset = (_a === void 0 ? {} : _a).clientOffset;
            invariant_1.default(isArray_1.default(targetIdsArg), 'Expected targetIds to be an array.');
            var targetIds = targetIdsArg.slice(0);
            var monitor = manager.getMonitor();
            var registry = manager.getRegistry();
            invariant_1.default(monitor.isDragging(), 'Cannot call hover while not dragging.');
            invariant_1.default(!monitor.didDrop(), 'Cannot call hover after drop.');
            // First check invariants.
            for (var i = 0; i < targetIds.length; i++) {
                var targetId = targetIds[i];
                invariant_1.default(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');
                var target = registry.getTarget(targetId);
                invariant_1.default(target, 'Expected targetIds to be registered.');
            }
            var draggedItemType = monitor.getItemType();
            // Remove those targetIds that don't match the targetType.  This
            // fixes shallow isOver which would only be non-shallow because of
            // non-matching targets.
            for (var i = targetIds.length - 1; i >= 0; i--) {
                var targetId = targetIds[i];
                var targetType = registry.getTargetType(targetId);
                if (!matchesType_1.default(targetType, draggedItemType)) {
                    targetIds.splice(i, 1);
                }
            }
            // Finally call hover on all matching targets.
            for (var _i = 0, targetIds_1 = targetIds; _i < targetIds_1.length; _i++) {
                var targetId = targetIds_1[_i];
                var target = registry.getTarget(targetId);
                target.hover(monitor, targetId);
            }
            return {
                type: exports.HOVER,
                payload: {
                    targetIds: targetIds,
                    clientOffset: clientOffset || null,
                },
            };
        },
        drop: function (options) {
            if (options === void 0) { options = {}; }
            var monitor = manager.getMonitor();
            var registry = manager.getRegistry();
            invariant_1.default(monitor.isDragging(), 'Cannot call drop while not dragging.');
            invariant_1.default(!monitor.didDrop(), 'Cannot call drop twice during one drag operation.');
            var targetIds = monitor
                .getTargetIds()
                .filter(monitor.canDropOnTarget, monitor);
            targetIds.reverse();
            // Multiple actions are dispatched here, which is why this doesn't return an action
            targetIds.forEach(function (targetId, index) {
                var target = registry.getTarget(targetId);
                var dropResult = target.drop(monitor, targetId);
                invariant_1.default(typeof dropResult === 'undefined' || isObject_1.default(dropResult), 'Drop result must either be an object or undefined.');
                if (typeof dropResult === 'undefined') {
                    dropResult = index === 0 ? {} : monitor.getDropResult();
                }
                var action = {
                    type: exports.DROP,
                    payload: {
                        dropResult: __assign({}, options, dropResult),
                    },
                };
                manager.dispatch(action);
            });
        },
        endDrag: function () {
            var monitor = manager.getMonitor();
            var registry = manager.getRegistry();
            invariant_1.default(monitor.isDragging(), 'Cannot call endDrag while not dragging.');
            var sourceId = monitor.getSourceId();
            var source = registry.getSource(sourceId, true);
            source.endDrag(monitor, sourceId);
            registry.unpinSource();
            return { type: exports.END_DRAG };
        },
    };
}
exports.default = createDragDropActions;
//# sourceMappingURL=dragDrop.js.map
      };
    };
  }
}, {package:"dnd-core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/actions/dragDrop.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/HandlerRegistryImpl.js", {"./actions/registry":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/actions/registry.js","./contracts":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/contracts.js","./interfaces":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/interfaces.js","./utils/getNextUniqueId":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/utils/getNextUniqueId.js","asap":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/asap/browser-asap.js","invariant":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/invariant/browser.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/HandlerRegistryImpl.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var invariant_1 = __importDefault(require("invariant"));
var asap = require('asap');
var registry_1 = require("./actions/registry");
var getNextUniqueId_1 = __importDefault(require("./utils/getNextUniqueId"));
var interfaces_1 = require("./interfaces");
var contracts_1 = require("./contracts");
function getNextHandlerId(role) {
    var id = getNextUniqueId_1.default().toString();
    switch (role) {
        case interfaces_1.HandlerRole.SOURCE:
            return "S" + id;
        case interfaces_1.HandlerRole.TARGET:
            return "T" + id;
        default:
            throw new Error("Unknown Handler Role: " + role);
    }
}
function parseRoleFromHandlerId(handlerId) {
    switch (handlerId[0]) {
        case 'S':
            return interfaces_1.HandlerRole.SOURCE;
        case 'T':
            return interfaces_1.HandlerRole.TARGET;
        default:
            invariant_1.default(false, "Cannot parse handler ID: " + handlerId);
    }
}
var HandlerRegistryImpl = /** @class */ (function () {
    function HandlerRegistryImpl(store) {
        this.store = store;
        this.types = {};
        this.dragSources = {};
        this.dropTargets = {};
        this.pinnedSourceId = null;
        this.pinnedSource = null;
    }
    HandlerRegistryImpl.prototype.addSource = function (type, source) {
        contracts_1.validateType(type);
        contracts_1.validateSourceContract(source);
        var sourceId = this.addHandler(interfaces_1.HandlerRole.SOURCE, type, source);
        this.store.dispatch(registry_1.addSource(sourceId));
        return sourceId;
    };
    HandlerRegistryImpl.prototype.addTarget = function (type, target) {
        contracts_1.validateType(type, true);
        contracts_1.validateTargetContract(target);
        var targetId = this.addHandler(interfaces_1.HandlerRole.TARGET, type, target);
        this.store.dispatch(registry_1.addTarget(targetId));
        return targetId;
    };
    HandlerRegistryImpl.prototype.containsHandler = function (handler) {
        var _this = this;
        return (Object.keys(this.dragSources).some(function (key) { return _this.dragSources[key] === handler; }) ||
            Object.keys(this.dropTargets).some(function (key) { return _this.dropTargets[key] === handler; }));
    };
    HandlerRegistryImpl.prototype.getSource = function (sourceId, includePinned) {
        if (includePinned === void 0) { includePinned = false; }
        invariant_1.default(this.isSourceId(sourceId), 'Expected a valid source ID.');
        var isPinned = includePinned && sourceId === this.pinnedSourceId;
        var source = isPinned ? this.pinnedSource : this.dragSources[sourceId];
        return source;
    };
    HandlerRegistryImpl.prototype.getTarget = function (targetId) {
        invariant_1.default(this.isTargetId(targetId), 'Expected a valid target ID.');
        return this.dropTargets[targetId];
    };
    HandlerRegistryImpl.prototype.getSourceType = function (sourceId) {
        invariant_1.default(this.isSourceId(sourceId), 'Expected a valid source ID.');
        return this.types[sourceId];
    };
    HandlerRegistryImpl.prototype.getTargetType = function (targetId) {
        invariant_1.default(this.isTargetId(targetId), 'Expected a valid target ID.');
        return this.types[targetId];
    };
    HandlerRegistryImpl.prototype.isSourceId = function (handlerId) {
        var role = parseRoleFromHandlerId(handlerId);
        return role === interfaces_1.HandlerRole.SOURCE;
    };
    HandlerRegistryImpl.prototype.isTargetId = function (handlerId) {
        var role = parseRoleFromHandlerId(handlerId);
        return role === interfaces_1.HandlerRole.TARGET;
    };
    HandlerRegistryImpl.prototype.removeSource = function (sourceId) {
        var _this = this;
        invariant_1.default(this.getSource(sourceId), 'Expected an existing source.');
        this.store.dispatch(registry_1.removeSource(sourceId));
        asap(function () {
            delete _this.dragSources[sourceId];
            delete _this.types[sourceId];
        });
    };
    HandlerRegistryImpl.prototype.removeTarget = function (targetId) {
        var _this = this;
        invariant_1.default(this.getTarget(targetId), 'Expected an existing target.');
        this.store.dispatch(registry_1.removeTarget(targetId));
        asap(function () {
            delete _this.dropTargets[targetId];
            delete _this.types[targetId];
        });
    };
    HandlerRegistryImpl.prototype.pinSource = function (sourceId) {
        var source = this.getSource(sourceId);
        invariant_1.default(source, 'Expected an existing source.');
        this.pinnedSourceId = sourceId;
        this.pinnedSource = source;
    };
    HandlerRegistryImpl.prototype.unpinSource = function () {
        invariant_1.default(this.pinnedSource, 'No source is pinned at the time.');
        this.pinnedSourceId = null;
        this.pinnedSource = null;
    };
    HandlerRegistryImpl.prototype.addHandler = function (role, type, handler) {
        var id = getNextHandlerId(role);
        this.types[id] = type;
        if (role === interfaces_1.HandlerRole.SOURCE) {
            this.dragSources[id] = handler;
        }
        else if (role === interfaces_1.HandlerRole.TARGET) {
            this.dropTargets[id] = handler;
        }
        return id;
    };
    return HandlerRegistryImpl;
}());
exports.default = HandlerRegistryImpl;
//# sourceMappingURL=HandlerRegistryImpl.js.map
      };
    };
  }
}, {package:"dnd-core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/HandlerRegistryImpl.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/DragDropMonitorImpl.js", {"./utils/coords":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/utils/coords.js","./utils/dirtiness":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/utils/dirtiness.js","./utils/matchesType":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/utils/matchesType.js","invariant":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/invariant/browser.js","lodash/isArray":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/isArray.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/DragDropMonitorImpl.js
      return function (require, module, exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var invariant_1 = __importDefault(require("invariant"));
var isArray_1 = __importDefault(require("lodash/isArray"));
var matchesType_1 = __importDefault(require("./utils/matchesType"));
var coords_1 = require("./utils/coords");
var dirtiness_1 = require("./utils/dirtiness");
var DragDropMonitorImpl = /** @class */ (function () {
    function DragDropMonitorImpl(store, registry) {
        this.store = store;
        this.registry = registry;
    }
    DragDropMonitorImpl.prototype.subscribeToStateChange = function (listener, options) {
        var _this = this;
        if (options === void 0) { options = { handlerIds: undefined }; }
        var handlerIds = options.handlerIds;
        invariant_1.default(typeof listener === 'function', 'listener must be a function.');
        invariant_1.default(typeof handlerIds === 'undefined' || isArray_1.default(handlerIds), 'handlerIds, when specified, must be an array of strings.');
        var prevStateId = this.store.getState().stateId;
        var handleChange = function () {
            var state = _this.store.getState();
            var currentStateId = state.stateId;
            try {
                var canSkipListener = currentStateId === prevStateId ||
                    (currentStateId === prevStateId + 1 &&
                        !dirtiness_1.areDirty(state.dirtyHandlerIds, handlerIds));
                if (!canSkipListener) {
                    listener();
                }
            }
            finally {
                prevStateId = currentStateId;
            }
        };
        return this.store.subscribe(handleChange);
    };
    DragDropMonitorImpl.prototype.subscribeToOffsetChange = function (listener) {
        var _this = this;
        invariant_1.default(typeof listener === 'function', 'listener must be a function.');
        var previousState = this.store.getState().dragOffset;
        var handleChange = function () {
            var nextState = _this.store.getState().dragOffset;
            if (nextState === previousState) {
                return;
            }
            previousState = nextState;
            listener();
        };
        return this.store.subscribe(handleChange);
    };
    DragDropMonitorImpl.prototype.canDragSource = function (sourceId) {
        var source = this.registry.getSource(sourceId);
        invariant_1.default(source, 'Expected to find a valid source.');
        if (this.isDragging()) {
            return false;
        }
        return source.canDrag(this, sourceId);
    };
    DragDropMonitorImpl.prototype.canDropOnTarget = function (targetId) {
        var target = this.registry.getTarget(targetId);
        invariant_1.default(target, 'Expected to find a valid target.');
        if (!this.isDragging() || this.didDrop()) {
            return false;
        }
        var targetType = this.registry.getTargetType(targetId);
        var draggedItemType = this.getItemType();
        return (matchesType_1.default(targetType, draggedItemType) && target.canDrop(this, targetId));
    };
    DragDropMonitorImpl.prototype.isDragging = function () {
        return Boolean(this.getItemType());
    };
    DragDropMonitorImpl.prototype.isDraggingSource = function (sourceId) {
        var source = this.registry.getSource(sourceId, true);
        invariant_1.default(source, 'Expected to find a valid source.');
        if (!this.isDragging() || !this.isSourcePublic()) {
            return false;
        }
        var sourceType = this.registry.getSourceType(sourceId);
        var draggedItemType = this.getItemType();
        if (sourceType !== draggedItemType) {
            return false;
        }
        return source.isDragging(this, sourceId);
    };
    DragDropMonitorImpl.prototype.isOverTarget = function (targetId, options) {
        if (options === void 0) { options = { shallow: false }; }
        var shallow = options.shallow;
        if (!this.isDragging()) {
            return false;
        }
        var targetType = this.registry.getTargetType(targetId);
        var draggedItemType = this.getItemType();
        if (draggedItemType && !matchesType_1.default(targetType, draggedItemType)) {
            return false;
        }
        var targetIds = this.getTargetIds();
        if (!targetIds.length) {
            return false;
        }
        var index = targetIds.indexOf(targetId);
        if (shallow) {
            return index === targetIds.length - 1;
        }
        else {
            return index > -1;
        }
    };
    DragDropMonitorImpl.prototype.getItemType = function () {
        return this.store.getState().dragOperation.itemType;
    };
    DragDropMonitorImpl.prototype.getItem = function () {
        return this.store.getState().dragOperation.item;
    };
    DragDropMonitorImpl.prototype.getSourceId = function () {
        return this.store.getState().dragOperation.sourceId;
    };
    DragDropMonitorImpl.prototype.getTargetIds = function () {
        return this.store.getState().dragOperation.targetIds;
    };
    DragDropMonitorImpl.prototype.getDropResult = function () {
        return this.store.getState().dragOperation.dropResult;
    };
    DragDropMonitorImpl.prototype.didDrop = function () {
        return this.store.getState().dragOperation.didDrop;
    };
    DragDropMonitorImpl.prototype.isSourcePublic = function () {
        return this.store.getState().dragOperation.isSourcePublic;
    };
    DragDropMonitorImpl.prototype.getInitialClientOffset = function () {
        return this.store.getState().dragOffset.initialClientOffset;
    };
    DragDropMonitorImpl.prototype.getInitialSourceClientOffset = function () {
        return this.store.getState().dragOffset.initialSourceClientOffset;
    };
    DragDropMonitorImpl.prototype.getClientOffset = function () {
        return this.store.getState().dragOffset.clientOffset;
    };
    DragDropMonitorImpl.prototype.getSourceClientOffset = function () {
        return coords_1.getSourceClientOffset(this.store.getState().dragOffset);
    };
    DragDropMonitorImpl.prototype.getDifferenceFromInitialOffset = function () {
        return coords_1.getDifferenceFromInitialOffset(this.store.getState().dragOffset);
    };
    return DragDropMonitorImpl;
}());
exports.default = DragDropMonitorImpl;
//# sourceMappingURL=DragDropMonitorImpl.js.map
      };
    };
  }
}, {package:"dnd-core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/DragDropMonitorImpl.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/reducers/index.js", {"./dirtyHandlerIds":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/reducers/dirtyHandlerIds.js","./dragOffset":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/reducers/dragOffset.js","./dragOperation":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/reducers/dragOperation.js","./refCount":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/reducers/refCount.js","./stateId":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/reducers/stateId.js","lodash/get":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/lodash/get.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/reducers/index.js
      return function (require, module, exports) {
"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var get_1 = __importDefault(require("lodash/get"));
var dragOffset_1 = __importDefault(require("./dragOffset"));
var dragOperation_1 = __importDefault(require("./dragOperation"));
var refCount_1 = __importDefault(require("./refCount"));
var dirtyHandlerIds_1 = __importDefault(require("./dirtyHandlerIds"));
var stateId_1 = __importDefault(require("./stateId"));
function reduce(state, action) {
    if (state === void 0) { state = {}; }
    return {
        dirtyHandlerIds: dirtyHandlerIds_1.default(state.dirtyHandlerIds, {
            type: action.type,
            payload: __assign({}, action.payload, { prevTargetIds: get_1.default(state, 'dragOperation.targetIds', []) }),
        }),
        dragOffset: dragOffset_1.default(state.dragOffset, action),
        refCount: refCount_1.default(state.refCount, action),
        dragOperation: dragOperation_1.default(state.dragOperation, action),
        stateId: stateId_1.default(state.stateId),
    };
}
exports.default = reduce;
//# sourceMappingURL=index.js.map
      };
    };
  }
}, {package:"dnd-core",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/dnd-core/lib/reducers/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list-item/networks-list-item.js", {"../../../../../app/scripts/lib/util":"/home/clarisco/Desktop/metamask-extension-develop/app/scripts/lib/util.js","../../../../../shared/constants/app":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/app.js","../../../../../shared/constants/network":"/home/clarisco/Desktop/metamask-extension-develop/shared/constants/network.js","../../../../components/ui/color-indicator":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/color-indicator/index.js","../../../../components/ui/lock-icon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/lock-icon/index.js","../../../../helpers/constants/design-system":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/design-system.js","../../../../helpers/constants/routes":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/constants/routes.js","../../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../../../selectors":"/home/clarisco/Desktop/metamask-extension-develop/ui/selectors/index.js","../../../../store/actions":"/home/clarisco/Desktop/metamask-extension-develop/ui/store/actions.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js","react-redux":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-redux/lib/index.js","react-router-dom":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-router-dom/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list-item/networks-list-item.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _useI18nContext = require("../../../../hooks/useI18nContext");

var _network = require("../../../../../shared/constants/network");

var _designSystem = require("../../../../helpers/constants/design-system");

var _colorIndicator = _interopRequireDefault(require("../../../../components/ui/color-indicator"));

var _lockIcon = _interopRequireDefault(require("../../../../components/ui/lock-icon"));

var _routes = require("../../../../helpers/constants/routes");

var _actions = require("../../../../store/actions");

var _util = require("../../../../../app/scripts/lib/util");

var _app = require("../../../../../shared/constants/app");

var _selectors = require("../../../../selectors");

const NetworksListItem = ({
  network,
  networkIsSelected,
  selectedRpcUrl
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const environmentType = (0, _util.getEnvironmentType)();
  const isFullScreen = environmentType === _app.ENVIRONMENT_TYPE_FULLSCREEN;
  const provider = (0, _reactRedux.useSelector)(_selectors.getProvider);
  const {
    label,
    labelKey,
    rpcUrl,
    providerType: currentProviderType
  } = network;
  const listItemNetworkIsSelected = selectedRpcUrl && selectedRpcUrl === rpcUrl;
  const listItemUrlIsProviderUrl = rpcUrl === provider.rpcUrl;
  const listItemTypeIsProviderNonRpcType = provider.type !== _network.NETWORK_TYPE_RPC && currentProviderType === provider.type;
  const listItemNetworkIsCurrentProvider = !networkIsSelected && (listItemUrlIsProviderUrl || listItemTypeIsProviderNonRpcType);
  const displayNetworkListItemAsSelected = listItemNetworkIsSelected || listItemNetworkIsCurrentProvider;
  return /*#__PURE__*/_react.default.createElement("div", {
    key: `settings-network-list-item:${rpcUrl}`,
    className: "networks-tab__networks-list-item",
    onClick: () => {
      dispatch((0, _actions.setSelectedSettingsRpcUrl)(rpcUrl));

      if (!isFullScreen) {
        history.push(_routes.NETWORKS_FORM_ROUTE);
      }
    }
  }, /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
    color: labelKey,
    type: _colorIndicator.default.TYPES.FILLED,
    size: _designSystem.SIZES.LG
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('networks-tab__networks-list-name', {
      'networks-tab__networks-list-name--selected': displayNetworkListItemAsSelected,
      'networks-tab__networks-list-name--disabled': currentProviderType !== _network.NETWORK_TYPE_RPC && !displayNetworkListItemAsSelected
    })
  }, label || t(labelKey), currentProviderType !== _network.NETWORK_TYPE_RPC && /*#__PURE__*/_react.default.createElement(_lockIcon.default, {
    width: "14px",
    height: "17px",
    fill: "#cdcdcd"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "networks-tab__networks-list-arrow"
  }));
};

NetworksListItem.propTypes = {
  network: _propTypes.default.object.isRequired,
  networkIsSelected: _propTypes.default.bool,
  selectedRpcUrl: _propTypes.default.string
};
var _default = NetworksListItem;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/settings/networks-tab/networks-list-item/networks-list-item.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-input-subtext/advanced-gas-fee-input-subtext.js", {"../../../ui/box":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/box/index.js","../../../ui/i18n-value":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/i18n-value/index.js","../../../ui/loading-heartbeat":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/loading-heartbeat/index.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-input-subtext/advanced-gas-fee-input-subtext.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _box = _interopRequireDefault(require("../../../ui/box"));

var _i18nValue = _interopRequireDefault(require("../../../ui/i18n-value"));

var _loadingHeartbeat = _interopRequireDefault(require("../../../ui/loading-heartbeat"));

const AdvancedGasFeeInputSubtext = ({
  latest,
  historical,
  feeTrend
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "advanced-gas-fee-input-subtext"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: "flex",
    alignItems: "center"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "advanced-gas-fee-input-subtext__label"
  }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
    messageKey: "currentTitle"
  })), /*#__PURE__*/_react.default.createElement("span", {
    className: "advanced-gas-fee-input-subtext__value"
  }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, null), latest), /*#__PURE__*/_react.default.createElement("img", {
    src: `./images/${feeTrend}-arrow.svg`,
    alt: "feeTrend-arrow"
  })), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement("span", {
    className: "advanced-gas-fee-input-subtext__label"
  }, /*#__PURE__*/_react.default.createElement(_i18nValue.default, {
    messageKey: "twelveHrTitle"
  })), /*#__PURE__*/_react.default.createElement("span", {
    className: "advanced-gas-fee-input-subtext__value"
  }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, null), historical)));
};

AdvancedGasFeeInputSubtext.propTypes = {
  latest: _propTypes.default.string,
  historical: _propTypes.default.string,
  feeTrend: _propTypes.default.string.isRequired
};
var _default = AdvancedGasFeeInputSubtext;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/advanced-gas-fee-popover/advanced-gas-fee-input-subtext/advanced-gas-fee-input-subtext.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/send-row-error-message/index.js", {"./send-row-error-message.container":"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/send-row-error-message/send-row-error-message.container.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/send-row-error-message/index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _sendRowErrorMessage.default;
  }
});

var _sendRowErrorMessage = _interopRequireDefault(require("./send-row-error-message.container"));

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/pages/send/send-content/send-row-wrapper/send-row-error-message/index.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/user-preferenced-token-input.component.js", {"../../ui/token-input":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/token-input/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/user-preferenced-token-input.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tokenInput = _interopRequireDefault(require("../../ui/token-input"));

const _excluded = ["useNativeCurrencyAsPrimaryCurrency"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class UserPreferencedTokenInput extends _react.PureComponent {
  render() {
    const _this$props = this.props,
          {
      useNativeCurrencyAsPrimaryCurrency
    } = _this$props,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    return /*#__PURE__*/_react.default.createElement(_tokenInput.default, (0, _extends2.default)({}, restProps, {
      showFiat: !useNativeCurrencyAsPrimaryCurrency
    }));
  }

}

exports.default = UserPreferencedTokenInput;
(0, _defineProperty2.default)(UserPreferencedTokenInput, "propTypes", {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string
  }).isRequired,
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-token-input/user-preferenced-token-input.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/user-preferenced-currency-input.component.js", {"../../ui/currency-input":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/currency-input/index.js","@babel/runtime/helpers/defineProperty":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/defineProperty.js","@babel/runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/extends.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/user-preferenced-currency-input.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _currencyInput = _interopRequireDefault(require("../../ui/currency-input"));

const _excluded = ["useNativeCurrencyAsPrimaryCurrency"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class UserPreferencedCurrencyInput extends _react.PureComponent {
  render() {
    const _this$props = this.props,
          {
      useNativeCurrencyAsPrimaryCurrency
    } = _this$props,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    return /*#__PURE__*/_react.default.createElement(_currencyInput.default, (0, _extends2.default)({}, restProps, {
      useFiat: !useNativeCurrencyAsPrimaryCurrency
    }));
  }

}

exports.default = UserPreferencedCurrencyInput;
(0, _defineProperty2.default)(UserPreferencedCurrencyInput, "propTypes", {
  useNativeCurrencyAsPrimaryCurrency: _propTypes.default.bool
});

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/user-preferenced-currency-input/user-preferenced-currency-input.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/pathUtils.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/pathUtils.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasChildNodes = hasChildNodes;
var DEFAULT_ROOT_PATH = exports.DEFAULT_ROOT_PATH = '$';

var WILDCARD = '*';

function hasChildNodes(data, dataIterator) {
  return !dataIterator(data).next().done;
}

var wildcardPathsFromLevel = exports.wildcardPathsFromLevel = function wildcardPathsFromLevel(level) {
  // i is depth
  return Array.from({ length: level }, function (_, i) {
    return [DEFAULT_ROOT_PATH].concat(Array.from({ length: i }, function () {
      return '*';
    })).join('.');
  });
};

var getExpandedPaths = exports.getExpandedPaths = function getExpandedPaths(data, dataIterator, expandPaths, expandLevel) {
  var initialState = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  var wildcardPaths = [].concat(wildcardPathsFromLevel(expandLevel)).concat(expandPaths).filter(function (path) {
    return typeof path === 'string';
  }); // could be undefined

  var expandedPaths = [];
  wildcardPaths.forEach(function (wildcardPath) {
    var keyPaths = wildcardPath.split('.');
    var populatePaths = function populatePaths(curData, curPath, depth) {
      if (depth === keyPaths.length) {
        expandedPaths.push(curPath);
        return;
      }
      var key = keyPaths[depth];
      if (depth === 0) {
        if (hasChildNodes(curData, dataIterator) && (key === DEFAULT_ROOT_PATH || key === WILDCARD)) {
          populatePaths(curData, DEFAULT_ROOT_PATH, depth + 1);
        }
      } else {
        if (key === WILDCARD) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = dataIterator(curData)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _ref2 = _step.value;
              var name = _ref2.name,
                  _data = _ref2.data;

              if (hasChildNodes(_data, dataIterator)) {
                populatePaths(_data, curPath + '.' + name, depth + 1);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else {
          var value = curData[key];
          if (hasChildNodes(value, dataIterator)) {
            populatePaths(value, curPath + '.' + key, depth + 1);
          }
        }
      }
    };

    populatePaths(data, '', 0);
  });

  return expandedPaths.reduce(function (obj, path) {
    obj[path] = true;
    return obj;
  }, initialState);
};
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/pathUtils.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/defineProperty.js", {"../core-js/object/define-property":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/define-property.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/defineProperty.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/defineProperty.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/TreeNode.js", {"../styles/createStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js","babel-runtime/helpers/classCallCheck":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/classCallCheck.js","babel-runtime/helpers/createClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/createClass.js","babel-runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js","babel-runtime/helpers/inherits":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/inherits.js","babel-runtime/helpers/possibleConstructorReturn":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/possibleConstructorReturn.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/TreeNode.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createStyles = require('../styles/createStyles');

var _createStyles2 = _interopRequireDefault(_createStyles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Arrow = function Arrow(_ref) {
  var expanded = _ref.expanded,
      styles = _ref.styles;
  return _react2.default.createElement(
    'span',
    { style: (0, _extends3.default)({}, styles.base, expanded ? styles.expanded : styles.collapsed) },
    '\u25B6'
  );
};

var TreeNode = function (_Component) {
  (0, _inherits3.default)(TreeNode, _Component);

  function TreeNode() {
    (0, _classCallCheck3.default)(this, TreeNode);
    return (0, _possibleConstructorReturn3.default)(this, (TreeNode.__proto__ || Object.getPrototypeOf(TreeNode)).apply(this, arguments));
  }

  (0, _createClass3.default)(TreeNode, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          expanded = _props.expanded,
          onClick = _props.onClick,
          children = _props.children,
          nodeRenderer = _props.nodeRenderer,
          title = _props.title,
          shouldShowArrow = _props.shouldShowArrow,
          shouldShowPlaceholder = _props.shouldShowPlaceholder;
      var theme = this.context.theme;

      var styles = (0, _createStyles2.default)('TreeNode', theme);

      var renderedNode = (0, _react.createElement)(nodeRenderer, this.props);
      var childNodes = expanded ? children : undefined;

      return _react2.default.createElement(
        'li',
        { 'aria-expanded': expanded, role: 'treeitem', style: styles.treeNodeBase, title: title },
        _react2.default.createElement(
          'div',
          { style: styles.treeNodePreviewContainer, onClick: onClick },
          shouldShowArrow || _react.Children.count(children) > 0 ? _react2.default.createElement(Arrow, { expanded: expanded, styles: styles.treeNodeArrow }) : shouldShowPlaceholder && _react2.default.createElement(
            'span',
            { style: styles.treeNodePlaceholder },
            '\xA0'
          ),
          renderedNode
        ),
        _react2.default.createElement(
          'ol',
          { role: 'group', style: styles.treeNodeChildNodesContainer },
          childNodes
        )
      );
    }
  }]);
  return TreeNode;
}(_react.Component);

TreeNode.propTypes = {
  name: _propTypes2.default.string,
  data: _propTypes2.default.any,

  expanded: _propTypes2.default.bool,
  shouldShowArrow: _propTypes2.default.bool,
  shouldShowPlaceholder: _propTypes2.default.bool,

  nodeRenderer: _propTypes2.default.func,

  onClick: _propTypes2.default.func
};

TreeNode.defaultProps = {
  name: undefined,
  data: undefined,
  expanded: true,

  nodeRenderer: function nodeRenderer(_ref2) {
    var name = _ref2.name;
    return _react2.default.createElement(
      'span',
      null,
      name
    );
  },

  onClick: function onClick() {},

  shouldShowArrow: false,
  shouldShowPlaceholder: true
};

TreeNode.contextTypes = {
  theme: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
};

exports.default = TreeNode;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/tree-view/TreeNode.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/create.js", {"core-js/library/fn/object/create":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/node_modules/core-js/library/fn/object/create.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/create.js
      return function (require, module, exports) {
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/create.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/set-prototype-of.js", {"core-js/library/fn/object/set-prototype-of":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/node_modules/core-js/library/fn/object/set-prototype-of.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/set-prototype-of.js
      return function (require, module, exports) {
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/object/set-prototype-of.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/base.js", {"./unselectable":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/unselectable.js","babel-runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/base.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _unselectable = require('./unselectable');

var _unselectable2 = _interopRequireDefault(_unselectable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (theme) {
  return {
    DOMNodePreview: {
      htmlOpenTag: {
        base: {
          color: theme.HTML_TAG_COLOR
        },
        tagName: {
          color: theme.HTML_TAGNAME_COLOR,
          textTransform: theme.HTML_TAGNAME_TEXT_TRANSFORM
        },
        htmlAttributeName: {
          color: theme.HTML_ATTRIBUTE_NAME_COLOR
        },
        htmlAttributeValue: {
          color: theme.HTML_ATTRIBUTE_VALUE_COLOR
        }
      },
      htmlCloseTag: {
        base: {
          color: theme.HTML_TAG_COLOR
        },
        offsetLeft: {
          /* hack: offset placeholder */
          marginLeft: -theme.TREENODE_PADDING_LEFT
        },
        tagName: {
          color: theme.HTML_TAGNAME_COLOR,
          textTransform: theme.HTML_TAGNAME_TEXT_TRANSFORM
        }
      },
      htmlComment: {
        color: theme.HTML_COMMENT_COLOR
      },
      htmlDoctype: {
        color: theme.HTML_DOCTYPE_COLOR
      }
    },

    ObjectName: {
      base: {
        color: theme.OBJECT_NAME_COLOR
      },
      dimmed: {
        opacity: 0.6
      }
    },

    ObjectValue: {
      objectValueNull: {
        color: theme.OBJECT_VALUE_NULL_COLOR
      },
      objectValueUndefined: {
        color: theme.OBJECT_VALUE_UNDEFINED_COLOR
      },
      objectValueRegExp: {
        color: theme.OBJECT_VALUE_REGEXP_COLOR
      },
      objectValueString: {
        color: theme.OBJECT_VALUE_STRING_COLOR
      },
      objectValueSymbol: {
        color: theme.OBJECT_VALUE_SYMBOL_COLOR
      },
      objectValueNumber: {
        color: theme.OBJECT_VALUE_NUMBER_COLOR
      },
      objectValueBoolean: {
        color: theme.OBJECT_VALUE_BOOLEAN_COLOR
      },
      objectValueFunctionKeyword: {
        color: theme.OBJECT_VALUE_FUNCTION_KEYWORD_COLOR,
        fontStyle: 'italic'
      },
      objectValueFunctionName: {
        fontStyle: 'italic'
      }
    },

    TreeNode: {
      treeNodeBase: {
        color: theme.BASE_COLOR,
        backgroundColor: theme.BASE_BACKGROUND_COLOR,

        lineHeight: theme.TREENODE_LINE_HEIGHT,
        cursor: 'default',

        boxSizing: 'border-box',
        listStyle: 'none',

        fontFamily: theme.TREENODE_FONT_FAMILY,
        fontSize: theme.TREENODE_FONT_SIZE
      },
      treeNodePreviewContainer: {},
      treeNodePlaceholder: (0, _extends3.default)({
        whiteSpace: 'pre',

        fontSize: theme.ARROW_FONT_SIZE,
        marginRight: theme.ARROW_MARGIN_RIGHT
      }, _unselectable2.default),
      treeNodeArrow: {
        base: (0, _extends3.default)({
          color: theme.ARROW_COLOR,
          display: 'inline-block',
          // lineHeight: '14px',
          fontSize: theme.ARROW_FONT_SIZE,
          marginRight: theme.ARROW_MARGIN_RIGHT
        }, _unselectable2.default),
        expanded: {
          WebkitTransform: 'rotateZ(90deg)',
          MozTransform: 'rotateZ(90deg)',
          transform: 'rotateZ(90deg)'
        },
        collapsed: {
          WebkitTransform: 'rotateZ(0deg)',
          MozTransform: 'rotateZ(0deg)',
          transform: 'rotateZ(0deg)'
        }
      },
      treeNodeChildNodesContainer: {
        margin: 0, // reset user-agent style
        paddingLeft: theme.TREENODE_PADDING_LEFT
      }
    },

    TableInspector: {
      base: {
        color: theme.BASE_COLOR,

        position: 'relative',
        border: '1px solid ' + theme.TABLE_BORDER_COLOR,
        fontFamily: theme.BASE_FONT_FAMILY,
        fontSize: theme.BASE_FONT_SIZE,
        lineHeight: '120%',
        boxSizing: 'border-box',
        cursor: 'default'
      }
    },

    TableInspectorHeaderContainer: {
      base: {
        top: 0,
        height: '17px',
        left: 0,
        right: 0,
        overflowX: 'hidden'
      },
      table: {
        tableLayout: 'fixed',
        borderSpacing: 0,
        borderCollapse: 'separate',
        height: '100%',
        width: '100%',
        margin: 0
      }
    },

    TableInspectorDataContainer: {
      tr: {
        display: 'table-row'
      },
      td: {
        boxSizing: 'border-box',
        border: 'none', // prevent overrides
        height: '16px', // /* 0.5 * table.background-size height */
        verticalAlign: 'top',
        padding: '1px 4px',
        WebkitUserSelect: 'text',

        whiteSpace: 'nowrap',
        textOverflow: 'ellipsis',
        overflow: 'hidden',
        lineHeight: '14px'
      },
      div: {
        position: 'static',
        top: '17px',
        bottom: 0,
        overflowY: 'overlay',
        transform: 'translateZ(0)',

        left: 0,
        right: 0,
        overflowX: 'hidden'
      },
      table: {
        positon: 'static',
        left: 0,
        top: 0,
        right: 0,
        bottom: 0,
        borderTop: '0 none transparent',
        margin: 0, // prevent user agent stylesheet overrides

        backgroundImage: theme.TABLE_DATA_BACKGROUND_IMAGE,
        backgroundSize: theme.TABLE_DATA_BACKGROUND_SIZE,
        tableLayout: 'fixed',

        // table
        borderSpacing: 0,
        borderCollapse: 'separate',
        // height: '100%',
        width: '100%',

        fontSize: theme.BASE_FONT_SIZE,
        lineHeight: '120%'
      }
    },

    TableInspectorTH: {
      base: {
        position: 'relative', // anchor for sort icon container
        height: 'auto',
        textAlign: 'left',
        backgroundColor: theme.TABLE_TH_BACKGROUND_COLOR,
        borderBottom: '1px solid ' + theme.TABLE_BORDER_COLOR,
        fontWeight: 'normal',
        verticalAlign: 'middle',
        padding: '0 4px',

        whiteSpace: 'nowrap',
        textOverflow: 'ellipsis',
        overflow: 'hidden',
        lineHeight: '14px',

        ':hover': {
          backgroundColor: theme.TABLE_TH_HOVER_COLOR
        }
      },
      div: {
        whiteSpace: 'nowrap',
        textOverflow: 'ellipsis',
        overflow: 'hidden',

        // prevent user agent stylesheet overrides
        fontSize: theme.BASE_FONT_SIZE,
        lineHeight: '120%'
      }
    },

    TableInspectorLeftBorder: {
      none: {
        borderLeft: 'none'
      },
      solid: {
        borderLeft: '1px solid ' + theme.TABLE_BORDER_COLOR
      }
    },

    TableInspectorSortIcon: (0, _extends3.default)({
      display: 'block',
      marginRight: 3, // 4,
      width: 8,
      height: 7,

      marginTop: -7,
      color: theme.TABLE_SORT_ICON_COLOR,
      fontSize: 12
    }, _unselectable2.default)
  };
};
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/base.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/symbol/iterator.js", {"core-js/library/fn/symbol/iterator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/node_modules/core-js/library/fn/symbol/iterator.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/symbol/iterator.js
      return function (require, module, exports) {
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/symbol/iterator.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/symbol.js", {"core-js/library/fn/symbol":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/node_modules/core-js/library/fn/symbol/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/symbol.js
      return function (require, module, exports) {
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/symbol.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/get-iterator.js", {"core-js/library/fn/get-iterator":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/node_modules/core-js/library/fn/get-iterator.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/get-iterator.js
      return function (require, module, exports) {
module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/get-iterator.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/is-iterable.js", {"core-js/library/fn/is-iterable":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/node_modules/core-js/library/fn/is-iterable.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/is-iterable.js
      return function (require, module, exports) {
module.exports = { "default": require("core-js/library/fn/is-iterable"), __esModule: true };
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/is-iterable.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/TH.js", {"../styles/createStyles":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/styles/createStyles.js","babel-runtime/helpers/classCallCheck":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/classCallCheck.js","babel-runtime/helpers/createClass":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/createClass.js","babel-runtime/helpers/extends":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/extends.js","babel-runtime/helpers/inherits":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/inherits.js","babel-runtime/helpers/objectWithoutProperties":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/objectWithoutProperties.js","babel-runtime/helpers/possibleConstructorReturn":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/possibleConstructorReturn.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/TH.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createStyles = require('../styles/createStyles');

var _createStyles2 = _interopRequireDefault(_createStyles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SortIconContainer = function SortIconContainer(props) {
  return _react2.default.createElement(
    'div',
    {
      style: {
        position: 'absolute',
        top: 1,
        right: 0,
        bottom: 1,
        display: 'flex',
        alignItems: 'center'
      }
    },
    props.children
  );
};

var SortIcon = function SortIcon(_ref, _ref2) {
  var sortAscending = _ref.sortAscending;
  var theme = _ref2.theme;

  var glyph = sortAscending ? '▲' : '▼';
  var styles = (0, _createStyles2.default)('TableInspectorSortIcon', theme);
  return _react2.default.createElement(
    'div',
    { style: styles },
    glyph
  );
};

SortIcon.contextTypes = {
  theme: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
};

var TH = function (_Component) {
  (0, _inherits3.default)(TH, _Component);

  function TH() {
    var _ref3;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, TH);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref3 = TH.__proto__ || Object.getPrototypeOf(TH)).call.apply(_ref3, [this].concat(args))), _this), _this.state = { hovered: false }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(TH, [{
    key: 'toggleHovered',
    value: function toggleHovered(hovered) {
      this.setState({ hovered: hovered });
    }
  }, {
    key: 'render',
    value: function render() {
      // either not sorted, sort ascending or sort descending
      var _props = this.props,
          borderStyle = _props.borderStyle,
          children = _props.children,
          onClick = _props.onClick,
          sortAscending = _props.sortAscending,
          sorted = _props.sorted,
          props = (0, _objectWithoutProperties3.default)(_props, ['borderStyle', 'children', 'onClick', 'sortAscending', 'sorted']);
      var theme = this.context.theme;

      var styles = (0, _createStyles2.default)('TableInspectorTH', theme);

      return _react2.default.createElement(
        'th',
        (0, _extends3.default)({}, props, {
          style: (0, _extends3.default)({}, styles.base, borderStyle, this.state.hovered ? styles.base[':hover'] : {}),
          onMouseEnter: this.toggleHovered.bind(this, true),
          onMouseLeave: this.toggleHovered.bind(this, false),
          onClick: onClick
        }),
        _react2.default.createElement(
          'div',
          { style: styles.div },
          children
        ),
        sorted && _react2.default.createElement(
          SortIconContainer,
          null,
          _react2.default.createElement(SortIcon, { sortAscending: sortAscending })
        )
      );
    }
  }]);
  return TH;
}(_react.Component);

TH.contextTypes = {
  theme: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
};

TH.defaultProps = {
  sortAscending: false,
  sorted: false,
  onClick: undefined
};

exports.default = TH;
      };
    };
  }
}, {package:"react-inspector",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react-inspector/lib/table-inspector/TH.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/toConsumableArray.js", {"../core-js/array/from":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/core-js/array/from.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/toConsumableArray.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;

var _from = require("../core-js/array/from");

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};
      };
    };
  }
}, {package:"babel-runtime",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/babel-runtime/helpers/toConsumableArray.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/predeploys.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/predeploys.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.predeploys = void 0;
exports.predeploys = {
    OVM_L2ToL1MessagePasser: '0x4200000000000000000000000000000000000000',
    OVM_DeployerWhitelist: '0x4200000000000000000000000000000000000002',
    L2CrossDomainMessenger: '0x4200000000000000000000000000000000000007',
    OVM_GasPriceOracle: '0x420000000000000000000000000000000000000F',
    L2StandardBridge: '0x4200000000000000000000000000000000000010',
    OVM_SequencerFeeVault: '0x4200000000000000000000000000000000000011',
    L2StandardTokenFactory: '0x4200000000000000000000000000000000000012',
    OVM_L1BlockNumber: '0x4200000000000000000000000000000000000013',
    OVM_ETH: '0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000',
    WETH9: '0x4200000000000000000000000000000000000006',
};
//# sourceMappingURL=predeploys.js.map
      };
    };
  }
}, {package:"@eth-optimism/contracts",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/predeploys.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/contract-defs.js", {"./contract-artifacts":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/contract-artifacts.js","ethers":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethers/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/contract-defs.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadContractFromManager = exports.loadContract = exports.getContractFactory = exports.getContractInterface = exports.getContractDefinition = void 0;
const ethers_1 = require("ethers");
const getContractDefinition = (name) => {
    const { getContractArtifact } = require('./contract-artifacts');
    const artifact = getContractArtifact(name);
    if (artifact === undefined) {
        throw new Error(`Unable to find artifact for contract: ${name}`);
    }
    return artifact;
};
exports.getContractDefinition = getContractDefinition;
const getContractInterface = (name) => {
    const definition = exports.getContractDefinition(name);
    return new ethers_1.ethers.utils.Interface(definition.abi);
};
exports.getContractInterface = getContractInterface;
const getContractFactory = (name, signer) => {
    const definition = exports.getContractDefinition(name);
    const contractInterface = exports.getContractInterface(name);
    return new ethers_1.ethers.ContractFactory(contractInterface, definition.bytecode, signer);
};
exports.getContractFactory = getContractFactory;
const loadContract = (name, address, provider) => {
    return new ethers_1.ethers.Contract(address, exports.getContractInterface(name), provider);
};
exports.loadContract = loadContract;
const loadContractFromManager = async (args) => {
    const { name, proxy, Lib_AddressManager, provider } = args;
    const address = await Lib_AddressManager.getAddress(proxy ? proxy : name);
    if (address === ethers_1.ethers.constants.AddressZero) {
        throw new Error(`Lib_AddressManager does not have a record for a contract named: ${name}`);
    }
    return exports.loadContract(name, address, provider);
};
exports.loadContractFromManager = loadContractFromManager;
//# sourceMappingURL=contract-defs.js.map
      };
    };
  }
}, {package:"@eth-optimism/contracts",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/contract-defs.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/connect-contracts.js", {"./contract-artifacts":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/contract-artifacts.js","./contract-deployed-artifacts":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/contract-deployed-artifacts.js","./predeploys":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/predeploys.js","@ethersproject/abstract-provider":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@ethersproject/abstract-provider/lib/index.js","ethers":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/ethers/lib/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/connect-contracts.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectL2Contracts = exports.connectL1Contracts = void 0;
const ethers_1 = require("ethers");
const abstract_provider_1 = require("@ethersproject/abstract-provider");
const contract_artifacts_1 = require("./contract-artifacts");
const contract_deployed_artifacts_1 = require("./contract-deployed-artifacts");
const predeploys_1 = require("./predeploys");
const checkSignerType = (signerOrProvider) => {
    if (!signerOrProvider) {
        throw Error('signerOrProvider argument is undefined');
    }
    if (!abstract_provider_1.Provider.isProvider(signerOrProvider) &&
        !ethers_1.Signer.isSigner(signerOrProvider)) {
        throw Error('signerOrProvider argument is the wrong type');
    }
};
const connectL1Contracts = async (signerOrProvider, network) => {
    checkSignerType(signerOrProvider);
    if (!['mainnet', 'kovan', 'goerli'].includes(network)) {
        throw Error('Must specify network: mainnet, kovan, or goerli.');
    }
    const getEthersContract = (name) => {
        const artifact = contract_deployed_artifacts_1.getDeployedContractArtifact(name, network);
        return new ethers_1.Contract(artifact.address, artifact.abi, signerOrProvider);
    };
    return {
        addressManager: getEthersContract('Lib_AddressManager'),
        canonicalTransactionChain: getEthersContract('CanonicalTransactionChain'),
        stateCommitmentChain: getEthersContract('StateCommitmentChain'),
        xDomainMessengerProxy: getEthersContract('Proxy__L1CrossDomainMessenger'),
        bondManager: getEthersContract('mockBondManager'),
    };
};
exports.connectL1Contracts = connectL1Contracts;
const connectL2Contracts = async (signerOrProvider) => {
    checkSignerType(signerOrProvider);
    const getEthersContract = (name, iface) => {
        const artifact = contract_artifacts_1.getContractArtifact(iface || name);
        const address = predeploys_1.predeploys[name];
        return new ethers_1.Contract(address, artifact.abi, signerOrProvider);
    };
    return {
        eth: getEthersContract('OVM_ETH'),
        xDomainMessenger: getEthersContract('L2CrossDomainMessenger'),
        messagePasser: getEthersContract('OVM_L2ToL1MessagePasser'),
        deployerWhiteList: getEthersContract('OVM_DeployerWhitelist'),
    };
};
exports.connectL2Contracts = connectL2Contracts;
//# sourceMappingURL=connect-contracts.js.map
      };
    };
  }
}, {package:"@eth-optimism/contracts",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@eth-optimism/contracts/dist/connect-contracts.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/sender-to-recipient.component.js", {"../../../../shared/modules/hexstring-utils":"/home/clarisco/Desktop/metamask-extension-develop/shared/modules/hexstring-utils.js","../../../helpers/utils/util":"/home/clarisco/Desktop/metamask-extension-develop/ui/helpers/utils/util.js","../../../hooks/useI18nContext":"/home/clarisco/Desktop/metamask-extension-develop/ui/hooks/useI18nContext.js","../../app/modals/nickname-popovers":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/app/modals/nickname-popovers/index.js","../account-mismatch-warning/account-mismatch-warning.component":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/account-mismatch-warning/account-mismatch-warning.component.js","../identicon":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/identicon/index.js","../tooltip":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/tooltip/index.js","./sender-to-recipient.constants":"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/sender-to-recipient.constants.js","@babel/runtime/helpers/interopRequireDefault":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@babel/runtime/helpers/interopRequireDefault.js","classnames":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/classnames/index.js","copy-to-clipboard":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/copy-to-clipboard/index.js","prop-types":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/prop-types/index.js","react":"/home/clarisco/Desktop/metamask-extension-develop/node_modules/react/index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/sender-to-recipient.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RecipientWithAddress = RecipientWithAddress;
exports.default = SenderToRecipient;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _identicon = _interopRequireDefault(require("../identicon"));

var _util = require("../../../helpers/utils/util");

var _accountMismatchWarning = _interopRequireDefault(require("../account-mismatch-warning/account-mismatch-warning.component"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");

var _nicknamePopovers = _interopRequireDefault(require("../../app/modals/nickname-popovers"));

var _senderToRecipient = require("./sender-to-recipient.constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const variantHash = {
  [_senderToRecipient.DEFAULT_VARIANT]: 'sender-to-recipient--default',
  [_senderToRecipient.CARDS_VARIANT]: 'sender-to-recipient--cards',
  [_senderToRecipient.FLAT_VARIANT]: 'sender-to-recipient--flat'
};

function SenderAddress({
  addressOnly,
  checksummedSenderAddress,
  senderName,
  onSenderClick,
  senderAddress,
  warnUserOnAccountMismatch
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const [addressCopied, setAddressCopied] = (0, _react.useState)(false);

  let tooltipHtml = /*#__PURE__*/_react.default.createElement("p", null, t('copiedExclamation'));

  if (!addressCopied) {
    tooltipHtml = addressOnly ? /*#__PURE__*/_react.default.createElement("p", null, t('copyAddress')) : /*#__PURE__*/_react.default.createElement("p", null, (0, _util.shortenAddress)(checksummedSenderAddress), /*#__PURE__*/_react.default.createElement("br", null), t('copyAddress'));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('sender-to-recipient__party sender-to-recipient__party--sender'),
    onClick: () => {
      setAddressCopied(true);
      (0, _copyToClipboard.default)(checksummedSenderAddress);

      if (onSenderClick) {
        onSenderClick();
      }
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__sender-icon"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: (0, _hexstringUtils.toChecksumHexAddress)(senderAddress),
    diameter: 24
  })), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    html: tooltipHtml,
    wrapperClassName: "sender-to-recipient__tooltip-wrapper",
    containerClassName: "sender-to-recipient__tooltip-container",
    onHidden: () => setAddressCopied(false)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__name"
  }, addressOnly ? /*#__PURE__*/_react.default.createElement("span", null, `${senderName || (0, _util.shortenAddress)(checksummedSenderAddress)}`) : senderName)), warnUserOnAccountMismatch && /*#__PURE__*/_react.default.createElement(_accountMismatchWarning.default, {
    address: senderAddress
  }));
}

SenderAddress.propTypes = {
  senderName: _propTypes.default.string,
  checksummedSenderAddress: _propTypes.default.string,
  addressOnly: _propTypes.default.bool,
  senderAddress: _propTypes.default.string,
  onSenderClick: _propTypes.default.func,
  warnUserOnAccountMismatch: _propTypes.default.bool
};

function RecipientWithAddress({
  checksummedRecipientAddress,
  onRecipientClick,
  addressOnly,
  recipientNickname,
  recipientEns,
  recipientName
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const [showNicknamePopovers, setShowNicknamePopovers] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__party sender-to-recipient__party--recipient sender-to-recipient__party--recipient-with-address",
    onClick: () => {
      setShowNicknamePopovers(true);

      if (onRecipientClick) {
        onRecipientClick();
      }
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__sender-icon"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: checksummedRecipientAddress,
    diameter: 24
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__name"
  }, addressOnly ? recipientNickname || recipientEns || (0, _util.shortenAddress)(checksummedRecipientAddress) : recipientNickname || recipientEns || recipientName || t('newContract'))), showNicknamePopovers ? /*#__PURE__*/_react.default.createElement(_nicknamePopovers.default, {
    onClose: () => setShowNicknamePopovers(false),
    address: checksummedRecipientAddress
  }) : null);
}

RecipientWithAddress.propTypes = {
  checksummedRecipientAddress: _propTypes.default.string,
  recipientName: _propTypes.default.string,
  recipientEns: _propTypes.default.string,
  recipientNickname: _propTypes.default.string,
  addressOnly: _propTypes.default.bool,
  onRecipientClick: _propTypes.default.func
};

function Arrow({
  variant
}) {
  return variant === _senderToRecipient.DEFAULT_VARIANT ? /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__arrow-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__arrow-circle"
  }, /*#__PURE__*/_react.default.createElement("img", {
    height: "15",
    width: "15",
    src: "./images/arrow-right.svg",
    alt: ""
  }))) : /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__arrow-container"
  }, /*#__PURE__*/_react.default.createElement("img", {
    height: "20",
    src: "./images/caret-right.svg",
    alt: ""
  }));
}

Arrow.propTypes = {
  variant: _propTypes.default.oneOf([_senderToRecipient.DEFAULT_VARIANT, _senderToRecipient.CARDS_VARIANT, _senderToRecipient.FLAT_VARIANT])
};

function SenderToRecipient({
  senderAddress,
  addressOnly,
  senderName,
  recipientNickname,
  recipientName,
  recipientEns,
  onRecipientClick,
  onSenderClick,
  recipientAddress,
  variant,
  warnUserOnAccountMismatch
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const checksummedSenderAddress = (0, _hexstringUtils.toChecksumHexAddress)(senderAddress);
  const checksummedRecipientAddress = (0, _hexstringUtils.toChecksumHexAddress)(recipientAddress);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('sender-to-recipient', variantHash[variant])
  }, /*#__PURE__*/_react.default.createElement(SenderAddress, {
    checksummedSenderAddress: checksummedSenderAddress,
    addressOnly: addressOnly,
    senderName: senderName,
    onSenderClick: onSenderClick,
    senderAddress: senderAddress,
    warnUserOnAccountMismatch: warnUserOnAccountMismatch
  }), /*#__PURE__*/_react.default.createElement(Arrow, {
    variant: variant
  }), recipientAddress ? /*#__PURE__*/_react.default.createElement(RecipientWithAddress, {
    checksummedRecipientAddress: checksummedRecipientAddress,
    onRecipientClick: onRecipientClick,
    addressOnly: addressOnly,
    recipientNickname: recipientNickname,
    recipientEns: recipientEns,
    recipientName: recipientName
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__party sender-to-recipient__party--recipient"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-file-text-o"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "sender-to-recipient__name"
  }, t('newContract'))));
}

SenderToRecipient.defaultProps = {
  variant: _senderToRecipient.DEFAULT_VARIANT,
  warnUserOnAccountMismatch: true
};
SenderToRecipient.propTypes = {
  senderName: _propTypes.default.string,
  senderAddress: _propTypes.default.string,
  recipientName: _propTypes.default.string,
  recipientEns: _propTypes.default.string,
  recipientAddress: _propTypes.default.string,
  recipientNickname: _propTypes.default.string,
  variant: _propTypes.default.oneOf([_senderToRecipient.DEFAULT_VARIANT, _senderToRecipient.CARDS_VARIANT, _senderToRecipient.FLAT_VARIANT]),
  addressOnly: _propTypes.default.bool,
  onRecipientClick: _propTypes.default.func,
  onSenderClick: _propTypes.default.func,
  warnUserOnAccountMismatch: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"/home/clarisco/Desktop/metamask-extension-develop/ui/components/ui/sender-to-recipient/sender-to-recipient.component.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/common/types.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/common/types.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnknownUserDefinedTypeError = void 0;
/**
 * This error indicates that the decoder was unable to locate a user-defined
 * type (struct, enum, or contract type) via its ID.  Unfortunately, we can't
 * always avoid this at the moment; we're hoping to make this more robust in
 * the future with Truffle DB.  In the meantime, it is at least worth noting that
 * you should not encounter this error if your entire project was written in
 * Solidity and all compiled at once.  Sorry.
 *
 * @Category Errors
 */
class UnknownUserDefinedTypeError extends Error {
    constructor(id, typeString) {
        const message = `Cannot locate definition for ${typeString} (ID ${id})`;
        super(message);
        this.name = "UnknownUserDefinedTypeError";
        this.id = id;
        this.typeString = typeString;
    }
}
exports.UnknownUserDefinedTypeError = UnknownUserDefinedTypeError;
//# sourceMappingURL=types.js.map
      };
    };
  }
}, {package:"@truffle/codec",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/@truffle/codec/dist/lib/common/types.js",}],
["/home/clarisco/Desktop/metamask-extension-develop/node_modules/big.js/big.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: /home/clarisco/Desktop/metamask-extension-develop/node_modules/big.js/big.js
      return function (require, module, exports) {
/*
 *  big.js v5.2.2
 *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
 *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
 *  https://github.com/MikeMcl/big.js/LICENCE
 */
;(function (GLOBAL) {
  'use strict';
  var Big,


/************************************** EDITABLE DEFAULTS *****************************************/


    // The default values below must be integers within the stated ranges.

    /*
     * The maximum number of decimal places (DP) of the results of operations involving division:
     * div and sqrt, and pow with negative exponents.
     */
    DP = 20,          // 0 to MAX_DP

    /*
     * The rounding mode (RM) used when rounding to the above decimal places.
     *
     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
     *  3  Away from zero.                                  (ROUND_UP)
     */
    RM = 1,             // 0, 1, 2 or 3

    // The maximum value of DP and Big.DP.
    MAX_DP = 1E6,       // 0 to 1000000

    // The maximum magnitude of the exponent argument to the pow method.
    MAX_POWER = 1E6,    // 1 to 1000000

    /*
     * The negative exponent (NE) at and beneath which toString returns exponential notation.
     * (JavaScript numbers: -7)
     * -1000000 is the minimum recommended exponent value of a Big.
     */
    NE = -7,            // 0 to -1000000

    /*
     * The positive exponent (PE) at and above which toString returns exponential notation.
     * (JavaScript numbers: 21)
     * 1000000 is the maximum recommended exponent value of a Big.
     * (This limit is not enforced or checked.)
     */
    PE = 21,            // 0 to 1000000


/**************************************************************************************************/


    // Error messages.
    NAME = '[big.js] ',
    INVALID = NAME + 'Invalid ',
    INVALID_DP = INVALID + 'decimal places',
    INVALID_RM = INVALID + 'rounding mode',
    DIV_BY_ZERO = NAME + 'Division by zero',

    // The shared prototype object.
    P = {},
    UNDEFINED = void 0,
    NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;


  /*
   * Create and return a Big constructor.
   *
   */
  function _Big_() {

    /*
     * The Big constructor and exported function.
     * Create and return a new instance of a Big number object.
     *
     * n {number|string|Big} A numeric value.
     */
    function Big(n) {
      var x = this;

      // Enable constructor usage without new.
      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);

      // Duplicate.
      if (n instanceof Big) {
        x.s = n.s;
        x.e = n.e;
        x.c = n.c.slice();
      } else {
        parse(x, n);
      }

      /*
       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which
       * points to Object.
       */
      x.constructor = Big;
    }

    Big.prototype = P;
    Big.DP = DP;
    Big.RM = RM;
    Big.NE = NE;
    Big.PE = PE;
    Big.version = '5.2.2';

    return Big;
  }


  /*
   * Parse the number or string value passed to a Big constructor.
   *
   * x {Big} A Big number instance.
   * n {number|string} A numeric value.
   */
  function parse(x, n) {
    var e, i, nl;

    // Minus zero?
    if (n === 0 && 1 / n < 0) n = '-0';
    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');

    // Determine sign.
    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;

    // Decimal point?
    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

    // Exponential form?
    if ((i = n.search(/e/i)) > 0) {

      // Determine exponent.
      if (e < 0) e = i;
      e += +n.slice(i + 1);
      n = n.substring(0, i);
    } else if (e < 0) {

      // Integer.
      e = n.length;
    }

    nl = n.length;

    // Determine leading zeros.
    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

    if (i == nl) {

      // Zero.
      x.c = [x.e = 0];
    } else {

      // Determine trailing zeros.
      for (; nl > 0 && n.charAt(--nl) == '0';);
      x.e = e - i - 1;
      x.c = [];

      // Convert string to array of digits without leading/trailing zeros.
      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
    }

    return x;
  }


  /*
   * Round Big x to a maximum of dp decimal places using rounding mode rm.
   * Called by stringify, P.div, P.round and P.sqrt.
   *
   * x {Big} The Big to round.
   * dp {number} Integer, 0 to MAX_DP inclusive.
   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)
   * [more] {boolean} Whether the result of division was truncated.
   */
  function round(x, dp, rm, more) {
    var xc = x.c,
      i = x.e + dp + 1;

    if (i < xc.length) {
      if (rm === 1) {

        // xc[i] is the digit after the digit that may be rounded up.
        more = xc[i] >= 5;
      } else if (rm === 2) {
        more = xc[i] > 5 || xc[i] == 5 &&
          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);
      } else if (rm === 3) {
        more = more || !!xc[0];
      } else {
        more = false;
        if (rm !== 0) throw Error(INVALID_RM);
      }

      if (i < 1) {
        xc.length = 1;

        if (more) {

          // 1, 0.1, 0.01, 0.001, 0.0001 etc.
          x.e = -dp;
          xc[0] = 1;
        } else {

          // Zero.
          xc[0] = x.e = 0;
        }
      } else {

        // Remove any digits after the required decimal places.
        xc.length = i--;

        // Round up?
        if (more) {

          // Rounding up may mean the previous digit has to be rounded up.
          for (; ++xc[i] > 9;) {
            xc[i] = 0;
            if (!i--) {
              ++x.e;
              xc.unshift(1);
            }
          }
        }

        // Remove trailing zeros.
        for (i = xc.length; !xc[--i];) xc.pop();
      }
    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {
      throw Error(INVALID_RM);
    }

    return x;
  }


  /*
   * Return a string representing the value of Big x in normal or exponential notation.
   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
   *
   * x {Big}
   * id? {number} Caller id.
   *         1 toExponential
   *         2 toFixed
   *         3 toPrecision
   *         4 valueOf
   * n? {number|undefined} Caller's argument.
   * k? {number|undefined}
   */
  function stringify(x, id, n, k) {
    var e, s,
      Big = x.constructor,
      z = !x.c[0];

    if (n !== UNDEFINED) {
      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {
        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);
      }

      x = new Big(x);

      // The index of the digit that may be rounded up.
      n = k - x.e;

      // Round?
      if (x.c.length > ++k) round(x, n, Big.RM);

      // toFixed: recalculate k as x.e may have changed if value rounded up.
      if (id == 2) k = x.e + n + 1;

      // Append zeros?
      for (; x.c.length < k;) x.c.push(0);
    }

    e = x.e;
    s = x.c.join('');
    n = s.length;

    // Exponential notation?
    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {
      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;

    // Normal notation.
    } else if (e < 0) {
      for (; ++e;) s = '0' + s;
      s = '0.' + s;
    } else if (e > 0) {
      if (++e > n) for (e -= n; e--;) s += '0';
      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);
    } else if (n > 1) {
      s = s.charAt(0) + '.' + s.slice(1);
    }

    return x.s < 0 && (!z || id == 4) ? '-' + s : s;
  }


  // Prototype/instance methods


  /*
   * Return a new Big whose value is the absolute value of this Big.
   */
  P.abs = function () {
    var x = new this.constructor(this);
    x.s = 1;
    return x;
  };


  /*
   * Return 1 if the value of this Big is greater than the value of Big y,
   *       -1 if the value of this Big is less than the value of Big y, or
   *        0 if they have the same value.
  */
  P.cmp = function (y) {
    var isneg,
      x = this,
      xc = x.c,
      yc = (y = new x.constructor(y)).c,
      i = x.s,
      j = y.s,
      k = x.e,
      l = y.e;

    // Either zero?
    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;

    // Signs differ?
    if (i != j) return i;

    isneg = i < 0;

    // Compare exponents.
    if (k != l) return k > l ^ isneg ? 1 : -1;

    j = (k = xc.length) < (l = yc.length) ? k : l;

    // Compare digit by digit.
    for (i = -1; ++i < j;) {
      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
    }

    // Compare lengths.
    return k == l ? 0 : k > l ^ isneg ? 1 : -1;
  };


  /*
   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
   */
  P.div = function (y) {
    var x = this,
      Big = x.constructor,
      a = x.c,                  // dividend
      b = (y = new Big(y)).c,   // divisor
      k = x.s == y.s ? 1 : -1,
      dp = Big.DP;

    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);

    // Divisor is zero?
    if (!b[0]) throw Error(DIV_BY_ZERO);

    // Dividend is 0? Return +-0.
    if (!a[0]) return new Big(k * 0);

    var bl, bt, n, cmp, ri,
      bz = b.slice(),
      ai = bl = b.length,
      al = a.length,
      r = a.slice(0, bl),   // remainder
      rl = r.length,
      q = y,                // quotient
      qc = q.c = [],
      qi = 0,
      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result

    q.s = k;
    k = d < 0 ? 0 : d;

    // Create version of divisor with leading zero.
    bz.unshift(0);

    // Add zeros to make remainder as long as divisor.
    for (; rl++ < bl;) r.push(0);

    do {

      // n is how many times the divisor goes into current remainder.
      for (n = 0; n < 10; n++) {

        // Compare divisor and remainder.
        if (bl != (rl = r.length)) {
          cmp = bl > rl ? 1 : -1;
        } else {
          for (ri = -1, cmp = 0; ++ri < bl;) {
            if (b[ri] != r[ri]) {
              cmp = b[ri] > r[ri] ? 1 : -1;
              break;
            }
          }
        }

        // If divisor < remainder, subtract divisor from remainder.
        if (cmp < 0) {

          // Remainder can't be more than 1 digit longer than divisor.
          // Equalise lengths using divisor with extra leading zero?
          for (bt = rl == bl ? b : bz; rl;) {
            if (r[--rl] < bt[rl]) {
              ri = rl;
              for (; ri && !r[--ri];) r[ri] = 9;
              --r[ri];
              r[rl] += 10;
            }
            r[rl] -= bt[rl];
          }

          for (; !r[0];) r.shift();
        } else {
          break;
        }
      }

      // Add the digit n to the result array.
      qc[qi++] = cmp ? n : ++n;

      // Update the remainder.
      if (r[0] && cmp) r[rl] = a[ai] || 0;
      else r = [a[ai]];

    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);

    // Leading zero? Do not remove if result is simply zero (qi == 1).
    if (!qc[0] && qi != 1) {

      // There can't be more than one zero.
      qc.shift();
      q.e--;
    }

    // Round?
    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);

    return q;
  };


  /*
   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
   */
  P.eq = function (y) {
    return !this.cmp(y);
  };


  /*
   * Return true if the value of this Big is greater than the value of Big y, otherwise return
   * false.
   */
  P.gt = function (y) {
    return this.cmp(y) > 0;
  };


  /*
   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
   * return false.
   */
  P.gte = function (y) {
    return this.cmp(y) > -1;
  };


  /*
   * Return true if the value of this Big is less than the value of Big y, otherwise return false.
   */
  P.lt = function (y) {
    return this.cmp(y) < 0;
  };


  /*
   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
   * return false.
   */
  P.lte = function (y) {
    return this.cmp(y) < 1;
  };


  /*
   * Return a new Big whose value is the value of this Big minus the value of Big y.
   */
  P.minus = P.sub = function (y) {
    var i, j, t, xlty,
      x = this,
      Big = x.constructor,
      a = x.s,
      b = (y = new Big(y)).s;

    // Signs differ?
    if (a != b) {
      y.s = -b;
      return x.plus(y);
    }

    var xc = x.c.slice(),
      xe = x.e,
      yc = y.c,
      ye = y.e;

    // Either zero?
    if (!xc[0] || !yc[0]) {

      // y is non-zero? x is non-zero? Or both are zero.
      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);
    }

    // Determine which is the bigger number. Prepend zeros to equalise exponents.
    if (a = xe - ye) {

      if (xlty = a < 0) {
        a = -a;
        t = xc;
      } else {
        ye = xe;
        t = yc;
      }

      t.reverse();
      for (b = a; b--;) t.push(0);
      t.reverse();
    } else {

      // Exponents equal. Check digit by digit.
      j = ((xlty = xc.length < yc.length) ? xc : yc).length;

      for (a = b = 0; b < j; b++) {
        if (xc[b] != yc[b]) {
          xlty = xc[b] < yc[b];
          break;
        }
      }
    }

    // x < y? Point xc to the array of the bigger number.
    if (xlty) {
      t = xc;
      xc = yc;
      yc = t;
      y.s = -y.s;
    }

    /*
     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
     * needs to start at yc.length.
     */
    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

    // Subtract yc from xc.
    for (b = i; j > a;) {
      if (xc[--j] < yc[j]) {
        for (i = j; i && !xc[--i];) xc[i] = 9;
        --xc[i];
        xc[j] += 10;
      }

      xc[j] -= yc[j];
    }

    // Remove trailing zeros.
    for (; xc[--b] === 0;) xc.pop();

    // Remove leading zeros and adjust exponent accordingly.
    for (; xc[0] === 0;) {
      xc.shift();
      --ye;
    }

    if (!xc[0]) {

      // n - n = +0
      y.s = 1;

      // Result must be zero.
      xc = [ye = 0];
    }

    y.c = xc;
    y.e = ye;

    return y;
  };


  /*
   * Return a new Big whose value is the value of this Big modulo the value of Big y.
   */
  P.mod = function (y) {
    var ygtx,
      x = this,
      Big = x.constructor,
      a = x.s,
      b = (y = new Big(y)).s;

    if (!y.c[0]) throw Error(DIV_BY_ZERO);

    x.s = y.s = 1;
    ygtx = y.cmp(x) == 1;
    x.s = a;
    y.s = b;

    if (ygtx) return new Big(x);

    a = Big.DP;
    b = Big.RM;
    Big.DP = Big.RM = 0;
    x = x.div(y);
    Big.DP = a;
    Big.RM = b;

    return this.minus(x.times(y));
  };


  /*
   * Return a new Big whose value is the value of this Big plus the value of Big y.
   */
  P.plus = P.add = function (y) {
    var t,
      x = this,
      Big = x.constructor,
      a = x.s,
      b = (y = new Big(y)).s;

    // Signs differ?
    if (a != b) {
      y.s = -b;
      return x.minus(y);
    }

    var xe = x.e,
      xc = x.c,
      ye = y.e,
      yc = y.c;

    // Either zero? y is non-zero? x is non-zero? Or both are zero.
    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);

    xc = xc.slice();

    // Prepend zeros to equalise exponents.
    // Note: reverse faster than unshifts.
    if (a = xe - ye) {
      if (a > 0) {
        ye = xe;
        t = yc;
      } else {
        a = -a;
        t = xc;
      }

      t.reverse();
      for (; a--;) t.push(0);
      t.reverse();
    }

    // Point xc to the longer array.
    if (xc.length - yc.length < 0) {
      t = yc;
      yc = xc;
      xc = t;
    }

    a = yc.length;

    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;

    // No need to check for zero, as +x + +y != 0 && -x + -y != 0

    if (b) {
      xc.unshift(b);
      ++ye;
    }

    // Remove trailing zeros.
    for (a = xc.length; xc[--a] === 0;) xc.pop();

    y.c = xc;
    y.e = ye;

    return y;
  };


  /*
   * Return a Big whose value is the value of this Big raised to the power n.
   * If n is negative, round to a maximum of Big.DP decimal places using rounding
   * mode Big.RM.
   *
   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
   */
  P.pow = function (n) {
    var x = this,
      one = new x.constructor(1),
      y = one,
      isneg = n < 0;

    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');
    if (isneg) n = -n;

    for (;;) {
      if (n & 1) y = y.times(x);
      n >>= 1;
      if (!n) break;
      x = x.times(x);
    }

    return isneg ? one.div(y) : y;
  };


  /*
   * Return a new Big whose value is the value of this Big rounded using rounding mode rm
   * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a
   * multiple of 10**-dp.
   * If dp is not specified, round to 0 decimal places.
   * If rm is not specified, use Big.RM.
   *
   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)
   */
  P.round = function (dp, rm) {
    var Big = this.constructor;
    if (dp === UNDEFINED) dp = 0;
    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);
    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);
  };


  /*
   * Return a new Big whose value is the square root of the value of this Big, rounded, if
   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
   */
  P.sqrt = function () {
    var r, c, t,
      x = this,
      Big = x.constructor,
      s = x.s,
      e = x.e,
      half = new Big(0.5);

    // Zero?
    if (!x.c[0]) return new Big(x);

    // Negative?
    if (s < 0) throw Error(NAME + 'No square root');

    // Estimate.
    s = Math.sqrt(x + '');

    // Math.sqrt underflow/overflow?
    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
    if (s === 0 || s === 1 / 0) {
      c = x.c.join('');
      if (!(c.length + e & 1)) c += '0';
      s = Math.sqrt(c);
      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
      r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
    } else {
      r = new Big(s);
    }

    e = r.e + (Big.DP += 4);

    // Newton-Raphson iteration.
    do {
      t = r;
      r = half.times(t.plus(x.div(t)));
    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

    return round(r, Big.DP -= 4, Big.RM);
  };


  /*
   * Return a new Big whose value is the value of this Big times the value of Big y.
   */
  P.times = P.mul = function (y) {
    var c,
      x = this,
      Big = x.constructor,
      xc = x.c,
      yc = (y = new Big(y)).c,
      a = xc.length,
      b = yc.length,
      i = x.e,
      j = y.e;

    // Determine sign of result.
    y.s = x.s == y.s ? 1 : -1;

    // Return signed 0 if either 0.
    if (!xc[0] || !yc[0]) return new Big(y.s * 0);

    // Initialise exponent of result as x.e + y.e.
    y.e = i + j;

    // If array xc has fewer digits than yc, swap xc and yc, and lengths.
    if (a < b) {
      c = xc;
      xc = yc;
      yc = c;
      j = a;
      a = b;
      b = j;
    }

    // Initialise coefficient array of result with zeros.
    for (c = new Array(j = a + b); j--;) c[j] = 0;

    // Multiply.

    // i is initially xc.length.
    for (i = b; i--;) {
      b = 0;

      // a is yc.length.
      for (j = a + i; j > i;) {

        // Current sum of products at this digit position, plus carry.
        b = c[j] + yc[i] * xc[j - i - 1] + b;
        c[j--] = b % 10;

        // carry
        b = b / 10 | 0;
      }

      c[j] = (c[j] + b) % 10;
    }

    // Increment result exponent if there is a final carry, otherwise remove leading zero.
    if (b) ++y.e;
    else c.shift();

    // Remove trailing zeros.
    for (i = c.length; !c[--i];) c.pop();
    y.c = c;

    return y;
  };


  /*
   * Return a string representing the value of this Big in exponential notation to dp fixed decimal
   * places and rounded using Big.RM.
   *
   * dp? {number} Integer, 0 to MAX_DP inclusive.
   */
  P.toExponential = function (dp) {
    return stringify(this, 1, dp, dp);
  };


  /*
   * Return a string representing the value of this Big in normal notation to dp fixed decimal
   * places and rounded using Big.RM.
   *
   * dp? {number} Integer, 0 to MAX_DP inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   */
  P.toFixed = function (dp) {
    return stringify(this, 2, dp, this.e + dp);
  };


  /*
   * Return a string representing the value of this Big rounded to sd significant digits using
   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * sd {number} Integer, 1 to MAX_DP inclusive.
   */
  P.toPrecision = function (sd) {
    return stringify(this, 3, sd, sd - 1);
  };


  /*
   * Return a string representing the value of this Big.
   * Return exponential notation if this Big has a positive exponent equal to or greater than
   * Big.PE, or a negative exponent equal to or less than Big.NE.
   * Omit the sign for negative zero.
   */
  P.toString = function () {
    return stringify(this);
  };


  /*
   * Return a string representing the value of this Big.
   * Return exponential notation if this Big has a positive exponent equal to or greater than
   * Big.PE, or a negative exponent equal to or less than Big.NE.
   * Include the sign for negative zero.
   */
  P.valueOf = P.toJSON = function () {
    return stringify(this, 4);
  };


  // Export


  Big = _Big_();

  Big['default'] = Big.Big = Big;

  //AMD.
  if (typeof define === 'function' && define.amd) {
    define(function () { return Big; });

  // Node and other CommonJS-like environments that support module.exports.
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = Big;

  //Browser.
  } else {
    GLOBAL.Big = Big;
  }
})(this);

      };
    };
  }
}, {package:"big.js",file:"/home/clarisco/Desktop/metamask-extension-develop/node_modules/big.js/big.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpL3BhZ2VzL3NldHRpbmdzL2NvbnRhY3QtbGlzdC10YWIvYWRkLWNvbnRhY3QvYWRkLWNvbnRhY3QuY29udGFpbmVyLmpzIiwidWkvcGFnZXMvc2V0dGluZ3MvbmV0d29ya3MtdGFiL25ldHdvcmtzLWxpc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaXNBcmd1bWVudHMuanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaW1wbGVtZW50YXRpb24uanMiLCJub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2FsbC1iaW5kL2NhbGxCb3VuZC5qcyIsIm5vZGVfbW9kdWxlcy9yZWdleHAucHJvdG90eXBlLmZsYWdzL2ltcGxlbWVudGF0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3MvcG9seWZpbGwuanMiLCJub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9zaGltLmpzIiwibm9kZV9tb2R1bGVzL2RlZmluZS1wcm9wZXJ0aWVzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NhbGwtYmluZC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMiLCJub2RlX21vZHVsZXMvQG1ldGFtYXNrL2V0aC10b2tlbi10cmFja2VyL25vZGVfbW9kdWxlcy9ldGhqcy9saWIvbGliL2dldFRyYW5zYWN0aW9uU3VjY2Vzcy5qcyIsIm5vZGVfbW9kdWxlcy9AbWV0YW1hc2svZXRoLXRva2VuLXRyYWNrZXIvbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIm5vZGVfbW9kdWxlcy9AbWV0YW1hc2svZXRoLXRva2VuLXRyYWNrZXIvbm9kZV9tb2R1bGVzL2pzLXNoYTMvc3JjL3NoYTMuanMiLCJub2RlX21vZHVsZXMvQG1ldGFtYXNrL2V0aC10b2tlbi10cmFja2VyL25vZGVfbW9kdWxlcy9ldGhqcy1hYmkvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtZXRhbWFzay9ldGgtdG9rZW4tdHJhY2tlci9ub2RlX21vZHVsZXMvZXRoanMvbm9kZV9tb2R1bGVzL2V0aGpzLXF1ZXJ5L2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWV0YW1hc2svZXRoLXRva2VuLXRyYWNrZXIvbm9kZV9tb2R1bGVzL2V0aGpzL25vZGVfbW9kdWxlcy9ldGhqcy1jb250cmFjdC9saWIvaW5kZXguanMiLCJ1aS9wYWdlcy9zd2Fwcy9zZWFyY2hhYmxlLWl0ZW0tbGlzdC9saXN0LWl0ZW0tc2VhcmNoL2luZGV4LmpzIiwidWkvcGFnZXMvc3dhcHMvc2VhcmNoYWJsZS1pdGVtLWxpc3QvaXRlbS1saXN0L2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLWJ1dHRvbi9lZGl0LWdhcy1mZWUtYnV0dG9uLmpzIiwidWkvY29tcG9uZW50cy91aS9pY29uL3N1bi1jaGVjay1pY29uLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2VkaXQtZ2FzLWZlZS1wb3BvdmVyL2VkaXQtZ2FzLWl0ZW0vdXNlQ3VzdG9tVGltZUVzdGltYXRlLmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLXBvcG92ZXIvZWRpdC1nYXMtdG9vbHRpcC9lZGl0LWdhcy10b29sdGlwLmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLXBvcG92ZXIvbmV0d29yay1zdGF0aXN0aWNzL3Rvb2x0aXBzLmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLXBvcG92ZXIvbmV0d29yay1zdGF0aXN0aWNzL2xhdGVzdC1wcmlvcml0eS1mZWUtZmllbGQvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9lZGl0LWdhcy1mZWUtcG9wb3Zlci9uZXR3b3JrLXN0YXRpc3RpY3Mvc3RhdHVzLXNsaWRlci9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2FkdmFuY2VkLWdhcy1mZWUtcG9wb3Zlci9hZHZhbmNlZC1nYXMtZmVlLWlucHV0cy9iYXNlLWZlZS1pbnB1dC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2FkdmFuY2VkLWdhcy1mZWUtcG9wb3Zlci9hZHZhbmNlZC1nYXMtZmVlLWlucHV0cy9wcmlvcml0eS1mZWUtaW5wdXQvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25uZWN0ZWQtc2l0ZXMtbGlzdC9jb25uZWN0ZWQtc2l0ZXMtbGlzdC5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25uZWN0ZWQtYWNjb3VudHMtcGVybWlzc2lvbnMvY29ubmVjdGVkLWFjY291bnRzLXBlcm1pc3Npb25zLmNvbXBvbmVudC5qcyIsInVpL2hlbHBlcnMvY29uc3RhbnRzL2Nvbm5lY3RlZC1zaXRlcy5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NlbGVjdGVkLWFjY291bnQvc2VsZWN0ZWQtYWNjb3VudC5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL3VpL2ljb24vaW5mby1pY29uLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3Rva2VuLWNlbGwvaW5kZXguanMiLCJ1aS9wYWdlcy9zZW5kL3NlbmQtY29udGVudC9zZW5kLWhleC1kYXRhLXJvdy9zZW5kLWhleC1kYXRhLXJvdy5jb21wb25lbnQuanMiLCJ1aS9wYWdlcy9zZW5kL3NlbmQtY29udGVudC9zZW5kLWdhcy1yb3cvc2VuZC1nYXMtcm93LmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvdWkvdXBkYXRlLW5pY2tuYW1lLXBvcG92ZXIvdXBkYXRlLW5pY2tuYW1lLXBvcG92ZXIuanMiLCJ1aS9jb21wb25lbnRzL3VpL25pY2tuYW1lLXBvcG92ZXIvaW5kZXguanMiLCJ1aS9wYWdlcy9zZW5kL3NlbmQtY29udGVudC9zZW5kLWFzc2V0LXJvdy9zZW5kLWFzc2V0LXJvdy5jb21wb25lbnQuanMiLCJ1aS9wYWdlcy9zZW5kL3NlbmQtY29udGVudC9zZW5kLWFtb3VudC1yb3cvc2VuZC1hbW91bnQtcm93LmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2FjY291bnQtbGlzdC1pdGVtL2FjY291bnQtbGlzdC1pdGVtLmpzIiwidWkvY29tcG9uZW50cy9hcHAvY29uZmlybS1wYWdlLWNvbnRhaW5lci9jb25maXJtLXBhZ2UtY29udGFpbmVyLWNvbnRlbnQvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zaWduYXR1cmUtcmVxdWVzdC9zaWduYXR1cmUtcmVxdWVzdC1oZWFkZXIvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zaWduYXR1cmUtcmVxdWVzdC9zaWduYXR1cmUtcmVxdWVzdC1mb290ZXIvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zaWduYXR1cmUtcmVxdWVzdC9zaWduYXR1cmUtcmVxdWVzdC1tZXNzYWdlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWluc3BlY3Rvci9saWIvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL3VpL2Rpc2Nsb3N1cmUvZGlzY2xvc3VyZS5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2xlZGdlci1pbnN0cnVjdGlvbi1maWVsZC9sZWRnZXItaW5zdHJ1Y3Rpb24tZmllbGQuanMiLCJ1aS9wYWdlcy9jb25maXJtLXRyYW5zYWN0aW9uLWJhc2UvZ2FzLWRldGFpbHMtaXRlbS9nYXMtZGV0YWlscy1pdGVtLmpzIiwidWkvcGFnZXMvY29uZmlybS10cmFuc2FjdGlvbi1iYXNlL3RyYW5zYWN0aW9uLWFsZXJ0cy90cmFuc2FjdGlvbi1hbGVydHMuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tdWx0aWxheWVyLWZlZS1tZXNzYWdlL211bHRpLWxheWVyLWZlZS1tZXNzYWdlLmpzIiwidWkvY29tcG9uZW50cy9hcHAvdHJhbnNhY3Rpb24tZGVjb2RpbmcvY29tcG9uZW50cy91aS9jb3B5LXJhdy1kYXRhL2NvcHktcmF3LWRhdGEuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvY29uZmlybS1wYWdlLWNvbnRhaW5lci9jb25maXJtLXBhZ2UtY29udGFpbmVyLWhlYWRlci9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2NvbmZpcm0tcGFnZS1jb250YWluZXIvY29uZmlybS1kZXRhaWwtcm93L2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvY29uZmlybS1wYWdlLWNvbnRhaW5lci9jb25maXJtLXBhZ2UtY29udGFpbmVyLW5hdmlnYXRpb24vaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25maXJtLXBhZ2UtY29udGFpbmVyL2NvbmZpcm0tcGFnZS1jb250YWluZXIuY29udGFpbmVyLmpzIiwidWkvY29tcG9uZW50cy9hcHAvdHJhbnNhY3Rpb24tZGVjb2RpbmcvdHJhbnNhY3Rpb24tZGVjb2RpbmcuY29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vY3NzLmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vYnJlYWtwb2ludHMuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9ib3JkZXJzLmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZGlzcGxheS5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2ZsZXhib3guanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9ncmlkLmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vcGFsZXR0ZS5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL3Bvc2l0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL3NpemluZy5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL3NoYWRvd3MuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9zdHlsZS5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL3R5cG9ncmFwaHkuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9jb21wb3NlLmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vc3BhY2luZy5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL1RoZW1lUHJvdmlkZXIvbmVzdGVkLmpzIiwibm9kZV9tb2R1bGVzL2pzcy9kaXN0L2pzcy5janMuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9tYWtlU3R5bGVzL211bHRpS2V5U3RvcmUuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9tYWtlU3R5bGVzL2luZGV4Q291bnRlci5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lLmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZ2V0U3R5bGVzQ3JlYXRvci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXByb3BzLXNvcnQvZGlzdC9qc3MtcGx1Z2luLXByb3BzLXNvcnQuY2pzLmpzIiwibm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbi9kaXN0L2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbi5janMuanMiLCJub2RlX21vZHVsZXMvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQvZGlzdC9qc3MtcGx1Z2luLWRlZmF1bHQtdW5pdC5janMuanMiLCJub2RlX21vZHVsZXMvanNzLXBsdWdpbi1jYW1lbC1jYXNlL2Rpc3QvanNzLXBsdWdpbi1jYW1lbC1jYXNlLmNqcy5qcyIsIm5vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWdsb2JhbC9kaXN0L2pzcy1wbHVnaW4tZ2xvYmFsLmNqcy5qcyIsIm5vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLW5lc3RlZC9kaXN0L2pzcy1wbHVnaW4tbmVzdGVkLmNqcy5qcyIsIm5vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci9kaXN0L2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyLmNqcy5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEJhc2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEJhc2UvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvaXNNdWlFbGVtZW50LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL091dGxpbmVkSW5wdXQvTm90Y2hlZE91dGxpbmUuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUxhYmVsL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duLmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1NlbGVjdC9TZWxlY3RJbnB1dC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJub2RlX21vZHVsZXMvQGRvd25sb2FkL2Jsb2NraWVzL2Rpc3QvYmxvY2tpZXMuanMiLCJ1aS9oZWxwZXJzL3V0aWxzL2ljb24tZmFjdG9yeS5qcyIsIm5vZGVfbW9kdWxlcy9AbWV0YW1hc2svamF6emljb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9janMvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWZhc3QtY29tcGFyZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9kaXN0L2Nqcy9wb3BwZXIuanMiLCJ1aS9jb21wb25lbnRzL3VpL2xpc3QtaXRlbS9saXN0LWl0ZW0uY29tcG9uZW50LmpzIiwidWkvaGVscGVycy91dGlscy9jb21tb24udXRpbC5qcyIsInVpL2hvb2tzL3VzZVRva2VuRGlzcGxheVZhbHVlLmpzIiwidWkvaG9va3MvdXNlVG9rZW5EYXRhLmpzIiwidWkvaG9va3MvdXNlU3dhcHBlZFRva2VuVmFsdWUuanMiLCJ1aS9ob29rcy91c2VDdXJyZW50QXNzZXQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC90cmFuc2FjdGlvbi1pY29uL3RyYW5zYWN0aW9uLWljb24uanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jYW5jZWwtYnV0dG9uL2NhbmNlbC1idXR0b24uanMiLCJ1aS9jb21wb25lbnRzL2FwcC90cmFuc2FjdGlvbi1saXN0LWl0ZW0tZGV0YWlscy90cmFuc2FjdGlvbi1saXN0LWl0ZW0tZGV0YWlscy5jb250YWluZXIuanMiLCJub2RlX21vZHVsZXMvcXIuanMvbGliL21hdGguanMiLCJub2RlX21vZHVsZXMvcXIuanMvbGliL21vZGUuanMiLCJub2RlX21vZHVsZXMvQHp4aW5nL2Jyb3dzZXIvY2pzL2NvbW1vbi9uYXZpZ2F0b3ItdXRpbHMuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9nYXMtY3VzdG9taXphdGlvbi9nYXMtcHJpY2UtYnV0dG9uLWdyb3VwL2dhcy1wcmljZS1idXR0b24tZ3JvdXAuY29tcG9uZW50LmpzIiwidWkvcGFnZXMvZmlyc3QtdGltZS1mbG93L2NyZWF0ZS1wYXNzd29yZC9pbXBvcnQtd2l0aC1zZWVkLXBocmFzZS9pbXBvcnQtd2l0aC1zZWVkLXBocmFzZS5jb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQvbGliL2Nqcy91dGlscy9kaXNjb3VudF9sb2Rhc2guanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQvbGliL2Nqcy9Nb25vdG9uaWNJbnRlcnBvbGFudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kbmQtaHRtbDUtYmFja2VuZC9saWIvY2pzL05hdGl2ZURyYWdTb3VyY2VzL05hdGl2ZURyYWdTb3VyY2UuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQvbGliL2Nqcy9OYXRpdmVEcmFnU291cmNlcy9uYXRpdmVUeXBlc0NvbmZpZy5qcyIsInVpL3BhZ2VzL2ZpcnN0LXRpbWUtZmxvdy9zZWVkLXBocmFzZS9jb25maXJtLXNlZWQtcGhyYXNlL2RyYWdnYWJsZS1zZWVkLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvdWkvbG9jay1pY29uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Rpc3Bvc2FibGVzL21vZHVsZXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG5kL2xpYi93cmFwQ29ubmVjdG9ySG9va3MuanMiLCJub2RlX21vZHVsZXMvZG5kLWNvcmUvbGliL2ludGVyZmFjZXMuanMiLCJub2RlX21vZHVsZXMvZG5kLWNvcmUvbGliL2ZhY3Rvcmllcy5qcyIsInVpL3BhZ2VzL3NldHRpbmdzL2NvbnRhY3QtbGlzdC10YWIvZWRpdC1jb250YWN0L2VkaXQtY29udGFjdC5jb21wb25lbnQuanMiLCJ1aS9wYWdlcy9zZXR0aW5ncy9jb250YWN0LWxpc3QtdGFiL3ZpZXctY29udGFjdC92aWV3LWNvbnRhY3QuY29tcG9uZW50LmpzIiwidWkvcGFnZXMvc2V0dGluZ3MvY29udGFjdC1saXN0LXRhYi9hZGQtY29udGFjdC9hZGQtY29udGFjdC5jb21wb25lbnQuanMiLCJ1aS9wYWdlcy9zZXR0aW5ncy9uZXR3b3Jrcy10YWIvbmV0d29ya3MtbGlzdC9uZXR3b3Jrcy1saXN0LmpzIiwibm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL3NoYW1zLmpzIiwibm9kZV9tb2R1bGVzL2dldC1pbnRyaW5zaWMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWV0YW1hc2svZXRoLXRva2VuLXRyYWNrZXIvbm9kZV9tb2R1bGVzL2V0aGpzLWFiaS9saWIvdXRpbHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1ldGFtYXNrL2V0aC10b2tlbi10cmFja2VyL25vZGVfbW9kdWxlcy9ldGhqcy9ub2RlX21vZHVsZXMvZXRoanMtY29udHJhY3Qvbm9kZV9tb2R1bGVzL2V0aGpzLWFiaS9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1ldGFtYXNrL2V0aC10b2tlbi10cmFja2VyL25vZGVfbW9kdWxlcy9ldGhqcy9ub2RlX21vZHVsZXMvZXRoanMtY29udHJhY3QvbGliL2hhcy10eC1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvQG1ldGFtYXNrL2V0aC10b2tlbi10cmFja2VyL25vZGVfbW9kdWxlcy9ldGhqcy9ub2RlX21vZHVsZXMvZXRoanMtY29udHJhY3QvbGliL2NvbnRyYWN0LmpzIiwidWkvcGFnZXMvc3dhcHMvc2VhcmNoYWJsZS1pdGVtLWxpc3QvbGlzdC1pdGVtLXNlYXJjaC9saXN0LWl0ZW0tc2VhcmNoLmNvbXBvbmVudC5qcyIsInVpL3BhZ2VzL3N3YXBzL3NlYXJjaGFibGUtaXRlbS1saXN0L2l0ZW0tbGlzdC9pdGVtLWxpc3QuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLXBvcG92ZXIvbmV0d29yay1zdGF0aXN0aWNzL2xhdGVzdC1wcmlvcml0eS1mZWUtZmllbGQvbGF0ZXN0LXByaW9yaXR5LWZlZS1maWVsZC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2VkaXQtZ2FzLWZlZS1wb3BvdmVyL25ldHdvcmstc3RhdGlzdGljcy9zdGF0dXMtc2xpZGVyL3N0YXR1cy1zbGlkZXIuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9hZHZhbmNlZC1nYXMtZmVlLXBvcG92ZXIvYWR2YW5jZWQtZ2FzLWZlZS1pbnB1dHMvYmFzZS1mZWUtaW5wdXQvYmFzZS1mZWUtaW5wdXQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9hZHZhbmNlZC1nYXMtZmVlLXBvcG92ZXIvYWR2YW5jZWQtZ2FzLWZlZS1pbnB1dHMvcHJpb3JpdHktZmVlLWlucHV0L3ByaW9yaXR5LWZlZS1pbnB1dC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3Rva2VuLWNlbGwvdG9rZW4tY2VsbC5qcyIsInVpL3BhZ2VzL3NlbmQvc2VuZC1jb250ZW50L3NlbmQtcm93LXdyYXBwZXIvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL3VpL25pY2tuYW1lLXBvcG92ZXIvbmlja25hbWUtcG9wb3Zlci5jb21wb25lbnQuanMiLCJ1aS9wYWdlcy9zZW5kL3NlbmQtY29udGVudC9zZW5kLWFtb3VudC1yb3cvYW1vdW50LW1heC1idXR0b24vaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC91c2VyLXByZWZlcmVuY2VkLXRva2VuLWlucHV0L2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvdXNlci1wcmVmZXJlbmNlZC1jdXJyZW5jeS1pbnB1dC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvdWkvYWNjb3VudC1taXNtYXRjaC13YXJuaW5nL2FjY291bnQtbWlzbWF0Y2gtd2FybmluZy5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25maXJtLXBhZ2UtY29udGFpbmVyL2NvbmZpcm0tcGFnZS1jb250YWluZXItY29udGVudC9jb25maXJtLXBhZ2UtY29udGFpbmVyLWNvbnRlbnQuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvY29uZmlybS1wYWdlLWNvbnRhaW5lci9jb25maXJtLXBhZ2UtY29udGFpbmVyLWNvbnRlbnQvY29uZmlybS1wYWdlLWNvbnRhaW5lci1zdW1tYXJ5L2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvY29uZmlybS1wYWdlLWNvbnRhaW5lci9jb25maXJtLXBhZ2UtY29udGFpbmVyLWNvbnRlbnQvY29uZmlybS1wYWdlLWNvbnRhaW5lci13YXJuaW5nL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvc2lnbmF0dXJlLXJlcXVlc3Qvc2lnbmF0dXJlLXJlcXVlc3QtaGVhZGVyL3NpZ25hdHVyZS1yZXF1ZXN0LWhlYWRlci5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zaWduYXR1cmUtcmVxdWVzdC9zaWduYXR1cmUtcmVxdWVzdC1mb290ZXIvc2lnbmF0dXJlLXJlcXVlc3QtZm9vdGVyLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NpZ25hdHVyZS1yZXF1ZXN0L3NpZ25hdHVyZS1yZXF1ZXN0LW1lc3NhZ2Uvc2lnbmF0dXJlLXJlcXVlc3QtbWVzc2FnZS5jb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWluc3BlY3Rvci9saWIvc3R5bGVzL3RoZW1lcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pbnNwZWN0b3IvbGliL29iamVjdC1pbnNwZWN0b3IvT2JqZWN0TGFiZWwuanMiLCJub2RlX21vZHVsZXMvaXMtZG9tL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWluc3BlY3Rvci9saWIvZG9tLWluc3BlY3Rvci9ET01JbnNwZWN0b3IuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtaW5zcGVjdG9yL2xpYi9vYmplY3QvT2JqZWN0VmFsdWUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtaW5zcGVjdG9yL2xpYi9vYmplY3QvT2JqZWN0TmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pbnNwZWN0b3IvbGliL29iamVjdC1pbnNwZWN0b3IvT2JqZWN0Um9vdExhYmVsLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWluc3BlY3Rvci9saWIvb2JqZWN0LWluc3BlY3Rvci9PYmplY3RJbnNwZWN0b3IuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtaW5zcGVjdG9yL2xpYi90YWJsZS1pbnNwZWN0b3IvVGFibGVJbnNwZWN0b3IuanMiLCJ1aS9oZWxwZXJzL3V0aWxzL29wdGltaXNtL2ZldGNoRXN0aW1hdGVkTDFGZWUuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25maXJtLXBhZ2UtY29udGFpbmVyL2NvbmZpcm0tcGFnZS1jb250YWluZXItaGVhZGVyL2NvbmZpcm0tcGFnZS1jb250YWluZXItaGVhZGVyLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2NvbmZpcm0tcGFnZS1jb250YWluZXIvY29uZmlybS1kZXRhaWwtcm93L2NvbmZpcm0tZGV0YWlsLXJvdy5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25maXJtLXBhZ2UtY29udGFpbmVyL2NvbmZpcm0tcGFnZS1jb250YWluZXItbmF2aWdhdGlvbi9jb25maXJtLXBhZ2UtY29udGFpbmVyLW5hdmlnYXRpb24uY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvY29uZmlybS1wYWdlLWNvbnRhaW5lci9jb25maXJtLXBhZ2UtY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3RyYW5zYWN0aW9uLWRlY29kaW5nL2NvbnN0YW50cy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyLXV0aWwtaW5zcGVjdC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3RyYW5zYWN0aW9uLWRlY29kaW5nL3RyYW5zYWN0aW9uLWRlY29kaW5nLnV0aWwuanMiLCJ1aS9jb21wb25lbnRzL2FwcC90cmFuc2FjdGlvbi1kZWNvZGluZy9jb21wb25lbnRzL2RlY29kaW5nL2FkZHJlc3MvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC90cmFuc2FjdGlvbi1kZWNvZGluZy9jb21wb25lbnRzL3VpL2FjY3JlZGl0YXRpb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvY29kZWMvZGlzdC9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvZGVjb2Rlci9kaXN0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vbWVyZ2UuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9yZXNwb25zaXZlUHJvcFR5cGUuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9tZW1vaXplLmpzIiwibm9kZV9tb2R1bGVzL2lzLWluLWJyb3dzZXIvZGlzdC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2dldFN0eWxlc0NyZWF0b3IvZ2V0U3R5bGVzQ3JlYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5janMuanMiLCJub2RlX21vZHVsZXMvY3NzLXZlbmRvci9kaXN0L2Nzcy12ZW5kb3IuY2pzLmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0lucHV0QmFzZS9JbnB1dEJhc2UuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUxhYmVsL0Zvcm1MYWJlbC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS91dGlscy9jcmVhdGVTdmdJY29uLmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL293bmVyRG9jdW1lbnQuanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvdXNlRm9ya1JlZi5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS91dGlscy91c2VDb250cm9sbGVkLmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL01lbnUvTWVudS5qcyIsIm5vZGVfbW9kdWxlcy9AbWV0YW1hc2svamF6emljb24vcGFwZXIuanMiLCJub2RlX21vZHVsZXMvQG1ldGFtYXNrL2phenppY29uL2NvbG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9tZXJzZW5uZS10d2lzdGVyL3NyYy9tZXJzZW5uZS10d2lzdGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvbG9yL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy91aS9pY29uL3JlY2VpdmUtaWNvbi5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL3VpL2ljb24vaW50ZXJhY3Rpb24taWNvbi5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL3VpL2ljb24vYXBwcm92ZS1pY29uLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvdWkvaWNvbi9zd2FwLWljb24tZm9yLWxpc3QuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy91aS9pY29uL3NpZ24taWNvbi5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL3VpL2ljb24vc2VuZC1pY29uLmNvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3RyYW5zYWN0aW9uLWxpc3QtaXRlbS1kZXRhaWxzL3RyYW5zYWN0aW9uLWxpc3QtaXRlbS1kZXRhaWxzLmNvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kbmQtaHRtbDUtYmFja2VuZC9saWIvY2pzL05hdGl2ZURyYWdTb3VyY2VzL2dldERhdGFGcm9tRGF0YVRyYW5zZmVyLmpzIiwidWkvY29tcG9uZW50cy91aS9sb2NrLWljb24vbG9jay1pY29uLmNvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9kaXNwb3NhYmxlcy9tb2R1bGVzL2lzRGlzcG9zYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9kaXNwb3NhYmxlcy9tb2R1bGVzL0Rpc3Bvc2FibGUuanMiLCJub2RlX21vZHVsZXMvZGlzcG9zYWJsZXMvbW9kdWxlcy9Db21wb3NpdGVEaXNwb3NhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2Rpc3Bvc2FibGVzL21vZHVsZXMvU2VyaWFsRGlzcG9zYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kbmQvbGliL3V0aWxzL2Nsb25lV2l0aFJlZi5qcyIsIm5vZGVfbW9kdWxlcy9kbmQtY29yZS9saWIvRHJhZ0Ryb3BNYW5hZ2VySW1wbC5qcyIsInVpL3BhZ2VzL3NldHRpbmdzL25ldHdvcmtzLXRhYi9uZXR3b3Jrcy1saXN0LWl0ZW0vaW5kZXguanMiLCJub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwibm9kZV9tb2R1bGVzL0BtZXRhbWFzay9ldGgtdG9rZW4tdHJhY2tlci9ub2RlX21vZHVsZXMvZXRoanMvbm9kZV9tb2R1bGVzL2V0aGpzLWNvbnRyYWN0L25vZGVfbW9kdWxlcy9ldGhqcy1hYmkvbGliL3V0aWxzL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvYWR2YW5jZWQtZ2FzLWZlZS1wb3BvdmVyL2FkdmFuY2VkLWdhcy1mZWUtaW5wdXRzL3V0aWxzLmpzIiwidWkvY29tcG9uZW50cy9hcHAvYWR2YW5jZWQtZ2FzLWZlZS1wb3BvdmVyL2FkdmFuY2VkLWdhcy1mZWUtaW5wdXQtc3VidGV4dC9pbmRleC5qcyIsInVpL3BhZ2VzL3NlbmQvc2VuZC1jb250ZW50L3NlbmQtcm93LXdyYXBwZXIvc2VuZC1yb3ctd3JhcHBlci5jb21wb25lbnQuanMiLCJ1aS9wYWdlcy9zZW5kL3NlbmQtY29udGVudC9zZW5kLWFtb3VudC1yb3cvYW1vdW50LW1heC1idXR0b24vYW1vdW50LW1heC1idXR0b24uanMiLCJ1aS9jb21wb25lbnRzL2FwcC91c2VyLXByZWZlcmVuY2VkLXRva2VuLWlucHV0L3VzZXItcHJlZmVyZW5jZWQtdG9rZW4taW5wdXQuY29udGFpbmVyLmpzIiwidWkvY29tcG9uZW50cy9hcHAvdXNlci1wcmVmZXJlbmNlZC1jdXJyZW5jeS1pbnB1dC91c2VyLXByZWZlcmVuY2VkLWN1cnJlbmN5LWlucHV0LmNvbnRhaW5lci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2NvbmZpcm0tcGFnZS1jb250YWluZXIvY29uZmlybS1wYWdlLWNvbnRhaW5lci1jb250ZW50L2NvbmZpcm0tcGFnZS1jb250YWluZXItc3VtbWFyeS9jb25maXJtLXBhZ2UtY29udGFpbmVyLXN1bW1hcnkuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvY29uZmlybS1wYWdlLWNvbnRhaW5lci9jb25maXJtLXBhZ2UtY29udGFpbmVyLWNvbnRlbnQvY29uZmlybS1wYWdlLWNvbnRhaW5lci13YXJuaW5nL2NvbmZpcm0tcGFnZS1jb250YWluZXItd2FybmluZy5jb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtaW5zcGVjdG9yL2xpYi9zdHlsZXMvdGhlbWVzL2Nocm9tZURhcmsuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtaW5zcGVjdG9yL2xpYi9zdHlsZXMvdGhlbWVzL2Nocm9tZUxpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2lzLXdpbmRvdy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1vYmplY3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhY3QtaW5zcGVjdG9yL2xpYi90cmVlLXZpZXcvVHJlZVZpZXcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtaW5zcGVjdG9yL2xpYi9zdHlsZXMvVGhlbWVQcm92aWRlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pbnNwZWN0b3IvbGliL2RvbS1pbnNwZWN0b3Ivc2hvdWxkSW5saW5lLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWluc3BlY3Rvci9saWIvZG9tLWluc3BlY3Rvci9ET01Ob2RlUHJldmlldy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pbnNwZWN0b3IvbGliL3N0eWxlcy9jcmVhdGVTdHlsZXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pbnNwZWN0b3IvbGliL29iamVjdC1pbnNwZWN0b3IvT2JqZWN0UHJldmlldy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pbnNwZWN0b3IvbGliL3RhYmxlLWluc3BlY3Rvci9EYXRhQ29udGFpbmVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWluc3BlY3Rvci9saWIvdGFibGUtaW5zcGVjdG9yL0hlYWRlckNvbnRhaW5lci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pbnNwZWN0b3IvbGliL3RhYmxlLWluc3BlY3Rvci9nZXRIZWFkZXJzLmpzIiwidWkvaGVscGVycy91dGlscy9vcHRpbWlzbS9idWlsZFVuc2VyaWFsaXplZFRyYW5zYWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL0BldGgtb3B0aW1pc20vY29udHJhY3RzL2Rpc3QvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL3VpL3NlbmRlci10by1yZWNpcGllbnQvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC90cmFuc2FjdGlvbi1kZWNvZGluZy9jb21wb25lbnRzL2RlY29kaW5nL2FkZHJlc3MvYWRkcmVzcy5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC90cmFuc2FjdGlvbi1kZWNvZGluZy9jb21wb25lbnRzL3VpL2FjY3JlZGl0YXRpb24vYWNjcmVkaXRhdGlvbi5jb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvY29kZWMvZGlzdC9saWIvZXJyb3JzLmpzIiwibm9kZV9tb2R1bGVzL0B0cnVmZmxlL2NvZGVjL2Rpc3QvbGliL2NvbW1vbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AdHJ1ZmZsZS9jb2RlYy9kaXN0L2xpYi9hYmlmeS5qcyIsIm5vZGVfbW9kdWxlcy9AdHJ1ZmZsZS9jb2RlYy9kaXN0L2xpYi9jb252ZXJzaW9uLmpzIiwibm9kZV9tb2R1bGVzL0B0cnVmZmxlL2NvZGVjL2Rpc3QvbGliL2NvbXBpbGF0aW9ucy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AdHJ1ZmZsZS9jb2RlYy9kaXN0L2xpYi9ldm0vaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvY29kZWMvZGlzdC9saWIvYmFzaWMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvY29kZWMvZGlzdC9saWIvYnl0ZXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvY29kZWMvZGlzdC9saWIvdG9waWMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvY29kZWMvZGlzdC9saWIvbWFwcGluZy1rZXkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvY29kZWMvZGlzdC9saWIvbWVtb3J5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0B0cnVmZmxlL2NvZGVjL2Rpc3QvbGliL3N0YWNrL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0B0cnVmZmxlL2NvZGVjL2Rpc3QvbGliL3NwZWNpYWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvY29kZWMvZGlzdC9saWIvc3RvcmFnZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AdHJ1ZmZsZS9jb2RlYy9kaXN0L2xpYi9hc3QtY29uc3RhbnQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvY29kZWMvZGlzdC9saWIvYXN0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0B0cnVmZmxlL2NvZGVjL2Rpc3QvbGliL2V4cG9ydC5qcyIsIm5vZGVfbW9kdWxlcy9AdHJ1ZmZsZS9jb2RlYy9kaXN0L2xpYi9mb3JtYXQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHRydWZmbGUvY29kZWMvZGlzdC9saWIvY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9AdHJ1ZmZsZS9jb2RlYy9kaXN0L2xpYi9hYmktZGF0YS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AdHJ1ZmZsZS9jb2RlYy9kaXN0L2xpYi9jb250ZXh0cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AdHJ1ZmZsZS9jb2RlYy9kaXN0L2xpYi9jb21waWxlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AdHJ1ZmZsZS9kZWNvZGVyL2Rpc3QvZXJyb3JzLmpzIiwibm9kZV9tb2R1bGVzL0B0cnVmZmxlL2RlY29kZXIvZGlzdC9kZWNvZGVycy5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UZXh0YXJlYUF1dG9zaXplL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N2Z0ljb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvc2V0UmVmLmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL01lbnVMaXN0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1BvcG92ZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY29sb3Ivbm9kZV9tb2R1bGVzL2Nsb25lL2Nsb25lLmpzIiwibm9kZV9tb2R1bGVzL2NvbG9yLXN0cmluZy9jb2xvci1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Hcm93L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTW9kYWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUGFwZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL01lbnUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTmF0aXZlU2VsZWN0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0FjY29yZGlvbkFjdGlvbnMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQWNjb3JkaW9uRGV0YWlscy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9BcHBCYXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQmFkZ2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQmFja2Ryb3AvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQm90dG9tTmF2aWdhdGlvbkFjdGlvbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Cb3R0b21OYXZpZ2F0aW9uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0JveC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25Hcm91cC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DYXJkQWN0aW9uQXJlYS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DYXJkQ29udGVudC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DYXJkSGVhZGVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NhcmRNZWRpYS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DYXJkQWN0aW9ucy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9DaXJjdWxhclByb2dyZXNzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NsaWNrQXdheUxpc3RlbmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NvbnRhaW5lci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Db2xsYXBzZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Dc3NCYXNlbGluZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2cvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nQWN0aW9ucy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2dDb250ZW50L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ0NvbnRlbnRUZXh0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0RpdmlkZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nVGl0bGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRHJhd2VyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0V4cGFuc2lvblBhbmVsQWN0aW9ucy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9FeHBhbnNpb25QYW5lbERldGFpbHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRmFiL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0V4cGFuc2lvblBhbmVsU3VtbWFyeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Gb3JtQ29udHJvbExhYmVsL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0ZhZGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUdyb3VwL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0dyaWQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3JpZExpc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3JpZExpc3RUaWxlQmFyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0dyaWRMaXN0VGlsZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JY29uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpbmVhclByb2dyZXNzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpbmsvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvSWNvbkJ1dHRvbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbUF2YXRhci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbUljb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTWVudUl0ZW0vaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW1UZXh0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RTdWJoZWFkZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTm9Tc3IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTW9iaWxlU3RlcHBlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Qb3BwZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUG9ydGFsL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1Jvb3RSZWYvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU25hY2tiYXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU2xpZGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU25hY2tiYXJDb250ZW50L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N0ZXAvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3RlcENvbnRlbnQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3RlcEJ1dHRvbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TdGVwQ29ubmVjdG9yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N0ZXBMYWJlbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TdGVwcGVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1N3aXRjaC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVCb2R5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlQ29udGFpbmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlRm9vdGVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlSGVhZC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZVJvdy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9VbnN0YWJsZV9UcmFwRm9jdXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVG9vbGJhci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS91c2VNZWRpYVF1ZXJ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3dpdGhNb2JpbGVEaWFsb2cvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXNlU2Nyb2xsVHJpZ2dlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Ub29sdGlwL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3dpdGhXaWR0aC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9ab29tL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0FjY29yZGlvblN1bW1hcnkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRXhwYW5zaW9uUGFuZWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvSGlkZGVuL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1JhZGlvR3JvdXAvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU2xpZGVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlQ2VsbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Td2lwZWFibGVEcmF3ZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVQYWdpbmF0aW9uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYnMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQWNjb3JkaW9uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbkJhc2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQXZhdGFyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NoZWNrYm94L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NoaXAvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU3RlcEljb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVTb3J0TGFiZWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFiU2Nyb2xsQnV0dG9uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0JyZWFkY3J1bWJzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1JhZGlvL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy91aS9zZW5kZXItdG8tcmVjaXBpZW50L3NlbmRlci10by1yZWNpcGllbnQuY29uc3RhbnRzLmpzIiwidWkvY29tcG9uZW50cy9hcHAvdHJhbnNhY3Rpb24tYnJlYWtkb3duL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvdHJhbnNhY3Rpb24tYWN0aXZpdHktbG9nL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2RuZC1jb3JlL2xpYi9hY3Rpb25zL2RyYWdEcm9wLmpzIiwibm9kZV9tb2R1bGVzL2RuZC1jb3JlL2xpYi9IYW5kbGVyUmVnaXN0cnlJbXBsLmpzIiwibm9kZV9tb2R1bGVzL2RuZC1jb3JlL2xpYi9EcmFnRHJvcE1vbml0b3JJbXBsLmpzIiwibm9kZV9tb2R1bGVzL2RuZC1jb3JlL2xpYi9yZWR1Y2Vycy9pbmRleC5qcyIsInVpL3BhZ2VzL3NldHRpbmdzL25ldHdvcmtzLXRhYi9uZXR3b3Jrcy1saXN0LWl0ZW0vbmV0d29ya3MtbGlzdC1pdGVtLmpzIiwidWkvY29tcG9uZW50cy9hcHAvYWR2YW5jZWQtZ2FzLWZlZS1wb3BvdmVyL2FkdmFuY2VkLWdhcy1mZWUtaW5wdXQtc3VidGV4dC9hZHZhbmNlZC1nYXMtZmVlLWlucHV0LXN1YnRleHQuanMiLCJ1aS9wYWdlcy9zZW5kL3NlbmQtY29udGVudC9zZW5kLXJvdy13cmFwcGVyL3NlbmQtcm93LWVycm9yLW1lc3NhZ2UvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC91c2VyLXByZWZlcmVuY2VkLXRva2VuLWlucHV0L3VzZXItcHJlZmVyZW5jZWQtdG9rZW4taW5wdXQuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvdXNlci1wcmVmZXJlbmNlZC1jdXJyZW5jeS1pbnB1dC91c2VyLXByZWZlcmVuY2VkLWN1cnJlbmN5LWlucHV0LmNvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pbnNwZWN0b3IvbGliL3RyZWUtdmlldy9wYXRoVXRpbHMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWluc3BlY3Rvci9saWIvdHJlZS12aWV3L1RyZWVOb2RlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pbnNwZWN0b3IvbGliL3N0eWxlcy9iYXNlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvZ2V0LWl0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9pcy1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pbnNwZWN0b3IvbGliL3RhYmxlLWluc3BlY3Rvci9USC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJub2RlX21vZHVsZXMvQGV0aC1vcHRpbWlzbS9jb250cmFjdHMvZGlzdC9wcmVkZXBsb3lzLmpzIiwibm9kZV9tb2R1bGVzL0BldGgtb3B0aW1pc20vY29udHJhY3RzL2Rpc3QvY29udHJhY3QtZGVmcy5qcyIsIm5vZGVfbW9kdWxlcy9AZXRoLW9wdGltaXNtL2NvbnRyYWN0cy9kaXN0L2Nvbm5lY3QtY29udHJhY3RzLmpzIiwidWkvY29tcG9uZW50cy91aS9zZW5kZXItdG8tcmVjaXBpZW50L3NlbmRlci10by1yZWNpcGllbnQuY29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL0B0cnVmZmxlL2NvZGVjL2Rpc3QvbGliL2NvbW1vbi90eXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9iaWcuanMvYmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFLQTs7QUFDQTs7QUFLQTs7QUFFQSxNQUFNLGVBQWUsR0FBSSxLQUFELElBQVc7QUFDakMsU0FBTztBQUNMLElBQUEsVUFBVSxFQUFFLHdCQUFjLEtBQWQsQ0FEUDtBQUVMLElBQUEsUUFBUSxFQUFFLHNCQUFZLEtBQVosQ0FGTDtBQUdMLElBQUEsYUFBYSxFQUFFLDJCQUFpQixLQUFqQjtBQUhWLEdBQVA7QUFLRCxDQU5EOztBQVFBLE1BQU0sa0JBQWtCLEdBQUksUUFBRCxJQUFjO0FBQ3ZDLFNBQU87QUFDTCxJQUFBLGdCQUFnQixFQUFFLENBQUMsU0FBRCxFQUFZLFFBQVosS0FDaEIsUUFBUSxDQUFDLCtCQUFpQixTQUFqQixFQUE0QixRQUE1QixDQUFELENBRkw7QUFHTCxJQUFBLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQyw2QkFBRCxDQUhyQjtBQUlMLElBQUEsY0FBYyxFQUFHLElBQUQsSUFBVSxRQUFRLENBQUMsNkJBQWUsSUFBZixDQUFELENBSjdCO0FBS0wsSUFBQSxrQkFBa0IsRUFBRSxNQUFNLFFBQVEsQ0FBQyw4QkFBRDtBQUw3QixHQUFQO0FBT0QsQ0FSRDs7ZUFVZSxvQkFDYiwwQkFEYSxFQUViLHlCQUFRLGVBQVIsRUFBeUIsa0JBQXpCLENBRmEsRUFHYixtQkFIYSxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbENmOzs7Ozs7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMxSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDMURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ24yR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FDdmRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUMxTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDcktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6RUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBOztBQUNBOztBQUVBOztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVlLFNBQVMsZ0JBQVQsQ0FBMEI7QUFBRSxFQUFBO0FBQUYsQ0FBMUIsRUFBMEQ7QUFDdkUsUUFBTSxDQUFDLEdBQUcscUNBQVY7QUFDQSxR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QUFDRjtBQUNBO0FBQ0UsRUFBQSxTQUFTLEVBQUUsbUJBQVUsTUFaSzs7QUFhMUI7QUFDRjtBQUNBO0FBQ0UsRUFBQSxjQUFjLEVBQUUsbUJBQVUsSUFoQkE7O0FBaUIxQjtBQUNGO0FBQ0E7QUFDRSxFQUFBLFdBQVcsRUFBRSxtQkFBVSxJQXBCRzs7QUFxQjFCO0FBQ0Y7QUFDQTtBQUNFLEVBQUEsSUFBSSxFQUFFLG1CQUFVO0FBeEJVLENBQTVCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNGQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hH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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQy9GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMvREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN4RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDM0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUM1ckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDek5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMvTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDckhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMzTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDN0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMvT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2htQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMzRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2ozREE7O0FBQ0E7O0FBQ0E7O0FBRWUsU0FBUyxRQUFULENBQWtCO0FBQy9CLEVBQUEsS0FEK0I7QUFFL0IsRUFBQSxRQUYrQjtBQUcvQixFQUFB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU0sYUFBTixTQUE0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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMxVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FDaGFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDMUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQy9KQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3ZKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3ZYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2WkE7QUFDQTtBQUNBO0FBQ08sTUFBTSxtQkFBbUIsR0FBSSxNQUFELElBQVk7QUFDN0MsU0FBTyxNQUFNLENBQUMsR0FBUCxDQUFZLElBQUQsSUFBVTtBQUMxQixVQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBdEI7QUFDQSxVQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBdkI7QUFDQSxVQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsSUFBM0I7QUFDQSxVQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsSUFBVixDQUFlLFNBQXJDO0FBRUEsVUFBTSxRQUFRLEdBQUc7QUFDZixNQUFBLElBQUksRUFBRSxRQURTO0FBRWYsTUFBQSxJQUFJLEVBQUUsUUFGUztBQUdmLE1BQUEsU0FBUyxFQUFFLGFBSEk7QUFJZixNQUFBLElBQUksRUFBRSxTQUFTLENBQUM7QUFKRCxLQUFqQjs7QUFPQSxRQUFJLGFBQWEsS0FBSyxRQUF0QixFQUFnQztBQUM5Qiw2Q0FDSyxRQURMO0FBRUUsUUFBQSxRQUFRLEVBQUUsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEtBQVg7QUFGL0I7QUFJRDs7QUFFRCwyQ0FDSyxRQURMO0FBRUUsTUFBQSxLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQVYsR0FBa0IsU0FBUyxDQUFDLEtBQTVCLEdBQW9DO0FBRjdDO0FBSUQsR0F4Qk0sQ0FBUDtBQXlCRCxDQTFCTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0hQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBOzs7Ozs7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNoSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNuV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDOURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN0a0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDcHFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzVLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDMVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2xOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2o2RUEsSUFBQSxTQUFBLHVCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxhQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxtQkFBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLGlCQUFBLE9BQUEsQ0FBQSwwQkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxxQkFBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSw4QkFBQSxDQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLHNCQUFBLE9BQUEsQ0FBQSw0REFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxjQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHFCQUFBLENBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsMEJBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsNkJBQUEsQ0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSx3QkFBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSwwQkFBQSxDQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFVBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsaUJBQUEsQ0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxXQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEs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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNwR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2hGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hFQTs7Ozs7Ozs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hhQTs7QUFDQTs7QUFFTyxTQUFTLHVDQUFULENBQ0wsU0FESyxFQUVMLHFCQUZLLEVBR0w7QUFDQSxNQUFJLFNBQUosRUFBZTtBQUNiLFdBQU8sd0JBQVksR0FBWixDQUNMLHdCQUFZLEdBQVosQ0FBZ0IsU0FBaEIsRUFBMkIsT0FBM0IsQ0FBbUMscUJBQW5DLENBREssQ0FBUDtBQUdEOztBQUNELFNBQU8sSUFBUDtBQUNEOztBQUVNLE1BQU0sY0FBYyxHQUFJLFFBQUQsSUFBYztBQUMxQyxNQUFJLFFBQUosRUFBYztBQUNaLFVBQU0sY0FBYyxHQUFHLGtCQUNyQixRQUFRLENBQUMsR0FBVCxDQUFjLEdBQUQsSUFBUyx1Q0FBdUMsQ0FBQyxHQUFELEVBQU0sQ0FBTixDQUE3RCxDQURxQixFQUVyQixJQUZxQixDQUVoQixLQUZnQixDQUF2QjtBQUdBLFdBQVEsR0FBRSxjQUFlLE9BQXpCO0FBQ0Q7O0FBQ0QsU0FBTyxJQUFQO0FBQ0QsQ0FSTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2ZQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBOztBQUNBOztBQUNBOzs7Ozs7QUFFZSxNQUFNLGNBQU4sU0FBNkIsZ0JBQTdCLENBQXVDO0FBWXBELEVBQUEsbUJBQW1CLEdBQUc7QUFDcEIsVUFBTTtBQUFFLE1BQUEsUUFBRjtBQUFZLE1BQUEsU0FBUyxHQUFHLEVBQXhCO0FBQTRCLE1BQUEsS0FBNUI7QUFBbUMsTUFBQSxTQUFTLEdBQUc7QUFBL0MsUUFBeUQsS0FBSyxLQUFwRTtBQUNBLFVBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxPQUFOLENBQWMsUUFBZCxJQUNkLFFBQVEsQ0FBQyxDQUFELENBQVIsSUFBZSxRQUFRLENBQUMsQ0FBRCxDQURULEdBRWQsUUFGSjtBQUdBLFVBQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLE1BQVQsR0FBa0IsQ0FBbEIsR0FBc0IsUUFBUSxDQUFDLENBQUQsQ0FBOUIsR0FBb0MsSUFBL0Q7QUFFQSx3QkFDRTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0U7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQ0csS0FESCxFQUVHLGtCQUZILENBREYsZUFLRTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0U7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQXNDLFNBQXRDLENBREYsZUFFRSwwQ0FDRyxTQUFTLGdCQUFHLDZCQUFDLDRCQUFEO0FBQXFCLE1BQUEsU0FBUyxFQUFFO0FBQWhDLE1BQUgsR0FBbUQsSUFEL0QsQ0FGRixDQUxGLENBREY7QUFjRDs7QUFFRCxFQUFBLGFBQWEsR0FBRztBQUNkLFVBQU07QUFBRSxNQUFBLFFBQUY7QUFBWSxNQUFBLFNBQVMsR0FBRyxFQUF4QjtBQUE0QixNQUFBLEtBQTVCO0FBQW1DLE1BQUEsU0FBUyxHQUFHO0FBQS9DLFFBQXlELEtBQUssS0FBcEU7QUFFQSxVQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTixDQUFjLFFBQWQsSUFDZCxRQUFRLENBQUMsQ0FBRCxDQUFSLElBQWUsUUFBUSxDQUFDLENBQUQsQ0FEVCxHQUVkLFFBRko7QUFHQSxVQUFNLGtCQUFrQixHQUN0QixDQUFDLEtBQUssQ0FBQyxPQUFOLENBQWMsUUFBZCxLQUEyQixRQUFRLENBQUMsTUFBckMsSUFBK0MsQ0FBL0MsR0FBbUQsUUFBUSxDQUFDLENBQUQsQ0FBM0QsR0FBaUUsSUFEbkU7QUFHQSx3QkFDRTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsb0JBQ0U7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQ0csS0FESCxFQUVHLFNBQVMsZ0JBQUcsNkJBQUMsNEJBQUQ7QUFBcUIsTUFBQSxTQUFTLEVBQUU7QUFBaEMsTUFBSCxHQUFtRCxJQUYvRCxFQUdHLGtCQUhILENBREYsZUFNRTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FBc0MsU0FBdEMsQ0FORixDQURGO0FBVUQ7O0FBRUQsRUFBQSxNQUFNLEdBQUc7QUFDUCxVQUFNO0FBQUUsTUFBQSxTQUFTLEdBQUc7QUFBZCxRQUFxQixLQUFLLEtBQWhDO0FBRUEsV0FBTyxTQUFTLEtBQUssUUFBZCxHQUNILEtBQUssbUJBQUwsRUFERyxHQUVILEtBQUssYUFBTCxFQUZKO0FBR0Q7O0FBOURtRDs7OzhCQUFqQyxjLGVBQ0E7QUFDakIsRUFBQSxRQUFRLEVBQUUsbUJBQVUsSUFESDtBQUVqQixFQUFBLFNBQVMsRUFBRSxtQkFBVSxNQUZKO0FBR2pCLEVBQUEsS0FBSyxFQUFFLG1CQUFVLE1BSEE7QUFJakIsRUFBQSxTQUFTLEVBQUUsbUJBQVU7QUFKSixDOzhCQURBLGMsa0JBUUc7QUFDcEIsRUFBQSxDQUFDLEVBQUUsbUJBQVU7QUFETyxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNaeEI7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBS0E7O0FBQ0E7O0FBRWUsU0FBUyxlQUFULEdBQTJCO0FBQ3hDLFFBQU0seUJBQXlCLEdBQUcsNkJBQVksdUJBQVosQ0FBbEM7QUFDQSxRQUFNLFNBQVMsR0FBRyw2QkFBWSx5QkFBWixDQUFsQjtBQUNBLFFBQU0sUUFBUSxHQUFHLDhCQUFqQjtBQUNBLFFBQU0sZUFBZSxHQUFHLG9DQUFlO0FBQ3JDLElBQUEsU0FBUyxFQUFFO0FBQ1QsTUFBQSxRQUFRLEVBQUUsY0FERDtBQUVULE1BQUEsTUFBTSxFQUFFLGFBRkM7QUFHVCxNQUFBLElBQUksRUFBRTtBQUhHO0FBRDBCLEdBQWYsQ0FBeEI7QUFPQSxRQUFNLENBQUMsR0FBRyxxQ0FBVjs7QUFFQSxRQUFNLFVBQVUsR0FBRyxNQUFNO0FBQ3ZCLElBQUEsZUFBZTtBQUNmLElBQUEsUUFBUSxDQUFDLDhCQUFELENBQVI7QUFDRCxHQUhEOztBQUtBLFFBQU0sUUFBUSxHQUFHLHlCQUFqQjtBQUVBLHNCQUNFO0FBQ0UsSUFBQSxTQUFTLEVBQUMscUJBRFo7QUFFRSxJQUFBLFFBQVEsRUFBRSxRQUZaO0FBR0UsSUFBQSxPQUFPLEVBQUU7QUFIWCxrQkFLRTtBQUFPLElBQUEsSUFBSSxFQUFDLFVBQVo7QUFBdUIsSUFBQSxPQUFPLEVBQUUsU0FBaEM7QUFBMkMsSUFBQSxRQUFRO0FBQW5ELElBTEYsZUFNRTtBQUNFLElBQUEsU0FBUyxFQUFFLHlCQUFXLDZCQUFYLEVBQTBDO0FBQ25ELCtDQUF5QztBQURVLEtBQTFDO0FBRGIsS0FLRyxDQUFDLENBQUMsS0FBRCxDQUxKLENBTkYsQ0FERjtBQWdCRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL0NEOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU0sZUFBZSxHQUFJLEtBQUQsSUFBVztBQUNqQyxRQUFNO0FBQUUsSUFBQTtBQUFGLE1BQXlDLCtCQUFlLEtBQWYsQ0FBL0M7QUFFQSxTQUFPO0FBQ0wsSUFBQTtBQURLLEdBQVA7QUFHRCxDQU5EOztBQVFBLE1BQU0sa0NBQWtDLEdBQUcseUJBQVEsZUFBUixFQUN6QyxrQ0FEeUMsQ0FBM0M7QUFJQSxrQ0FBa0MsQ0FBQyxTQUFuQyxHQUErQztBQUM3QyxFQUFBLEtBQUssRUFBRSxtQkFBVSxLQUFWLENBQWdCO0FBQ3JCLElBQUEsT0FBTyxFQUFFLG1CQUFVLE1BQVYsQ0FBaUIsVUFETDtBQUVyQixJQUFBLFFBQVEsRUFBRSxtQkFBVSxNQUZDO0FBR3JCLElBQUEsTUFBTSxFQUFFLG1CQUFVO0FBSEcsR0FBaEIsRUFJSjtBQUwwQyxDQUEvQztlQVFlLGtDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDekJmOztBQUNBOztBQUNBOztBQUVBLE1BQU0sZUFBZSxHQUFJLEtBQUQsSUFBVztBQUNqQyxRQUFNO0FBQUUsSUFBQTtBQUFGLE1BQXlDLCtCQUFlLEtBQWYsQ0FBL0M7QUFFQSxTQUFPO0FBQ0wsSUFBQTtBQURLLEdBQVA7QUFHRCxDQU5EOztlQVFlLHlCQUFRLGVBQVIsRUFBeUIscUNBQXpCLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDWGY7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBTEE7QUFPQSxNQUFNLDJCQUEyQixHQUFJLEtBQUQsSUFBVztBQUM3QyxRQUFNO0FBQ0osSUFBQSxNQURJO0FBRUosSUFBQSxLQUZJO0FBR0osSUFBQSxjQUhJO0FBSUosSUFBQSxpQkFKSTtBQUtKLElBQUEsWUFMSTtBQU1KLElBQUEsU0FOSTtBQU9KLElBQUEsZ0JBUEk7QUFRSixJQUFBLEtBUkk7QUFTSixJQUFBLE1BVEk7QUFVSixJQUFBO0FBVkksTUFXRixLQVhKO0FBYUEsUUFBTTtBQUFFLElBQUE7QUFBRixNQUF3QiwrQkFBOUI7QUFFQSxzQkFDRTtBQUFLLElBQUEsU0FBUyxFQUFFLHlCQUFXLGdDQUFYLEVBQTZDLFNBQTdDO0FBQWhCLEtBQ0csTUFBTSxLQUFLLFVBQVgsR0FBd0IsSUFBeEIsZ0JBQ0M7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLEtBQXlELE1BQXpELENBRkosZUFJRTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsa0JBQ0U7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLEtBQXlELE1BQXpELENBREYsRUFFRyxLQUFLLGlCQUNKO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixLQUNJLElBQUcsS0FBTSxFQURiLENBSEosQ0FKRixlQVlFO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixLQUNHLGdCQUFnQixpQkFDZiw2QkFBQyxrQkFBRDtBQUNFLElBQUEsU0FBUyxFQUFDLDJDQURaO0FBRUUsSUFBQSxRQUFRLEVBQUUsRUFGWjtBQUdFLElBQUEsT0FBTyxFQUFFO0FBSFgsSUFGSixFQVFHLENBQUMsU0FBRCxnQkFDQztBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsS0FDRyxjQUFjLElBQUksS0FEckIsQ0FERCxHQUlHLElBWk4sQ0FaRixFQTBCRyxDQUFDLFlBQUQsSUFBaUIsQ0FBQyxpQkFBbEIsaUJBQ0M7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLEtBQ0csaUJBREgsQ0EzQkosQ0FERjtBQWtDRCxDQWxERDs7QUFvREEsMkJBQTJCLENBQUMsU0FBNUIsR0FBd0M7QUFDdEMsRUFBQSxNQUFNLEVBQUUsbUJBQVUsTUFEb0I7QUFFdEMsRUFBQSxLQUFLLEVBQUUsbUJBQVUsU0FBVixDQUFvQixDQUFDLG1CQUFVLE1BQVgsRUFBbUIsbUJBQVUsTUFBN0IsQ0FBcEIsQ0FGK0I7QUFHdEMsRUFBQSxjQUFjLEVBQUUsbUJBQVUsSUFIWTtBQUl0QyxFQUFBLGlCQUFpQixFQUFFLG1CQUFVLElBSlM7QUFLdEMsRUFBQSxZQUFZLEVBQUUsbUJBQVUsSUFMYztBQU10QyxFQUFBLFNBQVMsRUFBRSxtQkFBVSxNQU5pQjtBQU90QyxFQUFBLGdCQUFnQixFQUFFLG1CQUFVLE1BUFU7QUFRdEMsRUFBQSxLQUFLLEVBQUUsbUJBQVUsTUFScUI7QUFTdEMsRUFBQSxNQUFNLEVBQUUsbUJBQVUsTUFBVixDQUFpQixVQVRhO0FBVXRDLEVBQUEsU0FBUyxFQUFFLG1CQUFVO0FBVmlCLENBQXhDO2VBYWUsMkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4RWY7O0FBQ0E7O0FBRUEsTUFBTSwyQkFBMkIsR0FBSSxLQUFELElBQVc7QUFDN0Msc0JBQ0U7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLGtCQUNFO0FBQ0UsSUFBQSxTQUFTLEVBQUMsc0NBRFo7QUFFRSxJQUFBLEdBQUcsRUFBQyxvQkFGTjtBQUdFLElBQUEsR0FBRyxFQUFDO0FBSE4sSUFERixlQU1FO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixLQUNHLEtBQUssQ0FBQyxPQURULENBTkYsQ0FERjtBQVlELENBYkQ7O0FBZUEsMkJBQTJCLENBQUMsU0FBNUIsR0FBd0M7QUFDdEMsRUFBQSxPQUFPLEVBQUUsbUJBQVU7QUFEbUIsQ0FBeEM7ZUFJZSwyQjs7Ozs7Ozs7Ozs7OztBQ3RCZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2xSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDbk1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2xIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzdGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN2RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2pVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUM3TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDOU5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNyTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNwekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN6SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3gwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQ2hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDN05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3RLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN0SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ2RBO0FBQ08sTUFBTSxlQUFlLEdBQUcsaUJBQXhCOztBQUNBLE1BQU0sYUFBYSxHQUFHLGVBQXRCOztBQUNBLE1BQU0sWUFBWSxHQUFHLGNBQXJCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNIUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ2xJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDckpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN6RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDeklBOzs7Ozs7Ozs7OztBQ0FBOzs7Ozs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3BSQTs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDckpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNyQ0E7QUFDQTtBQUNBO0FB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJ1aS01LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBhZGRUb0FkZHJlc3NCb29rLFxuICBzaG93UXJTY2FubmVyLFxuICBxckNvZGVEZXRlY3RlZCxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQgeyBnZXRRckNvZGVEYXRhIH0gZnJvbSAnLi4vLi4vLi4vLi4vZHVja3MvYXBwL2FwcCc7XG5pbXBvcnQge1xuICBnZXRFbnNFcnJvcixcbiAgZ2V0RW5zUmVzb2x1dGlvbixcbiAgcmVzZXRFbnNSZXNvbHV0aW9uLFxufSBmcm9tICcuLi8uLi8uLi8uLi9kdWNrcy9lbnMnO1xuaW1wb3J0IEFkZENvbnRhY3QgZnJvbSAnLi9hZGQtY29udGFjdC5jb21wb25lbnQnO1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBxckNvZGVEYXRhOiBnZXRRckNvZGVEYXRhKHN0YXRlKSxcbiAgICBlbnNFcnJvcjogZ2V0RW5zRXJyb3Ioc3RhdGUpLFxuICAgIGVuc1Jlc29sdXRpb246IGdldEVuc1Jlc29sdXRpb24oc3RhdGUpLFxuICB9O1xufTtcblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgYWRkVG9BZGRyZXNzQm9vazogKHJlY2lwaWVudCwgbmlja25hbWUpID0+XG4gICAgICBkaXNwYXRjaChhZGRUb0FkZHJlc3NCb29rKHJlY2lwaWVudCwgbmlja25hbWUpKSxcbiAgICBzY2FuUXJDb2RlOiAoKSA9PiBkaXNwYXRjaChzaG93UXJTY2FubmVyKCkpLFxuICAgIHFyQ29kZURldGVjdGVkOiAoZGF0YSkgPT4gZGlzcGF0Y2gocXJDb2RlRGV0ZWN0ZWQoZGF0YSkpLFxuICAgIHJlc2V0RW5zUmVzb2x1dGlvbjogKCkgPT4gZGlzcGF0Y2gocmVzZXRFbnNSZXNvbHV0aW9uKCkpLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShcbiAgd2l0aFJvdXRlcixcbiAgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcyksXG4pKEFkZENvbnRhY3QpO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vbmV0d29ya3MtbGlzdCc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0dmFyIHN0ciA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHR2YXIgaXNBcmdzID0gc3RyID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcblx0aWYgKCFpc0FyZ3MpIHtcblx0XHRpc0FyZ3MgPSBzdHIgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHRcdHZhbHVlICE9PSBudWxsICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuXHRcdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHRcdHRvU3RyLmNhbGwodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0fVxuXHRyZXR1cm4gaXNBcmdzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXNTaGltO1xuaWYgKCFPYmplY3Qua2V5cykge1xuXHQvLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuXHR2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBnbG9iYWwtcmVxdWlyZVxuXHR2YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblx0dmFyIGhhc0RvbnRFbnVtQnVnID0gIWlzRW51bWVyYWJsZS5jYWxsKHsgdG9TdHJpbmc6IG51bGwgfSwgJ3RvU3RyaW5nJyk7XG5cdHZhciBoYXNQcm90b0VudW1CdWcgPSBpc0VudW1lcmFibGUuY2FsbChmdW5jdGlvbiAoKSB7fSwgJ3Byb3RvdHlwZScpO1xuXHR2YXIgZG9udEVudW1zID0gW1xuXHRcdCd0b1N0cmluZycsXG5cdFx0J3RvTG9jYWxlU3RyaW5nJyxcblx0XHQndmFsdWVPZicsXG5cdFx0J2hhc093blByb3BlcnR5Jyxcblx0XHQnaXNQcm90b3R5cGVPZicsXG5cdFx0J3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcblx0XHQnY29uc3RydWN0b3InXG5cdF07XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0dmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvO1xuXHR9O1xuXHR2YXIgZXhjbHVkZWRLZXlzID0ge1xuXHRcdCRhcHBsaWNhdGlvbkNhY2hlOiB0cnVlLFxuXHRcdCRjb25zb2xlOiB0cnVlLFxuXHRcdCRleHRlcm5hbDogdHJ1ZSxcblx0XHQkZnJhbWU6IHRydWUsXG5cdFx0JGZyYW1lRWxlbWVudDogdHJ1ZSxcblx0XHQkZnJhbWVzOiB0cnVlLFxuXHRcdCRpbm5lckhlaWdodDogdHJ1ZSxcblx0XHQkaW5uZXJXaWR0aDogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuY2hhbmdlOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5lcnJvcjogdHJ1ZSxcblx0XHQkb3V0ZXJIZWlnaHQ6IHRydWUsXG5cdFx0JG91dGVyV2lkdGg6IHRydWUsXG5cdFx0JHBhZ2VYT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYWdlWU9mZnNldDogdHJ1ZSxcblx0XHQkcGFyZW50OiB0cnVlLFxuXHRcdCRzY3JvbGxMZWZ0OiB0cnVlLFxuXHRcdCRzY3JvbGxUb3A6IHRydWUsXG5cdFx0JHNjcm9sbFg6IHRydWUsXG5cdFx0JHNjcm9sbFk6IHRydWUsXG5cdFx0JHNlbGY6IHRydWUsXG5cdFx0JHdlYmtpdEluZGV4ZWREQjogdHJ1ZSxcblx0XHQkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG5cdFx0JHdpbmRvdzogdHJ1ZVxuXHR9O1xuXHR2YXIgaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnID0gKGZ1bmN0aW9uICgpIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZvciAodmFyIGsgaW4gd2luZG93KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoIWV4Y2x1ZGVkS2V5c1snJCcgKyBrXSAmJiBoYXMuY2FsbCh3aW5kb3csIGspICYmIHdpbmRvd1trXSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93W2tdID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSh3aW5kb3dba10pO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KCkpO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5ID0gZnVuY3Rpb24gKG8pIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcpIHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdGtleXNTaGltID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0XHR2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdFx0dmFyIGlzQXJndW1lbnRzID0gaXNBcmdzKG9iamVjdCk7XG5cdFx0dmFyIGlzU3RyaW5nID0gaXNPYmplY3QgJiYgdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBTdHJpbmddJztcblx0XHR2YXIgdGhlS2V5cyA9IFtdO1xuXG5cdFx0aWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbiAmJiAhaXNBcmd1bWVudHMpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3QnKTtcblx0XHR9XG5cblx0XHR2YXIgc2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRnVuY3Rpb247XG5cdFx0aWYgKGlzU3RyaW5nICYmIG9iamVjdC5sZW5ndGggPiAwICYmICFoYXMuY2FsbChvYmplY3QsIDApKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGkpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNBcmd1bWVudHMgJiYgb2JqZWN0Lmxlbmd0aCA+IDApIHtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgb2JqZWN0Lmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaikpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuXHRcdFx0XHRpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIGhhcy5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKG5hbWUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChoYXNEb250RW51bUJ1Zykge1xuXHRcdFx0dmFyIHNraXBDb25zdHJ1Y3RvciA9IGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneShvYmplY3QpO1xuXG5cdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGRvbnRFbnVtcy5sZW5ndGg7ICsraykge1xuXHRcdFx0XHRpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW1zW2tdID09PSAnY29uc3RydWN0b3InKSAmJiBoYXMuY2FsbChvYmplY3QsIGRvbnRFbnVtc1trXSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goZG9udEVudW1zW2tdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhlS2V5cztcblx0fTtcbn1cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJy4vJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpID4gLTEpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmQoaW50cmluc2ljKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGFncygpIHtcblx0aWYgKHRoaXMgIT0gbnVsbCAmJiB0aGlzICE9PSAkT2JqZWN0KHRoaXMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgZ2V0dGVyIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9ICcnO1xuXHRpZiAodGhpcy5nbG9iYWwpIHtcblx0XHRyZXN1bHQgKz0gJ2cnO1xuXHR9XG5cdGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcblx0XHRyZXN1bHQgKz0gJ2knO1xuXHR9XG5cdGlmICh0aGlzLm11bHRpbGluZSkge1xuXHRcdHJlc3VsdCArPSAnbSc7XG5cdH1cblx0aWYgKHRoaXMuZG90QWxsKSB7XG5cdFx0cmVzdWx0ICs9ICdzJztcblx0fVxuXHRpZiAodGhpcy51bmljb2RlKSB7XG5cdFx0cmVzdWx0ICs9ICd1Jztcblx0fVxuXHRpZiAodGhpcy5zdGlja3kpIHtcblx0XHRyZXN1bHQgKz0gJ3knO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKS5zdXBwb3J0c0Rlc2NyaXB0b3JzO1xudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAoIXN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUmVnRXhwLnByb3RvdHlwZS5mbGFncyByZXF1aXJlcyBhIHRydWUgRVM1IGVudmlyb25tZW50IHRoYXQgc3VwcG9ydHMgcHJvcGVydHkgZGVzY3JpcHRvcnMnKTtcblx0fVxuXHRpZiAoKC9hL21pZykuZmxhZ3MgPT09ICdnaW0nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSAkZ09QRChSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnKTtcblx0XHRpZiAoZGVzY3JpcHRvciAmJiB0eXBlb2YgZGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mICgvYS8pLmRvdEFsbCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRyZXR1cm4gZGVzY3JpcHRvci5nZXQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKS5zdXBwb3J0c0Rlc2NyaXB0b3JzO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIFR5cGVFcnIgPSBUeXBlRXJyb3I7XG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgcmVnZXggPSAvYS87XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUZsYWdzKCkge1xuXHRpZiAoIXN1cHBvcnRzRGVzY3JpcHRvcnMgfHwgIWdldFByb3RvKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnIoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgcmVxdWlyZXMgYSB0cnVlIEVTNSBlbnZpcm9ubWVudCB0aGF0IHN1cHBvcnRzIHByb3BlcnR5IGRlc2NyaXB0b3JzJyk7XG5cdH1cblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0dmFyIHByb3RvID0gZ2V0UHJvdG8ocmVnZXgpO1xuXHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sICdmbGFncycpO1xuXHRpZiAoIWRlc2NyaXB0b3IgfHwgZGVzY3JpcHRvci5nZXQgIT09IHBvbHlmaWxsKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkocHJvdG8sICdmbGFncycsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Z2V0OiBwb2x5ZmlsbFxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciBvcmlnRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIG9iaiA9IHt9O1xuXHR0cnkge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmosICd4JywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IG9iaiB9KTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cdFx0Zm9yICh2YXIgXyBpbiBvYmopIHsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dVbnVzZWRWYXJpYWJsZXNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIG9iai54ID09PSBvYmo7XG5cdH0gY2F0Y2ggKGUpIHsgLyogdGhpcyBpcyBJRSA4LiAqL1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gb3JpZ0RlZmluZVByb3BlcnR5ICYmIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QgJiYgKCFpc0Z1bmN0aW9uKHByZWRpY2F0ZSkgfHwgIXByZWRpY2F0ZSgpKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGFwcGx5ID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5JScpO1xudmFyICRjYWxsID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwlJyk7XG52YXIgJHJlZmxlY3RBcHBseSA9IEdldEludHJpbnNpYygnJVJlZmxlY3QuYXBwbHklJywgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcbnZhciAkbWF4ID0gR2V0SW50cmluc2ljKCclTWF0aC5tYXglJyk7XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHQkZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyB2YWx1ZTogMSB9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGRlZmluZVByb3BlcnR5XG5cdFx0JGRlZmluZVByb3BlcnR5ID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKG9yaWdpbmFsRnVuY3Rpb24pIHtcblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRpZiAoJGdPUEQgJiYgJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0dmFyIGRlc2MgPSAkZ09QRChmdW5jLCAnbGVuZ3RoJyk7XG5cdFx0aWYgKGRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHQvLyBvcmlnaW5hbCBsZW5ndGgsIHBsdXMgdGhlIHJlY2VpdmVyLCBtaW51cyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgKGFmdGVyIHRoZSByZWNlaXZlcilcblx0XHRcdCRkZWZpbmVQcm9wZXJ0eShcblx0XHRcdFx0ZnVuYyxcblx0XHRcdFx0J2xlbmd0aCcsXG5cdFx0XHRcdHsgdmFsdWU6IDEgKyAkbWF4KDAsIG9yaWdpbmFsRnVuY3Rpb24ubGVuZ3RoIC0gKGFyZ3VtZW50cy5sZW5ndGggLSAxKSkgfVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZ1bmM7XG59O1xuXG52YXIgYXBwbHlCaW5kID0gZnVuY3Rpb24gYXBwbHlCaW5kKCkge1xuXHRyZXR1cm4gJHJlZmxlY3RBcHBseShiaW5kLCAkYXBwbHksIGFyZ3VtZW50cyk7XG59O1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdCRkZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ2FwcGx5JywgeyB2YWx1ZTogYXBwbHlCaW5kIH0pO1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMuYXBwbHkgPSBhcHBseUJpbmQ7XG59XG4iLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVNwcmVhZDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIik7XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV0aCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHR4SGFzaCwgY2FsbGJhY2spIHtcbiAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgdmFyIHRpbWVvdXQgPSBldGgub3B0aW9ucy50aW1lb3V0IHx8IDgwMDAwMDtcbiAgICB2YXIgaW50ZXJ2YWwgPSBldGgub3B0aW9ucy5pbnRlcnZhbCB8fCA3MDAwO1xuXG4gICAgdmFyIHByb20gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgdHhJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXRoLmdldFRyYW5zYWN0aW9uUmVjZWlwdCh0eEhhc2gsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodHhJbnRlcnZhbCk7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWVyciAmJiByZXN1bHQpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodHhJbnRlcnZhbCk7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY291bnQgPj0gdGltZW91dCkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodHhJbnRlcnZhbCk7XG4gICAgICAgICAgdmFyIGVyck1lc3NhZ2UgPSBcIlJlY2VpcHQgdGltZW91dCB3YWl0aW5nIGZvciB0eCBoYXNoOiBcIiArIHR4SGFzaDtcbiAgICAgICAgICByZWplY3QoZXJyTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb3VudCArPSBpbnRlcnZhbDtcbiAgICAgIH0sIGludGVydmFsKTtcbiAgICB9KTtcblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgcHJvbS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlcyk7XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbGJhY2sgPyBudWxsIDogcHJvbTtcbiAgfTtcbn07IiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSByZXF1aXJlKCdidWYnICsgJ2ZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgci5zdHJpcCgpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCIvKipcclxuICogW2pzLXNoYTNde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW4xNzgvanMtc2hhM31cclxuICpcclxuICogQHZlcnNpb24gMC41LjVcclxuICogQGF1dGhvciBDaGVuLCBZaS1DeXVhbiBbZW1uMTc4QGdtYWlsLmNvbV1cclxuICogQGNvcHlyaWdodCBDaGVuLCBZaS1DeXVhbiAyMDE1LTIwMTZcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG4oZnVuY3Rpb24gKHJvb3QpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIHZhciBOT0RFX0pTID0gdHlwZW9mIHByb2Nlc3MgPT0gJ29iamVjdCcgJiYgcHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGU7XHJcbiAgaWYgKE5PREVfSlMpIHtcclxuICAgIHJvb3QgPSBnbG9iYWw7XHJcbiAgfVxyXG4gIHZhciBDT01NT05fSlMgPSAhcm9vdC5KU19TSEEzX1RFU1QgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cztcclxuICB2YXIgSEVYX0NIQVJTID0gJzAxMjM0NTY3ODlhYmNkZWYnLnNwbGl0KCcnKTtcclxuICB2YXIgU0hBS0VfUEFERElORyA9IFszMSwgNzkzNiwgMjAzMTYxNiwgNTIwMDkzNjk2XTtcclxuICB2YXIgS0VDQ0FLX1BBRERJTkcgPSBbMSwgMjU2LCA2NTUzNiwgMTY3NzcyMTZdO1xyXG4gIHZhciBQQURESU5HID0gWzYsIDE1MzYsIDM5MzIxNiwgMTAwNjYzMjk2XTtcclxuICB2YXIgU0hJRlQgPSBbMCwgOCwgMTYsIDI0XTtcclxuICB2YXIgUkMgPSBbMSwgMCwgMzI4OTgsIDAsIDMyOTA2LCAyMTQ3NDgzNjQ4LCAyMTQ3NTE2NDE2LCAyMTQ3NDgzNjQ4LCAzMjkwNywgMCwgMjE0NzQ4MzY0OSxcclxuICAgICAgICAgICAgMCwgMjE0NzUxNjU0NSwgMjE0NzQ4MzY0OCwgMzI3NzcsIDIxNDc0ODM2NDgsIDEzOCwgMCwgMTM2LCAwLCAyMTQ3NTE2NDI1LCAwLCBcclxuICAgICAgICAgICAgMjE0NzQ4MzY1OCwgMCwgMjE0NzUxNjU1NSwgMCwgMTM5LCAyMTQ3NDgzNjQ4LCAzMjkwNSwgMjE0NzQ4MzY0OCwgMzI3NzEsIFxyXG4gICAgICAgICAgICAyMTQ3NDgzNjQ4LCAzMjc3MCwgMjE0NzQ4MzY0OCwgMTI4LCAyMTQ3NDgzNjQ4LCAzMjc3OCwgMCwgMjE0NzQ4MzY1OCwgMjE0NzQ4MzY0OCxcclxuICAgICAgICAgICAgMjE0NzUxNjU0NSwgMjE0NzQ4MzY0OCwgMzI4OTYsIDIxNDc0ODM2NDgsIDIxNDc0ODM2NDksIDAsIDIxNDc1MTY0MjQsIDIxNDc0ODM2NDhdO1xyXG4gIHZhciBCSVRTID0gWzIyNCwgMjU2LCAzODQsIDUxMl07XHJcbiAgdmFyIFNIQUtFX0JJVFMgPSBbMTI4LCAyNTZdO1xyXG4gIHZhciBPVVRQVVRfVFlQRVMgPSBbJ2hleCcsICdidWZmZXInLCAnYXJyYXlCdWZmZXInLCAnYXJyYXknXTtcclxuXHJcbiAgdmFyIGNyZWF0ZU91dHB1dE1ldGhvZCA9IGZ1bmN0aW9uIChiaXRzLCBwYWRkaW5nLCBvdXRwdXRUeXBlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgcmV0dXJuIG5ldyBLZWNjYWsoYml0cywgcGFkZGluZywgYml0cykudXBkYXRlKG1lc3NhZ2UpW291dHB1dFR5cGVdKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIGNyZWF0ZVNoYWtlT3V0cHV0TWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcsIG91dHB1dFR5cGUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwgb3V0cHV0Qml0cykge1xyXG4gICAgICByZXR1cm4gbmV3IEtlY2NhayhiaXRzLCBwYWRkaW5nLCBvdXRwdXRCaXRzKS51cGRhdGUobWVzc2FnZSlbb3V0cHV0VHlwZV0oKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcpIHtcclxuICAgIHZhciBtZXRob2QgPSBjcmVhdGVPdXRwdXRNZXRob2QoYml0cywgcGFkZGluZywgJ2hleCcpO1xyXG4gICAgbWV0aG9kLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIG5ldyBLZWNjYWsoYml0cywgcGFkZGluZywgYml0cyk7XHJcbiAgICB9O1xyXG4gICAgbWV0aG9kLnVwZGF0ZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgIHJldHVybiBtZXRob2QuY3JlYXRlKCkudXBkYXRlKG1lc3NhZ2UpO1xyXG4gICAgfTtcclxuICAgIGZvciAodmFyIGkgPSAwO2kgPCBPVVRQVVRfVFlQRVMubGVuZ3RoOysraSkge1xyXG4gICAgICB2YXIgdHlwZSA9IE9VVFBVVF9UWVBFU1tpXTtcclxuICAgICAgbWV0aG9kW3R5cGVdID0gY3JlYXRlT3V0cHV0TWV0aG9kKGJpdHMsIHBhZGRpbmcsIHR5cGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1ldGhvZDtcclxuICB9O1xyXG5cclxuICB2YXIgY3JlYXRlU2hha2VNZXRob2QgPSBmdW5jdGlvbiAoYml0cywgcGFkZGluZykge1xyXG4gICAgdmFyIG1ldGhvZCA9IGNyZWF0ZVNoYWtlT3V0cHV0TWV0aG9kKGJpdHMsIHBhZGRpbmcsICdoZXgnKTtcclxuICAgIG1ldGhvZC5jcmVhdGUgPSBmdW5jdGlvbiAob3V0cHV0Qml0cykge1xyXG4gICAgICByZXR1cm4gbmV3IEtlY2NhayhiaXRzLCBwYWRkaW5nLCBvdXRwdXRCaXRzKTtcclxuICAgIH07XHJcbiAgICBtZXRob2QudXBkYXRlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG91dHB1dEJpdHMpIHtcclxuICAgICAgcmV0dXJuIG1ldGhvZC5jcmVhdGUob3V0cHV0Qml0cykudXBkYXRlKG1lc3NhZ2UpO1xyXG4gICAgfTtcclxuICAgIGZvciAodmFyIGkgPSAwO2kgPCBPVVRQVVRfVFlQRVMubGVuZ3RoOysraSkge1xyXG4gICAgICB2YXIgdHlwZSA9IE9VVFBVVF9UWVBFU1tpXTtcclxuICAgICAgbWV0aG9kW3R5cGVdID0gY3JlYXRlU2hha2VPdXRwdXRNZXRob2QoYml0cywgcGFkZGluZywgdHlwZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWV0aG9kO1xyXG4gIH07XHJcblxyXG4gIHZhciBhbGdvcml0aG1zID0gW1xyXG4gICAge25hbWU6ICdrZWNjYWsnLCBwYWRkaW5nOiBLRUNDQUtfUEFERElORywgYml0czogQklUUywgY3JlYXRlTWV0aG9kOiBjcmVhdGVNZXRob2R9LFxyXG4gICAge25hbWU6ICdzaGEzJywgcGFkZGluZzogUEFERElORywgYml0czogQklUUywgY3JlYXRlTWV0aG9kOiBjcmVhdGVNZXRob2R9LFxyXG4gICAge25hbWU6ICdzaGFrZScsIHBhZGRpbmc6IFNIQUtFX1BBRERJTkcsIGJpdHM6IFNIQUtFX0JJVFMsIGNyZWF0ZU1ldGhvZDogY3JlYXRlU2hha2VNZXRob2R9XHJcbiAgXTtcclxuXHJcbiAgdmFyIG1ldGhvZHMgPSB7fTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDA7aSA8IGFsZ29yaXRobXMubGVuZ3RoOysraSkge1xyXG4gICAgdmFyIGFsZ29yaXRobSA9IGFsZ29yaXRobXNbaV07XHJcbiAgICB2YXIgYml0cyAgPSBhbGdvcml0aG0uYml0cztcclxuICAgIGZvciAodmFyIGogPSAwO2ogPCBiaXRzLmxlbmd0aDsrK2opIHtcclxuICAgICAgbWV0aG9kc1thbGdvcml0aG0ubmFtZSArJ18nICsgYml0c1tqXV0gPSBhbGdvcml0aG0uY3JlYXRlTWV0aG9kKGJpdHNbal0sIGFsZ29yaXRobS5wYWRkaW5nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEtlY2NhayhiaXRzLCBwYWRkaW5nLCBvdXRwdXRCaXRzKSB7XHJcbiAgICB0aGlzLmJsb2NrcyA9IFtdO1xyXG4gICAgdGhpcy5zID0gW107XHJcbiAgICB0aGlzLnBhZGRpbmcgPSBwYWRkaW5nO1xyXG4gICAgdGhpcy5vdXRwdXRCaXRzID0gb3V0cHV0Qml0cztcclxuICAgIHRoaXMucmVzZXQgPSB0cnVlO1xyXG4gICAgdGhpcy5ibG9jayA9IDA7XHJcbiAgICB0aGlzLnN0YXJ0ID0gMDtcclxuICAgIHRoaXMuYmxvY2tDb3VudCA9ICgxNjAwIC0gKGJpdHMgPDwgMSkpID4+IDU7XHJcbiAgICB0aGlzLmJ5dGVDb3VudCA9IHRoaXMuYmxvY2tDb3VudCA8PCAyO1xyXG4gICAgdGhpcy5vdXRwdXRCbG9ja3MgPSBvdXRwdXRCaXRzID4+IDU7XHJcbiAgICB0aGlzLmV4dHJhQnl0ZXMgPSAob3V0cHV0Qml0cyAmIDMxKSA+PiAzO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwO2kgPCA1MDsrK2kpIHtcclxuICAgICAgdGhpcy5zW2ldID0gMDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBLZWNjYWsucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICB2YXIgbm90U3RyaW5nID0gdHlwZW9mIG1lc3NhZ2UgIT0gJ3N0cmluZyc7XHJcbiAgICBpZiAobm90U3RyaW5nICYmIG1lc3NhZ2UuY29uc3RydWN0b3IgPT0gcm9vdC5BcnJheUJ1ZmZlcikge1xyXG4gICAgICBtZXNzYWdlID0gbmV3IFVpbnQ4QXJyYXkobWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgICB2YXIgbGVuZ3RoID0gbWVzc2FnZS5sZW5ndGgsIGJsb2NrcyA9IHRoaXMuYmxvY2tzLCBieXRlQ291bnQgPSB0aGlzLmJ5dGVDb3VudCwgXHJcbiAgICAgICAgYmxvY2tDb3VudCA9IHRoaXMuYmxvY2tDb3VudCwgaW5kZXggPSAwLCBzID0gdGhpcy5zLCBpLCBjb2RlO1xyXG4gICAgXHJcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcclxuICAgICAgaWYgKHRoaXMucmVzZXQpIHtcclxuICAgICAgICB0aGlzLnJlc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgYmxvY2tzWzBdID0gdGhpcy5ibG9jaztcclxuICAgICAgICBmb3IgKGkgPSAxO2kgPCBibG9ja0NvdW50ICsgMTsrK2kpIHtcclxuICAgICAgICAgIGJsb2Nrc1tpXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChub3RTdHJpbmcpIHtcclxuICAgICAgICBmb3IgKGkgPSB0aGlzLnN0YXJ0O2luZGV4IDwgbGVuZ3RoICYmIGkgPCBieXRlQ291bnQ7KytpbmRleCkge1xyXG4gICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gbWVzc2FnZVtpbmRleF0gPDwgU0hJRlRbaSsrICYgM107XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAoaSA9IHRoaXMuc3RhcnQ7aW5kZXggPCBsZW5ndGggJiYgaSA8IGJ5dGVDb3VudDsrK2luZGV4KSB7XHJcbiAgICAgICAgICBjb2RlID0gbWVzc2FnZS5jaGFyQ29kZUF0KGluZGV4KTtcclxuICAgICAgICAgIGlmIChjb2RlIDwgMHg4MCkge1xyXG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSBjb2RlIDw8IFNISUZUW2krKyAmIDNdO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChjb2RlIDwgMHg4MDApIHtcclxuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4YzAgfCAoY29kZSA+PiA2KSkgPDwgU0hJRlRbaSsrICYgM107XHJcbiAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweDgwIHwgKGNvZGUgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweGQ4MDAgfHwgY29kZSA+PSAweGUwMDApIHtcclxuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ZTAgfCAoY29kZSA+PiAxMikpIDw8IFNISUZUW2krKyAmIDNdO1xyXG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8ICgoY29kZSA+PiA2KSAmIDB4M2YpKSA8PCBTSElGVFtpKysgJiAzXTtcclxuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCAoY29kZSAmIDB4M2YpKSA8PCBTSElGVFtpKysgJiAzXTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvZGUgPSAweDEwMDAwICsgKCgoY29kZSAmIDB4M2ZmKSA8PCAxMCkgfCAobWVzc2FnZS5jaGFyQ29kZUF0KCsraW5kZXgpICYgMHgzZmYpKTtcclxuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ZjAgfCAoY29kZSA+PiAxOCkpIDw8IFNISUZUW2krKyAmIDNdO1xyXG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8ICgoY29kZSA+PiAxMikgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XHJcbiAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweDgwIHwgKChjb2RlID4+IDYpICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xyXG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8IChjb2RlICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxhc3RCeXRlSW5kZXggPSBpO1xyXG4gICAgICBpZiAoaSA+PSBieXRlQ291bnQpIHtcclxuICAgICAgICB0aGlzLnN0YXJ0ID0gaSAtIGJ5dGVDb3VudDtcclxuICAgICAgICB0aGlzLmJsb2NrID0gYmxvY2tzW2Jsb2NrQ291bnRdO1xyXG4gICAgICAgIGZvciAoaSA9IDA7aSA8IGJsb2NrQ291bnQ7KytpKSB7XHJcbiAgICAgICAgICBzW2ldIF49IGJsb2Nrc1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZihzKTtcclxuICAgICAgICB0aGlzLnJlc2V0ID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnN0YXJ0ID0gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgS2VjY2FrLnByb3RvdHlwZS5maW5hbGl6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBibG9ja3MgPSB0aGlzLmJsb2NrcywgaSA9IHRoaXMubGFzdEJ5dGVJbmRleCwgYmxvY2tDb3VudCA9IHRoaXMuYmxvY2tDb3VudCwgcyA9IHRoaXMucztcclxuICAgIGJsb2Nrc1tpID4+IDJdIHw9IHRoaXMucGFkZGluZ1tpICYgM107XHJcbiAgICBpZiAodGhpcy5sYXN0Qnl0ZUluZGV4ID09IHRoaXMuYnl0ZUNvdW50KSB7XHJcbiAgICAgIGJsb2Nrc1swXSA9IGJsb2Nrc1tibG9ja0NvdW50XTtcclxuICAgICAgZm9yIChpID0gMTtpIDwgYmxvY2tDb3VudCArIDE7KytpKSB7XHJcbiAgICAgICAgYmxvY2tzW2ldID0gMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgYmxvY2tzW2Jsb2NrQ291bnQgLSAxXSB8PSAweDgwMDAwMDAwO1xyXG4gICAgZm9yIChpID0gMDtpIDwgYmxvY2tDb3VudDsrK2kpIHtcclxuICAgICAgc1tpXSBePSBibG9ja3NbaV07XHJcbiAgICB9XHJcbiAgICBmKHMpO1xyXG4gIH07XHJcblxyXG4gIEtlY2Nhay5wcm90b3R5cGUudG9TdHJpbmcgPSBLZWNjYWsucHJvdG90eXBlLmhleCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuZmluYWxpemUoKTtcclxuXHJcbiAgICB2YXIgYmxvY2tDb3VudCA9IHRoaXMuYmxvY2tDb3VudCwgcyA9IHRoaXMucywgb3V0cHV0QmxvY2tzID0gdGhpcy5vdXRwdXRCbG9ja3MsIFxyXG4gICAgICAgIGV4dHJhQnl0ZXMgPSB0aGlzLmV4dHJhQnl0ZXMsIGkgPSAwLCBqID0gMDtcclxuICAgIHZhciBoZXggPSAnJywgYmxvY2s7XHJcbiAgICB3aGlsZSAoaiA8IG91dHB1dEJsb2Nrcykge1xyXG4gICAgICBmb3IgKGkgPSAwO2kgPCBibG9ja0NvdW50ICYmIGogPCBvdXRwdXRCbG9ja3M7KytpLCArK2opIHtcclxuICAgICAgICBibG9jayA9IHNbaV07XHJcbiAgICAgICAgaGV4ICs9IEhFWF9DSEFSU1soYmxvY2sgPj4gNCkgJiAweDBGXSArIEhFWF9DSEFSU1tibG9jayAmIDB4MEZdICtcclxuICAgICAgICAgICAgICAgSEVYX0NIQVJTWyhibG9jayA+PiAxMikgJiAweDBGXSArIEhFWF9DSEFSU1soYmxvY2sgPj4gOCkgJiAweDBGXSArXHJcbiAgICAgICAgICAgICAgIEhFWF9DSEFSU1soYmxvY2sgPj4gMjApICYgMHgwRl0gKyBIRVhfQ0hBUlNbKGJsb2NrID4+IDE2KSAmIDB4MEZdICtcclxuICAgICAgICAgICAgICAgSEVYX0NIQVJTWyhibG9jayA+PiAyOCkgJiAweDBGXSArIEhFWF9DSEFSU1soYmxvY2sgPj4gMjQpICYgMHgwRl07XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGogJSBibG9ja0NvdW50ID09IDApIHtcclxuICAgICAgICBmKHMpO1xyXG4gICAgICAgIGkgPSAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZXh0cmFCeXRlcykge1xyXG4gICAgICBibG9jayA9IHNbaV07XHJcbiAgICAgIGlmIChleHRyYUJ5dGVzID4gMCkge1xyXG4gICAgICAgIGhleCArPSBIRVhfQ0hBUlNbKGJsb2NrID4+IDQpICYgMHgwRl0gKyBIRVhfQ0hBUlNbYmxvY2sgJiAweDBGXTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZXh0cmFCeXRlcyA+IDEpIHtcclxuICAgICAgICBoZXggKz0gSEVYX0NIQVJTWyhibG9jayA+PiAxMikgJiAweDBGXSArIEhFWF9DSEFSU1soYmxvY2sgPj4gOCkgJiAweDBGXTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZXh0cmFCeXRlcyA+IDIpIHtcclxuICAgICAgICBoZXggKz0gSEVYX0NIQVJTWyhibG9jayA+PiAyMCkgJiAweDBGXSArIEhFWF9DSEFSU1soYmxvY2sgPj4gMTYpICYgMHgwRl07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBoZXg7XHJcbiAgfTtcclxuXHJcbiAgS2VjY2FrLnByb3RvdHlwZS5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuZmluYWxpemUoKTtcclxuXHJcbiAgICB2YXIgYmxvY2tDb3VudCA9IHRoaXMuYmxvY2tDb3VudCwgcyA9IHRoaXMucywgb3V0cHV0QmxvY2tzID0gdGhpcy5vdXRwdXRCbG9ja3MsIFxyXG4gICAgICAgIGV4dHJhQnl0ZXMgPSB0aGlzLmV4dHJhQnl0ZXMsIGkgPSAwLCBqID0gMDtcclxuICAgIHZhciBieXRlcyA9IHRoaXMub3V0cHV0Qml0cyA+PiAzO1xyXG4gICAgdmFyIGJ1ZmZlcjtcclxuICAgIGlmIChleHRyYUJ5dGVzKSB7XHJcbiAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigob3V0cHV0QmxvY2tzICsgMSkgPDwgMik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnl0ZXMpO1xyXG4gICAgfVxyXG4gICAgdmFyIGFycmF5ID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlcik7XHJcbiAgICB3aGlsZSAoaiA8IG91dHB1dEJsb2Nrcykge1xyXG4gICAgICBmb3IgKGkgPSAwO2kgPCBibG9ja0NvdW50ICYmIGogPCBvdXRwdXRCbG9ja3M7KytpLCArK2opIHtcclxuICAgICAgICBhcnJheVtqXSA9IHNbaV07XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGogJSBibG9ja0NvdW50ID09IDApIHtcclxuICAgICAgICBmKHMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZXh0cmFCeXRlcykge1xyXG4gICAgICBhcnJheVtpXSA9IHNbaV07XHJcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5zbGljZSgwLCBieXRlcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYnVmZmVyO1xyXG4gIH07XHJcblxyXG4gIEtlY2Nhay5wcm90b3R5cGUuYnVmZmVyID0gS2VjY2FrLnByb3RvdHlwZS5hcnJheUJ1ZmZlcjtcclxuXHJcbiAgS2VjY2FrLnByb3RvdHlwZS5kaWdlc3QgPSBLZWNjYWsucHJvdG90eXBlLmFycmF5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5maW5hbGl6ZSgpO1xyXG5cclxuICAgIHZhciBibG9ja0NvdW50ID0gdGhpcy5ibG9ja0NvdW50LCBzID0gdGhpcy5zLCBvdXRwdXRCbG9ja3MgPSB0aGlzLm91dHB1dEJsb2NrcywgXHJcbiAgICAgICAgZXh0cmFCeXRlcyA9IHRoaXMuZXh0cmFCeXRlcywgaSA9IDAsIGogPSAwO1xyXG4gICAgdmFyIGFycmF5ID0gW10sIG9mZnNldCwgYmxvY2s7XHJcbiAgICB3aGlsZSAoaiA8IG91dHB1dEJsb2Nrcykge1xyXG4gICAgICBmb3IgKGkgPSAwO2kgPCBibG9ja0NvdW50ICYmIGogPCBvdXRwdXRCbG9ja3M7KytpLCArK2opIHtcclxuICAgICAgICBvZmZzZXQgPSBqIDw8IDI7XHJcbiAgICAgICAgYmxvY2sgPSBzW2ldO1xyXG4gICAgICAgIGFycmF5W29mZnNldF0gPSBibG9jayAmIDB4RkY7XHJcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgMV0gPSAoYmxvY2sgPj4gOCkgJiAweEZGO1xyXG4gICAgICAgIGFycmF5W29mZnNldCArIDJdID0gKGJsb2NrID4+IDE2KSAmIDB4RkY7XHJcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgM10gPSAoYmxvY2sgPj4gMjQpICYgMHhGRjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaiAlIGJsb2NrQ291bnQgPT0gMCkge1xyXG4gICAgICAgIGYocyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChleHRyYUJ5dGVzKSB7XHJcbiAgICAgIG9mZnNldCA9IGogPDwgMjtcclxuICAgICAgYmxvY2sgPSBzW2ldO1xyXG4gICAgICBpZiAoZXh0cmFCeXRlcyA+IDApIHtcclxuICAgICAgICBhcnJheVtvZmZzZXRdID0gYmxvY2sgJiAweEZGO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChleHRyYUJ5dGVzID4gMSkge1xyXG4gICAgICAgIGFycmF5W29mZnNldCArIDFdID0gKGJsb2NrID4+IDgpICYgMHhGRjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZXh0cmFCeXRlcyA+IDIpIHtcclxuICAgICAgICBhcnJheVtvZmZzZXQgKyAyXSA9IChibG9jayA+PiAxNikgJiAweEZGO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGYgPSBmdW5jdGlvbiAocykge1xyXG4gICAgdmFyIGgsIGwsIG4sIGMwLCBjMSwgYzIsIGMzLCBjNCwgYzUsIGM2LCBjNywgYzgsIGM5LCBcclxuICAgICAgICBiMCwgYjEsIGIyLCBiMywgYjQsIGI1LCBiNiwgYjcsIGI4LCBiOSwgYjEwLCBiMTEsIGIxMiwgYjEzLCBiMTQsIGIxNSwgYjE2LCBiMTcsIFxyXG4gICAgICAgIGIxOCwgYjE5LCBiMjAsIGIyMSwgYjIyLCBiMjMsIGIyNCwgYjI1LCBiMjYsIGIyNywgYjI4LCBiMjksIGIzMCwgYjMxLCBiMzIsIGIzMywgXHJcbiAgICAgICAgYjM0LCBiMzUsIGIzNiwgYjM3LCBiMzgsIGIzOSwgYjQwLCBiNDEsIGI0MiwgYjQzLCBiNDQsIGI0NSwgYjQ2LCBiNDcsIGI0OCwgYjQ5O1xyXG4gICAgZm9yIChuID0gMDtuIDwgNDg7biArPSAyKSB7XHJcbiAgICAgIGMwID0gc1swXSBeIHNbMTBdIF4gc1syMF0gXiBzWzMwXSBeIHNbNDBdO1xyXG4gICAgICBjMSA9IHNbMV0gXiBzWzExXSBeIHNbMjFdIF4gc1szMV0gXiBzWzQxXTtcclxuICAgICAgYzIgPSBzWzJdIF4gc1sxMl0gXiBzWzIyXSBeIHNbMzJdIF4gc1s0Ml07XHJcbiAgICAgIGMzID0gc1szXSBeIHNbMTNdIF4gc1syM10gXiBzWzMzXSBeIHNbNDNdO1xyXG4gICAgICBjNCA9IHNbNF0gXiBzWzE0XSBeIHNbMjRdIF4gc1szNF0gXiBzWzQ0XTtcclxuICAgICAgYzUgPSBzWzVdIF4gc1sxNV0gXiBzWzI1XSBeIHNbMzVdIF4gc1s0NV07XHJcbiAgICAgIGM2ID0gc1s2XSBeIHNbMTZdIF4gc1syNl0gXiBzWzM2XSBeIHNbNDZdO1xyXG4gICAgICBjNyA9IHNbN10gXiBzWzE3XSBeIHNbMjddIF4gc1szN10gXiBzWzQ3XTtcclxuICAgICAgYzggPSBzWzhdIF4gc1sxOF0gXiBzWzI4XSBeIHNbMzhdIF4gc1s0OF07XHJcbiAgICAgIGM5ID0gc1s5XSBeIHNbMTldIF4gc1syOV0gXiBzWzM5XSBeIHNbNDldO1xyXG5cclxuICAgICAgaCA9IGM4IF4gKChjMiA8PCAxKSB8IChjMyA+Pj4gMzEpKTtcclxuICAgICAgbCA9IGM5IF4gKChjMyA8PCAxKSB8IChjMiA+Pj4gMzEpKTtcclxuICAgICAgc1swXSBePSBoO1xyXG4gICAgICBzWzFdIF49IGw7XHJcbiAgICAgIHNbMTBdIF49IGg7XHJcbiAgICAgIHNbMTFdIF49IGw7XHJcbiAgICAgIHNbMjBdIF49IGg7XHJcbiAgICAgIHNbMjFdIF49IGw7XHJcbiAgICAgIHNbMzBdIF49IGg7XHJcbiAgICAgIHNbMzFdIF49IGw7XHJcbiAgICAgIHNbNDBdIF49IGg7XHJcbiAgICAgIHNbNDFdIF49IGw7XHJcbiAgICAgIGggPSBjMCBeICgoYzQgPDwgMSkgfCAoYzUgPj4+IDMxKSk7XHJcbiAgICAgIGwgPSBjMSBeICgoYzUgPDwgMSkgfCAoYzQgPj4+IDMxKSk7XHJcbiAgICAgIHNbMl0gXj0gaDtcclxuICAgICAgc1szXSBePSBsO1xyXG4gICAgICBzWzEyXSBePSBoO1xyXG4gICAgICBzWzEzXSBePSBsO1xyXG4gICAgICBzWzIyXSBePSBoO1xyXG4gICAgICBzWzIzXSBePSBsO1xyXG4gICAgICBzWzMyXSBePSBoO1xyXG4gICAgICBzWzMzXSBePSBsO1xyXG4gICAgICBzWzQyXSBePSBoO1xyXG4gICAgICBzWzQzXSBePSBsO1xyXG4gICAgICBoID0gYzIgXiAoKGM2IDw8IDEpIHwgKGM3ID4+PiAzMSkpO1xyXG4gICAgICBsID0gYzMgXiAoKGM3IDw8IDEpIHwgKGM2ID4+PiAzMSkpO1xyXG4gICAgICBzWzRdIF49IGg7XHJcbiAgICAgIHNbNV0gXj0gbDtcclxuICAgICAgc1sxNF0gXj0gaDtcclxuICAgICAgc1sxNV0gXj0gbDtcclxuICAgICAgc1syNF0gXj0gaDtcclxuICAgICAgc1syNV0gXj0gbDtcclxuICAgICAgc1szNF0gXj0gaDtcclxuICAgICAgc1szNV0gXj0gbDtcclxuICAgICAgc1s0NF0gXj0gaDtcclxuICAgICAgc1s0NV0gXj0gbDtcclxuICAgICAgaCA9IGM0IF4gKChjOCA8PCAxKSB8IChjOSA+Pj4gMzEpKTtcclxuICAgICAgbCA9IGM1IF4gKChjOSA8PCAxKSB8IChjOCA+Pj4gMzEpKTtcclxuICAgICAgc1s2XSBePSBoO1xyXG4gICAgICBzWzddIF49IGw7XHJcbiAgICAgIHNbMTZdIF49IGg7XHJcbiAgICAgIHNbMTddIF49IGw7XHJcbiAgICAgIHNbMjZdIF49IGg7XHJcbiAgICAgIHNbMjddIF49IGw7XHJcbiAgICAgIHNbMzZdIF49IGg7XHJcbiAgICAgIHNbMzddIF49IGw7XHJcbiAgICAgIHNbNDZdIF49IGg7XHJcbiAgICAgIHNbNDddIF49IGw7XHJcbiAgICAgIGggPSBjNiBeICgoYzAgPDwgMSkgfCAoYzEgPj4+IDMxKSk7XHJcbiAgICAgIGwgPSBjNyBeICgoYzEgPDwgMSkgfCAoYzAgPj4+IDMxKSk7XHJcbiAgICAgIHNbOF0gXj0gaDtcclxuICAgICAgc1s5XSBePSBsO1xyXG4gICAgICBzWzE4XSBePSBoO1xyXG4gICAgICBzWzE5XSBePSBsO1xyXG4gICAgICBzWzI4XSBePSBoO1xyXG4gICAgICBzWzI5XSBePSBsO1xyXG4gICAgICBzWzM4XSBePSBoO1xyXG4gICAgICBzWzM5XSBePSBsO1xyXG4gICAgICBzWzQ4XSBePSBoO1xyXG4gICAgICBzWzQ5XSBePSBsO1xyXG5cclxuICAgICAgYjAgPSBzWzBdO1xyXG4gICAgICBiMSA9IHNbMV07XHJcbiAgICAgIGIzMiA9IChzWzExXSA8PCA0KSB8IChzWzEwXSA+Pj4gMjgpO1xyXG4gICAgICBiMzMgPSAoc1sxMF0gPDwgNCkgfCAoc1sxMV0gPj4+IDI4KTtcclxuICAgICAgYjE0ID0gKHNbMjBdIDw8IDMpIHwgKHNbMjFdID4+PiAyOSk7XHJcbiAgICAgIGIxNSA9IChzWzIxXSA8PCAzKSB8IChzWzIwXSA+Pj4gMjkpO1xyXG4gICAgICBiNDYgPSAoc1szMV0gPDwgOSkgfCAoc1szMF0gPj4+IDIzKTtcclxuICAgICAgYjQ3ID0gKHNbMzBdIDw8IDkpIHwgKHNbMzFdID4+PiAyMyk7XHJcbiAgICAgIGIyOCA9IChzWzQwXSA8PCAxOCkgfCAoc1s0MV0gPj4+IDE0KTtcclxuICAgICAgYjI5ID0gKHNbNDFdIDw8IDE4KSB8IChzWzQwXSA+Pj4gMTQpO1xyXG4gICAgICBiMjAgPSAoc1syXSA8PCAxKSB8IChzWzNdID4+PiAzMSk7XHJcbiAgICAgIGIyMSA9IChzWzNdIDw8IDEpIHwgKHNbMl0gPj4+IDMxKTtcclxuICAgICAgYjIgPSAoc1sxM10gPDwgMTIpIHwgKHNbMTJdID4+PiAyMCk7XHJcbiAgICAgIGIzID0gKHNbMTJdIDw8IDEyKSB8IChzWzEzXSA+Pj4gMjApO1xyXG4gICAgICBiMzQgPSAoc1syMl0gPDwgMTApIHwgKHNbMjNdID4+PiAyMik7XHJcbiAgICAgIGIzNSA9IChzWzIzXSA8PCAxMCkgfCAoc1syMl0gPj4+IDIyKTtcclxuICAgICAgYjE2ID0gKHNbMzNdIDw8IDEzKSB8IChzWzMyXSA+Pj4gMTkpO1xyXG4gICAgICBiMTcgPSAoc1szMl0gPDwgMTMpIHwgKHNbMzNdID4+PiAxOSk7XHJcbiAgICAgIGI0OCA9IChzWzQyXSA8PCAyKSB8IChzWzQzXSA+Pj4gMzApO1xyXG4gICAgICBiNDkgPSAoc1s0M10gPDwgMikgfCAoc1s0Ml0gPj4+IDMwKTtcclxuICAgICAgYjQwID0gKHNbNV0gPDwgMzApIHwgKHNbNF0gPj4+IDIpO1xyXG4gICAgICBiNDEgPSAoc1s0XSA8PCAzMCkgfCAoc1s1XSA+Pj4gMik7XHJcbiAgICAgIGIyMiA9IChzWzE0XSA8PCA2KSB8IChzWzE1XSA+Pj4gMjYpO1xyXG4gICAgICBiMjMgPSAoc1sxNV0gPDwgNikgfCAoc1sxNF0gPj4+IDI2KTtcclxuICAgICAgYjQgPSAoc1syNV0gPDwgMTEpIHwgKHNbMjRdID4+PiAyMSk7XHJcbiAgICAgIGI1ID0gKHNbMjRdIDw8IDExKSB8IChzWzI1XSA+Pj4gMjEpO1xyXG4gICAgICBiMzYgPSAoc1szNF0gPDwgMTUpIHwgKHNbMzVdID4+PiAxNyk7XHJcbiAgICAgIGIzNyA9IChzWzM1XSA8PCAxNSkgfCAoc1szNF0gPj4+IDE3KTtcclxuICAgICAgYjE4ID0gKHNbNDVdIDw8IDI5KSB8IChzWzQ0XSA+Pj4gMyk7XHJcbiAgICAgIGIxOSA9IChzWzQ0XSA8PCAyOSkgfCAoc1s0NV0gPj4+IDMpO1xyXG4gICAgICBiMTAgPSAoc1s2XSA8PCAyOCkgfCAoc1s3XSA+Pj4gNCk7XHJcbiAgICAgIGIxMSA9IChzWzddIDw8IDI4KSB8IChzWzZdID4+PiA0KTtcclxuICAgICAgYjQyID0gKHNbMTddIDw8IDIzKSB8IChzWzE2XSA+Pj4gOSk7XHJcbiAgICAgIGI0MyA9IChzWzE2XSA8PCAyMykgfCAoc1sxN10gPj4+IDkpO1xyXG4gICAgICBiMjQgPSAoc1syNl0gPDwgMjUpIHwgKHNbMjddID4+PiA3KTtcclxuICAgICAgYjI1ID0gKHNbMjddIDw8IDI1KSB8IChzWzI2XSA+Pj4gNyk7XHJcbiAgICAgIGI2ID0gKHNbMzZdIDw8IDIxKSB8IChzWzM3XSA+Pj4gMTEpO1xyXG4gICAgICBiNyA9IChzWzM3XSA8PCAyMSkgfCAoc1szNl0gPj4+IDExKTtcclxuICAgICAgYjM4ID0gKHNbNDddIDw8IDI0KSB8IChzWzQ2XSA+Pj4gOCk7XHJcbiAgICAgIGIzOSA9IChzWzQ2XSA8PCAyNCkgfCAoc1s0N10gPj4+IDgpO1xyXG4gICAgICBiMzAgPSAoc1s4XSA8PCAyNykgfCAoc1s5XSA+Pj4gNSk7XHJcbiAgICAgIGIzMSA9IChzWzldIDw8IDI3KSB8IChzWzhdID4+PiA1KTtcclxuICAgICAgYjEyID0gKHNbMThdIDw8IDIwKSB8IChzWzE5XSA+Pj4gMTIpO1xyXG4gICAgICBiMTMgPSAoc1sxOV0gPDwgMjApIHwgKHNbMThdID4+PiAxMik7XHJcbiAgICAgIGI0NCA9IChzWzI5XSA8PCA3KSB8IChzWzI4XSA+Pj4gMjUpO1xyXG4gICAgICBiNDUgPSAoc1syOF0gPDwgNykgfCAoc1syOV0gPj4+IDI1KTtcclxuICAgICAgYjI2ID0gKHNbMzhdIDw8IDgpIHwgKHNbMzldID4+PiAyNCk7XHJcbiAgICAgIGIyNyA9IChzWzM5XSA8PCA4KSB8IChzWzM4XSA+Pj4gMjQpO1xyXG4gICAgICBiOCA9IChzWzQ4XSA8PCAxNCkgfCAoc1s0OV0gPj4+IDE4KTtcclxuICAgICAgYjkgPSAoc1s0OV0gPDwgMTQpIHwgKHNbNDhdID4+PiAxOCk7XHJcblxyXG4gICAgICBzWzBdID0gYjAgXiAofmIyICYgYjQpO1xyXG4gICAgICBzWzFdID0gYjEgXiAofmIzICYgYjUpO1xyXG4gICAgICBzWzEwXSA9IGIxMCBeICh+YjEyICYgYjE0KTtcclxuICAgICAgc1sxMV0gPSBiMTEgXiAofmIxMyAmIGIxNSk7XHJcbiAgICAgIHNbMjBdID0gYjIwIF4gKH5iMjIgJiBiMjQpO1xyXG4gICAgICBzWzIxXSA9IGIyMSBeICh+YjIzICYgYjI1KTtcclxuICAgICAgc1szMF0gPSBiMzAgXiAofmIzMiAmIGIzNCk7XHJcbiAgICAgIHNbMzFdID0gYjMxIF4gKH5iMzMgJiBiMzUpO1xyXG4gICAgICBzWzQwXSA9IGI0MCBeICh+YjQyICYgYjQ0KTtcclxuICAgICAgc1s0MV0gPSBiNDEgXiAofmI0MyAmIGI0NSk7XHJcbiAgICAgIHNbMl0gPSBiMiBeICh+YjQgJiBiNik7XHJcbiAgICAgIHNbM10gPSBiMyBeICh+YjUgJiBiNyk7XHJcbiAgICAgIHNbMTJdID0gYjEyIF4gKH5iMTQgJiBiMTYpO1xyXG4gICAgICBzWzEzXSA9IGIxMyBeICh+YjE1ICYgYjE3KTtcclxuICAgICAgc1syMl0gPSBiMjIgXiAofmIyNCAmIGIyNik7XHJcbiAgICAgIHNbMjNdID0gYjIzIF4gKH5iMjUgJiBiMjcpO1xyXG4gICAgICBzWzMyXSA9IGIzMiBeICh+YjM0ICYgYjM2KTtcclxuICAgICAgc1szM10gPSBiMzMgXiAofmIzNSAmIGIzNyk7XHJcbiAgICAgIHNbNDJdID0gYjQyIF4gKH5iNDQgJiBiNDYpO1xyXG4gICAgICBzWzQzXSA9IGI0MyBeICh+YjQ1ICYgYjQ3KTtcclxuICAgICAgc1s0XSA9IGI0IF4gKH5iNiAmIGI4KTtcclxuICAgICAgc1s1XSA9IGI1IF4gKH5iNyAmIGI5KTtcclxuICAgICAgc1sxNF0gPSBiMTQgXiAofmIxNiAmIGIxOCk7XHJcbiAgICAgIHNbMTVdID0gYjE1IF4gKH5iMTcgJiBiMTkpO1xyXG4gICAgICBzWzI0XSA9IGIyNCBeICh+YjI2ICYgYjI4KTtcclxuICAgICAgc1syNV0gPSBiMjUgXiAofmIyNyAmIGIyOSk7XHJcbiAgICAgIHNbMzRdID0gYjM0IF4gKH5iMzYgJiBiMzgpO1xyXG4gICAgICBzWzM1XSA9IGIzNSBeICh+YjM3ICYgYjM5KTtcclxuICAgICAgc1s0NF0gPSBiNDQgXiAofmI0NiAmIGI0OCk7XHJcbiAgICAgIHNbNDVdID0gYjQ1IF4gKH5iNDcgJiBiNDkpO1xyXG4gICAgICBzWzZdID0gYjYgXiAofmI4ICYgYjApO1xyXG4gICAgICBzWzddID0gYjcgXiAofmI5ICYgYjEpO1xyXG4gICAgICBzWzE2XSA9IGIxNiBeICh+YjE4ICYgYjEwKTtcclxuICAgICAgc1sxN10gPSBiMTcgXiAofmIxOSAmIGIxMSk7XHJcbiAgICAgIHNbMjZdID0gYjI2IF4gKH5iMjggJiBiMjApO1xyXG4gICAgICBzWzI3XSA9IGIyNyBeICh+YjI5ICYgYjIxKTtcclxuICAgICAgc1szNl0gPSBiMzYgXiAofmIzOCAmIGIzMCk7XHJcbiAgICAgIHNbMzddID0gYjM3IF4gKH5iMzkgJiBiMzEpO1xyXG4gICAgICBzWzQ2XSA9IGI0NiBeICh+YjQ4ICYgYjQwKTtcclxuICAgICAgc1s0N10gPSBiNDcgXiAofmI0OSAmIGI0MSk7XHJcbiAgICAgIHNbOF0gPSBiOCBeICh+YjAgJiBiMik7XHJcbiAgICAgIHNbOV0gPSBiOSBeICh+YjEgJiBiMyk7XHJcbiAgICAgIHNbMThdID0gYjE4IF4gKH5iMTAgJiBiMTIpO1xyXG4gICAgICBzWzE5XSA9IGIxOSBeICh+YjExICYgYjEzKTtcclxuICAgICAgc1syOF0gPSBiMjggXiAofmIyMCAmIGIyMik7XHJcbiAgICAgIHNbMjldID0gYjI5IF4gKH5iMjEgJiBiMjMpO1xyXG4gICAgICBzWzM4XSA9IGIzOCBeICh+YjMwICYgYjMyKTtcclxuICAgICAgc1szOV0gPSBiMzkgXiAofmIzMSAmIGIzMyk7XHJcbiAgICAgIHNbNDhdID0gYjQ4IF4gKH5iNDAgJiBiNDIpO1xyXG4gICAgICBzWzQ5XSA9IGI0OSBeICh+YjQxICYgYjQzKTtcclxuXHJcbiAgICAgIHNbMF0gXj0gUkNbbl07XHJcbiAgICAgIHNbMV0gXj0gUkNbbiArIDFdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKENPTU1PTl9KUykge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBtZXRob2RzO1xyXG4gIH0gZWxzZSBpZiAocm9vdCkge1xyXG4gICAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcclxuICAgICAgcm9vdFtrZXldID0gbWV0aG9kc1trZXldO1xyXG4gICAgfVxyXG4gIH1cclxufSh0aGlzKSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9pbmRleC5qcycpO1xudmFyIHVpbnQyNTZDb2RlciA9IHV0aWxzLnVpbnQyNTZDb2RlcjtcbnZhciBjb2RlckJvb2xlYW4gPSB1dGlscy5jb2RlckJvb2xlYW47XG52YXIgY29kZXJGaXhlZEJ5dGVzID0gdXRpbHMuY29kZXJGaXhlZEJ5dGVzO1xudmFyIGNvZGVyQWRkcmVzcyA9IHV0aWxzLmNvZGVyQWRkcmVzcztcbnZhciBjb2RlckR5bmFtaWNCeXRlcyA9IHV0aWxzLmNvZGVyRHluYW1pY0J5dGVzO1xudmFyIGNvZGVyU3RyaW5nID0gdXRpbHMuY29kZXJTdHJpbmc7XG52YXIgY29kZXJBcnJheSA9IHV0aWxzLmNvZGVyQXJyYXk7XG52YXIgcGFyYW1UeXBlUGFydCA9IHV0aWxzLnBhcmFtVHlwZVBhcnQ7XG52YXIgZ2V0UGFyYW1Db2RlciA9IHV0aWxzLmdldFBhcmFtQ29kZXI7XG5cbmZ1bmN0aW9uIFJlc3VsdCgpIHt9XG5cbmZ1bmN0aW9uIGVuY29kZVBhcmFtcyh0eXBlcywgdmFsdWVzKSB7XG4gIGlmICh0eXBlcy5sZW5ndGggIT09IHZhbHVlcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1hYmldIHdoaWxlIGVuY29kaW5nIHBhcmFtcywgdHlwZXMvdmFsdWVzIG1pc21hdGNoLCBZb3VyIGNvbnRyYWN0IHJlcXVpcmVzICcgKyB0eXBlcy5sZW5ndGggKyAnIHR5cGVzIChhcmd1bWVudHMpLCBhbmQgeW91IHBhc3NlZCBpbiAnICsgdmFsdWVzLmxlbmd0aCk7XG4gIH1cblxuICB2YXIgcGFydHMgPSBbXTtcblxuICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlLCBpbmRleCkge1xuICAgIHZhciBjb2RlciA9IGdldFBhcmFtQ29kZXIodHlwZSk7XG4gICAgcGFydHMucHVzaCh7IGR5bmFtaWM6IGNvZGVyLmR5bmFtaWMsIHZhbHVlOiBjb2Rlci5lbmNvZGUodmFsdWVzW2luZGV4XSkgfSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGFsaWduU2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KDMyICogTWF0aC5jZWlsKHNpemUgLyAzMikpO1xuICB9XG5cbiAgdmFyIHN0YXRpY1NpemUgPSAwLFxuICAgICAgZHluYW1pY1NpemUgPSAwO1xuICBwYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgaWYgKHBhcnQuZHluYW1pYykge1xuICAgICAgc3RhdGljU2l6ZSArPSAzMjtcbiAgICAgIGR5bmFtaWNTaXplICs9IGFsaWduU2l6ZShwYXJ0LnZhbHVlLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY1NpemUgKz0gYWxpZ25TaXplKHBhcnQudmFsdWUubGVuZ3RoKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBvZmZzZXQgPSAwLFxuICAgICAgZHluYW1pY09mZnNldCA9IHN0YXRpY1NpemU7XG4gIHZhciBkYXRhID0gbmV3IEJ1ZmZlcihzdGF0aWNTaXplICsgZHluYW1pY1NpemUpO1xuXG4gIHBhcnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcnQsIGluZGV4KSB7XG4gICAgaWYgKHBhcnQuZHluYW1pYykge1xuICAgICAgdWludDI1NkNvZGVyLmVuY29kZShkeW5hbWljT2Zmc2V0KS5jb3B5KGRhdGEsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gMzI7XG5cbiAgICAgIHBhcnQudmFsdWUuY29weShkYXRhLCBkeW5hbWljT2Zmc2V0KTtcbiAgICAgIGR5bmFtaWNPZmZzZXQgKz0gYWxpZ25TaXplKHBhcnQudmFsdWUubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFydC52YWx1ZS5jb3B5KGRhdGEsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gYWxpZ25TaXplKHBhcnQudmFsdWUubGVuZ3RoKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiAnMHgnICsgZGF0YS50b1N0cmluZygnaGV4Jyk7XG59XG5cbi8vIGRlY29kZSBieXRlY29kZSBkYXRhIGZyb20gb3V0cHV0IG5hbWVzIGFuZCB0eXBlc1xuZnVuY3Rpb24gZGVjb2RlUGFyYW1zKG5hbWVzLCB0eXBlcywgZGF0YSkge1xuICB2YXIgdXNlTnVtYmVyZWRQYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHRydWU7XG5cbiAgLy8gTmFtZXMgaXMgb3B0aW9uYWwsIHNvIHNoaWZ0IG92ZXIgYWxsIHRoZSBwYXJhbWV0ZXJzIGlmIG5vdCBwcm92aWRlZFxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICBkYXRhID0gdHlwZXM7XG4gICAgdHlwZXMgPSBuYW1lcztcbiAgICBuYW1lcyA9IFtdO1xuICB9XG5cbiAgZGF0YSA9IHV0aWxzLmhleE9yQnVmZmVyKGRhdGEpO1xuICB2YXIgdmFsdWVzID0gbmV3IFJlc3VsdCgpO1xuXG4gIHZhciBvZmZzZXQgPSAwO1xuICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlLCBpbmRleCkge1xuICAgIHZhciBjb2RlciA9IGdldFBhcmFtQ29kZXIodHlwZSk7XG5cbiAgICBpZiAoY29kZXIuZHluYW1pYykge1xuICAgICAgdmFyIGR5bmFtaWNPZmZzZXQgPSB1aW50MjU2Q29kZXIuZGVjb2RlKGRhdGEsIG9mZnNldCk7XG4gICAgICB2YXIgcmVzdWx0ID0gY29kZXIuZGVjb2RlKGRhdGEsIGR5bmFtaWNPZmZzZXQudmFsdWUudG9OdW1iZXIoKSk7XG4gICAgICBvZmZzZXQgKz0gZHluYW1pY09mZnNldC5jb25zdW1lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJlc3VsdCA9IGNvZGVyLmRlY29kZShkYXRhLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IHJlc3VsdC5jb25zdW1lZDtcbiAgICB9XG5cbiAgICBpZiAodXNlTnVtYmVyZWRQYXJhbXMpIHtcbiAgICAgIHZhbHVlc1tpbmRleF0gPSByZXN1bHQudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKG5hbWVzW2luZGV4XSkge1xuICAgICAgdmFsdWVzW25hbWVzW2luZGV4XV0gPSByZXN1bHQudmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuLy8gY3JlYXRlIGFuIGVuY29kZWQgbWV0aG9kIHNpZ25hdHVyZSBmcm9tIGFuIEFCSSBvYmplY3RcbmZ1bmN0aW9uIGVuY29kZVNpZ25hdHVyZShtZXRob2QpIHtcbiAgdmFyIHNpZ25hdHVyZSA9IG1ldGhvZC5uYW1lICsgJygnICsgdXRpbHMuZ2V0S2V5cyhtZXRob2QuaW5wdXRzLCAndHlwZScpLmpvaW4oJywnKSArICcpJztcbiAgdmFyIHNpZ25hdHVyZUVuY29kZWQgPSAnMHgnICsgbmV3IEJ1ZmZlcih1dGlscy5rZWNjYWsyNTYoc2lnbmF0dXJlKSwgJ2hleCcpLnNsaWNlKDAsIDQpLnRvU3RyaW5nKCdoZXgnKTtcblxuICByZXR1cm4gc2lnbmF0dXJlRW5jb2RlZDtcbn1cblxuLy8gZW5jb2RlIG1ldGhvZCBBQkkgb2JqZWN0IHdpdGggdmFsdWVzIGluIGFuIGFycmF5LCBvdXRwdXQgYnl0ZWNvZGVcbmZ1bmN0aW9uIGVuY29kZU1ldGhvZChtZXRob2QsIHZhbHVlcykge1xuICB2YXIgcGFyYW1zRW5jb2RlZCA9IGVuY29kZVBhcmFtcyh1dGlscy5nZXRLZXlzKG1ldGhvZC5pbnB1dHMsICd0eXBlJyksIHZhbHVlcykuc3Vic3RyaW5nKDIpO1xuXG4gIHJldHVybiAnJyArIGVuY29kZVNpZ25hdHVyZShtZXRob2QpICsgcGFyYW1zRW5jb2RlZDtcbn1cblxuLy8gZGVjb2RlIG1ldGhvZCBkYXRhIGJ5dGVjb2RlLCBmcm9tIG1ldGhvZCBBQkkgb2JqZWN0XG5mdW5jdGlvbiBkZWNvZGVNZXRob2QobWV0aG9kLCBkYXRhKSB7XG4gIHZhciBvdXRwdXROYW1lcyA9IHV0aWxzLmdldEtleXMobWV0aG9kLm91dHB1dHMsICduYW1lJywgdHJ1ZSk7XG4gIHZhciBvdXRwdXRUeXBlcyA9IHV0aWxzLmdldEtleXMobWV0aG9kLm91dHB1dHMsICd0eXBlJyk7XG5cbiAgcmV0dXJuIGRlY29kZVBhcmFtcyhvdXRwdXROYW1lcywgb3V0cHV0VHlwZXMsIHV0aWxzLmhleE9yQnVmZmVyKGRhdGEpKTtcbn1cblxuLy8gZGVjb2RlIG1ldGhvZCBkYXRhIGJ5dGVjb2RlLCBmcm9tIG1ldGhvZCBBQkkgb2JqZWN0XG5mdW5jdGlvbiBlbmNvZGVFdmVudChldmVudE9iamVjdCwgdmFsdWVzKSB7XG4gIHJldHVybiBlbmNvZGVNZXRob2QoZXZlbnRPYmplY3QsIHZhbHVlcyk7XG59XG5cbmZ1bmN0aW9uIGV2ZW50U2lnbmF0dXJlKGV2ZW50T2JqZWN0KSB7XG4gIHZhciBzaWduYXR1cmUgPSBldmVudE9iamVjdC5uYW1lICsgJygnICsgdXRpbHMuZ2V0S2V5cyhldmVudE9iamVjdC5pbnB1dHMsICd0eXBlJykuam9pbignLCcpICsgJyknO1xuXG4gIHJldHVybiAnMHgnICsgdXRpbHMua2VjY2FrMjU2KHNpZ25hdHVyZSk7XG59XG5cbi8vIGRlY29kZSBtZXRob2QgZGF0YSBieXRlY29kZSwgZnJvbSBtZXRob2QgQUJJIG9iamVjdFxuZnVuY3Rpb24gZGVjb2RlRXZlbnQoZXZlbnRPYmplY3QsIGRhdGEsIHRvcGljcykge1xuICB2YXIgdXNlTnVtYmVyZWRQYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHRydWU7XG5cbiAgdmFyIG5vbkluZGV4ZWQgPSBldmVudE9iamVjdC5pbnB1dHMuZmlsdGVyKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHJldHVybiAhaW5wdXQuaW5kZXhlZDtcbiAgfSk7XG4gIHZhciBub25JbmRleGVkTmFtZXMgPSB1dGlscy5nZXRLZXlzKG5vbkluZGV4ZWQsICduYW1lJywgdHJ1ZSk7XG4gIHZhciBub25JbmRleGVkVHlwZXMgPSB1dGlscy5nZXRLZXlzKG5vbkluZGV4ZWQsICd0eXBlJyk7XG4gIHZhciBldmVudCA9IGRlY29kZVBhcmFtcyhub25JbmRleGVkTmFtZXMsIG5vbkluZGV4ZWRUeXBlcywgdXRpbHMuaGV4T3JCdWZmZXIoZGF0YSksIHVzZU51bWJlcmVkUGFyYW1zKTtcbiAgdmFyIHRvcGljT2Zmc2V0ID0gZXZlbnRPYmplY3QuYW5vbnltb3VzID8gMCA6IDE7XG5cbiAgZXZlbnRPYmplY3QuaW5wdXRzLmZpbHRlcihmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQuaW5kZXhlZDtcbiAgfSkubWFwKGZ1bmN0aW9uIChpbnB1dCwgaSkge1xuICAgIHZhciB0b3BpYyA9IG5ldyBCdWZmZXIodG9waWNzW2kgKyB0b3BpY09mZnNldF0uc2xpY2UoMiksICdoZXgnKTtcbiAgICB2YXIgY29kZXIgPSBnZXRQYXJhbUNvZGVyKGlucHV0LnR5cGUpO1xuICAgIGV2ZW50W2lucHV0Lm5hbWVdID0gY29kZXIuZGVjb2RlKHRvcGljLCAwKS52YWx1ZTtcbiAgfSk7XG5cbiAgZXZlbnQuX2V2ZW50TmFtZSA9IGV2ZW50T2JqZWN0Lm5hbWU7XG5cbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vLyBEZWNvZGUgYSBzcGVjaWZpYyBsb2cgaXRlbSB3aXRoIGEgc3BlY2lmaWMgZXZlbnQgYWJpXG5mdW5jdGlvbiBkZWNvZGVMb2dJdGVtKGV2ZW50T2JqZWN0LCBsb2cpIHtcbiAgdmFyIHVzZU51bWJlcmVkUGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlO1xuXG4gIGlmIChldmVudE9iamVjdCAmJiBsb2cudG9waWNzWzBdID09PSBldmVudFNpZ25hdHVyZShldmVudE9iamVjdCkpIHtcbiAgICByZXR1cm4gZGVjb2RlRXZlbnQoZXZlbnRPYmplY3QsIGxvZy5kYXRhLCBsb2cudG9waWNzLCB1c2VOdW1iZXJlZFBhcmFtcyk7XG4gIH1cbn1cblxuLy8gQ3JlYXRlIGEgZGVjb2RlciBmb3IgYWxsIGV2ZW50cyBkZWZpbmVkIGluIGFuIGFiaS4gSXQgcmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZFxuLy8gb24gYW4gYXJyYXkgb2YgbG9nIGVudHJpZXMgc3VjaCBhcyByZWNlaXZlZCBmcm9tIGdldExvZ3Mgb3IgZ2V0VHJhbnNhY3Rpb25SZWNlaXB0IGFuZCBwYXJzZXNcbi8vIGFueSBtYXRjaGluZyBsb2cgZW50cmllc1xuZnVuY3Rpb24gbG9nRGVjb2RlcihhYmkpIHtcbiAgdmFyIHVzZU51bWJlcmVkUGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gIHZhciBldmVudE1hcCA9IHt9O1xuICBhYmkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0udHlwZSA9PT0gJ2V2ZW50JztcbiAgfSkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgZXZlbnRNYXBbZXZlbnRTaWduYXR1cmUoaXRlbSldID0gaXRlbTtcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiAobG9nSXRlbXMpIHtcbiAgICByZXR1cm4gbG9nSXRlbXMubWFwKGZ1bmN0aW9uIChsb2cpIHtcbiAgICAgIHJldHVybiBkZWNvZGVMb2dJdGVtKGV2ZW50TWFwW2xvZy50b3BpY3NbMF1dLCBsb2csIHVzZU51bWJlcmVkUGFyYW1zKTtcbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW5jb2RlUGFyYW1zOiBlbmNvZGVQYXJhbXMsXG4gIGRlY29kZVBhcmFtczogZGVjb2RlUGFyYW1zLFxuICBlbmNvZGVNZXRob2Q6IGVuY29kZU1ldGhvZCxcbiAgZGVjb2RlTWV0aG9kOiBkZWNvZGVNZXRob2QsXG4gIGVuY29kZUV2ZW50OiBlbmNvZGVFdmVudCxcbiAgZGVjb2RlRXZlbnQ6IGRlY29kZUV2ZW50LFxuICBkZWNvZGVMb2dJdGVtOiBkZWNvZGVMb2dJdGVtLFxuICBsb2dEZWNvZGVyOiBsb2dEZWNvZGVyLFxuICBldmVudFNpZ25hdHVyZTogZXZlbnRTaWduYXR1cmUsXG4gIGVuY29kZVNpZ25hdHVyZTogZW5jb2RlU2lnbmF0dXJlXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9yZWdlbmVyYXRvciA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InKTtcblxudmFyIF9yZWdlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWdlbmVyYXRvcik7XG5cbnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Jyk7XG5cbnZhciBfc3RyaW5naWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ2lmeSk7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvcicpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXN5bmNUb0dlbmVyYXRvcjIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cbnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpO1xuXG52YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24nKTtcblxudmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnZXRoanMtZm9ybWF0Jyk7XG52YXIgRXRoUlBDID0gcmVxdWlyZSgnZXRoanMtcnBjJyk7XG52YXIgcHJvbWlzZVRvQ2FsbGJhY2sgPSByZXF1aXJlKCdwcm9taXNlLXRvLWNhbGxiYWNrJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRXRoO1xuXG5mdW5jdGlvbiBFdGgocHJvdmlkZXIsIG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgb3B0aW9uc09iamVjdCA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEV0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1xdWVyeV0gdGhlIEV0aCBvYmplY3QgcmVxdWlyZXMgdGhlIFwibmV3XCIgZmxhZyBpbiBvcmRlciB0byBmdW5jdGlvbiBub3JtYWxseSAoaS5lLiBgY29uc3QgZXRoID0gbmV3IEV0aChwcm92aWRlcik7YCkuJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm92aWRlciAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1xdWVyeV0gdGhlIEV0aCBvYmplY3QgcmVxdWlyZXMgdGhhdCB0aGUgZmlyc3QgaW5wdXQgXFwncHJvdmlkZXJcXCcgbXVzdCBiZSBhbiBvYmplY3QsIGdvdCBcXCcnICsgdHlwZW9mIHByb3ZpZGVyICsgJ1xcJyAoaS5lLiBcXCdjb25zdCBldGggPSBuZXcgRXRoKHByb3ZpZGVyKTtcXCcpJyk7XG4gIH1cblxuICBzZWxmLm9wdGlvbnMgPSAoMCwgX2Fzc2lnbjJbJ2RlZmF1bHQnXSkoe1xuICAgIGRlYnVnOiBvcHRpb25zT2JqZWN0LmRlYnVnIHx8IGZhbHNlLFxuICAgIGxvZ2dlcjogb3B0aW9uc09iamVjdC5sb2dnZXIgfHwgY29uc29sZSxcbiAgICBqc29uU3BhY2U6IG9wdGlvbnNPYmplY3QuanNvblNwYWNlIHx8IDBcbiAgfSk7XG4gIHNlbGYucnBjID0gbmV3IEV0aFJQQyhwcm92aWRlcik7XG4gIHNlbGYuc2V0UHJvdmlkZXIgPSBzZWxmLnJwYy5zZXRQcm92aWRlcjtcbn1cblxuRXRoLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiBsb2cobWVzc2FnZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmIChzZWxmLm9wdGlvbnMuZGVidWcpIHNlbGYub3B0aW9ucy5sb2dnZXIubG9nKCdbZXRoanMtcXVlcnkgbG9nXSAnICsgbWVzc2FnZSk7XG59O1xuXG4oMCwgX2tleXMyWydkZWZhdWx0J10pKGZvcm1hdC5zY2hlbWEubWV0aG9kcykuZm9yRWFjaChmdW5jdGlvbiAocnBjTWV0aG9kTmFtZSkge1xuICAoMCwgX2RlZmluZVByb3BlcnR5MlsnZGVmYXVsdCddKShFdGgucHJvdG90eXBlLCBycGNNZXRob2ROYW1lLnJlcGxhY2UoJ2V0aF8nLCAnJyksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBnZW5lcmF0ZUZuRm9yKHJwY01ldGhvZE5hbWUsIGZvcm1hdC5zY2hlbWEubWV0aG9kc1tycGNNZXRob2ROYW1lXSlcbiAgfSk7XG59KTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVGbkZvcihycGNNZXRob2ROYW1lLCBtZXRob2RPYmplY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG91dHB1dE1ldGhvZCgpIHtcbiAgICB2YXIgcGVyZm9ybUNhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZiA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjNbJ2RlZmF1bHQnXSkoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3IyWydkZWZhdWx0J10ubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xuICAgICAgICB2YXIgcmVzdWx0LCBtZXRob2RPdXRwdXRzLCBvdXRwdXRFcnJvcjtcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjJbJ2RlZmF1bHQnXS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGlmICghKGFyZ3MubGVuZ3RoIDwgbWV0aG9kT2JqZWN0WzJdKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1xdWVyeV0gbWV0aG9kIFxcJycgKyBwcm90b01ldGhvZE5hbWUgKyAnXFwnIHJlcXVpcmVzIGF0IGxlYXN0ICcgKyBtZXRob2RPYmplY3RbMl0gKyAnIGlucHV0IChmb3JtYXQgdHlwZSAnICsgbWV0aG9kT2JqZWN0WzBdWzBdICsgJyksICcgKyBhcmdzLmxlbmd0aCArICcgcHJvdmlkZWQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHZpc2l0OiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vd2lraS93aWtpL0pTT04tUlBDIycgKyBycGNNZXRob2ROYW1lLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpZiAoIShhcmdzLmxlbmd0aCA+IG1ldGhvZE9iamVjdFswXS5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLXF1ZXJ5XSBtZXRob2QgXFwnJyArIHByb3RvTWV0aG9kTmFtZSArICdcXCcgcmVxdWlyZXMgYXQgbW9zdCAnICsgbWV0aG9kT2JqZWN0WzBdLmxlbmd0aCArICcgcGFyYW1zLCAnICsgYXJncy5sZW5ndGggKyAnIHByb3ZpZGVkIFxcJycgKyAoMCwgX3N0cmluZ2lmeTJbJ2RlZmF1bHQnXSkoYXJncywgbnVsbCwgc2VsZi5vcHRpb25zLmpzb25TcGFjZSkgKyAnXFwnLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiB2aXNpdDogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9KU09OLVJQQyMnICsgcnBjTWV0aG9kTmFtZS50b0xvd2VyQ2FzZSgpKTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgZGVmYXVsdCBibG9ja1xuICAgICAgICAgICAgICAgIGlmIChtZXRob2RPYmplY3RbM10gJiYgYXJncy5sZW5ndGggPCBtZXRob2RPYmplY3RbM10pIHtcbiAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCgnbGF0ZXN0Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZm9ybWF0IGlucHV0c1xuICAgICAgICAgICAgICAgIHRoaXMubG9nKCdhdHRlbXB0aW5nIG1ldGhvZCBmb3JtYXR0aW5nIGZvciBcXCcnICsgcHJvdG9NZXRob2ROYW1lICsgJ1xcJyB3aXRoIGlucHV0cyAnICsgKDAsIF9zdHJpbmdpZnkyWydkZWZhdWx0J10pKGFyZ3MsIG51bGwsIHRoaXMub3B0aW9ucy5qc29uU3BhY2UpKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNjtcblxuICAgICAgICAgICAgICAgIGlucHV0cyA9IGZvcm1hdC5mb3JtYXRJbnB1dHMocnBjTWV0aG9kTmFtZSwgYXJncyk7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2coJ21ldGhvZCBmb3JtYXR0aW5nIHN1Y2Nlc3MgZm9yIFxcJycgKyBwcm90b01ldGhvZE5hbWUgKyAnXFwnIHdpdGggZm9ybWF0dGVkIHJlc3VsdDogJyArICgwLCBfc3RyaW5naWZ5MlsnZGVmYXVsdCddKShpbnB1dHMsIG51bGwsIHRoaXMub3B0aW9ucy5qc29uU3BhY2UpKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTE7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsnY2F0Y2gnXSg2KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1xdWVyeV0gd2hpbGUgZm9ybWF0dGluZyBpbnB1dHMgXFwnJyArICgwLCBfc3RyaW5naWZ5MlsnZGVmYXVsdCddKShhcmdzLCBudWxsLCB0aGlzLm9wdGlvbnMuanNvblNwYWNlKSArICdcXCcgZm9yIG1ldGhvZCBcXCcnICsgcHJvdG9NZXRob2ROYW1lICsgJ1xcJyBlcnJvcjogJyArIF9jb250ZXh0LnQwKTtcblxuICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ycGMuc2VuZEFzeW5jKHsgbWV0aG9kOiBycGNNZXRob2ROYW1lLCBwYXJhbXM6IGlucHV0cyB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE3O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5sb2coJ2F0dGVtcHRpbmcgbWV0aG9kIGZvcm1hdHRpbmcgZm9yIFxcJycgKyBwcm90b01ldGhvZE5hbWUgKyAnXFwnIHdpdGggcmF3IG91dHB1dHM6ICcgKyAoMCwgX3N0cmluZ2lmeTJbJ2RlZmF1bHQnXSkocmVzdWx0LCBudWxsLCB0aGlzLm9wdGlvbnMuanNvblNwYWNlKSk7XG4gICAgICAgICAgICAgICAgbWV0aG9kT3V0cHV0cyA9IGZvcm1hdC5mb3JtYXRPdXRwdXRzKHJwY01ldGhvZE5hbWUsIHJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmxvZygnbWV0aG9kIGZvcm1hdHRpbmcgc3VjY2VzcyBmb3IgXFwnJyArIHByb3RvTWV0aG9kTmFtZSArICdcXCcgZm9ybWF0dGVkIHJlc3VsdDogJyArICgwLCBfc3RyaW5naWZ5MlsnZGVmYXVsdCddKShtZXRob2RPdXRwdXRzLCBudWxsLCB0aGlzLm9wdGlvbnMuanNvblNwYWNlKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgbWV0aG9kT3V0cHV0cyk7XG5cbiAgICAgICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjQ7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDEgPSBfY29udGV4dFsnY2F0Y2gnXSgxNyk7XG4gICAgICAgICAgICAgICAgb3V0cHV0RXJyb3IgPSBuZXcgRXJyb3IoJ1tldGhqcy1xdWVyeV0gd2hpbGUgZm9ybWF0dGluZyBvdXRwdXRzIGZyb20gUlBDIFxcJycgKyAoMCwgX3N0cmluZ2lmeTJbJ2RlZmF1bHQnXSkocmVzdWx0LCBudWxsLCB0aGlzLm9wdGlvbnMuanNvblNwYWNlKSArICdcXCcgZm9yIG1ldGhvZCBcXCcnICsgcHJvdG9NZXRob2ROYW1lICsgJ1xcJyAnICsgX2NvbnRleHQudDEpO1xuICAgICAgICAgICAgICAgIHRocm93IG91dHB1dEVycm9yO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjg6XG4gICAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMsIFtbNiwgMTFdLCBbMTcsIDI0XV0pO1xuICAgICAgfSkpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gcGVyZm9ybUNhbGwoKSB7XG4gICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0oKTtcblxuICAgIHZhciBjYWxsYmFjayA9IG51bGw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB2YXIgaW5wdXRzID0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHZhciBpbnB1dEVycm9yID0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHZhciBwcm90b01ldGhvZE5hbWUgPSBycGNNZXRob2ROYW1lLnJlcGxhY2UoJ2V0aF8nLCAnJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChhcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBhcmdzLnBvcCgpO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlID0gcGVyZm9ybUNhbGwuY2FsbCh0aGlzKTtcblxuICAgIC8vIGlmIGNhbGxiYWNrIHByb3ZpZGVkLCBjb252ZXJ0IHByb21pc2UgdG8gY2FsbGJhY2tcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBwcm9taXNlVG9DYWxsYmFjayhwcm9taXNlKShjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLy8gb25seSByZXR1cm4gcHJvbWlzZSBpZiBubyBjYWxsYmFjayBwcm92aWRlZFxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbicpO1xuXG52YXIgX2Fzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NpZ24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBhYmkgPSByZXF1aXJlKCdldGhqcy1hYmknKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxudmFyIGtlY2NhazI1NiA9IHJlcXVpcmUoJ2pzLXNoYTMnKS5rZWNjYWtfMjU2OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG52YXIgRXRoRmlsdGVyID0gcmVxdWlyZSgnZXRoanMtZmlsdGVyJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnZXRoanMtdXRpbCcpLmdldEtleXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbnZhciBDb250cmFjdCA9IHJlcXVpcmUoJy4vY29udHJhY3QnKTtcbnZhciBoYXNUcmFuc2FjdGlvbk9iamVjdCA9IHJlcXVpcmUoJy4vaGFzLXR4LW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV0aENvbnRyYWN0O1xuXG5mdW5jdGlvbiBFdGhDb250cmFjdChxdWVyeSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29udHJhY3RGYWN0b3J5KGNvbnRyYWN0QUJJLCBjb250cmFjdEJ5dGVjb2RlLCBjb250cmFjdERlZmF1bHRUeE9iamVjdCkge1xuICAgIC8vIHZhbGlkYXRlIHBhcmFtc1xuICAgIGlmICghQXJyYXkuaXNBcnJheShjb250cmFjdEFCSSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLWNvbnRyYWN0XSBDb250cmFjdCBBQkkgbXVzdCBiZSB0eXBlIEFycmF5LCBnb3QgdHlwZSAnICsgdHlwZW9mIGNvbnRyYWN0QUJJKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb250cmFjdEJ5dGVjb2RlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29udHJhY3RCeXRlY29kZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLWNvbnRyYWN0XSBDb250cmFjdCBieXRlY29kZSBtdXN0IGJlIHR5cGUgU3RyaW5nLCBnb3QgdHlwZSAnICsgdHlwZW9mIGNvbnRyYWN0Qnl0ZWNvZGUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbnRyYWN0RGVmYXVsdFR4T2JqZWN0ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29udHJhY3REZWZhdWx0VHhPYmplY3QgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1jb250cmFjdF0gQ29udHJhY3QgZGVmYXVsdCB0eCBvYmplY3QgbXVzdCBiZSB0eXBlIE9iamVjdCwgZ290IHR5cGUgJyArIHR5cGVvZiBjb250cmFjdEFCSSk7XG4gICAgfVxuXG4gICAgLy8gYnVpbGQgY29udHJhY3Qgb2JqZWN0XG4gICAgdmFyIG91dHB1dCA9IHt9O1xuICAgIG91dHB1dC5hdCA9IGZ1bmN0aW9uIGNvbnRyYWN0QXRBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICAgIHJldHVybiBuZXcgQ29udHJhY3Qoe1xuICAgICAgICBhZGRyZXNzOiBhZGRyZXNzLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGNvbnRyYWN0Qnl0ZWNvZGU6IGNvbnRyYWN0Qnl0ZWNvZGUsXG4gICAgICAgIGNvbnRyYWN0RGVmYXVsdFR4T2JqZWN0OiBjb250cmFjdERlZmF1bHRUeE9iamVjdCxcbiAgICAgICAgY29udHJhY3RBQkk6IGNvbnRyYWN0QUJJXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgb3V0cHV0WyduZXcnXSA9IGZ1bmN0aW9uIG5ld0NvbnRyYWN0KCkge1xuICAgICAgdmFyIHByb3ZpZGVkVHhPYmplY3QgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgdmFyIG5ld01ldGhvZENhbGxiYWNrID0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgdmFyIG5ld01ldGhvZEFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmICh0eXBlb2YgbmV3TWV0aG9kQXJnc1tuZXdNZXRob2RBcmdzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSBuZXdNZXRob2RDYWxsYmFjayA9IG5ld01ldGhvZEFyZ3MucG9wKCk7XG4gICAgICBpZiAoaGFzVHJhbnNhY3Rpb25PYmplY3QobmV3TWV0aG9kQXJncykpIHByb3ZpZGVkVHhPYmplY3QgPSBuZXdNZXRob2RBcmdzLnBvcCgpO1xuICAgICAgdmFyIGNvbnN0cnVjdG9yTWV0aG9kID0gZ2V0Q29uc3RydWN0b3JGcm9tQUJJKGNvbnRyYWN0QUJJKTtcbiAgICAgIHZhciBhc3NlbWJsZVR4T2JqZWN0ID0gKDAsIF9hc3NpZ24yWydkZWZhdWx0J10pKHt9LCBjb250cmFjdERlZmF1bHRUeE9iamVjdCwgcHJvdmlkZWRUeE9iamVjdCk7XG5cbiAgICAgIC8vIHNldCBjb250cmFjdCBkZXBsb3kgYnl0ZWNvZGVcbiAgICAgIGlmIChjb250cmFjdEJ5dGVjb2RlKSB7XG4gICAgICAgIGFzc2VtYmxlVHhPYmplY3QuZGF0YSA9IGNvbnRyYWN0Qnl0ZWNvZGU7XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGVuZCBlbmNvZGVkIGNvbnN0cnVjdG9yIGFyZ3VtZW50c1xuICAgICAgaWYgKGNvbnN0cnVjdG9yTWV0aG9kKSB7XG4gICAgICAgIHZhciBjb25zdHJ1Y3RvckJ5dGVjb2RlID0gYWJpLmVuY29kZVBhcmFtcyhnZXRLZXlzKGNvbnN0cnVjdG9yTWV0aG9kLmlucHV0cywgJ3R5cGUnKSwgbmV3TWV0aG9kQXJncykuc3Vic3RyaW5nKDIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGFzc2VtYmxlVHhPYmplY3QuZGF0YSA9ICcnICsgYXNzZW1ibGVUeE9iamVjdC5kYXRhICsgY29uc3RydWN0b3JCeXRlY29kZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld01ldGhvZENhbGxiYWNrID8gcXVlcnkuc2VuZFRyYW5zYWN0aW9uKGFzc2VtYmxlVHhPYmplY3QsIG5ld01ldGhvZENhbGxiYWNrKSA6IHF1ZXJ5LnNlbmRUcmFuc2FjdGlvbihhc3NlbWJsZVR4T2JqZWN0KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3JGcm9tQUJJKGNvbnRyYWN0QUJJKSB7XG4gIHJldHVybiBjb250cmFjdEFCSS5maWx0ZXIoZnVuY3Rpb24gKGpzb24pIHtcbiAgICByZXR1cm4ganNvbi50eXBlID09PSAnY29uc3RydWN0b3InO1xuICB9KVswXTtcbn0iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9saXN0LWl0ZW0tc2VhcmNoLmNvbXBvbmVudCc7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9pdGVtLWxpc3QuY29tcG9uZW50JztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQge1xuICBFRElUX0dBU19NT0RFUyxcbiAgUFJJT1JJVFlfTEVWRUxTLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2dhcyc7XG5pbXBvcnQgeyBDT0xPUlMsIFRZUE9HUkFQSFkgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IFBSSU9SSVRZX0xFVkVMX0lDT05fTUFQIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZ2FzJztcbmltcG9ydCB7IHVzZUdhc0ZlZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9nYXNGZWUnO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VUcmFuc2FjdGlvbk1vZGFsQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL3RyYW5zYWN0aW9uLW1vZGFsJztcbmltcG9ydCBJbmZvVG9vbHRpcCBmcm9tICcuLi8uLi91aS9pbmZvLXRvb2x0aXAvaW5mby10b29sdGlwJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uLy4uL3VpL3R5cG9ncmFwaHkvdHlwb2dyYXBoeSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEVkaXRHYXNGZWVCdXR0b24oeyB1c2VyQWNrbm93bGVkZ2VkR2FzTWlzc2luZyB9KSB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCB7XG4gICAgZWRpdEdhc01vZGUsXG4gICAgZ2FzTGltaXQsXG4gICAgaGFzU2ltdWxhdGlvbkVycm9yLFxuICAgIGVzdGltYXRlVXNlZCxcbiAgICBtYXhGZWVQZXJHYXMsXG4gICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgc3VwcG9ydHNFSVAxNTU5VjIsXG4gICAgdHJhbnNhY3Rpb24sXG4gIH0gPSB1c2VHYXNGZWVDb250ZXh0KCk7XG4gIGNvbnN0IHsgb3Blbk1vZGFsIH0gPSB1c2VUcmFuc2FjdGlvbk1vZGFsQ29udGV4dCgpO1xuICBjb25zdCBlZGl0RW5hYmxlZCA9XG4gICAgIWhhc1NpbXVsYXRpb25FcnJvciB8fCB1c2VyQWNrbm93bGVkZ2VkR2FzTWlzc2luZyA9PT0gdHJ1ZTtcblxuICBpZiAoIXN1cHBvcnRzRUlQMTU1OVYyIHx8ICFlc3RpbWF0ZVVzZWQgfHwgIWVkaXRFbmFibGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgaWNvbiA9IGVzdGltYXRlVXNlZDtcbiAgbGV0IHRpdGxlID0gZXN0aW1hdGVVc2VkO1xuICBpZiAoXG4gICAgZXN0aW1hdGVVc2VkID09PSBQUklPUklUWV9MRVZFTFMuSElHSCAmJlxuICAgIGVkaXRHYXNNb2RlID09PSBFRElUX0dBU19NT0RFUy5TV0FQU1xuICApIHtcbiAgICBpY29uID0gJ3N3YXBTdWdnZXN0ZWQnO1xuICAgIHRpdGxlID0gJ3N3YXBTdWdnZXN0ZWQnO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtZ2FzLWZlZS1idXR0b25cIj5cbiAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gb3Blbk1vZGFsKCdlZGl0R2FzRmVlJyl9PlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJlZGl0LWdhcy1mZWUtYnV0dG9uX19pY29uXCI+XG4gICAgICAgICAge2Ake1BSSU9SSVRZX0xFVkVMX0lDT05fTUFQW2ljb25dfSBgfVxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImVkaXQtZ2FzLWZlZS1idXR0b25fX2xhYmVsXCI+e3QodGl0bGUpfTwvc3Bhbj5cbiAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWNoZXZyb24tcmlnaHQgYXNzZXQtbGlzdC1pdGVtX19jaGV2cm9uLXJpZ2h0XCIgLz5cbiAgICAgIDwvYnV0dG9uPlxuICAgICAge2VzdGltYXRlVXNlZCA9PT0gJ2N1c3RvbScgJiYgKFxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IG9wZW5Nb2RhbCgnYWR2YW5jZWRHYXNGZWUnKX0+e3QoJ2VkaXQnKX08L2J1dHRvbj5cbiAgICAgICl9XG4gICAgICB7ZXN0aW1hdGVVc2VkID09PSAnZGFwcFN1Z2dlc3RlZCcgJiYgKFxuICAgICAgICA8SW5mb1Rvb2x0aXBcbiAgICAgICAgICBjb250ZW50VGV4dD17XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtZ2FzLWZlZS1idXR0b25fX3Rvb2x0aXBcIj5cbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD17VFlQT0dSQVBIWS5IN30gY29sb3I9e0NPTE9SUy5HUkVZfT5cbiAgICAgICAgICAgICAgICB7dCgnZGFwcFN1Z2dlc3RlZFRvb2x0aXAnLCBbdHJhbnNhY3Rpb24ub3JpZ2luXSl9XG4gICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD17VFlQT0dSQVBIWS5IN30+XG4gICAgICAgICAgICAgICAgPGI+e3QoJ21heEJhc2VGZWUnKX08L2I+XG4gICAgICAgICAgICAgICAge21heEZlZVBlckdhc31cbiAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PXtUWVBPR1JBUEhZLkg3fT5cbiAgICAgICAgICAgICAgICA8Yj57dCgnbWF4UHJpb3JpdHlGZWUnKX08L2I+XG4gICAgICAgICAgICAgICAge21heFByaW9yaXR5RmVlUGVyR2FzfVxuICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9e1RZUE9HUkFQSFkuSDd9PlxuICAgICAgICAgICAgICAgIDxiPnt0KCdnYXNMaW1pdCcpfTwvYj5cbiAgICAgICAgICAgICAgICB7Z2FzTGltaXR9XG4gICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgICBwb3NpdGlvbj1cInRvcFwiXG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5FZGl0R2FzRmVlQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgdXNlckFja25vd2xlZGdlZEdhc01pc3Npbmc6IFByb3BUeXBlcy5ib29sLFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdW5DaGVjayh7IHJldmVyc2VDb2xvcnMgfSkge1xuICBjb25zdCBzdW5Db2xvciA9IHJldmVyc2VDb2xvcnMgPyAnIzAzN0RENicgOiAnd2hpdGUnO1xuICBjb25zdCBjaGVja0NvbG9yID0gcmV2ZXJzZUNvbG9ycyA/ICd3aGl0ZScgOiAnIzAzN0RENic7XG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgd2lkdGg9XCIxNVwiXG4gICAgICBoZWlnaHQ9XCIxNVwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDE1IDE1XCJcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgID5cbiAgICAgIDxwYXRoXG4gICAgICAgIGQ9XCJNMTMuMjE0OCA5LjA1Mzg0QzEzLjQzMiA4LjQwMjAzIDE0Ljg4NzggNy45MjQwMyAxNC44ODc4IDcuMjA3MDNDMTQuODg3OCA2LjQ5MDAzIDEzLjQzMiA2LjAxMjA0IDEzLjIxNDggNS4zNjAyMkMxMi45OTc1IDQuNjg2NjggMTMuODg4MyAzLjQ0ODIzIDEzLjQ3NTUgMi44ODMzMkMxMy4wNjI3IDIuMzE4NDIgMTEuNjA3IDIuNzc0NjkgMTEuMDQyMSAyLjM4MzZDMTAuNDc3MSAxLjk3MDc4IDEwLjQ3NzEgMC40NDk4NzkgOS44MDM2MSAwLjIzMjYwOEM5LjE1MTc5IDAuMDE1MzM1OCA4LjI2MDk4IDEuMjUzNzggNy41NDM5OCAxLjI1Mzc4QzYuODI2OTggMS4yNTM3OCA1LjkxNDQ0IDAuMDE1MzM1OCA1LjI4NDM1IDAuMjMyNjA4QzQuNjEwODEgMC40NDk4NzkgNC42MTA4MSAxLjk5MjUxIDQuMDQ1OTEgMi4zODM2QzMuNDgxIDIuNzk2NDEgMi4wMjUyOCAyLjMxODQyIDEuNjEyNDYgMi44ODMzMkMxLjE5OTY1IDMuNDQ4MjMgMi4wOTA0NiA0LjY4NjY4IDEuODczMTkgNS4zNjAyMkMxLjY1NTkyIDYuMDEyMDQgMC4yMDAxOTUgNi40OTAwMyAwLjIwMDE5NSA3LjIwNzAzQzAuMjAwMTk1IDcuOTI0MDMgMS42NTU5MiA4LjQwMjAzIDEuODczMTkgOS4wNTM4NEMyLjA5MDQ2IDkuNzI3MzggMS4xOTk2NSAxMC45NjU4IDEuNjEyNDYgMTEuNTMwN0MyLjAyNTI4IDEyLjA5NTYgMy40ODEgMTEuNjM5NCA0LjA0NTkxIDEyLjAzMDVDNC42MTA4MSAxMi40NDMzIDQuNjEwODEgMTMuOTY0MiA1LjI4NDM1IDE0LjE4MTVDNS45MzYxNyAxNC4zOTg3IDYuODI2OTggMTMuMTYwMyA3LjU0Mzk4IDEzLjE2MDNDOC4yNjA5OCAxMy4xNjAzIDkuMTczNTIgMTQuMzk4NyA5LjgwMzYxIDE0LjE4MTVDMTAuNDc3MSAxMy45NjQyIDEwLjQ3NzEgMTIuNDIxNiAxMS4wNDIxIDEyLjAzMDVDMTEuNjA3IDExLjYxNzYgMTMuMDYyNyAxMi4wOTU2IDEzLjQ3NTUgMTEuNTMwN0MxMy44ODgzIDEwLjk2NTggMTIuOTk3NSA5LjcwNTY2IDEzLjIxNDggOS4wNTM4NFpcIlxuICAgICAgICBmaWxsPXtzdW5Db2xvcn1cbiAgICAgIC8+XG4gICAgICA8cGF0aFxuICAgICAgICBkPVwiTTYuNDIyODUgMTAuMDg0TDQuMTM5NjUgNy44MTQ0NUM0LjA3NTg1IDcuNzUwNjUgNC4wNDM5NSA3LjY2ODYyIDQuMDQzOTUgNy41NjgzNkM0LjA0Mzk1IDcuNDY4MSA0LjA3NTg1IDcuMzg2MDcgNC4xMzk2NSA3LjMyMjI3TDQuNjQ1NTEgNi44MzAwOEM0LjcwOTMxIDYuNzU3MTYgNC43ODY3OCA2LjcyMDcgNC44Nzc5MyA2LjcyMDdDNC45NzgxOSA2LjcyMDcgNS4wNjQ3OCA2Ljc1NzE2IDUuMTM3NyA2LjgzMDA4TDYuNjY4OTUgOC4zNjEzM0w5Ljk1MDIgNS4wODAwOEMxMC4wMjMxIDUuMDA3MTYgMTAuMTA1MSA0Ljk3MDcgMTAuMTk2MyA0Ljk3MDdDMTAuMjk2NSA0Ljk3MDcgMTAuMzc4NiA1LjAwNzE2IDEwLjQ0MjQgNS4wODAwOEwxMC45NDgyIDUuNTcyMjdDMTEuMDEyIDUuNjM2MDcgMTEuMDQzOSA1LjcxODEgMTEuMDQzOSA1LjgxODM2QzExLjA0MzkgNS45MTg2MiAxMS4wMTIgNi4wMDA2NSAxMC45NDgyIDYuMDY0NDVMNi45MTUwNCAxMC4wODRDNi44NTEyNCAxMC4xNTY5IDYuNzY5MjEgMTAuMTkzNCA2LjY2ODk1IDEwLjE5MzRDNi41Njg2OCAxMC4xOTM0IDYuNDg2NjUgMTAuMTU2OSA2LjQyMjg1IDEwLjA4NFpcIlxuICAgICAgICBmaWxsPXtjaGVja0NvbG9yfVxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cblxuU3VuQ2hlY2sucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgdHJ1ZSByZXZlcnNlcyB0aGUgY29sb3JzIG9mIHRoZSBTdW5DaGVjayBpY29uXG4gICAqL1xuICByZXZlcnNlQ29sb3JzOiBQcm9wVHlwZXMuYm9vbCxcbn07XG4iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgQmlnTnVtYmVyIGZyb20gJ2JpZ251bWJlci5qcyc7XG5cbmltcG9ydCB7IEdBU19FU1RJTUFURV9UWVBFUyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvZ2FzJztcbmltcG9ydCB7XG4gIGdldEdhc0VzdGltYXRlVHlwZSxcbiAgZ2V0SXNHYXNFc3RpbWF0ZXNMb2FkaW5nLFxufSBmcm9tICcuLi8uLi8uLi8uLi9kdWNrcy9tZXRhbWFzay9tZXRhbWFzayc7XG5pbXBvcnQgeyBnZXRHYXNGZWVUaW1lRXN0aW1hdGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zdG9yZS9hY3Rpb25zJztcblxuZXhwb3J0IGNvbnN0IHVzZUN1c3RvbVRpbWVFc3RpbWF0ZSA9ICh7XG4gIGdhc0ZlZUVzdGltYXRlcyxcbiAgbWF4RmVlUGVyR2FzLFxuICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbn0pID0+IHtcbiAgY29uc3QgZ2FzRXN0aW1hdGVUeXBlID0gdXNlU2VsZWN0b3IoZ2V0R2FzRXN0aW1hdGVUeXBlKTtcbiAgY29uc3QgaXNHYXNFc3RpbWF0ZXNMb2FkaW5nID0gdXNlU2VsZWN0b3IoZ2V0SXNHYXNFc3RpbWF0ZXNMb2FkaW5nKTtcblxuICBjb25zdCBbY3VzdG9tRXN0aW1hdGVkVGltZSwgc2V0Q3VzdG9tRXN0aW1hdGVkVGltZV0gPSB1c2VTdGF0ZShudWxsKTtcblxuICBjb25zdCByZXR1cm5Ob0VzdGltYXRlcyA9XG4gICAgaXNHYXNFc3RpbWF0ZXNMb2FkaW5nIHx8XG4gICAgZ2FzRXN0aW1hdGVUeXBlICE9PSBHQVNfRVNUSU1BVEVfVFlQRVMuRkVFX01BUktFVCB8fFxuICAgICFtYXhQcmlvcml0eUZlZVBlckdhcztcblxuICAvLyBJZiB0aGUgdXNlciBoYXMgY2hvc2VuIGEgdmFsdWUgbG93ZXIgdGhhbiB0aGUgbG93IGdhcyBmZWUgZXN0aW1hdGUsXG4gIC8vIFdlJ2xsIG5lZWQgdG8gdXNlIHRoZSB1c2VFZmZlY3QgaG9vayBiZWxvdyB0byBtYWtlIGEgY2FsbCB0byBjYWxjdWxhdGVcbiAgLy8gdGhlIHRpbWUgdG8gc2hvd1xuICBjb25zdCBpc1Vua25vd25Mb3cgPVxuICAgIGdhc0ZlZUVzdGltYXRlcz8ubG93ICYmXG4gICAgTnVtYmVyKG1heFByaW9yaXR5RmVlUGVyR2FzKSA8XG4gICAgICBOdW1iZXIoZ2FzRmVlRXN0aW1hdGVzLmxvdy5zdWdnZXN0ZWRNYXhQcmlvcml0eUZlZVBlckdhcyk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBpc0dhc0VzdGltYXRlc0xvYWRpbmcgfHxcbiAgICAgIGdhc0VzdGltYXRlVHlwZSAhPT0gR0FTX0VTVElNQVRFX1RZUEVTLkZFRV9NQVJLRVQgfHxcbiAgICAgICFtYXhQcmlvcml0eUZlZVBlckdhc1xuICAgIClcbiAgICAgIHJldHVybjtcbiAgICBpZiAoaXNVbmtub3duTG93KSB7XG4gICAgICAvLyBnZXRHYXNGZWVUaW1lRXN0aW1hdGUgcmVxdWlyZXMgcGFyYW1ldGVycyBpbiBzdHJpbmcgZm9ybWF0XG4gICAgICBnZXRHYXNGZWVUaW1lRXN0aW1hdGUoXG4gICAgICAgIG5ldyBCaWdOdW1iZXIobWF4UHJpb3JpdHlGZWVQZXJHYXMsIDEwKS50b1N0cmluZygxMCksXG4gICAgICAgIG5ldyBCaWdOdW1iZXIobWF4RmVlUGVyR2FzLCAxMCkudG9TdHJpbmcoMTApLFxuICAgICAgKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgc2V0Q3VzdG9tRXN0aW1hdGVkVGltZShyZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbXG4gICAgZ2FzRXN0aW1hdGVUeXBlLFxuICAgIGlzVW5rbm93bkxvdyxcbiAgICBpc0dhc0VzdGltYXRlc0xvYWRpbmcsXG4gICAgbWF4RmVlUGVyR2FzLFxuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzLFxuICAgIHJldHVybk5vRXN0aW1hdGVzLFxuICBdKTtcblxuICBpZiAocmV0dXJuTm9Fc3RpbWF0ZXMpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCB7IGxvdyA9IHt9LCBtZWRpdW0gPSB7fSwgaGlnaCA9IHt9IH0gPSBnYXNGZWVFc3RpbWF0ZXM7XG4gIGxldCB3YWl0VGltZUVzdGltYXRlID0gJyc7XG5cbiAgaWYgKFxuICAgIGlzVW5rbm93bkxvdyAmJlxuICAgIGN1c3RvbUVzdGltYXRlZFRpbWUgJiZcbiAgICBjdXN0b21Fc3RpbWF0ZWRUaW1lICE9PSAndW5rbm93bicgJiZcbiAgICBjdXN0b21Fc3RpbWF0ZWRUaW1lPy51cHBlclRpbWVCb3VuZCAhPT0gJ3Vua25vd24nXG4gICkge1xuICAgIHdhaXRUaW1lRXN0aW1hdGUgPSBOdW1iZXIoY3VzdG9tRXN0aW1hdGVkVGltZT8udXBwZXJUaW1lQm91bmQpO1xuICB9IGVsc2UgaWYgKFxuICAgIE51bWJlcihtYXhQcmlvcml0eUZlZVBlckdhcykgPj0gTnVtYmVyKG1lZGl1bS5zdWdnZXN0ZWRNYXhQcmlvcml0eUZlZVBlckdhcylcbiAgKSB7XG4gICAgd2FpdFRpbWVFc3RpbWF0ZSA9IGhpZ2gubWluV2FpdFRpbWVFc3RpbWF0ZTtcbiAgfSBlbHNlIHtcbiAgICB3YWl0VGltZUVzdGltYXRlID0gbG93Lm1heFdhaXRUaW1lRXN0aW1hdGU7XG4gIH1cblxuICByZXR1cm4geyB3YWl0VGltZUVzdGltYXRlIH07XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge1xuICBFRElUX0dBU19NT0RFUyxcbiAgUFJJT1JJVFlfTEVWRUxTLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2dhcyc7XG5pbXBvcnQge1xuICBDT0xPUlMsXG4gIEZPTlRfV0VJR0hULFxuICBUWVBPR1JBUEhZLFxufSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uLy4uLy4uL3VpL3R5cG9ncmFwaHknO1xuXG5jb25zdCBFZGl0R2FzVG9vbFRpcCA9ICh7XG4gIGdhc0xpbWl0LFxuICBwcmlvcml0eUxldmVsLFxuICAvLyBtYXhGZWVQZXJHYXMgJiBtYXhQcmlvcml0eUZlZVBlckdhcyBhcmUgZGVyaXZlZCBmcm9tIGNvbmRpdGlvbmFsIGxvZ2ljXG4gIC8vIHJlbGF0ZWQgdG8gdGhlIHNvdXJjZSBvZiB0aGUgZXN0aW1hdGVzLiBXZSBwYXNzIHRoZXNlIHZhbHVlcyBmcm9tIHRoZVxuICAvLyB0aGUgcGFyZW50IGNvbXBvbmVudCAoZWRpdC1nYXMtaXRlbSkgcmF0aGVyIHRoYW4gcmVjYWxjdWxhdGUgdGhlbVxuICBtYXhGZWVQZXJHYXMsXG4gIG1heFByaW9yaXR5RmVlUGVyR2FzLFxuICBlZGl0R2FzTW9kZSxcbiAgdHJhbnNhY3Rpb24sXG4gIHQsXG59KSA9PiB7XG4gIGNvbnN0IHRvb2xUaXBNZXNzYWdlID0gKCkgPT4ge1xuICAgIHN3aXRjaCAocHJpb3JpdHlMZXZlbCkge1xuICAgICAgY2FzZSBQUklPUklUWV9MRVZFTFMuTE9XOlxuICAgICAgICByZXR1cm4gdCgnbG93R2FzU2V0dGluZ1Rvb2xUaXBNZXNzYWdlJywgW1xuICAgICAgICAgIDxzcGFuIGtleT17cHJpb3JpdHlMZXZlbH0+XG4gICAgICAgICAgICA8Yj57dCgnbG93Jyl9PC9iPlxuICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBQUklPUklUWV9MRVZFTFMuTUVESVVNOlxuICAgICAgICByZXR1cm4gdCgnbWVkaXVtR2FzU2V0dGluZ1Rvb2xUaXBNZXNzYWdlJywgW1xuICAgICAgICAgIDxzcGFuIGtleT17cHJpb3JpdHlMZXZlbH0+XG4gICAgICAgICAgICA8Yj57dCgnbWVkaXVtJyl9PC9iPlxuICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBQUklPUklUWV9MRVZFTFMuSElHSDpcbiAgICAgICAgaWYgKGVkaXRHYXNNb2RlID09PSBFRElUX0dBU19NT0RFUy5TV0FQUykge1xuICAgICAgICAgIHJldHVybiB0KCdzd2FwU3VnZ2VzdGVkR2FzU2V0dGluZ1Rvb2xUaXBNZXNzYWdlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQoJ2hpZ2hHYXNTZXR0aW5nVG9vbFRpcE1lc3NhZ2UnLCBbXG4gICAgICAgICAgPHNwYW4ga2V5PXtwcmlvcml0eUxldmVsfT5cbiAgICAgICAgICAgIDxiPnt0KCdoaWdoJyl9PC9iPlxuICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBQUklPUklUWV9MRVZFTFMuQ1VTVE9NOlxuICAgICAgICByZXR1cm4gdCgnY3VzdG9tR2FzU2V0dGluZ1Rvb2xUaXBNZXNzYWdlJywgW1xuICAgICAgICAgIDxzcGFuIGtleT17cHJpb3JpdHlMZXZlbH0+XG4gICAgICAgICAgICA8Yj57dCgnY3VzdG9tJyl9PC9iPlxuICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBQUklPUklUWV9MRVZFTFMuREFQUF9TVUdHRVNURUQ6XG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbj8ub3JpZ2luXG4gICAgICAgICAgPyB0KCdkYXBwU3VnZ2VzdGVkR2FzU2V0dGluZ1Rvb2xUaXBNZXNzYWdlJywgW1xuICAgICAgICAgICAgICA8c3BhbiBrZXk9e3RyYW5zYWN0aW9uPy5vcmlnaW59Pnt0cmFuc2FjdGlvbj8ub3JpZ2lufTwvc3Bhbj4sXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIDogbnVsbDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH07XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWdhcy10b29sdGlwX19jb250YWluZXJcIj5cbiAgICAgIHtwcmlvcml0eUxldmVsICE9PSBQUklPUklUWV9MRVZFTFMuQ1VTVE9NICYmXG4gICAgICBwcmlvcml0eUxldmVsICE9PSBQUklPUklUWV9MRVZFTFMuREFQUF9TVUdHRVNURUQgJiZcbiAgICAgICEoXG4gICAgICAgIHByaW9yaXR5TGV2ZWwgPT09IFBSSU9SSVRZX0xFVkVMUy5ISUdIICYmXG4gICAgICAgIGVkaXRHYXNNb2RlID09PSBFRElUX0dBU19NT0RFUy5TV0FQU1xuICAgICAgKSA/IChcbiAgICAgICAgPGltZyBhbHQ9XCJcIiBzcmM9e2AuL2ltYWdlcy9jdXJ2ZS0ke3ByaW9yaXR5TGV2ZWx9LnN2Z2B9IC8+XG4gICAgICApIDogbnVsbH1cbiAgICAgIHtwcmlvcml0eUxldmVsID09PSBQUklPUklUWV9MRVZFTFMuSElHSCAmJlxuICAgICAgZWRpdEdhc01vZGUgIT09IEVESVRfR0FTX01PREVTLlNXQVBTID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtZ2FzLXRvb2x0aXBfX2NvbnRhaW5lcl9fZGlhbG9nXCI+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD17VFlQT0dSQVBIWS5IN30gY29sb3I9e0NPTE9SUy5XSElURX0+XG4gICAgICAgICAgICB7dCgnaGlnaEdhc1NldHRpbmdUb29sVGlwRGlhbG9nJyl9XG4gICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICkgOiBudWxsfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWdhcy10b29sdGlwX19jb250YWluZXJfX21lc3NhZ2VcIj5cbiAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD17VFlQT0dSQVBIWS5IN30+e3Rvb2xUaXBNZXNzYWdlKCl9PC9UeXBvZ3JhcGh5PlxuICAgICAgPC9kaXY+XG4gICAgICB7cHJpb3JpdHlMZXZlbCA9PT0gUFJJT1JJVFlfTEVWRUxTLkNVU1RPTSA/IG51bGwgOiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1nYXMtdG9vbHRpcF9fY29udGFpbmVyX192YWx1ZXNcIj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgICAgdmFyaWFudD17VFlQT0dSQVBIWS5IN31cbiAgICAgICAgICAgICAgZm9udFdlaWdodD17Rk9OVF9XRUlHSFQuQk9MRH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZWRpdC1nYXMtdG9vbHRpcF9fY29udGFpbmVyX19sYWJlbFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0KCdtYXhCYXNlRmVlJyl9XG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgICAgICB2YXJpYW50PXtUWVBPR1JBUEhZLkg3fVxuICAgICAgICAgICAgICBjb2xvcj17Q09MT1JTLk5FVVRSQUxfR1JFWX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZWRpdC1nYXMtdG9vbHRpcF9fY29udGFpbmVyX192YWx1ZVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHttYXhGZWVQZXJHYXN9XG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgIHZhcmlhbnQ9e1RZUE9HUkFQSFkuSDd9XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ9e0ZPTlRfV0VJR0hULkJPTER9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXQtZ2FzLXRvb2x0aXBfX2NvbnRhaW5lcl9fbGFiZWxcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgncHJpb3JpdHlGZWVQcm9wZXJDYXNlJyl9XG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgICAgICB2YXJpYW50PXtUWVBPR1JBUEhZLkg3fVxuICAgICAgICAgICAgICBjb2xvcj17Q09MT1JTLk5FVVRSQUxfR1JFWX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZWRpdC1nYXMtdG9vbHRpcF9fY29udGFpbmVyX192YWx1ZVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHttYXhQcmlvcml0eUZlZVBlckdhc31cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgICAgdmFyaWFudD17VFlQT0dSQVBIWS5IN31cbiAgICAgICAgICAgICAgZm9udFdlaWdodD17Rk9OVF9XRUlHSFQuQk9MRH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZWRpdC1nYXMtdG9vbHRpcF9fY29udGFpbmVyX19sYWJlbFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0KCdnYXNMaW1pdCcpfVxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgICAgdmFyaWFudD17VFlQT0dSQVBIWS5IN31cbiAgICAgICAgICAgICAgY29sb3I9e0NPTE9SUy5ORVVUUkFMX0dSRVl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXQtZ2FzLXRvb2x0aXBfX2NvbnRhaW5lcl9fdmFsdWVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Z2FzTGltaXR9XG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkVkaXRHYXNUb29sVGlwLnByb3BUeXBlcyA9IHtcbiAgcHJpb3JpdHlMZXZlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgbWF4RmVlUGVyR2FzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtYXhQcmlvcml0eUZlZVBlckdhczogUHJvcFR5cGVzLnN0cmluZyxcbiAgdDogUHJvcFR5cGVzLmZ1bmMsXG4gIGVkaXRHYXNNb2RlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnYXNMaW1pdDogUHJvcFR5cGVzLm51bWJlcixcbiAgdHJhbnNhY3Rpb246IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBFZGl0R2FzVG9vbFRpcDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCBUb29sdGlwIGZyb20gJy4uLy4uLy4uL3VpL3Rvb2x0aXAnO1xuXG5jb25zdCBOZXR3b3JrU3RhdHVzVG9vbHRpcCA9ICh7IGNoaWxkcmVuLCBodG1sLCB0aXRsZSB9KSA9PiAoXG4gIDxUb29sdGlwIHBvc2l0aW9uPVwidG9wXCIgaHRtbD17aHRtbH0gdGl0bGU9e3RpdGxlfSB0aGVtZT1cInRpcHB5LXRvb2x0aXAtaW5mb1wiPlxuICAgIHtjaGlsZHJlbn1cbiAgPC9Ub29sdGlwPlxuKTtcblxuTmV0d29ya1N0YXR1c1Rvb2x0aXAucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgaHRtbDogUHJvcFR5cGVzLm5vZGUsXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGNvbnN0IEJhc2VGZWVUb29sdGlwID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgcmV0dXJuIChcbiAgICA8TmV0d29ya1N0YXR1c1Rvb2x0aXBcbiAgICAgIGh0bWw9e3QoJ25ldHdvcmtTdGF0dXNCYXNlRmVlVG9vbHRpcCcsIFtcbiAgICAgICAgPHN0cm9uZ1xuICAgICAgICAgIGtleT1cImJhc2VfZmVlX21lZGl1bV9lc3RpbWF0ZVwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwibmV0d29yay1zdGF0dXNfX3Rvb2x0aXAtbGFiZWxcIlxuICAgICAgICA+XG4gICAgICAgICAge3QoJ21lZGl1bScpfVxuICAgICAgICA8L3N0cm9uZz4sXG4gICAgICAgIDxzdHJvbmdcbiAgICAgICAgICBrZXk9XCJiYXNlX2ZlZV9oaWdoX2VzdGltYXRlXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJuZXR3b3JrLXN0YXR1c19fdG9vbHRpcC1sYWJlbFwiXG4gICAgICAgID5cbiAgICAgICAgICB7dCgnaGlnaCcpfVxuICAgICAgICA8L3N0cm9uZz4sXG4gICAgICBdKX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9OZXR3b3JrU3RhdHVzVG9vbHRpcD5cbiAgKTtcbn07XG5cbkJhc2VGZWVUb29sdGlwLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgY29uc3QgUHJpb3JpdHlGZWVUb29sdGlwID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgcmV0dXJuIChcbiAgICA8TmV0d29ya1N0YXR1c1Rvb2x0aXAgdGl0bGU9e3QoJ25ldHdvcmtTdGF0dXNQcmlvcml0eUZlZVRvb2x0aXAnKX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9OZXR3b3JrU3RhdHVzVG9vbHRpcD5cbiAgKTtcbn07XG5cblByaW9yaXR5RmVlVG9vbHRpcC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGNvbnN0IE5ldHdvcmtTdGFiaWxpdHlUb29sdGlwID0gKHsgY2hpbGRyZW4sIGNvbG9yLCB0b29sdGlwTGFiZWwgfSkgPT4ge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcblxuICByZXR1cm4gKFxuICAgIDxOZXR3b3JrU3RhdHVzVG9vbHRpcFxuICAgICAgaHRtbD17dCgnbmV0d29ya1N0YXR1c1N0YWJpbGl0eUZlZVRvb2x0aXAnLCBbXG4gICAgICAgIDxzdHJvbmdcbiAgICAgICAgICBrZXk9XCJuZXR3b3JrLXN0YXR1c19fdG9vbHRpcFwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwibmV0d29yay1zdGF0dXNfX3Rvb2x0aXAtbGFiZWxcIlxuICAgICAgICAgIHN0eWxlPXt7IGNvbG9yIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dCh0b29sdGlwTGFiZWwpfVxuICAgICAgICA8L3N0cm9uZz4sXG4gICAgICBdKX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9OZXR3b3JrU3RhdHVzVG9vbHRpcD5cbiAgKTtcbn07XG5cbk5ldHdvcmtTdGFiaWxpdHlUb29sdGlwLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHRvb2x0aXBMYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2xhdGVzdC1wcmlvcml0eS1mZWUtZmllbGQnO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vc3RhdHVzLXNsaWRlcic7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9iYXNlLWZlZS1pbnB1dCc7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9wcmlvcml0eS1mZWUtaW5wdXQnO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgU2l0ZUljb24gZnJvbSAnLi4vLi4vdWkvc2l0ZS1pY29uJztcbmltcG9ydCB7IHN0cmlwSHR0cHNTY2hlbWVXaXRob3V0UG9ydCB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbm5lY3RlZFNpdGVzTGlzdCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgdDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb25uZWN0ZWRTdWJqZWN0czogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBpY29uVXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBvcmlnaW46IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICB9KSxcbiAgICApLmlzUmVxdWlyZWQsXG4gICAgb25EaXNjb25uZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbm5lY3RlZFN1YmplY3RzLCBvbkRpc2Nvbm5lY3QgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPG1haW4gY2xhc3NOYW1lPVwiY29ubmVjdGVkLXNpdGVzLWxpc3RfX2NvbnRlbnQtcm93c1wiPlxuICAgICAgICB7Y29ubmVjdGVkU3ViamVjdHMubWFwKChzdWJqZWN0KSA9PiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAga2V5PXtzdWJqZWN0Lm9yaWdpbn1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNvbm5lY3RlZC1zaXRlcy1saXN0X19jb250ZW50LXJvd1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25uZWN0ZWQtc2l0ZXMtbGlzdF9fc3ViamVjdC1pbmZvXCI+XG4gICAgICAgICAgICAgIDxTaXRlSWNvbiBpY29uPXtzdWJqZWN0Lmljb25Vcmx9IG5hbWU9e3N1YmplY3QubmFtZX0gc2l6ZT17MzJ9IC8+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29ubmVjdGVkLXNpdGVzLWxpc3RfX3N1YmplY3QtbmFtZVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9e3N1YmplY3QuZXh0ZW5zaW9uSWQgfHwgc3ViamVjdC5vcmlnaW59XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dGhpcy5nZXRTdWJqZWN0RGlzcGxheU5hbWUoc3ViamVjdCl9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmFzIGZhLXRyYXNoLWFsdCBjb25uZWN0ZWQtc2l0ZXMtbGlzdF9fdHJhc2hcIlxuICAgICAgICAgICAgICB0aXRsZT17dCgnZGlzY29ubmVjdCcpfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkRpc2Nvbm5lY3Qoc3ViamVjdC5vcmlnaW4pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICA8L21haW4+XG4gICAgKTtcbiAgfVxuXG4gIGdldFN1YmplY3REaXNwbGF5TmFtZShzdWJqZWN0KSB7XG4gICAgaWYgKHN1YmplY3QuZXh0ZW5zaW9uSWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQudCgnZXh0ZXJuYWxFeHRlbnNpb24nKTtcbiAgICB9XG5cbiAgICAvLyBXZSBzdHJpcCBodHRwcyBzY2hlbWVzIG9ubHksIGFuZCBvbmx5IGlmIHRoZSBVUkwgaGFzIG5vIHBvcnQuXG4gICAgcmV0dXJuIHN0cmlwSHR0cHNTY2hlbWVXaXRob3V0UG9ydChzdWJqZWN0Lm9yaWdpbik7XG4gIH1cbn1cbiIsImltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IENoZWNrQm94IGZyb20gJy4uLy4uL3VpL2NoZWNrLWJveCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbm5lY3RlZEFjY291bnRzUGVybWlzc2lvbnMgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgcGVybWlzc2lvbnM6IFtdLFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcGVybWlzc2lvbnM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAga2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB9KSxcbiAgICApLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGV4cGFuZGVkOiBmYWxzZSxcbiAgfTtcblxuICB0b2dnbGVFeHBhbmRlZCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKChwcmV2U3RhdGUpID0+ICh7XG4gICAgICBleHBhbmRlZDogIXByZXZTdGF0ZS5leHBhbmRlZCxcbiAgICB9KSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcGVybWlzc2lvbnMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3QgeyBleHBhbmRlZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChwZXJtaXNzaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbm5lY3RlZC1hY2NvdW50cy1wZXJtaXNzaW9uc1wiPlxuICAgICAgICA8cFxuICAgICAgICAgIGNsYXNzTmFtZT1cImNvbm5lY3RlZC1hY2NvdW50cy1wZXJtaXNzaW9uc19faGVhZGVyXCJcbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUV4cGFuZGVkfVxuICAgICAgICA+XG4gICAgICAgICAgPHN0cm9uZz57dCgncGVybWlzc2lvbnMnKX08L3N0cm9uZz5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ2ZhcycsIHtcbiAgICAgICAgICAgICAgJ2ZhLWFuZ2xlLWRvd24nOiAhZXhwYW5kZWQsXG4gICAgICAgICAgICAgICdmYS1hbmdsZS11cCc6IGV4cGFuZGVkLFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICB0aXRsZT17dCgnc2hvd1Blcm1pc3Npb25zJyl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9wPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKFxuICAgICAgICAgICAgJ2Nvbm5lY3RlZC1hY2NvdW50cy1wZXJtaXNzaW9uc19fbGlzdC1jb250YWluZXInLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAnY29ubmVjdGVkLWFjY291bnRzLXBlcm1pc3Npb25zX19saXN0LWNvbnRhaW5lci0tZXhwYW5kZWQnOiBleHBhbmRlZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxwPnt0KCdhdXRob3JpemVkUGVybWlzc2lvbnMnKX06PC9wPlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJjb25uZWN0ZWQtYWNjb3VudHMtcGVybWlzc2lvbnNfX2xpc3RcIj5cbiAgICAgICAgICAgIHtwZXJtaXNzaW9ucy5tYXAoKHsga2V5OiBwZXJtaXNzaW9uTmFtZSB9KSA9PiAoXG4gICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgIGtleT17cGVybWlzc2lvbk5hbWV9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29ubmVjdGVkLWFjY291bnRzLXBlcm1pc3Npb25zX19saXN0LWl0ZW1cIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPENoZWNrQm94XG4gICAgICAgICAgICAgICAgICBjaGVja2VkXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgaWQ9e3Blcm1pc3Npb25OYW1lfVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29ubmVjdGVkLWFjY291bnRzLXBlcm1pc3Npb25zX19jaGVja2JveFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj17cGVybWlzc2lvbk5hbWV9Pnt0KHBlcm1pc3Npb25OYW1lKX08L2xhYmVsPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgU1RBVFVTX0NPTk5FQ1RFRCA9ICdTVEFUVVNfQ09OTkVDVEVEJztcbmV4cG9ydCBjb25zdCBTVEFUVVNfQ09OTkVDVEVEX1RPX0FOT1RIRVJfQUNDT1VOVCA9XG4gICdTVEFUVVNfQ09OTkVDVEVEX1RPX0FOT1RIRVJfQUNDT1VOVCc7XG5leHBvcnQgY29uc3QgU1RBVFVTX05PVF9DT05ORUNURUQgPSAnU1RBVFVTX05PVF9DT05ORUNURUQnO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdG8tY2xpcGJvYXJkJztcbmltcG9ydCB7IHNob3J0ZW5BZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcblxuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi4vLi4vdWkvdG9vbHRpcCc7XG5pbXBvcnQgQ29weUljb24gZnJvbSAnLi4vLi4vdWkvaWNvbi9jb3B5LWljb24uY29tcG9uZW50JztcbmltcG9ydCB7IHRvQ2hlY2tzdW1IZXhBZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvaGV4c3RyaW5nLXV0aWxzJztcbmltcG9ydCB7IFNFQ09ORCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdGltZSc7XG5cbmNsYXNzIFNlbGVjdGVkQWNjb3VudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRlID0ge1xuICAgIGNvcGllZDogZmFsc2UsXG4gIH07XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHNlbGVjdGVkSWRlbnRpdHk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmNvcHlUaW1lb3V0ID0gbnVsbDtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLmNvcHlUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5jb3B5VGltZW91dCk7XG4gICAgICB0aGlzLmNvcHlUaW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3QgeyBzZWxlY3RlZElkZW50aXR5IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNoZWNrc3VtbWVkQWRkcmVzcyA9IHRvQ2hlY2tzdW1IZXhBZGRyZXNzKHNlbGVjdGVkSWRlbnRpdHkuYWRkcmVzcyk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3RlZC1hY2NvdW50XCI+XG4gICAgICAgIDxUb29sdGlwXG4gICAgICAgICAgd3JhcHBlckNsYXNzTmFtZT1cInNlbGVjdGVkLWFjY291bnRfX3Rvb2x0aXAtd3JhcHBlclwiXG4gICAgICAgICAgcG9zaXRpb249XCJib3R0b21cIlxuICAgICAgICAgIHRpdGxlPXtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuY29waWVkID8gdCgnY29waWVkRXhjbGFtYXRpb24nKSA6IHQoJ2NvcHlUb0NsaXBib2FyZCcpXG4gICAgICAgICAgfVxuICAgICAgICA+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwic2VsZWN0ZWQtYWNjb3VudF9fY2xpY2thYmxlXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNvcGllZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgdGhpcy5jb3B5VGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgKCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGNvcGllZDogZmFsc2UgfSksXG4gICAgICAgICAgICAgICAgU0VDT05EICogMyxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgY29weVRvQ2xpcGJvYXJkKGNoZWNrc3VtbWVkQWRkcmVzcyk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VsZWN0ZWQtYWNjb3VudF9fbmFtZVwiPlxuICAgICAgICAgICAgICB7c2VsZWN0ZWRJZGVudGl0eS5uYW1lfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbGVjdGVkLWFjY291bnRfX2FkZHJlc3NcIj5cbiAgICAgICAgICAgICAge3Nob3J0ZW5BZGRyZXNzKGNoZWNrc3VtbWVkQWRkcmVzcyl9XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VsZWN0ZWQtYWNjb3VudF9fY29weVwiPlxuICAgICAgICAgICAgICAgIDxDb3B5SWNvbiBzaXplPXsxMX0gY29sb3I9XCIjOTg5YTliXCIgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RlZEFjY291bnQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgU0VWRVJJVElFUyB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJbmZvSWNvbih7IHNldmVyaXR5IH0pIHtcbiAgY29uc3QgY2xhc3NOYW1lID0gY2xhc3NuYW1lcygnaW5mby1pY29uJywge1xuICAgICdpbmZvLWljb24tLXN1Y2Nlc3MnOiBzZXZlcml0eSA9PT0gU0VWRVJJVElFUy5TVUNDRVNTLFxuICAgICdpbmZvLWljb24tLXdhcm5pbmcnOiBzZXZlcml0eSA9PT0gU0VWRVJJVElFUy5XQVJOSU5HLFxuICAgICdpbmZvLWljb24tLWRhbmdlcic6IHNldmVyaXR5ID09PSBTRVZFUklUSUVTLkRBTkdFUixcbiAgICAnaW5mby1pY29uLS1pbmZvJzogc2V2ZXJpdHkgPT09IFNFVkVSSVRJRVMuSU5GTyxcbiAgfSk7XG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICB3aWR0aD1cIjE2XCJcbiAgICAgIGhlaWdodD1cIjE2XCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgPlxuICAgICAgPHBhdGggZD1cIk03LjIgNS42SDguOFY0SDcuMlY1LjZaTTggMTQuNEM0LjQ3MiAxNC40IDEuNiAxMS41MjggMS42IDhDMS42IDQuNDcyIDQuNDcyIDEuNiA4IDEuNkMxMS41MjggMS42IDE0LjQgNC40NzIgMTQuNCA4QzE0LjQgMTEuNTI4IDExLjUyOCAxNC40IDggMTQuNFpNOCAwQzYuOTQ5NDMgMCA1LjkwOTE0IDAuMjA2OTI2IDQuOTM4NTMgMC42MDg5NjRDMy45Njc5MyAxLjAxMSAzLjA4NjAxIDEuNjAwMjggMi4zNDMxNSAyLjM0MzE1QzAuODQyODU1IDMuODQzNDQgMCA1Ljg3ODI3IDAgOEMwIDEwLjEyMTcgMC44NDI4NTUgMTIuMTU2NiAyLjM0MzE1IDEzLjY1NjlDMy4wODYwMSAxNC4zOTk3IDMuOTY3OTMgMTQuOTg5IDQuOTM4NTMgMTUuMzkxQzUuOTA5MTQgMTUuNzkzMSA2Ljk0OTQzIDE2IDggMTZDMTAuMTIxNyAxNiAxMi4xNTY2IDE1LjE1NzEgMTMuNjU2OSAxMy42NTY5QzE1LjE1NzEgMTIuMTU2NiAxNiAxMC4xMjE3IDE2IDhDMTYgNi45NDk0MyAxNS43OTMxIDUuOTA5MTQgMTUuMzkxIDQuOTM4NTNDMTQuOTg5IDMuOTY3OTMgMTQuMzk5NyAzLjA4NjAxIDEzLjY1NjkgMi4zNDMxNUMxMi45MTQgMS42MDAyOCAxMi4wMzIxIDEuMDExIDExLjA2MTUgMC42MDg5NjRDMTAuMDkwOSAwLjIwNjkyNiA5LjA1MDU4IDAgOCAwWk03LjIgMTJIOC44VjcuMkg3LjJWMTJaXCIgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cblxuSW5mb0ljb24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2V2ZXJpdHkgY2FuIGJlIDEgb2YgNCBzdGF0ZXM6J2RhbmdlcicsICd3YXJuaW5nJywgJ2luZm8nIG9yICdzdWNjZXNzJ1xuICAgKi9cbiAgc2V2ZXJpdHk6IFByb3BUeXBlcy5vbmVPZihPYmplY3QudmFsdWVzKFNFVkVSSVRJRVMpKSxcbn07XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi90b2tlbi1jZWxsJztcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFNlbmRSb3dXcmFwcGVyIGZyb20gJy4uL3NlbmQtcm93LXdyYXBwZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5kSGV4RGF0YVJvdyBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaW5FcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGF0YTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB1cGRhdGVTZW5kSGV4RGF0YTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIG9uSW5wdXQgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCB7IHVwZGF0ZVNlbmRIZXhEYXRhIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGRhdGEgPSBldmVudC50YXJnZXQudmFsdWUucmVwbGFjZSgvXFxuL2d1LCAnJykgfHwgbnVsbDtcbiAgICB1cGRhdGVTZW5kSGV4RGF0YShkYXRhKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBpbkVycm9yLCBkYXRhIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxTZW5kUm93V3JhcHBlclxuICAgICAgICBsYWJlbD17YCR7dCgnaGV4RGF0YScpfTpgfVxuICAgICAgICBzaG93RXJyb3I9e2luRXJyb3J9XG4gICAgICAgIGVycm9yVHlwZT1cImFtb3VudFwiXG4gICAgICA+XG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgIG9uSW5wdXQ9e3RoaXMub25JbnB1dH1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17dCgnb3B0aW9uYWwnKX1cbiAgICAgICAgICBjbGFzc05hbWU9XCJzZW5kLXYyX19oZXgtZGF0YV9faW5wdXRcIlxuICAgICAgICAgIGRlZmF1bHRWYWx1ZT17ZGF0YSB8fCAnJ31cbiAgICAgICAgLz5cbiAgICAgIDwvU2VuZFJvd1dyYXBwZXI+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgU2VuZFJvd1dyYXBwZXIgZnJvbSAnLi4vc2VuZC1yb3ctd3JhcHBlcic7XG5pbXBvcnQgQWR2YW5jZWRHYXNJbnB1dHMgZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9hcHAvZ2FzLWN1c3RvbWl6YXRpb24vYWR2YW5jZWQtZ2FzLWlucHV0cyc7XG5pbXBvcnQgeyBHQVNfSU5QVVRfTU9ERVMgfSBmcm9tICcuLi8uLi8uLi8uLi9kdWNrcy9zZW5kJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VuZEdhc1JvdyBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdXBkYXRlR2FzUHJpY2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIHVwZGF0ZUdhc0xpbWl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBnYXNJbnB1dE1vZGU6IFByb3BUeXBlcy5vbmVPZihPYmplY3QudmFsdWVzKEdBU19JTlBVVF9NT0RFUykpLFxuICAgIGdhc1ByaWNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGdhc0xpbWl0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGluc3VmZmljaWVudEJhbGFuY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIG1pbmltdW1HYXNMaW1pdDogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHRyYWNrRXZlbnQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1cGRhdGVHYXNQcmljZSxcbiAgICAgIHVwZGF0ZUdhc0xpbWl0LFxuICAgICAgZ2FzUHJpY2UsXG4gICAgICBnYXNMaW1pdCxcbiAgICAgIGluc3VmZmljaWVudEJhbGFuY2UsXG4gICAgICBtaW5pbXVtR2FzTGltaXQsXG4gICAgICBnYXNJbnB1dE1vZGUsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoZ2FzSW5wdXRNb2RlICE9PSBHQVNfSU5QVVRfTU9ERVMuSU5MSU5FKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNlbmRSb3dXcmFwcGVyPlxuICAgICAgICA8QWR2YW5jZWRHYXNJbnB1dHNcbiAgICAgICAgICB1cGRhdGVDdXN0b21HYXNQcmljZT17dXBkYXRlR2FzUHJpY2V9XG4gICAgICAgICAgdXBkYXRlQ3VzdG9tR2FzTGltaXQ9e3VwZGF0ZUdhc0xpbWl0fVxuICAgICAgICAgIGN1c3RvbUdhc1ByaWNlPXtnYXNQcmljZX1cbiAgICAgICAgICBjdXN0b21HYXNMaW1pdD17Z2FzTGltaXR9XG4gICAgICAgICAgaW5zdWZmaWNpZW50QmFsYW5jZT17aW5zdWZmaWNpZW50QmFsYW5jZX1cbiAgICAgICAgICBtaW5pbXVtR2FzTGltaXQ9e21pbmltdW1HYXNMaW1pdH1cbiAgICAgICAgICBjdXN0b21QcmljZUlzU2FmZVxuICAgICAgICAgIGlzU3BlZWRVcD17ZmFsc2V9XG4gICAgICAgIC8+XG4gICAgICA8L1NlbmRSb3dXcmFwcGVyPlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi9wb3BvdmVyJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9uJztcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnLi4vdGV4dC1maWVsZCc7XG5cbmltcG9ydCB7IEkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvaTE4bic7XG5cbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vaWRlbnRpY29uL2lkZW50aWNvbi5jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBVcGRhdGVOaWNrbmFtZVBvcG92ZXIoe1xuICBuaWNrbmFtZSxcbiAgYWRkcmVzcyxcbiAgb25BZGQsXG4gIG1lbW8sXG4gIG9uQ2xvc2UsXG59KSB7XG4gIGNvbnN0IHQgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KTtcblxuICBjb25zdCBbbmlja25hbWVJbnB1dCwgc2V0Tmlja25hbWVJbnB1dF0gPSB1c2VTdGF0ZShuaWNrbmFtZSk7XG4gIGNvbnN0IFttZW1vSW5wdXQsIHNldE1lbW9JbnB1dF0gPSB1c2VTdGF0ZShtZW1vKTtcblxuICBjb25zdCBoYW5kbGVOaWNrbmFtZUNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIHNldE5pY2tuYW1lSW5wdXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVNZW1vQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgc2V0TWVtb0lucHV0KGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2xvc2VQb3BvdmVyID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIG9uQ2xvc2UoKTtcbiAgfSwgW29uQ2xvc2VdKTtcblxuICBjb25zdCBvbkNhbmNlbCA9ICgpID0+IHtcbiAgICBvbkNsb3NlKCk7XG4gIH07XG5cbiAgY29uc3Qgb25TdWJtaXQgPSAoKSA9PiB7XG4gICAgb25BZGQoYWRkcmVzcywgbmlja25hbWVJbnB1dCwgbWVtb0lucHV0KTtcbiAgICBvbkNsb3NlKCk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8UG9wb3ZlclxuICAgICAgdGl0bGU9e25pY2tuYW1lID8gdCgnZWRpdEFkZHJlc3NOaWNrbmFtZScpIDogdCgnYWRkQU5pY2tuYW1lJyl9XG4gICAgICBvbkNsb3NlPXtjbG9zZVBvcG92ZXJ9XG4gICAgICBjbGFzc05hbWU9XCJ1cGRhdGUtbmlja25hbWVfX3dyYXBwZXJcIlxuICAgICAgZm9vdGVyPXtcbiAgICAgICAgPD5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ1cGRhdGUtbmlja25hbWVfX2NhbmNlbFwiXG4gICAgICAgICAgICB0eXBlPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2FuY2VsfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCdjYW5jZWwnKX1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ1cGRhdGUtbmlja25hbWVfX3NhdmVcIlxuICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgb25DbGljaz17b25TdWJtaXR9XG4gICAgICAgICAgICBkaXNhYmxlZD17IW5pY2tuYW1lSW5wdXR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ3NhdmUnKX1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC8+XG4gICAgICB9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cGRhdGUtbmlja25hbWVfX2NvbnRlbnRcIj5cbiAgICAgICAgPElkZW50aWNvblxuICAgICAgICAgIGNsYXNzTmFtZT1cInVwZGF0ZS1uaWNrbmFtZV9fY29udGVudF9faW5kZW50aWNvblwiXG4gICAgICAgICAgYWRkcmVzcz17YWRkcmVzc31cbiAgICAgICAgICBkaWFtZXRlcj17MzZ9XG4gICAgICAgIC8+XG4gICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJ1cGRhdGUtbmlja25hbWVfX2NvbnRlbnRfX2xhYmVsLS1jYXBpdGFsaXplZFwiPlxuICAgICAgICAgIHt0KCdhZGRyZXNzJyl9XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBkYXRlLW5pY2tuYW1lX19jb250ZW50X19hZGRyZXNzXCI+e2FkZHJlc3N9PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBkYXRlLW5pY2tuYW1lX19jb250ZW50X19uaWNrbmFtZS1sYWJlbFwiPlxuICAgICAgICAgIHt0KCduaWNrbmFtZScpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgIGNsYXNzTmFtZT1cInVwZGF0ZS1uaWNrbmFtZV9fY29udGVudF9fdGV4dC1maWVsZFwiXG4gICAgICAgICAgdmFsdWU9e25pY2tuYW1lSW5wdXR9XG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZU5pY2tuYW1lQ2hhbmdlfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXt0KCdhZGRBTmlja25hbWUnKX1cbiAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cGRhdGUtbmlja25hbWVfX2NvbnRlbnRfX2xhYmVsLS1jYXBpdGFsaXplZFwiPlxuICAgICAgICAgIHt0KCdtZW1vJyl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIGlkPVwibWVtb1wiXG4gICAgICAgICAgdmFsdWU9e21lbW9JbnB1dH1cbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlTWVtb0NoYW5nZX1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17dCgnYWRkTWVtbycpfVxuICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgIG1hcmdpbj1cImRlbnNlXCJcbiAgICAgICAgICBtdWx0aWxpbmVcbiAgICAgICAgICByb3dzPXszfVxuICAgICAgICAgIGNsYXNzZXM9e3tcbiAgICAgICAgICAgIGlucHV0TXVsdGlsaW5lOiAndXBkYXRlLW5pY2tuYW1lX19jb250ZW50X190ZXh0LWFyZWEnLFxuICAgICAgICAgICAgaW5wdXRSb290OiAndXBkYXRlLW5pY2tuYW1lX19jb250ZW50X190ZXh0LWFyZWEtd3JhcHBlcicsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvUG9wb3Zlcj5cbiAgKTtcbn1cblxuVXBkYXRlTmlja25hbWVQb3BvdmVyLnByb3BUeXBlcyA9IHtcbiAgbmlja25hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG1lbW86IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQWRkOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG59O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vbmlja25hbWUtcG9wb3Zlci5jb21wb25lbnQnO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgU2VuZFJvd1dyYXBwZXIgZnJvbSAnLi4vc2VuZC1yb3ctd3JhcHBlcic7XG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvaWRlbnRpY29uL2lkZW50aWNvbi5jb21wb25lbnQnO1xuaW1wb3J0IFRva2VuQmFsYW5jZSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL3Rva2VuLWJhbGFuY2UnO1xuaW1wb3J0IFVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5RGlzcGxheSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL2FwcC91c2VyLXByZWZlcmVuY2VkLWN1cnJlbmN5LWRpc3BsYXknO1xuaW1wb3J0IHsgRVJDMjAsIFBSSU1BUlkgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9jb21tb24nO1xuaW1wb3J0IHsgQVNTRVRfVFlQRVMgfSBmcm9tICcuLi8uLi8uLi8uLi9kdWNrcy9zZW5kJztcbmltcG9ydCB7IGlzRXF1YWxDYXNlSW5zZW5zaXRpdmUgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL3V0aWxzL3V0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5kQXNzZXRSb3cgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHRva2VuczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBhZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBkZWNpbWFsczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgICAgICBzeW1ib2w6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGltYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgfSksXG4gICAgKS5pc1JlcXVpcmVkLFxuICAgIGFjY291bnRzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc2VsZWN0ZWRBZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc2VuZEFzc2V0QWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB1cGRhdGVTZW5kQXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgbmF0aXZlQ3VycmVuY3k6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbmF0aXZlQ3VycmVuY3lJbWFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIG1ldHJpY3NFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgaXNTaG93aW5nRHJvcGRvd246IGZhbHNlLFxuICAgIHNlbmRhYmxlVG9rZW5zOiBbXSxcbiAgfTtcblxuICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCBzZW5kYWJsZVRva2VucyA9IHRoaXMucHJvcHMudG9rZW5zLmZpbHRlcigodG9rZW4pID0+ICF0b2tlbi5pc0VSQzcyMSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlbmRhYmxlVG9rZW5zIH0pO1xuICB9XG5cbiAgb3BlbkRyb3Bkb3duID0gKCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGlzU2hvd2luZ0Ryb3Bkb3duOiB0cnVlIH0pO1xuXG4gIGNsb3NlRHJvcGRvd24gPSAoKSA9PiB0aGlzLnNldFN0YXRlKHsgaXNTaG93aW5nRHJvcGRvd246IGZhbHNlIH0pO1xuXG4gIHNlbGVjdFRva2VuID0gKHR5cGUsIHRva2VuKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgIHtcbiAgICAgICAgaXNTaG93aW5nRHJvcGRvd246IGZhbHNlLFxuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgdGhpcy5jb250ZXh0Lm1ldHJpY3NFdmVudCh7XG4gICAgICAgICAgZXZlbnRPcHRzOiB7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ1RyYW5zYWN0aW9ucycsXG4gICAgICAgICAgICBhY3Rpb246ICdTZW5kIFNjcmVlbicsXG4gICAgICAgICAgICBuYW1lOiAnVXNlciBjbGlja3MgXCJBc3NldHNcIiBkcm9wZG93bicsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjdXN0b21WYXJpYWJsZXM6IHtcbiAgICAgICAgICAgIGFzc2V0U2VsZWN0ZWQ6IHRva2VuID8gRVJDMjAgOiB0aGlzLnByb3BzLm5hdGl2ZUN1cnJlbmN5LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnByb3BzLnVwZGF0ZVNlbmRBc3NldCh7XG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBkZXRhaWxzOiB0eXBlID09PSBBU1NFVF9UWVBFUy5OQVRJVkUgPyBudWxsIDogdG9rZW4sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcblxuICAgIHJldHVybiAoXG4gICAgICA8U2VuZFJvd1dyYXBwZXIgbGFiZWw9e2Ake3QoJ2Fzc2V0Jyl9OmB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmQtdjJfX2Fzc2V0LWRyb3Bkb3duXCI+XG4gICAgICAgICAge3RoaXMucmVuZGVyU2VuZFRva2VuKCl9XG4gICAgICAgICAge3RoaXMuc3RhdGUuc2VuZGFibGVUb2tlbnMubGVuZ3RoID4gMFxuICAgICAgICAgICAgPyB0aGlzLnJlbmRlckFzc2V0RHJvcGRvd24oKVxuICAgICAgICAgICAgOiBudWxsfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvU2VuZFJvd1dyYXBwZXI+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclNlbmRUb2tlbigpIHtcbiAgICBjb25zdCB7IHNlbmRBc3NldEFkZHJlc3MgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdG9rZW4gPSB0aGlzLnByb3BzLnRva2Vucy5maW5kKCh7IGFkZHJlc3MgfSkgPT5cbiAgICAgIGlzRXF1YWxDYXNlSW5zZW5zaXRpdmUoYWRkcmVzcywgc2VuZEFzc2V0QWRkcmVzcyksXG4gICAgKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJzZW5kLXYyX19hc3NldC1kcm9wZG93bl9faW5wdXQtd3JhcHBlclwiXG4gICAgICAgIG9uQ2xpY2s9e3RoaXMub3BlbkRyb3Bkb3dufVxuICAgICAgPlxuICAgICAgICB7dG9rZW4gPyB0aGlzLnJlbmRlckFzc2V0KHRva2VuKSA6IHRoaXMucmVuZGVyTmF0aXZlQ3VycmVuY3koKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJBc3NldERyb3Bkb3duKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnN0YXRlLmlzU2hvd2luZ0Ryb3Bkb3duICYmIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzZW5kLXYyX19hc3NldC1kcm9wZG93bl9fY2xvc2UtYXJlYVwiXG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmNsb3NlRHJvcGRvd259XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmQtdjJfX2Fzc2V0LWRyb3Bkb3duX19saXN0XCI+XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJOYXRpdmVDdXJyZW5jeSh0cnVlKX1cbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNlbmRhYmxlVG9rZW5zLm1hcCgodG9rZW4pID0+XG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyQXNzZXQodG9rZW4sIHRydWUpLFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlck5hdGl2ZUN1cnJlbmN5KGluc2lkZURyb3Bkb3duID0gZmFsc2UpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7XG4gICAgICBhY2NvdW50cyxcbiAgICAgIHNlbGVjdGVkQWRkcmVzcyxcbiAgICAgIG5hdGl2ZUN1cnJlbmN5LFxuICAgICAgbmF0aXZlQ3VycmVuY3lJbWFnZSxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGJhbGFuY2VWYWx1ZSA9IGFjY291bnRzW3NlbGVjdGVkQWRkcmVzc11cbiAgICAgID8gYWNjb3VudHNbc2VsZWN0ZWRBZGRyZXNzXS5iYWxhbmNlXG4gICAgICA6ICcnO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtcbiAgICAgICAgICB0aGlzLnN0YXRlLnNlbmRhYmxlVG9rZW5zLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gJ3NlbmQtdjJfX2Fzc2V0LWRyb3Bkb3duX19hc3NldCdcbiAgICAgICAgICAgIDogJ3NlbmQtdjJfX2Fzc2V0LWRyb3Bkb3duX19zaW5nbGUtYXNzZXQnXG4gICAgICAgIH1cbiAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5zZWxlY3RUb2tlbihBU1NFVF9UWVBFUy5OQVRJVkUpfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmQtdjJfX2Fzc2V0LWRyb3Bkb3duX19hc3NldC1pY29uXCI+XG4gICAgICAgICAgPElkZW50aWNvblxuICAgICAgICAgICAgZGlhbWV0ZXI9ezM2fVxuICAgICAgICAgICAgaW1hZ2U9e25hdGl2ZUN1cnJlbmN5SW1hZ2V9XG4gICAgICAgICAgICBhZGRyZXNzPXtuYXRpdmVDdXJyZW5jeX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZW5kLXYyX19hc3NldC1kcm9wZG93bl9fYXNzZXQtZGF0YVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZC12Ml9fYXNzZXQtZHJvcGRvd25fX3N5bWJvbFwiPlxuICAgICAgICAgICAge25hdGl2ZUN1cnJlbmN5fVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZC12Ml9fYXNzZXQtZHJvcGRvd25fX25hbWVcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInNlbmQtdjJfX2Fzc2V0LWRyb3Bkb3duX19uYW1lX19sYWJlbFwiPlxuICAgICAgICAgICAgICB7YCR7dCgnYmFsYW5jZScpfTpgfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPFVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5RGlzcGxheVxuICAgICAgICAgICAgICB2YWx1ZT17YmFsYW5jZVZhbHVlfVxuICAgICAgICAgICAgICB0eXBlPXtQUklNQVJZfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHshaW5zaWRlRHJvcGRvd24gJiYgdGhpcy5zdGF0ZS5zZW5kYWJsZVRva2Vucy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1jYXJldC1kb3duIGZhLWxnIHNlbmQtdjJfX2Fzc2V0LWRyb3Bkb3duX19jYXJldFwiIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQXNzZXQodG9rZW4sIGluc2lkZURyb3Bkb3duID0gZmFsc2UpIHtcbiAgICBjb25zdCB7IGFkZHJlc3MsIHN5bWJvbCwgaW1hZ2UgfSA9IHRva2VuO1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAga2V5PXthZGRyZXNzfVxuICAgICAgICBjbGFzc05hbWU9XCJzZW5kLXYyX19hc3NldC1kcm9wZG93bl9fYXNzZXRcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnNlbGVjdFRva2VuKEFTU0VUX1RZUEVTLlRPS0VOLCB0b2tlbil9XG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZC12Ml9fYXNzZXQtZHJvcGRvd25fX2Fzc2V0LWljb25cIj5cbiAgICAgICAgICA8SWRlbnRpY29uIGFkZHJlc3M9e2FkZHJlc3N9IGRpYW1ldGVyPXszNn0gaW1hZ2U9e2ltYWdlfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZW5kLXYyX19hc3NldC1kcm9wZG93bl9fYXNzZXQtZGF0YVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZC12Ml9fYXNzZXQtZHJvcGRvd25fX3N5bWJvbFwiPntzeW1ib2x9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZW5kLXYyX19hc3NldC1kcm9wZG93bl9fbmFtZVwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2VuZC12Ml9fYXNzZXQtZHJvcGRvd25fX25hbWVfX2xhYmVsXCI+XG4gICAgICAgICAgICAgIHtgJHt0KCdiYWxhbmNlJyl9OmB9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8VG9rZW5CYWxhbmNlIHRva2VuPXt0b2tlbn0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHshaW5zaWRlRHJvcGRvd24gJiYgKFxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNhcmV0LWRvd24gZmEtbGcgc2VuZC12Ml9fYXNzZXQtZHJvcGRvd25fX2NhcmV0XCIgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFNlbmRSb3dXcmFwcGVyIGZyb20gJy4uL3NlbmQtcm93LXdyYXBwZXInO1xuaW1wb3J0IFVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5SW5wdXQgZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9hcHAvdXNlci1wcmVmZXJlbmNlZC1jdXJyZW5jeS1pbnB1dCc7XG5pbXBvcnQgVXNlclByZWZlcmVuY2VkVG9rZW5JbnB1dCBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL2FwcC91c2VyLXByZWZlcmVuY2VkLXRva2VuLWlucHV0JztcbmltcG9ydCB7IEFTU0VUX1RZUEVTIH0gZnJvbSAnLi4vLi4vLi4vLi4vZHVja3Mvc2VuZCc7XG5pbXBvcnQgQW1vdW50TWF4QnV0dG9uIGZyb20gJy4vYW1vdW50LW1heC1idXR0b24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5kQW1vdW50Um93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBhbW91bnQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaW5FcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgYXNzZXQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdXBkYXRlU2VuZEFtb3VudDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBoYW5kbGVDaGFuZ2UgPSAobmV3QW1vdW50KSA9PiB7XG4gICAgdGhpcy5wcm9wcy51cGRhdGVTZW5kQW1vdW50KG5ld0Ftb3VudCk7XG4gIH07XG5cbiAgcmVuZGVySW5wdXQoKSB7XG4gICAgY29uc3QgeyBhbW91bnQsIGluRXJyb3IsIGFzc2V0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIGFzc2V0LnR5cGUgPT09IEFTU0VUX1RZUEVTLlRPS0VOID8gKFxuICAgICAgPFVzZXJQcmVmZXJlbmNlZFRva2VuSW5wdXRcbiAgICAgICAgZXJyb3I9e2luRXJyb3J9XG4gICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgdG9rZW49e2Fzc2V0LmRldGFpbHN9XG4gICAgICAgIHZhbHVlPXthbW91bnR9XG4gICAgICAvPlxuICAgICkgOiAoXG4gICAgICA8VXNlclByZWZlcmVuY2VkQ3VycmVuY3lJbnB1dFxuICAgICAgICBlcnJvcj17aW5FcnJvcn1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICB2YWx1ZT17YW1vdW50fVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaW5FcnJvciB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8U2VuZFJvd1dyYXBwZXJcbiAgICAgICAgbGFiZWw9e2Ake3RoaXMuY29udGV4dC50KCdhbW91bnQnKX06YH1cbiAgICAgICAgc2hvd0Vycm9yPXtpbkVycm9yfVxuICAgICAgICBlcnJvclR5cGU9XCJhbW91bnRcIlxuICAgICAgPlxuICAgICAgICA8QW1vdW50TWF4QnV0dG9uIGluRXJyb3I9e2luRXJyb3J9IC8+XG4gICAgICAgIHt0aGlzLnJlbmRlcklucHV0KCl9XG4gICAgICA8L1NlbmRSb3dXcmFwcGVyPlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IElkZW50aWNvbiBmcm9tICcuLi8uLi91aS9pZGVudGljb24nO1xuaW1wb3J0IEFjY291bnRNaXNtYXRjaFdhcm5pbmcgZnJvbSAnLi4vLi4vdWkvYWNjb3VudC1taXNtYXRjaC13YXJuaW5nL2FjY291bnQtbWlzbWF0Y2gtd2FybmluZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgdG9DaGVja3N1bUhleEFkZHJlc3MgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9oZXhzdHJpbmctdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBY2NvdW50TGlzdEl0ZW0oe1xuICBhY2NvdW50LFxuICBjbGFzc05hbWUsXG4gIGRpc3BsYXlBZGRyZXNzID0gZmFsc2UsXG4gIGhhbmRsZUNsaWNrLFxuICBpY29uID0gbnVsbCxcbn0pIHtcbiAgY29uc3QgeyBuYW1lLCBhZGRyZXNzLCBiYWxhbmNlIH0gPSBhY2NvdW50IHx8IHt9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtgYWNjb3VudC1saXN0LWl0ZW0gJHtjbGFzc05hbWV9YH1cbiAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNsaWNrPy4oeyBuYW1lLCBhZGRyZXNzLCBiYWxhbmNlIH0pfVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWNjb3VudC1saXN0LWl0ZW1fX3RvcC1yb3dcIj5cbiAgICAgICAgPElkZW50aWNvblxuICAgICAgICAgIGFkZHJlc3M9e2FkZHJlc3N9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYWNjb3VudC1saXN0LWl0ZW1fX2lkZW50aWNvblwiXG4gICAgICAgICAgZGlhbWV0ZXI9ezE4fVxuICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjY291bnQtbGlzdC1pdGVtX19hY2NvdW50LW5hbWVcIj57bmFtZSB8fCBhZGRyZXNzfTwvZGl2PlxuICAgICAgICB7aWNvbiA/IDxkaXYgY2xhc3NOYW1lPVwiYWNjb3VudC1saXN0LWl0ZW1fX2ljb25cIj57aWNvbn08L2Rpdj4gOiBudWxsfVxuICAgICAgICA8QWNjb3VudE1pc21hdGNoV2FybmluZyBhZGRyZXNzPXthZGRyZXNzfSAvPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHtkaXNwbGF5QWRkcmVzcyAmJiBuYW1lICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY2NvdW50LWxpc3QtaXRlbV9fYWNjb3VudC1hZGRyZXNzXCI+XG4gICAgICAgICAge3RvQ2hlY2tzdW1IZXhBZGRyZXNzKGFkZHJlc3MpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbkFjY291bnRMaXN0SXRlbS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBbiBhY2NvdW50IG9iamVjdCB0aGF0IGhhcyBuYW1lLCBhZGRyZXNzLCBhbmQgYmFsYW5jZSBkYXRhXG4gICAqL1xuICBhY2NvdW50OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBiYWxhbmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH0pLFxuICAvKipcbiAgICogQWRkaXRpb25hbCBjbGFzc05hbWUgdG8gYWRkIHRvIHRoZSByb290IGRpdiBlbGVtZW50IG9mIEFjY291bnRMaXN0SXRlbVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogRGlzcGxheSB0aGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBvYmplY3RcbiAgICovXG4gIGRpc3BsYXlBZGRyZXNzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBvbkNsaWNrIGhhbmRsZXIgb2YgdGhlIEFjY291bnRMaXN0SXRlbVxuICAgKi9cbiAgaGFuZGxlQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogUGFzcyBpY29uIGNvbXBvbmVudCB0byBiZSBkaXNwbGF5ZWQuIEN1cnJlbnRseSBub3QgdXNlZFxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG59O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vY29uZmlybS1wYWdlLWNvbnRhaW5lci1jb250ZW50LmNvbXBvbmVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENvbmZpcm1QYWdlQ29udGFpbmVyU3VtbWFyeSB9IGZyb20gJy4vY29uZmlybS1wYWdlLWNvbnRhaW5lci1zdW1tYXJ5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ29uZmlybVBhZ2VDb250YWluZXJXYXJuaW5nIH0gZnJvbSAnLi9jb25maXJtLXBhZ2UtY29udGFpbmVyLXdhcm5pbmcnO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vc2lnbmF0dXJlLXJlcXVlc3QtaGVhZGVyLmNvbXBvbmVudCc7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9zaWduYXR1cmUtcmVxdWVzdC1mb290ZXIuY29tcG9uZW50JztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3NpZ25hdHVyZS1yZXF1ZXN0LW1lc3NhZ2UuY29tcG9uZW50JztcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuSW5zcGVjdG9yID0gZXhwb3J0cy5PYmplY3ROYW1lID0gZXhwb3J0cy5PYmplY3RWYWx1ZSA9IGV4cG9ydHMuT2JqZWN0Um9vdExhYmVsID0gZXhwb3J0cy5PYmplY3RMYWJlbCA9IGV4cG9ydHMuRE9NSW5zcGVjdG9yID0gZXhwb3J0cy5UYWJsZUluc3BlY3RvciA9IGV4cG9ydHMuT2JqZWN0SW5zcGVjdG9yID0gZXhwb3J0cy5jaHJvbWVEYXJrID0gZXhwb3J0cy5jaHJvbWVMaWdodCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF90aGVtZXMgPSByZXF1aXJlKCcuL3N0eWxlcy90aGVtZXMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjaHJvbWVMaWdodCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF90aGVtZXMuY2hyb21lTGlnaHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjaHJvbWVEYXJrJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3RoZW1lcy5jaHJvbWVEYXJrO1xuICB9XG59KTtcblxudmFyIF9PYmplY3RJbnNwZWN0b3IyID0gcmVxdWlyZSgnLi9vYmplY3QtaW5zcGVjdG9yL09iamVjdEluc3BlY3RvcicpO1xuXG52YXIgX09iamVjdEluc3BlY3RvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PYmplY3RJbnNwZWN0b3IyKTtcblxudmFyIF9UYWJsZUluc3BlY3RvcjIgPSByZXF1aXJlKCcuL3RhYmxlLWluc3BlY3Rvci9UYWJsZUluc3BlY3RvcicpO1xuXG52YXIgX1RhYmxlSW5zcGVjdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhYmxlSW5zcGVjdG9yMik7XG5cbnZhciBfRE9NSW5zcGVjdG9yMiA9IHJlcXVpcmUoJy4vZG9tLWluc3BlY3Rvci9ET01JbnNwZWN0b3InKTtcblxudmFyIF9ET01JbnNwZWN0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRE9NSW5zcGVjdG9yMik7XG5cbnZhciBfT2JqZWN0TGFiZWwyID0gcmVxdWlyZSgnLi9vYmplY3QtaW5zcGVjdG9yL09iamVjdExhYmVsJyk7XG5cbnZhciBfT2JqZWN0TGFiZWwzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2JqZWN0TGFiZWwyKTtcblxudmFyIF9PYmplY3RSb290TGFiZWwyID0gcmVxdWlyZSgnLi9vYmplY3QtaW5zcGVjdG9yL09iamVjdFJvb3RMYWJlbCcpO1xuXG52YXIgX09iamVjdFJvb3RMYWJlbDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PYmplY3RSb290TGFiZWwyKTtcblxudmFyIF9PYmplY3RWYWx1ZTIgPSByZXF1aXJlKCcuL29iamVjdC9PYmplY3RWYWx1ZScpO1xuXG52YXIgX09iamVjdFZhbHVlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09iamVjdFZhbHVlMik7XG5cbnZhciBfT2JqZWN0TmFtZTIgPSByZXF1aXJlKCcuL29iamVjdC9PYmplY3ROYW1lJyk7XG5cbnZhciBfT2JqZWN0TmFtZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PYmplY3ROYW1lMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfaXNEb20gPSByZXF1aXJlKCdpcy1kb20nKTtcblxudmFyIF9pc0RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0RvbSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuT2JqZWN0SW5zcGVjdG9yID0gX09iamVjdEluc3BlY3RvcjMuZGVmYXVsdDtcbmV4cG9ydHMuVGFibGVJbnNwZWN0b3IgPSBfVGFibGVJbnNwZWN0b3IzLmRlZmF1bHQ7XG5leHBvcnRzLkRPTUluc3BlY3RvciA9IF9ET01JbnNwZWN0b3IzLmRlZmF1bHQ7XG5leHBvcnRzLk9iamVjdExhYmVsID0gX09iamVjdExhYmVsMy5kZWZhdWx0O1xuZXhwb3J0cy5PYmplY3RSb290TGFiZWwgPSBfT2JqZWN0Um9vdExhYmVsMy5kZWZhdWx0O1xuZXhwb3J0cy5PYmplY3RWYWx1ZSA9IF9PYmplY3RWYWx1ZTMuZGVmYXVsdDtcbmV4cG9ydHMuT2JqZWN0TmFtZSA9IF9PYmplY3ROYW1lMy5kZWZhdWx0O1xuXG4vLyBXcmFwcGluZyB0aGUgaW5zcGVjdG9yc1xuXG52YXIgSW5zcGVjdG9yID0gZnVuY3Rpb24gSW5zcGVjdG9yKF9yZWYpIHtcbiAgdmFyIF9yZWYkdGFibGUgPSBfcmVmLnRhYmxlLFxuICAgICAgdGFibGUgPSBfcmVmJHRhYmxlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkdGFibGUsXG4gICAgICBkYXRhID0gX3JlZi5kYXRhLFxuICAgICAgcmVzdCA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9yZWYsIFsndGFibGUnLCAnZGF0YSddKTtcblxuICBpZiAodGFibGUpIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RhYmxlSW5zcGVjdG9yMy5kZWZhdWx0LCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHsgZGF0YTogZGF0YSB9LCByZXN0KSk7XG4gIH1cblxuICBpZiAoKDAsIF9pc0RvbTIuZGVmYXVsdCkoZGF0YSkpIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRE9NSW5zcGVjdG9yMy5kZWZhdWx0LCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHsgZGF0YTogZGF0YSB9LCByZXN0KSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PYmplY3RJbnNwZWN0b3IzLmRlZmF1bHQsICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoeyBkYXRhOiBkYXRhIH0sIHJlc3QpKTtcbn07XG5cbkluc3BlY3Rvci5wcm9wVHlwZXMgPSB7XG4gIGRhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuICBuYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgdGFibGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufTtcblxuZXhwb3J0cy5JbnNwZWN0b3IgPSBJbnNwZWN0b3I7XG5leHBvcnRzLmRlZmF1bHQgPSBJbnNwZWN0b3I7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuY29uc3QgRGlzY2xvc3VyZSA9ICh7IGNoaWxkcmVuLCB0aXRsZSwgc2l6ZSB9KSA9PiB7XG4gIGNvbnN0IGRpc2Nsb3N1cmVGb290ZXJFbCA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHNjcm9sbFRvQm90dG9tID0gKCkgPT4ge1xuICAgIGRpc2Nsb3N1cmVGb290ZXJFbCAmJlxuICAgICAgZGlzY2xvc3VyZUZvb3RlckVsLmN1cnJlbnQgJiZcbiAgICAgIGRpc2Nsb3N1cmVGb290ZXJFbC5jdXJyZW50LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIHNjcm9sbFRvQm90dG9tKCk7XG4gICAgfVxuICB9LCBbb3Blbl0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJkaXNjbG9zdXJlXCIgb25DbGljaz17KCkgPT4gc2V0T3Blbigoc3RhdGUpID0+ICFzdGF0ZSl9PlxuICAgICAge3RpdGxlID8gKFxuICAgICAgICA8ZGV0YWlscz5cbiAgICAgICAgICA8c3VtbWFyeSBjbGFzc05hbWU9XCJkaXNjbG9zdXJlX190aXRsZSBkaXNjbG9zdXJlX19zdW1tYXJ5IHR5cG9ncmFwaHktLXdlaWdodC1ib2xkIHR5cG9ncmFwaHktLWNvbG9yLWJsYWNrXCI+XG4gICAgICAgICAgICB7dGl0bGV9OnsnICd9XG4gICAgICAgICAgPC9zdW1tYXJ5PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdkaXNjbG9zdXJlX19jb250ZW50Jywgc2l6ZSl9PlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgcmVmPXtkaXNjbG9zdXJlRm9vdGVyRWx9IGNsYXNzTmFtZT1cImRpc2Nsb3N1cmVfX2Zvb3RlclwiPjwvZGl2PlxuICAgICAgICA8L2RldGFpbHM+XG4gICAgICApIDogKFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkRpc2Nsb3N1cmUucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNpemU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5EaXNjbG9zdXJlLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2l6ZTogJ25vcm1hbCcsXG4gIHRpdGxlOiBudWxsLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGlzY2xvc3VyZTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtcbiAgTEVER0VSX1RSQU5TUE9SVF9UWVBFUyxcbiAgTEVER0VSX1VTQl9WRU5ET1JfSUQsXG4gIFdFQkhJRF9DT05ORUNURURfU1RBVFVTRVMsXG4gIFRSQU5TUE9SVF9TVEFURVMsXG59IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvaGFyZHdhcmUtd2FsbGV0cyc7XG5pbXBvcnQge1xuICBQTEFURk9STV9GSVJFRk9YLFxuICBFTlZJUk9OTUVOVF9UWVBFX0ZVTExTQ1JFRU4sXG59IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcblxuaW1wb3J0IHtcbiAgc2V0TGVkZ2VyV2ViSGlkQ29ubmVjdGVkU3RhdHVzLFxuICBnZXRMZWRnZXJXZWJIaWRDb25uZWN0ZWRTdGF0dXMsXG4gIHNldExlZGdlclRyYW5zcG9ydFN0YXR1cyxcbiAgZ2V0TGVkZ2VyVHJhbnNwb3J0U3RhdHVzLFxufSBmcm9tICcuLi8uLi8uLi9kdWNrcy9hcHAvYXBwJztcblxuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vLi4vdWkvdHlwb2dyYXBoeS90eXBvZ3JhcGh5JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IHtcbiAgQ09MT1JTLFxuICBGT05UX1dFSUdIVCxcbiAgVFlQT0dSQVBIWSxcbn0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgRGlhbG9nIGZyb20gJy4uLy4uL3VpL2RpYWxvZyc7XG5pbXBvcnQge1xuICBnZXRQbGF0Zm9ybSxcbiAgZ2V0RW52aXJvbm1lbnRUeXBlLFxufSBmcm9tICcuLi8uLi8uLi8uLi9hcHAvc2NyaXB0cy9saWIvdXRpbCc7XG5pbXBvcnQgeyBnZXRMZWRnZXJUcmFuc3BvcnRUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZHVja3MvbWV0YW1hc2svbWV0YW1hc2snO1xuaW1wb3J0IHsgYXR0ZW1wdExlZGdlclRyYW5zcG9ydENyZWF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5cbmNvbnN0IHJlbmRlckluc3RydWN0aW9uU3RlcCA9ICh0ZXh0LCBzaG93ID0gdHJ1ZSwgY29sb3IgPSBDT0xPUlMuUFJJTUFSWTMpID0+IHtcbiAgcmV0dXJuIChcbiAgICBzaG93ICYmIChcbiAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgIGJveFByb3BzPXt7IG1hcmdpbjogMCB9fVxuICAgICAgICBjb2xvcj17Y29sb3J9XG4gICAgICAgIGZvbnRXZWlnaHQ9e0ZPTlRfV0VJR0hULkJPTER9XG4gICAgICAgIHZhcmlhbnQ9e1RZUE9HUkFQSFkuSDd9XG4gICAgICA+XG4gICAgICAgIHt0ZXh0fVxuICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExlZGdlckluc3RydWN0aW9uRmllbGQoeyBzaG93RGF0YUluc3RydWN0aW9uIH0pIHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICBjb25zdCB3ZWJIaWRDb25uZWN0ZWRTdGF0dXMgPSB1c2VTZWxlY3RvcihnZXRMZWRnZXJXZWJIaWRDb25uZWN0ZWRTdGF0dXMpO1xuICBjb25zdCBsZWRnZXJUcmFuc3BvcnRUeXBlID0gdXNlU2VsZWN0b3IoZ2V0TGVkZ2VyVHJhbnNwb3J0VHlwZSk7XG4gIGNvbnN0IHRyYW5zcG9ydFN0YXR1cyA9IHVzZVNlbGVjdG9yKGdldExlZGdlclRyYW5zcG9ydFN0YXR1cyk7XG4gIGNvbnN0IGVudmlyb25tZW50VHlwZSA9IGdldEVudmlyb25tZW50VHlwZSgpO1xuICBjb25zdCBlbnZpcm9ubWVudFR5cGVJc0Z1bGxTY3JlZW4gPVxuICAgIGVudmlyb25tZW50VHlwZSA9PT0gRU5WSVJPTk1FTlRfVFlQRV9GVUxMU0NSRUVOO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbENvbm5lY3RlZERldmljZUNoZWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBsZWRnZXJUcmFuc3BvcnRUeXBlID09PSBMRURHRVJfVFJBTlNQT1JUX1RZUEVTLldFQkhJRCAmJlxuICAgICAgICB3ZWJIaWRDb25uZWN0ZWRTdGF0dXMgIT09IFdFQkhJRF9DT05ORUNURURfU1RBVFVTRVMuQ09OTkVDVEVEXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgZGV2aWNlcyA9IGF3YWl0IHdpbmRvdy5uYXZpZ2F0b3IuaGlkLmdldERldmljZXMoKTtcbiAgICAgICAgY29uc3Qgd2ViSGlkSXNDb25uZWN0ZWQgPSBkZXZpY2VzLnNvbWUoXG4gICAgICAgICAgKGRldmljZSkgPT4gZGV2aWNlLnZlbmRvcklkID09PSBOdW1iZXIoTEVER0VSX1VTQl9WRU5ET1JfSUQpLFxuICAgICAgICApO1xuICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICBzZXRMZWRnZXJXZWJIaWRDb25uZWN0ZWRTdGF0dXMoXG4gICAgICAgICAgICB3ZWJIaWRJc0Nvbm5lY3RlZFxuICAgICAgICAgICAgICA/IFdFQkhJRF9DT05ORUNURURfU1RBVFVTRVMuQ09OTkVDVEVEXG4gICAgICAgICAgICAgIDogV0VCSElEX0NPTk5FQ1RFRF9TVEFUVVNFUy5OT1RfQ09OTkVDVEVELFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBkZXRlcm1pbmVUcmFuc3BvcnRTdGF0dXMgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIGxlZGdlclRyYW5zcG9ydFR5cGUgPT09IExFREdFUl9UUkFOU1BPUlRfVFlQRVMuV0VCSElEICYmXG4gICAgICAgIHdlYkhpZENvbm5lY3RlZFN0YXR1cyA9PT0gV0VCSElEX0NPTk5FQ1RFRF9TVEFUVVNFUy5DT05ORUNURUQgJiZcbiAgICAgICAgdHJhbnNwb3J0U3RhdHVzID09PSBUUkFOU1BPUlRfU1RBVEVTLk5PTkVcbiAgICAgICkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHRyYW5zcG9ydGVkQ3JlYXRlZCA9IGF3YWl0IGF0dGVtcHRMZWRnZXJUcmFuc3BvcnRDcmVhdGlvbigpO1xuICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgc2V0TGVkZ2VyVHJhbnNwb3J0U3RhdHVzKFxuICAgICAgICAgICAgICB0cmFuc3BvcnRlZENyZWF0ZWRcbiAgICAgICAgICAgICAgICA/IFRSQU5TUE9SVF9TVEFURVMuVkVSSUZJRURcbiAgICAgICAgICAgICAgICA6IFRSQU5TUE9SVF9TVEFURVMuVU5LTk9XTl9GQUlMVVJFLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaWYgKGUubWVzc2FnZS5tYXRjaCgnRmFpbGVkIHRvIG9wZW4gdGhlIGRldmljZScpKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgc2V0TGVkZ2VyVHJhbnNwb3J0U3RhdHVzKFRSQU5TUE9SVF9TVEFURVMuREVWSUNFX09QRU5fRkFJTFVSRSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZS5tZXNzYWdlLm1hdGNoKCd0aGUgZGV2aWNlIGlzIGFscmVhZHkgb3BlbicpKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChzZXRMZWRnZXJUcmFuc3BvcnRTdGF0dXMoVFJBTlNQT1JUX1NUQVRFUy5WRVJJRklFRCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgc2V0TGVkZ2VyVHJhbnNwb3J0U3RhdHVzKFRSQU5TUE9SVF9TVEFURVMuVU5LTk9XTl9GQUlMVVJFKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBkZXRlcm1pbmVUcmFuc3BvcnRTdGF0dXMoKTtcbiAgICBpbml0aWFsQ29ubmVjdGVkRGV2aWNlQ2hlY2soKTtcbiAgfSwgW2Rpc3BhdGNoLCBsZWRnZXJUcmFuc3BvcnRUeXBlLCB3ZWJIaWRDb25uZWN0ZWRTdGF0dXMsIHRyYW5zcG9ydFN0YXR1c10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRpc3BhdGNoKHNldExlZGdlclRyYW5zcG9ydFN0YXR1cyhUUkFOU1BPUlRfU1RBVEVTLk5PTkUpKTtcbiAgICB9O1xuICB9LCBbZGlzcGF0Y2hdKTtcblxuICBjb25zdCB1c2luZ0xlZGdlckxpdmUgPSBsZWRnZXJUcmFuc3BvcnRUeXBlID09PSBMRURHRVJfVFJBTlNQT1JUX1RZUEVTLkxJVkU7XG4gIGNvbnN0IHVzaW5nV2ViSElEID0gbGVkZ2VyVHJhbnNwb3J0VHlwZSA9PT0gTEVER0VSX1RSQU5TUE9SVF9UWVBFUy5XRUJISUQ7XG5cbiAgY29uc3QgaXNGaXJlZm94ID0gZ2V0UGxhdGZvcm0oKSA9PT0gUExBVEZPUk1fRklSRUZPWDtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0tZGV0YWlsLXJvd1wiPlxuICAgICAgICA8RGlhbG9nIHR5cGU9XCJtZXNzYWdlXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWRnZXItbGl2ZS1kaWFsb2dcIj5cbiAgICAgICAgICAgIHtyZW5kZXJJbnN0cnVjdGlvblN0ZXAodCgnbGVkZ2VyQ29ubmVjdGlvbkluc3RydWN0aW9uSGVhZGVyJykpfVxuICAgICAgICAgICAge3JlbmRlckluc3RydWN0aW9uU3RlcChcbiAgICAgICAgICAgICAgYC0gJHt0KCdsZWRnZXJDb25uZWN0aW9uSW5zdHJ1Y3Rpb25TdGVwT25lJyl9YCxcbiAgICAgICAgICAgICAgIWlzRmlyZWZveCAmJiB1c2luZ0xlZGdlckxpdmUsXG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3JlbmRlckluc3RydWN0aW9uU3RlcChcbiAgICAgICAgICAgICAgYC0gJHt0KCdsZWRnZXJDb25uZWN0aW9uSW5zdHJ1Y3Rpb25TdGVwVHdvJyl9YCxcbiAgICAgICAgICAgICAgIWlzRmlyZWZveCAmJiB1c2luZ0xlZGdlckxpdmUsXG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3JlbmRlckluc3RydWN0aW9uU3RlcChcbiAgICAgICAgICAgICAgYC0gJHt0KCdsZWRnZXJDb25uZWN0aW9uSW5zdHJ1Y3Rpb25TdGVwVGhyZWUnKX1gLFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtyZW5kZXJJbnN0cnVjdGlvblN0ZXAoXG4gICAgICAgICAgICAgIGAtICR7dCgnbGVkZ2VyQ29ubmVjdGlvbkluc3RydWN0aW9uU3RlcEZvdXInKX1gLFxuICAgICAgICAgICAgICBzaG93RGF0YUluc3RydWN0aW9uLFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtyZW5kZXJJbnN0cnVjdGlvblN0ZXAoXG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJsaW5rXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2FzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVudmlyb25tZW50VHlwZUlzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwucGxhdGZvcm0ub3BlbkV4dGVuc2lvbkluQnJvd3NlcihudWxsLCBudWxsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7dCgnbGVkZ2VyQ29ubmVjdGlvbkluc3RydWN0aW9uQ2xvc2VPdGhlckFwcHMnKX1cbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPC9zcGFuPixcbiAgICAgICAgICAgICAgdHJhbnNwb3J0U3RhdHVzID09PSBUUkFOU1BPUlRfU1RBVEVTLkRFVklDRV9PUEVOX0ZBSUxVUkUsXG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3JlbmRlckluc3RydWN0aW9uU3RlcChcbiAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgdHlwZT1cImxpbmtcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW52aXJvbm1lbnRUeXBlSXNGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29ubmVjdGVkRGV2aWNlcyA9IGF3YWl0IHdpbmRvdy5uYXZpZ2F0b3IuaGlkLnJlcXVlc3REZXZpY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnM6IFt7IHZlbmRvcklkOiBMRURHRVJfVVNCX1ZFTkRPUl9JRCB9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3ZWJIaWRJc0Nvbm5lY3RlZCA9IGNvbm5lY3RlZERldmljZXMuc29tZShcbiAgICAgICAgICAgICAgICAgICAgICAgIChkZXZpY2UpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZS52ZW5kb3JJZCA9PT0gTnVtYmVyKExFREdFUl9VU0JfVkVORE9SX0lEKSxcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGVkZ2VyV2ViSGlkQ29ubmVjdGVkU3RhdHVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViSGlkQ29ubmVjdGVkU3RhdHVzOiB3ZWJIaWRJc0Nvbm5lY3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gV0VCSElEX0NPTk5FQ1RFRF9TVEFUVVNFUy5DT05ORUNURURcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFdFQkhJRF9DT05ORUNURURfU1RBVFVTRVMuTk9UX0NPTk5FQ1RFRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnBsYXRmb3JtLm9wZW5FeHRlbnNpb25JbkJyb3dzZXIobnVsbCwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge2Vudmlyb25tZW50VHlwZUlzRnVsbFNjcmVlblxuICAgICAgICAgICAgICAgICAgICA/IHQoJ2NsaWNrVG9Db25uZWN0TGVkZ2VyVmlhV2ViSElEJylcbiAgICAgICAgICAgICAgICAgICAgOiB0KCdvcGVuRnVsbFNjcmVlbkZvckxlZGdlcldlYkhpZCcpfVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8L3NwYW4+LFxuICAgICAgICAgICAgICB1c2luZ1dlYkhJRCAmJlxuICAgICAgICAgICAgICAgIHdlYkhpZENvbm5lY3RlZFN0YXR1cyA9PT1cbiAgICAgICAgICAgICAgICAgIFdFQkhJRF9DT05ORUNURURfU1RBVFVTRVMuTk9UX0NPTk5FQ1RFRCxcbiAgICAgICAgICAgICAgQ09MT1JTLlNFQ09OREFSWTEsXG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0RpYWxvZz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5MZWRnZXJJbnN0cnVjdGlvbkZpZWxkLnByb3BUeXBlcyA9IHtcbiAgc2hvd0RhdGFJbnN0cnVjdGlvbjogUHJvcFR5cGVzLmJvb2wsXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBQUklNQVJZLCBTRUNPTkRBUlkgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9jb21tb24nO1xuaW1wb3J0IHsgaGV4V0VJVG9EZWNHV0VJIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy91dGlscy9jb252ZXJzaW9ucy51dGlsJztcblxuaW1wb3J0IEJveCBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL3VpL2JveCc7XG5pbXBvcnQgR2FzVGltaW5nIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvYXBwL2dhcy10aW1pbmcvZ2FzLXRpbWluZy5jb21wb25lbnQnO1xuaW1wb3J0IEkxOG5WYWx1ZSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL3VpL2kxOG4tdmFsdWUnO1xuaW1wb3J0IExvYWRpbmdIZWFydEJlYXQgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy91aS9sb2FkaW5nLWhlYXJ0YmVhdCc7XG5pbXBvcnQgVHJhbnNhY3Rpb25EZXRhaWxJdGVtIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvYXBwL3RyYW5zYWN0aW9uLWRldGFpbC1pdGVtL3RyYW5zYWN0aW9uLWRldGFpbC1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgVXNlclByZWZlcmVuY2VkQ3VycmVuY3lEaXNwbGF5IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvYXBwL3VzZXItcHJlZmVyZW5jZWQtY3VycmVuY3ktZGlzcGxheSc7XG5pbXBvcnQgeyB1c2VHYXNGZWVDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvZ2FzRmVlJztcbmltcG9ydCBHYXNEZXRhaWxzSXRlbVRpdGxlIGZyb20gJy4vZ2FzLWRldGFpbHMtaXRlbS10aXRsZSc7XG5cbmNvbnN0IEdhc0RldGFpbHNJdGVtID0gKHtcbiAgaGV4TWF4aW11bVRyYW5zYWN0aW9uRmVlLFxuICBoZXhNaW5pbXVtVHJhbnNhY3Rpb25GZWUsXG4gIG1heEZlZVBlckdhcyxcbiAgbWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gIHVzZXJBY2tub3dsZWRnZWRHYXNNaXNzaW5nLFxuICB1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5LFxufSkgPT4ge1xuICBjb25zdCB7IGVzdGltYXRlVXNlZCwgaGFzU2ltdWxhdGlvbkVycm9yLCB0cmFuc2FjdGlvbiB9ID0gdXNlR2FzRmVlQ29udGV4dCgpO1xuXG4gIGlmIChoYXNTaW11bGF0aW9uRXJyb3IgJiYgIXVzZXJBY2tub3dsZWRnZWRHYXNNaXNzaW5nKSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4gKFxuICAgIDxUcmFuc2FjdGlvbkRldGFpbEl0ZW1cbiAgICAgIGtleT1cImdhcy1pdGVtXCJcbiAgICAgIGRldGFpbFRpdGxlPXs8R2FzRGV0YWlsc0l0ZW1UaXRsZSAvPn1cbiAgICAgIGRldGFpbFRpdGxlQ29sb3I9e0NPTE9SUy5CTEFDS31cbiAgICAgIGRldGFpbFRleHQ9e1xuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdhcy1kZXRhaWxzLWl0ZW1fX2N1cnJlbmN5LWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxMb2FkaW5nSGVhcnRCZWF0IC8+XG4gICAgICAgICAgPFVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5RGlzcGxheVxuICAgICAgICAgICAgdHlwZT17U0VDT05EQVJZfVxuICAgICAgICAgICAgdmFsdWU9e2hleE1pbmltdW1UcmFuc2FjdGlvbkZlZX1cbiAgICAgICAgICAgIGhpZGVMYWJlbD17Qm9vbGVhbih1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5KX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIH1cbiAgICAgIGRldGFpbFRvdGFsPXtcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnYXMtZGV0YWlscy1pdGVtX19jdXJyZW5jeS1jb250YWluZXJcIj5cbiAgICAgICAgICA8TG9hZGluZ0hlYXJ0QmVhdCAvPlxuICAgICAgICAgIDxVc2VyUHJlZmVyZW5jZWRDdXJyZW5jeURpc3BsYXlcbiAgICAgICAgICAgIHR5cGU9e1BSSU1BUll9XG4gICAgICAgICAgICB2YWx1ZT17aGV4TWluaW11bVRyYW5zYWN0aW9uRmVlfVxuICAgICAgICAgICAgaGlkZUxhYmVsPXshdXNlTmF0aXZlQ3VycmVuY3lBc1ByaW1hcnlDdXJyZW5jeX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIH1cbiAgICAgIHN1YlRleHQ9e1xuICAgICAgICA8PlxuICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgIGtleT1cImVkaXRHYXNTdWJUZXh0RmVlTGFiZWxcIlxuICAgICAgICAgICAgZGlzcGxheT1cImlubGluZS1mbGV4XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnZ2FzLWRldGFpbHMtaXRlbV9fZ2FzZmVlLWxhYmVsJywge1xuICAgICAgICAgICAgICAnZ2FzLWRldGFpbHMtaXRlbV9fZ2FzLWZlZS13YXJuaW5nJzogZXN0aW1hdGVVc2VkID09PSAnaGlnaCcsXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8TG9hZGluZ0hlYXJ0QmVhdCAvPlxuICAgICAgICAgICAgPEJveCBtYXJnaW5SaWdodD17MX0+XG4gICAgICAgICAgICAgIDxzdHJvbmc+XG4gICAgICAgICAgICAgICAge2VzdGltYXRlVXNlZCA9PT0gJ2hpZ2gnICYmICfimqAgJ31cbiAgICAgICAgICAgICAgICA8STE4blZhbHVlIG1lc3NhZ2VLZXk9XCJlZGl0R2FzU3ViVGV4dEZlZUxhYmVsXCIgLz5cbiAgICAgICAgICAgICAgPC9zdHJvbmc+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAga2V5PVwiZWRpdEdhc1N1YlRleHRGZWVWYWx1ZVwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdhcy1kZXRhaWxzLWl0ZW1fX2N1cnJlbmN5LWNvbnRhaW5lclwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxMb2FkaW5nSGVhcnRCZWF0IC8+XG4gICAgICAgICAgICAgIDxVc2VyUHJlZmVyZW5jZWRDdXJyZW5jeURpc3BsYXlcbiAgICAgICAgICAgICAgICBrZXk9XCJlZGl0R2FzU3ViVGV4dEZlZUFtb3VudFwiXG4gICAgICAgICAgICAgICAgdHlwZT17UFJJTUFSWX1cbiAgICAgICAgICAgICAgICB2YWx1ZT17aGV4TWF4aW11bVRyYW5zYWN0aW9uRmVlfVxuICAgICAgICAgICAgICAgIGhpZGVMYWJlbD17IXVzZU5hdGl2ZUN1cnJlbmN5QXNQcmltYXJ5Q3VycmVuY3l9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC8+XG4gICAgICB9XG4gICAgICBzdWJUaXRsZT17XG4gICAgICAgIDxHYXNUaW1pbmdcbiAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhcz17aGV4V0VJVG9EZWNHV0VJKFxuICAgICAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMgfHwgdHJhbnNhY3Rpb24udHhQYXJhbXMubWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgICAgICAgKX1cbiAgICAgICAgICBtYXhGZWVQZXJHYXM9e2hleFdFSVRvRGVjR1dFSShcbiAgICAgICAgICAgIG1heEZlZVBlckdhcyB8fCB0cmFuc2FjdGlvbi50eFBhcmFtcy5tYXhGZWVQZXJHYXMsXG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgIH1cbiAgICAvPlxuICApO1xufTtcblxuR2FzRGV0YWlsc0l0ZW0ucHJvcFR5cGVzID0ge1xuICBoZXhNYXhpbXVtVHJhbnNhY3Rpb25GZWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhleE1pbmltdW1UcmFuc2FjdGlvbkZlZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgbWF4RmVlUGVyR2FzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtYXhQcmlvcml0eUZlZVBlckdhczogUHJvcFR5cGVzLnN0cmluZyxcbiAgdXNlckFja25vd2xlZGdlZEdhc01pc3Npbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIHVzZU5hdGl2ZUN1cnJlbmN5QXNQcmltYXJ5Q3VycmVuY3k6IFByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgR2FzRGV0YWlsc0l0ZW07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgeyBQUklPUklUWV9MRVZFTFMgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2dhcyc7XG5pbXBvcnQgeyBJTlNVRkZJQ0lFTlRfRlVORFNfRVJST1JfS0VZIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZXJyb3Ita2V5cyc7XG5pbXBvcnQgeyBzdWJtaXR0ZWRQZW5kaW5nVHJhbnNhY3Rpb25zU2VsZWN0b3IgfSBmcm9tICcuLi8uLi8uLi9zZWxlY3RvcnMvdHJhbnNhY3Rpb25zJztcbmltcG9ydCB7IHVzZUdhc0ZlZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9nYXNGZWUnO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgQWN0aW9uYWJsZU1lc3NhZ2UgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy91aS9hY3Rpb25hYmxlLW1lc3NhZ2UvYWN0aW9uYWJsZS1tZXNzYWdlJztcbmltcG9ydCBFcnJvck1lc3NhZ2UgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy91aS9lcnJvci1tZXNzYWdlJztcbmltcG9ydCBJMThuVmFsdWUgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy91aS9pMThuLXZhbHVlJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvdHlwb2dyYXBoeSc7XG5pbXBvcnQgeyBUWVBPR1JBUEhZIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5cbmNvbnN0IFRyYW5zYWN0aW9uQWxlcnRzID0gKHtcbiAgdXNlckFja25vd2xlZGdlZEdhc01pc3NpbmcsXG4gIHNldFVzZXJBY2tub3dsZWRnZWRHYXNNaXNzaW5nLFxufSkgPT4ge1xuICBjb25zdCB7XG4gICAgYmFsYW5jZUVycm9yLFxuICAgIGVzdGltYXRlVXNlZCxcbiAgICBoYXNTaW11bGF0aW9uRXJyb3IsXG4gICAgc3VwcG9ydHNFSVAxNTU5VjIsXG4gIH0gPSB1c2VHYXNGZWVDb250ZXh0KCk7XG4gIGNvbnN0IHBlbmRpbmdUcmFuc2FjdGlvbnMgPSB1c2VTZWxlY3RvcihzdWJtaXR0ZWRQZW5kaW5nVHJhbnNhY3Rpb25zU2VsZWN0b3IpO1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcblxuICBpZiAoIXN1cHBvcnRzRUlQMTU1OVYyKSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhbnNhY3Rpb24tYWxlcnRzXCI+XG4gICAgICB7aGFzU2ltdWxhdGlvbkVycm9yICYmIChcbiAgICAgICAgPEFjdGlvbmFibGVNZXNzYWdlXG4gICAgICAgICAgbWVzc2FnZT17PEkxOG5WYWx1ZSBtZXNzYWdlS2V5PVwic2ltdWxhdGlvbkVycm9yTWVzc2FnZVYyXCIgLz59XG4gICAgICAgICAgdXNlSWNvblxuICAgICAgICAgIGljb25GaWxsQ29sb3I9XCIjZDczYTQ5XCJcbiAgICAgICAgICB0eXBlPVwiZGFuZ2VyXCJcbiAgICAgICAgICBwcmltYXJ5QWN0aW9uVjI9e1xuICAgICAgICAgICAgdXNlckFja25vd2xlZGdlZEdhc01pc3NpbmcgPT09IHRydWVcbiAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICBsYWJlbDogdCgncHJvY2VlZFdpdGhUcmFuc2FjdGlvbicpLFxuICAgICAgICAgICAgICAgICAgb25DbGljazogc2V0VXNlckFja25vd2xlZGdlZEdhc01pc3NpbmcsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICB7cGVuZGluZ1RyYW5zYWN0aW9ucz8ubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxBY3Rpb25hYmxlTWVzc2FnZVxuICAgICAgICAgIG1lc3NhZ2U9e1xuICAgICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgICAgYWxpZ249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidHJhbnNhY3Rpb24tYWxlcnRzX19wZW5kaW5nLXRyYW5zYWN0aW9uc1wiXG4gICAgICAgICAgICAgIG1hcmdpbj17WzAsIDBdfVxuICAgICAgICAgICAgICB0YWc9e1RZUE9HUkFQSFkuUGFyYWdyYXBofVxuICAgICAgICAgICAgICB2YXJpYW50PXtUWVBPR1JBUEhZLkg3fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3Ryb25nPlxuICAgICAgICAgICAgICAgIDxJMThuVmFsdWVcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VLZXk9e1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nVHJhbnNhY3Rpb25zPy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICA/ICdwZW5kaW5nVHJhbnNhY3Rpb25TaW5nbGUnXG4gICAgICAgICAgICAgICAgICAgICAgOiAncGVuZGluZ1RyYW5zYWN0aW9uTXVsdGlwbGUnXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBvcHRpb25zPXtbcGVuZGluZ1RyYW5zYWN0aW9ucz8ubGVuZ3RoXX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3N0cm9uZz57JyAnfVxuICAgICAgICAgICAgICA8STE4blZhbHVlIG1lc3NhZ2VLZXk9XCJwZW5kaW5nVHJhbnNhY3Rpb25JbmZvXCIgLz57JyAnfVxuICAgICAgICAgICAgICA8STE4blZhbHVlXG4gICAgICAgICAgICAgICAgbWVzc2FnZUtleT1cImxlYXJuQ2FuY2VsU3BlZWVkdXBcIlxuICAgICAgICAgICAgICAgIG9wdGlvbnM9e1tcbiAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgIGtleT1cImNhbmNlbFNwZWVkVXBJbmZvXCJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vbWV0YW1hc2suemVuZGVzay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMzYwMDE1NDg5MjUxLUhvdy10by1zcGVlZC11cC1vci1jYW5jZWwtYS1wZW5kaW5nLXRyYW5zYWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxJMThuVmFsdWUgbWVzc2FnZUtleT1cImNhbmNlbFNwZWVkVXBcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9hPixcbiAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIH1cbiAgICAgICAgICB1c2VJY29uXG4gICAgICAgICAgaWNvbkZpbGxDb2xvcj1cIiNmOGMwMDBcIlxuICAgICAgICAgIHR5cGU9XCJ3YXJuaW5nXCJcbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICB7YmFsYW5jZUVycm9yICYmIDxFcnJvck1lc3NhZ2UgZXJyb3JLZXk9e0lOU1VGRklDSUVOVF9GVU5EU19FUlJPUl9LRVl9IC8+fVxuICAgICAge2VzdGltYXRlVXNlZCA9PT0gUFJJT1JJVFlfTEVWRUxTLkxPVyAmJiAoXG4gICAgICAgIDxBY3Rpb25hYmxlTWVzc2FnZVxuICAgICAgICAgIG1lc3NhZ2U9e1xuICAgICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgICAgYWxpZ249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgbWFyZ2luPXtbMCwgMF19XG4gICAgICAgICAgICAgIHRhZz17VFlQT0dSQVBIWS5QYXJhZ3JhcGh9XG4gICAgICAgICAgICAgIHZhcmlhbnQ9e1RZUE9HUkFQSFkuSDd9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxJMThuVmFsdWUgbWVzc2FnZUtleT1cImxvd1ByaW9yaXR5TWVzc2FnZVwiIC8+XG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgfVxuICAgICAgICAgIHVzZUljb25cbiAgICAgICAgICBpY29uRmlsbENvbG9yPVwiI2Y4YzAwMFwiXG4gICAgICAgICAgdHlwZT1cIndhcm5pbmdcIlxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblRyYW5zYWN0aW9uQWxlcnRzLnByb3BUeXBlcyA9IHtcbiAgdXNlckFja25vd2xlZGdlZEdhc01pc3Npbmc6IFByb3BUeXBlcy5ib29sLFxuICBzZXRVc2VyQWNrbm93bGVkZ2VkR2FzTWlzc2luZzogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUcmFuc2FjdGlvbkFsZXJ0cztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNhcHR1cmVFeGNlcHRpb24gfSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuaW1wb3J0IFRyYW5zYWN0aW9uRGV0YWlsSXRlbSBmcm9tICcuLi90cmFuc2FjdGlvbi1kZXRhaWwtaXRlbS90cmFuc2FjdGlvbi1kZXRhaWwtaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IGZldGNoRXN0aW1hdGVkTDFGZWUgZnJvbSAnLi4vLi4vLi4vaGVscGVycy91dGlscy9vcHRpbWlzbS9mZXRjaEVzdGltYXRlZEwxRmVlJztcbmltcG9ydCB7IEkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvaTE4bic7XG5pbXBvcnQgeyBzdW1IZXhlcyB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdHJhbnNhY3Rpb25zLnV0aWwnO1xuaW1wb3J0IHtcbiAgdG9CaWdOdW1iZXIsXG4gIHRvTm9ybWFsaXplZERlbm9taW5hdGlvbixcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvY29udmVyc2lvbi51dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE11bHRpbGF5ZXJGZWVNZXNzYWdlKHtcbiAgdHJhbnNhY3Rpb24sXG4gIGxheWVyMmZlZSxcbiAgbmF0aXZlQ3VycmVuY3ksXG4gIHBsYWluU3R5bGUsXG59KSB7XG4gIGNvbnN0IHQgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KTtcblxuICBjb25zdCBbZmV0Y2hlZExheWVyMVRvdGFsLCBzZXRMYXllcjFUb3RhbF0gPSB1c2VTdGF0ZShudWxsKTtcblxuICBsZXQgbGF5ZXIxVG90YWwgPSAndW5rbm93bic7XG5cbiAgaWYgKGZldGNoZWRMYXllcjFUb3RhbCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGxheWVyMVRvdGFsQk4gPSB0b0JpZ051bWJlci5oZXgoZmV0Y2hlZExheWVyMVRvdGFsKTtcbiAgICBsYXllcjFUb3RhbCA9IGAke3RvTm9ybWFsaXplZERlbm9taW5hdGlvblxuICAgICAgLldFSShsYXllcjFUb3RhbEJOKVxuICAgICAgLnRvU3RyaW5nKDEwKX0gJHtuYXRpdmVDdXJyZW5jeX1gO1xuICB9XG5cbiAgY29uc3QgdG90YWxJbldlaUhleCA9IHN1bUhleGVzKFxuICAgIGxheWVyMmZlZSB8fCAnMHgwJyxcbiAgICBmZXRjaGVkTGF5ZXIxVG90YWwgfHwgJzB4MCcsXG4gICAgdHJhbnNhY3Rpb24udHhQYXJhbXMudmFsdWUgfHwgJzB4MCcsXG4gICk7XG4gIGNvbnN0IHRvdGFsQk4gPSB0b0JpZ051bWJlci5oZXgodG90YWxJbldlaUhleCk7XG4gIGNvbnN0IHRvdGFsSW5FdGggPSBgJHt0b05vcm1hbGl6ZWREZW5vbWluYXRpb25cbiAgICAuV0VJKHRvdGFsQk4pXG4gICAgLnRvU3RyaW5nKDEwKX0gJHtuYXRpdmVDdXJyZW5jeX1gO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZ2V0RXN0aW1hdGVkTDFGZWUgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaEVzdGltYXRlZEwxRmVlKGdsb2JhbC5ldGgsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgc2V0TGF5ZXIxVG90YWwocmVzdWx0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FwdHVyZUV4Y2VwdGlvbihlKTtcbiAgICAgICAgc2V0TGF5ZXIxVG90YWwobnVsbCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBnZXRFc3RpbWF0ZWRMMUZlZSgpO1xuICB9LCBbdHJhbnNhY3Rpb25dKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8VHJhbnNhY3Rpb25EZXRhaWxJdGVtXG4gICAgICAgIGtleT1cInRvdGFsLWl0ZW1cIlxuICAgICAgICBkZXRhaWxUaXRsZT17dCgnbGF5ZXIxRmVlcycpfVxuICAgICAgICBkZXRhaWxUb3RhbD17bGF5ZXIxVG90YWx9XG4gICAgICAgIG5vQm9sZD17cGxhaW5TdHlsZX1cbiAgICAgICAgZmxleFdpZHRoVmFsdWVzPXtwbGFpblN0eWxlfVxuICAgICAgLz5cbiAgICAgIDxUcmFuc2FjdGlvbkRldGFpbEl0ZW1cbiAgICAgICAga2V5PVwidG90YWwtaXRlbVwiXG4gICAgICAgIGRldGFpbFRpdGxlPXt0KCd0b3RhbCcpfVxuICAgICAgICBkZXRhaWxUb3RhbD17dG90YWxJbkV0aH1cbiAgICAgICAgc3ViVGl0bGU9e3QoJ3RyYW5zYWN0aW9uRGV0YWlsTXVsdGlMYXllclRvdGFsU3VidGl0bGUnKX1cbiAgICAgICAgbm9Cb2xkPXtwbGFpblN0eWxlfVxuICAgICAgICBmbGV4V2lkdGhWYWx1ZXM9e3BsYWluU3R5bGV9XG4gICAgICAvPlxuICAgIDwvPlxuICApO1xufVxuXG5NdWx0aWxheWVyRmVlTWVzc2FnZS5wcm9wVHlwZXMgPSB7XG4gIHRyYW5zYWN0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBsYXllcjJmZWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5hdGl2ZUN1cnJlbmN5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwbGFpblN0eWxlOiBQcm9wVHlwZXMuYm9vbCxcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi8uLi8uLi8uLi8uLi91aS90b29sdGlwL3Rvb2x0aXAnO1xuaW1wb3J0IENvcHlJY29uIGZyb20gJy4uLy4uLy4uLy4uLy4uL3VpL2ljb24vY29weS1pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL2NvbnRleHRzL2kxOG4nO1xuXG5pbXBvcnQgeyB1c2VDb3B5VG9DbGlwYm9hcmQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9ob29rcy91c2VDb3B5VG9DbGlwYm9hcmQnO1xuXG5jb25zdCBDb3B5UmF3RGF0YSA9ICh7IGRhdGEgfSkgPT4ge1xuICBjb25zdCB0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG4gIGNvbnN0IFtjb3BpZWQsIGhhbmRsZUNvcHldID0gdXNlQ29weVRvQ2xpcGJvYXJkKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvcHktcmF3LWRhdGFcIj5cbiAgICAgIDxUb29sdGlwIHBvc2l0aW9uPVwicmlnaHRcIiB0aXRsZT17Y29waWVkID8gdCgnY29waWVkRXhjbGFtYXRpb24nKSA6ICcnfT5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZUNvcHkoZGF0YSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBjbGFzc05hbWU9XCJjb3B5LXJhdy1kYXRhX19idXR0b25cIlxuICAgICAgICA+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb3B5LXJhdy1kYXRhX19pY29uXCI+XG4gICAgICAgICAgICA8Q29weUljb24gc2l6ZT17MTJ9IGNvbG9yPVwiI0JCQzBDNVwiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb3B5LXJhdy1kYXRhX19sYWJlbFwiPlxuICAgICAgICAgICAge3QoJ2NvcHlSYXdUcmFuc2FjdGlvbkRhdGEnKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L1Rvb2x0aXA+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5Db3B5UmF3RGF0YS5wcm9wVHlwZXMgPSB7XG4gIGRhdGE6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvcHlSYXdEYXRhO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vY29uZmlybS1wYWdlLWNvbnRhaW5lci1oZWFkZXIuY29tcG9uZW50JztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2NvbmZpcm0tZGV0YWlsLXJvdy5jb21wb25lbnQnO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vY29uZmlybS1wYWdlLWNvbnRhaW5lci1uYXZpZ2F0aW9uLmNvbXBvbmVudCc7XG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgZ2V0QWNjb3VudHNXaXRoTGFiZWxzLCBnZXRBZGRyZXNzQm9va0VudHJ5IH0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCBDb25maXJtUGFnZUNvbnRhaW5lciBmcm9tICcuL2NvbmZpcm0tcGFnZS1jb250YWluZXIuY29tcG9uZW50JztcblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcykge1xuICBjb25zdCB0byA9IG93blByb3BzLnRvQWRkcmVzcztcblxuICBjb25zdCBjb250YWN0ID0gZ2V0QWRkcmVzc0Jvb2tFbnRyeShzdGF0ZSwgdG8pO1xuICByZXR1cm4ge1xuICAgIGNvbnRhY3QsXG4gICAgdG9OYW1lOiBjb250YWN0Py5uYW1lIHx8IG93blByb3BzLnRvTmFtZSxcbiAgICBpc093bmVkQWNjb3VudDogZ2V0QWNjb3VudHNXaXRoTGFiZWxzKHN0YXRlKVxuICAgICAgLm1hcCgoYWNjb3VudFdpdGhMYWJlbCkgPT4gYWNjb3VudFdpdGhMYWJlbC5hZGRyZXNzKVxuICAgICAgLmluY2x1ZGVzKHRvKSxcbiAgICB0byxcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKENvbmZpcm1QYWdlQ29udGFpbmVyKTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBpbnNwZWN0IGZyb20gJ2Jyb3dzZXItdXRpbC1pbnNwZWN0JztcbmltcG9ydCB7IGZvckFkZHJlc3MgfSBmcm9tICdAdHJ1ZmZsZS9kZWNvZGVyJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0ICogYXMgQ29kZWMgZnJvbSAnQHRydWZmbGUvY29kZWMnO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSAnLi4vLi4vdWkvc3Bpbm5lcic7XG5pbXBvcnQgRXJyb3JNZXNzYWdlIGZyb20gJy4uLy4uL3VpL2Vycm9yLW1lc3NhZ2UnO1xuaW1wb3J0IGZldGNoV2l0aENhY2hlIGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvZmV0Y2gtd2l0aC1jYWNoZSc7XG5pbXBvcnQgeyBnZXRTZWxlY3RlZEFjY291bnQsIGdldEN1cnJlbnRDaGFpbklkIH0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCB7IGhleFRvRGVjaW1hbCB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvY29udmVyc2lvbnMudXRpbCc7XG5pbXBvcnQgeyBJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL2kxOG4nO1xuaW1wb3J0IHsgdG9DaGVja3N1bUhleEFkZHJlc3MgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9oZXhzdHJpbmctdXRpbHMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtVHhEZWNvZGluZyB9IGZyb20gJy4vdHJhbnNhY3Rpb24tZGVjb2RpbmcudXRpbCc7XG5pbXBvcnQge1xuICBGRVRDSF9QUk9KRUNUX0lORk9fVVJJLFxuICBGRVRDSF9TVVBQT1JURURfTkVUV09SS1NfVVJJLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmltcG9ydCBBZGRyZXNzIGZyb20gJy4vY29tcG9uZW50cy9kZWNvZGluZy9hZGRyZXNzJztcbmltcG9ydCBDb3B5UmF3RGF0YSBmcm9tICcuL2NvbXBvbmVudHMvdWkvY29weS1yYXctZGF0YSc7XG5pbXBvcnQgQWNjcmVkaXRhdGlvbiBmcm9tICcuL2NvbXBvbmVudHMvdWkvYWNjcmVkaXRhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRyYW5zYWN0aW9uRGVjb2RpbmcoeyB0byA9ICcnLCBpbnB1dERhdGE6IGRhdGEgPSAnJyB9KSB7XG4gIGNvbnN0IHQgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KTtcbiAgY29uc3QgW3R4LCBzZXRUeF0gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFtzb3VyY2VBZGRyZXNzLCBzZXRTb3VyY2VBZGRyZXNzXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3NvdXJjZUZldGNoZWRWaWEsIHNldFNvdXJjZUZldGNoZWRWaWFdID0gdXNlU3RhdGUoJycpO1xuXG4gIGNvbnN0IHsgYWRkcmVzczogZnJvbSB9ID0gdXNlU2VsZWN0b3IoZ2V0U2VsZWN0ZWRBY2NvdW50KTtcbiAgY29uc3QgbmV0d29yayA9IGhleFRvRGVjaW1hbCh1c2VTZWxlY3RvcihnZXRDdXJyZW50Q2hhaW5JZCkpO1xuXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2hhc0Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtlcnJvck1lc3NhZ2UsIHNldEVycm9yTWVzc2FnZV0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG5ldHdvcmtzID0gYXdhaXQgZmV0Y2hXaXRoQ2FjaGUoRkVUQ0hfU1VQUE9SVEVEX05FVFdPUktTX1VSSSwge1xuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhbmV0d29ya3Muc29tZShcbiAgICAgICAgICAgIChuKSA9PiBuLmFjdGl2ZSAmJiBOdW1iZXIobi5jaGFpbklkKSA9PT0gTnVtYmVyKG5ldHdvcmspLFxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgdCgndHJhbnNhY3Rpb25EZWNvZGluZ1Vuc3VwcG9ydGVkTmV0d29ya0Vycm9yJywgW25ldHdvcmtdKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdFVybCA9IGAke0ZFVENIX1BST0pFQ1RfSU5GT19VUkl9PyR7bmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICAgICAgdG8sXG4gICAgICAgICAgJ25ldHdvcmstaWQnOiBuZXR3b3JrLFxuICAgICAgICB9KX1gO1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hXaXRoQ2FjaGUocmVxdWVzdFVybCwgeyBtZXRob2Q6ICdHRVQnIH0pO1xuXG4gICAgICAgIGNvbnN0IHsgaW5mbzogcHJvamVjdEluZm8sIGZldGNoZWRWaWEsIGFkZHJlc3MgfSA9IHJlc3BvbnNlO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBzb3VyY2UgaW5mb3JtYXRpb25cbiAgICAgICAgaWYgKGFkZHJlc3MpIHtcbiAgICAgICAgICBzZXRTb3VyY2VBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZldGNoZWRWaWEpIHtcbiAgICAgICAgICBzZXRTb3VyY2VGZXRjaGVkVmlhKGZldGNoZWRWaWEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3JlYXRpbmcgaW5zdGFuY2Ugb2YgdGhlIHRydWZmbGUgZGVjb2RlclxuICAgICAgICBjb25zdCBkZWNvZGVyID0gYXdhaXQgZm9yQWRkcmVzcyh0bywge1xuICAgICAgICAgIHByb3ZpZGVyOiBnbG9iYWwuZXRoZXJldW1Qcm92aWRlcixcbiAgICAgICAgICBwcm9qZWN0SW5mbyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZGVjb2RlIHR4IGlucHV0IGRhdGFcbiAgICAgICAgY29uc3QgZGVjb2RpbmcgPSBhd2FpdCBkZWNvZGVyLmRlY29kZVRyYW5zYWN0aW9uKHtcbiAgICAgICAgICBmcm9tLFxuICAgICAgICAgIHRvLFxuICAgICAgICAgIGlucHV0OiBkYXRhLFxuICAgICAgICAgIGJsb2NrTnVtYmVyOiBudWxsLFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0cmFuc2Zvcm0gdHggZGVjb2RpbmcgYXJndW1lbnRzIGludG8gdHJlZSBkYXRhXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHRyYW5zZm9ybVR4RGVjb2RpbmcoZGVjb2Rpbmc/LmFyZ3VtZW50cyk7XG4gICAgICAgIHNldFR4KHBhcmFtcyk7XG5cbiAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgc2V0RXJyb3IodHJ1ZSk7XG4gICAgICAgIGlmIChlcnJvcj8ubWVzc2FnZS5tYXRjaCgnNDAwJykpIHtcbiAgICAgICAgICBzZXRFcnJvck1lc3NhZ2UodCgndHhJbnNpZ2h0c05vdFN1cHBvcnRlZCcpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRFcnJvck1lc3NhZ2UoZXJyb3I/Lm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkoKTtcbiAgfSwgW3QsIGZyb20sIHRvLCBuZXR3b3JrLCBkYXRhXSk7XG5cbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgLy8gY29tcG9uZW50IHJlbmRlcmluZyBtZXRob2RzXG4gIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gIGNvbnN0IHJlbmRlckxlYWYgPSAoeyBuYW1lLCBraW5kLCB0eXBlQ2xhc3MsIHZhbHVlIH0pID0+IHtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzb2wtaXRlbSBzb2xpZGl0eS1lcnJvclwiPlxuICAgICAgICAgICAgPHNwYW4+TWFsZm9ybWVkIGRhdGE8L3NwYW4+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICApO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzd2l0Y2ggKHR5cGVDbGFzcykge1xuICAgICAgICAgIGNhc2UgJ2ludCc6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzb2wtaXRlbSBzb2xpZGl0eS1pbnRcIj5cbiAgICAgICAgICAgICAgICB7W3ZhbHVlLmFzQk4gfHwgdmFsdWUuYXNTdHJpbmddLnRvU3RyaW5nKCl9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICBjYXNlICd1aW50JzpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInNvbC1pdGVtIHNvbGlkaXR5LXVpbnRcIj5cbiAgICAgICAgICAgICAgICB7W3ZhbHVlLmFzQk4gfHwgdmFsdWUuYXNTdHJpbmddLnRvU3RyaW5nKCl9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICBjYXNlICdieXRlcyc6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzb2wtaXRlbSBzb2xpZGl0eS1ieXRlc1wiPnt2YWx1ZS5hc0hleH08L3NwYW4+XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPGRldGFpbHM+XG4gICAgICAgICAgICAgICAgPHN1bW1hcnkgY2xhc3NOYW1lPVwidHlwb2dyYXBoeS0tY29sb3ItYmxhY2tcIj57bmFtZX06IDwvc3VtbWFyeT5cbiAgICAgICAgICAgICAgICA8b2w+XG4gICAgICAgICAgICAgICAgICB7dmFsdWUubWFwKChpdGVtVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17YCR7aXRlbVZhbHVlLnR5cGU/LnR5cGVDbGFzc30tJHtpbmRleH1gfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJMZWFmKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNsYXNzOiBpdGVtVmFsdWUudHlwZT8udHlwZUNsYXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbVZhbHVlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBpdGVtVmFsdWUua2luZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICA8L2RldGFpbHM+XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgY2FzZSAnYWRkcmVzcyc6IHtcbiAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSB2YWx1ZT8uYXNBZGRyZXNzO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPEFkZHJlc3NcbiAgICAgICAgICAgICAgICBhZGRyZXNzT25seVxuICAgICAgICAgICAgICAgIGNoZWNrc3VtbWVkUmVjaXBpZW50QWRkcmVzcz17dG9DaGVja3N1bUhleEFkZHJlc3MoYWRkcmVzcyl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPHByZSBjbGFzc05hbWU9XCJzb2wtaXRlbSBzb2xpZGl0eS1yYXdcIj5cbiAgICAgICAgICAgICAgICB7aW5zcGVjdChuZXcgQ29kZWMuRm9ybWF0LlV0aWxzLkluc3BlY3QuUmVzdWx0SW5zcGVjdG9yKHZhbHVlKSl9XG4gICAgICAgICAgICAgIDwvcHJlPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCByZW5kZXJUcmVlID0gKFxuICAgIHsgbmFtZSwga2luZCwgdHlwZUNsYXNzLCB0eXBlLCB2YWx1ZSwgY2hpbGRyZW4gfSxcbiAgICBpbmRleCxcbiAgKSA9PiB7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gKFxuICAgICAgPGxpIGtleT17YCR7dHlwZUNsYXNzfS0ke2luZGV4fWB9PlxuICAgICAgICA8ZGV0YWlscyBvcGVuPXtpbmRleCA9PT0gMCA/ICdvcGVuJyA6ICcnfT5cbiAgICAgICAgICA8c3VtbWFyeT57bmFtZX06IDwvc3VtbWFyeT5cbiAgICAgICAgICA8b2w+e2NoaWxkcmVuLm1hcChyZW5kZXJUcmVlKX08L29sPlxuICAgICAgICA8L2RldGFpbHM+XG4gICAgICA8L2xpPlxuICAgICkgOiAoXG4gICAgICA8bGkgY2xhc3NOYW1lPVwic29saWRpdHktdmFsdWVcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzb2xpZGl0eS1uYW1lZC1pdGVtIHNvbGlkaXR5LWl0ZW1cIj5cbiAgICAgICAgICB7dHlwZUNsYXNzICE9PSAnYXJyYXknICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSA/IChcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInBhcmFtLW5hbWUgdHlwb2dyYXBoeS0tY29sb3ItYmxhY2tcIj57bmFtZX06IDwvc3Bhbj5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzb2wtaXRlbSBzb2xpZGl0eS11aW50XCI+XG4gICAgICAgICAgICB7cmVuZGVyTGVhZih7IG5hbWUsIHR5cGVDbGFzcywgdHlwZSwgdmFsdWUsIGtpbmQgfSl9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCByZW5kZXJUcmFuc2FjdGlvbkRlY29kaW5nID0gKCkgPT4ge1xuICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInR4LWluc2lnaHQtbG9hZGluZ1wiPlxuICAgICAgICAgIDxTcGlubmVyIGNvbG9yPVwiI0Y3QzA2Q1wiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHgtaW5zaWdodC1lcnJvclwiPlxuICAgICAgICAgIDxFcnJvck1lc3NhZ2UgZXJyb3JNZXNzYWdlPXtlcnJvck1lc3NhZ2V9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0eC1pbnNpZ2h0LWNvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0eC1pbnNpZ2h0LWNvbnRlbnRfX3RyZWUtY29tcG9uZW50XCI+XG4gICAgICAgICAgPG9sPnt0eC5tYXAocmVuZGVyVHJlZSl9PC9vbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHgtaW5zaWdodC1jb250ZW50X19jb3B5LXJhdy10eFwiPlxuICAgICAgICAgIDxDb3B5UmF3RGF0YSBkYXRhPXtkYXRhfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge3NvdXJjZUZldGNoZWRWaWEgJiYgc291cmNlQWRkcmVzcyA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInR4LWluc2lnaHQtY29udGVudF9fYWNjcmVkaXRhdGlvblwiPlxuICAgICAgICAgICAgPEFjY3JlZGl0YXRpb25cbiAgICAgICAgICAgICAgYWRkcmVzcz17c291cmNlQWRkcmVzc31cbiAgICAgICAgICAgICAgZmV0Y2hWaWE9e3NvdXJjZUZldGNoZWRWaWF9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwidHgtaW5zaWdodFwiPntyZW5kZXJUcmFuc2FjdGlvbkRlY29kaW5nKCl9PC9kaXY+O1xufVxuXG5UcmFuc2FjdGlvbkRlY29kaW5nLnByb3BUeXBlcyA9IHtcbiAgdG86IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgaW5wdXREYXRhOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9tZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWVyZ2VcIikpO1xuXG5mdW5jdGlvbiBvbWl0KGlucHV0LCBmaWVsZHMpIHtcbiAgdmFyIG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhpbnB1dCkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGlmIChmaWVsZHMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIG91dHB1dFtwcm9wXSA9IGlucHV0W3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGNzcyhzdHlsZUZ1bmN0aW9uKSB7XG4gIHZhciBuZXdTdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24gbmV3U3R5bGVGdW5jdGlvbihwcm9wcykge1xuICAgIHZhciBvdXRwdXQgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcblxuICAgIGlmIChwcm9wcy5jc3MpIHtcbiAgICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sICgwLCBfbWVyZ2UuZGVmYXVsdCkob3V0cHV0LCBzdHlsZUZ1bmN0aW9uKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICB0aGVtZTogcHJvcHMudGhlbWVcbiAgICAgIH0sIHByb3BzLmNzcykpKSksIG9taXQocHJvcHMuY3NzLCBbc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wc10pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzKSwge30sIHtcbiAgICBjc3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RcbiAgfSkgOiB7fTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcyA9IFsnY3NzJ10uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKHN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMpKTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5cbnZhciBfZGVmYXVsdCA9IGNzcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaGFuZGxlQnJlYWtwb2ludHMgPSBoYW5kbGVCcmVha3BvaW50cztcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfdHlwZW9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9tZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWVyZ2VcIikpO1xuXG4vLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbi8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtWy5cbnZhciB2YWx1ZXMgPSB7XG4gIHhzOiAwLFxuICBzbTogNjAwLFxuICBtZDogOTYwLFxuICBsZzogMTI4MCxcbiAgeGw6IDE5MjBcbn07XG52YXIgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDogZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlc1trZXldLCBcInB4KVwiKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKSB7XG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghcHJvcHMudGhlbWUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgYXJlIGNhbGxpbmcgYSBzdHlsZSBmdW5jdGlvbiB3aXRob3V0IGEgdGhlbWUgdmFsdWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIHZhciB0aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0sIGluZGV4KSB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGlmICgoMCwgX3R5cGVvZjIuZGVmYXVsdCkocHJvcFZhbHVlKSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgX3RoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcFZhbHVlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYnJlYWtwb2ludCkge1xuICAgICAgYWNjW190aGVtZUJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbYnJlYWtwb2ludF0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICB2YXIgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgdmFyIG5ld1N0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiBuZXdTdHlsZUZ1bmN0aW9uKHByb3BzKSB7XG4gICAgdmFyIGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICB2YXIgdGhlbWVCcmVha3BvaW50cyA9IHByb3BzLnRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICB2YXIgZXh0ZW5kZWQgPSB0aGVtZUJyZWFrcG9pbnRzLmtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgaWYgKHByb3BzW2tleV0pIHtcbiAgICAgICAgYWNjID0gYWNjIHx8IHt9O1xuICAgICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cChrZXkpXSA9IHN0eWxlRnVuY3Rpb24oKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgdGhlbWU6IHByb3BzLnRoZW1lXG4gICAgICAgIH0sIHByb3BzW2tleV0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBudWxsKTtcbiAgICByZXR1cm4gKDAsIF9tZXJnZS5kZWZhdWx0KShiYXNlLCBleHRlbmRlZCk7XG4gIH07XG5cbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMpLCB7fSwge1xuICAgIHhzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICAgIHNtOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICAgIG1kOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICAgIGxnOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICAgIHhsOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG4gIH0pIDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKHN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMpKTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5cbnZhciBfZGVmYXVsdCA9IGJyZWFrcG9pbnRzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5ib3JkZXJSYWRpdXMgPSBleHBvcnRzLmJvcmRlckNvbG9yID0gZXhwb3J0cy5ib3JkZXJMZWZ0ID0gZXhwb3J0cy5ib3JkZXJCb3R0b20gPSBleHBvcnRzLmJvcmRlclJpZ2h0ID0gZXhwb3J0cy5ib3JkZXJUb3AgPSBleHBvcnRzLmJvcmRlciA9IHZvaWQgMDtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3R5bGVcIikpO1xuXG52YXIgX2NvbXBvc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvc2VcIikpO1xuXG5mdW5jdGlvbiBnZXRCb3JkZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQodmFsdWUsIFwicHggc29saWRcIik7XG59XG5cbnZhciBib3JkZXIgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2JvcmRlcicsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydHMuYm9yZGVyID0gYm9yZGVyO1xudmFyIGJvcmRlclRvcCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnYm9yZGVyVG9wJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0cy5ib3JkZXJUb3AgPSBib3JkZXJUb3A7XG52YXIgYm9yZGVyUmlnaHQgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2JvcmRlclJpZ2h0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0cy5ib3JkZXJSaWdodCA9IGJvcmRlclJpZ2h0O1xudmFyIGJvcmRlckJvdHRvbSA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnYm9yZGVyQm90dG9tJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0cy5ib3JkZXJCb3R0b20gPSBib3JkZXJCb3R0b207XG52YXIgYm9yZGVyTGVmdCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnYm9yZGVyTGVmdCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydHMuYm9yZGVyTGVmdCA9IGJvcmRlckxlZnQ7XG52YXIgYm9yZGVyQ29sb3IgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2JvcmRlckNvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnRzLmJvcmRlckNvbG9yID0gYm9yZGVyQ29sb3I7XG52YXIgYm9yZGVyUmFkaXVzID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdib3JkZXJSYWRpdXMnLFxuICB0aGVtZUtleTogJ3NoYXBlJ1xufSk7XG5leHBvcnRzLmJvcmRlclJhZGl1cyA9IGJvcmRlclJhZGl1cztcbnZhciBib3JkZXJzID0gKDAsIF9jb21wb3NlLmRlZmF1bHQpKGJvcmRlciwgYm9yZGVyVG9wLCBib3JkZXJSaWdodCwgYm9yZGVyQm90dG9tLCBib3JkZXJMZWZ0LCBib3JkZXJDb2xvciwgYm9yZGVyUmFkaXVzKTtcbnZhciBfZGVmYXVsdCA9IGJvcmRlcnM7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLndoaXRlU3BhY2UgPSBleHBvcnRzLnZpc2liaWxpdHkgPSBleHBvcnRzLnRleHRPdmVyZmxvdyA9IGV4cG9ydHMub3ZlcmZsb3cgPSBleHBvcnRzLmRpc3BsYXlSYXcgPSBleHBvcnRzLmRpc3BsYXlQcmludCA9IHZvaWQgMDtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3R5bGVcIikpO1xuXG52YXIgX2NvbXBvc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvc2VcIikpO1xuXG52YXIgZGlzcGxheVByaW50ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdkaXNwbGF5UHJpbnQnLFxuICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIGRpc3BsYXk6IHZhbHVlXG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnRzLmRpc3BsYXlQcmludCA9IGRpc3BsYXlQcmludDtcbnZhciBkaXNwbGF5UmF3ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdkaXNwbGF5J1xufSk7XG5leHBvcnRzLmRpc3BsYXlSYXcgPSBkaXNwbGF5UmF3O1xudmFyIG92ZXJmbG93ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdvdmVyZmxvdydcbn0pO1xuZXhwb3J0cy5vdmVyZmxvdyA9IG92ZXJmbG93O1xudmFyIHRleHRPdmVyZmxvdyA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAndGV4dE92ZXJmbG93J1xufSk7XG5leHBvcnRzLnRleHRPdmVyZmxvdyA9IHRleHRPdmVyZmxvdztcbnZhciB2aXNpYmlsaXR5ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICd2aXNpYmlsaXR5J1xufSk7XG5leHBvcnRzLnZpc2liaWxpdHkgPSB2aXNpYmlsaXR5O1xudmFyIHdoaXRlU3BhY2UgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ3doaXRlU3BhY2UnXG59KTtcbmV4cG9ydHMud2hpdGVTcGFjZSA9IHdoaXRlU3BhY2U7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY29tcG9zZS5kZWZhdWx0KShkaXNwbGF5UHJpbnQsIGRpc3BsYXlSYXcsIG92ZXJmbG93LCB0ZXh0T3ZlcmZsb3csIHZpc2liaWxpdHksIHdoaXRlU3BhY2UpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmp1c3RpZnlTZWxmID0gZXhwb3J0cy5qdXN0aWZ5SXRlbXMgPSBleHBvcnRzLmFsaWduU2VsZiA9IGV4cG9ydHMuZmxleFNocmluayA9IGV4cG9ydHMuZmxleEdyb3cgPSBleHBvcnRzLmZsZXggPSBleHBvcnRzLm9yZGVyID0gZXhwb3J0cy5hbGlnbkNvbnRlbnQgPSBleHBvcnRzLmFsaWduSXRlbXMgPSBleHBvcnRzLmp1c3RpZnlDb250ZW50ID0gZXhwb3J0cy5mbGV4V3JhcCA9IGV4cG9ydHMuZmxleERpcmVjdGlvbiA9IGV4cG9ydHMuZmxleEJhc2lzID0gdm9pZCAwO1xuXG52YXIgX3N0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zdHlsZVwiKSk7XG5cbnZhciBfY29tcG9zZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9zZVwiKSk7XG5cbnZhciBmbGV4QmFzaXMgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2ZsZXhCYXNpcydcbn0pO1xuZXhwb3J0cy5mbGV4QmFzaXMgPSBmbGV4QmFzaXM7XG52YXIgZmxleERpcmVjdGlvbiA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZmxleERpcmVjdGlvbidcbn0pO1xuZXhwb3J0cy5mbGV4RGlyZWN0aW9uID0gZmxleERpcmVjdGlvbjtcbnZhciBmbGV4V3JhcCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZmxleFdyYXAnXG59KTtcbmV4cG9ydHMuZmxleFdyYXAgPSBmbGV4V3JhcDtcbnZhciBqdXN0aWZ5Q29udGVudCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnanVzdGlmeUNvbnRlbnQnXG59KTtcbmV4cG9ydHMuanVzdGlmeUNvbnRlbnQgPSBqdXN0aWZ5Q29udGVudDtcbnZhciBhbGlnbkl0ZW1zID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdhbGlnbkl0ZW1zJ1xufSk7XG5leHBvcnRzLmFsaWduSXRlbXMgPSBhbGlnbkl0ZW1zO1xudmFyIGFsaWduQ29udGVudCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnYWxpZ25Db250ZW50J1xufSk7XG5leHBvcnRzLmFsaWduQ29udGVudCA9IGFsaWduQ29udGVudDtcbnZhciBvcmRlciA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnb3JkZXInXG59KTtcbmV4cG9ydHMub3JkZXIgPSBvcmRlcjtcbnZhciBmbGV4ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdmbGV4J1xufSk7XG5leHBvcnRzLmZsZXggPSBmbGV4O1xudmFyIGZsZXhHcm93ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdmbGV4R3Jvdydcbn0pO1xuZXhwb3J0cy5mbGV4R3JvdyA9IGZsZXhHcm93O1xudmFyIGZsZXhTaHJpbmsgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2ZsZXhTaHJpbmsnXG59KTtcbmV4cG9ydHMuZmxleFNocmluayA9IGZsZXhTaHJpbms7XG52YXIgYWxpZ25TZWxmID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdhbGlnblNlbGYnXG59KTtcbmV4cG9ydHMuYWxpZ25TZWxmID0gYWxpZ25TZWxmO1xudmFyIGp1c3RpZnlJdGVtcyA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnanVzdGlmeUl0ZW1zJ1xufSk7XG5leHBvcnRzLmp1c3RpZnlJdGVtcyA9IGp1c3RpZnlJdGVtcztcbnZhciBqdXN0aWZ5U2VsZiA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnanVzdGlmeVNlbGYnXG59KTtcbmV4cG9ydHMuanVzdGlmeVNlbGYgPSBqdXN0aWZ5U2VsZjtcbnZhciBmbGV4Ym94ID0gKDAsIF9jb21wb3NlLmRlZmF1bHQpKGZsZXhCYXNpcywgZmxleERpcmVjdGlvbiwgZmxleFdyYXAsIGp1c3RpZnlDb250ZW50LCBhbGlnbkl0ZW1zLCBhbGlnbkNvbnRlbnQsIG9yZGVyLCBmbGV4LCBmbGV4R3JvdywgZmxleFNocmluaywgYWxpZ25TZWxmLCBqdXN0aWZ5SXRlbXMsIGp1c3RpZnlTZWxmKTtcbnZhciBfZGVmYXVsdCA9IGZsZXhib3g7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmdyaWRBcmVhID0gZXhwb3J0cy5ncmlkVGVtcGxhdGVBcmVhcyA9IGV4cG9ydHMuZ3JpZFRlbXBsYXRlUm93cyA9IGV4cG9ydHMuZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IGV4cG9ydHMuZ3JpZEF1dG9Sb3dzID0gZXhwb3J0cy5ncmlkQXV0b0NvbHVtbnMgPSBleHBvcnRzLmdyaWRBdXRvRmxvdyA9IGV4cG9ydHMuZ3JpZFJvdyA9IGV4cG9ydHMuZ3JpZENvbHVtbiA9IGV4cG9ydHMuZ3JpZFJvd0dhcCA9IGV4cG9ydHMuZ3JpZENvbHVtbkdhcCA9IGV4cG9ydHMuZ3JpZEdhcCA9IHZvaWQgMDtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3R5bGVcIikpO1xuXG52YXIgX2NvbXBvc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvc2VcIikpO1xuXG52YXIgZ3JpZEdhcCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZ3JpZEdhcCdcbn0pO1xuZXhwb3J0cy5ncmlkR2FwID0gZ3JpZEdhcDtcbnZhciBncmlkQ29sdW1uR2FwID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdncmlkQ29sdW1uR2FwJ1xufSk7XG5leHBvcnRzLmdyaWRDb2x1bW5HYXAgPSBncmlkQ29sdW1uR2FwO1xudmFyIGdyaWRSb3dHYXAgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2dyaWRSb3dHYXAnXG59KTtcbmV4cG9ydHMuZ3JpZFJvd0dhcCA9IGdyaWRSb3dHYXA7XG52YXIgZ3JpZENvbHVtbiA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZ3JpZENvbHVtbidcbn0pO1xuZXhwb3J0cy5ncmlkQ29sdW1uID0gZ3JpZENvbHVtbjtcbnZhciBncmlkUm93ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdncmlkUm93J1xufSk7XG5leHBvcnRzLmdyaWRSb3cgPSBncmlkUm93O1xudmFyIGdyaWRBdXRvRmxvdyA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZ3JpZEF1dG9GbG93J1xufSk7XG5leHBvcnRzLmdyaWRBdXRvRmxvdyA9IGdyaWRBdXRvRmxvdztcbnZhciBncmlkQXV0b0NvbHVtbnMgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2dyaWRBdXRvQ29sdW1ucydcbn0pO1xuZXhwb3J0cy5ncmlkQXV0b0NvbHVtbnMgPSBncmlkQXV0b0NvbHVtbnM7XG52YXIgZ3JpZEF1dG9Sb3dzID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdncmlkQXV0b1Jvd3MnXG59KTtcbmV4cG9ydHMuZ3JpZEF1dG9Sb3dzID0gZ3JpZEF1dG9Sb3dzO1xudmFyIGdyaWRUZW1wbGF0ZUNvbHVtbnMgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUNvbHVtbnMnXG59KTtcbmV4cG9ydHMuZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IGdyaWRUZW1wbGF0ZUNvbHVtbnM7XG52YXIgZ3JpZFRlbXBsYXRlUm93cyA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlUm93cydcbn0pO1xuZXhwb3J0cy5ncmlkVGVtcGxhdGVSb3dzID0gZ3JpZFRlbXBsYXRlUm93cztcbnZhciBncmlkVGVtcGxhdGVBcmVhcyA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQXJlYXMnXG59KTtcbmV4cG9ydHMuZ3JpZFRlbXBsYXRlQXJlYXMgPSBncmlkVGVtcGxhdGVBcmVhcztcbnZhciBncmlkQXJlYSA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZ3JpZEFyZWEnXG59KTtcbmV4cG9ydHMuZ3JpZEFyZWEgPSBncmlkQXJlYTtcbnZhciBncmlkID0gKDAsIF9jb21wb3NlLmRlZmF1bHQpKGdyaWRHYXAsIGdyaWRDb2x1bW5HYXAsIGdyaWRSb3dHYXAsIGdyaWRDb2x1bW4sIGdyaWRSb3csIGdyaWRBdXRvRmxvdywgZ3JpZEF1dG9Db2x1bW5zLCBncmlkQXV0b1Jvd3MsIGdyaWRUZW1wbGF0ZUNvbHVtbnMsIGdyaWRUZW1wbGF0ZVJvd3MsIGdyaWRUZW1wbGF0ZUFyZWFzLCBncmlkQXJlYSk7XG52YXIgX2RlZmF1bHQgPSBncmlkO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5iZ2NvbG9yID0gZXhwb3J0cy5jb2xvciA9IHZvaWQgMDtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3R5bGVcIikpO1xuXG52YXIgX2NvbXBvc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvc2VcIikpO1xuXG52YXIgY29sb3IgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2NvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnRzLmNvbG9yID0gY29sb3I7XG52YXIgYmdjb2xvciA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnYmdjb2xvcicsXG4gIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnRzLmJnY29sb3IgPSBiZ2NvbG9yO1xudmFyIHBhbGV0dGUgPSAoMCwgX2NvbXBvc2UuZGVmYXVsdCkoY29sb3IsIGJnY29sb3IpO1xudmFyIF9kZWZhdWx0ID0gcGFsZXR0ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMubGVmdCA9IGV4cG9ydHMuYm90dG9tID0gZXhwb3J0cy5yaWdodCA9IGV4cG9ydHMudG9wID0gZXhwb3J0cy56SW5kZXggPSBleHBvcnRzLnBvc2l0aW9uID0gdm9pZCAwO1xuXG52YXIgX3N0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zdHlsZVwiKSk7XG5cbnZhciBfY29tcG9zZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9zZVwiKSk7XG5cbnZhciBwb3NpdGlvbiA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAncG9zaXRpb24nXG59KTtcbmV4cG9ydHMucG9zaXRpb24gPSBwb3NpdGlvbjtcbnZhciB6SW5kZXggPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ3pJbmRleCcsXG4gIHRoZW1lS2V5OiAnekluZGV4J1xufSk7XG5leHBvcnRzLnpJbmRleCA9IHpJbmRleDtcbnZhciB0b3AgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ3RvcCdcbn0pO1xuZXhwb3J0cy50b3AgPSB0b3A7XG52YXIgcmlnaHQgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ3JpZ2h0J1xufSk7XG5leHBvcnRzLnJpZ2h0ID0gcmlnaHQ7XG52YXIgYm90dG9tID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdib3R0b20nXG59KTtcbmV4cG9ydHMuYm90dG9tID0gYm90dG9tO1xudmFyIGxlZnQgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2xlZnQnXG59KTtcbmV4cG9ydHMubGVmdCA9IGxlZnQ7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY29tcG9zZS5kZWZhdWx0KShwb3NpdGlvbiwgekluZGV4LCB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmJveFNpemluZyA9IGV4cG9ydHMuc2l6ZUhlaWdodCA9IGV4cG9ydHMuc2l6ZVdpZHRoID0gZXhwb3J0cy5taW5IZWlnaHQgPSBleHBvcnRzLm1heEhlaWdodCA9IGV4cG9ydHMuaGVpZ2h0ID0gZXhwb3J0cy5taW5XaWR0aCA9IGV4cG9ydHMubWF4V2lkdGggPSBleHBvcnRzLndpZHRoID0gdm9pZCAwO1xuXG52YXIgX3N0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zdHlsZVwiKSk7XG5cbnZhciBfY29tcG9zZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9zZVwiKSk7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPD0gMSA/IFwiXCIuY29uY2F0KHZhbHVlICogMTAwLCBcIiVcIikgOiB2YWx1ZTtcbn1cblxudmFyIHdpZHRoID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydHMud2lkdGggPSB3aWR0aDtcbnZhciBtYXhXaWR0aCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnbWF4V2lkdGgnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnRzLm1heFdpZHRoID0gbWF4V2lkdGg7XG52YXIgbWluV2lkdGggPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ21pbldpZHRoJyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0cy5taW5XaWR0aCA9IG1pbldpZHRoO1xudmFyIGhlaWdodCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0cy5oZWlnaHQgPSBoZWlnaHQ7XG52YXIgbWF4SGVpZ2h0ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdtYXhIZWlnaHQnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnRzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbnZhciBtaW5IZWlnaHQgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ21pbkhlaWdodCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydHMubWluSGVpZ2h0ID0gbWluSGVpZ2h0O1xudmFyIHNpemVXaWR0aCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnd2lkdGgnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnRzLnNpemVXaWR0aCA9IHNpemVXaWR0aDtcbnZhciBzaXplSGVpZ2h0ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnRzLnNpemVIZWlnaHQgPSBzaXplSGVpZ2h0O1xudmFyIGJveFNpemluZyA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnYm94U2l6aW5nJ1xufSk7XG5leHBvcnRzLmJveFNpemluZyA9IGJveFNpemluZztcbnZhciBzaXppbmcgPSAoMCwgX2NvbXBvc2UuZGVmYXVsdCkod2lkdGgsIG1heFdpZHRoLCBtaW5XaWR0aCwgaGVpZ2h0LCBtYXhIZWlnaHQsIG1pbkhlaWdodCwgYm94U2l6aW5nKTtcbnZhciBfZGVmYXVsdCA9IHNpemluZztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3R5bGVcIikpO1xuXG52YXIgYm94U2hhZG93ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdib3hTaGFkb3cnLFxuICB0aGVtZUtleTogJ3NoYWRvd3MnXG59KTtcbnZhciBfZGVmYXVsdCA9IGJveFNoYWRvdztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9yZXNwb25zaXZlUHJvcFR5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Jlc3BvbnNpdmVQcm9wVHlwZVwiKSk7XG5cbnZhciBfYnJlYWtwb2ludHMgPSByZXF1aXJlKFwiLi9icmVha3BvaW50c1wiKTtcblxuZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaXRlbSkge1xuICAgIHJldHVybiBhY2MgJiYgYWNjW2l0ZW1dID8gYWNjW2l0ZW1dIDogbnVsbDtcbiAgfSwgb2JqKTtcbn1cblxuZnVuY3Rpb24gc3R5bGUob3B0aW9ucykge1xuICB2YXIgcHJvcCA9IG9wdGlvbnMucHJvcCxcbiAgICAgIF9vcHRpb25zJGNzc1Byb3BlcnR5ID0gb3B0aW9ucy5jc3NQcm9wZXJ0eSxcbiAgICAgIGNzc1Byb3BlcnR5ID0gX29wdGlvbnMkY3NzUHJvcGVydHkgPT09IHZvaWQgMCA/IG9wdGlvbnMucHJvcCA6IF9vcHRpb25zJGNzc1Byb3BlcnR5LFxuICAgICAgdGhlbWVLZXkgPSBvcHRpb25zLnRoZW1lS2V5LFxuICAgICAgdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4ocHJvcHMpIHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG5cbiAgICB2YXIgc3R5bGVGcm9tUHJvcFZhbHVlID0gZnVuY3Rpb24gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZUZpbmFsKSB7XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhlbWVNYXBwaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nKHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nW3Byb3BWYWx1ZUZpbmFsXSB8fCBwcm9wVmFsdWVGaW5hbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gZ2V0UGF0aCh0aGVtZU1hcHBpbmcsIHByb3BWYWx1ZUZpbmFsKSB8fCBwcm9wVmFsdWVGaW5hbDtcblxuICAgICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNzc1Byb3BlcnR5LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoMCwgX2JyZWFrcG9pbnRzLmhhbmRsZUJyZWFrcG9pbnRzKShwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9O1xuXG4gIGZuLnByb3BUeXBlcyA9IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIHByb3AsIF9yZXNwb25zaXZlUHJvcFR5cGUuZGVmYXVsdCkgOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBbcHJvcF07XG4gIHJldHVybiBmbjtcbn1cblxudmFyIF9kZWZhdWx0ID0gc3R5bGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnRleHRBbGlnbiA9IGV4cG9ydHMubGluZUhlaWdodCA9IGV4cG9ydHMubGV0dGVyU3BhY2luZyA9IGV4cG9ydHMuZm9udFdlaWdodCA9IGV4cG9ydHMuZm9udFN0eWxlID0gZXhwb3J0cy5mb250U2l6ZSA9IGV4cG9ydHMuZm9udEZhbWlseSA9IHZvaWQgMDtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3R5bGVcIikpO1xuXG52YXIgX2NvbXBvc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvc2VcIikpO1xuXG52YXIgZm9udEZhbWlseSA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZm9udEZhbWlseScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0cy5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcbnZhciBmb250U2l6ZSA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZm9udFNpemUnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydHMuZm9udFNpemUgPSBmb250U2l6ZTtcbnZhciBmb250U3R5bGUgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2ZvbnRTdHlsZScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0cy5mb250U3R5bGUgPSBmb250U3R5bGU7XG52YXIgZm9udFdlaWdodCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZm9udFdlaWdodCcsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0cy5mb250V2VpZ2h0ID0gZm9udFdlaWdodDtcbnZhciBsZXR0ZXJTcGFjaW5nID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdsZXR0ZXJTcGFjaW5nJ1xufSk7XG5leHBvcnRzLmxldHRlclNwYWNpbmcgPSBsZXR0ZXJTcGFjaW5nO1xudmFyIGxpbmVIZWlnaHQgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2xpbmVIZWlnaHQnXG59KTtcbmV4cG9ydHMubGluZUhlaWdodCA9IGxpbmVIZWlnaHQ7XG52YXIgdGV4dEFsaWduID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICd0ZXh0QWxpZ24nXG59KTtcbmV4cG9ydHMudGV4dEFsaWduID0gdGV4dEFsaWduO1xudmFyIHR5cG9ncmFwaHkgPSAoMCwgX2NvbXBvc2UuZGVmYXVsdCkoZm9udEZhbWlseSwgZm9udFNpemUsIGZvbnRTdHlsZSwgZm9udFdlaWdodCwgbGV0dGVyU3BhY2luZywgbGluZUhlaWdodCwgdGV4dEFsaWduKTtcbnZhciBfZGVmYXVsdCA9IHR5cG9ncmFwaHk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tZXJnZVwiKSk7XG5cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3R5bGVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4ocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZSkge1xuICAgICAgdmFyIG91dHB1dCA9IHN0eWxlKHByb3BzKTtcblxuICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICByZXR1cm4gKDAsIF9tZXJnZS5kZWZhdWx0KShhY2MsIG91dHB1dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9OyAvLyBBbHRlcm5hdGl2ZSBhcHByb2FjaCB0aGF0IGRvZXNuJ3QgeWllbGQgYW55IHBlcmZvcm1hbmNlIGdhaW4uXG4gIC8vIGNvbnN0IGhhbmRsZXJzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4ge1xuICAvLyAgIHN0eWxlLmZpbHRlclByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gIC8vICAgICBhY2NbcHJvcF0gPSBzdHlsZTtcbiAgLy8gICB9KTtcbiAgLy8gICByZXR1cm4gYWNjO1xuICAvLyB9LCB7fSk7XG4gIC8vIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAvLyAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChhY2MsIHByb3ApID0+IHtcbiAgLy8gICAgIGlmIChoYW5kbGVyc1twcm9wXSkge1xuICAvLyAgICAgICByZXR1cm4gbWVyZ2UoYWNjLCBoYW5kbGVyc1twcm9wXShwcm9wcykpO1xuICAvLyAgICAgfVxuICAvLyAgICAgcmV0dXJuIGFjYztcbiAgLy8gICB9LCB7fSk7XG4gIC8vIH07XG5cblxuICBmbi5wcm9wVHlwZXMgPSBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyA/IHN0eWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3R5bGUpIHtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KShhY2MsIHN0eWxlLnByb3BUeXBlcyk7XG4gIH0sIHt9KSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IHN0eWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3R5bGUpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChzdHlsZS5maWx0ZXJQcm9wcyk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGZuO1xufVxuXG52YXIgX2RlZmF1bHQgPSBjb21wb3NlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGVVbmFyeVNwYWNpbmcgPSBjcmVhdGVVbmFyeVNwYWNpbmc7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfc2xpY2VkVG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIikpO1xuXG52YXIgX3Jlc3BvbnNpdmVQcm9wVHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVzcG9uc2l2ZVByb3BUeXBlXCIpKTtcblxudmFyIF9icmVha3BvaW50cyA9IHJlcXVpcmUoXCIuL2JyZWFrcG9pbnRzXCIpO1xuXG52YXIgX21lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tZXJnZVwiKSk7XG5cbnZhciBfbWVtb2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWVtb2l6ZVwiKSk7XG5cbnZhciBwcm9wZXJ0aWVzID0ge1xuICBtOiAnbWFyZ2luJyxcbiAgcDogJ3BhZGRpbmcnXG59O1xudmFyIGRpcmVjdGlvbnMgPSB7XG4gIHQ6ICdUb3AnLFxuICByOiAnUmlnaHQnLFxuICBiOiAnQm90dG9tJyxcbiAgbDogJ0xlZnQnLFxuICB4OiBbJ0xlZnQnLCAnUmlnaHQnXSxcbiAgeTogWydUb3AnLCAnQm90dG9tJ11cbn07XG52YXIgYWxpYXNlcyA9IHtcbiAgbWFyZ2luWDogJ214JyxcbiAgbWFyZ2luWTogJ215JyxcbiAgcGFkZGluZ1g6ICdweCcsXG4gIHBhZGRpbmdZOiAncHknXG59OyAvLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuXG52YXIgZ2V0Q3NzUHJvcGVydGllcyA9ICgwLCBfbWVtb2l6ZS5kZWZhdWx0KShmdW5jdGlvbiAocHJvcCkge1xuICAvLyBJdCdzIG5vdCBhIHNob3J0aGFuZCBub3RhdGlvbi5cbiAgaWYgKHByb3AubGVuZ3RoID4gMikge1xuICAgIGlmIChhbGlhc2VzW3Byb3BdKSB7XG4gICAgICBwcm9wID0gYWxpYXNlc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3Akc3BsaXQgPSBwcm9wLnNwbGl0KCcnKSxcbiAgICAgIF9wcm9wJHNwbGl0MiA9ICgwLCBfc2xpY2VkVG9BcnJheTIuZGVmYXVsdCkoX3Byb3Akc3BsaXQsIDIpLFxuICAgICAgYSA9IF9wcm9wJHNwbGl0MlswXSxcbiAgICAgIGIgPSBfcHJvcCRzcGxpdDJbMV07XG5cbiAgdmFyIHByb3BlcnR5ID0gcHJvcGVydGllc1thXTtcbiAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGZ1bmN0aW9uIChkaXIpIHtcbiAgICByZXR1cm4gcHJvcGVydHkgKyBkaXI7XG4gIH0pIDogW3Byb3BlcnR5ICsgZGlyZWN0aW9uXTtcbn0pO1xudmFyIHNwYWNpbmdLZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJ107XG5cbmZ1bmN0aW9uIGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSkge1xuICB2YXIgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyB8fCA4O1xuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWJzKSB7XG4gICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhYnMgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBFeHBlY3RlZCBzcGFjaW5nIGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyLCBnb3QgXCIuY29uY2F0KGFicywgXCIuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nICogYWJzO1xuICAgIH07XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZVNwYWNpbmcpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhYnMpIHtcbiAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoYWJzID4gdGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgKFwiLmNvbmNhdChhYnMsIFwiKSBvdmVyZmxvd3MuXCIpLCBcIlRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTogXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyksIFwiLlwiKSwgXCJcIi5jb25jYXQoYWJzLCBcIiA+IFwiKS5jb25jYXQodGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEsIFwiLCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGhlbWVTcGFjaW5nO1xuICB9XG5cbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGB0aGVtZS5zcGFjaW5nYCB2YWx1ZSAoXCIuY29uY2F0KHRoZW1lU3BhY2luZywgXCIpIGlzIGludmFsaWQuXCIpLCAnSXQgc2hvdWxkIGJlIGEgbnVtYmVyLCBhbiBhcnJheSBvciBhIGZ1bmN0aW9uLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSkge1xuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcHJvcFZhbHVlO1xuICB9XG5cbiAgdmFyIGFicyA9IE1hdGguYWJzKHByb3BWYWx1ZSk7XG4gIHZhciB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybWVyKGFicyk7XG5cbiAgaWYgKHByb3BWYWx1ZSA+PSAwKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gLXRyYW5zZm9ybWVkO1xuICB9XG5cbiAgcmV0dXJuIFwiLVwiLmNvbmNhdCh0cmFuc2Zvcm1lZCk7XG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BWYWx1ZSkge1xuICAgIHJldHVybiBjc3NQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjc3NQcm9wZXJ0eSkge1xuICAgICAgYWNjW2Nzc1Byb3BlcnR5XSA9IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNwYWNpbmcocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWU7XG4gIHZhciB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgLy8gVXNpbmcgYSBoYXNoIGNvbXB1dGF0aW9uIG92ZXIgYW4gYXJyYXkgaXRlcmF0aW9uIGNvdWxkIGJlIGZhc3RlciwgYnV0IHdpdGggb25seSAyOCBpdGVtcyxcbiAgICAvLyBpdCdzIGRvZXNuJ3Qgd29ydGggdGhlIGJ1bmRsZSBzaXplLlxuICAgIGlmIChzcGFjaW5nS2V5cy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNzc1Byb3BlcnRpZXMgPSBnZXRDc3NQcm9wZXJ0aWVzKHByb3ApO1xuICAgIHZhciBzdHlsZUZyb21Qcm9wVmFsdWUgPSBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpO1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICByZXR1cm4gKDAsIF9icmVha3BvaW50cy5oYW5kbGVCcmVha3BvaW50cykocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfSkucmVkdWNlKF9tZXJnZS5kZWZhdWx0LCB7fSk7XG59XG5cbnNwYWNpbmcucHJvcFR5cGVzID0gXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gIG9ialtrZXldID0gX3Jlc3BvbnNpdmVQcm9wVHlwZS5kZWZhdWx0O1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG52YXIgX2RlZmF1bHQgPSBzcGFjaW5nO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuXG52YXIgX2RlZmF1bHQgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdtdWkubmVzdGVkJykgOiAnX19USEVNRV9ORVNURURfXyc7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciBfZXh0ZW5kcyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKSk7XG52YXIgaXNJbkJyb3dzZXIgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnaXMtaW4tYnJvd3NlcicpKTtcbnZhciB3YXJuaW5nID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3Rpbnktd2FybmluZycpKTtcbnZhciBfY3JlYXRlQ2xhc3MgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpKTtcbnZhciBfaW5oZXJpdHNMb29zZSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UnKSk7XG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZCcpKTtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnKSk7XG5cbnZhciBwbGFpbk9iamVjdENvbnN0cnVyY3RvciA9IHt9LmNvbnN0cnVjdG9yO1xuZnVuY3Rpb24gY2xvbmVTdHlsZShzdHlsZSkge1xuICBpZiAoc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2Ygc3R5bGUgIT09ICdvYmplY3QnKSByZXR1cm4gc3R5bGU7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkgcmV0dXJuIHN0eWxlLm1hcChjbG9uZVN0eWxlKTtcbiAgaWYgKHN0eWxlLmNvbnN0cnVjdG9yICE9PSBwbGFpbk9iamVjdENvbnN0cnVyY3RvcikgcmV0dXJuIHN0eWxlO1xuICB2YXIgbmV3U3R5bGUgPSB7fTtcblxuICBmb3IgKHZhciBuYW1lIGluIHN0eWxlKSB7XG4gICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHN0eWxlW25hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuZXdTdHlsZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICd1bm5hbWVkJztcbiAgfVxuXG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcbiAgdmFyIGRlY2xDb3B5ID0gY2xvbmVTdHlsZShkZWNsKTtcbiAgdmFyIHJ1bGUgPSBqc3MucGx1Z2lucy5vbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xuICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7IC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cblxuICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gVW5rbm93biBydWxlIFwiICsgbmFtZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIGpvaW4gPSBmdW5jdGlvbiBqb2luKHZhbHVlLCBieSkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgIC8vIFJlbW92ZSAhaW1wb3J0YW50IGZyb20gdGhlIHZhbHVlLCBpdCB3aWxsIGJlIHJlYWRkZWQgbGF0ZXIuXG4gICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSBieTtcbiAgICByZXN1bHQgKz0gdmFsdWVbaV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbi8qKlxuICogQ29udmVydHMgYXJyYXkgdmFsdWVzIHRvIHN0cmluZy5cbiAqXG4gKiBgbWFyZ2luOiBbWyc1cHgnLCAnMTBweCddXWAgPiBgbWFyZ2luOiA1cHggMTBweDtgXG4gKiBgYm9yZGVyOiBbJzFweCcsICcycHgnXWAgPiBgYm9yZGVyOiAxcHgsIDJweDtgXG4gKiBgbWFyZ2luOiBbWyc1cHgnLCAnMTBweCddLCAnIWltcG9ydGFudCddYCA+IGBtYXJnaW46IDVweCAxMHB4ICFpbXBvcnRhbnQ7YFxuICogYGNvbG9yOiBbJ3JlZCcsICFpbXBvcnRhbnRdYCA+IGBjb2xvcjogcmVkICFpbXBvcnRhbnQ7YFxuICovXG5cblxuZnVuY3Rpb24gdG9Dc3NWYWx1ZSh2YWx1ZSwgaWdub3JlSW1wb3J0YW50KSB7XG4gIGlmIChpZ25vcmVJbXBvcnRhbnQgPT09IHZvaWQgMCkge1xuICAgIGlnbm9yZUltcG9ydGFudCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB2YXIgY3NzVmFsdWUgPSAnJzsgLy8gU3VwcG9ydCBzcGFjZSBzZXBhcmF0ZWQgdmFsdWVzIHZpYSBgW1snNXB4JywgJzEwcHgnXV1gLlxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlWzBdKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICAgIGlmIChjc3NWYWx1ZSkgY3NzVmFsdWUgKz0gJywgJztcbiAgICAgIGNzc1ZhbHVlICs9IGpvaW4odmFsdWVbaV0sICcgJyk7XG4gICAgfVxuICB9IGVsc2UgY3NzVmFsdWUgPSBqb2luKHZhbHVlLCAnLCAnKTsgLy8gQWRkICFpbXBvcnRhbnQsIGJlY2F1c2UgaXQgd2FzIGlnbm9yZWQuXG5cblxuICBpZiAoIWlnbm9yZUltcG9ydGFudCAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgY3NzVmFsdWUgKz0gJyAhaW1wb3J0YW50JztcbiAgfVxuXG4gIHJldHVybiBjc3NWYWx1ZTtcbn1cblxuLyoqXG4gKiBJbmRlbnQgYSBzdHJpbmcuXG4gKiBodHRwOi8vanNwZXJmLmNvbS9hcnJheS1qb2luLXZzLWZvclxuICovXG5mdW5jdGlvbiBpbmRlbnRTdHIoc3RyLCBpbmRlbnQpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpbmRlbnQ7IGluZGV4KyspIHtcbiAgICByZXN1bHQgKz0gJyAgJztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzdHI7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgUnVsZSB0byBDU1Mgc3RyaW5nLlxuICovXG5cblxuZnVuY3Rpb24gdG9Dc3Moc2VsZWN0b3IsIHN0eWxlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICghc3R5bGUpIHJldHVybiByZXN1bHQ7XG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRpbmRlbnQgPSBfb3B0aW9ucy5pbmRlbnQsXG4gICAgICBpbmRlbnQgPSBfb3B0aW9ucyRpbmRlbnQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRpbmRlbnQ7XG4gIHZhciBmYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3M7XG4gIGlmIChzZWxlY3RvcikgaW5kZW50Kys7IC8vIEFwcGx5IGZhbGxiYWNrcyBmaXJzdC5cblxuICBpZiAoZmFsbGJhY2tzKSB7XG4gICAgLy8gQXJyYXkgc3ludGF4IHtmYWxsYmFja3M6IFt7cHJvcDogdmFsdWV9XX1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShmYWxsYmFja3MpKSB7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZmFsbGJhY2tzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgZmFsbGJhY2sgPSBmYWxsYmFja3NbaW5kZXhdO1xuXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZmFsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBmYWxsYmFja1twcm9wXTtcblxuICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcIiArIGluZGVudFN0cihwcm9wICsgXCI6IFwiICsgdG9Dc3NWYWx1ZSh2YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0IHN5bnRheCB7ZmFsbGJhY2tzOiB7cHJvcDogdmFsdWV9fVxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gZmFsbGJhY2tzKSB7XG4gICAgICAgIHZhciBfdmFsdWUgPSBmYWxsYmFja3NbX3Byb3BdO1xuXG4gICAgICAgIGlmIChfdmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgICByZXN1bHQgKz0gXCJcIiArIGluZGVudFN0cihfcHJvcCArIFwiOiBcIiArIHRvQ3NzVmFsdWUoX3ZhbHVlKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgX3Byb3AyIGluIHN0eWxlKSB7XG4gICAgdmFyIF92YWx1ZTIgPSBzdHlsZVtfcHJvcDJdO1xuXG4gICAgaWYgKF92YWx1ZTIgIT0gbnVsbCAmJiBfcHJvcDIgIT09ICdmYWxsYmFja3MnKSB7XG4gICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICByZXN1bHQgKz0gXCJcIiArIGluZGVudFN0cihfcHJvcDIgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZTIpICsgXCI7XCIsIGluZGVudCk7XG4gICAgfVxuICB9IC8vIEFsbG93IGVtcHR5IHN0eWxlIGluIHRoaXMgY2FzZSwgYmVjYXVzZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYWRkZWQgZHluYW1pY2FsbHkuXG5cblxuICBpZiAoIXJlc3VsdCAmJiAhb3B0aW9ucy5hbGxvd0VtcHR5KSByZXR1cm4gcmVzdWx0OyAvLyBXaGVuIHJ1bGUgaXMgYmVpbmcgc3RyaW5naWZpZWQgYmVmb3JlIHNlbGVjdG9yIHdhcyBkZWZpbmVkLlxuXG4gIGlmICghc2VsZWN0b3IpIHJldHVybiByZXN1bHQ7XG4gIGluZGVudC0tO1xuICBpZiAocmVzdWx0KSByZXN1bHQgPSBcIlxcblwiICsgcmVzdWx0ICsgXCJcXG5cIjtcbiAgcmV0dXJuIGluZGVudFN0cihzZWxlY3RvciArIFwiIHtcIiArIHJlc3VsdCwgaW5kZW50KSArIGluZGVudFN0cignfScsIGluZGVudCk7XG59XG5cbnZhciBlc2NhcGVSZWdleCA9IC8oW1tcXF0uIyokPjwrfj18XjooKSxcIidgXFxzXSkvZztcbnZhciBuYXRpdmVFc2NhcGUgPSB0eXBlb2YgQ1NTICE9PSAndW5kZWZpbmVkJyAmJiBDU1MuZXNjYXBlO1xudmFyIGVzY2FwZSA9IChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBuYXRpdmVFc2NhcGUgPyBuYXRpdmVFc2NhcGUoc3RyKSA6IHN0ci5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnXFxcXCQxJyk7XG59KTtcblxudmFyIEJhc2VTdHlsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc3R5bGUnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB2YXIgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBSZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgaWYgKHNoZWV0KSB0aGlzLnJlbmRlcmVyID0gc2hlZXQucmVuZGVyZXI7ZWxzZSBpZiAoUmVuZGVyZXIpIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCBhIHN0eWxlIHByb3BlcnR5LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBCYXNlU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucHJvcCA9IGZ1bmN0aW9uIHByb3AobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAvLyBJdCdzIGEgZ2V0dGVyLlxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5zdHlsZVtuYW1lXTsgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHZhbHVlIGhhcyBub3QgY2hhbmdlZC5cblxuICAgIHZhciBmb3JjZSA9IG9wdGlvbnMgPyBvcHRpb25zLmZvcmNlIDogZmFsc2U7XG4gICAgaWYgKCFmb3JjZSAmJiB0aGlzLnN0eWxlW25hbWVdID09PSB2YWx1ZSkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5wcm9jZXNzICE9PSBmYWxzZSkge1xuICAgICAgbmV3VmFsdWUgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25DaGFuZ2VWYWx1ZSh2YWx1ZSwgbmFtZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIGlzRW1wdHkgPSBuZXdWYWx1ZSA9PSBudWxsIHx8IG5ld1ZhbHVlID09PSBmYWxzZTtcbiAgICB2YXIgaXNEZWZpbmVkID0gbmFtZSBpbiB0aGlzLnN0eWxlOyAvLyBWYWx1ZSBpcyBlbXB0eSBhbmQgd2Fzbid0IGRlZmluZWQgYmVmb3JlLlxuXG4gICAgaWYgKGlzRW1wdHkgJiYgIWlzRGVmaW5lZCAmJiAhZm9yY2UpIHJldHVybiB0aGlzOyAvLyBXZSBhcmUgZ29pbmcgdG8gcmVtb3ZlIHRoaXMgdmFsdWUuXG5cbiAgICB2YXIgcmVtb3ZlID0gaXNFbXB0eSAmJiBpc0RlZmluZWQ7XG4gICAgaWYgKHJlbW92ZSkgZGVsZXRlIHRoaXMuc3R5bGVbbmFtZV07ZWxzZSB0aGlzLnN0eWxlW25hbWVdID0gbmV3VmFsdWU7IC8vIFJlbmRlcmFibGUgaXMgZGVmaW5lZCBpZiBTdHlsZVNoZWV0IG9wdGlvbiBgbGlua2AgaXMgdHJ1ZS5cblxuICAgIGlmICh0aGlzLnJlbmRlcmFibGUgJiYgdGhpcy5yZW5kZXJlcikge1xuICAgICAgaWYgKHJlbW92ZSkgdGhpcy5yZW5kZXJlci5yZW1vdmVQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUpO2Vsc2UgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5hdHRhY2hlZCkge1xuICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3R5bGVSdWxlO1xufSgpO1xudmFyIFN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3R5bGVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwodGhpcywga2V5LCBzdHlsZSwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RvclRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuaWQgPSB2b2lkIDA7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yLFxuICAgICAgICBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB9IGVsc2UgaWYgKHNjb3BlZCAhPT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmlkID0gZ2VuZXJhdGVJZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgc2hlZXQpO1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gXCIuXCIgKyBlc2NhcGUoX3RoaXMuaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICovXG4gIF9wcm90bzIuYXBwbHlUbyA9IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICBpZiAocmVuZGVyZXIpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBqc29uID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gdG9Dc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLnNlbGVjdG9yVGV4dCwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZSB8fCAhcmVuZGVyZXIpIHJldHVybjtcbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gcmVuZGVyZXIuc2V0U2VsZWN0b3IocmVuZGVyYWJsZSwgc2VsZWN0b3IpOyAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cblxuICAgICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlcGxhY2VSdWxlKHJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5TdHlsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyB8fCBvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHlsZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBhdFJlZ0V4cCA9IC9AKFtcXHctXSspLztcbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xuXG52YXIgQ29uZGl0aW9uYWxSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmF0ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMucXVlcnkgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTsgLy8gS2V5IG1pZ2h0IGNvbnRhaW4gYSB1bmlxdWUgc3VmZml4IGluIGNhc2UgdGhlIGBuYW1lYCBwYXNzZWQgYnkgdXNlciB3YXMgZHVwbGljYXRlLlxuXG4gICAgdGhpcy5xdWVyeSA9IG9wdGlvbnMubmFtZTtcbiAgICB2YXIgYXRNYXRjaCA9IGtleS5tYXRjaChhdFJlZ0V4cCk7XG4gICAgdGhpcy5hdCA9IGF0TWF0Y2ggPyBhdE1hdGNoWzFdIDogJ3Vua25vd24nO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENvbmRpdGlvbmFsUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmNoaWxkcmVuO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeSArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyB0aGlzLnF1ZXJ5ICsgXCIge1xcblwiICsgY2hpbGRyZW4gKyBcIlxcbn1cIiA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwID0gL0BtZWRpYXxAc3VwcG9ydHNcXHMrLztcbnZhciBwbHVnaW5Db25kaXRpb25hbFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cC50ZXN0KGtleSkgPyBuZXcgQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgbmFtZVJlZ0V4cCA9IC9Aa2V5ZnJhbWVzXFxzKyhbXFx3LV0rKS87XG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xuXG52YXIgS2V5ZnJhbWVzUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmF0ID0gJ0BrZXlmcmFtZXMnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIG5hbWVNYXRjaCA9IGtleS5tYXRjaChuYW1lUmVnRXhwKTtcblxuICAgIGlmIChuYW1lTWF0Y2ggJiYgbmFtZU1hdGNoWzFdKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lTWF0Y2hbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9ICdub25hbWUnO1xuICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQmFkIGtleWZyYW1lcyBuYW1lIFwiICsga2V5KSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9IHRoaXMudHlwZSArIFwiLVwiICsgdGhpcy5uYW1lO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG4gICAgdGhpcy5pZCA9IHNjb3BlZCA9PT0gZmFsc2UgPyB0aGlzLm5hbWUgOiBlc2NhcGUoZ2VuZXJhdGVJZCh0aGlzLCBzaGVldCkpO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gZnJhbWVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBmcmFtZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIHBhcmVudDogdGhpc1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZXNSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuY2hpbGRyZW47XG5cbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge31cIjtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIGlmIChjaGlsZHJlbikgY2hpbGRyZW4gPSBcIlxcblwiICsgY2hpbGRyZW4gKyBcIlxcblwiO1xuICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge1wiICsgY2hpbGRyZW4gKyBcIn1cIjtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVzUnVsZTtcbn0oKTtcbnZhciBrZXlSZWdFeHAkMSA9IC9Aa2V5ZnJhbWVzXFxzKy87XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuXG52YXIgZmluZFJlZmVyZW5jZWRLZXlmcmFtZSA9IGZ1bmN0aW9uIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBrZXlmcmFtZXMpIHtcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbC5yZXBsYWNlKHJlZlJlZ0V4cCwgZnVuY3Rpb24gKG1hdGNoLCBuYW1lKSB7XG4gICAgICBpZiAobmFtZSBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lc1tuYW1lXTtcbiAgICAgIH1cblxuICAgICAgXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gUmVmZXJlbmNlZCBrZXlmcmFtZXMgcnVsZSBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkLlwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59O1xuLyoqXG4gKiBSZXBsYWNlIHRoZSByZWZlcmVuY2UgZm9yIGEgYW5pbWF0aW9uIG5hbWUuXG4gKi9cblxuXG52YXIgcmVwbGFjZVJlZiA9IGZ1bmN0aW9uIHJlcGxhY2VSZWYoc3R5bGUsIHByb3AsIGtleWZyYW1lcykge1xuICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgdmFyIHJlZktleWZyYW1lID0gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWx1ZSwga2V5ZnJhbWVzKTtcblxuICBpZiAocmVmS2V5ZnJhbWUgIT09IHZhbHVlKSB7XG4gICAgc3R5bGVbcHJvcF0gPSByZWZLZXlmcmFtZTtcbiAgfVxufTtcblxudmFyIHBsdWdpbiA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5UmVnRXhwJDEudGVzdChrZXkpID8gbmV3IEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIDogbnVsbDtcbiAgfSxcbiAgLy8gQW5pbWF0aW9uIG5hbWUgcmVmIHJlcGxhY2VyLlxuICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJyB8fCAhc2hlZXQpIHJldHVybiBzdHlsZTtcbiAgICBpZiAoJ2FuaW1hdGlvbi1uYW1lJyBpbiBzdHlsZSkgcmVwbGFjZVJlZihzdHlsZSwgJ2FuaW1hdGlvbi1uYW1lJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICBpZiAoJ2FuaW1hdGlvbicgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24nLCBzaGVldC5rZXlmcmFtZXMpO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcbiAgb25DaGFuZ2VWYWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWwsIHByb3AsIHJ1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSBydWxlLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoIXNoZWV0KSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIHN3aXRjaCAocHJvcCkge1xuICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgcmV0dXJuIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBzaGVldC5rZXlmcmFtZXMpO1xuXG4gICAgICBjYXNlICdhbmltYXRpb24tbmFtZSc6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBLZXlmcmFtZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CYXNlU3R5bGVSdWxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKEtleWZyYW1lUnVsZSwgX0Jhc2VTdHlsZVJ1bGUpO1xuXG4gIGZ1bmN0aW9uIEtleWZyYW1lUnVsZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQmFzZVN0eWxlUnVsZS5jYWxsLmFwcGx5KF9CYXNlU3R5bGVSdWxlLCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lUnVsZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcbiAgICB2YXIgb3B0cyA9IGxpbmsgPyBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgYWxsb3dFbXB0eTogdHJ1ZVxuICAgIH0pIDogb3B0aW9ucztcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdHMpO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZVJ1bGU7XG59KEJhc2VTdHlsZVJ1bGUpO1xudmFyIHBsdWdpbktleWZyYW1lUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG5ldyBLZXlmcmFtZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbnZhciBGb250RmFjZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdmb250LWZhY2UnO1xuICAgIHRoaXMuYXQgPSAnQGZvbnQtZmFjZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gRm9udEZhY2VSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5zdHlsZSkpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcblxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0ciArPSB0b0Nzcyh0aGlzLmF0LCB0aGlzLnN0eWxlW2luZGV4XSk7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gdG9Dc3ModGhpcy5hdCwgdGhpcy5zdHlsZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIEZvbnRGYWNlUnVsZTtcbn0oKTtcbnZhciBrZXlSZWdFeHAkMiA9IC9AZm9udC1mYWNlLztcbnZhciBwbHVnaW5Gb250RmFjZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4ga2V5UmVnRXhwJDIudGVzdChrZXkpID8gbmV3IEZvbnRGYWNlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBWaWV3cG9ydFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBWaWV3cG9ydFJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICd2aWV3cG9ydCc7XG4gICAgdGhpcy5hdCA9ICdAdmlld3BvcnQnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFZpZXdwb3J0UnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFZpZXdwb3J0UnVsZTtcbn0oKTtcbnZhciBwbHVnaW5WaWV3cG9ydFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4ga2V5ID09PSAnQHZpZXdwb3J0JyB8fCBrZXkgPT09ICdALW1zLXZpZXdwb3J0JyA/IG5ldyBWaWV3cG9ydFJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgU2ltcGxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdzaW1wbGUnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMudmFsdWUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXG4gIHZhciBfcHJvdG8gPSBTaW1wbGVSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcblxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMudmFsdWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0ciArPSB0aGlzLmtleSArIFwiIFwiICsgdGhpcy52YWx1ZVtpbmRleF0gKyBcIjtcIjtcbiAgICAgICAgaWYgKHRoaXMudmFsdWVbaW5kZXggKyAxXSkgc3RyICs9ICdcXG4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmtleSArIFwiIFwiICsgdGhpcy52YWx1ZSArIFwiO1wiO1xuICB9O1xuXG4gIHJldHVybiBTaW1wbGVSdWxlO1xufSgpO1xudmFyIGtleXNNYXAgPSB7XG4gICdAY2hhcnNldCc6IHRydWUsXG4gICdAaW1wb3J0JzogdHJ1ZSxcbiAgJ0BuYW1lc3BhY2UnOiB0cnVlXG59O1xudmFyIHBsdWdpblNpbXBsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4ga2V5IGluIGtleXNNYXAgPyBuZXcgU2ltcGxlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBwbHVnaW5zID0gW3BsdWdpblN0eWxlUnVsZSwgcGx1Z2luQ29uZGl0aW9uYWxSdWxlLCBwbHVnaW4sIHBsdWdpbktleWZyYW1lUnVsZSwgcGx1Z2luRm9udEZhY2VSdWxlLCBwbHVnaW5WaWV3cG9ydFJ1bGUsIHBsdWdpblNpbXBsZVJ1bGVdO1xuXG52YXIgZGVmYXVsdFVwZGF0ZU9wdGlvbnMgPSB7XG4gIHByb2Nlc3M6IHRydWVcbn07XG52YXIgZm9yY2VVcGRhdGVPcHRpb25zID0ge1xuICBmb3JjZTogdHJ1ZSxcbiAgcHJvY2VzczogdHJ1ZVxuICAvKipcbiAgICogQ29udGFpbnMgcnVsZXMgb2JqZWN0cyBhbmQgYWxsb3dzIGFkZGluZy9yZW1vdmluZyBldGMuXG4gICAqIElzIHVzZWQgZm9yIGUuZy4gYnkgYFN0eWxlU2hlZXRgIG9yIGBDb25kaXRpb25hbFJ1bGVgLlxuICAgKi9cblxufTtcblxudmFyIFJ1bGVMaXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLy8gUnVsZXMgcmVnaXN0cnkgZm9yIGFjY2VzcyBieSAuZ2V0KCkgbWV0aG9kLlxuICAvLyBJdCBjb250YWlucyB0aGUgc2FtZSBydWxlIHJlZ2lzdGVyZWQgYnkgbmFtZSBhbmQgYnkgc2VsZWN0b3IuXG4gIC8vIE9yaWdpbmFsIHN0eWxlcyBvYmplY3QuXG4gIC8vIFVzZWQgdG8gZW5zdXJlIGNvcnJlY3QgcnVsZXMgb3JkZXIuXG4gIGZ1bmN0aW9uIFJ1bGVMaXN0KG9wdGlvbnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9O1xuICAgIHRoaXMucmF3ID0ge307XG4gICAgdGhpcy5pbmRleCA9IFtdO1xuICAgIHRoaXMuY291bnRlciA9IDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuY2xhc3NlcyA9IG9wdGlvbnMuY2xhc3NlcztcbiAgICB0aGlzLmtleWZyYW1lcyA9IG9wdGlvbnMua2V5ZnJhbWVzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUuXG4gICAqXG4gICAqIFdpbGwgbm90IHJlbmRlciBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFJ1bGVMaXN0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKG5hbWUsIGRlY2wsIHJ1bGVPcHRpb25zKSB7XG4gICAgdmFyIF90aGlzJG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHBhcmVudCA9IF90aGlzJG9wdGlvbnMucGFyZW50LFxuICAgICAgICBzaGVldCA9IF90aGlzJG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGpzcyA9IF90aGlzJG9wdGlvbnMuanNzLFxuICAgICAgICBSZW5kZXJlciA9IF90aGlzJG9wdGlvbnMuUmVuZGVyZXIsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBfdGhpcyRvcHRpb25zLmdlbmVyYXRlSWQsXG4gICAgICAgIHNjb3BlZCA9IF90aGlzJG9wdGlvbnMuc2NvcGVkO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgIHNoZWV0OiBzaGVldCxcbiAgICAgIGpzczoganNzLFxuICAgICAgUmVuZGVyZXI6IFJlbmRlcmVyLFxuICAgICAgZ2VuZXJhdGVJZDogZ2VuZXJhdGVJZCxcbiAgICAgIHNjb3BlZDogc2NvcGVkLFxuICAgICAgbmFtZTogbmFtZVxuICAgIH0sIHJ1bGVPcHRpb25zKTsgLy8gV2hlbiB1c2VyIHVzZXMgLmNyZWF0ZVN0eWxlU2hlZXQoKSwgZHVwbGljYXRlIG5hbWVzIGFyZSBub3QgcG9zc2libGUsIGJ1dFxuICAgIC8vIGBzaGVldC5hZGRSdWxlKClgIG9wZW5zIHRoZSBkb29yIGZvciBhbnkgZHVwbGljYXRlIHJ1bGUgbmFtZS4gV2hlbiB0aGlzIGhhcHBlbnNcbiAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgdGhlIGtleSB1bmlxdWUgd2l0aGluIHRoaXMgUnVsZUxpc3QgaW5zdGFuY2Ugc2NvcGUuXG5cblxuICAgIHZhciBrZXkgPSBuYW1lO1xuXG4gICAgaWYgKG5hbWUgaW4gdGhpcy5yYXcpIHtcbiAgICAgIGtleSA9IG5hbWUgKyBcIi1kXCIgKyB0aGlzLmNvdW50ZXIrKztcbiAgICB9IC8vIFdlIG5lZWQgdG8gc2F2ZSB0aGUgb3JpZ2luYWwgZGVjbCBiZWZvcmUgY3JlYXRpbmcgdGhlIHJ1bGVcbiAgICAvLyBiZWNhdXNlIGNhY2hlIHBsdWdpbiBuZWVkcyB0byB1c2UgaXQgYXMgYSBrZXkgdG8gcmV0dXJuIGEgY2FjaGVkIHJ1bGUuXG5cblxuICAgIHRoaXMucmF3W2tleV0gPSBkZWNsO1xuXG4gICAgaWYgKGtleSBpbiB0aGlzLmNsYXNzZXMpIHtcbiAgICAgIC8vIEUuZy4gcnVsZXMgaW5zaWRlIG9mIEBtZWRpYSBjb250YWluZXJcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBcIi5cIiArIGVzY2FwZSh0aGlzLmNsYXNzZXNba2V5XSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKGtleSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUpO1xuICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICB0aGlzLmluZGV4LnNwbGljZShpbmRleCwgMCwgcnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgIHRoaXMudW5yZWdpc3RlcihydWxlKTtcbiAgICBkZWxldGUgdGhpcy5yYXdbcnVsZS5rZXldO1xuICAgIHRoaXMuaW5kZXguc3BsaWNlKHRoaXMuaW5kZXguaW5kZXhPZihydWxlKSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gYG9uUHJvY2Vzc1J1bGUoKWAgcGx1Z2lucyBvbiBldmVyeSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2luczsgLy8gV2UgbmVlZCB0byBjbG9uZSBhcnJheSBiZWNhdXNlIGlmIHdlIG1vZGlmeSB0aGUgaW5kZXggc29tZXdoZXJlIGVsc2UgZHVyaW5nIGEgbG9vcFxuICAgIC8vIHdlIGVuZCB1cCB3aXRoIHZlcnkgaGFyZC10by10cmFjay1kb3duIHNpZGUgZWZmZWN0cy5cblxuICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHJ1bGUgaW4gYC5tYXBgLCBgLmNsYXNzZXNgIGFuZCBgLmtleWZyYW1lc2AgbWFwcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihydWxlKSB7XG4gICAgdGhpcy5tYXBbcnVsZS5rZXldID0gcnVsZTtcblxuICAgIGlmIChydWxlIGluc3RhbmNlb2YgU3R5bGVSdWxlKSB7XG4gICAgICB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXSA9IHJ1bGU7XG4gICAgICBpZiAocnVsZS5pZCkgdGhpcy5jbGFzc2VzW3J1bGUua2V5XSA9IHJ1bGUuaWQ7XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSAmJiB0aGlzLmtleWZyYW1lcykge1xuICAgICAgdGhpcy5rZXlmcmFtZXNbcnVsZS5uYW1lXSA9IHJ1bGUuaWQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIocnVsZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLmtleV07XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdO1xuICAgICAgZGVsZXRlIHRoaXMuY2xhc3Nlc1tydWxlLmtleV07XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgbmFtZTtcbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgb3B0aW9ucztcblxuICAgIGlmICh0eXBlb2YgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07IC8vICRGbG93Rml4TWVcblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdO1xuICAgICAgbmFtZSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMubWFwW25hbWVdLCBkYXRhLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMuaW5kZXhbaW5kZXhdLCBkYXRhLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcGx1Z2lucywgdXBkYXRlIHJ1bGUgcHJvcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRVcGRhdGVPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRvcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGx1Z2lucyA9IF90aGlzJG9wdGlvbnMyLmpzcy5wbHVnaW5zLFxuICAgICAgICBzaGVldCA9IF90aGlzJG9wdGlvbnMyLnNoZWV0OyAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cblxuICAgIGlmIChydWxlLnJ1bGVzIGluc3RhbmNlb2YgUnVsZUxpc3QpIHtcbiAgICAgIHJ1bGUucnVsZXMudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBzdHlsZSA9IHN0eWxlUnVsZS5zdHlsZTtcbiAgICBwbHVnaW5zLm9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTsgLy8gV2UgcmVseSBvbiBhIG5ldyBgc3R5bGVgIHJlZiBpbiBjYXNlIGl0IHdhcyBtdXRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLlxuXG4gICAgaWYgKG9wdGlvbnMucHJvY2VzcyAmJiBzdHlsZSAmJiBzdHlsZSAhPT0gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHJ1biB0aGUgcGx1Z2lucyBpbiBjYXNlIG5ldyBgc3R5bGVgIHJlbGllcyBvbiBzeW50YXggcGx1Z2lucy5cbiAgICAgIHBsdWdpbnMub25Qcm9jZXNzU3R5bGUoc3R5bGVSdWxlLnN0eWxlLCBzdHlsZVJ1bGUsIHNoZWV0KTsgLy8gVXBkYXRlIGFuZCBhZGQgcHJvcHMuXG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbcHJvcF07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBzdHlsZVtwcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChuZXh0VmFsdWUgIT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZW1vdmUgcHJvcHMuXG5cblxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIF9uZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbX3Byb3BdO1xuICAgICAgICB2YXIgX3ByZXZWYWx1ZSA9IHN0eWxlW19wcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChfbmV4dFZhbHVlID09IG51bGwgJiYgX25leHRWYWx1ZSAhPT0gX3ByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBudWxsLCBmb3JjZVVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICB2YXIgY3NzID0gcnVsZS50b1N0cmluZyhvcHRpb25zKTsgLy8gTm8gbmVlZCB0byByZW5kZXIgYW4gZW1wdHkgcnVsZS5cblxuICAgICAgaWYgKCFjc3MgJiYgIWxpbmspIGNvbnRpbnVlO1xuICAgICAgaWYgKHN0cikgc3RyICs9ICdcXG4nO1xuICAgICAgc3RyICs9IGNzcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiBSdWxlTGlzdDtcbn0oKTtcblxudmFyIFN0eWxlU2hlZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcGxveWVkID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHZvaWQgMDtcbiAgICB0aGlzLnF1ZXVlID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jbGFzc2VzID0ge307XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2hlZXQ6IHRoaXMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzXG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5SZW5kZXJlcikge1xuICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBvcHRpb25zLlJlbmRlcmVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QodGhpcy5vcHRpb25zKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBBdHRhY2ggcmVuZGVyYWJsZSB0byB0aGUgcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmF0dGFjaCgpO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlOyAvLyBPcmRlciBpcyBpbXBvcnRhbnQsIGJlY2F1c2Ugd2UgY2FuJ3QgdXNlIGluc2VydFJ1bGUgQVBJIGlmIHN0eWxlIGVsZW1lbnQgaXMgbm90IGF0dGFjaGVkLlxuXG4gICAgaWYgKCF0aGlzLmRlcGxveWVkKSB0aGlzLmRlcGxveSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVuZGVyYWJsZSBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5kZXRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHJ1bGUgdG8gdGhlIGN1cnJlbnQgc3R5bGVzaGVldC5cbiAgICogV2lsbCBpbnNlcnQgYSBydWxlIGFsc28gYWZ0ZXIgdGhlIHN0eWxlc2hlZXQgaGFzIGJlZW4gcmVuZGVyZWQgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7IC8vIFBsdWdpbnMgY2FuIGNyZWF0ZSBydWxlcy5cbiAgICAvLyBJbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgcmlnaHQgb3JkZXIsIHdlIG5lZWQgdG8gcXVldWUgYWxsIGAuYWRkUnVsZWAgY2FsbHMsXG4gICAgLy8gd2hpY2ggaGFwcGVuIGFmdGVyIHRoZSBmaXJzdCBgcnVsZXMuYWRkKClgIGNhbGwuXG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhcXVldWUpIHRoaXMucXVldWUgPSBbXTtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSByZXR1cm4gcnVsZTsgLy8gRG9uJ3QgaW5zZXJ0IHJ1bGUgZGlyZWN0bHkgaWYgdGhlcmUgaXMgbm8gc3RyaW5naWZpZWQgdmVyc2lvbiB5ZXQuXG4gICAgICAvLyBJdCB3aWxsIGJlIGluc2VydGVkIGFsbCB0b2dldGhlciB3aGVuIC5hdHRhY2ggaXMgY2FsbGVkLlxuXG4gICAgICBpZiAocXVldWUpIHF1ZXVlLnB1c2gocnVsZSk7ZWxzZSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcblxuICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgIHRoaXMucXVldWUuZm9yRWFjaCh0aGlzLmluc2VydFJ1bGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMucXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0gLy8gV2UgY2FuJ3QgYWRkIHJ1bGVzIHRvIGEgZGV0YWNoZWQgc3R5bGUgbm9kZS5cbiAgICAvLyBXZSB3aWxsIHJlZGVwbG95IHRoZSBzaGVldCBvbmNlIHVzZXIgd2lsbCBhdHRhY2ggaXQuXG5cblxuICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHJ1bGUgaW50byB0aGUgU3R5bGVTaGVldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0UnVsZShydWxlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgYWRkIHJ1bGVzLlxuICAgKiBXaWxsIHJlbmRlciBhbHNvIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZXMgPSBmdW5jdGlvbiBhZGRSdWxlcyhzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgYWRkZWQgPSBbXTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuYWRkUnVsZShuYW1lLCBzdHlsZXNbbmFtZV0sIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIGFkZGVkLnB1c2gocnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZGVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlIGJ5IG5hbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUgYnkgbmFtZS5cbiAgICogUmV0dXJucyBgdHJ1ZWA6IGlmIHJ1bGUgaGFzIGJlZW4gZGVsZXRlZCBmcm9tIHRoZSBET00uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKG5hbWUpIHtcbiAgICB2YXIgcnVsZSA9IHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JyA/IG5hbWUgOiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBmYWxzZTtcbiAgICB0aGlzLnJ1bGVzLnJlbW92ZShydWxlKTtcblxuICAgIGlmICh0aGlzLmF0dGFjaGVkICYmIHJ1bGUucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKHJ1bGUucmVuZGVyYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBEZXBsb3kgcHVyZSBDU1Mgc3RyaW5nIHRvIGEgcmVuZGVyYWJsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmRlcGxveSgpO1xuICAgIHRoaXMuZGVwbG95ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkcnVsZXM7XG5cbiAgICAoX3RoaXMkcnVsZXMgPSB0aGlzLnJ1bGVzKS51cGRhdGUuYXBwbHkoX3RoaXMkcnVsZXMsIGFyZ3VtZW50cyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyBhIHNpbmdsZSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIHRoaXMucnVsZXMudXBkYXRlT25lKHJ1bGUsIGRhdGEsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbnZhciBQbHVnaW5zUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVnaW5zUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5wbHVnaW5zID0ge1xuICAgICAgaW50ZXJuYWw6IFtdLFxuICAgICAgZXh0ZXJuYWw6IFtdXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gdm9pZCAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBsdWdpbnNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIENhbGwgYG9uQ3JlYXRlUnVsZWAgaG9va3MgYW5kIHJldHVybiBhbiBvYmplY3QgaWYgcmV0dXJuZWQgYnkgYSBob29rLlxuICAgKi9cbiAgX3Byb3RvLm9uQ3JlYXRlUnVsZSA9IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZVtpXShuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzUnVsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1J1bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS5pc1Byb2Nlc3NlZCkgcmV0dXJuO1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGVbaV0ocnVsZSwgc2hlZXQpO1xuICAgIH1cblxuICAgIGlmIChydWxlLnN0eWxlKSB0aGlzLm9uUHJvY2Vzc1N0eWxlKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICBydWxlLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzU3R5bGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NTdHlsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcnVsZS5zdHlsZSA9IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU3R5bGVbaV0ocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzU2hlZXRgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NTaGVldCA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1NoZWV0KHNoZWV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1NoZWV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1NoZWV0W2ldKHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uVXBkYXRlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25VcGRhdGUgPSBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblVwZGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblVwZGF0ZVtpXShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvbkNoYW5nZVZhbHVlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25DaGFuZ2VWYWx1ZSA9IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSB2YWx1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vbkNoYW5nZVZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcm9jZXNzZWRWYWx1ZSA9IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZVtpXShwcm9jZXNzZWRWYWx1ZSwgcHJvcCwgcnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZFZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHBsdWdpbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXNlID0gZnVuY3Rpb24gdXNlKG5ld1BsdWdpbiwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHF1ZXVlOiAnZXh0ZXJuYWwnXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBwbHVnaW5zID0gdGhpcy5wbHVnaW5zW29wdGlvbnMucXVldWVdOyAvLyBBdm9pZHMgYXBwbHlpbmcgc2FtZSBwbHVnaW4gdHdpY2UsIGF0IGxlYXN0IGJhc2VkIG9uIHJlZi5cblxuICAgIGlmIChwbHVnaW5zLmluZGV4T2YobmV3UGx1Z2luKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwbHVnaW5zLnB1c2gobmV3UGx1Z2luKTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW10uY29uY2F0KHRoaXMucGx1Z2lucy5leHRlcm5hbCwgdGhpcy5wbHVnaW5zLmludGVybmFsKS5yZWR1Y2UoZnVuY3Rpb24gKHJlZ2lzdHJ5LCBwbHVnaW4pIHtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gcGx1Z2luKSB7XG4gICAgICAgIGlmIChuYW1lIGluIHJlZ2lzdHJ5KSB7XG4gICAgICAgICAgcmVnaXN0cnlbbmFtZV0ucHVzaChwbHVnaW5bbmFtZV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gaG9vayBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfSwge1xuICAgICAgb25DcmVhdGVSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1J1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU3R5bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU2hlZXQ6IFtdLFxuICAgICAgb25DaGFuZ2VWYWx1ZTogW10sXG4gICAgICBvblVwZGF0ZTogW11cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFNoZWV0cyByZWdpc3RyeSB0byBhY2Nlc3MgdGhlbSBhbGwgYXQgb25lIHBsYWNlLlxuICovXG52YXIgU2hlZXRzUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2hlZXRzUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChzaGVldCkge1xuICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgdmFyIGluZGV4ID0gc2hlZXQub3B0aW9ucy5pbmRleDtcbiAgICBpZiAocmVnaXN0cnkuaW5kZXhPZihzaGVldCkgIT09IC0xKSByZXR1cm47XG5cbiAgICBpZiAocmVnaXN0cnkubGVuZ3RoID09PSAwIHx8IGluZGV4ID49IHRoaXMuaW5kZXgpIHtcbiAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmluZCBhIHBvc2l0aW9uLlxuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVnaXN0cnlbaV0ub3B0aW9ucy5pbmRleCA+IGluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpO1xuICAgIHRoaXMucmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIGF0dGFjaGVkID0gX3JlZi5hdHRhY2hlZCxcbiAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImF0dGFjaGVkXCJdKTtcblxuICAgIHZhciBjc3MgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5yZWdpc3RyeVtpXTtcblxuICAgICAgaWYgKGF0dGFjaGVkICE9IG51bGwgJiYgc2hlZXQuYXR0YWNoZWQgIT09IGF0dGFjaGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3NzKSBjc3MgKz0gJ1xcbic7XG4gICAgICBjc3MgKz0gc2hlZXQudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzUmVnaXN0cnksIFt7XG4gICAga2V5OiBcImluZGV4XCIsXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgZ2xvYmFsIHNoZWV0cyByZWdpc3RyeS4gT25seSBEb21SZW5kZXJlciB3aWxsIGFkZCBzaGVldHMgdG8gaXQuXG4gKiBPbiB0aGUgc2VydmVyIG9uZSBzaG91bGQgdXNlIGFuIG93biBTaGVldHNSZWdpc3RyeSBpbnN0YW5jZSBhbmQgYWRkIHRoZVxuICogc2hlZXRzIHRvIGl0LCBiZWNhdXNlIHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgcmVnaXN0cnkgZm9yXG4gKiBlYWNoIHJlcXVlc3QgaW4gb3JkZXIgdG8gbm90IGxlYWsgc2hlZXRzIGFjcm9zcyByZXF1ZXN0cy5cbiAqL1xuXG52YXIgc2hlZXRzID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbFRoaXMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgbnMgPSAnMmYxYWNjNmMzYTYwNmIwODJlNWVlZjVlNTQ0MTRmZmInO1xuaWYgKGdsb2JhbFRoaXNbbnNdID09IG51bGwpIGdsb2JhbFRoaXNbbnNdID0gMDsgLy8gQnVuZGxlIG1heSBjb250YWluIG11bHRpcGxlIEpTUyB2ZXJzaW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBJbiBvcmRlciB0byBpZGVudGlmeVxuLy8gdGhlIGN1cnJlbnQgdmVyc2lvbiB3aXRoIGp1c3Qgb25lIHNob3J0IG51bWJlciBhbmQgdXNlIGl0IGZvciBjbGFzc2VzIGdlbmVyYXRpb25cbi8vIHdlIHVzZSBhIGNvdW50ZXIuIEFsc28gaXQgaXMgbW9yZSBhY2N1cmF0ZSwgYmVjYXVzZSB1c2VyIGNhbiBtYW51YWxseSByZWV2YWx1YXRlXG4vLyB0aGUgbW9kdWxlLlxuXG52YXIgbW9kdWxlSWQgPSBnbG9iYWxUaGlzW25zXSsrO1xuXG52YXIgbWF4UnVsZXMgPSAxZTEwO1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuICogV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldGVkLlxuICogV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbiAqL1xudmFyIGNyZWF0ZUdlbmVyYXRlSWQgPSBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUlkKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBydWxlQ291bnRlciA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAocnVsZSwgc2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHJ1bGVDb3VudGVyID4gbWF4UnVsZXMpIHtcbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuIFJ1bGUgY291bnRlciBpcyBhdCBcIiArIHJ1bGVDb3VudGVyICsgXCIuXCIpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciBqc3NJZCA9ICcnO1xuICAgIHZhciBwcmVmaXggPSAnJztcblxuICAgIGlmIChzaGVldCkge1xuICAgICAgaWYgKHNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4KSB7XG4gICAgICAgIHByZWZpeCA9IHNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4O1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5qc3MuaWQgIT0gbnVsbCkge1xuICAgICAgICBqc3NJZCA9IFN0cmluZyhzaGVldC5vcHRpb25zLmpzcy5pZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWluaWZ5KSB7XG4gICAgICAvLyBVc2luZyBcImNcIiBiZWNhdXNlIGEgbnVtYmVyIGNhbid0IGJlIHRoZSBmaXJzdCBjaGFyIGluIGEgY2xhc3MgbmFtZS5cbiAgICAgIHJldHVybiBcIlwiICsgKHByZWZpeCB8fCAnYycpICsgbW9kdWxlSWQgKyBqc3NJZCArIHJ1bGVDb3VudGVyO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXggKyBydWxlLmtleSArIFwiLVwiICsgbW9kdWxlSWQgKyAoanNzSWQgPyBcIi1cIiArIGpzc0lkIDogJycpICsgXCItXCIgKyBydWxlQ291bnRlcjtcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FjaGUgdGhlIHZhbHVlIGZyb20gdGhlIGZpcnN0IHRpbWUgYSBmdW5jdGlvbiBpcyBjYWxsZWQuXG4gKi9cbnZhciBtZW1vaXplID0gZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgdmFsdWU7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF2YWx1ZSkgdmFsdWUgPSBmbigpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn07XG4vKipcbiAqIEdldCBhIHN0eWxlIHByb3BlcnR5IHZhbHVlLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIHJldHVybiBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLmdldChwcm9wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzUnVsZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJRSBtYXkgdGhyb3cgaWYgcHJvcGVydHkgaXMgdW5rbm93bi5cbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cbi8qKlxuICogU2V0IGEgc3R5bGUgcHJvcGVydHkuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRQcm9wZXJ0eShjc3NSdWxlLCBwcm9wLCB2YWx1ZSkge1xuICB0cnkge1xuICAgIHZhciBjc3NWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjc3NWYWx1ZSA9IHRvQ3NzVmFsdWUodmFsdWUsIHRydWUpO1xuXG4gICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gLy8gU3VwcG9ydCBDU1NUT00uXG5cblxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLnNldChwcm9wLCBjc3NWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIFJlbW92ZSBhIHN0eWxlIHByb3BlcnR5LlxuICovXG5cblxuZnVuY3Rpb24gcmVtb3ZlUHJvcGVydHkoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLmRlbGV0ZShwcm9wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzUnVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIERPTUV4Y2VwdGlvbiBcXFwiXCIgKyBlcnIubWVzc2FnZSArIFwiXFxcIiB3YXMgdGhyb3duLiBUcmllZCB0byByZW1vdmUgcHJvcGVydHkgXFxcIlwiICsgcHJvcCArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gIH1cbn1cbi8qKlxuICogU2V0IHRoZSBzZWxlY3Rvci5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFNlbGVjdG9yKGNzc1J1bGUsIHNlbGVjdG9yVGV4dCkge1xuICBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yVGV4dDsgLy8gUmV0dXJuIGZhbHNlIGlmIHNldHRlciB3YXMgbm90IHN1Y2Nlc3NmdWwuXG4gIC8vIEN1cnJlbnRseSB3b3JrcyBpbiBjaHJvbWUgb25seS5cblxuICByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQgPT09IHNlbGVjdG9yVGV4dDtcbn1cbi8qKlxuICogR2V0cyB0aGUgYGhlYWRgIGVsZW1lbnQgdXBvbiB0aGUgZmlyc3QgY2FsbCBhbmQgY2FjaGVzIGl0LlxuICogV2UgYXNzdW1lIGl0IGNhbid0IGJlIG51bGwuXG4gKi9cblxuXG52YXIgZ2V0SGVhZCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpO1xufSk7XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCBhbiBpbmRleCBoaWdoZXIgdGhhbiB0aGUgcGFzc2VkIG9uZS5cbiAqL1xuXG5mdW5jdGlvbiBmaW5kSGlnaGVyU2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuXG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5kZXggPiBvcHRpb25zLmluZGV4ICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIHRoZSBoaWdoZXN0IGluZGV4LlxuICovXG5cblxuZnVuY3Rpb24gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gcmVnaXN0cnkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYSBjb21tZW50IHdpdGggXCJqc3NcIiBpbnNpZGUuXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kQ29tbWVudE5vZGUodGV4dCkge1xuICB2YXIgaGVhZCA9IGdldEhlYWQoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWQuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBub2RlID0gaGVhZC5jaGlsZE5vZGVzW2ldO1xuXG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggJiYgbm9kZS5ub2RlVmFsdWUudHJpbSgpID09PSB0ZXh0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBGaW5kIGEgbm9kZSBiZWZvcmUgd2hpY2ggd2UgY2FuIGluc2VydCB0aGUgc2hlZXQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRQcmV2Tm9kZShvcHRpb25zKSB7XG4gIHZhciByZWdpc3RyeSA9IHNoZWV0cy5yZWdpc3RyeTtcblxuICBpZiAocmVnaXN0cnkubGVuZ3RoID4gMCkge1xuICAgIC8vIFRyeSB0byBpbnNlcnQgYmVmb3JlIHRoZSBuZXh0IGhpZ2hlciBzaGVldC5cbiAgICB2YXIgc2hlZXQgPSBmaW5kSGlnaGVyU2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudFxuICAgICAgfTtcbiAgICB9IC8vIE90aGVyd2lzZSBpbnNlcnQgYWZ0ZXIgdGhlIGxhc3QgYXR0YWNoZWQuXG5cblxuICAgIHNoZWV0ID0gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBzaGVldC5yZW5kZXJlci5lbGVtZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBUcnkgdG8gZmluZCBhIGNvbW1lbnQgcGxhY2Vob2xkZXIgaWYgcmVnaXN0cnkgaXMgZW1wdHkuXG5cblxuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGNvbW1lbnQgPSBmaW5kQ29tbWVudE5vZGUoaW5zZXJ0aW9uUG9pbnQpO1xuXG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogY29tbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBjb21tZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH0gLy8gSWYgdXNlciBzcGVjaWZpZXMgYW4gaW5zZXJ0aW9uIHBvaW50IGFuZCBpdCBjYW4ndCBiZSBmb3VuZCBpbiB0aGUgZG9jdW1lbnQgLVxuICAgIC8vIGJhZCBzcGVjaWZpY2l0eSBpc3N1ZXMgbWF5IGFwcGVhci5cblxuXG4gICAgXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gSW5zZXJ0aW9uIHBvaW50IFxcXCJcIiArIGluc2VydGlvblBvaW50ICsgXCJcXFwiIG5vdCBmb3VuZC5cIikgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gdGhlIERPTS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlKHN0eWxlLCBvcHRpb25zKSB7XG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gIHZhciBuZXh0Tm9kZSA9IGZpbmRQcmV2Tm9kZShvcHRpb25zKTtcblxuICBpZiAobmV4dE5vZGUgIT09IGZhbHNlICYmIG5leHROb2RlLnBhcmVudCkge1xuICAgIG5leHROb2RlLnBhcmVudC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHROb2RlLm5vZGUpO1xuICAgIHJldHVybjtcbiAgfSAvLyBXb3JrcyB3aXRoIGlmcmFtZXMgYW5kIGFueSBub2RlIHR5cGVzLlxuXG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludC5ub2RlVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MTMyODcyOC9mb3JjZS1jYXN0aW5nLWluLWZsb3dcbiAgICB2YXIgaW5zZXJ0aW9uUG9pbnRFbGVtZW50ID0gaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdmFyIHBhcmVudE5vZGUgPSBpbnNlcnRpb25Qb2ludEVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3R5bGUsIGluc2VydGlvblBvaW50RWxlbWVudC5uZXh0U2libGluZyk7ZWxzZSBcImRldmVsb3BtZW50XCIgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEluc2VydGlvbiBwb2ludCBpcyBub3QgaW4gdGhlIERPTS4nKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBnZXRIZWFkKCkuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuLyoqXG4gKiBSZWFkIGpzcyBub25jZSBzZXR0aW5nIGZyb20gdGhlIHBhZ2UgaWYgdGhlIHVzZXIgaGFzIHNldCBpdC5cbiAqL1xuXG5cbnZhciBnZXROb25jZSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbcHJvcGVydHk9XCJjc3Atbm9uY2VcIl0nKTtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudCcpIDogbnVsbDtcbn0pO1xuXG52YXIgX2luc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKGNvbnRhaW5lciwgcnVsZSwgaW5kZXgpIHtcbiAgdmFyIG1heEluZGV4ID0gY29udGFpbmVyLmNzc1J1bGVzLmxlbmd0aDsgLy8gSW4gY2FzZSBwcmV2aW91cyBpbnNlcnRpb24gZmFpbHMsIHBhc3NlZCBpbmRleCBtaWdodCBiZSB3cm9uZ1xuXG4gIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8IGluZGV4ID4gbWF4SW5kZXgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBpbmRleCA9IG1heEluZGV4O1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAoJ2luc2VydFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgdmFyIGMgPSBjb250YWluZXI7XG4gICAgICBjLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgIH0gLy8gS2V5ZnJhbWVzIHJ1bGUuXG4gICAgZWxzZSBpZiAoJ2FwcGVuZFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgICB2YXIgX2MgPSBjb250YWluZXI7XG5cbiAgICAgICAgX2MuYXBwZW5kUnVsZShydWxlKTtcbiAgICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gXCIgKyBlcnIubWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5jc3NSdWxlc1tpbmRleF07XG59O1xuXG52YXIgY3JlYXRlU3R5bGUgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZSgpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsgLy8gV2l0aG91dCBpdCwgSUUgd2lsbCBoYXZlIGEgYnJva2VuIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBpZiB3ZVxuICAvLyBpbnNlcnQgcnVsZXMgYWZ0ZXIgd2UgaW5zZXJ0IHRoZSBzdHlsZSB0YWcuXG4gIC8vIEl0IHNlZW1zIHRvIGtpY2stb2ZmIHRoZSBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgYWxnb3JpdGhtLlxuXG4gIGVsLnRleHRDb250ZW50ID0gJ1xcbic7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBEb21SZW5kZXJlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUxTdHlsZUVsZW1lbnQgbmVlZHMgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG4gIGZ1bmN0aW9uIERvbVJlbmRlcmVyKHNoZWV0KSB7XG4gICAgdGhpcy5nZXRQcm9wZXJ0eVZhbHVlID0gZ2V0UHJvcGVydHlWYWx1ZTtcbiAgICB0aGlzLnNldFByb3BlcnR5ID0gc2V0UHJvcGVydHk7XG4gICAgdGhpcy5yZW1vdmVQcm9wZXJ0eSA9IHJlbW92ZVByb3BlcnR5O1xuICAgIHRoaXMuc2V0U2VsZWN0b3IgPSBzZXRTZWxlY3RvcjtcbiAgICB0aGlzLmVsZW1lbnQgPSB2b2lkIDA7XG4gICAgdGhpcy5zaGVldCA9IHZvaWQgMDtcbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAvLyBUaGVyZSBpcyBubyBzaGVldCB3aGVuIHRoZSByZW5kZXJlciBpcyB1c2VkIGZyb20gYSBzdGFuZGFsb25lIFN0eWxlUnVsZS5cbiAgICBpZiAoc2hlZXQpIHNoZWV0cy5hZGQoc2hlZXQpO1xuICAgIHRoaXMuc2hlZXQgPSBzaGVldDtcblxuICAgIHZhciBfcmVmID0gdGhpcy5zaGVldCA/IHRoaXMuc2hlZXQub3B0aW9ucyA6IHt9LFxuICAgICAgICBtZWRpYSA9IF9yZWYubWVkaWEsXG4gICAgICAgIG1ldGEgPSBfcmVmLm1ldGEsXG4gICAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQ7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50IHx8IGNyZWF0ZVN0eWxlKCk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1qc3MnLCAnJyk7XG4gICAgaWYgKG1lZGlhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgICBpZiAobWV0YSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tZXRhJywgbWV0YSk7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBEb21SZW5kZXJlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAvLyBJbiB0aGUgY2FzZSB0aGUgZWxlbWVudCBub2RlIGlzIGV4dGVybmFsIGFuZCBpdCBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgaWYgKHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIHx8ICF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgaW5zZXJ0U3R5bGUodGhpcy5lbGVtZW50LCB0aGlzLnNoZWV0Lm9wdGlvbnMpOyAvLyBXaGVuIHJ1bGVzIGFyZSBpbnNlcnRlZCB1c2luZyBgaW5zZXJ0UnVsZWAgQVBJLCBhZnRlciBgc2hlZXQuZGV0YWNoKCkuYXR0YWNoKClgXG4gICAgLy8gbW9zdCBicm93c2VycyBjcmVhdGUgYSBuZXcgQ1NTU3R5bGVTaGVldCwgZXhjZXB0IG9mIGFsbCBJRXMuXG5cbiAgICB2YXIgZGVwbG95ZWQgPSBCb29sZWFuKHRoaXMuc2hlZXQgJiYgdGhpcy5zaGVldC5kZXBsb3llZCk7XG5cbiAgICBpZiAodGhpcy5oYXNJbnNlcnRlZFJ1bGVzICYmIGRlcGxveWVkKSB7XG4gICAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVwbG95KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgc3R5bGUgZWxlbWVudCBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICB9XG4gIC8qKlxuICAgKiBJbmplY3QgQ1NTIHN0cmluZyBpbnRvIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlcGxveSA9IGZ1bmN0aW9uIGRlcGxveSgpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLnNoZWV0O1xuICAgIGlmICghc2hlZXQpIHJldHVybjtcblxuICAgIGlmIChzaGVldC5vcHRpb25zLmxpbmspIHtcbiAgICAgIHRoaXMuaW5zZXJ0UnVsZXMoc2hlZXQucnVsZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudC50ZXh0Q29udGVudCA9IFwiXFxuXCIgKyBzaGVldC50b1N0cmluZygpICsgXCJcXG5cIjtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IFJ1bGVMaXN0IGludG8gYW4gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhydWxlcywgbmF0aXZlUGFyZW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5pbmRleC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlKHJ1bGVzLmluZGV4W2ldLCBpLCBuYXRpdmVQYXJlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IGEgcnVsZSBpbnRvIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUsIGluZGV4LCBuYXRpdmVQYXJlbnQpIHtcbiAgICBpZiAobmF0aXZlUGFyZW50ID09PSB2b2lkIDApIHtcbiAgICAgIG5hdGl2ZVBhcmVudCA9IHRoaXMuZWxlbWVudC5zaGVldDtcbiAgICB9XG5cbiAgICBpZiAocnVsZS5ydWxlcykge1xuICAgICAgdmFyIHBhcmVudCA9IHJ1bGU7XG4gICAgICB2YXIgbGF0ZXN0TmF0aXZlUGFyZW50ID0gbmF0aXZlUGFyZW50O1xuXG4gICAgICBpZiAocnVsZS50eXBlID09PSAnY29uZGl0aW9uYWwnIHx8IHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byByZW5kZXIgdGhlIGNvbnRhaW5lciB3aXRob3V0IGNoaWxkcmVuIGZpcnN0LlxuICAgICAgICBsYXRlc3ROYXRpdmVQYXJlbnQgPSBfaW5zZXJ0UnVsZShuYXRpdmVQYXJlbnQsIHBhcmVudC50b1N0cmluZyh7XG4gICAgICAgICAgY2hpbGRyZW46IGZhbHNlXG4gICAgICAgIH0pLCBpbmRleCk7XG5cbiAgICAgICAgaWYgKGxhdGVzdE5hdGl2ZVBhcmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhwYXJlbnQucnVsZXMsIGxhdGVzdE5hdGl2ZVBhcmVudCk7XG4gICAgICByZXR1cm4gbGF0ZXN0TmF0aXZlUGFyZW50O1xuICAgIH0gLy8gSUUga2VlcHMgdGhlIENTU1N0eWxlU2hlZXQgYWZ0ZXIgc3R5bGUgbm9kZSBoYXMgYmVlbiByZWF0dGFjaGVkLFxuICAgIC8vIHNvIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGByZW5kZXJhYmxlYCByZWZlcmVuY2UgdGhlIHJpZ2h0IHN0eWxlIHNoZWV0IGFuZCBub3RcbiAgICAvLyByZXJlbmRlciB0aG9zZSBydWxlcy5cblxuXG4gICAgaWYgKHJ1bGUucmVuZGVyYWJsZSAmJiBydWxlLnJlbmRlcmFibGUucGFyZW50U3R5bGVTaGVldCA9PT0gdGhpcy5lbGVtZW50LnNoZWV0KSB7XG4gICAgICByZXR1cm4gcnVsZS5yZW5kZXJhYmxlO1xuICAgIH1cblxuICAgIHZhciBydWxlU3RyID0gcnVsZS50b1N0cmluZygpO1xuICAgIGlmICghcnVsZVN0cikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIG5hdGl2ZVJ1bGUgPSBfaW5zZXJ0UnVsZShuYXRpdmVQYXJlbnQsIHJ1bGVTdHIsIGluZGV4KTtcblxuICAgIGlmIChuYXRpdmVSdWxlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IHRydWU7XG4gICAgcnVsZS5yZW5kZXJhYmxlID0gbmF0aXZlUnVsZTtcbiAgICByZXR1cm4gbmF0aXZlUnVsZTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVsZXRlUnVsZSA9IGZ1bmN0aW9uIGRlbGV0ZVJ1bGUoY3NzUnVsZSkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuZWxlbWVudC5zaGVldDtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgIHNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBDU1MgUnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YoY3NzUnVsZSkge1xuICAgIHZhciBjc3NSdWxlcyA9IHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBjc3NSdWxlcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChjc3NSdWxlID09PSBjc3NSdWxlc1tpbmRleF0pIHJldHVybiBpbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgbmV3IENTUyBydWxlIGFuZCByZXBsYWNlIHRoZSBleGlzdGluZyBvbmUuXG4gICAqXG4gICAqIE9ubHkgdXNlZCBmb3Igc29tZSBvbGQgYnJvd3NlcnMgYmVjYXVzZSB0aGV5IGNhbid0IHNldCBhIHNlbGVjdG9yLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXBsYWNlUnVsZSA9IGZ1bmN0aW9uIHJlcGxhY2VSdWxlKGNzc1J1bGUsIHJ1bGUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgIHRoaXMuZWxlbWVudC5zaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCBydWxlcyBlbGVtZW50cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuICB9O1xuXG4gIHJldHVybiBEb21SZW5kZXJlcjtcbn0oKTtcblxudmFyIGluc3RhbmNlQ291bnRlciA9IDA7XG5cbnZhciBKc3MgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBKc3Mob3B0aW9ucykge1xuICAgIHRoaXMuaWQgPSBpbnN0YW5jZUNvdW50ZXIrKztcbiAgICB0aGlzLnZlcnNpb24gPSBcIjEwLjMuMFwiO1xuICAgIHRoaXMucGx1Z2lucyA9IG5ldyBQbHVnaW5zUmVnaXN0cnkoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBpZDoge1xuICAgICAgICBtaW5pZnk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgY3JlYXRlR2VuZXJhdGVJZDogY3JlYXRlR2VuZXJhdGVJZCxcbiAgICAgIFJlbmRlcmVyOiBpc0luQnJvd3NlciA/IERvbVJlbmRlcmVyIDogbnVsbCxcbiAgICAgIHBsdWdpbnM6IFtdXG4gICAgfTtcbiAgICB0aGlzLmdlbmVyYXRlSWQgPSBjcmVhdGVHZW5lcmF0ZUlkKHtcbiAgICAgIG1pbmlmeTogZmFsc2VcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wbHVnaW5zLnVzZShwbHVnaW5zW2ldLCB7XG4gICAgICAgIHF1ZXVlOiAnaW50ZXJuYWwnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlcyB2YXJpb3VzIG9wdGlvbnMsIGFwcGxpZXMgcGx1Z2lucy5cbiAgICogU2hvdWxkIG5vdCBiZSB1c2VkIHR3aWNlIG9uIHRoZSBzYW1lIGluc3RhbmNlLCBiZWNhdXNlIHRoZXJlIGlzIG5vIHBsdWdpbnNcbiAgICogZGVkdXBsaWNhdGlvbiBsb2dpYy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSnNzLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0dXAgPSBmdW5jdGlvbiBzZXR1cChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkID0gb3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaWQgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLmlkLCBvcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkIHx8IG9wdGlvbnMuaWQpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVJZCA9IHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKHRoaXMub3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgIT0gbnVsbCkgdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICAgIGlmICgnUmVuZGVyZXInIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5SZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuXG5cbiAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB0aGlzLnVzZS5hcHBseSh0aGlzLCBvcHRpb25zLnBsdWdpbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlU3R5bGVTaGVldCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIGluZGV4ID0gX29wdGlvbnMuaW5kZXg7XG5cbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgaW5kZXggPSBzaGVldHMuaW5kZXggPT09IDAgPyAwIDogc2hlZXRzLmluZGV4ICsgMTtcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSBuZXcgU3R5bGVTaGVldChzdHlsZXMsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBqc3M6IHRoaXMsXG4gICAgICBnZW5lcmF0ZUlkOiBvcHRpb25zLmdlbmVyYXRlSWQgfHwgdGhpcy5nZW5lcmF0ZUlkLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXIsXG4gICAgICBpbmRleDogaW5kZXhcbiAgICB9KSk7XG4gICAgdGhpcy5wbHVnaW5zLm9uUHJvY2Vzc1NoZWV0KHNoZWV0KTtcbiAgICByZXR1cm4gc2hlZXQ7XG4gIH1cbiAgLyoqXG4gICAqIERldGFjaCB0aGUgU3R5bGUgU2hlZXQgYW5kIHJlbW92ZSBpdCBmcm9tIHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlU3R5bGVTaGVldCA9IGZ1bmN0aW9uIHJlbW92ZVN0eWxlU2hlZXQoc2hlZXQpIHtcbiAgICBzaGVldC5kZXRhY2goKTtcbiAgICBzaGVldHMucmVtb3ZlKHNoZWV0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgcnVsZSB3aXRob3V0IGEgU3R5bGUgU2hlZXQuXG4gICAqIFtEZXByZWNhdGVkXSB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUnVsZSA9IGZ1bmN0aW9uIGNyZWF0ZVJ1bGUkMShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChzdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdHlsZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBFbmFibGUgcnVsZSB3aXRob3V0IG5hbWUgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUnVsZSh1bmRlZmluZWQsIG5hbWUsIHN0eWxlKTtcbiAgICB9XG5cbiAgICB2YXIgcnVsZU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXJcbiAgICB9KTtcblxuICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCA9IHRoaXMuZ2VuZXJhdGVJZDtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmtleWZyYW1lcykgcnVsZU9wdGlvbnMua2V5ZnJhbWVzID0ge307XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgIGlmIChydWxlKSB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcGx1Z2luc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4gKiBBIGJldHRlciBhYnN0cmFjdGlvbiBvdmVyIENTUy5cbiAqXG4gKiBAY29weXJpZ2h0IE9sZWcgSXNvbmVuIChTbG9ib2Rza29pKSAvIElzb25lbiAyMDE0LXByZXNlbnRcbiAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzc1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBFeHBvcnQgYSBjb25zdGFudCBpbmRpY2F0aW5nIGlmIHRoaXMgYnJvd3NlciBoYXMgQ1NTVE9NIHN1cHBvcnQuXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzAzL2Nzc29tXG4gKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTICYmICdudW1iZXInIGluIENTUztcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBKc3MuXG4gKi9cblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgSnNzKG9wdGlvbnMpO1xufTtcbi8qKlxuICogQSBnbG9iYWwgSnNzIGluc3RhbmNlLlxuICovXG5cbnZhciBpbmRleCA9IGNyZWF0ZSgpO1xuXG5leHBvcnRzLlJ1bGVMaXN0ID0gUnVsZUxpc3Q7XG5leHBvcnRzLlNoZWV0c01hbmFnZXIgPSBTaGVldHNNYW5hZ2VyO1xuZXhwb3J0cy5TaGVldHNSZWdpc3RyeSA9IFNoZWV0c1JlZ2lzdHJ5O1xuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGU7XG5leHBvcnRzLmNyZWF0ZUdlbmVyYXRlSWQgPSBjcmVhdGVHZW5lcmF0ZUlkO1xuZXhwb3J0cy5jcmVhdGVSdWxlID0gY3JlYXRlUnVsZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGluZGV4O1xuZXhwb3J0cy5nZXREeW5hbWljU3R5bGVzID0gZ2V0RHluYW1pY1N0eWxlcztcbmV4cG9ydHMuaGFzQ1NTVE9NU3VwcG9ydCA9IGhhc0NTU1RPTVN1cHBvcnQ7XG5leHBvcnRzLnNoZWV0cyA9IHNoZWV0cztcbmV4cG9ydHMudG9Dc3NWYWx1ZSA9IHRvQ3NzVmFsdWU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBUaGVtZUNvbnRleHQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RoZW1lQ29udGV4dCc7XG59XG5cbnZhciBfZGVmYXVsdCA9IFRoZW1lQ29udGV4dDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuLy8gVXNlZCBodHRwczovL2dpdGh1Yi5jb20vdGhpbmtsb29wL211bHRpLWtleS1jYWNoZSBhcyBpbnNwaXJhdGlvblxudmFyIG11bHRpS2V5U3RvcmUgPSB7XG4gIHNldDogZnVuY3Rpb24gc2V0KGNhY2hlLCBrZXkxLCBrZXkyLCB2YWx1ZSkge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcblxuICAgIGlmICghc3ViQ2FjaGUpIHtcbiAgICAgIHN1YkNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgY2FjaGUuc2V0KGtleTEsIHN1YkNhY2hlKTtcbiAgICB9XG5cbiAgICBzdWJDYWNoZS5zZXQoa2V5MiwgdmFsdWUpO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldChjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICByZXR1cm4gc3ViQ2FjaGUgPyBzdWJDYWNoZS5nZXQoa2V5MikgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICBzdWJDYWNoZS5kZWxldGUoa2V5Mik7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSBtdWx0aUtleVN0b3JlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmluY3JlbWVudCA9IGluY3JlbWVudDtcblxuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCAqL1xuLy8gR2xvYmFsIGluZGV4IGNvdW50ZXIgdG8gcHJlc2VydmUgc291cmNlIG9yZGVyLlxuLy8gV2UgY3JlYXRlIHRoZSBzdHlsZSBzaGVldCBkdXJpbmcgdGhlIGNyZWF0aW9uIG9mIHRoZSBjb21wb25lbnQsXG4vLyBjaGlsZHJlbiBhcmUgaGFuZGxlZCBhZnRlciB0aGUgcGFyZW50cywgc28gdGhlIG9yZGVyIG9mIHN0eWxlIGVsZW1lbnRzIHdvdWxkIGJlIHBhcmVudC0+Y2hpbGQuXG4vLyBJdCBpcyBhIHByb2JsZW0gdGhvdWdoIHdoZW4gYSBwYXJlbnQgcGFzc2VzIGEgY2xhc3NOYW1lXG4vLyB3aGljaCBuZWVkcyB0byBvdmVycmlkZSBhbnkgY2hpbGQncyBzdHlsZXMuXG4vLyBTdHlsZVNoZWV0IG9mIHRoZSBjaGlsZCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHksIGJlY2F1c2Ugb2YgdGhlIHNvdXJjZSBvcmRlci5cbi8vIFNvIG91ciBzb2x1dGlvbiBpcyB0byByZW5kZXIgc2hlZXRzIHRoZW0gaW4gdGhlIHJldmVyc2Ugb3JkZXIgY2hpbGQtPnNoZWV0LCBzb1xuLy8gdGhhdCBwYXJlbnQgaGFzIGEgaGlnaGVyIHNwZWNpZmljaXR5LlxudmFyIGluZGV4Q291bnRlciA9IC0xZTk7XG5cbmZ1bmN0aW9uIGluY3JlbWVudCgpIHtcbiAgaW5kZXhDb3VudGVyICs9IDE7XG5cbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluZGV4Q291bnRlciA+PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIGluZGV4Q291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleENvdW50ZXI7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vLyBXZSB1c2UgdGhlIHNhbWUgZW1wdHkgb2JqZWN0IHRvIHJlZiBjb3VudCB0aGUgc3R5bGVzIHRoYXQgZG9uJ3QgbmVlZCBhIHRoZW1lIG9iamVjdC5cbnZhciBub29wVGhlbWUgPSB7fTtcbnZhciBfZGVmYXVsdCA9IG5vb3BUaGVtZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2dldFN0eWxlc0NyZWF0b3IuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfZ2V0U3R5bGVzQ3JlYXRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0U3R5bGVzQ3JlYXRvclwiKSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFNvcnQgcHJvcHMgYnkgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBqc3NQcm9wc1NvcnQoKSB7XG4gIHZhciBzb3J0ID0gZnVuY3Rpb24gc29ydChwcm9wMCwgcHJvcDEpIHtcbiAgICBpZiAocHJvcDAubGVuZ3RoID09PSBwcm9wMS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBwcm9wMCA+IHByb3AxID8gMSA6IC0xO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wMC5sZW5ndGggLSBwcm9wMS5sZW5ndGg7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICAgIHZhciBuZXdTdHlsZSA9IHt9O1xuICAgICAgdmFyIHByb3BzID0gT2JqZWN0LmtleXMoc3R5bGUpLnNvcnQoc29ydCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3U3R5bGVbcHJvcHNbaV1dID0gc3R5bGVbcHJvcHNbaV1dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3U3R5bGU7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBqc3NQcm9wc1NvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgd2FybmluZyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCd0aW55LXdhcm5pbmcnKSk7XG52YXIganNzID0gcmVxdWlyZSgnanNzJyk7XG5cbnZhciBub3cgPSBEYXRlLm5vdygpO1xudmFyIGZuVmFsdWVzTnMgPSBcImZuVmFsdWVzXCIgKyBub3c7XG52YXIgZm5SdWxlTnMgPSBcImZuU3R5bGVcIiArICsrbm93O1xuZnVuY3Rpb24gZnVuY3Rpb25QbHVnaW4oKSB7XG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiBkZWNsICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBydWxlID0ganNzLmNyZWF0ZVJ1bGUobmFtZSwge30sIG9wdGlvbnMpO1xuICAgICAgcnVsZVtmblJ1bGVOc10gPSBkZWNsO1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfSxcbiAgICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbiB2YWx1ZXMgZnJvbSB0aGUgZGVjbGFyYXRpb24sIHNvIHRoYXQgd2UgY2FuIGtlZXAgY29yZSB1bmF3YXJlIG9mIHRoZW0uXG4gICAgICAvLyBXZSBuZWVkIHRvIGRvIHRoYXQgb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9ucyBvbiBlYWNoIHN0eWxlIHVwZGF0ZSwgc2luY2UgdGhpcyBjYW4gaGFwcGVuIG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgZnVuY3Rpb24gdmFsdWVzIGluc2lkZSBvZiBmdW5jdGlvbiBydWxlcy5cbiAgICAgIGlmIChmblZhbHVlc05zIGluIHJ1bGUgfHwgZm5SdWxlTnMgaW4gcnVsZSkgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIGZuVmFsdWVzID0ge307XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIGNvbnRpbnVlO1xuICAgICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIGZuVmFsdWVzW3Byb3BdID0gdmFsdWU7XG4gICAgICB9IC8vICRGbG93Rml4TWVcblxuXG4gICAgICBydWxlW2ZuVmFsdWVzTnNdID0gZm5WYWx1ZXM7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSxcbiAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgICAgdmFyIGZuUnVsZSA9IHN0eWxlUnVsZVtmblJ1bGVOc107IC8vIElmIHdlIGhhdmUgYSBzdHlsZSBmdW5jdGlvbiwgdGhlIGVudGlyZSBydWxlIGlzIGR5bmFtaWMgYW5kIHN0eWxlIG9iamVjdFxuICAgICAgLy8gd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoYXQgZnVuY3Rpb24uXG5cbiAgICAgIGlmIChmblJ1bGUpIHtcbiAgICAgICAgLy8gRW1wdHkgb2JqZWN0IHdpbGwgcmVtb3ZlIGFsbCBjdXJyZW50bHkgZGVmaW5lZCBwcm9wc1xuICAgICAgICAvLyBpbiBjYXNlIGZ1bmN0aW9uIHJ1bGUgcmV0dXJucyBhIGZhbHN5IHZhbHVlLlxuICAgICAgICBzdHlsZVJ1bGUuc3R5bGUgPSBmblJ1bGUoZGF0YSkgfHwge307XG5cbiAgICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlUnVsZS5zdHlsZVtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBcImRldmVsb3BtZW50XCIgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgZnVuY3Rpb24gcnVsZXMgYXJlIG5vdCBzdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZm5WYWx1ZXMgPSBzdHlsZVJ1bGVbZm5WYWx1ZXNOc107IC8vIElmIHdlIGhhdmUgYSBmbiB2YWx1ZXMgbWFwLCBpdCBpcyBhIHJ1bGUgd2l0aCBmdW5jdGlvbiB2YWx1ZXMuXG5cbiAgICAgIGlmIChmblZhbHVlcykge1xuICAgICAgICBmb3IgKHZhciBfcHJvcCBpbiBmblZhbHVlcykge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBmblZhbHVlc1tfcHJvcF0oZGF0YSksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvblBsdWdpbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIGpzcyA9IHJlcXVpcmUoJ2pzcycpO1xuXG52YXIgcHggPSBqc3MuaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucHggOiAncHgnO1xudmFyIG1zID0ganNzLmhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLm1zIDogJ21zJztcbnZhciBwZXJjZW50ID0ganNzLmhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLnBlcmNlbnQgOiAnJSc7XG4vKipcbiAqIEdlbmVyYXRlZCBqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCBDU1MgcHJvcGVydHkgdW5pdHNcbiAqXG4gKiBAdHlwZSBvYmplY3RcbiAqL1xuXG52YXIgZGVmYXVsdFVuaXRzID0ge1xuICAvLyBBbmltYXRpb24gcHJvcGVydGllc1xuICAnYW5pbWF0aW9uLWRlbGF5JzogbXMsXG4gICdhbmltYXRpb24tZHVyYXRpb24nOiBtcyxcbiAgLy8gQmFja2dyb3VuZCBwcm9wZXJ0aWVzXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogcHgsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXgnOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teSc6IHB4LFxuICAnYmFja2dyb3VuZC1zaXplJzogcHgsXG4gIC8vIEJvcmRlciBQcm9wZXJ0aWVzXG4gIGJvcmRlcjogcHgsXG4gICdib3JkZXItYm90dG9tJzogcHgsXG4gICdib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWxlZnQnOiBweCxcbiAgJ2JvcmRlci1sZWZ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItcmFkaXVzJzogcHgsXG4gICdib3JkZXItcmlnaHQnOiBweCxcbiAgJ2JvcmRlci1yaWdodC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXRvcCc6IHB4LFxuICAnYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci10b3Atd2lkdGgnOiBweCxcbiAgJ2JvcmRlci13aWR0aCc6IHB4LFxuICAvLyBNYXJnaW4gcHJvcGVydGllc1xuICBtYXJnaW46IHB4LFxuICAnbWFyZ2luLWJvdHRvbSc6IHB4LFxuICAnbWFyZ2luLWxlZnQnOiBweCxcbiAgJ21hcmdpbi1yaWdodCc6IHB4LFxuICAnbWFyZ2luLXRvcCc6IHB4LFxuICAvLyBQYWRkaW5nIHByb3BlcnRpZXNcbiAgcGFkZGluZzogcHgsXG4gICdwYWRkaW5nLWJvdHRvbSc6IHB4LFxuICAncGFkZGluZy1sZWZ0JzogcHgsXG4gICdwYWRkaW5nLXJpZ2h0JzogcHgsXG4gICdwYWRkaW5nLXRvcCc6IHB4LFxuICAvLyBNYXNrIHByb3BlcnRpZXNcbiAgJ21hc2stcG9zaXRpb24teCc6IHB4LFxuICAnbWFzay1wb3NpdGlvbi15JzogcHgsXG4gICdtYXNrLXNpemUnOiBweCxcbiAgLy8gV2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gIGhlaWdodDogcHgsXG4gIHdpZHRoOiBweCxcbiAgJ21pbi1oZWlnaHQnOiBweCxcbiAgJ21heC1oZWlnaHQnOiBweCxcbiAgJ21pbi13aWR0aCc6IHB4LFxuICAnbWF4LXdpZHRoJzogcHgsXG4gIC8vIFBvc2l0aW9uIHByb3BlcnRpZXNcbiAgYm90dG9tOiBweCxcbiAgbGVmdDogcHgsXG4gIHRvcDogcHgsXG4gIHJpZ2h0OiBweCxcbiAgLy8gU2hhZG93IHByb3BlcnRpZXNcbiAgJ2JveC1zaGFkb3cnOiBweCxcbiAgJ3RleHQtc2hhZG93JzogcHgsXG4gIC8vIENvbHVtbiBwcm9wZXJ0aWVzXG4gICdjb2x1bW4tZ2FwJzogcHgsXG4gICdjb2x1bW4tcnVsZSc6IHB4LFxuICAnY29sdW1uLXJ1bGUtd2lkdGgnOiBweCxcbiAgJ2NvbHVtbi13aWR0aCc6IHB4LFxuICAvLyBGb250IGFuZCB0ZXh0IHByb3BlcnRpZXNcbiAgJ2ZvbnQtc2l6ZSc6IHB4LFxuICAnZm9udC1zaXplLWRlbHRhJzogcHgsXG4gICdsZXR0ZXItc3BhY2luZyc6IHB4LFxuICAndGV4dC1pbmRlbnQnOiBweCxcbiAgJ3RleHQtc3Ryb2tlJzogcHgsXG4gICd0ZXh0LXN0cm9rZS13aWR0aCc6IHB4LFxuICAnd29yZC1zcGFjaW5nJzogcHgsXG4gIC8vIE1vdGlvbiBwcm9wZXJ0aWVzXG4gIG1vdGlvbjogcHgsXG4gICdtb3Rpb24tb2Zmc2V0JzogcHgsXG4gIC8vIE91dGxpbmUgcHJvcGVydGllc1xuICBvdXRsaW5lOiBweCxcbiAgJ291dGxpbmUtb2Zmc2V0JzogcHgsXG4gICdvdXRsaW5lLXdpZHRoJzogcHgsXG4gIC8vIFBlcnNwZWN0aXZlIHByb3BlcnRpZXNcbiAgcGVyc3BlY3RpdmU6IHB4LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXgnOiBwZXJjZW50LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXknOiBwZXJjZW50LFxuICAvLyBUcmFuc2Zvcm0gcHJvcGVydGllc1xuICAndHJhbnNmb3JtLW9yaWdpbic6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXgnOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi15JzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teic6IHBlcmNlbnQsXG4gIC8vIFRyYW5zaXRpb24gcHJvcGVydGllc1xuICAndHJhbnNpdGlvbi1kZWxheSc6IG1zLFxuICAndHJhbnNpdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBBbGlnbm1lbnQgcHJvcGVydGllc1xuICAndmVydGljYWwtYWxpZ24nOiBweCxcbiAgJ2ZsZXgtYmFzaXMnOiBweCxcbiAgLy8gU29tZSByYW5kb20gcHJvcGVydGllc1xuICAnc2hhcGUtbWFyZ2luJzogcHgsXG4gIHNpemU6IHB4LFxuICAvLyBHcmlkIHByb3BlcnRpZXNcbiAgZ3JpZDogcHgsXG4gICdncmlkLWdhcCc6IHB4LFxuICAnZ3JpZC1yb3ctZ2FwJzogcHgsXG4gICdncmlkLWNvbHVtbi1nYXAnOiBweCxcbiAgJ2dyaWQtdGVtcGxhdGUtcm93cyc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zJzogcHgsXG4gICdncmlkLWF1dG8tcm93cyc6IHB4LFxuICAnZ3JpZC1hdXRvLWNvbHVtbnMnOiBweCxcbiAgLy8gTm90IGV4aXN0aW5nIHByb3BlcnRpZXMuXG4gIC8vIFVzZWQgdG8gYXZvaWQgaXNzdWVzIHdpdGgganNzLXBsdWdpbi1leHBhbmQgaW50ZWdyYXRpb24uXG4gICdib3gtc2hhZG93LXgnOiBweCxcbiAgJ2JveC1zaGFkb3cteSc6IHB4LFxuICAnYm94LXNoYWRvdy1ibHVyJzogcHgsXG4gICdib3gtc2hhZG93LXNwcmVhZCc6IHB4LFxuICAnZm9udC1saW5lLWhlaWdodCc6IHB4LFxuICAndGV4dC1zaGFkb3cteCc6IHB4LFxuICAndGV4dC1zaGFkb3cteSc6IHB4LFxuICAndGV4dC1zaGFkb3ctYmx1cic6IHB4XG59O1xuXG4vKipcbiAqIENsb25lcyB0aGUgb2JqZWN0IGFuZCBhZGRzIGEgY2FtZWwgY2FzZWQgcHJvcGVydHkgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob2JqKSB7XG4gIHZhciByZWdFeHAgPSAvKC1bYS16XSkvZztcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0clsxXS50b1VwcGVyQ2FzZSgpO1xuICB9O1xuXG4gIHZhciBuZXdPYmogPSB7fTtcblxuICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgIG5ld09ialtfa2V5XSA9IG9ialtfa2V5XTtcbiAgICBuZXdPYmpbX2tleS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZSldID0gb2JqW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxudmFyIHVuaXRzID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24oZGVmYXVsdFVuaXRzKTtcbi8qKlxuICogUmVjdXJzaXZlIGRlZXAgc3R5bGUgcGFzc2luZyBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGl0ZXJhdGUocHJvcCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlW2ldID0gaXRlcmF0ZShwcm9wLCB2YWx1ZVtpXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGZvciAodmFyIGlubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtpbm5lclByb3BdID0gaXRlcmF0ZShpbm5lclByb3AsIHZhbHVlW2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBfaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW19pbm5lclByb3BdID0gaXRlcmF0ZShwcm9wICsgXCItXCIgKyBfaW5uZXJQcm9wLCB2YWx1ZVtfaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB2YXIgdW5pdCA9IG9wdGlvbnNbcHJvcF0gfHwgdW5pdHNbcHJvcF07XG5cbiAgICBpZiAodW5pdCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB1bml0ID09PSAnZnVuY3Rpb24nID8gdW5pdCh2YWx1ZSkudG9TdHJpbmcoKSA6IFwiXCIgKyB2YWx1ZSArIHVuaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEFkZCB1bml0IHRvIG51bWVyaWMgdmFsdWVzLlxuICovXG5cblxuZnVuY3Rpb24gZGVmYXVsdFVuaXQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIGNhbWVsQ2FzZWRPcHRpb25zID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICBzdHlsZVtwcm9wXSA9IGl0ZXJhdGUocHJvcCwgc3R5bGVbcHJvcF0sIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUocHJvcCwgdmFsdWUsIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdFVuaXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgaHlwaGVuYXRlID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ2h5cGhlbmF0ZS1zdHlsZS1uYW1lJykpO1xuXG4vKipcbiAqIENvbnZlcnQgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gZGFzaCBzZXBhcmF0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gY29udmVydENhc2Uoc3R5bGUpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICB2YXIga2V5ID0gcHJvcC5pbmRleE9mKCctLScpID09PSAwID8gcHJvcCA6IGh5cGhlbmF0ZShwcm9wKTtcbiAgICBjb252ZXJ0ZWRba2V5XSA9IHN0eWxlW3Byb3BdO1xuICB9XG5cbiAgaWYgKHN0eWxlLmZhbGxiYWNrcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmZhbGxiYWNrcykpIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3MubWFwKGNvbnZlcnRDYXNlKTtlbHNlIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBjb252ZXJ0Q2FzZShzdHlsZS5mYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cbi8qKlxuICogQWxsb3cgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgYnkgY29udmVydGluZyB0aGVtIGJhY2sgdG8gZGFzaGVyaXplZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZSgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIC8vIEhhbmRsZSBydWxlcyBsaWtlIEBmb250LWZhY2UsIHdoaWNoIGNhbiBoYXZlIG11bHRpcGxlIHN0eWxlcyBpbiBhbiBhcnJheVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHlsZVtpbmRleF0gPSBjb252ZXJ0Q2FzZShzdHlsZVtpbmRleF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnZlcnRDYXNlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICBpZiAocHJvcC5pbmRleE9mKCctLScpID09PSAwKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGh5cGhlbmF0ZWRQcm9wID0gaHlwaGVuYXRlKHByb3ApOyAvLyBUaGVyZSB3YXMgbm8gY2FtZWwgY2FzZSBpbiBwbGFjZVxuXG4gICAgaWYgKHByb3AgPT09IGh5cGhlbmF0ZWRQcm9wKSByZXR1cm4gdmFsdWU7XG4gICAgcnVsZS5wcm9wKGh5cGhlbmF0ZWRQcm9wLCB2YWx1ZSk7IC8vIENvcmUgd2lsbCBpZ25vcmUgdGhhdCBwcm9wZXJ0eSB2YWx1ZSB3ZSBzZXQgdGhlIHByb3BlciBvbmUgYWJvdmUuXG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gY2FtZWxDYXNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIF9leHRlbmRzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpKTtcbnZhciBqc3MgPSByZXF1aXJlKCdqc3MnKTtcblxudmFyIGF0ID0gJ0BnbG9iYWwnO1xudmFyIGF0UHJlZml4ID0gJ0BnbG9iYWwgJztcblxudmFyIEdsb2JhbENvbnRhaW5lclJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxDb250YWluZXJSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcganNzLlJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBzZWxlY3RvciBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKHNlbGVjdG9yLCBzdHlsZXNbc2VsZWN0b3JdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gR2xvYmFsQ29udGFpbmVyUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKCk7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbENvbnRhaW5lclJ1bGU7XG59KCk7XG5cbnZhciBHbG9iYWxQcmVmaXhlZFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxQcmVmaXhlZFJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHZhciBzZWxlY3RvciA9IGtleS5zdWJzdHIoYXRQcmVmaXgubGVuZ3RoKTtcbiAgICB0aGlzLnJ1bGUgPSBvcHRpb25zLmpzcy5jcmVhdGVSdWxlKHNlbGVjdG9yLCBzdHlsZSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gR2xvYmFsUHJlZml4ZWRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnJ1bGUgPyB0aGlzLnJ1bGUudG9TdHJpbmcob3B0aW9ucykgOiAnJztcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsUHJlZml4ZWRSdWxlO1xufSgpO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xuXG5mdW5jdGlvbiBhZGRTY29wZShzZWxlY3Rvciwgc2NvcGUpIHtcbiAgdmFyIHBhcnRzID0gc2VsZWN0b3Iuc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgdmFyIHNjb3BlZCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBzY29wZWQgKz0gc2NvcGUgKyBcIiBcIiArIHBhcnRzW2ldLnRyaW0oKTtcbiAgICBpZiAocGFydHNbaSArIDFdKSBzY29wZWQgKz0gJywgJztcbiAgfVxuXG4gIHJldHVybiBzY29wZWQ7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcbiAgdmFyIHJ1bGVzID0gc3R5bGUgPyBzdHlsZVthdF0gOiBudWxsO1xuICBpZiAoIXJ1bGVzKSByZXR1cm47XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBydWxlcykge1xuICAgIG9wdGlvbnMuc2hlZXQuYWRkUnVsZShuYW1lLCBydWxlc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBhZGRTY29wZShuYW1lLCBydWxlLnNlbGVjdG9yKVxuICAgIH0pKTtcbiAgfVxuXG4gIGRlbGV0ZSBzdHlsZVthdF07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlKSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICBpZiAocHJvcFswXSAhPT0gJ0AnIHx8IHByb3Auc3Vic3RyKDAsIGF0Lmxlbmd0aCkgIT09IGF0KSBjb250aW51ZTtcbiAgICB2YXIgc2VsZWN0b3IgPSBhZGRTY29wZShwcm9wLnN1YnN0cihhdC5sZW5ndGgpLCBydWxlLnNlbGVjdG9yKTtcbiAgICBvcHRpb25zLnNoZWV0LmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgfSkpO1xuICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgfVxufVxuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24ganNzR2xvYmFsKCkge1xuICBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKCFuYW1lKSByZXR1cm4gbnVsbDtcblxuICAgIGlmIChuYW1lID09PSBhdCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxDb250YWluZXJSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyAmJiBuYW1lLnN1YnN0cigwLCBhdFByZWZpeC5sZW5ndGgpID09PSBhdFByZWZpeCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxQcmVmaXhlZFJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LnR5cGUgPT09ICdnbG9iYWwnIHx8IHBhcmVudC5vcHRpb25zLnBhcmVudCAmJiBwYXJlbnQub3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcpIHtcbiAgICAgICAgb3B0aW9ucy5zY29wZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zY29wZWQgPT09IGZhbHNlKSB7XG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gbmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybjtcbiAgICBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUpO1xuICAgIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBvbkNyZWF0ZVJ1bGUsXG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZVxuICB9O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBqc3NHbG9iYWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgX2V4dGVuZHMgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJykpO1xudmFyIHdhcm5pbmcgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgndGlueS13YXJuaW5nJykpO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xudmFyIHBhcmVudFJlZ0V4cCA9IC8mL2c7XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc05lc3RlZCgpIHtcbiAgLy8gR2V0IGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgJHJlZiByZXBsYWNlbWVudC5cbiAgZnVuY3Rpb24gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtYXRjaCwga2V5KSB7XG4gICAgICB2YXIgcnVsZSA9IGNvbnRhaW5lci5nZXRSdWxlKGtleSkgfHwgc2hlZXQgJiYgc2hlZXQuZ2V0UnVsZShrZXkpO1xuXG4gICAgICBpZiAocnVsZSkge1xuICAgICAgICBydWxlID0gcnVsZTtcbiAgICAgICAgcmV0dXJuIHJ1bGUuc2VsZWN0b3I7XG4gICAgICB9XG5cbiAgICAgIFwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIENvdWxkIG5vdCBmaW5kIHRoZSByZWZlcmVuY2VkIHJ1bGUgXFxcIlwiICsga2V5ICsgXCJcXFwiIGluIFxcXCJcIiArIChjb250YWluZXIub3B0aW9ucy5tZXRhIHx8IGNvbnRhaW5lci50b1N0cmluZygpKSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlUGFyZW50UmVmcyhuZXN0ZWRQcm9wLCBwYXJlbnRQcm9wKSB7XG4gICAgdmFyIHBhcmVudFNlbGVjdG9ycyA9IHBhcmVudFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgbmVzdGVkU2VsZWN0b3JzID0gbmVzdGVkUHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciByZXN1bHQgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50U2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcGFyZW50U2VsZWN0b3JzW2ldO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5lc3RlZFNlbGVjdG9ycy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgbmVzdGVkID0gbmVzdGVkU2VsZWN0b3JzW2pdO1xuICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJywgJzsgLy8gUmVwbGFjZSBhbGwgJiBieSB0aGUgcGFyZW50IG9yIHByZWZpeCAmIHdpdGggdGhlIHBhcmVudC5cblxuICAgICAgICByZXN1bHQgKz0gbmVzdGVkLmluZGV4T2YoJyYnKSAhPT0gLTEgPyBuZXN0ZWQucmVwbGFjZShwYXJlbnRSZWdFeHAsIHBhcmVudCkgOiBwYXJlbnQgKyBcIiBcIiArIG5lc3RlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3B0aW9ucyhydWxlLCBjb250YWluZXIsIHByZXZPcHRpb25zKSB7XG4gICAgLy8gT3B0aW9ucyBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQsIG5vdyB3ZSBvbmx5IGluY3JlYXNlIGluZGV4LlxuICAgIGlmIChwcmV2T3B0aW9ucykgcmV0dXJuIF9leHRlbmRzKHt9LCBwcmV2T3B0aW9ucywge1xuICAgICAgaW5kZXg6IHByZXZPcHRpb25zLmluZGV4ICsgMVxuICAgIH0pO1xuICAgIHZhciBuZXN0aW5nTGV2ZWwgPSBydWxlLm9wdGlvbnMubmVzdGluZ0xldmVsO1xuICAgIG5lc3RpbmdMZXZlbCA9IG5lc3RpbmdMZXZlbCA9PT0gdW5kZWZpbmVkID8gMSA6IG5lc3RpbmdMZXZlbCArIDE7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBydWxlLm9wdGlvbnMsIHtcbiAgICAgIG5lc3RpbmdMZXZlbDogbmVzdGluZ0xldmVsLFxuICAgICAgaW5kZXg6IGNvbnRhaW5lci5pbmRleE9mKHJ1bGUpICsgMSAvLyBXZSBkb24ndCBuZWVkIHRoZSBwYXJlbnQgbmFtZSB0byBiZSBzZXQgb3B0aW9ucyBmb3IgY2hsaWQuXG5cbiAgICB9KTtcblxuICAgIGRlbGV0ZSBvcHRpb25zLm5hbWU7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7XG4gICAgdmFyIGNvbnRhaW5lciA9IHN0eWxlUnVsZS5vcHRpb25zLnBhcmVudDtcbiAgICB2YXIgb3B0aW9ucztcbiAgICB2YXIgcmVwbGFjZVJlZjtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciBpc05lc3RlZCA9IHByb3AuaW5kZXhPZignJicpICE9PSAtMTtcbiAgICAgIHZhciBpc05lc3RlZENvbmRpdGlvbmFsID0gcHJvcFswXSA9PT0gJ0AnO1xuICAgICAgaWYgKCFpc05lc3RlZCAmJiAhaXNOZXN0ZWRDb25kaXRpb25hbCkgY29udGludWU7XG4gICAgICBvcHRpb25zID0gZ2V0T3B0aW9ucyhzdHlsZVJ1bGUsIGNvbnRhaW5lciwgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChpc05lc3RlZCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSByZXBsYWNlUGFyZW50UmVmcyhwcm9wLCBzdHlsZVJ1bGUuc2VsZWN0b3IpOyAvLyBMYXppbHkgY3JlYXRlIHRoZSByZWYgcmVwbGFjZXIgZnVuY3Rpb24ganVzdCBvbmNlIGZvclxuICAgICAgICAvLyBhbGwgbmVzdGVkIHJ1bGVzIHdpdGhpbiB0aGUgc2hlZXQuXG5cbiAgICAgICAgaWYgKCFyZXBsYWNlUmVmKSByZXBsYWNlUmVmID0gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KTsgLy8gUmVwbGFjZSBhbGwgJHJlZnMuXG5cbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKHJlZlJlZ0V4cCwgcmVwbGFjZVJlZik7XG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIGlmIChpc05lc3RlZENvbmRpdGlvbmFsKSB7XG4gICAgICAgIC8vIFBsYWNlIGNvbmRpdGlvbmFsIHJpZ2h0IGFmdGVyIHRoZSBwYXJlbnQgcnVsZSB0byBlbnN1cmUgcmlnaHQgb3JkZXJpbmcuXG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHByb3AsIHt9LCBvcHRpb25zKSAvLyBGbG93IGV4cGVjdHMgbW9yZSBvcHRpb25zIGJ1dCB0aGV5IGFyZW4ndCByZXF1aXJlZFxuICAgICAgICAvLyBBbmQgZmxvdyBkb2Vzbid0IGtub3cgdGhpcyB3aWxsIGFsd2F5cyBiZSBhIFN0eWxlUnVsZSB3aGljaCBoYXMgdGhlIGFkZFJ1bGUgbWV0aG9kXG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgLmFkZFJ1bGUoc3R5bGVSdWxlLmtleSwgc3R5bGVbcHJvcF0sIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc3R5bGVSdWxlLnNlbGVjdG9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGVcbiAgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0ganNzTmVzdGVkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgdmVuZG9yID0gcmVxdWlyZSgnY3NzLXZlbmRvcicpO1xudmFyIGpzcyA9IHJlcXVpcmUoJ2pzcycpO1xuXG4vKipcbiAqIEFkZCB2ZW5kb3IgcHJlZml4IHRvIGEgcHJvcGVydHkgbmFtZSB3aGVuIG5lZWRlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc1ZlbmRvclByZWZpeGVyKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgdmFyIGF0UnVsZSA9IHJ1bGU7XG4gICAgICBhdFJ1bGUuYXQgPSB2ZW5kb3Iuc3VwcG9ydGVkS2V5ZnJhbWVzKGF0UnVsZS5hdCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlZml4U3R5bGUoc3R5bGUpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcblxuICAgICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHN0eWxlW3Byb3BdID0gdmFsdWUubWFwKHByZWZpeFN0eWxlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VQcm9wID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHZlbmRvci5zdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRQcm9wICYmIHN1cHBvcnRlZFByb3AgIT09IHByb3ApIGNoYW5nZVByb3AgPSB0cnVlO1xuICAgICAgdmFyIGNoYW5nZVZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkVmFsdWUgPSB2ZW5kb3Iuc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwganNzLnRvQ3NzVmFsdWUodmFsdWUpKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRWYWx1ZSAmJiBzdXBwb3J0ZWRWYWx1ZSAhPT0gdmFsdWUpIGNoYW5nZVZhbHVlID0gdHJ1ZTtcblxuICAgICAgaWYgKGNoYW5nZVByb3AgfHwgY2hhbmdlVmFsdWUpIHtcbiAgICAgICAgaWYgKGNoYW5nZVByb3ApIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgc3R5bGVbc3VwcG9ydGVkUHJvcCB8fCBwcm9wXSA9IHN1cHBvcnRlZFZhbHVlIHx8IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHJldHVybiBwcmVmaXhTdHlsZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHZlbmRvci5zdXBwb3J0ZWRWYWx1ZShwcm9wLCBqc3MudG9Dc3NWYWx1ZSh2YWx1ZSkpIHx8IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlLFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGpzc1ZlbmRvclByZWZpeGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSW5wdXRCYXNlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0lucHV0QmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSW5wdXRCYXNlXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZvcm1Db250cm9sU3RhdGU7XG5cbmZ1bmN0aW9uIGZvcm1Db250cm9sU3RhdGUoX3JlZikge1xuICB2YXIgcHJvcHMgPSBfcmVmLnByb3BzLFxuICAgICAgc3RhdGVzID0gX3JlZi5zdGF0ZXMsXG4gICAgICBtdWlGb3JtQ29udHJvbCA9IF9yZWYubXVpRm9ybUNvbnRyb2w7XG4gIHJldHVybiBzdGF0ZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHN0YXRlKSB7XG4gICAgYWNjW3N0YXRlXSA9IHByb3BzW3N0YXRlXTtcblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1tzdGF0ZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFjY1tzdGF0ZV0gPSBtdWlGb3JtQ29udHJvbFtzdGF0ZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5oYXNWYWx1ZSA9IGhhc1ZhbHVlO1xuZXhwb3J0cy5pc0ZpbGxlZCA9IGlzRmlsbGVkO1xuZXhwb3J0cy5pc0Fkb3JuZWRTdGFydCA9IGlzQWRvcm5lZFN0YXJ0O1xuXG4vLyBTdXBwb3J0cyBkZXRlcm1pbmF0aW9uIG9mIGlzQ29udHJvbGxlZCgpLlxuLy8gQ29udHJvbGxlZCBpbnB1dCBhY2NlcHRzIGl0cyBjdXJyZW50IHZhbHVlIGFzIGEgcHJvcC5cbi8vXG4vLyBAc2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHNcbi8vIEBwYXJhbSB2YWx1ZVxuLy8gQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgc3RyaW5nIChpbmNsdWRpbmcgJycpIG9yIG51bWJlciAoaW5jbHVkaW5nIHplcm8pXG5mdW5jdGlvbiBoYXNWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAhKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCk7XG59IC8vIERldGVybWluZSBpZiBmaWVsZCBpcyBlbXB0eSBvciBmaWxsZWQuXG4vLyBSZXNwb25zZSBkZXRlcm1pbmVzIGlmIGxhYmVsIGlzIHByZXNlbnRlZCBhYm92ZSBmaWVsZCBvciBhcyBwbGFjZWhvbGRlci5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcGFyYW0gU1NSXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBub3QgcHJlc2VudCBvciBlbXB0eSBzdHJpbmcuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFueSBudW1iZXIgb3Igc3RyaW5nIHdpdGggbGVuZ3RoLlxuXG5cbmZ1bmN0aW9uIGlzRmlsbGVkKG9iaikge1xuICB2YXIgU1NSID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgcmV0dXJuIG9iaiAmJiAoaGFzVmFsdWUob2JqLnZhbHVlKSAmJiBvYmoudmFsdWUgIT09ICcnIHx8IFNTUiAmJiBoYXNWYWx1ZShvYmouZGVmYXVsdFZhbHVlKSAmJiBvYmouZGVmYXVsdFZhbHVlICE9PSAnJyk7XG59IC8vIERldGVybWluZSBpZiBhbiBJbnB1dCBpcyBhZG9ybmVkIG9uIHN0YXJ0LlxuLy8gSXQncyBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IHdpdGggTFRSLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vIGFkb3JubWVudHMuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFkb3JuZWQgYXQgdGhlIHN0YXJ0LlxuXG5cbmZ1bmN0aW9uIGlzQWRvcm5lZFN0YXJ0KG9iaikge1xuICByZXR1cm4gb2JqLnN0YXJ0QWRvcm5tZW50O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNNdWlFbGVtZW50O1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG5mdW5jdGlvbiBpc011aUVsZW1lbnQoZWxlbWVudCwgbXVpTmFtZXMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSAmJiBtdWlOYW1lcy5pbmRleE9mKGVsZW1lbnQudHlwZS5tdWlOYW1lKSAhPT0gLTE7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2Nsc3ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbHN4XCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX3VzZVRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3VzZVRoZW1lXCIpKTtcblxudmFyIF9jYXBpdGFsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvY2FwaXRhbGl6ZVwiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IC01LFxuICAgICAgbGVmdDogMCxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50IHdoZW4gYGxhYmVsV2lkdGhgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGxlZ2VuZDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbGluZUhlaWdodDogJzExcHgnLFxuICAgICAgLy8gc3luYyB3aXRoIGBoZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd3aWR0aCcsIHtcbiAgICAgICAgZHVyYXRpb246IDE1MCxcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50LiAqL1xuICAgIGxlZ2VuZExhYmVsbGVkOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGhlaWdodDogMTEsXG4gICAgICAvLyBzeW5jIHdpdGggYGxpbmVIZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICAgICAgZm9udFNpemU6ICcwLjc1ZW0nLFxuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICBtYXhXaWR0aDogMC4wMSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogNTAsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pLFxuICAgICAgJyYgPiBzcGFuJzoge1xuICAgICAgICBwYWRkaW5nTGVmdDogNSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiA1LFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgbGVnZW5kIGVsZW1lbnQgaXMgbm90Y2hlZC4gKi9cbiAgICBsZWdlbmROb3RjaGVkOiB7XG4gICAgICBtYXhXaWR0aDogMTAwMCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0LFxuICAgICAgICBkZWxheTogNTBcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xudmFyIE5vdGNoZWRPdXRsaW5lID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTm90Y2hlZE91dGxpbmUocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIGxhYmVsV2lkdGhQcm9wID0gcHJvcHMubGFiZWxXaWR0aCxcbiAgICAgIG5vdGNoZWQgPSBwcm9wcy5ub3RjaGVkLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImxhYmVsXCIsIFwibGFiZWxXaWR0aFwiLCBcIm5vdGNoZWRcIiwgXCJzdHlsZVwiXSk7XG4gIHZhciB0aGVtZSA9ICgwLCBfdXNlVGhlbWUuZGVmYXVsdCkoKTtcbiAgdmFyIGFsaWduID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdyaWdodCcgOiAnbGVmdCc7XG5cbiAgaWYgKGxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiLCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbHN4LmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImxlZ2VuZFwiLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLmxlZ2VuZExhYmVsbGVkLCBub3RjaGVkICYmIGNsYXNzZXMubGVnZW5kTm90Y2hlZClcbiAgICB9LCBsYWJlbCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBsYWJlbCkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9XG5cbiAgdmFyIGxhYmVsV2lkdGggPSBsYWJlbFdpZHRoUHJvcCA+IDAgPyBsYWJlbFdpZHRoUHJvcCAqIDAuNzUgKyA4IDogMC4wMTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIiwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIHN0eWxlOiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKCgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBcInBhZGRpbmdcIi5jb25jYXQoKDAsIF9jYXBpdGFsaXplLmRlZmF1bHQpKGFsaWduKSksIDgpLCBzdHlsZSksXG4gICAgY2xhc3NOYW1lOiAoMCwgX2Nsc3guZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsZWdlbmRcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sZWdlbmQsXG4gICAgc3R5bGU6IHtcbiAgICAgIC8vIElFIDExOiBmaWVsZHNldCB3aXRoIGxlZ2VuZCBkb2VzIG5vdCByZW5kZXJcbiAgICAgIC8vIGEgYm9yZGVyIHJhZGl1cy4gVGhpcyBtYWludGFpbnMgY29uc2lzdGVuY3lcbiAgICAgIC8vIGJ5IGFsd2F5cyBoYXZpbmcgYSBsZWdlbmQgcmVuZGVyZWRcbiAgICAgIHdpZHRoOiBub3RjaGVkID8gbGFiZWxXaWR0aCA6IDAuMDFcbiAgICB9XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgIF9faHRtbDogJyYjODIwMzsnXG4gICAgfVxuICB9KSkpO1xufSk7XG5cImRldmVsb3BtZW50XCIgIT09IFwicHJvZHVjdGlvblwiID8gTm90Y2hlZE91dGxpbmUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbC5cbiAgICovXG4gIGxhYmVsOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsYWJlbC5cbiAgICovXG4gIGxhYmVsV2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59IDogdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlTm90Y2hlZE91dGxpbmUnXG59KShOb3RjaGVkT3V0bGluZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0Zvcm1MYWJlbC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Gb3JtTGFiZWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Zvcm1MYWJlbFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbHN4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xzeFwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgX2NhcGl0YWxpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9jYXBpdGFsaXplXCIpKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG52YXIgTmF0aXZlU2VsZWN0SW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXRpdmVTZWxlY3RJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0UmVmID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcInZhcmlhbnRcIl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbHN4LmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgLy8gVE9ETyB2NTogbWVyZ2Ugcm9vdCBhbmQgc2VsZWN0XG4gICAgY2xhc3Nlcy5zZWxlY3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIHJlZjogaW5wdXRSZWYgfHwgcmVmXG4gIH0sIG90aGVyKSksIHByb3BzLm11bHRpcGxlID8gbnVsbCA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLmljb24sIGNsYXNzZXNbXCJpY29uXCIuY29uY2F0KCgwLCBfY2FwaXRhbGl6ZS5kZWZhdWx0KSh2YXJpYW50KSldLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKVxuICB9KSk7XG59KTtcblwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOYXRpdmVTZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxvcHRpb24+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wIHRvIHBhc3MgYSByZWYgdG8gdGhlIG5hdGl2ZSBzZWxlY3QgZWxlbWVudC5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGlucHV0UmVmOiBfdXRpbHMucmVmVHlwZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVsdGlwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgb3IgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbnZhciBfZGVmYXVsdCA9IE5hdGl2ZVNlbGVjdElucHV0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX05hdGl2ZVNlbGVjdElucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9OYXRpdmVTZWxlY3RJbnB1dFwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9mb3JtQ29udHJvbFN0YXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZVwiKSk7XG5cbnZhciBfdXNlRm9ybUNvbnRyb2wgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbFwiKSk7XG5cbnZhciBfQXJyb3dEcm9wRG93biA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duXCIpKTtcblxudmFyIF9JbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0lucHV0XCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGByb290YCBjbGFzcy4gKi9cbiAgICByb290OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGBzZWxlY3RgIGNsYXNzLiAqL1xuICAgIHNlbGVjdDoge1xuICAgICAgJy1tb3otYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAgIC8vIFJlc2V0XG4gICAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgICAgLy8gUmVzZXRcbiAgICAgIC8vIFdoZW4gaW50ZXJhY3RpbmcgcXVpY2tseSwgdGhlIHRleHQgY2FuIGVuZCB1cCBzZWxlY3RlZC5cbiAgICAgIC8vIE5hdGl2ZSBzZWxlY3QgY2FuJ3QgYmUgc2VsZWN0ZWQgZWl0aGVyLlxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgLy8gUmVzZXRcbiAgICAgIG1pbldpZHRoOiAxNixcbiAgICAgIC8vIFNvIGl0IGRvZXNuJ3QgY29sbGFwc2UuXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICAvLyBTaG93IHRoYXQgaXQncyBub3QgYW4gdGV4dCBpbnB1dFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMDUpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDUpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwIC8vIFJlc2V0IENocm9tZSBzdHlsZVxuXG4gICAgICB9LFxuICAgICAgLy8gUmVtb3ZlIElFIDExIGFycm93XG4gICAgICAnJjo6LW1zLWV4cGFuZCc6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgICB9LFxuICAgICAgJyZbbXVsdGlwbGVdJzoge1xuICAgICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgICAgfSxcbiAgICAgICcmOm5vdChbbXVsdGlwbGVdKSBvcHRpb24sICY6bm90KFttdWx0aXBsZV0pIG9wdGdyb3VwJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxuICAgICAgfSxcbiAgICAgICcmJic6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAyNFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2VsZWN0IGNvbXBvbmVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYC4gKi9cbiAgICBmaWxsZWQ6IHtcbiAgICAgICcmJic6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAzMlxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2VsZWN0IGNvbXBvbmVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgICcmJic6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAzMlxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2VsZWN0IGNvbXBvbmVudCBgc2VsZWN0TWVudWAgY2xhc3MuICovXG4gICAgc2VsZWN0TWVudToge1xuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICAvLyBSZXNldHMgZm9yIG11bHRwaWxlIHNlbGVjdCB3aXRoIGNoaXBzXG4gICAgICBtaW5IZWlnaHQ6ICcxLjE4NzZlbScsXG4gICAgICAvLyBSZXF1aXJlZCBmb3Igc2VsZWN0XFx0ZXh0LWZpZWxkIGhlaWdodCBjb25zaXN0ZW5jeVxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHNlbGVjdCBjb21wb25lbnQgYGRpc2FibGVkYCBjbGFzcy4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBjb21wb25lbnQuICovXG4gICAgaWNvbjoge1xuICAgICAgLy8gV2UgdXNlIGEgcG9zaXRpb24gYWJzb2x1dGUgb3ZlciBhIGZsZXhib3ggaW4gb3JkZXIgdG8gZm9yd2FyZCB0aGUgcG9pbnRlciBldmVudHNcbiAgICAgIC8vIHRvIHRoZSBpbnB1dCBhbmQgdG8gc3VwcG9ydCB3cmFwcGluZyB0YWdzLi5cbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6ICdjYWxjKDUwJSAtIDEycHgpJyxcbiAgICAgIC8vIENlbnRlciB2ZXJ0aWNhbGx5XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAvLyBEb24ndCBibG9jayBwb2ludGVyIGV2ZW50cyBvbiB0aGUgc2VsZWN0IHVuZGVyIHRoZSBpY29uLlxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gY29tcG9uZW50IGlmIHRoZSBwb3B1cCBpcyBvcGVuLiAqL1xuICAgIGljb25PcGVuOiB7XG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gY29tcG9uZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgLiAqL1xuICAgIGljb25GaWxsZWQ6IHtcbiAgICAgIHJpZ2h0OiA3XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGNvbXBvbmVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIGljb25PdXRsaW5lZDoge1xuICAgICAgcmlnaHQ6IDdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHVuZGVybHlpbmcgbmF0aXZlIGlucHV0IGNvbXBvbmVudC4gKi9cbiAgICBuYXRpdmVJbnB1dDoge1xuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcbnZhciBkZWZhdWx0SW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfSW5wdXQuZGVmYXVsdCwgbnVsbCk7XG4vKipcbiAqIEFuIGFsdGVybmF0aXZlIHRvIGA8U2VsZWN0IG5hdGl2ZSAvPmAgd2l0aCBhIG11Y2ggc21hbGxlciBidW5kbGUgc2l6ZSBmb290cHJpbnQuXG4gKi9cblxudmFyIE5hdGl2ZVNlbGVjdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdGl2ZVNlbGVjdChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gX3Byb3BzJEljb25Db21wb25lbnQgPT09IHZvaWQgMCA/IF9BcnJvd0Ryb3BEb3duLmRlZmF1bHQgOiBfcHJvcHMkSWNvbkNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRpbnB1dCA9IHByb3BzLmlucHV0LFxuICAgICAgaW5wdXQgPSBfcHJvcHMkaW5wdXQgPT09IHZvaWQgMCA/IGRlZmF1bHRJbnB1dCA6IF9wcm9wcyRpbnB1dCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRcIiwgXCJpbnB1dFByb3BzXCIsIFwidmFyaWFudFwiXSk7XG4gIHZhciBtdWlGb3JtQ29udHJvbCA9ICgwLCBfdXNlRm9ybUNvbnRyb2wuZGVmYXVsdCkoKTtcbiAgdmFyIGZjcyA9ICgwLCBfZm9ybUNvbnRyb2xTdGF0ZS5kZWZhdWx0KSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCddXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChpbnB1dCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYE5hdGl2ZVNlbGVjdElucHV0YC5cbiAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICBpbnB1dENvbXBvbmVudDogX05hdGl2ZVNlbGVjdElucHV0LmRlZmF1bHQsXG4gICAgaW5wdXRQcm9wczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgSWNvbkNvbXBvbmVudDogSWNvbkNvbXBvbmVudCxcbiAgICAgIHZhcmlhbnQ6IGZjcy52YXJpYW50LFxuICAgICAgdHlwZTogdW5kZWZpbmVkXG4gICAgfSwgaW5wdXRQcm9wcywgaW5wdXQgPyBpbnB1dC5wcm9wcy5pbnB1dFByb3BzIDoge30pLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcblwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOYXRpdmVTZWxlY3QucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIEFuIGBJbnB1dGAgZWxlbWVudDsgZG9lcyBub3QgaGF2ZSB0byBiZSBhIG1hdGVyaWFsLXVpIHNwZWNpZmljIGBJbnB1dGAuXG4gICAqL1xuICBpbnB1dDogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIEF0dHJpYnV0ZXMgYXBwbGllZCB0byB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLiBUaGUgRE9NIEFQSSBjYXN0cyB0aGlzIHRvIGEgc3RyaW5nLlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbk5hdGl2ZVNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aU5hdGl2ZVNlbGVjdCdcbn0pKE5hdGl2ZVNlbGVjdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk03IDEwbDUgNSA1LTV6XCJcbn0pLCAnQXJyb3dEcm9wRG93bicpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS91dGlsc1wiKTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdElzID0gcmVxdWlyZShcInJlYWN0LWlzXCIpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2Nsc3ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbHN4XCIpKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvb3duZXJEb2N1bWVudFwiKSk7XG5cbnZhciBfY2FwaXRhbGl6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2NhcGl0YWxpemVcIikpO1xuXG52YXIgX01lbnUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9NZW51L01lbnVcIikpO1xuXG52YXIgX3V0aWxzMiA9IHJlcXVpcmUoXCIuLi9JbnB1dEJhc2UvdXRpbHNcIik7XG5cbnZhciBfdXNlRm9ya1JlZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3VzZUZvcmtSZWZcIikpO1xuXG52YXIgX3VzZUNvbnRyb2xsZWQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdXNlQ29udHJvbGxlZFwiKSk7XG5cbmZ1bmN0aW9uIGFyZUVxdWFsVmFsdWVzKGEsIGIpIHtcbiAgaWYgKCgwLCBfdHlwZW9mMi5kZWZhdWx0KShiKSA9PT0gJ29iamVjdCcgJiYgYiAhPT0gbnVsbCkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG5cbiAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5KGRpc3BsYXkpIHtcbiAgcmV0dXJuIGRpc3BsYXkgPT0gbnVsbCB8fCB0eXBlb2YgZGlzcGxheSA9PT0gJ3N0cmluZycgJiYgIWRpc3BsYXkudHJpbSgpO1xufVxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cblxudmFyIFNlbGVjdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgYXJpYUxhYmVsID0gcHJvcHNbJ2FyaWEtbGFiZWwnXSxcbiAgICAgIGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGF1dG9XaWR0aCA9IHByb3BzLmF1dG9XaWR0aCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNwbGF5RW1wdHkgPSBwcm9wcy5kaXNwbGF5RW1wdHksXG4gICAgICBJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0UmVmUHJvcCA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgbGFiZWxJZCA9IHByb3BzLmxhYmVsSWQsXG4gICAgICBfcHJvcHMkTWVudVByb3BzID0gcHJvcHMuTWVudVByb3BzLFxuICAgICAgTWVudVByb3BzID0gX3Byb3BzJE1lbnVQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkTWVudVByb3BzLFxuICAgICAgbXVsdGlwbGUgPSBwcm9wcy5tdWx0aXBsZSxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuUHJvcCA9IHByb3BzLm9wZW4sXG4gICAgICByZWFkT25seSA9IHByb3BzLnJlYWRPbmx5LFxuICAgICAgcmVuZGVyVmFsdWUgPSBwcm9wcy5yZW5kZXJWYWx1ZSxcbiAgICAgIF9wcm9wcyRTZWxlY3REaXNwbGF5UCA9IHByb3BzLlNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IF9wcm9wcyRTZWxlY3REaXNwbGF5UCA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkU2VsZWN0RGlzcGxheVAsXG4gICAgICB0YWJJbmRleFByb3AgPSBwcm9wcy50YWJJbmRleCxcbiAgICAgIHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdmFsdWVQcm9wID0gcHJvcHMudmFsdWUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImFyaWEtbGFiZWxcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsSWRcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbkZvY3VzXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInJlYWRPbmx5XCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ0YWJJbmRleFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBfdXNlQ29udHJvbGxlZCA9ICgwLCBfdXNlQ29udHJvbGxlZDMuZGVmYXVsdCkoe1xuICAgIGNvbnRyb2xsZWQ6IHZhbHVlUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG4gICAgbmFtZTogJ1NlbGVjdCdcbiAgfSksXG4gICAgICBfdXNlQ29udHJvbGxlZDIgPSAoMCwgX3NsaWNlZFRvQXJyYXkyLmRlZmF1bHQpKF91c2VDb250cm9sbGVkLCAyKSxcbiAgICAgIHZhbHVlID0gX3VzZUNvbnRyb2xsZWQyWzBdLFxuICAgICAgc2V0VmFsdWUgPSBfdXNlQ29udHJvbGxlZDJbMV07XG5cbiAgdmFyIGlucHV0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShudWxsKSxcbiAgICAgIGRpc3BsYXlOb2RlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0RGlzcGxheU5vZGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYob3BlblByb3AgIT0gbnVsbCksXG4gICAgICBpc09wZW5Db250cm9sbGVkID0gX1JlYWN0JHVzZVJlZi5jdXJyZW50O1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUyID0gUmVhY3QudXNlU3RhdGUoKSxcbiAgICAgIG1lbnVNaW5XaWR0aFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIG9wZW5TdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTNbMF0sXG4gICAgICBzZXRPcGVuU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUzWzFdO1xuXG4gIHZhciBoYW5kbGVSZWYgPSAoMCwgX3VzZUZvcmtSZWYuZGVmYXVsdCkocmVmLCBpbnB1dFJlZlByb3ApO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGhhbmRsZVJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgIGRpc3BsYXlOb2RlLmZvY3VzKCk7XG4gICAgICB9LFxuICAgICAgbm9kZTogaW5wdXRSZWYuY3VycmVudCxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH07XG4gIH0sIFtkaXNwbGF5Tm9kZSwgdmFsdWVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXV0b0ZvY3VzICYmIGRpc3BsYXlOb2RlKSB7XG4gICAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2F1dG9Gb2N1cywgZGlzcGxheU5vZGVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGlzcGxheU5vZGUpIHtcbiAgICAgIHZhciBsYWJlbCA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShkaXNwbGF5Tm9kZSkuZ2V0RWxlbWVudEJ5SWQobGFiZWxJZCk7XG5cbiAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKGdldFNlbGVjdGlvbigpLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxhYmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2xhYmVsSWQsIGRpc3BsYXlOb2RlXSk7XG5cbiAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShvcGVuLCBldmVudCkge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgIG9uT3BlbihldmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWlzT3BlbkNvbnRyb2xsZWQpIHtcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlKGF1dG9XaWR0aCA/IG51bGwgOiBkaXNwbGF5Tm9kZS5jbGllbnRXaWR0aCk7XG4gICAgICBzZXRPcGVuU3RhdGUob3Blbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdC1jbGlja1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEhpamFjayB0aGUgZGVmYXVsdCBmb2N1cyBiZWhhdmlvci5cblxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsb3NlID0gZnVuY3Rpb24gaGFuZGxlQ2xvc2UoZXZlbnQpIHtcbiAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgfTtcblxuICB2YXIgY2hpbGRyZW5BcnJheSA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pOyAvLyBTdXBwb3J0IGF1dG9maWxsLlxuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICB2YXIgaW5kZXggPSBjaGlsZHJlbkFycmF5Lm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICB9KS5pbmRleE9mKGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5BcnJheVtpbmRleF07XG4gICAgc2V0VmFsdWUoY2hpbGQucHJvcHMudmFsdWUpO1xuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgY2hpbGQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlSXRlbUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlSXRlbUNsaWNrKGNoaWxkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFtdWx0aXBsZSkge1xuICAgICAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld1ZhbHVlO1xuXG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLnNsaWNlKCkgOiBbXTtcbiAgICAgICAgdmFyIGl0ZW1JbmRleCA9IHZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpO1xuXG4gICAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbmV3VmFsdWUucHVzaChjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgZXZlbnQucGVyc2lzdCgpOyAvLyBQcmVhY3Qgc3VwcG9ydCwgdGFyZ2V0IGlzIHJlYWQgb25seSBwcm9wZXJ0eSBvbiBhIG5hdGl2ZSBldmVudC5cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvbkNoYW5nZShldmVudCwgY2hpbGQpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKCFyZWFkT25seSkge1xuICAgICAgdmFyIHZhbGlkS2V5cyA9IFsnICcsICdBcnJvd1VwJywgJ0Fycm93RG93bicsIC8vIFRoZSBuYXRpdmUgc2VsZWN0IGRvZXNuJ3QgcmVzcG9uZCB0byBlbnRlciBvbiBNYWNPUywgYnV0IGl0J3MgcmVjb21tZW5kZWQgYnlcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMvZXhhbXBsZXMvbGlzdGJveC9saXN0Ym94LWNvbGxhcHNpYmxlLmh0bWxcbiAgICAgICdFbnRlciddO1xuXG4gICAgICBpZiAodmFsaWRLZXlzLmluZGV4T2YoZXZlbnQua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdXBkYXRlKHRydWUsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIG9wZW4gPSBkaXNwbGF5Tm9kZSAhPT0gbnVsbCAmJiAoaXNPcGVuQ29udHJvbGxlZCA/IG9wZW5Qcm9wIDogb3BlblN0YXRlKTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICAvLyBpZiBvcGVuIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblxuICAgIGlmICghb3BlbiAmJiBvbkJsdXIpIHtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTsgLy8gUHJlYWN0IHN1cHBvcnQsIHRhcmdldCBpcyByZWFkIG9ubHkgcHJvcGVydHkgb24gYSBuYXRpdmUgZXZlbnQuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgJ3RhcmdldCcsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBkZWxldGUgb3RoZXJbJ2FyaWEtaW52YWxpZCddO1xuICB2YXIgZGlzcGxheTtcbiAgdmFyIGRpc3BsYXlTaW5nbGU7XG4gIHZhciBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgdmFyIGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7XG4gIHZhciBmb3VuZE1hdGNoID0gZmFsc2U7IC8vIE5vIG5lZWQgdG8gZGlzcGxheSBhbnkgdmFsdWUgaWYgdGhlIGZpZWxkIGlzIGVtcHR5LlxuXG4gIGlmICgoMCwgX3V0aWxzMi5pc0ZpbGxlZCkoe1xuICAgIHZhbHVlOiB2YWx1ZVxuICB9KSB8fCBkaXNwbGF5RW1wdHkpIHtcbiAgICBpZiAocmVuZGVyVmFsdWUpIHtcbiAgICAgIGRpc3BsYXkgPSByZW5kZXJWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXB1dGVEaXNwbGF5ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXRlbXMgPSBjaGlsZHJlbkFycmF5Lm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICgoMCwgX3JlYWN0SXMuaXNGcmFnbWVudCkoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBTZWxlY3QgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2VsZWN0ZWQ7XG5cbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBUaGUgYHZhbHVlYCBwcm9wIG11c3QgYmUgYW4gYXJyYXkgd2hlbiB1c2luZyB0aGUgYFNlbGVjdGAgY29tcG9uZW50IHdpdGggYG11bHRpcGxlYC5cIiA6ICgwLCBfdXRpbHMuZm9ybWF0TXVpRXJyb3JNZXNzYWdlKSgyKSk7XG4gICAgICB9XG5cbiAgICAgIHNlbGVjdGVkID0gdmFsdWUuc29tZShmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gYXJlRXF1YWxWYWx1ZXModiwgY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBjb21wdXRlRGlzcGxheSkge1xuICAgICAgICBkaXNwbGF5TXVsdGlwbGUucHVzaChjaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkID0gYXJlRXF1YWxWYWx1ZXModmFsdWUsIGNoaWxkLnByb3BzLnZhbHVlKTtcblxuICAgICAgaWYgKHNlbGVjdGVkICYmIGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgIGRpc3BsYXlTaW5nbGUgPSBjaGlsZC5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAnYXJpYS1zZWxlY3RlZCc6IHNlbGVjdGVkID8gJ3RydWUnIDogdW5kZWZpbmVkLFxuICAgICAgb25DbGljazogaGFuZGxlSXRlbUNsaWNrKGNoaWxkKSxcbiAgICAgIG9uS2V5VXA6IGZ1bmN0aW9uIG9uS2V5VXAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIG91ciBNZW51SXRlbXMgZGlzcGF0Y2hlcyBhIGNsaWNrIGV2ZW50XG4gICAgICAgICAgLy8gaXQncyBub3QgYmVoYXZpb3Igb2YgdGhlIG5hdGl2ZSA8b3B0aW9uPiBhbmQgY2F1c2VzXG4gICAgICAgICAgLy8gdGhlIHNlbGVjdCB0byBjbG9zZSBpbW1lZGlhdGVseSBzaW5jZSB3ZSBvcGVuIG9uIHNwYWNlIGtleWRvd25cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uS2V5VXApIHtcbiAgICAgICAgICBjaGlsZC5wcm9wcy5vbktleVVwKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFRoZSB2YWx1ZSBpcyBtb3N0IGxpa2VseSBub3QgYSB2YWxpZCBIVE1MIGF0dHJpYnV0ZS5cbiAgICAgICdkYXRhLXZhbHVlJzogY2hpbGQucHJvcHMudmFsdWUgLy8gSW5zdGVhZCwgd2UgcHJvdmlkZSBpdCBhcyBhIGRhdGEgYXR0cmlidXRlLlxuXG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWZvdW5kTWF0Y2ggJiYgIW11bHRpcGxlICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICB2YXIgdmFsdWVzID0gY2hpbGRyZW5BcnJheS5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkLnByb3BzLnZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS53YXJuKFtcIk1hdGVyaWFsLVVJOiBZb3UgaGF2ZSBwcm92aWRlZCBhbiBvdXQtb2YtcmFuZ2UgdmFsdWUgYFwiLmNvbmNhdCh2YWx1ZSwgXCJgIGZvciB0aGUgc2VsZWN0IFwiKS5jb25jYXQobmFtZSA/IFwiKG5hbWU9XFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIpIFwiKSA6ICcnLCBcImNvbXBvbmVudC5cIiksIFwiQ29uc2lkZXIgcHJvdmlkaW5nIGEgdmFsdWUgdGhhdCBtYXRjaGVzIG9uZSBvZiB0aGUgYXZhaWxhYmxlIG9wdGlvbnMgb3IgJycuXCIsIFwiVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlIFwiLmNvbmNhdCh2YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgcmV0dXJuIHggIT0gbnVsbDtcbiAgICAgICAgfSkubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgcmV0dXJuIFwiYFwiLmNvbmNhdCh4LCBcImBcIik7XG4gICAgICAgIH0pLmpvaW4oJywgJykgfHwgJ1wiXCInLCBcIi5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZm91bmRNYXRjaCwgY2hpbGRyZW5BcnJheSwgbXVsdGlwbGUsIG5hbWUsIHZhbHVlXSk7XG4gIH1cblxuICBpZiAoY29tcHV0ZURpc3BsYXkpIHtcbiAgICBkaXNwbGF5ID0gbXVsdGlwbGUgPyBkaXNwbGF5TXVsdGlwbGUuam9pbignLCAnKSA6IGRpc3BsYXlTaW5nbGU7XG4gIH0gLy8gQXZvaWQgcGVyZm9ybWluZyBhIGxheW91dCBjb21wdXRhdGlvbiBpbiB0aGUgcmVuZGVyIG1ldGhvZC5cblxuXG4gIHZhciBtZW51TWluV2lkdGggPSBtZW51TWluV2lkdGhTdGF0ZTtcblxuICBpZiAoIWF1dG9XaWR0aCAmJiBpc09wZW5Db250cm9sbGVkICYmIGRpc3BsYXlOb2RlKSB7XG4gICAgbWVudU1pbldpZHRoID0gZGlzcGxheU5vZGUuY2xpZW50V2lkdGg7XG4gIH1cblxuICB2YXIgdGFiSW5kZXg7XG5cbiAgaWYgKHR5cGVvZiB0YWJJbmRleFByb3AgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGFiSW5kZXggPSB0YWJJbmRleFByb3A7XG4gIH0gZWxzZSB7XG4gICAgdGFiSW5kZXggPSBkaXNhYmxlZCA/IG51bGwgOiAwO1xuICB9XG5cbiAgdmFyIGJ1dHRvbklkID0gU2VsZWN0RGlzcGxheVByb3BzLmlkIHx8IChuYW1lID8gXCJtdWktY29tcG9uZW50LXNlbGVjdC1cIi5jb25jYXQobmFtZSkgOiB1bmRlZmluZWQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbHN4LmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgLy8gVE9ETyB2NTogbWVyZ2Ugcm9vdCBhbmQgc2VsZWN0XG4gICAgY2xhc3Nlcy5zZWxlY3QsIGNsYXNzZXMuc2VsZWN0TWVudSwgY2xhc3Nlc1t2YXJpYW50XSwgY2xhc3NOYW1lLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKSxcbiAgICByZWY6IHNldERpc3BsYXlOb2RlLFxuICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICByb2xlOiBcImJ1dHRvblwiLFxuICAgIFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCA/ICd0cnVlJyA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlbiA/ICd0cnVlJyA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCxcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBbbGFiZWxJZCwgYnV0dG9uSWRdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJykgfHwgdW5kZWZpbmVkLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbk1vdXNlRG93bjogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkZvY3VzOiBvbkZvY3VzXG4gIH0sIFNlbGVjdERpc3BsYXlQcm9wcywge1xuICAgIC8vIFRoZSBpZCBpcyByZXF1aXJlZCBmb3IgcHJvcGVyIGExMXlcbiAgICBpZDogYnV0dG9uSWRcbiAgfSksIGlzRW1wdHkoZGlzcGxheSkgP1xuICAvKiNfX1BVUkVfXyovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcbiAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgIH1cbiAgfSkgOiBkaXNwbGF5KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICB2YWx1ZTogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsJykgOiB2YWx1ZSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJlZjogaW5wdXRSZWYsXG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgdGFiSW5kZXg6IC0xLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5uYXRpdmVJbnB1dCxcbiAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1c1xuICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQ29tcG9uZW50LCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2Nsc3guZGVmYXVsdCkoY2xhc3Nlcy5pY29uLCBjbGFzc2VzW1wiaWNvblwiLmNvbmNhdCgoMCwgX2NhcGl0YWxpemUuZGVmYXVsdCkodmFyaWFudCkpXSwgb3BlbiAmJiBjbGFzc2VzLmljb25PcGVuLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKVxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX01lbnUuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgaWQ6IFwibWVudS1cIi5jb25jYXQobmFtZSB8fCAnJyksXG4gICAgYW5jaG9yRWw6IGRpc3BsYXlOb2RlLFxuICAgIG9wZW46IG9wZW4sXG4gICAgb25DbG9zZTogaGFuZGxlQ2xvc2VcbiAgfSwgTWVudVByb3BzLCB7XG4gICAgTWVudUxpc3RQcm9wczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGFiZWxJZCxcbiAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgIGRpc2FibGVMaXN0V3JhcDogdHJ1ZVxuICAgIH0sIE1lbnVQcm9wcy5NZW51TGlzdFByb3BzKSxcbiAgICBQYXBlclByb3BzOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBNZW51UHJvcHMuUGFwZXJQcm9wcywge1xuICAgICAgc3R5bGU6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBtaW5XaWR0aDogbWVudU1pbldpZHRoXG4gICAgICB9LCBNZW51UHJvcHMuUGFwZXJQcm9wcyAhPSBudWxsID8gTWVudVByb3BzLlBhcGVyUHJvcHMuc3R5bGUgOiBudWxsKVxuICAgIH0pXG4gIH0pLCBpdGVtcykpO1xufSk7XG5cImRldmVsb3BtZW50XCIgIT09IFwicHJvZHVjdGlvblwiID8gU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtbGFiZWwnOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhdXRvRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPE1lbnVJdGVtPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBlbGVtZW50IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBkaXNwbGF5ZWQgZXZlbiBpZiBpdHMgdmFsdWUgaXMgZW1wdHkuXG4gICAqL1xuICBkaXNwbGF5RW1wdHk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJbXBlcmF0aXZlIGhhbmRsZSBpbXBsZW1lbnRpbmcgYHsgdmFsdWU6IFQsIG5vZGU6IEhUTUxFbGVtZW50LCBmb2N1cygpOiB2b2lkIH1gXG4gICAqIEVxdWl2YWxlbnQgdG8gYHJlZmBcbiAgICovXG4gIGlucHV0UmVmOiBfdXRpbHMucmVmVHlwZSxcblxuICAvKipcbiAgICogVGhlIElEIG9mIGFuIGVsZW1lbnQgdGhhdCBhY3RzIGFzIGFuIGFkZGl0aW9uYWwgbGFiZWwuIFRoZSBTZWxlY3Qgd2lsbFxuICAgKiBiZSBsYWJlbGxlZCBieSB0aGUgYWRkaXRpb25hbCBsYWJlbCBhbmQgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKi9cbiAgbGFiZWxJZDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNZW51YF0oL2FwaS9tZW51LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBgdmFsdWVgIG11c3QgYmUgYW4gYXJyYXkgYW5kIHRoZSBtZW51IHdpbGwgc3VwcG9ydCBtdWx0aXBsZSBzZWxlY3Rpb25zLlxuICAgKi9cbiAgbXVsdGlwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgb3IgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoYW55KS5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtjaGlsZF0gVGhlIHJlYWN0IGVsZW1lbnQgdGhhdCB3YXMgc2VsZWN0ZWQuXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uT3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENvbnRyb2wgYHNlbGVjdGAgb3BlbiBzdGF0ZS5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByZWFkT25seTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBUaGUgYHZhbHVlYCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7UmVhY3ROb2RlfVxuICAgKi9cbiAgcmVuZGVyVmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG52YXIgX2RlZmF1bHQgPSBTZWxlY3RJbnB1dDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vLyBUaGUgcmFuZG9tIG51bWJlciBpcyBhIGpzIGltcGxlbWVudGF0aW9uIG9mIHRoZSBYb3JzaGlmdCBQUk5HXG5jb25zdCByYW5kc2VlZCA9IG5ldyBBcnJheSg0KTsgLy8gWG9yc2hpZnQ6IFt4LCB5LCB6LCB3XSAzMiBiaXQgdmFsdWVzXG5cbmZ1bmN0aW9uIHNlZWRyYW5kKHNlZWQpIHtcblx0cmFuZHNlZWQuZmlsbCgwKTtcblxuXHRmb3IobGV0IGkgPSAwOyBpIDwgc2VlZC5sZW5ndGg7IGkrKykge1xuXHRcdHJhbmRzZWVkW2klNF0gPSAoKHJhbmRzZWVkW2klNF0gPDwgNSkgLSByYW5kc2VlZFtpJTRdKSArIHNlZWQuY2hhckNvZGVBdChpKTtcblx0fVxufVxuXG5mdW5jdGlvbiByYW5kKCkge1xuXHQvLyBiYXNlZCBvbiBKYXZhJ3MgU3RyaW5nLmhhc2hDb2RlKCksIGV4cGFuZGVkIHRvIDQgMzJiaXQgdmFsdWVzXG5cdGNvbnN0IHQgPSByYW5kc2VlZFswXSBeIChyYW5kc2VlZFswXSA8PCAxMSk7XG5cblx0cmFuZHNlZWRbMF0gPSByYW5kc2VlZFsxXTtcblx0cmFuZHNlZWRbMV0gPSByYW5kc2VlZFsyXTtcblx0cmFuZHNlZWRbMl0gPSByYW5kc2VlZFszXTtcblx0cmFuZHNlZWRbM10gPSAocmFuZHNlZWRbM10gXiAocmFuZHNlZWRbM10gPj4gMTkpIF4gdCBeICh0ID4+IDgpKTtcblxuXHRyZXR1cm4gKHJhbmRzZWVkWzNdID4+PiAwKSAvICgoMSA8PCAzMSkgPj4+IDApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb2xvcigpIHtcblx0Ly9zYXR1cmF0aW9uIGlzIHRoZSB3aG9sZSBjb2xvciBzcGVjdHJ1bVxuXHRjb25zdCBoID0gTWF0aC5mbG9vcihyYW5kKCkgKiAzNjApO1xuXHQvL3NhdHVyYXRpb24gZ29lcyBmcm9tIDQwIHRvIDEwMCwgaXQgYXZvaWRzIGdyZXlpc2ggY29sb3JzXG5cdGNvbnN0IHMgPSAoKHJhbmQoKSAqIDYwKSArIDQwKSArICclJztcblx0Ly9saWdodG5lc3MgY2FuIGJlIGFueXRoaW5nIGZyb20gMCB0byAxMDAsIGJ1dCBwcm9iYWJpbGl0aWVzIGFyZSBhIGJlbGwgY3VydmUgYXJvdW5kIDUwJVxuXHRjb25zdCBsID0gKChyYW5kKCkgKyByYW5kKCkgKyByYW5kKCkgKyByYW5kKCkpICogMjUpICsgJyUnO1xuXG5cdHJldHVybiAnaHNsKCcgKyBoICsgJywnICsgcyArICcsJyArIGwgKyAnKSc7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUltYWdlRGF0YShzaXplKSB7XG5cdGNvbnN0IHdpZHRoID0gc2l6ZTsgLy8gT25seSBzdXBwb3J0IHNxdWFyZSBpY29ucyBmb3Igbm93XG5cdGNvbnN0IGhlaWdodCA9IHNpemU7XG5cblx0Y29uc3QgZGF0YVdpZHRoID0gTWF0aC5jZWlsKHdpZHRoIC8gMik7XG5cdGNvbnN0IG1pcnJvcldpZHRoID0gd2lkdGggLSBkYXRhV2lkdGg7XG5cblx0Y29uc3QgZGF0YSA9IFtdO1xuXHRmb3IobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcblx0XHRsZXQgcm93ID0gW107XG5cdFx0Zm9yKGxldCB4ID0gMDsgeCA8IGRhdGFXaWR0aDsgeCsrKSB7XG5cdFx0XHQvLyB0aGlzIG1ha2VzIGZvcmVncm91bmQgYW5kIGJhY2tncm91bmQgY29sb3IgdG8gaGF2ZSBhIDQzJSAoMS8yLjMpIHByb2JhYmlsaXR5XG5cdFx0XHQvLyBzcG90IGNvbG9yIGhhcyAxMyUgY2hhbmNlXG5cdFx0XHRyb3dbeF0gPSBNYXRoLmZsb29yKHJhbmQoKSoyLjMpO1xuXHRcdH1cblx0XHRjb25zdCByID0gcm93LnNsaWNlKDAsIG1pcnJvcldpZHRoKTtcblx0XHRyLnJldmVyc2UoKTtcblx0XHRyb3cgPSByb3cuY29uY2F0KHIpO1xuXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IHJvdy5sZW5ndGg7IGkrKykge1xuXHRcdFx0ZGF0YS5wdXNoKHJvd1tpXSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkT3B0cyhvcHRzKSB7XG5cdGNvbnN0IG5ld09wdHMgPSB7fTtcblxuXHRuZXdPcHRzLnNlZWQgPSBvcHRzLnNlZWQgfHwgTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSpNYXRoLnBvdygxMCwxNikpKS50b1N0cmluZygxNik7XG5cblx0c2VlZHJhbmQobmV3T3B0cy5zZWVkKTtcblxuXHRuZXdPcHRzLnNpemUgPSBvcHRzLnNpemUgfHwgODtcblx0bmV3T3B0cy5zY2FsZSA9IG9wdHMuc2NhbGUgfHwgNDtcblx0bmV3T3B0cy5jb2xvciA9IG9wdHMuY29sb3IgfHwgY3JlYXRlQ29sb3IoKTtcblx0bmV3T3B0cy5iZ2NvbG9yID0gb3B0cy5iZ2NvbG9yIHx8IGNyZWF0ZUNvbG9yKCk7XG5cdG5ld09wdHMuc3BvdGNvbG9yID0gb3B0cy5zcG90Y29sb3IgfHwgY3JlYXRlQ29sb3IoKTtcblxuXHRyZXR1cm4gbmV3T3B0cztcbn1cblxuZnVuY3Rpb24gcmVuZGVySWNvbihvcHRzLCBjYW52YXMpIHtcblx0b3B0cyA9IGJ1aWxkT3B0cyhvcHRzIHx8IHt9KTtcblx0Y29uc3QgaW1hZ2VEYXRhID0gY3JlYXRlSW1hZ2VEYXRhKG9wdHMuc2l6ZSk7XG5cdGNvbnN0IHdpZHRoID0gTWF0aC5zcXJ0KGltYWdlRGF0YS5sZW5ndGgpO1xuXG5cdGNhbnZhcy53aWR0aCA9IGNhbnZhcy5oZWlnaHQgPSBvcHRzLnNpemUgKiBvcHRzLnNjYWxlO1xuXG5cdGNvbnN0IGNjID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cdGNjLmZpbGxTdHlsZSA9IG9wdHMuYmdjb2xvcjtcblx0Y2MuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblx0Y2MuZmlsbFN0eWxlID0gb3B0cy5jb2xvcjtcblxuXHRmb3IobGV0IGkgPSAwOyBpIDwgaW1hZ2VEYXRhLmxlbmd0aDsgaSsrKSB7XG5cblx0XHQvLyBpZiBkYXRhIGlzIDAsIGxlYXZlIHRoZSBiYWNrZ3JvdW5kXG5cdFx0aWYoaW1hZ2VEYXRhW2ldKSB7XG5cdFx0XHRjb25zdCByb3cgPSBNYXRoLmZsb29yKGkgLyB3aWR0aCk7XG5cdFx0XHRjb25zdCBjb2wgPSBpICUgd2lkdGg7XG5cblx0XHRcdC8vIGlmIGRhdGEgaXMgMiwgY2hvb3NlIHNwb3QgY29sb3IsIGlmIDEgY2hvb3NlIGZvcmVncm91bmRcblx0XHRcdGNjLmZpbGxTdHlsZSA9IChpbWFnZURhdGFbaV0gPT0gMSkgPyBvcHRzLmNvbG9yIDogb3B0cy5zcG90Y29sb3I7XG5cblx0XHRcdGNjLmZpbGxSZWN0KGNvbCAqIG9wdHMuc2NhbGUsIHJvdyAqIG9wdHMuc2NhbGUsIG9wdHMuc2NhbGUsIG9wdHMuc2NhbGUpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjYW52YXM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUljb24ob3B0cykge1xuXHR2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cblx0cmVuZGVySWNvbihvcHRzLCBjYW52YXMpO1xuXG5cdHJldHVybiBjYW52YXM7XG59XG5cbmV4cG9ydHMucmVuZGVySWNvbiA9IHJlbmRlckljb247XG5leHBvcnRzLmNyZWF0ZUljb24gPSBjcmVhdGVJY29uO1xuIiwiaW1wb3J0IHtcbiAgaXNWYWxpZEhleEFkZHJlc3MsXG4gIHRvQ2hlY2tzdW1IZXhBZGRyZXNzLFxufSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9oZXhzdHJpbmctdXRpbHMnO1xuXG5sZXQgaWNvbkZhY3Rvcnk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGljb25GYWN0b3J5R2VuZXJhdG9yKGphenppY29uKSB7XG4gIGlmICghaWNvbkZhY3RvcnkpIHtcbiAgICBpY29uRmFjdG9yeSA9IG5ldyBJY29uRmFjdG9yeShqYXp6aWNvbik7XG4gIH1cbiAgcmV0dXJuIGljb25GYWN0b3J5O1xufVxuXG5mdW5jdGlvbiBJY29uRmFjdG9yeShqYXp6aWNvbikge1xuICB0aGlzLmphenppY29uID0gamF6emljb247XG4gIHRoaXMuY2FjaGUgPSB7fTtcbn1cblxuSWNvbkZhY3RvcnkucHJvdG90eXBlLmljb25Gb3JBZGRyZXNzID0gZnVuY3Rpb24gKFxuICBhZGRyZXNzLFxuICBkaWFtZXRlcixcbiAgdXNlVG9rZW5EZXRlY3Rpb24sXG4gIHRva2VuTGlzdCxcbikge1xuICAvLyBXaGVuIHVzZVRva2VuRGV0ZWN0aW9uIGZsYWcgaXMgdHJ1ZSB0aGUgdG9rZW5MaXN0IGNvbnRhaW5zIHRva2VucyB3aXRoIG5vbi1jaGVja3N1bSBhZGRyZXNzIGZyb20gdGhlIGR5bmFtaWMgdG9rZW4gc2VydmljZSBhcGksXG4gIC8vIFdoZW4gdXNlVG9rZW5EZXRlY3Rpb24gZmxhZyBpcyBmYWxzZSB0aGUgdG9rZW5MaXN0IGNvbnRhaW5zIHRva2VucyB3aXRoIGNoZWNrc3VtIGFkZHJlc3NlcyBmcm9tIGNvbnRyYWN0LW1ldGFkYXRhLlxuICAvLyBTbyB0aGUgZmxhZyBpbmRpY2F0ZXMgd2hldGhlciB0aGUgYWRkcmVzcyBvZiB0b2tlbnMgY3VycmVudGx5IG9uIHRoZSB0b2tlbkxpc3QgaXMgY2hlY2tzdW0gb3Igbm90LlxuICAvLyBBbmQgc2luY2UgdGhlIHRva2VuLmFkZHJlc3MgZnJvbSBhbGxUb2tlbnMgaXMgY2hlY2tzdW1hZGRyZXNzXG4gIC8vIHRva2VuQWRkcmVzcyBoYXZlIHRvIGJlIGNoYW5nZWQgdG8gbG93ZXJjYXNlIHdoZW4gd2UgYXJlIHVzaW5nIGR5bmFtaWMgbGlzdFxuICBjb25zdCBhZGRyID0gdXNlVG9rZW5EZXRlY3Rpb25cbiAgICA/IGFkZHJlc3MudG9Mb3dlckNhc2UoKVxuICAgIDogdG9DaGVja3N1bUhleEFkZHJlc3MoYWRkcmVzcyk7XG4gIGlmIChpY29uRXhpc3RzRm9yKGFkZHIsIHRva2VuTGlzdCkpIHtcbiAgICByZXR1cm4gaW1hZ2VFbEZvcihhZGRyLCB1c2VUb2tlbkRldGVjdGlvbiwgdG9rZW5MaXN0KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmdlbmVyYXRlSWRlbnRpY29uU3ZnKGFkZHJlc3MsIGRpYW1ldGVyKTtcbn07XG5cbi8vIHJldHVybnMgc3ZnIGRvbSBlbGVtZW50XG5JY29uRmFjdG9yeS5wcm90b3R5cGUuZ2VuZXJhdGVJZGVudGljb25TdmcgPSBmdW5jdGlvbiAoYWRkcmVzcywgZGlhbWV0ZXIpIHtcbiAgY29uc3QgY2FjaGVJZCA9IGAke2FkZHJlc3N9OiR7ZGlhbWV0ZXJ9YDtcbiAgLy8gY2hlY2sgY2FjaGUsIGxhemlseSBnZW5lcmF0ZSBhbmQgcG9wdWxhdGUgY2FjaGVcbiAgY29uc3QgaWRlbnRpY29uID1cbiAgICB0aGlzLmNhY2hlW2NhY2hlSWRdIHx8XG4gICAgKHRoaXMuY2FjaGVbY2FjaGVJZF0gPSB0aGlzLmdlbmVyYXRlTmV3SWRlbnRpY29uKGFkZHJlc3MsIGRpYW1ldGVyKSk7XG4gIC8vIGNyZWF0ZSBhIGNsZWFuIGNvcHkgc28geW91IGNhbiBtb2RpZnkgaXRcbiAgY29uc3QgY2xlYW5Db3B5ID0gaWRlbnRpY29uLmNsb25lTm9kZSh0cnVlKTtcbiAgcmV0dXJuIGNsZWFuQ29weTtcbn07XG5cbi8vIGNyZWF0ZXMgYSBuZXcgaWRlbnRpY29uXG5JY29uRmFjdG9yeS5wcm90b3R5cGUuZ2VuZXJhdGVOZXdJZGVudGljb24gPSBmdW5jdGlvbiAoYWRkcmVzcywgZGlhbWV0ZXIpIHtcbiAgY29uc3QgbnVtZXJpY1JlcHJlc2VudGF0aW9uID0ganNOdW1iZXJGb3JBZGRyZXNzKGFkZHJlc3MpO1xuICBjb25zdCBpZGVudGljb24gPSB0aGlzLmphenppY29uKGRpYW1ldGVyLCBudW1lcmljUmVwcmVzZW50YXRpb24pO1xuICByZXR1cm4gaWRlbnRpY29uO1xufTtcblxuLy8gdXRpbFxuXG5mdW5jdGlvbiBpY29uRXhpc3RzRm9yKGFkZHJlc3MsIHRva2VuTGlzdCkge1xuICByZXR1cm4gKFxuICAgIHRva2VuTGlzdFthZGRyZXNzXSAmJlxuICAgIGlzVmFsaWRIZXhBZGRyZXNzKGFkZHJlc3MsIHsgYWxsb3dOb25QcmVmaXhlZDogZmFsc2UgfSkgJiZcbiAgICB0b2tlbkxpc3RbYWRkcmVzc10uaWNvblVybFxuICApO1xufVxuXG5mdW5jdGlvbiBpbWFnZUVsRm9yKGFkZHJlc3MsIHVzZVRva2VuRGV0ZWN0aW9uLCB0b2tlbkxpc3QpIHtcbiAgY29uc3QgdG9rZW5NZXRhZGF0YSA9IHRva2VuTGlzdFthZGRyZXNzXTtcbiAgY29uc3QgZmlsZU5hbWUgPSB0b2tlbk1ldGFkYXRhPy5pY29uVXJsO1xuICAvLyB0b2tlbiBmcm9tIGR5bmFtaWMgYXBpIGxpc3QgaXMgZmV0Y2hlZCB3aGVuIHVzZVRva2VuRGV0ZWN0aW9uIGlzIHRydWVcbiAgLy8gSW4gdGhlIHN0YXRpYyBsaXN0LCB0aGUgaWNvblVybCB3aWxsIGJlIGhvbGRpbmcgb25seSBhIGZpbGVuYW1lIGZvciB0aGUgaW1hZ2UsXG4gIC8vIHRoZSBjb3JyZXNwb25kaW5nIGltYWdlcyB3aWxsIGJlIGF2YWlsYWJsZSBpbiB0aGUgYGltYWdlcy9jb250cmFjdC9gIGxvY2F0aW9uIHdoZW4gdGhlIGNvbnRyYWN0LW1ldGFkYXRhIHBhY2thZ2Ugd2FzIGFkZGVkIHRvIHRoZSBleHRlbnNpb25cbiAgLy8gIHNvIHRoYXQgaXQgY2FuIGJlIGFjY2Vzc2VkIHVzaW5nIHRoZSBmaWxlbmFtZSBpbiBpY29uVXJsLlxuICBjb25zdCBwYXRoID0gdXNlVG9rZW5EZXRlY3Rpb24gPyBmaWxlTmFtZSA6IGBpbWFnZXMvY29udHJhY3QvJHtmaWxlTmFtZX1gO1xuICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgaW1nLnNyYyA9IHBhdGg7XG4gIGltZy5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgcmV0dXJuIGltZztcbn1cblxuZnVuY3Rpb24ganNOdW1iZXJGb3JBZGRyZXNzKGFkZHJlc3MpIHtcbiAgY29uc3QgYWRkciA9IGFkZHJlc3Muc2xpY2UoMiwgMTApO1xuICBjb25zdCBzZWVkID0gcGFyc2VJbnQoYWRkciwgMTYpO1xuICByZXR1cm4gc2VlZDtcbn1cbiIsInZhciBNZXJzZW5uZVR3aXN0ZXIgPSByZXF1aXJlKCdtZXJzZW5uZS10d2lzdGVyJyk7XG52YXIgcGFwZXJHZW4gPSByZXF1aXJlKCcuL3BhcGVyJylcbnZhciBDb2xvciA9IHJlcXVpcmUoJ2NvbG9yJylcbnZhciBjb2xvcnMgPSByZXF1aXJlKCcuL2NvbG9ycycpXG52YXIgc2hhcGVDb3VudCA9IDRcbnZhciBzdmducyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZUlkZW50aWNvblxuXG52YXIgZ2VuZXJhdG9yXG5mdW5jdGlvbiBnZW5lcmF0ZUlkZW50aWNvbihkaWFtZXRlciwgc2VlZCkge1xuICBnZW5lcmF0b3IgPSBuZXcgTWVyc2VubmVUd2lzdGVyKHNlZWQpO1xuICB2YXIgcmVtYWluaW5nQ29sb3JzID0gaHVlU2hpZnQoY29sb3JzLnNsaWNlKCksIGdlbmVyYXRvcilcblxuICB2YXIgZWxlbWVudHMgPSBwYXBlckdlbihkaWFtZXRlciwgZ2VuQ29sb3IocmVtYWluaW5nQ29sb3JzKSlcbiAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnRzLmNvbnRhaW5lclxuXG4gIHZhciBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsICdzdmcnKVxuICBzdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3gnLCAnMCcpXG4gIHN2Zy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneScsICcwJylcbiAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICd3aWR0aCcsIGRpYW1ldGVyKVxuICBzdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2hlaWdodCcsIGRpYW1ldGVyKVxuXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzdmcpXG5cbiAgZm9yKHZhciBpID0gMDsgaSA8IHNoYXBlQ291bnQgLSAxOyBpKyspIHtcbiAgICBnZW5TaGFwZShyZW1haW5pbmdDb2xvcnMsIGRpYW1ldGVyLCBpLCBzaGFwZUNvdW50IC0gMSwgc3ZnKVxuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lclxufVxuXG5mdW5jdGlvbiBnZW5TaGFwZShyZW1haW5pbmdDb2xvcnMsIGRpYW1ldGVyLCBpLCB0b3RhbCwgc3ZnKSB7XG4gIHZhciBjZW50ZXIgPSBkaWFtZXRlciAvIDJcblxuICB2YXIgc2hhcGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsICdyZWN0JylcbiAgc2hhcGUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3gnLCAnMCcpXG4gIHNoYXBlLnNldEF0dHJpYnV0ZU5TKG51bGwsICd5JywgJzAnKVxuICBzaGFwZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnd2lkdGgnLCBkaWFtZXRlcilcbiAgc2hhcGUuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2hlaWdodCcsIGRpYW1ldGVyKVxuXG4gIHZhciBmaXJzdFJvdCA9IGdlbmVyYXRvci5yYW5kb20oKVxuICB2YXIgYW5nbGUgPSBNYXRoLlBJICogMiAqIGZpcnN0Um90XG4gIHZhciB2ZWxvY2l0eSA9IGRpYW1ldGVyIC8gdG90YWwgKiBnZW5lcmF0b3IucmFuZG9tKCkgKyAoaSAqIGRpYW1ldGVyIC8gdG90YWwpXG5cbiAgdmFyIHR4ID0gKE1hdGguY29zKGFuZ2xlKSAqIHZlbG9jaXR5KVxuICB2YXIgdHkgPSAoTWF0aC5zaW4oYW5nbGUpICogdmVsb2NpdHkpXG5cbiAgdmFyIHRyYW5zbGF0ZSA9ICd0cmFuc2xhdGUoJyArIHR4ICsgJyAnICsgIHR5ICsgJyknXG5cbiAgLy8gVGhpcmQgcmFuZG9tIGlzIGEgc2hhcGUgcm90YXRpb24gb24gdG9wIG9mIGFsbCBvZiB0aGF0LlxuICB2YXIgc2Vjb25kUm90ID0gZ2VuZXJhdG9yLnJhbmRvbSgpXG4gIHZhciByb3QgPSAoZmlyc3RSb3QgKiAzNjApICsgc2Vjb25kUm90ICogMTgwXG4gIHZhciByb3RhdGUgPSAncm90YXRlKCcgKyByb3QudG9GaXhlZCgxKSArICcgJyArIGNlbnRlciArICcgJyArIGNlbnRlciArICcpJ1xuICB2YXIgdHJhbnNmb3JtID0gdHJhbnNsYXRlICsgJyAnICsgcm90YXRlXG4gIHNoYXBlLnNldEF0dHJpYnV0ZU5TKG51bGwsICd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pXG4gIHZhciBmaWxsID0gZ2VuQ29sb3IocmVtYWluaW5nQ29sb3JzKVxuICBzaGFwZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZmlsbCcsIGZpbGwpXG5cbiAgc3ZnLmFwcGVuZENoaWxkKHNoYXBlKVxufVxuXG5mdW5jdGlvbiBnZW5Db2xvcihjb2xvcnMpIHtcbiAgdmFyIHJhbmQgPSBnZW5lcmF0b3IucmFuZG9tKClcbiAgdmFyIGlkeCA9IE1hdGguZmxvb3IoY29sb3JzLmxlbmd0aCAqIGdlbmVyYXRvci5yYW5kb20oKSlcbiAgdmFyIGNvbG9yID0gY29sb3JzLnNwbGljZShpZHgsMSlbMF1cbiAgcmV0dXJuIGNvbG9yXG59XG5cbnZhciB3b2JibGUgPSAzMFxuZnVuY3Rpb24gaHVlU2hpZnQoY29sb3JzLCBnZW5lcmF0b3IpIHtcbiAgdmFyIGFtb3VudCA9IChnZW5lcmF0b3IucmFuZG9tKCkgKiAzMCkgLSAod29iYmxlIC8gMilcbiAgcmV0dXJuIGNvbG9ycy5tYXAoZnVuY3Rpb24oaGV4KSB7XG4gICAgdmFyIGNvbG9yID0gQ29sb3IoaGV4KVxuICAgIGNvbG9yLnJvdGF0ZShhbW91bnQpXG4gICAgcmV0dXJuIGNvbG9yLmhleFN0cmluZygpXG4gIH0pXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGV4cG9ydHMuZnJvbUVudHJpZXMgPSBleHBvcnRzLnNldFJlZiA9IGV4cG9ydHMuc2FmZUludm9rZSA9IGV4cG9ydHMudW53cmFwQXJyYXkgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG4vKipcbiAqIFRha2VzIGFuIGFyZ3VtZW50IGFuZCBpZiBpdCdzIGFuIGFycmF5LCByZXR1cm5zIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBhcnJheSxcbiAqIG90aGVyd2lzZSByZXR1cm5zIHRoZSBhcmd1bWVudC4gVXNlZCBmb3IgUHJlYWN0IGNvbXBhdGliaWxpdHkuXG4gKi9cbnZhciB1bndyYXBBcnJheSA9IGZ1bmN0aW9uIHVud3JhcEFycmF5KGFyZykge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpID8gYXJnWzBdIDogYXJnO1xufTtcbi8qKlxuICogVGFrZXMgYSBtYXliZS11bmRlZmluZWQgZnVuY3Rpb24gYW5kIGFyYml0cmFyeSBhcmdzIGFuZCBpbnZva2VzIHRoZSBmdW5jdGlvblxuICogb25seSBpZiBpdCBpcyBkZWZpbmVkLlxuICovXG5cblxuZXhwb3J0cy51bndyYXBBcnJheSA9IHVud3JhcEFycmF5O1xuXG52YXIgc2FmZUludm9rZSA9IGZ1bmN0aW9uIHNhZmVJbnZva2UoZm4pIHtcbiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBmbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICB9XG59O1xuLyoqXG4gKiBTZXRzIGEgcmVmIHVzaW5nIGVpdGhlciBhIHJlZiBjYWxsYmFjayBvciBhIHJlZiBvYmplY3RcbiAqL1xuXG5cbmV4cG9ydHMuc2FmZUludm9rZSA9IHNhZmVJbnZva2U7XG5cbnZhciBzZXRSZWYgPSBmdW5jdGlvbiBzZXRSZWYocmVmLCBub2RlKSB7XG4gIC8vIGlmIGl0cyBhIGZ1bmN0aW9uIGNhbGwgaXRcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gc2FmZUludm9rZShyZWYsIG5vZGUpO1xuICB9IC8vIG90aGVyd2lzZSB3ZSBzaG91bGQgdHJlYXQgaXQgYXMgYSByZWYgb2JqZWN0XG4gIGVsc2UgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICByZWYuY3VycmVudCA9IG5vZGU7XG4gICAgfVxufTtcbi8qKlxuICogU2ltcGxlIHBvbnlmaWxsIGZvciBPYmplY3QuZnJvbUVudHJpZXNcbiAqL1xuXG5cbmV4cG9ydHMuc2V0UmVmID0gc2V0UmVmO1xuXG52YXIgZnJvbUVudHJpZXMgPSBmdW5jdGlvbiBmcm9tRW50cmllcyhlbnRyaWVzKSB7XG4gIHJldHVybiBlbnRyaWVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBfcmVmKSB7XG4gICAgdmFyIGtleSA9IF9yZWZbMF0sXG4gICAgICAgIHZhbHVlID0gX3JlZlsxXTtcbiAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn07XG4vKipcbiAqIFNtYWxsIHdyYXBwZXIgYXJvdW5kIGB1c2VMYXlvdXRFZmZlY3RgIHRvIGdldCByaWQgb2YgdGhlIHdhcm5pbmcgb24gU1NSIGVudnNcbiAqL1xuXG5cbmV4cG9ydHMuZnJvbUVudHJpZXMgPSBmcm9tRW50cmllcztcbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuZXhwb3J0cy51c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIF9fREVWX18gPSBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMSA/IGxlbiAtIDEgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAxOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDFdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIi8qIGdsb2JhbCBNYXA6cmVhZG9ubHksIFNldDpyZWFkb25seSwgQXJyYXlCdWZmZXI6cmVhZG9ubHkgKi9cblxudmFyIGhhc0VsZW1lbnRUeXBlID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIGhhc01hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbic7XG52YXIgaGFzU2V0ID0gdHlwZW9mIFNldCA9PT0gJ2Z1bmN0aW9uJztcbnZhciBoYXNBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiAhIUFycmF5QnVmZmVyLmlzVmlldztcblxuLy8gTm90ZTogV2UgKipkb24ndCoqIG5lZWQgYGVudkhhc0JpZ0ludDY0QXJyYXlgIGluIGZkZSBlczYvaW5kZXguanNcblxuZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICAvLyBTVEFSVDogZmFzdC1kZWVwLWVxdWFsIGVzNi9pbmRleC5qcyAzLjEuMVxuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIGlmIChhLmNvbnN0cnVjdG9yICE9PSBiLmNvbnN0cnVjdG9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbGVuZ3RoLCBpLCBrZXlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gU1RBUlQ6IE1vZGlmaWNhdGlvbnM6XG4gICAgLy8gMS4gRXh0cmEgYGhhczxUeXBlPiAmJmAgaGVscGVycyBpbiBpbml0aWFsIGNvbmRpdGlvbiBhbGxvdyBlczYgY29kZVxuICAgIC8vICAgIHRvIGNvLWV4aXN0IHdpdGggZXM1LlxuICAgIC8vIDIuIFJlcGxhY2UgYGZvciBvZmAgd2l0aCBlczUgY29tcGxpYW50IGl0ZXJhdGlvbiB1c2luZyBgZm9yYC5cbiAgICAvLyAgICBCYXNpY2FsbHksIHRha2U6XG4gICAgLy9cbiAgICAvLyAgICBgYGBqc1xuICAgIC8vICAgIGZvciAoaSBvZiBhLmVudHJpZXMoKSlcbiAgICAvLyAgICAgIGlmICghYi5oYXMoaVswXSkpIHJldHVybiBmYWxzZTtcbiAgICAvLyAgICBgYGBcbiAgICAvL1xuICAgIC8vICAgIC4uLiBhbmQgY29udmVydCB0bzpcbiAgICAvL1xuICAgIC8vICAgIGBgYGpzXG4gICAgLy8gICAgaXQgPSBhLmVudHJpZXMoKTtcbiAgICAvLyAgICB3aGlsZSAoIShpID0gaXQubmV4dCgpKS5kb25lKVxuICAgIC8vICAgICAgaWYgKCFiLmhhcyhpLnZhbHVlWzBdKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vICAgIGBgYFxuICAgIC8vXG4gICAgLy8gICAgKipOb3RlKio6IGBpYCBhY2Nlc3Mgc3dpdGNoZXMgdG8gYGkudmFsdWVgLlxuICAgIHZhciBpdDtcbiAgICBpZiAoaGFzTWFwICYmIChhIGluc3RhbmNlb2YgTWFwKSAmJiAoYiBpbnN0YW5jZW9mIE1hcCkpIHtcbiAgICAgIGlmIChhLnNpemUgIT09IGIuc2l6ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaXQgPSBhLmVudHJpZXMoKTtcbiAgICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgICAgIGlmICghYi5oYXMoaS52YWx1ZVswXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIGl0ID0gYS5lbnRyaWVzKCk7XG4gICAgICB3aGlsZSAoIShpID0gaXQubmV4dCgpKS5kb25lKVxuICAgICAgICBpZiAoIWVxdWFsKGkudmFsdWVbMV0sIGIuZ2V0KGkudmFsdWVbMF0pKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGhhc1NldCAmJiAoYSBpbnN0YW5jZW9mIFNldCkgJiYgKGIgaW5zdGFuY2VvZiBTZXQpKSB7XG4gICAgICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHJldHVybiBmYWxzZTtcbiAgICAgIGl0ID0gYS5lbnRyaWVzKCk7XG4gICAgICB3aGlsZSAoIShpID0gaXQubmV4dCgpKS5kb25lKVxuICAgICAgICBpZiAoIWIuaGFzKGkudmFsdWVbMF0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gRU5EOiBNb2RpZmljYXRpb25zXG5cbiAgICBpZiAoaGFzQXJyYXlCdWZmZXIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KGEpICYmIEFycmF5QnVmZmVyLmlzVmlldyhiKSkge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoYS5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwKSByZXR1cm4gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGEuZmxhZ3MgPT09IGIuZmxhZ3M7XG4gICAgaWYgKGEudmFsdWVPZiAhPT0gT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mKSByZXR1cm4gYS52YWx1ZU9mKCkgPT09IGIudmFsdWVPZigpO1xuICAgIGlmIChhLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIEVORDogZmFzdC1kZWVwLWVxdWFsXG5cbiAgICAvLyBTVEFSVDogcmVhY3QtZmFzdC1jb21wYXJlXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBET00gZWxlbWVudHNcbiAgICBpZiAoaGFzRWxlbWVudFR5cGUgJiYgYSBpbnN0YW5jZW9mIEVsZW1lbnQpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIGN1c3RvbSBoYW5kbGluZyBmb3IgUmVhY3QvUHJlYWN0XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBpZiAoKGtleXNbaV0gPT09ICdfb3duZXInIHx8IGtleXNbaV0gPT09ICdfX3YnIHx8IGtleXNbaV0gPT09ICdfX28nKSAmJiBhLiQkdHlwZW9mKSB7XG4gICAgICAgIC8vIFJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFJlYWN0IGVsZW1lbnRzJyBfb3duZXJcbiAgICAgICAgLy8gUHJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFByZWFjdCBlbGVtZW50cycgX192IGFuZCBfX29cbiAgICAgICAgLy8gICAgX192ID0gJF9vcmlnaW5hbCAvICRfdm5vZGVcbiAgICAgICAgLy8gICAgX19vID0gJF9vd25lclxuICAgICAgICAvLyBUaGVzZSBwcm9wZXJ0aWVzIGNvbnRhaW4gY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgYXJlIG5vdCBuZWVkZWQgd2hlblxuICAgICAgICAvLyBjb21wYXJpbmcgdGhlIGFjdHVhbCBlbGVtZW50cyAoYW5kIG5vdCB0aGVpciBvd25lcnMpXG4gICAgICAgIC8vIC4kJHR5cGVvZiBhbmQgLl9zdG9yZSBvbiBqdXN0IHJlYXNvbmFibGUgbWFya2VycyBvZiBlbGVtZW50c1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBhbGwgb3RoZXIgcHJvcGVydGllcyBzaG91bGQgYmUgdHJhdmVyc2VkIGFzIHVzdWFsXG4gICAgICBpZiAoIWVxdWFsKGFba2V5c1tpXV0sIGJba2V5c1tpXV0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIEVORDogcmVhY3QtZmFzdC1jb21wYXJlXG5cbiAgICAvLyBTVEFSVDogZmFzdC1kZWVwLWVxdWFsXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xufVxuLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzRXF1YWwoYSwgYikge1xuICB0cnkge1xuICAgIHJldHVybiBlcXVhbChhLCBiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoKChlcnJvci5tZXNzYWdlIHx8ICcnKS5tYXRjaCgvc3RhY2t8cmVjdXJzaW9uL2kpKSkge1xuICAgICAgLy8gd2FybiBvbiBjaXJjdWxhciByZWZlcmVuY2VzLCBkb24ndCBjcmFzaFxuICAgICAgLy8gYnJvd3NlcnMgZ2l2ZSB0aGlzIGRpZmZlcmVudCBlcnJvcnMgbmFtZSBhbmQgbWVzc2FnZXM6XG4gICAgICAvLyBjaHJvbWUvc2FmYXJpOiBcIlJhbmdlRXJyb3JcIiwgXCJNYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiXG4gICAgICAvLyBmaXJlZm94OiBcIkludGVybmFsRXJyb3JcIiwgdG9vIG11Y2ggcmVjdXJzaW9uXCJcbiAgICAgIC8vIGVkZ2U6IFwiRXJyb3JcIiwgXCJPdXQgb2Ygc3RhY2sgc3BhY2VcIlxuICAgICAgY29uc29sZS53YXJuKCdyZWFjdC1mYXN0LWNvbXBhcmUgY2Fubm90IGhhbmRsZSBjaXJjdWxhciByZWZzJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIHNvbWUgb3RoZXIgZXJyb3IuIHdlIHNob3VsZCBkZWZpbml0ZWx5IGtub3cgYWJvdXQgdGhlc2VcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsIi8qKlxuICogQHBvcHBlcmpzL2NvcmUgdjIuOS4yIC0gTUlUIExpY2Vuc2VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgeDogcmVjdC5sZWZ0LFxuICAgIHk6IHJlY3QudG9wXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlKSB7XG4gIC8vIElFIDExIGhhcyBubyBTaGFkb3dSb290XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5TaGFkb3dSb290O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbmZ1bmN0aW9uIGdldEhUTUxFbGVtZW50U2Nyb2xsKGVsZW1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBlbGVtZW50LnNjcm9sbFRvcFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuICgoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudC5vd25lckRvY3VtZW50IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGlzU2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcblxuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn1cblxuLy8gQ29tcG9zaXRlIG1lYW5zIGl0IHRha2VzIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zIGFzIHdlbGwgYXMgbGF5b3V0LlxuXG5mdW5jdGlvbiBnZXRDb21wb3NpdGVSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LCBvZmZzZXRQYXJlbnQsIGlzRml4ZWQpIHtcbiAgaWYgKGlzRml4ZWQgPT09IHZvaWQgMCkge1xuICAgIGlzRml4ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQpO1xuICB2YXIgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciBzY3JvbGwgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgdmFyIG9mZnNldHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50IHx8ICFpc09mZnNldFBhcmVudEFuRWxlbWVudCAmJiAhaXNGaXhlZCkge1xuICAgIGlmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSAnYm9keScgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMDc4XG4gICAgaXNTY3JvbGxQYXJlbnQoZG9jdW1lbnRFbGVtZW50KSkge1xuICAgICAgc2Nyb2xsID0gZ2V0Tm9kZVNjcm9sbChvZmZzZXRQYXJlbnQpO1xuICAgIH1cblxuICAgIGlmIChpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgIG9mZnNldHMgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcbiAgICAgIG9mZnNldHMueCArPSBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgIG9mZnNldHMueSArPSBvZmZzZXRQYXJlbnQuY2xpZW50VG9wO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBvZmZzZXRzLnggPSBnZXRXaW5kb3dTY3JvbGxCYXJYKGRvY3VtZW50RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiByZWN0LmxlZnQgKyBzY3JvbGwuc2Nyb2xsTGVmdCAtIG9mZnNldHMueCxcbiAgICB5OiByZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3AgLSBvZmZzZXRzLnksXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICB9O1xufVxuXG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5cbmZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICB2YXIgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTsgLy8gVXNlIHRoZSBjbGllbnRSZWN0IHNpemVzIGlmIGl0J3Mgbm90IGJlZW4gdHJhbnNmb3JtZWQuXG4gIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTIyM1xuXG4gIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC53aWR0aCAtIHdpZHRoKSA8PSAxKSB7XG4gICAgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3QuaGVpZ2h0IC0gaGVpZ2h0KSA8PSAxKSB7XG4gICAgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8ICggLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICBpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIGlmIChbJ2h0bWwnLCAnYm9keScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGdldE5vZGVOYW1lKG5vZGUpKSA+PSAwKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KG5vZGUpICYmIGlzU2Nyb2xsUGFyZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUobm9kZSkpO1xufVxuXG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cblxuZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50ID09PSAoKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5KTtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn1cblxuZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xufSAvLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgdmFyIGlzRmlyZWZveCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xO1xuICB2YXIgaXNJRSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpICE9PSAtMTtcblxuICBpZiAoaXNJRSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgLy8gSW4gSUUgOSwgMTAgYW5kIDExIGZpeGVkIGVsZW1lbnRzIGNvbnRhaW5pbmcgYmxvY2sgaXMgYWx3YXlzIGVzdGFibGlzaGVkIGJ5IHRoZSB2aWV3cG9ydFxuICAgIHZhciBlbGVtZW50Q3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgIGlmIChlbGVtZW50Q3NzLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuXG4gIHdoaWxlIChpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJiBbJ2h0bWwnLCAnYm9keSddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoY3VycmVudE5vZGUpKSA8IDApIHtcbiAgICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSk7IC8vIFRoaXMgaXMgbm9uLWV4aGF1c3RpdmUgYnV0IGNvdmVycyB0aGUgbW9zdCBjb21tb24gQ1NTIHByb3BlcnRpZXMgdGhhdFxuICAgIC8vIGNyZWF0ZSBhIGNvbnRhaW5pbmcgYmxvY2suXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NvbnRhaW5pbmdfYmxvY2sjaWRlbnRpZnlpbmdfdGhlX2NvbnRhaW5pbmdfYmxvY2tcblxuICAgIGlmIChjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgY3NzLmNvbnRhaW4gPT09ICdwYWludCcgfHwgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnXS5pbmRleE9mKGNzcy53aWxsQ2hhbmdlKSAhPT0gLTEgfHwgaXNGaXJlZm94ICYmIGNzcy53aWxsQ2hhbmdlID09PSAnZmlsdGVyJyB8fCBpc0ZpcmVmb3ggJiYgY3NzLmZpbHRlciAmJiBjc3MuZmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSAvLyBHZXRzIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHBvc2l0aW9uZWQgZWxlbWVudC4gSGFuZGxlcyBzb21lIGVkZ2UgY2FzZXMsXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxuXG5cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpO1xuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgaWYgKG9mZnNldFBhcmVudCAmJiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2h0bWwnIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB8fCB3aW5kb3c7XG59XG5cbnZhciB0b3AgPSAndG9wJztcbnZhciBib3R0b20gPSAnYm90dG9tJztcbnZhciByaWdodCA9ICdyaWdodCc7XG52YXIgbGVmdCA9ICdsZWZ0JztcbnZhciBhdXRvID0gJ2F1dG8nO1xudmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG52YXIgc3RhcnQgPSAnc3RhcnQnO1xudmFyIGVuZCA9ICdlbmQnO1xudmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xudmFyIHZpZXdwb3J0ID0gJ3ZpZXdwb3J0JztcbnZhciBwb3BwZXIgPSAncG9wcGVyJztcbnZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbnZhciB2YXJpYXRpb25QbGFjZW1lbnRzID0gLyojX19QVVJFX18qL2Jhc2VQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7XG52YXIgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9bXS5jb25jYXQoYmFzZVBsYWNlbWVudHMsIFthdXRvXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50LCBwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pOyAvLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuXG52YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbnZhciByZWFkID0gJ3JlYWQnO1xudmFyIGFmdGVyUmVhZCA9ICdhZnRlclJlYWQnOyAvLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuXG52YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbnZhciBtYWluID0gJ21haW4nO1xudmFyIGFmdGVyTWFpbiA9ICdhZnRlck1haW4nOyAvLyBtb2RpZmllciB3aXRoIHRoZSBwdXJwb3NlIHRvIHdyaXRlIHRvIHRoZSBET00gKG9yIHdyaXRlIGludG8gYSBmcmFtZXdvcmsgc3RhdGUpXG5cbnZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG52YXIgd3JpdGUgPSAnd3JpdGUnO1xudmFyIGFmdGVyV3JpdGUgPSAnYWZ0ZXJXcml0ZSc7XG52YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07XG5cbmZ1bmN0aW9uIG9yZGVyKG1vZGlmaWVycykge1xuICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICB2YXIgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBtYXAuc2V0KG1vZGlmaWVyLm5hbWUsIG1vZGlmaWVyKTtcbiAgfSk7IC8vIE9uIHZpc2l0aW5nIG9iamVjdCwgY2hlY2sgZm9yIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHZpc2l0IHRoZW0gcmVjdXJzaXZlbHlcblxuICBmdW5jdGlvbiBzb3J0KG1vZGlmaWVyKSB7XG4gICAgdmlzaXRlZC5hZGQobW9kaWZpZXIubmFtZSk7XG4gICAgdmFyIHJlcXVpcmVzID0gW10uY29uY2F0KG1vZGlmaWVyLnJlcXVpcmVzIHx8IFtdLCBtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzIHx8IFtdKTtcbiAgICByZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIGlmICghdmlzaXRlZC5oYXMoZGVwKSkge1xuICAgICAgICB2YXIgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHQucHVzaChtb2RpZmllcik7XG4gIH1cblxuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG9yZGVyTW9kaWZpZXJzKG1vZGlmaWVycykge1xuICAvLyBvcmRlciBiYXNlZCBvbiBkZXBlbmRlbmNpZXNcbiAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcihtb2RpZmllcnMpOyAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuXG4gIHJldHVybiBtb2RpZmllclBoYXNlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGhhc2UpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2U7XG4gICAgfSkpO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciBwZW5kaW5nO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVuZGluZztcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0KHN0cikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gW10uY29uY2F0KGFyZ3MpLnJlZHVjZShmdW5jdGlvbiAocCwgYykge1xuICAgIHJldHVybiBwLnJlcGxhY2UoLyVzLywgYyk7XG4gIH0sIHN0cik7XG59XG5cbnZhciBJTlZBTElEX01PRElGSUVSX0VSUk9SID0gJ1BvcHBlcjogbW9kaWZpZXIgXCIlc1wiIHByb3ZpZGVkIGFuIGludmFsaWQgJXMgcHJvcGVydHksIGV4cGVjdGVkICVzIGJ1dCBnb3QgJXMnO1xudmFyIE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiByZXF1aXJlcyBcIiVzXCIsIGJ1dCBcIiVzXCIgbW9kaWZpZXIgaXMgbm90IGF2YWlsYWJsZSc7XG52YXIgVkFMSURfUFJPUEVSVElFUyA9IFsnbmFtZScsICdlbmFibGVkJywgJ3BoYXNlJywgJ2ZuJywgJ2VmZmVjdCcsICdyZXF1aXJlcycsICdvcHRpb25zJ107XG5mdW5jdGlvbiB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgT2JqZWN0LmtleXMobW9kaWZpZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5uYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCAnXCJuYW1lXCInLCAnXCJzdHJpbmdcIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLm5hbWUpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlbmFibGVkJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLmVuYWJsZWQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZW5hYmxlZFwiJywgJ1wiYm9vbGVhblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZW5hYmxlZCkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlICdwaGFzZSc6XG4gICAgICAgICAgaWYgKG1vZGlmaWVyUGhhc2VzLmluZGV4T2YobW9kaWZpZXIucGhhc2UpIDwgMCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wicGhhc2VcIicsIFwiZWl0aGVyIFwiICsgbW9kaWZpZXJQaGFzZXMuam9pbignLCAnKSwgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucGhhc2UpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdmbic6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5mbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZm5cIicsICdcImZ1bmN0aW9uXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5mbikgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2VmZmVjdCc6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5lZmZlY3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcImVmZmVjdFwiJywgJ1wiZnVuY3Rpb25cIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLmZuKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmVxdWlyZXMnOlxuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtb2RpZmllci5yZXF1aXJlcykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXMpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXF1aXJlc0lmRXhpc3RzJzpcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzSWZFeGlzdHNcIicsICdcImFycmF5XCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3B0aW9ucyc6XG4gICAgICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlBvcHBlckpTOiBhbiBpbnZhbGlkIHByb3BlcnR5IGhhcyBiZWVuIHByb3ZpZGVkIHRvIHRoZSBcXFwiXCIgKyBtb2RpZmllci5uYW1lICsgXCJcXFwiIG1vZGlmaWVyLCB2YWxpZCBwcm9wZXJ0aWVzIGFyZSBcIiArIFZBTElEX1BST1BFUlRJRVMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcXFwiXCIgKyBzICsgXCJcXFwiXCI7XG4gICAgICAgICAgfSkuam9pbignLCAnKSArIFwiOyBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwcm92aWRlZC5cIik7XG4gICAgICB9XG5cbiAgICAgIG1vZGlmaWVyLnJlcXVpcmVzICYmIG1vZGlmaWVyLnJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gICAgICAgIGlmIChtb2RpZmllcnMuZmluZChmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgICAgcmV0dXJuIG1vZC5uYW1lID09PSByZXF1aXJlbWVudDtcbiAgICAgICAgfSkgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCByZXF1aXJlbWVudCwgcmVxdWlyZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1bmlxdWVCeShhcnIsIGZuKSB7XG4gIHZhciBpZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWRlbnRpZmllciA9IGZuKGl0ZW0pO1xuXG4gICAgaWYgKCFpZGVudGlmaWVycy5oYXMoaWRlbnRpZmllcikpIHtcbiAgICAgIGlkZW50aWZpZXJzLmFkZChpZGVudGlmaWVyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIHZhciB3aWR0aCA9IGh0bWwuY2xpZW50V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgdmFyIHggPSAwO1xuICB2YXIgeSA9IDA7IC8vIE5COiBUaGlzIGlzbid0IHN1cHBvcnRlZCBvbiBpT1MgPD0gMTIuIElmIHRoZSBrZXlib2FyZCBpcyBvcGVuLCB0aGUgcG9wcGVyXG4gIC8vIGNhbiBiZSBvYnNjdXJlZCB1bmRlcm5lYXRoIGl0LlxuICAvLyBBbHNvLCBgaHRtbC5jbGllbnRIZWlnaHRgIGFkZHMgdGhlIGJvdHRvbSBiYXIgaGVpZ2h0IGluIFNhZmFyaSBpT1MsIGV2ZW5cbiAgLy8gaWYgaXQgaXNuJ3Qgb3Blbiwgc28gaWYgdGhpcyBpc24ndCBhdmFpbGFibGUsIHRoZSBwb3BwZXIgd2lsbCBiZSBkZXRlY3RlZFxuICAvLyB0byBvdmVyZmxvdyB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gdG9vIGVhcmx5LlxuXG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0OyAvLyBVc2VzIExheW91dCBWaWV3cG9ydCAobGlrZSBDaHJvbWU7IFNhZmFyaSBkb2VzIG5vdCBjdXJyZW50bHkpXG4gICAgLy8gSW4gQ2hyb21lLCBpdCByZXR1cm5zIGEgdmFsdWUgdmVyeSBjbG9zZSB0byAwICgrLy0pIGJ1dCBjb250YWlucyByb3VuZGluZ1xuICAgIC8vIGVycm9ycyBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgbnVtYmVycywgc28gd2UgbmVlZCB0byBjaGVjayBwcmVjaXNpb24uXG4gICAgLy8gU2FmYXJpIHJldHVybnMgYSBudW1iZXIgPD0gMCwgdXN1YWxseSA8IC0xIHdoZW4gcGluY2gtem9vbWVkXG4gICAgLy8gRmVhdHVyZSBkZXRlY3Rpb24gZmFpbHMgaW4gbW9iaWxlIGVtdWxhdGlvbiBtb2RlIGluIENocm9tZS5cbiAgICAvLyBNYXRoLmFicyh3aW4uaW5uZXJXaWR0aCAvIHZpc3VhbFZpZXdwb3J0LnNjYWxlIC0gdmlzdWFsVmlld3BvcnQud2lkdGgpIDxcbiAgICAvLyAwLjAwMVxuICAgIC8vIEZhbGxiYWNrIGhlcmU6IFwiTm90IFNhZmFyaVwiIHVzZXJBZ2VudFxuXG4gICAgaWYgKCEvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICB4ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdDtcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCksXG4gICAgeTogeVxuICB9O1xufVxuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuXG4vLyBvZiB0aGUgYDxodG1sPmAgYW5kIGA8Ym9keT5gIHJlY3QgYm91bmRzIGlmIGhvcml6b250YWxseSBzY3JvbGxhYmxlXG5cbmZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5O1xuICB2YXIgd2lkdGggPSBtYXgoaHRtbC5zY3JvbGxXaWR0aCwgaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuc2Nyb2xsV2lkdGggOiAwLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApO1xuICB2YXIgaGVpZ2h0ID0gbWF4KGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgYm9keSA/IGJvZHkuc2Nyb2xsSGVpZ2h0IDogMCwgYm9keSA/IGJvZHkuY2xpZW50SGVpZ2h0IDogMCk7XG4gIHZhciB4ID0gLXdpblNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgdmFyIHkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcblxuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5IHx8IGh0bWwpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICB4ICs9IG1heChodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApIC0gd2lkdGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMocGFyZW50LCBjaGlsZCkge1xuICB2YXIgcm9vdE5vZGUgPSBjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChyb290Tm9kZSAmJiBpc1NoYWRvd1Jvb3Qocm9vdE5vZGUpKSB7XG4gICAgICB2YXIgbmV4dCA9IGNoaWxkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50KSB7XG4gIHJldHVybiBjbGlwcGluZ1BhcmVudCA9PT0gdmlld3BvcnQgPyByZWN0VG9DbGllbnRSZWN0KGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSkgOiBpc0hUTUxFbGVtZW50KGNsaXBwaW5nUGFyZW50KSA/IGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGNsaXBwaW5nUGFyZW50KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KSAmJiBnZXROb2RlTmFtZShjbGlwcGluZ1BhcmVudCkgIT09ICdib2R5JztcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCk7XG4gICAgYWNjUmVjdC50b3AgPSBtYXgocmVjdC50b3AsIGFjY1JlY3QudG9wKTtcbiAgICBhY2NSZWN0LnJpZ2h0ID0gbWluKHJlY3QucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xuICAgIGFjY1JlY3QuYm90dG9tID0gbWluKHJlY3QuYm90dG9tLCBhY2NSZWN0LmJvdHRvbSk7XG4gICAgYWNjUmVjdC5sZWZ0ID0gbWF4KHJlY3QubGVmdCwgYWNjUmVjdC5sZWZ0KTtcbiAgICByZXR1cm4gYWNjUmVjdDtcbiAgfSwgZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgZmlyc3RDbGlwcGluZ1BhcmVudCkpO1xuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xufVxuXG5mdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn1cblxuZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSAtIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdICsgKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVBhZGRpbmdPYmplY3QocGFkZGluZ09iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZ2V0RnJlc2hTaWRlT2JqZWN0KCksIHBhZGRpbmdPYmplY3QpO1xufVxuXG5mdW5jdGlvbiBleHBhbmRUb0hhc2hNYXAodmFsdWUsIGtleXMpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChoYXNoTWFwLCBrZXkpIHtcbiAgICBoYXNoTWFwW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gaGFzaE1hcDtcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gc3RhdGUucGxhY2VtZW50IDogX29wdGlvbnMkcGxhY2VtZW50LFxuICAgICAgX29wdGlvbnMkYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMkYm91bmRhcnkgPT09IHZvaWQgMCA/IGNsaXBwaW5nUGFyZW50cyA6IF9vcHRpb25zJGJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyB2aWV3cG9ydCA6IF9vcHRpb25zJHJvb3RCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGVsZW1lbnRDb250ZSA9IF9vcHRpb25zLmVsZW1lbnRDb250ZXh0LFxuICAgICAgZWxlbWVudENvbnRleHQgPSBfb3B0aW9ucyRlbGVtZW50Q29udGUgPT09IHZvaWQgMCA/IHBvcHBlciA6IF9vcHRpb25zJGVsZW1lbnRDb250ZSxcbiAgICAgIF9vcHRpb25zJGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IF9vcHRpb25zJGFsdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMkcGFkZGluZyA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHBhZGRpbmc7XG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbiAgdmFyIGFsdENvbnRleHQgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcmVmZXJlbmNlIDogcG9wcGVyO1xuICB2YXIgcmVmZXJlbmNlRWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuICB2YXIgY2xpcHBpbmdDbGllbnRSZWN0ID0gZ2V0Q2xpcHBpbmdSZWN0KGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQgOiBlbGVtZW50LmNvbnRleHRFbGVtZW50IHx8IGdldERvY3VtZW50RWxlbWVudChzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5KTtcbiAgdmFyIHJlZmVyZW5jZUNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocmVmZXJlbmNlRWxlbWVudCk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICBlbGVtZW50OiBwb3BwZXJSZWN0LFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pO1xuICB2YXIgcG9wcGVyQ2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3QoT2JqZWN0LmFzc2lnbih7fSwgcG9wcGVyUmVjdCwgcG9wcGVyT2Zmc2V0cykpO1xuICB2YXIgZWxlbWVudENsaWVudFJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7IC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuXG4gIHZhciBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOiBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OiBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHRcbiAgfTtcbiAgdmFyIG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDsgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuXG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICB2YXIgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59XG5cbnZhciBJTlZBTElEX0VMRU1FTlRfRVJST1IgPSAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbnZhciBJTkZJTklURV9MT09QX0VSUk9SID0gJ1BvcHBlcjogQW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgbW9kaWZpZXJzIGN5Y2xlIGhhcyBiZWVuIGRldGVjdGVkISBUaGUgY3ljbGUgaGFzIGJlZW4gaW50ZXJydXB0ZWQgdG8gcHJldmVudCBhIGJyb3dzZXIgY3Jhc2guJztcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwb3BwZXJHZW5lcmF0b3IoZ2VuZXJhdG9yT3B0aW9ucykge1xuICBpZiAoZ2VuZXJhdG9yT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgZ2VuZXJhdG9yT3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9nZW5lcmF0b3JPcHRpb25zID0gZ2VuZXJhdG9yT3B0aW9ucyxcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRNb2RpZmllcnMsXG4gICAgICBkZWZhdWx0TW9kaWZpZXJzID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmID09PSB2b2lkIDAgPyBbXSA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZixcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIGRlZmF1bHRPcHRpb25zID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9PT0gdm9pZCAwID8gREVGQVVMVF9PUFRJT05TIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmMjtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlcihyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIGRlZmF1bHRPcHRpb25zKSxcbiAgICAgIG1vZGlmaWVyc0RhdGE6IHt9LFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlcjogcG9wcGVyXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBzdHlsZXM6IHt9XG4gICAgfTtcbiAgICB2YXIgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIHZhciBpc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHZhciBpbnN0YW5jZSA9IHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHN0YXRlLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgc3RhdGUub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKSA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSkgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnQgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpXG4gICAgICAgIH07IC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhtZXJnZUJ5TmFtZShbXS5jb25jYXQoZGVmYXVsdE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpKSk7IC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5lbmFibGVkO1xuICAgICAgICB9KTsgLy8gVmFsaWRhdGUgdGhlIHByb3ZpZGVkIG1vZGlmaWVycyBzbyB0aGF0IHRoZSBjb25zdW1lciB3aWxsIGdldCB3YXJuZWRcbiAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBtb2RpZmllcnMgaXMgaW52YWxpZCBmb3IgYW55IHJlYXNvblxuXG4gICAgICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IHVuaXF1ZUJ5KFtdLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycyksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhbGlkYXRlTW9kaWZpZXJzKG1vZGlmaWVycyk7XG5cbiAgICAgICAgICBpZiAoZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5vcHRpb25zLnBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICAgICAgICAgIHZhciBmbGlwTW9kaWZpZXIgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZjIubmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09ICdmbGlwJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWZsaXBNb2RpZmllcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImF1dG9cIiBwbGFjZW1lbnRzIHJlcXVpcmUgdGhlIFwiZmxpcFwiIG1vZGlmaWVyIGJlJywgJ3ByZXNlbnQgYW5kIGVuYWJsZWQgdG8gd29yay4nXS5qb2luKCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocG9wcGVyKSxcbiAgICAgICAgICAgICAgbWFyZ2luVG9wID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luVG9wLFxuICAgICAgICAgICAgICBtYXJnaW5SaWdodCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblJpZ2h0LFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b20gPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Cb3R0b20sXG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0OyAvLyBXZSBubyBsb25nZXIgdGFrZSBpbnRvIGFjY291bnQgYG1hcmdpbnNgIG9uIHRoZSBwb3BwZXIsIGFuZCBpdCBjYW5cbiAgICAgICAgICAvLyBjYXVzZSBidWdzIHdpdGggcG9zaXRpb25pbmcsIHNvIHdlJ2xsIHdhcm4gdGhlIGNvbnN1bWVyXG5cblxuICAgICAgICAgIGlmIChbbWFyZ2luVG9wLCBtYXJnaW5SaWdodCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0XS5zb21lKGZ1bmN0aW9uIChtYXJnaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG1hcmdpbik7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogQ1NTIFwibWFyZ2luXCIgc3R5bGVzIGNhbm5vdCBiZSB1c2VkIHRvIGFwcGx5IHBhZGRpbmcnLCAnYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgb3IgYm91bmRhcnkuJywgJ1RvIHJlcGxpY2F0ZSBtYXJnaW4sIHVzZSB0aGUgYG9mZnNldGAgbW9kaWZpZXIsIGFzIHdlbGwgYXMnLCAndGhlIGBwYWRkaW5nYCBvcHRpb24gaW4gdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIGFuZCBgZmxpcGAnLCAnbW9kaWZpZXJzLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAvLyBTeW5jIHVwZGF0ZSDigJMgaXQgd2lsbCBhbHdheXMgYmUgZXhlY3V0ZWQsIGV2ZW4gaWYgbm90IG5lY2Vzc2FyeS4gVGhpc1xuICAgICAgLy8gaXMgdXNlZnVsIGZvciBsb3cgZnJlcXVlbmN5IHVwZGF0ZXMgd2hlcmUgc3luYyBiZWhhdmlvciBzaW1wbGlmaWVzIHRoZVxuICAgICAgLy8gbG9naWMuXG4gICAgICAvLyBGb3IgaGlnaCBmcmVxdWVuY3kgdXBkYXRlcyAoZS5nLiBgcmVzaXplYCBhbmQgYHNjcm9sbGAgZXZlbnRzKSwgYWx3YXlzXG4gICAgICAvLyBwcmVmZXIgdGhlIGFzeW5jIFBvcHBlciN1cGRhdGUgbWV0aG9kXG4gICAgICBmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfc3RhdGUkZWxlbWVudHMgPSBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50cy5yZWZlcmVuY2UsXG4gICAgICAgICAgICBwb3BwZXIgPSBfc3RhdGUkZWxlbWVudHMucG9wcGVyOyAvLyBEb24ndCBwcm9jZWVkIGlmIGByZWZlcmVuY2VgIG9yIGBwb3BwZXJgIGFyZSBub3QgdmFsaWQgZWxlbWVudHNcbiAgICAgICAgLy8gYW55bW9yZVxuXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcblxuXG4gICAgICAgIHN0YXRlLnJlY3RzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogZ2V0Q29tcG9zaXRlUmVjdChyZWZlcmVuY2UsIGdldE9mZnNldFBhcmVudChwb3BwZXIpLCBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKVxuICAgICAgICB9OyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcblxuICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDsgLy8gT24gZWFjaCB1cGRhdGUgY3ljbGUsIHRoZSBgbW9kaWZpZXJzRGF0YWAgcHJvcGVydHkgZm9yIGVhY2ggbW9kaWZpZXJcbiAgICAgICAgLy8gaXMgZmlsbGVkIHdpdGggdGhlIGluaXRpYWwgZGF0YSBzcGVjaWZpZWQgYnkgdGhlIG1vZGlmaWVyLiBUaGlzIG1lYW5zXG4gICAgICAgIC8vIGl0IGRvZXNuJ3QgcGVyc2lzdCBhbmQgaXMgZnJlc2ggb24gZWFjaCB1cGRhdGUuXG4gICAgICAgIC8vIFRvIGVuc3VyZSBwZXJzaXN0ZW50IGRhdGEsIHVzZSBgJHtuYW1lfSNwZXJzaXN0ZW50YFxuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVyLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9fZGVidWdfbG9vcHNfXyA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIF9fZGVidWdfbG9vcHNfXyArPSAxO1xuXG4gICAgICAgICAgICBpZiAoX19kZWJ1Z19sb29wc19fID4gMTAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5GSU5JVEVfTE9PUF9FUlJPUik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGF0ZS5yZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX3N0YXRlJG9yZGVyZWRNb2RpZmllID0gc3RhdGUub3JkZXJlZE1vZGlmaWVyc1tpbmRleF0sXG4gICAgICAgICAgICAgIGZuID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLmZuLFxuICAgICAgICAgICAgICBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm9wdGlvbnMsXG4gICAgICAgICAgICAgIF9vcHRpb25zID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9PT0gdm9pZCAwID8ge30gOiBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyLFxuICAgICAgICAgICAgICBuYW1lID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm5hbWU7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGZuKHtcbiAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgICBvcHRpb25zOiBfb3B0aW9ucyxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICAgICAgICB9KSB8fCBzdGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBc3luYyBhbmQgb3B0aW1pc3RpY2FsbHkgb3B0aW1pemVkIHVwZGF0ZSDigJMgaXQgd2lsbCBub3QgYmUgZXhlY3V0ZWQgaWZcbiAgICAgIC8vIG5vdCBuZWNlc3NhcnkgKGRlYm91bmNlZCB0byBydW4gYXQgbW9zdCBvbmNlLXBlci10aWNrKVxuICAgICAgdXBkYXRlOiBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgcmVzb2x2ZShzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIGlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBiZWZvcmUgdGhlIGZpcnN0XG4gICAgLy8gdXBkYXRlIGN5Y2xlIHJ1bnMuIFRoZXkgd2lsbCBiZSBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdXBkYXRlXG4gICAgLy8gY3ljbGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBtb2RpZmllciBhZGRzIHNvbWUgcGVyc2lzdGVudCBkYXRhIHRoYXRcbiAgICAvLyBvdGhlciBtb2RpZmllcnMgbmVlZCB0byB1c2UsIGJ1dCB0aGUgbW9kaWZpZXIgaXMgcnVuIGFmdGVyIHRoZSBkZXBlbmRlbnRcbiAgICAvLyBvbmUuXG5cbiAgICBmdW5jdGlvbiBydW5Nb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgICAgIF9yZWYzJG9wdGlvbnMgPSBfcmVmMy5vcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9ucyA9IF9yZWYzJG9wdGlvbnMgPT09IHZvaWQgMCA/IHt9IDogX3JlZjMkb3B0aW9ucyxcbiAgICAgICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdDtcblxuICAgICAgICBpZiAodHlwZW9mIGVmZmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciBjbGVhbnVwRm4gPSBlZmZlY3Qoe1xuICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBub29wRm4gPSBmdW5jdGlvbiBub29wRm4oKSB7fTtcblxuICAgICAgICAgIGVmZmVjdENsZWFudXBGbnMucHVzaChjbGVhbnVwRm4gfHwgbm9vcEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICB9KTtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG59XG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QkMihfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGV2ZW50TGlzdGVuZXJzID0ge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0JDIsXG4gIGRhdGE6IHt9XG59O1xuXG5mdW5jdGlvbiBwb3BwZXJPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIC8vIE9mZnNldHMgYXJlIHRoZSBhY3R1YWwgcG9zaXRpb24gdGhlIHBvcHBlciBuZWVkcyB0byBoYXZlIHRvIGJlXG4gIC8vIHByb3Blcmx5IHBvc2l0aW9uZWQgbmVhciBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBwbGFjZW1lbnQsIGFuZCB3aWxsIGJlIGFkanVzdGVkIGJ5XG4gIC8vIHRoZSBtb2RpZmllcnMgaW4gdGhlIG5leHQgc3RlcFxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogc3RhdGUucmVjdHMucmVmZXJlbmNlLFxuICAgIGVsZW1lbnQ6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBwb3BwZXJPZmZzZXRzJDEgPSB7XG4gIG5hbWU6ICdwb3BwZXJPZmZzZXRzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdyZWFkJyxcbiAgZm46IHBvcHBlck9mZnNldHMsXG4gIGRhdGE6IHt9XG59O1xuXG52YXIgdW5zZXRTaWRlcyA9IHtcbiAgdG9wOiAnYXV0bycsXG4gIHJpZ2h0OiAnYXV0bycsXG4gIGJvdHRvbTogJ2F1dG8nLFxuICBsZWZ0OiAnYXV0bydcbn07IC8vIFJvdW5kIHRoZSBvZmZzZXRzIHRvIHRoZSBuZWFyZXN0IHN1aXRhYmxlIHN1YnBpeGVsIGJhc2VkIG9uIHRoZSBEUFIuXG4vLyBab29taW5nIGNhbiBjaGFuZ2UgdGhlIERQUiwgYnV0IGl0IHNlZW1zIHRvIHJlcG9ydCBhIHZhbHVlIHRoYXQgd2lsbFxuLy8gY2xlYW5seSBkaXZpZGUgdGhlIHZhbHVlcyBpbnRvIHRoZSBhcHByb3ByaWF0ZSBzdWJwaXhlbHMuXG5cbmZ1bmN0aW9uIHJvdW5kT2Zmc2V0c0J5RFBSKF9yZWYpIHtcbiAgdmFyIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55O1xuICB2YXIgd2luID0gd2luZG93O1xuICB2YXIgZHByID0gd2luLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgcmV0dXJuIHtcbiAgICB4OiByb3VuZChyb3VuZCh4ICogZHByKSAvIGRwcikgfHwgMCxcbiAgICB5OiByb3VuZChyb3VuZCh5ICogZHByKSAvIGRwcikgfHwgMFxuICB9O1xufVxuXG5mdW5jdGlvbiBtYXBUb1N0eWxlcyhfcmVmMikge1xuICB2YXIgX09iamVjdCRhc3NpZ24yO1xuXG4gIHZhciBwb3BwZXIgPSBfcmVmMi5wb3BwZXIsXG4gICAgICBwb3BwZXJSZWN0ID0gX3JlZjIucG9wcGVyUmVjdCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYyLnBsYWNlbWVudCxcbiAgICAgIG9mZnNldHMgPSBfcmVmMi5vZmZzZXRzLFxuICAgICAgcG9zaXRpb24gPSBfcmVmMi5wb3NpdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9yZWYyLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGFkYXB0aXZlID0gX3JlZjIuYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHMgPSBfcmVmMi5yb3VuZE9mZnNldHM7XG5cbiAgdmFyIF9yZWYzID0gcm91bmRPZmZzZXRzID09PSB0cnVlID8gcm91bmRPZmZzZXRzQnlEUFIob2Zmc2V0cykgOiB0eXBlb2Ygcm91bmRPZmZzZXRzID09PSAnZnVuY3Rpb24nID8gcm91bmRPZmZzZXRzKG9mZnNldHMpIDogb2Zmc2V0cyxcbiAgICAgIF9yZWYzJHggPSBfcmVmMy54LFxuICAgICAgeCA9IF9yZWYzJHggPT09IHZvaWQgMCA/IDAgOiBfcmVmMyR4LFxuICAgICAgX3JlZjMkeSA9IF9yZWYzLnksXG4gICAgICB5ID0gX3JlZjMkeSA9PT0gdm9pZCAwID8gMCA6IF9yZWYzJHk7XG5cbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIHZhciBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgdmFyIHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG5cbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3ApIHtcbiAgICAgIHNpZGVZID0gYm90dG9tOyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgeSAtPSBvZmZzZXRQYXJlbnRbaGVpZ2h0UHJvcF0gLSBwb3BwZXJSZWN0LmhlaWdodDtcbiAgICAgIHkgKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IGxlZnQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgICB4IC09IG9mZnNldFBhcmVudFt3aWR0aFByb3BdIC0gcG9wcGVyUmVjdC53aWR0aDtcbiAgICAgIHggKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb25cbiAgfSwgYWRhcHRpdmUgJiYgdW5zZXRTaWRlcyk7XG5cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbikge1xuICAgIHZhciBfT2JqZWN0JGFzc2lnbjtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbiA9IHt9LCBfT2JqZWN0JGFzc2lnbltzaWRlWV0gPSBoYXNZID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduW3NpZGVYXSA9IGhhc1ggPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ24udHJhbnNmb3JtID0gKHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIDwgMiA/IFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIDApXCIsIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24yID0ge30sIF9PYmplY3QkYXNzaWduMltzaWRlWV0gPSBoYXNZID8geSArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjJbc2lkZVhdID0gaGFzWCA/IHggKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yLnRyYW5zZm9ybSA9ICcnLCBfT2JqZWN0JGFzc2lnbjIpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlcyhfcmVmNCkge1xuICB2YXIgc3RhdGUgPSBfcmVmNC5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmNC5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID0gb3B0aW9ucy5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRncHVBY2NlbGVyYXQsXG4gICAgICBfb3B0aW9ucyRhZGFwdGl2ZSA9IG9wdGlvbnMuYWRhcHRpdmUsXG4gICAgICBhZGFwdGl2ZSA9IF9vcHRpb25zJGFkYXB0aXZlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWRhcHRpdmUsXG4gICAgICBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPSBvcHRpb25zLnJvdW5kT2Zmc2V0cyxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJvdW5kT2Zmc2V0cztcblxuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcGVydHkgPSBnZXRDb21wdXRlZFN0eWxlKHN0YXRlLmVsZW1lbnRzLnBvcHBlcikudHJhbnNpdGlvblByb3BlcnR5IHx8ICcnO1xuXG4gICAgaWYgKGFkYXB0aXZlICYmIFsndHJhbnNmb3JtJywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLnNvbWUoZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvblByb3BlcnR5LmluZGV4T2YocHJvcGVydHkpID49IDA7XG4gICAgfSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogRGV0ZWN0ZWQgQ1NTIHRyYW5zaXRpb25zIG9uIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nJywgJ0NTUyBwcm9wZXJ0aWVzOiBcInRyYW5zZm9ybVwiLCBcInRvcFwiLCBcInJpZ2h0XCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLicsICdcXG5cXG4nLCAnRGlzYWJsZSB0aGUgXCJjb21wdXRlU3R5bGVzXCIgbW9kaWZpZXJcXCdzIGBhZGFwdGl2ZWAgb3B0aW9uIHRvIGFsbG93JywgJ2ZvciBzbW9vdGggdHJhbnNpdGlvbnMsIG9yIHJlbW92ZSB0aGVzZSBwcm9wZXJ0aWVzIGZyb20gdGhlIENTUycsICd0cmFuc2l0aW9uIGRlY2xhcmF0aW9uIG9uIHRoZSBwb3BwZXIgZWxlbWVudCBpZiBvbmx5IHRyYW5zaXRpb25pbmcnLCAnb3BhY2l0eSBvciBiYWNrZ3JvdW5kLWNvbG9yIGZvciBleGFtcGxlLicsICdcXG5cXG4nLCAnV2UgcmVjb21tZW5kIHVzaW5nIHRoZSBwb3BwZXIgZWxlbWVudCBhcyBhIHdyYXBwZXIgYXJvdW5kIGFuIGlubmVyJywgJ2VsZW1lbnQgdGhhdCBjYW4gaGF2ZSBhbnkgQ1NTIHByb3BlcnR5IHRyYW5zaXRpb25lZCBmb3IgYW5pbWF0aW9ucy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSB7XG4gICAgcGxhY2VtZW50OiBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uXG4gIH07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5wb3BwZXIsIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBhZGFwdGl2ZTogYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93LCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGFkYXB0aXZlOiBmYWxzZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGNvbXB1dGVTdHlsZXMkMSA9IHtcbiAgbmFtZTogJ2NvbXB1dGVTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ2JlZm9yZVdyaXRlJyxcbiAgZm46IGNvbXB1dGVTdHlsZXMsXG4gIGRhdGE6IHt9XG59O1xuXG4vLyBhbmQgYXBwbGllcyB0aGVtIHRvIHRoZSBIVE1MRWxlbWVudHMgc3VjaCBhcyBwb3BwZXIgYW5kIGFycm93XG5cbmZ1bmN0aW9uIGFwcGx5U3R5bGVzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS5zdHlsZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cblxuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlID09PSB0cnVlID8gJycgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QkMShfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZTtcbiAgdmFyIGluaXRpYWxTdHlsZXMgPSB7XG4gICAgcG9wcGVyOiB7XG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCdcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgcmVmZXJlbmNlOiB7fVxuICB9O1xuICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLnBvcHBlci5zdHlsZSwgaW5pdGlhbFN0eWxlcy5wb3BwZXIpO1xuICBzdGF0ZS5zdHlsZXMgPSBpbml0aWFsU3R5bGVzO1xuXG4gIGlmIChzdGF0ZS5lbGVtZW50cy5hcnJvdykge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGluaXRpYWxTdHlsZXMuYXJyb3cpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhzdGF0ZS5zdHlsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBzdGF0ZS5zdHlsZXNbbmFtZV0gOiBpbml0aWFsU3R5bGVzW25hbWVdKTsgLy8gU2V0IGFsbCB2YWx1ZXMgdG8gYW4gZW1wdHkgc3RyaW5nIHRvIHVuc2V0IHRoZW1cblxuICAgICAgdmFyIHN0eWxlID0gc3R5bGVQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9ICcnO1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9LCB7fSk7IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGFwcGx5U3R5bGVzJDEgPSB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0JDEsXG4gIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXVxufTtcblxuZnVuY3Rpb24gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCByZWN0cywgb2Zmc2V0KSB7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgaW52ZXJ0RGlzdGFuY2UgPSBbbGVmdCwgdG9wXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyAtMSA6IDE7XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gb2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSkpIDogb2Zmc2V0LFxuICAgICAgc2tpZGRpbmcgPSBfcmVmWzBdLFxuICAgICAgZGlzdGFuY2UgPSBfcmVmWzFdO1xuXG4gIHNraWRkaW5nID0gc2tpZGRpbmcgfHwgMDtcbiAgZGlzdGFuY2UgPSAoZGlzdGFuY2UgfHwgMCkgKiBpbnZlcnREaXN0YW5jZTtcbiAgcmV0dXJuIFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8ge1xuICAgIHg6IGRpc3RhbmNlLFxuICAgIHk6IHNraWRkaW5nXG4gIH0gOiB7XG4gICAgeDogc2tpZGRpbmcsXG4gICAgeTogZGlzdGFuY2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJG9mZnNldCA9IG9wdGlvbnMub2Zmc2V0LFxuICAgICAgb2Zmc2V0ID0gX29wdGlvbnMkb2Zmc2V0ID09PSB2b2lkIDAgPyBbMCwgMF0gOiBfb3B0aW9ucyRvZmZzZXQ7XG4gIHZhciBkYXRhID0gcGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHN0YXRlLnJlY3RzLCBvZmZzZXQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgdmFyIF9kYXRhJHN0YXRlJHBsYWNlbWVudCA9IGRhdGFbc3RhdGUucGxhY2VtZW50XSxcbiAgICAgIHggPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueCxcbiAgICAgIHkgPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSB4O1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IHk7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBvZmZzZXQkMSA9IHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldFxufTtcblxudmFyIGhhc2gkMSA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoJDFbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG52YXIgaGFzaCA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9IF9vcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9PT0gdm9pZCAwID8gcGxhY2VtZW50cyA6IF9vcHRpb25zJGFsbG93ZWRBdXRvUDtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuICB2YXIgcGxhY2VtZW50cyQxID0gdmFyaWF0aW9uID8gZmxpcFZhcmlhdGlvbnMgPyB2YXJpYXRpb25QbGFjZW1lbnRzIDogdmFyaWF0aW9uUGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gdmFyaWF0aW9uO1xuICB9KSA6IGJhc2VQbGFjZW1lbnRzO1xuICB2YXIgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzJDEuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwO1xuICB9KTtcblxuICBpZiAoYWxsb3dlZFBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzJDE7XG5cbiAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogVGhlIGBhbGxvd2VkQXV0b1BsYWNlbWVudHNgIG9wdGlvbiBkaWQgbm90IGFsbG93IGFueScsICdwbGFjZW1lbnRzLiBFbnN1cmUgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbiBtYXRjaGVzIHRoZSB2YXJpYXRpb24nLCAnb2YgdGhlIGFsbG93ZWQgcGxhY2VtZW50cy4nLCAnRm9yIGV4YW1wbGUsIFwiYXV0b1wiIGNhbm5vdCBiZSB1c2VkIHRvIGFsbG93IFwiYm90dG9tLXN0YXJ0XCIuJywgJ1VzZSBcImF1dG8tc3RhcnRcIiBpbnN0ZWFkLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdOiBGbG93IHNlZW1zIHRvIGhhdmUgcHJvYmxlbXMgd2l0aCB0d28gYXJyYXkgdW5pb25zLi4uXG5cblxuICB2YXIgb3ZlcmZsb3dzID0gYWxsb3dlZFBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvdmVyZmxvd3MpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGlmIChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICByZXR1cm4gW2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xufVxuXG5mdW5jdGlvbiBmbGlwKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzID0gb3B0aW9ucy5mYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPSBvcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRmbGlwVmFyaWF0aW8sXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBvcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cztcbiAgdmFyIHByZWZlcnJlZFBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9IGJhc2VQbGFjZW1lbnQgPT09IHByZWZlcnJlZFBsYWNlbWVudDtcbiAgdmFyIGZhbGxiYWNrUGxhY2VtZW50cyA9IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyB8fCAoaXNCYXNlUGxhY2VtZW50IHx8ICFmbGlwVmFyaWF0aW9ucyA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpXSA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuICB2YXIgcGxhY2VtZW50cyA9IFtwcmVmZXJyZWRQbGFjZW1lbnRdLmNvbmNhdChmYWxsYmFja1BsYWNlbWVudHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8gPyBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9uczogZmxpcFZhcmlhdGlvbnMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IGFsbG93ZWRBdXRvUGxhY2VtZW50c1xuICAgIH0pIDogcGxhY2VtZW50KTtcbiAgfSwgW10pO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBjaGVja3NNYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBtYWtlRmFsbGJhY2tDaGVja3MgPSB0cnVlO1xuICB2YXIgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50c1swXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcblxuICAgIHZhciBfYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBpc1N0YXJ0VmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHN0YXJ0O1xuICAgIHZhciBpc1ZlcnRpY2FsID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKF9iYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pO1xuICAgIHZhciBtYWluVmFyaWF0aW9uU2lkZSA9IGlzVmVydGljYWwgPyBpc1N0YXJ0VmFyaWF0aW9uID8gcmlnaHQgOiBsZWZ0IDogaXNTdGFydFZhcmlhdGlvbiA/IGJvdHRvbSA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIHZhciBhbHRWYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIHZhciBjaGVja3MgPSBbXTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1tfYmFzZVBsYWNlbWVudF0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbbWFpblZhcmlhdGlvblNpZGVdIDw9IDAsIG92ZXJmbG93W2FsdFZhcmlhdGlvblNpZGVdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICByZXR1cm4gY2hlY2s7XG4gICAgfSkpIHtcbiAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgIG1ha2VGYWxsYmFja0NoZWNrcyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2hlY2tzTWFwLnNldChwbGFjZW1lbnQsIGNoZWNrcyk7XG4gIH1cblxuICBpZiAobWFrZUZhbGxiYWNrQ2hlY2tzKSB7XG4gICAgLy8gYDJgIG1heSBiZSBkZXNpcmVkIGluIHNvbWUgY2FzZXMg4oCTIHJlc2VhcmNoIGxhdGVyXG4gICAgdmFyIG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG4gICAgICB2YXIgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBjaGVja3MgPSBjaGVja3NNYXAuZ2V0KHBsYWNlbWVudCk7XG5cbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgX2kpLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gZml0dGluZ1BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kgPSBudW1iZXJPZkNoZWNrczsgX2kgPiAwOyBfaS0tKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKF9pKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLnBsYWNlbWVudCAhPT0gZmlyc3RGaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCA9IHRydWU7XG4gICAgc3RhdGUucGxhY2VtZW50ID0gZmlyc3RGaXR0aW5nUGxhY2VtZW50O1xuICAgIHN0YXRlLnJlc2V0ID0gdHJ1ZTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxudmFyIGZsaXAkMSA9IHtcbiAgbmFtZTogJ2ZsaXAnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogZmxpcCxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbiAgZGF0YToge1xuICAgIF9za2lwOiBmYWxzZVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRBbHRBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn1cblxuZnVuY3Rpb24gd2l0aGluKG1pbiQxLCB2YWx1ZSwgbWF4JDEpIHtcbiAgcmV0dXJuIG1heChtaW4kMSwgbWluKHZhbHVlLCBtYXgkMSkpO1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXIgPSBvcHRpb25zLnRldGhlcixcbiAgICAgIHRldGhlciA9IF9vcHRpb25zJHRldGhlciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHRldGhlcixcbiAgICAgIF9vcHRpb25zJHRldGhlck9mZnNldCA9IG9wdGlvbnMudGV0aGVyT2Zmc2V0LFxuICAgICAgdGV0aGVyT2Zmc2V0ID0gX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkdGV0aGVyT2Zmc2V0O1xuICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeVxuICB9KTtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9ICF2YXJpYXRpb247XG4gIHZhciBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGFsdEF4aXMgPSBnZXRBbHRBeGlzKG1haW5BeGlzKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IHRldGhlck9mZnNldChPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHRldGhlck9mZnNldDtcbiAgdmFyIGRhdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNoZWNrTWFpbkF4aXMgfHwgY2hlY2tBbHRBeGlzKSB7XG4gICAgdmFyIG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gICAgdmFyIGFsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG9mZnNldCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdO1xuICAgIHZhciBtaW4kMSA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgb3ZlcmZsb3dbbWFpblNpZGVdO1xuICAgIHZhciBtYXgkMSA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdIC0gb3ZlcmZsb3dbYWx0U2lkZV07XG4gICAgdmFyIGFkZGl0aXZlID0gdGV0aGVyID8gLXBvcHBlclJlY3RbbGVuXSAvIDIgOiAwO1xuICAgIHZhciBtaW5MZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gcmVmZXJlbmNlUmVjdFtsZW5dIDogcG9wcGVyUmVjdFtsZW5dO1xuICAgIHZhciBtYXhMZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gLXBvcHBlclJlY3RbbGVuXSA6IC1yZWZlcmVuY2VSZWN0W2xlbl07IC8vIFdlIG5lZWQgdG8gaW5jbHVkZSB0aGUgYXJyb3cgaW4gdGhlIGNhbGN1bGF0aW9uIHNvIHRoZSBhcnJvdyBkb2Vzbid0IGdvXG4gICAgLy8gb3V0c2lkZSB0aGUgcmVmZXJlbmNlIGJvdW5kc1xuXG4gICAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICAgIHZhciBhcnJvd1JlY3QgPSB0ZXRoZXIgJiYgYXJyb3dFbGVtZW50ID8gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9O1xuICAgIHZhciBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10gPyBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10ucGFkZGluZyA6IGdldEZyZXNoU2lkZU9iamVjdCgpO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNaW4gPSBhcnJvd1BhZGRpbmdPYmplY3RbbWFpblNpZGVdO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07IC8vIElmIHRoZSByZWZlcmVuY2UgbGVuZ3RoIGlzIHNtYWxsZXIgdGhhbiB0aGUgYXJyb3cgbGVuZ3RoLCB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaW5jbHVkZSBpdHMgZnVsbCBzaXplIGluIHRoZSBjYWxjdWxhdGlvbi4gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbFxuICAgIC8vIGFuZCBuZWFyIHRoZSBlZGdlIG9mIGEgYm91bmRhcnksIHRoZSBwb3BwZXIgY2FuIG92ZXJmbG93IGV2ZW4gaWYgdGhlXG4gICAgLy8gcmVmZXJlbmNlIGlzIG5vdCBvdmVyZmxvd2luZyBhcyB3ZWxsIChlLmcuIHZpcnR1YWwgZWxlbWVudHMgd2l0aCBub1xuICAgIC8vIHdpZHRoIG9yIGhlaWdodClcblxuICAgIHZhciBhcnJvd0xlbiA9IHdpdGhpbigwLCByZWZlcmVuY2VSZWN0W2xlbl0sIGFycm93UmVjdFtsZW5dKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtIGFkZGl0aXZlIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSB0ZXRoZXJPZmZzZXRWYWx1ZSA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gdGV0aGVyT2Zmc2V0VmFsdWU7XG4gICAgdmFyIG1heE9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICsgYWRkaXRpdmUgKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIHRldGhlck9mZnNldFZhbHVlIDogbWF4TGVuICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyB0ZXRoZXJPZmZzZXRWYWx1ZTtcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldCA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF1bbWFpbkF4aXNdIDogMDtcbiAgICB2YXIgdGV0aGVyTWluID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG1heE9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWU7XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgdmFyIHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBtaW4obWluJDEsIHRldGhlck1pbikgOiBtaW4kMSwgb2Zmc2V0LCB0ZXRoZXIgPyBtYXgobWF4JDEsIHRldGhlck1heCkgOiBtYXgkMSk7XG4gICAgICBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldDtcbiAgICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIHZhciBfbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gdG9wIDogbGVmdDtcblxuICAgICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgICB2YXIgX29mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICAgIHZhciBfbWluID0gX29mZnNldCArIG92ZXJmbG93W19tYWluU2lkZV07XG5cbiAgICAgIHZhciBfbWF4ID0gX29mZnNldCAtIG92ZXJmbG93W19hbHRTaWRlXTtcblxuICAgICAgdmFyIF9wcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gbWluKF9taW4sIHRldGhlck1pbikgOiBfbWluLCBfb2Zmc2V0LCB0ZXRoZXIgPyBtYXgoX21heCwgdGV0aGVyTWF4KSA6IF9tYXgpO1xuXG4gICAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldDtcbiAgICAgIGRhdGFbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0IC0gX29mZnNldDtcbiAgICB9XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBwcmV2ZW50T3ZlcmZsb3ckMSA9IHtcbiAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J11cbn07XG5cbnZhciB0b1BhZGRpbmdPYmplY3QgPSBmdW5jdGlvbiB0b1BhZGRpbmdPYmplY3QocGFkZGluZywgc3RhdGUpIHtcbiAgcGFkZGluZyA9IHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nID8gcGFkZGluZyhPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHBhZGRpbmc7XG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xufTtcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGFycm93RWxlbWVudCA9IF9vcHRpb25zJGVsZW1lbnQgPT09IHZvaWQgMCA/ICdbZGF0YS1wb3BwZXItYXJyb3ddJyA6IF9vcHRpb25zJGVsZW1lbnQ7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENTUyBzZWxlY3RvclxuXG5cbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIGVsZW1lbnQgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCAobm90IGFuIFNWR0VsZW1lbnQpLicsICdUbyB1c2UgYW4gU1ZHIGFycm93LCB3cmFwIGl0IGluIGFuIEhUTUxFbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzJywgJ3RoZSBhcnJvdy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBtb2RpZmllclxcJ3MgYGVsZW1lbnRgIG11c3QgYmUgYSBjaGlsZCBvZiB0aGUgcG9wcGVyJywgJ2VsZW1lbnQuJ10uam9pbignICcpKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBzdGF0ZS5lbGVtZW50cy5hcnJvdyA9IGFycm93RWxlbWVudDtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBhcnJvdyQxID0ge1xuICBuYW1lOiAnYXJyb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogYXJyb3csXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J11cbn07XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKSB7XG4gIGlmIChwcmV2ZW50ZWRPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICBwcmV2ZW50ZWRPZmZzZXRzID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dbc2lkZV0gPj0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhpZGUoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuICB2YXIgcmVmZXJlbmNlT3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICB9KTtcbiAgdmFyIHBvcHBlckFsdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBhbHRCb3VuZGFyeTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHJlZmVyZW5jZU92ZXJmbG93LCByZWZlcmVuY2VSZWN0KTtcbiAgdmFyIHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhwb3BwZXJBbHRPdmVyZmxvdywgcG9wcGVyUmVjdCwgcHJldmVudGVkT2Zmc2V0cyk7XG4gIHZhciBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICB2YXIgaGFzUG9wcGVyRXNjYXBlZCA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChwb3BwZXJFc2NhcGVPZmZzZXRzKTtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyxcbiAgICBwb3BwZXJFc2NhcGVPZmZzZXRzOiBwb3BwZXJFc2NhcGVPZmZzZXRzLFxuICAgIGlzUmVmZXJlbmNlSGlkZGVuOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH07XG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbnZhciBoaWRlJDEgPSB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07XG5cbnZhciBkZWZhdWx0TW9kaWZpZXJzJDEgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMkMSwgY29tcHV0ZVN0eWxlcyQxLCBhcHBseVN0eWxlcyQxXTtcbnZhciBjcmVhdGVQb3BwZXIkMSA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzJDFcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzJDEsIGNvbXB1dGVTdHlsZXMkMSwgYXBwbHlTdHlsZXMkMSwgb2Zmc2V0JDEsIGZsaXAkMSwgcHJldmVudE92ZXJmbG93JDEsIGFycm93JDEsIGhpZGUkMV07XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydHMuYXBwbHlTdHlsZXMgPSBhcHBseVN0eWxlcyQxO1xuZXhwb3J0cy5hcnJvdyA9IGFycm93JDE7XG5leHBvcnRzLmNvbXB1dGVTdHlsZXMgPSBjb21wdXRlU3R5bGVzJDE7XG5leHBvcnRzLmNyZWF0ZVBvcHBlciA9IGNyZWF0ZVBvcHBlcjtcbmV4cG9ydHMuY3JlYXRlUG9wcGVyTGl0ZSA9IGNyZWF0ZVBvcHBlciQxO1xuZXhwb3J0cy5kZWZhdWx0TW9kaWZpZXJzID0gZGVmYXVsdE1vZGlmaWVycztcbmV4cG9ydHMuZGV0ZWN0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdztcbmV4cG9ydHMuZXZlbnRMaXN0ZW5lcnMgPSBldmVudExpc3RlbmVycztcbmV4cG9ydHMuZmxpcCA9IGZsaXAkMTtcbmV4cG9ydHMuaGlkZSA9IGhpZGUkMTtcbmV4cG9ydHMub2Zmc2V0ID0gb2Zmc2V0JDE7XG5leHBvcnRzLnBvcHBlckdlbmVyYXRvciA9IHBvcHBlckdlbmVyYXRvcjtcbmV4cG9ydHMucG9wcGVyT2Zmc2V0cyA9IHBvcHBlck9mZnNldHMkMTtcbmV4cG9ydHMucHJldmVudE92ZXJmbG93ID0gcHJldmVudE92ZXJmbG93JDE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIuanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMaXN0SXRlbSh7XG4gIHRpdGxlLFxuICBzdWJ0aXRsZSxcbiAgb25DbGljayxcbiAgY2hpbGRyZW4sXG4gIHRpdGxlSWNvbixcbiAgaWNvbixcbiAgcmlnaHRDb250ZW50LFxuICBtaWRDb250ZW50LFxuICBjbGFzc05hbWUsXG4gICdkYXRhLXRlc3RpZCc6IGRhdGFUZXN0SWQsXG59KSB7XG4gIGNvbnN0IHByaW1hcnlDbGFzc05hbWUgPSBjbGFzc25hbWVzKFxuICAgICdsaXN0LWl0ZW0nLFxuICAgIGNsYXNzTmFtZSxcbiAgICBzdWJ0aXRsZSB8fCBjaGlsZHJlbiA/ICcnIDogJ2xpc3QtaXRlbS0tc2luZ2xlLWNvbnRlbnQtcm93JyxcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17cHJpbWFyeUNsYXNzTmFtZX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBkYXRhLXRlc3RpZD17ZGF0YVRlc3RJZH1cbiAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICBvbktleVByZXNzPXsoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgIG9uQ2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICA+XG4gICAgICB7aWNvbiA/IDxkaXYgY2xhc3NOYW1lPVwibGlzdC1pdGVtX19pY29uXCI+e2ljb259PC9kaXY+IDogbnVsbH1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGlzdC1pdGVtX19oZWFkaW5nXCI+XG4gICAgICAgIHtSZWFjdC5pc1ZhbGlkRWxlbWVudCh0aXRsZSkgPyAoXG4gICAgICAgICAgdGl0bGVcbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwibGlzdC1pdGVtX190aXRsZVwiPnt0aXRsZX08L2gyPlxuICAgICAgICApfVxuICAgICAgICB7dGl0bGVJY29uICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpc3QtaXRlbV9faGVhZGluZy13cmFwXCI+e3RpdGxlSWNvbn08L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICAge3N1YnRpdGxlID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpc3QtaXRlbV9fc3ViaGVhZGluZ1wiPntzdWJ0aXRsZX08L2Rpdj5cbiAgICAgICkgOiBudWxsfVxuICAgICAge2NoaWxkcmVuID8gPGRpdiBjbGFzc05hbWU9XCJsaXN0LWl0ZW1fX2FjdGlvbnNcIj57Y2hpbGRyZW59PC9kaXY+IDogbnVsbH1cbiAgICAgIHttaWRDb250ZW50ID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpc3QtaXRlbV9fbWlkLWNvbnRlbnRcIj57bWlkQ29udGVudH08L2Rpdj5cbiAgICAgICkgOiBudWxsfVxuICAgICAge3JpZ2h0Q29udGVudCA/IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsaXN0LWl0ZW1fX3JpZ2h0LWNvbnRlbnRcIj57cmlnaHRDb250ZW50fTwvZGl2PlxuICAgICAgKSA6IG51bGx9XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbkxpc3RJdGVtLnByb3BUeXBlcyA9IHtcbiAgdGl0bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ub2RlXSksXG4gIHRpdGxlSWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIHN1YnRpdGxlOiBQcm9wVHlwZXMubm9kZSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBpY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgcmlnaHRDb250ZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgbWlkQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICdkYXRhLXRlc3RpZCc6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGNhbWVsQ2FzZVRvQ2FwaXRhbGl6ZShzdHIgPSAnJykge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbQS1aXSkvZ3UsICcgJDEnKS5yZXBsYWNlKC9eLi91LCAocykgPT4gcy50b1VwcGVyQ2FzZSgpKTtcbn1cbiIsImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBnZXRUb2tlblZhbHVlUGFyYW0sXG4gIGNhbGNUb2tlbkFtb3VudCxcbn0gZnJvbSAnLi4vaGVscGVycy91dGlscy90b2tlbi11dGlsJztcbmltcG9ydCB7IHVzZVRva2VuRGF0YSB9IGZyb20gJy4vdXNlVG9rZW5EYXRhJztcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBzaGFwZSBmb3IgdGhlIFRva2VuIGlucHV0IHBhcmFtZXRlciBmb3IgdXNlVG9rZW5EaXNwbGF5VmFsdWVcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFRva2VuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3ltYm9sICAgLSBUaGUgc3RyaW5nIHRvIHVzZSBhcyBhIHN1ZmZpeCBmb3IgdGhlIHRva2VuIChlZy4gREFJKVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRlY2ltYWxzIC0gVGhlIG51bWJlciBvZiBkZWNpbWFscyB0byBzaG93IHdoZW4gZGlzcGxheWluZyB0aGlzIHR5cGUgb2YgdG9rZW5cbiAqL1xuXG4vKipcbiAqIHVzZVRva2VuRGlzcGxheVZhbHVlXG4gKiBHaXZlbiB0aGUgZGF0YSBzdHJpbmcgZnJvbSB0eFBhcmFtcyBhbmQgYSB0b2tlbiBvYmplY3Qgd2l0aCBzeW1ib2wgYW5kIGRlY2ltYWxzLCByZXR1cm5cbiAqIGEgZGlzcGxheVZhbHVlIHRoYXQgcmVwcmVzZW50cyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhhdCB0b2tlbiBhbW91bnQgYXMgYSBzdHJpbmcuIEFsc29cbiAqIHJldHVybiBhIHRva2VuRGF0YSBvYmplY3QgZm9yIGRvd25zdHJlYW0gdXNhZ2UgYW5kIHRoZSBzdWZmaXggZm9yIHRoZSB0b2tlbiB0byB1c2UgYXMgcHJvcHNcbiAqIGZvciBvdGhlciBob29rcyBhbmQvb3IgY29tcG9uZW50c1xuICogQHBhcmFtIHtzdHJpbmd9ICBbdHJhbnNhY3Rpb25EYXRhXSAgICAtIFJhdyBkYXRhIHN0cmluZyBmcm9tIHRva2VuIHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge1Rva2VufSAgIFt0b2tlbl0gICAgICAgICAgICAgIC0gVGhlIHRva2VuIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1Rva2VuVHJhbnNhY3Rpb25dIC0gRHVlIHRvIHRoZSBuYXR1cmUgb2YgaG9va3MsIGl0IGlzbid0IHBvc3NpYmxlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gY29uZGl0aW9uYWxseSBjYWxsIHRoaXMgaG9vay4gVGhpcyBmbGFnIHdpbGxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZSB0aGlzIGhvb2sgdG8gcmV0dXJuIG51bGwgaWYgaXQgc2V0IGFzIGZhbHNlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaW5kaWNhdGVzIHRoZSB0cmFuc2FjdGlvbiBpcyBub3QgYXNzb2NpYXRlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggYSB0b2tlbi5cbiAqIEByZXR1cm4ge3N0cmluZ30gLSBUaGUgY29tcHV0ZWQgZGlzcGxheVZhbHVlIG9mIHRoZSBwcm92aWRlZCB0cmFuc2FjdGlvbkRhdGEgYW5kIHRva2VuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VUb2tlbkRpc3BsYXlWYWx1ZShcbiAgdHJhbnNhY3Rpb25EYXRhLFxuICB0b2tlbixcbiAgaXNUb2tlblRyYW5zYWN0aW9uID0gdHJ1ZSxcbikge1xuICBjb25zdCB0b2tlbkRhdGEgPSB1c2VUb2tlbkRhdGEodHJhbnNhY3Rpb25EYXRhLCBpc1Rva2VuVHJhbnNhY3Rpb24pO1xuICBjb25zdCBzaG91bGRDYWxjdWxhdGVUb2tlblZhbHVlID0gQm9vbGVhbihcbiAgICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IHByb2Nlc3NpbmcgYSB0b2tlbiB0cmFuc2FjdGlvblxuICAgIGlzVG9rZW5UcmFuc2FjdGlvbiAmJlxuICAgICAgLy8gYW5kIHJhdyB0cmFuc2FjdGlvbiBkYXRhIHN0cmluZyBpcyBwcm92aWRlZFxuICAgICAgdHJhbnNhY3Rpb25EYXRhICYmXG4gICAgICAvLyBhbmQgYSB0b2tlbiBvYmplY3QgaGFzIGJlZW4gcHJvdmlkZWRcbiAgICAgIHRva2VuICYmXG4gICAgICAvLyBhbmQgd2UgYXJlIGFibGUgdG8gcGFyc2UgdGhlIHRva2VuIGRldGFpbHMgZnJvbSB0aGUgcmF3IGRhdGFcbiAgICAgIHRva2VuRGF0YT8uYXJncz8ubGVuZ3RoLFxuICApO1xuXG4gIGNvbnN0IGRpc3BsYXlWYWx1ZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICghc2hvdWxkQ2FsY3VsYXRlVG9rZW5WYWx1ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHRva2VuVmFsdWUgPSBnZXRUb2tlblZhbHVlUGFyYW0odG9rZW5EYXRhKTtcbiAgICByZXR1cm4gY2FsY1Rva2VuQW1vdW50KHRva2VuVmFsdWUsIHRva2VuLmRlY2ltYWxzKS50b1N0cmluZygxMCk7XG4gIH0sIFtzaG91bGRDYWxjdWxhdGVUb2tlblZhbHVlLCB0b2tlbkRhdGEsIHRva2VuXSk7XG5cbiAgcmV0dXJuIGRpc3BsYXlWYWx1ZTtcbn1cbiIsImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXRUb2tlbkRhdGEgfSBmcm9tICcuLi9oZWxwZXJzL3V0aWxzL3RyYW5zYWN0aW9ucy51dGlsJztcblxuLyoqXG4gKiB1c2VUb2tlbkRhdGFcbiAqIEdpdmVuIHRoZSBkYXRhIHN0cmluZyBmcm9tIHR4UGFyYW1zIHJldHVybiBhIGRlY29kZWQgb2JqZWN0IG9mIHRoZSBkZXRhaWxzIG9mIHRoZVxuICogdHJhbnNhY3Rpb24gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbdHJhbnNhY3Rpb25EYXRhXSAgICAgLSBSYXcgZGF0YSBzdHJpbmcgZnJvbSB0b2tlbiB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtib29sZWFufSBbaXNUb2tlblRyYW5zYWN0aW9uXSAtIER1ZSB0byB0aGUgbmF0dXJlIG9mIGhvb2tzLCBpdCBpc24ndCBwb3NzaWJsZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGNvbmRpdGlvbmFsbHkgY2FsbCB0aGlzIGhvb2suIFRoaXMgZmxhZyB3aWxsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2UgdGhpcyBob29rIHRvIHJldHVybiBudWxsIGlmIGl0IHNldCBhcyBmYWxzZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIGluZGljYXRlcyB0aGUgdHJhbnNhY3Rpb24gaXMgbm90IGFzc29jaWF0ZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIGEgdG9rZW4uXG4gKiBAcmV0dXJuIHtPYmplY3R9IC0gRGVjb2RlZCB0b2tlbiBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VUb2tlbkRhdGEodHJhbnNhY3Rpb25EYXRhLCBpc1Rva2VuVHJhbnNhY3Rpb24gPSB0cnVlKSB7XG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoIWlzVG9rZW5UcmFuc2FjdGlvbiB8fCAhdHJhbnNhY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGdldFRva2VuRGF0YSh0cmFuc2FjdGlvbkRhdGEpO1xuICB9LCBbaXNUb2tlblRyYW5zYWN0aW9uLCB0cmFuc2FjdGlvbkRhdGFdKTtcbn1cbiIsImltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgVFJBTlNBQ1RJT05fVFlQRVMgfSBmcm9tICcuLi8uLi9zaGFyZWQvY29uc3RhbnRzL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7XG4gIGlzU3dhcHNEZWZhdWx0VG9rZW5BZGRyZXNzLFxuICBpc1N3YXBzRGVmYXVsdFRva2VuU3ltYm9sLFxufSBmcm9tICcuLi8uLi9zaGFyZWQvbW9kdWxlcy9zd2Fwcy51dGlscyc7XG5pbXBvcnQgeyBnZXRTd2Fwc1Rva2Vuc1JlY2VpdmVkRnJvbVR4TWV0YSB9IGZyb20gJy4uL3BhZ2VzL3N3YXBzL3N3YXBzLnV0aWwnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudENoYWluSWQgfSBmcm9tICcuLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgdXNlVG9rZW5GaWF0QW1vdW50IH0gZnJvbSAnLi91c2VUb2tlbkZpYXRBbW91bnQnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN3YXBwZWRUb2tlblZhbHVlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3dhcFRva2VuVmFsdWUgLSBhIHByaW1hcnkgY3VycmVuY3kgc3RyaW5nIGZvcm1hdHRlZCBmb3IgZGlzcGxheVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN3YXBUb2tlbkZpYXRBbW91bnQgLSBhIHNlY29uZGFyeSBjdXJyZW5jeSBzdHJpbmcgZm9ybWF0dGVkIGZvciBkaXNwbGF5XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzVmlld2luZ1JlY2VpdmVkVG9rZW5Gcm9tU3dhcCAtIHRydWUgaWYgdXNlciBpcyBvbiB0aGUgYXNzZXQgcGFnZSBmb3IgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uL3JlY2VpdmVkIGFzc2V0IGluIGEgc3dhcC5cbiAqL1xuXG4vKipcbiAqIEEgU3dhcCB0cmFuc2FjdGlvbiBncm91cCdzIHByaW1hcnlUcmFuc2FjdGlvbiBjb250YWlucyBkZXRhaWxzIG9mIHRoZSBzd2FwLFxuICogaW5jbHVkaW5nIHRoZSBzb3VyY2UgKGZyb20pIGFuZCBkZXN0aW5hdGlvbiAodG8pIHRva2VuIHR5cGUgKEVUSCwgREFJLCBldGMuLilcbiAqIFdoZW4gdmlld2luZyBhbiBhc3NldCBwYWdlIHRoYXQgaXMgbm90IGZvciB0aGUgY3VycmVudCBjaGFpbidzIGRlZmF1bHQgdG9rZW4sIHdlXG4gKiBuZWVkIHRvIGRldGVybWluZSBpZiB0aGF0IGFzc2V0IGlzIHRoZSB0b2tlbiB0aGF0IHdhcyByZWNlaXZlZCAoZGVzdGluYXRpb24pIGZyb21cbiAqIHRoZSBzd2FwLiBJbiB0aGF0IGNpcmN1bXN0YW5jZSB3ZSB3b3VsZCB3YW50IHRvIHNob3cgdGhlIHByaW1hcnlDdXJyZW5jeSBpbiB0aGVcbiAqIGFjdGl2aXR5IGxpc3QgdGhhdCBpcyBtb3N0IHJlbGV2YW50IGZvciB0aGF0IHRva2VuICgtIDEwMDAgREFJLCBmb3IgZXhhbXBsZSwgd2hlblxuICogc3dhcHBpbmcgREFJIGZvciBFVEgpLlxuICogQHBhcmFtIHtpbXBvcnQoJy4uL3NlbGVjdG9ycycpLnRyYW5zYWN0aW9uR3JvdXB9IHRyYW5zYWN0aW9uR3JvdXAgLSBHcm91cCBvZiB0cmFuc2FjdGlvbnMgYnkgbm9uY2VcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3VzZVRva2VuRGlzcGxheVZhbHVlJykuVG9rZW59IGN1cnJlbnRBc3NldCAtIFRoZSBjdXJyZW50IGFzc2V0IHRoZSB1c2VyIGlzIGxvb2tpbmcgYXRcbiAqIEByZXR1cm5zIHtTd2FwcGVkVG9rZW5WYWx1ZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN3YXBwZWRUb2tlblZhbHVlKHRyYW5zYWN0aW9uR3JvdXAsIGN1cnJlbnRBc3NldCkge1xuICBjb25zdCB7IHN5bWJvbCwgZGVjaW1hbHMsIGFkZHJlc3MgfSA9IGN1cnJlbnRBc3NldDtcbiAgY29uc3QgeyBwcmltYXJ5VHJhbnNhY3Rpb24sIGluaXRpYWxUcmFuc2FjdGlvbiB9ID0gdHJhbnNhY3Rpb25Hcm91cDtcbiAgY29uc3QgeyB0eXBlIH0gPSBpbml0aWFsVHJhbnNhY3Rpb247XG4gIGNvbnN0IHsgZnJvbTogc2VuZGVyQWRkcmVzcyB9ID0gaW5pdGlhbFRyYW5zYWN0aW9uLnR4UGFyYW1zIHx8IHt9O1xuICBjb25zdCBjaGFpbklkID0gdXNlU2VsZWN0b3IoZ2V0Q3VycmVudENoYWluSWQpO1xuXG4gIGNvbnN0IGlzVmlld2luZ1JlY2VpdmVkVG9rZW5Gcm9tU3dhcCA9XG4gICAgY3VycmVudEFzc2V0Py5zeW1ib2wgPT09IHByaW1hcnlUcmFuc2FjdGlvbi5kZXN0aW5hdGlvblRva2VuU3ltYm9sIHx8XG4gICAgKGlzU3dhcHNEZWZhdWx0VG9rZW5BZGRyZXNzKGN1cnJlbnRBc3NldC5hZGRyZXNzLCBjaGFpbklkKSAmJlxuICAgICAgaXNTd2Fwc0RlZmF1bHRUb2tlblN5bWJvbChcbiAgICAgICAgcHJpbWFyeVRyYW5zYWN0aW9uLmRlc3RpbmF0aW9uVG9rZW5TeW1ib2wsXG4gICAgICAgIGNoYWluSWQsXG4gICAgICApKTtcblxuICBjb25zdCBzd2FwVG9rZW5WYWx1ZSA9XG4gICAgdHlwZSA9PT0gVFJBTlNBQ1RJT05fVFlQRVMuU1dBUCAmJiBpc1ZpZXdpbmdSZWNlaXZlZFRva2VuRnJvbVN3YXBcbiAgICAgID8gZ2V0U3dhcHNUb2tlbnNSZWNlaXZlZEZyb21UeE1ldGEoXG4gICAgICAgICAgcHJpbWFyeVRyYW5zYWN0aW9uLmRlc3RpbmF0aW9uVG9rZW5TeW1ib2wsXG4gICAgICAgICAgaW5pdGlhbFRyYW5zYWN0aW9uLFxuICAgICAgICAgIGFkZHJlc3MsXG4gICAgICAgICAgc2VuZGVyQWRkcmVzcyxcbiAgICAgICAgICBkZWNpbWFscyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgIClcbiAgICAgIDogdHlwZSA9PT0gVFJBTlNBQ1RJT05fVFlQRVMuU1dBUCAmJiBwcmltYXJ5VHJhbnNhY3Rpb24uc3dhcFRva2VuVmFsdWU7XG5cbiAgY29uc3QgaXNOZWdhdGl2ZSA9XG4gICAgdHlwZW9mIHN3YXBUb2tlblZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgPyBNYXRoLnNpZ24oc3dhcFRva2VuVmFsdWUpID09PSAtMVxuICAgICAgOiBmYWxzZTtcblxuICBjb25zdCBfc3dhcFRva2VuRmlhdEFtb3VudCA9IHVzZVRva2VuRmlhdEFtb3VudChcbiAgICBhZGRyZXNzLFxuICAgIHN3YXBUb2tlblZhbHVlIHx8ICcnLFxuICAgIHN5bWJvbCxcbiAgKTtcbiAgY29uc3Qgc3dhcFRva2VuRmlhdEFtb3VudCA9XG4gICAgc3dhcFRva2VuVmFsdWUgJiYgaXNWaWV3aW5nUmVjZWl2ZWRUb2tlbkZyb21Td2FwICYmIF9zd2FwVG9rZW5GaWF0QW1vdW50O1xuICByZXR1cm4ge1xuICAgIHN3YXBUb2tlblZhbHVlLFxuICAgIHN3YXBUb2tlbkZpYXRBbW91bnQsXG4gICAgaXNWaWV3aW5nUmVjZWl2ZWRUb2tlbkZyb21Td2FwLFxuICAgIGlzTmVnYXRpdmUsXG4gIH07XG59XG4iLCJpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHVzZVJvdXRlTWF0Y2ggfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGdldFRva2VucyB9IGZyb20gJy4uL2R1Y2tzL21ldGFtYXNrL21ldGFtYXNrJztcbmltcG9ydCB7IGdldEN1cnJlbnRDaGFpbklkIH0gZnJvbSAnLi4vc2VsZWN0b3JzJztcbmltcG9ydCB7IEFTU0VUX1JPVVRFIH0gZnJvbSAnLi4vaGVscGVycy9jb25zdGFudHMvcm91dGVzJztcbmltcG9ydCB7IGlzRXF1YWxDYXNlSW5zZW5zaXRpdmUgfSBmcm9tICcuLi9oZWxwZXJzL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHtcbiAgU1dBUFNfQ0hBSU5JRF9ERUZBVUxUX1RPS0VOX01BUCxcbiAgRVRIX1NXQVBTX1RPS0VOX09CSkVDVCxcbn0gZnJvbSAnLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9zd2Fwcyc7XG5cbi8qKlxuICogUmV0dXJucyBhIHRva2VuIG9iamVjdCBmb3IgdGhlIGFzc2V0IHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHZpZXdlZC5cbiAqIFdpbGwgcmV0dXJuIHRoZSBkZWZhdWx0IHRva2VuIG9iamVjdCBmb3IgdGhlIGN1cnJlbnQgY2hhaW4gd2hlbiB0aGVcbiAqIHVzZXIgaXMgdmlld2luZyBlaXRoZXIgdGhlIHByaW1hcnksIHVuZmlsdGVyZWQsIGFjdGl2aXR5IGxpc3Qgb3IgdGhlXG4gKiBkZWZhdWx0IHRva2VuIGFzc2V0IHBhZ2UuXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3VzZVRva2VuRGlzcGxheVZhbHVlJykuVG9rZW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VDdXJyZW50QXNzZXQoKSB7XG4gIC8vIFRvIGRldGVybWluZSB3aGljaCBwcmltYXJ5IGN1cnJlbmN5IHRvIGRpc3BsYXkgZm9yIHN3YXBzIHRyYW5zYWN0aW9ucyB3ZSBuZWVkIHRvIGJlIGF3YXJlXG4gIC8vIG9mIHdoaWNoIGFzc2V0LCBpZiBhbnksIHdlIGFyZSB2aWV3aW5nIGF0IHByZXNlbnRcbiAgY29uc3QgbWF0Y2ggPSB1c2VSb3V0ZU1hdGNoKHtcbiAgICBwYXRoOiBgJHtBU1NFVF9ST1VURX0vOmFzc2V0YCxcbiAgICBleGFjdDogdHJ1ZSxcbiAgICBzdHJpY3Q6IHRydWUsXG4gIH0pO1xuICBjb25zdCB0b2tlbkFkZHJlc3MgPSBtYXRjaD8ucGFyYW1zPy5hc3NldDtcbiAgY29uc3Qga25vd25Ub2tlbnMgPSB1c2VTZWxlY3RvcihnZXRUb2tlbnMpO1xuICBjb25zdCB0b2tlbiA9XG4gICAgdG9rZW5BZGRyZXNzICYmXG4gICAga25vd25Ub2tlbnMuZmluZCgoeyBhZGRyZXNzIH0pID0+XG4gICAgICBpc0VxdWFsQ2FzZUluc2Vuc2l0aXZlKGFkZHJlc3MsIHRva2VuQWRkcmVzcyksXG4gICAgKTtcbiAgY29uc3QgY2hhaW5JZCA9IHVzZVNlbGVjdG9yKGdldEN1cnJlbnRDaGFpbklkKTtcblxuICByZXR1cm4gKFxuICAgIHRva2VuID8/XG4gICAgKFNXQVBTX0NIQUlOSURfREVGQVVMVF9UT0tFTl9NQVBbY2hhaW5JZF0gfHwgRVRIX1NXQVBTX1RPS0VOX09CSkVDVClcbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQXBwcm92ZSBmcm9tICcuLi8uLi91aS9pY29uL2FwcHJvdmUtaWNvbi5jb21wb25lbnQnO1xuaW1wb3J0IEludGVyYWN0aW9uIGZyb20gJy4uLy4uL3VpL2ljb24vaW50ZXJhY3Rpb24taWNvbi5jb21wb25lbnQnO1xuaW1wb3J0IFJlY2VpdmUgZnJvbSAnLi4vLi4vdWkvaWNvbi9yZWNlaXZlLWljb24uY29tcG9uZW50JztcbmltcG9ydCBTZW5kIGZyb20gJy4uLy4uL3VpL2ljb24vc2VuZC1pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgU2lnbiBmcm9tICcuLi8uLi91aS9pY29uL3NpZ24taWNvbi5jb21wb25lbnQnO1xuaW1wb3J0IFN3YXAgZnJvbSAnLi4vLi4vdWkvaWNvbi9zd2FwLWljb24tZm9yLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7XG4gIFRSQU5TQUNUSU9OX0dST1VQX0NBVEVHT1JJRVMsXG4gIFRSQU5TQUNUSU9OX0dST1VQX1NUQVRVU0VTLFxuICBUUkFOU0FDVElPTl9TVEFUVVNFUyxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBjYXB0dXJlU2luZ2xlRXhjZXB0aW9uIH0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5cbmNvbnN0IElDT05fTUFQID0ge1xuICBbVFJBTlNBQ1RJT05fR1JPVVBfQ0FURUdPUklFUy5BUFBST1ZBTF06IEFwcHJvdmUsXG4gIFtUUkFOU0FDVElPTl9HUk9VUF9DQVRFR09SSUVTLklOVEVSQUNUSU9OXTogSW50ZXJhY3Rpb24sXG4gIFtUUkFOU0FDVElPTl9HUk9VUF9DQVRFR09SSUVTLlNFTkRdOiBTZW5kLFxuICBbVFJBTlNBQ1RJT05fR1JPVVBfQ0FURUdPUklFUy5TSUdOQVRVUkVfUkVRVUVTVF06IFNpZ24sXG4gIFtUUkFOU0FDVElPTl9HUk9VUF9DQVRFR09SSUVTLlJFQ0VJVkVdOiBSZWNlaXZlLFxuICBbVFJBTlNBQ1RJT05fR1JPVVBfQ0FURUdPUklFUy5TV0FQXTogU3dhcCxcbn07XG5cbmNvbnN0IEZBSUxfQ09MT1IgPSAnI0Q3M0E0OSc7XG5jb25zdCBQRU5ESU5HX0NPTE9SID0gJyM2QTczN0QnO1xuY29uc3QgT0tfQ09MT1IgPSAnIzJGODBFRCc7XG5cbmNvbnN0IENPTE9SX01BUCA9IHtcbiAgW1RSQU5TQUNUSU9OX0dST1VQX1NUQVRVU0VTLlBFTkRJTkddOiBQRU5ESU5HX0NPTE9SLFxuICBbVFJBTlNBQ1RJT05fU1RBVFVTRVMuVU5BUFBST1ZFRF06IFBFTkRJTkdfQ09MT1IsXG4gIFtUUkFOU0FDVElPTl9TVEFUVVNFUy5BUFBST1ZFRF06IFBFTkRJTkdfQ09MT1IsXG4gIFtUUkFOU0FDVElPTl9TVEFUVVNFUy5GQUlMRURdOiBGQUlMX0NPTE9SLFxuICBbVFJBTlNBQ1RJT05fU1RBVFVTRVMuUkVKRUNURURdOiBGQUlMX0NPTE9SLFxuICBbVFJBTlNBQ1RJT05fR1JPVVBfU1RBVFVTRVMuQ0FOQ0VMTEVEXTogRkFJTF9DT0xPUixcbiAgW1RSQU5TQUNUSU9OX1NUQVRVU0VTLkRST1BQRURdOiBGQUlMX0NPTE9SLFxuICBbVFJBTlNBQ1RJT05fU1RBVFVTRVMuU1VCTUlUVEVEXTogUEVORElOR19DT0xPUixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRyYW5zYWN0aW9uSWNvbih7IHN0YXR1cywgY2F0ZWdvcnkgfSkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgY29uc3QgY29sb3IgPSBDT0xPUl9NQVBbc3RhdHVzXSB8fCBPS19DT0xPUjtcbiAgY29uc3QgSWNvbiA9IElDT05fTUFQW2NhdGVnb3J5XTtcblxuICBpZiAoIUljb24pIHtcbiAgICBkaXNwYXRjaChcbiAgICAgIGNhcHR1cmVTaW5nbGVFeGNlcHRpb24oXG4gICAgICAgIGBUaGUgY2F0ZWdvcnkgcHJvcCBwYXNzZWQgdG8gVHJhbnNhY3Rpb25JY29uIGlzIG5vdCBzdXBwb3J0ZWQuIFRoZSBwcm9wIGlzOiAke2NhdGVnb3J5fWAsXG4gICAgICApLFxuICAgICk7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwidHJhbnNhY3Rpb24taWNvbl9fZ3JleS1jaXJjbGVcIiAvPjtcbiAgfVxuXG4gIHJldHVybiA8SWNvbiBjb2xvcj17Y29sb3J9IHNpemU9ezI4fSAvPjtcbn1cblxuVHJhbnNhY3Rpb25JY29uLnByb3BUeXBlcyA9IHtcbiAgc3RhdHVzOiBQcm9wVHlwZXMub25lT2YoW1xuICAgIFRSQU5TQUNUSU9OX0dST1VQX1NUQVRVU0VTLlBFTkRJTkcsXG4gICAgVFJBTlNBQ1RJT05fU1RBVFVTRVMuVU5BUFBST1ZFRCxcbiAgICBUUkFOU0FDVElPTl9TVEFUVVNFUy5BUFBST1ZFRCxcbiAgICBUUkFOU0FDVElPTl9TVEFUVVNFUy5GQUlMRUQsXG4gICAgVFJBTlNBQ1RJT05fU1RBVFVTRVMuUkVKRUNURUQsXG4gICAgVFJBTlNBQ1RJT05fR1JPVVBfU1RBVFVTRVMuQ0FOQ0VMTEVELFxuICAgIFRSQU5TQUNUSU9OX1NUQVRVU0VTLkRST1BQRUQsXG4gICAgVFJBTlNBQ1RJT05fU1RBVFVTRVMuQ09ORklSTUVELFxuICAgIFRSQU5TQUNUSU9OX1NUQVRVU0VTLlNVQk1JVFRFRCxcbiAgXSkuaXNSZXF1aXJlZCxcbiAgY2F0ZWdvcnk6IFByb3BUeXBlcy5vbmVPZihbXG4gICAgVFJBTlNBQ1RJT05fR1JPVVBfQ0FURUdPUklFUy5BUFBST1ZBTCxcbiAgICBUUkFOU0FDVElPTl9HUk9VUF9DQVRFR09SSUVTLklOVEVSQUNUSU9OLFxuICAgIFRSQU5TQUNUSU9OX0dST1VQX0NBVEVHT1JJRVMuU0VORCxcbiAgICBUUkFOU0FDVElPTl9HUk9VUF9DQVRFR09SSUVTLlNJR05BVFVSRV9SRVFVRVNULFxuICAgIFRSQU5TQUNUSU9OX0dST1VQX0NBVEVHT1JJRVMuUkVDRUlWRSxcbiAgICBUUkFOU0FDVElPTl9HUk9VUF9DQVRFR09SSUVTLlNXQVAsXG4gIF0pLmlzUmVxdWlyZWQsXG59O1xuIiwiaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCB7IGdldE1heGltdW1HYXNUb3RhbEluSGV4V2VpIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvZ2FzLnV0aWxzJztcbmltcG9ydCB7IGdldENvbnZlcnNpb25SYXRlIH0gZnJvbSAnLi4vLi4vLi4vZHVja3MvbWV0YW1hc2svbWV0YW1hc2snO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VJbmNyZW1lbnRlZEdhc0ZlZXMgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJbmNyZW1lbnRlZEdhc0ZlZXMnO1xuaW1wb3J0IHsgaXNCYWxhbmNlU3VmZmljaWVudCB9IGZyb20gJy4uLy4uLy4uL3BhZ2VzL3NlbmQvc2VuZC51dGlscyc7XG5pbXBvcnQgeyBnZXRTZWxlY3RlZEFjY291bnQgfSBmcm9tICcuLi8uLi8uLi9zZWxlY3RvcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDYW5jZWxCdXR0b24oe1xuICBjYW5jZWxUcmFuc2FjdGlvbixcbiAgdHJhbnNhY3Rpb24sXG4gIGRldGFpbHNNb2RhbCxcbn0pIHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG5cbiAgY29uc3QgY3VzdG9tQ2FuY2VsR2FzU2V0dGluZ3MgPSB1c2VJbmNyZW1lbnRlZEdhc0ZlZXModHJhbnNhY3Rpb24pO1xuXG4gIGNvbnN0IHNlbGVjdGVkQWNjb3VudCA9IHVzZVNlbGVjdG9yKGdldFNlbGVjdGVkQWNjb3VudCk7XG4gIGNvbnN0IGNvbnZlcnNpb25SYXRlID0gdXNlU2VsZWN0b3IoZ2V0Q29udmVyc2lvblJhdGUpO1xuXG4gIGNvbnN0IGhhc0Vub3VnaENhbmNlbEdhcyA9IGlzQmFsYW5jZVN1ZmZpY2llbnQoe1xuICAgIGFtb3VudDogJzB4MCcsXG4gICAgZ2FzVG90YWw6IGdldE1heGltdW1HYXNUb3RhbEluSGV4V2VpKGN1c3RvbUNhbmNlbEdhc1NldHRpbmdzKSxcbiAgICBiYWxhbmNlOiBzZWxlY3RlZEFjY291bnQuYmFsYW5jZSxcbiAgICBjb252ZXJzaW9uUmF0ZSxcbiAgfSk7XG5cbiAgY29uc3QgYnRuID0gKFxuICAgIDxCdXR0b25cbiAgICAgIG9uQ2xpY2s9e2NhbmNlbFRyYW5zYWN0aW9ufVxuICAgICAgdHlwZT1cInNlY29uZGFyeVwiXG4gICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoe1xuICAgICAgICAndHJhbnNhY3Rpb24tbGlzdC1pdGVtX19oZWFkZXItYnV0dG9uJzogIWRldGFpbHNNb2RhbCxcbiAgICAgICAgJ3RyYW5zYWN0aW9uLWxpc3QtaXRlbS1kZXRhaWxzX19oZWFkZXItYnV0dG9uLXJvdW5kZWQtYnV0dG9uJzogZGV0YWlsc01vZGFsLFxuICAgICAgfSl9XG4gICAgICBkaXNhYmxlZD17IWhhc0Vub3VnaENhbmNlbEdhc31cbiAgICA+XG4gICAgICB7dCgnY2FuY2VsJyl9XG4gICAgPC9CdXR0b24+XG4gICk7XG4gIHJldHVybiBoYXNFbm91Z2hDYW5jZWxHYXMgPyAoXG4gICAgYnRuXG4gICkgOiAoXG4gICAgPFRvb2x0aXBcbiAgICAgIHRpdGxlPXt0KCdub3RFbm91Z2hHYXMnKX1cbiAgICAgIGRhdGEtdGVzdGlkPVwibm90LWVub3VnaC1nYXNfX3Rvb2x0aXBcIlxuICAgICAgcG9zaXRpb249XCJib3R0b21cIlxuICAgID5cbiAgICAgIDxkaXY+e2J0bn08L2Rpdj5cbiAgICA8L1Rvb2x0aXA+XG4gICk7XG59XG5cbkNhbmNlbEJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIHRyYW5zYWN0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBjYW5jZWxUcmFuc2FjdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGRldGFpbHNNb2RhbDogUHJvcFR5cGVzLmJvb2wsXG59O1xuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHRyeVJldmVyc2VSZXNvbHZlQWRkcmVzcyB9IGZyb20gJy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHtcbiAgZ2V0QWRkcmVzc0Jvb2ssXG4gIGdldFJwY1ByZWZzRm9yQ3VycmVudFByb3ZpZGVyLFxufSBmcm9tICcuLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgdG9DaGVja3N1bUhleEFkZHJlc3MgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9oZXhzdHJpbmctdXRpbHMnO1xuaW1wb3J0IFRyYW5zYWN0aW9uTGlzdEl0ZW1EZXRhaWxzIGZyb20gJy4vdHJhbnNhY3Rpb24tbGlzdC1pdGVtLWRldGFpbHMuY29tcG9uZW50JztcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBvd25Qcm9wcykgPT4ge1xuICBjb25zdCB7IG1ldGFtYXNrIH0gPSBzdGF0ZTtcbiAgY29uc3QgeyBlbnNSZXNvbHV0aW9uc0J5QWRkcmVzcyB9ID0gbWV0YW1hc2s7XG4gIGNvbnN0IHsgcmVjaXBpZW50QWRkcmVzcywgc2VuZGVyQWRkcmVzcyB9ID0gb3duUHJvcHM7XG4gIGxldCByZWNpcGllbnRFbnM7XG4gIGlmIChyZWNpcGllbnRBZGRyZXNzKSB7XG4gICAgY29uc3QgYWRkcmVzcyA9IHRvQ2hlY2tzdW1IZXhBZGRyZXNzKHJlY2lwaWVudEFkZHJlc3MpO1xuICAgIHJlY2lwaWVudEVucyA9IGVuc1Jlc29sdXRpb25zQnlBZGRyZXNzW2FkZHJlc3NdIHx8ICcnO1xuICB9XG4gIGNvbnN0IGFkZHJlc3NCb29rID0gZ2V0QWRkcmVzc0Jvb2soc3RhdGUpO1xuXG4gIGNvbnN0IGdldE5pY2tOYW1lID0gKGFkZHJlc3MpID0+IHtcbiAgICBjb25zdCBlbnRyeSA9IGFkZHJlc3NCb29rLmZpbmQoKGNvbnRhY3QpID0+IHtcbiAgICAgIHJldHVybiBhZGRyZXNzLnRvTG93ZXJDYXNlKCkgPT09IGNvbnRhY3QuYWRkcmVzcy50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiAoZW50cnkgJiYgZW50cnkubmFtZSkgfHwgJyc7XG4gIH07XG4gIGNvbnN0IHJwY1ByZWZzID0gZ2V0UnBjUHJlZnNGb3JDdXJyZW50UHJvdmlkZXIoc3RhdGUpO1xuXG4gIHJldHVybiB7XG4gICAgcnBjUHJlZnMsXG4gICAgcmVjaXBpZW50RW5zLFxuICAgIHNlbmRlck5pY2tuYW1lOiBnZXROaWNrTmFtZShzZW5kZXJBZGRyZXNzKSxcbiAgICByZWNpcGllbnROaWNrbmFtZTogcmVjaXBpZW50QWRkcmVzcyA/IGdldE5pY2tOYW1lKHJlY2lwaWVudEFkZHJlc3MpIDogbnVsbCxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHRyeVJldmVyc2VSZXNvbHZlQWRkcmVzczogKGFkZHJlc3MpID0+IHtcbiAgICAgIHJldHVybiBkaXNwYXRjaCh0cnlSZXZlcnNlUmVzb2x2ZUFkZHJlc3MoYWRkcmVzcykpO1xuICAgIH0sXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wcyxcbikoVHJhbnNhY3Rpb25MaXN0SXRlbURldGFpbHMpO1xuIiwidmFyIFFSTWF0aCA9IHtcblxuXHRnbG9nIDogZnVuY3Rpb24obikge1xuXHRcblx0XHRpZiAobiA8IDEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImdsb2coXCIgKyBuICsgXCIpXCIpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gUVJNYXRoLkxPR19UQUJMRVtuXTtcblx0fSxcblx0XG5cdGdleHAgOiBmdW5jdGlvbihuKSB7XG5cdFxuXHRcdHdoaWxlIChuIDwgMCkge1xuXHRcdFx0biArPSAyNTU7XG5cdFx0fVxuXHRcblx0XHR3aGlsZSAobiA+PSAyNTYpIHtcblx0XHRcdG4gLT0gMjU1O1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIFFSTWF0aC5FWFBfVEFCTEVbbl07XG5cdH0sXG5cdFxuXHRFWFBfVEFCTEUgOiBuZXcgQXJyYXkoMjU2KSxcblx0XG5cdExPR19UQUJMRSA6IG5ldyBBcnJheSgyNTYpXG5cbn07XG5cdFxuZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0UVJNYXRoLkVYUF9UQUJMRVtpXSA9IDEgPDwgaTtcbn1cbmZvciAodmFyIGkgPSA4OyBpIDwgMjU2OyBpKyspIHtcblx0UVJNYXRoLkVYUF9UQUJMRVtpXSA9IFFSTWF0aC5FWFBfVEFCTEVbaSAtIDRdXG5cdFx0XiBRUk1hdGguRVhQX1RBQkxFW2kgLSA1XVxuXHRcdF4gUVJNYXRoLkVYUF9UQUJMRVtpIC0gNl1cblx0XHReIFFSTWF0aC5FWFBfVEFCTEVbaSAtIDhdO1xufVxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTU7IGkrKykge1xuXHRRUk1hdGguTE9HX1RBQkxFW1FSTWF0aC5FWFBfVEFCTEVbaV0gXSA9IGk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUVJNYXRoO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cdE1PREVfTlVNQkVSIDpcdFx0MSA8PCAwLFxuXHRNT0RFX0FMUEhBX05VTSA6IFx0MSA8PCAxLFxuXHRNT0RFXzhCSVRfQllURSA6IFx0MSA8PCAyLFxuXHRNT0RFX0tBTkpJIDpcdFx0MSA8PCAzXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNhbkVudW1lcmF0ZURldmljZXMgPSBleHBvcnRzLmhhc05hdmlnYXRvciA9IHZvaWQgMDtcbi8qKlxuICogSWYgbmF2aWdhdG9yIGlzIHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGhhc05hdmlnYXRvcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmhhc05hdmlnYXRvciA9IGhhc05hdmlnYXRvcjtcbi8qKlxuICogSWYgbWVkaWFEZXZpY2VzIHVuZGVyIG5hdmlnYXRvciBpcyBzdXBwb3J0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzTWVkaWFEZXZpY2VzU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiBoYXNOYXZpZ2F0b3IoKSAmJiAhIW5hdmlnYXRvci5tZWRpYURldmljZXM7XG59XG4vKipcbiAqIElmIGVudW1lcmF0ZURldmljZXMgdW5kZXIgbmF2aWdhdG9yIGlzIHN1cHBvcnRlZC5cbiAqL1xuZnVuY3Rpb24gY2FuRW51bWVyYXRlRGV2aWNlcygpIHtcbiAgICByZXR1cm4gISEoaXNNZWRpYURldmljZXNTdXBwb3J0ZWQoKSAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMpO1xufVxuZXhwb3J0cy5jYW5FbnVtZXJhdGVEZXZpY2VzID0gY2FuRW51bWVyYXRlRGV2aWNlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hdmlnYXRvci11dGlscy5qcy5tYXAiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBCdXR0b25Hcm91cCBmcm9tICcuLi8uLi8uLi91aS9idXR0b24tZ3JvdXAnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi8uLi91aS9idXR0b24nO1xuaW1wb3J0IHsgR0FTX0VTVElNQVRFX1RZUEVTIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvY29tbW9uJztcblxuY29uc3QgR0FTX09CSkVDVF9QUk9QVFlQRVNfU0hBUEUgPSB7XG4gIGdhc0VzdGltYXRlVHlwZTogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC52YWx1ZXMoR0FTX0VTVElNQVRFX1RZUEVTKSlcbiAgICAuaXNSZXF1aXJlZCxcbiAgZmVlSW5QcmltYXJ5Q3VycmVuY3k6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZlZUluU2Vjb25kYXJ5Q3VycmVuY3k6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRpbWVFc3RpbWF0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcHJpY2VJbkhleFdlaTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhc1ByaWNlQnV0dG9uR3JvdXAgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgYnV0dG9uRGF0YUxvYWRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZWZhdWx0QWN0aXZlQnV0dG9uSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2FzQnV0dG9uSW5mbzogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICBQcm9wVHlwZXMuc2hhcGUoR0FTX09CSkVDVF9QUk9QVFlQRVNfU0hBUEUpLFxuICAgICksXG4gICAgaGFuZGxlR2FzUHJpY2VTZWxlY3Rpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIG5ld0FjdGl2ZUJ1dHRvbkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG5vQnV0dG9uQWN0aXZlQnlEZWZhdWx0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93Q2hlY2s6IFByb3BUeXBlcy5ib29sLFxuICB9O1xuXG4gIGdhc0VzdGltYXRlVHlwZUxhYmVsKGdhc0VzdGltYXRlVHlwZSkge1xuICAgIGlmIChnYXNFc3RpbWF0ZVR5cGUgPT09IEdBU19FU1RJTUFURV9UWVBFUy5TTE9XKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnQoJ3Nsb3cnKTtcbiAgICB9IGVsc2UgaWYgKGdhc0VzdGltYXRlVHlwZSA9PT0gR0FTX0VTVElNQVRFX1RZUEVTLkFWRVJBR0UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQudCgnYXZlcmFnZScpO1xuICAgIH0gZWxzZSBpZiAoZ2FzRXN0aW1hdGVUeXBlID09PSBHQVNfRVNUSU1BVEVfVFlQRVMuRkFTVCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC50KCdmYXN0Jyk7XG4gICAgfSBlbHNlIGlmIChnYXNFc3RpbWF0ZVR5cGUgPT09IEdBU19FU1RJTUFURV9UWVBFUy5GQVNURVNUKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnQoJ2Zhc3Rlc3QnKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnJlY29nbml6ZWQgZ2FzIGVzdGltYXRlIHR5cGU6ICR7Z2FzRXN0aW1hdGVUeXBlfWApO1xuICB9XG5cbiAgcmVuZGVyQnV0dG9uQ29udGVudChcbiAgICB7XG4gICAgICBnYXNFc3RpbWF0ZVR5cGUsXG4gICAgICBmZWVJblByaW1hcnlDdXJyZW5jeSxcbiAgICAgIGZlZUluU2Vjb25kYXJ5Q3VycmVuY3ksXG4gICAgICB0aW1lRXN0aW1hdGUsXG4gICAgfSxcbiAgICB7IGNsYXNzTmFtZSwgc2hvd0NoZWNrIH0sXG4gICkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICB7Z2FzRXN0aW1hdGVUeXBlICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfV9fbGFiZWxgfT5cbiAgICAgICAgICAgIHt0aGlzLmdhc0VzdGltYXRlVHlwZUxhYmVsKGdhc0VzdGltYXRlVHlwZSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIHt0aW1lRXN0aW1hdGUgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9X190aW1lLWVzdGltYXRlYH0+e3RpbWVFc3RpbWF0ZX08L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAge2ZlZUluUHJpbWFyeUN1cnJlbmN5ICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfV9fcHJpbWFyeS1jdXJyZW5jeWB9PlxuICAgICAgICAgICAge2ZlZUluUHJpbWFyeUN1cnJlbmN5fVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICB7ZmVlSW5TZWNvbmRhcnlDdXJyZW5jeSAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2NsYXNzTmFtZX1fX3NlY29uZGFyeS1jdXJyZW5jeWB9PlxuICAgICAgICAgICAge2ZlZUluU2Vjb25kYXJ5Q3VycmVuY3l9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIHtzaG93Q2hlY2sgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uLWNoZWNrLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNoZWNrIGZhLXNtXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJCdXR0b24oXG4gICAgeyBwcmljZUluSGV4V2VpLCAuLi5yZW5kZXJhYmxlR2FzSW5mbyB9LFxuICAgIHtcbiAgICAgIGJ1dHRvbkRhdGFMb2FkaW5nOiBfLFxuICAgICAgaGFuZGxlR2FzUHJpY2VTZWxlY3Rpb24sXG4gICAgICAuLi5idXR0b25Db250ZW50UHJvcHNBbmRGbGFnc1xuICAgIH0sXG4gICAgaW5kZXgsXG4gICkge1xuICAgIHJldHVybiAoXG4gICAgICA8QnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgaGFuZGxlR2FzUHJpY2VTZWxlY3Rpb24oe1xuICAgICAgICAgICAgZ2FzUHJpY2U6IHByaWNlSW5IZXhXZWksXG4gICAgICAgICAgICBnYXNFc3RpbWF0ZVR5cGU6IHJlbmRlcmFibGVHYXNJbmZvLmdhc0VzdGltYXRlVHlwZSxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGtleT17YGdhcy1wcmljZS1idXR0b24tJHtpbmRleH1gfVxuICAgICAgPlxuICAgICAgICB7dGhpcy5yZW5kZXJCdXR0b25Db250ZW50KFxuICAgICAgICAgIHJlbmRlcmFibGVHYXNJbmZvLFxuICAgICAgICAgIGJ1dHRvbkNvbnRlbnRQcm9wc0FuZEZsYWdzLFxuICAgICAgICApfVxuICAgICAgPC9CdXR0b24+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBnYXNCdXR0b25JbmZvLFxuICAgICAgZGVmYXVsdEFjdGl2ZUJ1dHRvbkluZGV4ID0gMSxcbiAgICAgIG5ld0FjdGl2ZUJ1dHRvbkluZGV4LFxuICAgICAgbm9CdXR0b25BY3RpdmVCeURlZmF1bHQgPSBmYWxzZSxcbiAgICAgIGJ1dHRvbkRhdGFMb2FkaW5nLFxuICAgICAgLi4uYnV0dG9uUHJvcHNBbmRGbGFnc1xuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIGJ1dHRvbkRhdGFMb2FkaW5nID8gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2J1dHRvblByb3BzQW5kRmxhZ3MuY2xhc3NOYW1lfV9fbG9hZGluZy1jb250YWluZXJgfT5cbiAgICAgICAge3RoaXMuY29udGV4dC50KCdsb2FkaW5nJyl9XG4gICAgICA8L2Rpdj5cbiAgICApIDogKFxuICAgICAgPEJ1dHRvbkdyb3VwXG4gICAgICAgIGNsYXNzTmFtZT17YnV0dG9uUHJvcHNBbmRGbGFncy5jbGFzc05hbWV9XG4gICAgICAgIGRlZmF1bHRBY3RpdmVCdXR0b25JbmRleD17ZGVmYXVsdEFjdGl2ZUJ1dHRvbkluZGV4fVxuICAgICAgICBuZXdBY3RpdmVCdXR0b25JbmRleD17bmV3QWN0aXZlQnV0dG9uSW5kZXh9XG4gICAgICAgIG5vQnV0dG9uQWN0aXZlQnlEZWZhdWx0PXtub0J1dHRvbkFjdGl2ZUJ5RGVmYXVsdH1cbiAgICAgID5cbiAgICAgICAge2dhc0J1dHRvbkluZm8ubWFwKChvYmosIGluZGV4KSA9PlxuICAgICAgICAgIHRoaXMucmVuZGVyQnV0dG9uKG9iaiwgYnV0dG9uUHJvcHNBbmRGbGFncywgaW5kZXgpLFxuICAgICAgICApfVxuICAgICAgPC9CdXR0b25Hcm91cD5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBldGhlcnMgfSBmcm9tICdldGhlcnMnO1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL3RleHQtZmllbGQnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL2J1dHRvbic7XG5pbXBvcnQge1xuICBJTklUSUFMSVpFX1NFTEVDVF9BQ1RJT05fUk9VVEUsXG4gIElOSVRJQUxJWkVfRU5EX09GX0ZMT1dfUk9VVEUsXG59IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL3JvdXRlcyc7XG5pbXBvcnQgeyBjbGVhckNsaXBib2FyZCB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5cbmNvbnN0IHsgaXNWYWxpZE1uZW1vbmljIH0gPSBldGhlcnMudXRpbHM7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltcG9ydFdpdGhTZWVkUGhyYXNlIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbWV0cmljc0V2ZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgb25TdWJtaXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0U2VlZFBocmFzZUJhY2tlZFVwOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBpbml0aWFsaXplVGhyZWVCb3g6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIHNlZWRQaHJhc2U6ICcnLFxuICAgIHNob3dTZWVkUGhyYXNlOiBmYWxzZSxcbiAgICBwYXNzd29yZDogJycsXG4gICAgY29uZmlybVBhc3N3b3JkOiAnJyxcbiAgICBzZWVkUGhyYXNlRXJyb3I6ICcnLFxuICAgIHBhc3N3b3JkRXJyb3I6ICcnLFxuICAgIGNvbmZpcm1QYXNzd29yZEVycm9yOiAnJyxcbiAgICB0ZXJtc0NoZWNrZWQ6IGZhbHNlLFxuICB9O1xuXG4gIHBhcnNlU2VlZFBocmFzZSA9IChzZWVkUGhyYXNlKSA9PlxuICAgIChzZWVkUGhyYXNlIHx8ICcnKS50cmltKCkudG9Mb3dlckNhc2UoKS5tYXRjaCgvXFx3Ky9ndSk/LmpvaW4oJyAnKSB8fCAnJztcblxuICBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuX29uQmVmb3JlVW5sb2FkID0gKCkgPT5cbiAgICAgIHRoaXMuY29udGV4dC5tZXRyaWNzRXZlbnQoe1xuICAgICAgICBldmVudE9wdHM6IHtcbiAgICAgICAgICBjYXRlZ29yeTogJ09uYm9hcmRpbmcnLFxuICAgICAgICAgIGFjdGlvbjogJ0ltcG9ydCBTZWVkIFBocmFzZScsXG4gICAgICAgICAgbmFtZTogJ0Nsb3NlIHdpbmRvdyBvbiBpbXBvcnQgc2NyZWVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgY3VzdG9tVmFyaWFibGVzOiB7XG4gICAgICAgICAgZXJyb3JMYWJlbDogJ1NlZWQgUGhyYXNlIEVycm9yJyxcbiAgICAgICAgICBlcnJvck1lc3NhZ2U6IHRoaXMuc3RhdGUuc2VlZFBocmFzZUVycm9yLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMuX29uQmVmb3JlVW5sb2FkKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB0aGlzLl9vbkJlZm9yZVVubG9hZCk7XG4gIH1cblxuICBoYW5kbGVTZWVkUGhyYXNlQ2hhbmdlKHNlZWRQaHJhc2UpIHtcbiAgICBsZXQgc2VlZFBocmFzZUVycm9yID0gJyc7XG5cbiAgICBpZiAoc2VlZFBocmFzZSkge1xuICAgICAgY29uc3QgcGFyc2VkU2VlZFBocmFzZSA9IHRoaXMucGFyc2VTZWVkUGhyYXNlKHNlZWRQaHJhc2UpO1xuICAgICAgY29uc3Qgd29yZENvdW50ID0gcGFyc2VkU2VlZFBocmFzZS5zcGxpdCgvXFxzL3UpLmxlbmd0aDtcbiAgICAgIGlmICh3b3JkQ291bnQgJSAzICE9PSAwIHx8IHdvcmRDb3VudCA+IDI0IHx8IHdvcmRDb3VudCA8IDEyKSB7XG4gICAgICAgIHNlZWRQaHJhc2VFcnJvciA9IHRoaXMuY29udGV4dC50KCdzZWVkUGhyYXNlUmVxJyk7XG4gICAgICB9IGVsc2UgaWYgKCFpc1ZhbGlkTW5lbW9uaWMocGFyc2VkU2VlZFBocmFzZSkpIHtcbiAgICAgICAgc2VlZFBocmFzZUVycm9yID0gdGhpcy5jb250ZXh0LnQoJ2ludmFsaWRTZWVkUGhyYXNlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlZWRQaHJhc2UsIHNlZWRQaHJhc2VFcnJvciB9KTtcbiAgfVxuXG4gIGhhbmRsZVBhc3N3b3JkQ2hhbmdlKHBhc3N3b3JkKSB7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4ge1xuICAgICAgY29uc3QgeyBjb25maXJtUGFzc3dvcmQgfSA9IHN0YXRlO1xuICAgICAgbGV0IGNvbmZpcm1QYXNzd29yZEVycm9yID0gJyc7XG4gICAgICBsZXQgcGFzc3dvcmRFcnJvciA9ICcnO1xuXG4gICAgICBpZiAocGFzc3dvcmQgJiYgcGFzc3dvcmQubGVuZ3RoIDwgOCkge1xuICAgICAgICBwYXNzd29yZEVycm9yID0gdCgncGFzc3dvcmROb3RMb25nRW5vdWdoJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maXJtUGFzc3dvcmQgJiYgcGFzc3dvcmQgIT09IGNvbmZpcm1QYXNzd29yZCkge1xuICAgICAgICBjb25maXJtUGFzc3dvcmRFcnJvciA9IHQoJ3Bhc3N3b3Jkc0RvbnRNYXRjaCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgcGFzc3dvcmRFcnJvcixcbiAgICAgICAgY29uZmlybVBhc3N3b3JkRXJyb3IsXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlQ29uZmlybVBhc3N3b3JkQ2hhbmdlKGNvbmZpcm1QYXNzd29yZCkge1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+IHtcbiAgICAgIGNvbnN0IHsgcGFzc3dvcmQgfSA9IHN0YXRlO1xuICAgICAgbGV0IGNvbmZpcm1QYXNzd29yZEVycm9yID0gJyc7XG5cbiAgICAgIGlmIChwYXNzd29yZCAhPT0gY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgIGNvbmZpcm1QYXNzd29yZEVycm9yID0gdCgncGFzc3dvcmRzRG9udE1hdGNoJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbmZpcm1QYXNzd29yZCxcbiAgICAgICAgY29uZmlybVBhc3N3b3JkRXJyb3IsXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlSW1wb3J0ID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IHBhc3N3b3JkLCBzZWVkUGhyYXNlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtcbiAgICAgIGhpc3RvcnksXG4gICAgICBvblN1Ym1pdCxcbiAgICAgIHNldFNlZWRQaHJhc2VCYWNrZWRVcCxcbiAgICAgIGluaXRpYWxpemVUaHJlZUJveCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBvblN1Ym1pdChwYXNzd29yZCwgdGhpcy5wYXJzZVNlZWRQaHJhc2Uoc2VlZFBocmFzZSkpO1xuICAgICAgdGhpcy5jb250ZXh0Lm1ldHJpY3NFdmVudCh7XG4gICAgICAgIGV2ZW50T3B0czoge1xuICAgICAgICAgIGNhdGVnb3J5OiAnT25ib2FyZGluZycsXG4gICAgICAgICAgYWN0aW9uOiAnSW1wb3J0IFNlZWQgUGhyYXNlJyxcbiAgICAgICAgICBuYW1lOiAnSW1wb3J0IENvbXBsZXRlJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBzZXRTZWVkUGhyYXNlQmFja2VkVXAodHJ1ZSkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGluaXRpYWxpemVUaHJlZUJveCgpO1xuICAgICAgICBoaXN0b3J5LnJlcGxhY2UoSU5JVElBTElaRV9FTkRfT0ZfRkxPV19ST1VURSk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlZWRQaHJhc2VFcnJvcjogZXJyb3IubWVzc2FnZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgaXNWYWxpZCgpIHtcbiAgICBjb25zdCB7XG4gICAgICBzZWVkUGhyYXNlLFxuICAgICAgcGFzc3dvcmQsXG4gICAgICBjb25maXJtUGFzc3dvcmQsXG4gICAgICBwYXNzd29yZEVycm9yLFxuICAgICAgY29uZmlybVBhc3N3b3JkRXJyb3IsXG4gICAgICBzZWVkUGhyYXNlRXJyb3IsXG4gICAgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoXG4gICAgICAhcGFzc3dvcmQgfHxcbiAgICAgICFjb25maXJtUGFzc3dvcmQgfHxcbiAgICAgICFzZWVkUGhyYXNlIHx8XG4gICAgICBwYXNzd29yZCAhPT0gY29uZmlybVBhc3N3b3JkXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IDgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gIXBhc3N3b3JkRXJyb3IgJiYgIWNvbmZpcm1QYXNzd29yZEVycm9yICYmICFzZWVkUGhyYXNlRXJyb3I7XG4gIH1cblxuICBvblRlcm1zS2V5UHJlc3MgPSAoeyBrZXkgfSkgPT4ge1xuICAgIGlmIChrZXkgPT09ICcgJyB8fCBrZXkgPT09ICdFbnRlcicpIHtcbiAgICAgIHRoaXMudG9nZ2xlVGVybXNDaGVjaygpO1xuICAgIH1cbiAgfTtcblxuICB0b2dnbGVUZXJtc0NoZWNrID0gKCkgPT4ge1xuICAgIHRoaXMuY29udGV4dC5tZXRyaWNzRXZlbnQoe1xuICAgICAgZXZlbnRPcHRzOiB7XG4gICAgICAgIGNhdGVnb3J5OiAnT25ib2FyZGluZycsXG4gICAgICAgIGFjdGlvbjogJ0ltcG9ydCBTZWVkIFBocmFzZScsXG4gICAgICAgIG5hbWU6ICdDaGVjayBUb1MnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLnNldFN0YXRlKChwcmV2U3RhdGUpID0+ICh7XG4gICAgICB0ZXJtc0NoZWNrZWQ6ICFwcmV2U3RhdGUudGVybXNDaGVja2VkLFxuICAgIH0pKTtcbiAgfTtcblxuICB0b2dnbGVTaG93U2VlZFBocmFzZSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKCh7IHNob3dTZWVkUGhyYXNlIH0pID0+ICh7XG4gICAgICBzaG93U2VlZFBocmFzZTogIXNob3dTZWVkUGhyYXNlLFxuICAgIH0pKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3Qge1xuICAgICAgc2VlZFBocmFzZUVycm9yLFxuICAgICAgc2hvd1NlZWRQaHJhc2UsXG4gICAgICBwYXNzd29yZEVycm9yLFxuICAgICAgY29uZmlybVBhc3N3b3JkRXJyb3IsXG4gICAgICB0ZXJtc0NoZWNrZWQsXG4gICAgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGZvcm0gY2xhc3NOYW1lPVwiZmlyc3QtdGltZS1mbG93X19mb3JtXCIgb25TdWJtaXQ9e3RoaXMuaGFuZGxlSW1wb3J0fT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaXJzdC10aW1lLWZsb3dfX2NyZWF0ZS1iYWNrXCI+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgdGhpcy5jb250ZXh0Lm1ldHJpY3NFdmVudCh7XG4gICAgICAgICAgICAgICAgZXZlbnRPcHRzOiB7XG4gICAgICAgICAgICAgICAgICBjYXRlZ29yeTogJ09uYm9hcmRpbmcnLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnSW1wb3J0IFNlZWQgUGhyYXNlJyxcbiAgICAgICAgICAgICAgICAgIG5hbWU6ICdHbyBCYWNrIGZyb20gT25ib2FyZGluZyBJbXBvcnQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3VzdG9tVmFyaWFibGVzOiB7XG4gICAgICAgICAgICAgICAgICBlcnJvckxhYmVsOiAnU2VlZCBQaHJhc2UgRXJyb3InLFxuICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBzZWVkUGhyYXNlRXJyb3IsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKElOSVRJQUxJWkVfU0VMRUNUX0FDVElPTl9ST1VURSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgaHJlZj1cIiNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtgPCAke3QoJ2JhY2snKX1gfVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlyc3QtdGltZS1mbG93X19oZWFkZXJcIj5cbiAgICAgICAgICB7dCgnaW1wb3J0QWNjb3VudFNlZWRQaHJhc2UnKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlyc3QtdGltZS1mbG93X190ZXh0LWJsb2NrXCI+e3QoJ3NlY3JldFBocmFzZScpfTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpcnN0LXRpbWUtZmxvd19fdGV4dGFyZWEtd3JhcHBlclwiPlxuICAgICAgICAgIDxsYWJlbD57dCgnc2VjcmV0UmVjb3ZlcnlQaHJhc2UnKX08L2xhYmVsPlxuICAgICAgICAgIHtzaG93U2VlZFBocmFzZSA/IChcbiAgICAgICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmaXJzdC10aW1lLWZsb3dfX3RleHRhcmVhXCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLmhhbmRsZVNlZWRQaHJhc2VDaGFuZ2UoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICBvblBhc3RlPXtjbGVhckNsaXBib2FyZH1cbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2VlZFBocmFzZX1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ3NlZWRQaHJhc2VQbGFjZWhvbGRlcicpfVxuICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmaXJzdC10aW1lLWZsb3dfX3RleHRhcmVhIGZpcnN0LXRpbWUtZmxvd19fc2VlZHBocmFzZVwiXG4gICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5oYW5kbGVTZWVkUGhyYXNlQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2VlZFBocmFzZX1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ3NlZWRQaHJhc2VQbGFjZWhvbGRlclBhc3RlJyl9XG4gICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICAgIG9uUGFzdGU9e2NsZWFyQ2xpcGJvYXJkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtzZWVkUGhyYXNlRXJyb3IgPyAoXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJlcnJvclwiPntzZWVkUGhyYXNlRXJyb3J9PC9zcGFuPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImZpcnN0LXRpbWUtZmxvd19fY2hlY2tib3gtY29udGFpbmVyXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlU2hvd1NlZWRQaHJhc2V9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmaXJzdC10aW1lLWZsb3dfX2NoZWNrYm94XCJcbiAgICAgICAgICAgICAgdGFiSW5kZXg9XCIwXCJcbiAgICAgICAgICAgICAgcm9sZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgb25LZXlQcmVzcz17dGhpcy50b2dnbGVTaG93U2VlZFBocmFzZX1cbiAgICAgICAgICAgICAgYXJpYS1jaGVja2VkPXtzaG93U2VlZFBocmFzZX1cbiAgICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwiZnRmLWNoazEtbGFiZWxcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7c2hvd1NlZWRQaHJhc2UgPyA8aSBjbGFzc05hbWU9XCJmYSBmYS1jaGVjayBmYS0yeFwiIC8+IDogbnVsbH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgaWQ9XCJmdGYtY2hrMS1sYWJlbFwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZpcnN0LXRpbWUtZmxvd19fY2hlY2tib3gtbGFiZWxcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnc2hvd1NlZWRQaHJhc2UnKX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICBpZD1cInBhc3N3b3JkXCJcbiAgICAgICAgICBsYWJlbD17dCgnbmV3UGFzc3dvcmQnKX1cbiAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cImZpcnN0LXRpbWUtZmxvd19faW5wdXRcIlxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnBhc3N3b3JkfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHRoaXMuaGFuZGxlUGFzc3dvcmRDaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBlcnJvcj17cGFzc3dvcmRFcnJvcn1cbiAgICAgICAgICBhdXRvQ29tcGxldGU9XCJuZXctcGFzc3dvcmRcIlxuICAgICAgICAgIG1hcmdpbj1cIm5vcm1hbFwiXG4gICAgICAgICAgbGFyZ2VMYWJlbFxuICAgICAgICAvPlxuICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgaWQ9XCJjb25maXJtLXBhc3N3b3JkXCJcbiAgICAgICAgICBsYWJlbD17dCgnY29uZmlybVBhc3N3b3JkJyl9XG4gICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJmaXJzdC10aW1lLWZsb3dfX2lucHV0XCJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5jb25maXJtUGFzc3dvcmR9XG4gICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ29uZmlybVBhc3N3b3JkQ2hhbmdlKGV2ZW50LnRhcmdldC52YWx1ZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3I9e2NvbmZpcm1QYXNzd29yZEVycm9yfVxuICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm5ldy1wYXNzd29yZFwiXG4gICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICBsYXJnZUxhYmVsXG4gICAgICAgIC8+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJmaXJzdC10aW1lLWZsb3dfX2NoZWNrYm94LWNvbnRhaW5lclwiXG4gICAgICAgICAgb25DbGljaz17dGhpcy50b2dnbGVUZXJtc0NoZWNrfVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmlyc3QtdGltZS1mbG93X19jaGVja2JveCBmaXJzdC10aW1lLWZsb3dfX3Rlcm1zXCJcbiAgICAgICAgICAgIHRhYkluZGV4PVwiMFwiXG4gICAgICAgICAgICByb2xlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgb25LZXlQcmVzcz17dGhpcy5vblRlcm1zS2V5UHJlc3N9XG4gICAgICAgICAgICBhcmlhLWNoZWNrZWQ9e3Rlcm1zQ2hlY2tlZH1cbiAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT1cImZ0Zi1jaGsxLWxhYmVsXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dGVybXNDaGVja2VkID8gPGkgY2xhc3NOYW1lPVwiZmEgZmEtY2hlY2sgZmEtMnhcIiAvPiA6IG51bGx9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPHNwYW4gaWQ9XCJmdGYtY2hrMS1sYWJlbFwiIGNsYXNzTmFtZT1cImZpcnN0LXRpbWUtZmxvd19fY2hlY2tib3gtbGFiZWxcIj5cbiAgICAgICAgICAgIHt0KCdhY2NlcHRUZXJtc09mVXNlJywgW1xuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpfVxuICAgICAgICAgICAgICAgIGtleT1cImZpcnN0LXRpbWUtZmxvd19fbGluay10ZXh0XCJcbiAgICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9tZXRhbWFzay5pby90ZXJtcy5odG1sXCJcbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmlyc3QtdGltZS1mbG93X19saW5rLXRleHRcIj57dCgndGVybXMnKX08L3NwYW4+XG4gICAgICAgICAgICAgIDwvYT4sXG4gICAgICAgICAgICBdKX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgIHN1Ym1pdFxuICAgICAgICAgIGNsYXNzTmFtZT1cImZpcnN0LXRpbWUtZmxvd19fYnV0dG9uXCJcbiAgICAgICAgICBkaXNhYmxlZD17IXRoaXMuaXNWYWxpZCgpIHx8ICF0ZXJtc0NoZWNrZWR9XG4gICAgICAgID5cbiAgICAgICAgICB7dCgnaW1wb3J0Jyl9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9mb3JtPlxuICAgICk7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5leHBvcnRzLm1lbW9pemUgPSBtZW1vaXplO1xuLyoqXG4gKiBkcm9wLWluIHJlcGxhY2VtZW50IGZvciBfLndpdGhvdXRcbiAqL1xuZnVuY3Rpb24gd2l0aG91dChpdGVtcywgaXRlbSkge1xuICAgIHJldHVybiBpdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkgIT09IGl0ZW07IH0pO1xufVxuZXhwb3J0cy53aXRob3V0ID0gd2l0aG91dDtcbmZ1bmN0aW9uIHVuaW9uKGl0ZW1zQSwgaXRlbXNCKSB7XG4gICAgdmFyIHNldCA9IG5ldyBTZXQoKTtcbiAgICB2YXIgaW5zZXJ0SXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBzZXQuYWRkKGl0ZW0pOyB9O1xuICAgIGl0ZW1zQS5mb3JFYWNoKGluc2VydEl0ZW0pO1xuICAgIGl0ZW1zQi5mb3JFYWNoKGluc2VydEl0ZW0pO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiByZXN1bHQucHVzaChrZXkpOyB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy51bmlvbiA9IHVuaW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTW9ub3RvbmljSW50ZXJwb2xhbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9ub3RvbmljSW50ZXJwb2xhbnQoeHMsIHlzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSB4cy5sZW5ndGg7XG4gICAgICAgIC8vIFJlYXJyYW5nZSB4cyBhbmQgeXMgc28gdGhhdCB4cyBpcyBzb3J0ZWRcbiAgICAgICAgdmFyIGluZGV4ZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ZXMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gKHhzW2FdIDwgeHNbYl0gPyAtMSA6IDEpOyB9KTtcbiAgICAgICAgLy8gR2V0IGNvbnNlY3V0aXZlIGRpZmZlcmVuY2VzIGFuZCBzbG9wZXNcbiAgICAgICAgdmFyIGR5cyA9IFtdO1xuICAgICAgICB2YXIgZHhzID0gW107XG4gICAgICAgIHZhciBtcyA9IFtdO1xuICAgICAgICB2YXIgZHg7XG4gICAgICAgIHZhciBkeTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGR4ID0geHNbaSArIDFdIC0geHNbaV07XG4gICAgICAgICAgICBkeSA9IHlzW2kgKyAxXSAtIHlzW2ldO1xuICAgICAgICAgICAgZHhzLnB1c2goZHgpO1xuICAgICAgICAgICAgZHlzLnB1c2goZHkpO1xuICAgICAgICAgICAgbXMucHVzaChkeSAvIGR4KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBHZXQgZGVncmVlLTEgY29lZmZpY2llbnRzXG4gICAgICAgIHZhciBjMXMgPSBbbXNbMF1dO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGR4cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBtMiA9IG1zW2ldO1xuICAgICAgICAgICAgdmFyIG1OZXh0ID0gbXNbaSArIDFdO1xuICAgICAgICAgICAgaWYgKG0yICogbU5leHQgPD0gMCkge1xuICAgICAgICAgICAgICAgIGMxcy5wdXNoKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZHggPSBkeHNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGR4TmV4dCA9IGR4c1tpICsgMV07XG4gICAgICAgICAgICAgICAgdmFyIGNvbW1vbiA9IGR4ICsgZHhOZXh0O1xuICAgICAgICAgICAgICAgIGMxcy5wdXNoKDMgKiBjb21tb24gLyAoKGNvbW1vbiArIGR4TmV4dCkgLyBtMiArIChjb21tb24gKyBkeCkgLyBtTmV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGMxcy5wdXNoKG1zW21zLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgLy8gR2V0IGRlZ3JlZS0yIGFuZCBkZWdyZWUtMyBjb2VmZmljaWVudHNcbiAgICAgICAgdmFyIGMycyA9IFtdO1xuICAgICAgICB2YXIgYzNzID0gW107XG4gICAgICAgIHZhciBtO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGMxcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIG0gPSBtc1tpXTtcbiAgICAgICAgICAgIHZhciBjMSA9IGMxc1tpXTtcbiAgICAgICAgICAgIHZhciBpbnZEeCA9IDEgLyBkeHNbaV07XG4gICAgICAgICAgICB2YXIgY29tbW9uID0gYzEgKyBjMXNbaSArIDFdIC0gbSAtIG07XG4gICAgICAgICAgICBjMnMucHVzaCgobSAtIGMxIC0gY29tbW9uKSAqIGludkR4KTtcbiAgICAgICAgICAgIGMzcy5wdXNoKGNvbW1vbiAqIGludkR4ICogaW52RHgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueHMgPSB4cztcbiAgICAgICAgdGhpcy55cyA9IHlzO1xuICAgICAgICB0aGlzLmMxcyA9IGMxcztcbiAgICAgICAgdGhpcy5jMnMgPSBjMnM7XG4gICAgICAgIHRoaXMuYzNzID0gYzNzO1xuICAgIH1cbiAgICBNb25vdG9uaWNJbnRlcnBvbGFudC5wcm90b3R5cGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCB4cyA9IF9hLnhzLCB5cyA9IF9hLnlzLCBjMXMgPSBfYS5jMXMsIGMycyA9IF9hLmMycywgYzNzID0gX2EuYzNzO1xuICAgICAgICAvLyBUaGUgcmlnaHRtb3N0IHBvaW50IGluIHRoZSBkYXRhc2V0IHNob3VsZCBnaXZlIGFuIGV4YWN0IHJlc3VsdFxuICAgICAgICB2YXIgaSA9IHhzLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmICh4ID09PSB4c1tpXSkge1xuICAgICAgICAgICAgcmV0dXJuIHlzW2ldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlYXJjaCBmb3IgdGhlIGludGVydmFsIHggaXMgaW4sIHJldHVybmluZyB0aGUgY29ycmVzcG9uZGluZyB5IGlmIHggaXMgb25lIG9mIHRoZSBvcmlnaW5hbCB4c1xuICAgICAgICB2YXIgbG93ID0gMDtcbiAgICAgICAgdmFyIGhpZ2ggPSBjM3MubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIG1pZDtcbiAgICAgICAgd2hpbGUgKGxvdyA8PSBoaWdoKSB7XG4gICAgICAgICAgICBtaWQgPSBNYXRoLmZsb29yKDAuNSAqIChsb3cgKyBoaWdoKSk7XG4gICAgICAgICAgICB2YXIgeEhlcmUgPSB4c1ttaWRdO1xuICAgICAgICAgICAgaWYgKHhIZXJlIDwgeCkge1xuICAgICAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh4SGVyZSA+IHgpIHtcbiAgICAgICAgICAgICAgICBoaWdoID0gbWlkIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB5c1ttaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGkgPSBNYXRoLm1heCgwLCBoaWdoKTtcbiAgICAgICAgLy8gSW50ZXJwb2xhdGVcbiAgICAgICAgdmFyIGRpZmYgPSB4IC0geHNbaV07XG4gICAgICAgIHZhciBkaWZmU3EgPSBkaWZmICogZGlmZjtcbiAgICAgICAgcmV0dXJuIHlzW2ldICsgYzFzW2ldICogZGlmZiArIGMyc1tpXSAqIGRpZmZTcSArIGMzc1tpXSAqIGRpZmYgKiBkaWZmU3E7XG4gICAgfTtcbiAgICByZXR1cm4gTW9ub3RvbmljSW50ZXJwb2xhbnQ7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTW9ub3RvbmljSW50ZXJwb2xhbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBOYXRpdmVEcmFnU291cmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5hdGl2ZURyYWdTb3VyY2UoY29uZmlnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLml0ZW0gPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5jb25maWcuZXhwb3NlUHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpcy5pdGVtLCBwcm9wZXJ0eSwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJCcm93c2VyIGRvZXNuJ3QgYWxsb3cgcmVhZGluZyBcXFwiXCIgKyBwcm9wZXJ0eSArIFwiXFxcIiB1bnRpbCB0aGUgZHJvcCBldmVudC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIE5hdGl2ZURyYWdTb3VyY2UucHJvdG90eXBlLm11dGF0ZUl0ZW1CeVJlYWRpbmdEYXRhVHJhbnNmZXIgPSBmdW5jdGlvbiAoZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBuZXdQcm9wZXJ0aWVzID0ge307XG4gICAgICAgIGlmIChkYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuY29uZmlnLmV4cG9zZVByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgbmV3UHJvcGVydGllc1twcm9wZXJ0eV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jb25maWcuZXhwb3NlUHJvcGVydGllc1twcm9wZXJ0eV0oZGF0YVRyYW5zZmVyLCBfdGhpcy5jb25maWcubWF0Y2hlc1R5cGVzKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcy5pdGVtLCBuZXdQcm9wZXJ0aWVzKTtcbiAgICB9O1xuICAgIE5hdGl2ZURyYWdTb3VyY2UucHJvdG90eXBlLmNhbkRyYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgTmF0aXZlRHJhZ1NvdXJjZS5wcm90b3R5cGUuYmVnaW5EcmFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgIH07XG4gICAgTmF0aXZlRHJhZ1NvdXJjZS5wcm90b3R5cGUuaXNEcmFnZ2luZyA9IGZ1bmN0aW9uIChtb25pdG9yLCBoYW5kbGUpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZSA9PT0gbW9uaXRvci5nZXRTb3VyY2VJZCgpO1xuICAgIH07XG4gICAgTmF0aXZlRHJhZ1NvdXJjZS5wcm90b3R5cGUuZW5kRHJhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZW1wdHlcbiAgICB9O1xuICAgIHJldHVybiBOYXRpdmVEcmFnU291cmNlO1xufSgpKTtcbmV4cG9ydHMuTmF0aXZlRHJhZ1NvdXJjZSA9IE5hdGl2ZURyYWdTb3VyY2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBfYTtcbnZhciBOYXRpdmVUeXBlcyA9IHJlcXVpcmUoXCIuLi9OYXRpdmVUeXBlc1wiKTtcbnZhciBnZXREYXRhRnJvbURhdGFUcmFuc2Zlcl8xID0gcmVxdWlyZShcIi4vZ2V0RGF0YUZyb21EYXRhVHJhbnNmZXJcIik7XG5leHBvcnRzLm5hdGl2ZVR5cGVzQ29uZmlnID0gKF9hID0ge30sXG4gICAgX2FbTmF0aXZlVHlwZXMuRklMRV0gPSB7XG4gICAgICAgIGV4cG9zZVByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGZpbGVzOiBmdW5jdGlvbiAoZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRhdGFUcmFuc2Zlci5maWxlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXRlbXM6IGZ1bmN0aW9uIChkYXRhVHJhbnNmZXIpIHsgcmV0dXJuIGRhdGFUcmFuc2Zlci5pdGVtczsgfSxcbiAgICAgICAgfSxcbiAgICAgICAgbWF0Y2hlc1R5cGVzOiBbJ0ZpbGVzJ10sXG4gICAgfSxcbiAgICBfYVtOYXRpdmVUeXBlcy5VUkxdID0ge1xuICAgICAgICBleHBvc2VQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICB1cmxzOiBmdW5jdGlvbiAoZGF0YVRyYW5zZmVyLCBtYXRjaGVzVHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RGF0YUZyb21EYXRhVHJhbnNmZXJfMS5nZXREYXRhRnJvbURhdGFUcmFuc2ZlcihkYXRhVHJhbnNmZXIsIG1hdGNoZXNUeXBlcywgJycpLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG1hdGNoZXNUeXBlczogWydVcmwnLCAndGV4dC91cmktbGlzdCddLFxuICAgIH0sXG4gICAgX2FbTmF0aXZlVHlwZXMuVEVYVF0gPSB7XG4gICAgICAgIGV4cG9zZVByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHRleHQ6IGZ1bmN0aW9uIChkYXRhVHJhbnNmZXIsIG1hdGNoZXNUeXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXREYXRhRnJvbURhdGFUcmFuc2Zlcl8xLmdldERhdGFGcm9tRGF0YVRyYW5zZmVyKGRhdGFUcmFuc2ZlciwgbWF0Y2hlc1R5cGVzLCAnJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBtYXRjaGVzVHlwZXM6IFsnVGV4dCcsICd0ZXh0L3BsYWluJ10sXG4gICAgfSxcbiAgICBfYSk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgRHJhZ1NvdXJjZSwgRHJvcFRhcmdldCB9IGZyb20gJ3JlYWN0LWRuZCc7XG5cbmNsYXNzIERyYWdnYWJsZVNlZWQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8vIFJlYWN0IERuRCBQcm9wc1xuICAgIGNvbm5lY3REcmFnU291cmNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNvbm5lY3REcm9wVGFyZ2V0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGlzRHJhZ2dpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzT3ZlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2FuRHJvcDogUHJvcFR5cGVzLmJvb2wsXG4gICAgLy8gT3duIFByb3BzXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2V0SG92ZXJpbmdJbmRleDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBpbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB3b3JkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIG9uQ2xpY2s6IHVuZGVmaW5lZCxcbiAgfTtcblxuICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzT3Zlciwgc2V0SG92ZXJpbmdJbmRleCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNPdmVyICYmICFuZXh0UHJvcHMuaXNPdmVyKSB7XG4gICAgICBzZXRIb3ZlcmluZ0luZGV4KC0xKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29ubmVjdERyYWdTb3VyY2UsXG4gICAgICBjb25uZWN0RHJvcFRhcmdldCxcbiAgICAgIGlzRHJhZ2dpbmcsXG4gICAgICBpbmRleCxcbiAgICAgIHdvcmQsXG4gICAgICBzZWxlY3RlZCxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIG9uQ2xpY2ssXG4gICAgICBpc092ZXIsXG4gICAgICBjYW5Ecm9wLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIGNvbm5lY3REcm9wVGFyZ2V0KFxuICAgICAgY29ubmVjdERyYWdTb3VyY2UoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcyhcbiAgICAgICAgICAgICdidG4tc2Vjb25kYXJ5IG5vdHJhbnNsYXRlIGNvbmZpcm0tc2VlZC1waHJhc2VfX3NlZWQtd29yZCcsXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICdjb25maXJtLXNlZWQtcGhyYXNlX19zZWVkLXdvcmQtLXNlbGVjdGVkIGJ0bi1wcmltYXJ5Jzogc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICdjb25maXJtLXNlZWQtcGhyYXNlX19zZWVkLXdvcmQtLWRyYWdnaW5nJzogaXNEcmFnZ2luZyxcbiAgICAgICAgICAgICAgJ2NvbmZpcm0tc2VlZC1waHJhc2VfX3NlZWQtd29yZC0tZW1wdHknOiAhd29yZCxcbiAgICAgICAgICAgICAgJ2NvbmZpcm0tc2VlZC1waHJhc2VfX3NlZWQtd29yZC0tYWN0aXZlLWRyb3AnOiAhaXNPdmVyICYmIGNhbkRyb3AsXG4gICAgICAgICAgICAgICdjb25maXJtLXNlZWQtcGhyYXNlX19zZWVkLXdvcmQtLWRyb3AtaG92ZXInOiBpc092ZXIgJiYgY2FuRHJvcCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKX1cbiAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtgZHJhZ2dhYmxlLXNlZWQtJHtzZWxlY3RlZCA/ICdzZWxlY3RlZC0nIDogJyd9JHt3b3JkfWB9XG4gICAgICAgID5cbiAgICAgICAgICB7d29yZH1cbiAgICAgICAgPC9kaXY+LFxuICAgICAgKSxcbiAgICApO1xuICB9XG59XG5cbmNvbnN0IFNFRURXT1JEID0gJ1NFRURXT1JEJztcblxuY29uc3Qgc2VlZFNvdXJjZSA9IHtcbiAgYmVnaW5EcmFnKHByb3BzKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiBwcm9wcy5zZXREcmFnZ2luZ1NlZWRJbmRleChwcm9wcy5zZWVkSW5kZXgpLCAwKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2VlZEluZGV4OiBwcm9wcy5zZWVkSW5kZXgsXG4gICAgICB3b3JkOiBwcm9wcy53b3JkLFxuICAgIH07XG4gIH0sXG4gIGNhbkRyYWcocHJvcHMpIHtcbiAgICByZXR1cm4gcHJvcHMuZHJhZ2dhYmxlO1xuICB9LFxuICBlbmREcmFnKHByb3BzLCBtb25pdG9yKSB7XG4gICAgY29uc3QgZHJvcFRhcmdldCA9IG1vbml0b3IuZ2V0RHJvcFJlc3VsdCgpO1xuXG4gICAgaWYgKCFkcm9wVGFyZ2V0KSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHByb3BzLnNldERyYWdnaW5nU2VlZEluZGV4KC0xKSwgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvcHMub25Ecm9wKGRyb3BUYXJnZXQudGFyZ2V0SW5kZXgpO1xuICB9LFxufTtcblxuY29uc3Qgc2VlZFRhcmdldCA9IHtcbiAgZHJvcChwcm9wcykge1xuICAgIHJldHVybiB7XG4gICAgICB0YXJnZXRJbmRleDogcHJvcHMuaW5kZXgsXG4gICAgfTtcbiAgfSxcbiAgY2FuRHJvcChwcm9wcykge1xuICAgIHJldHVybiBwcm9wcy5kcm9wcGFibGU7XG4gIH0sXG4gIGhvdmVyKHByb3BzKSB7XG4gICAgcHJvcHMuc2V0SG92ZXJpbmdJbmRleChwcm9wcy5pbmRleCk7XG4gIH0sXG59O1xuXG5jb25zdCBjb2xsZWN0RHJhZyA9IChjb25uZWN0LCBtb25pdG9yKSA9PiB7XG4gIHJldHVybiB7XG4gICAgY29ubmVjdERyYWdTb3VyY2U6IGNvbm5lY3QuZHJhZ1NvdXJjZSgpLFxuICAgIGlzRHJhZ2dpbmc6IG1vbml0b3IuaXNEcmFnZ2luZygpLFxuICB9O1xufTtcblxuY29uc3QgY29sbGVjdERyb3AgPSAoY29ubmVjdCwgbW9uaXRvcikgPT4ge1xuICByZXR1cm4ge1xuICAgIGNvbm5lY3REcm9wVGFyZ2V0OiBjb25uZWN0LmRyb3BUYXJnZXQoKSxcbiAgICBpc092ZXI6IG1vbml0b3IuaXNPdmVyKCksXG4gICAgY2FuRHJvcDogbW9uaXRvci5jYW5Ecm9wKCksXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEcm9wVGFyZ2V0KFxuICBTRUVEV09SRCxcbiAgc2VlZFRhcmdldCxcbiAgY29sbGVjdERyb3AsXG4pKERyYWdTb3VyY2UoU0VFRFdPUkQsIHNlZWRTb3VyY2UsIGNvbGxlY3REcmFnKShEcmFnZ2FibGVTZWVkKSk7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9sb2NrLWljb24uY29tcG9uZW50JztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2lzRGlzcG9zYWJsZTIgPSByZXF1aXJlKCcuL2lzRGlzcG9zYWJsZScpO1xuXG52YXIgX2lzRGlzcG9zYWJsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0Rpc3Bvc2FibGUyKTtcblxuZXhwb3J0cy5pc0Rpc3Bvc2FibGUgPSBfaXNEaXNwb3NhYmxlM1snZGVmYXVsdCddO1xuXG52YXIgX0Rpc3Bvc2FibGUyID0gcmVxdWlyZSgnLi9EaXNwb3NhYmxlJyk7XG5cbnZhciBfRGlzcG9zYWJsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EaXNwb3NhYmxlMik7XG5cbmV4cG9ydHMuRGlzcG9zYWJsZSA9IF9EaXNwb3NhYmxlM1snZGVmYXVsdCddO1xuXG52YXIgX0NvbXBvc2l0ZURpc3Bvc2FibGUyID0gcmVxdWlyZSgnLi9Db21wb3NpdGVEaXNwb3NhYmxlJyk7XG5cbnZhciBfQ29tcG9zaXRlRGlzcG9zYWJsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db21wb3NpdGVEaXNwb3NhYmxlMik7XG5cbmV4cG9ydHMuQ29tcG9zaXRlRGlzcG9zYWJsZSA9IF9Db21wb3NpdGVEaXNwb3NhYmxlM1snZGVmYXVsdCddO1xuXG52YXIgX1NlcmlhbERpc3Bvc2FibGUyID0gcmVxdWlyZSgnLi9TZXJpYWxEaXNwb3NhYmxlJyk7XG5cbnZhciBfU2VyaWFsRGlzcG9zYWJsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TZXJpYWxEaXNwb3NhYmxlMik7XG5cbmV4cG9ydHMuU2VyaWFsRGlzcG9zYWJsZSA9IF9TZXJpYWxEaXNwb3NhYmxlM1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgY2xvbmVXaXRoUmVmXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY2xvbmVXaXRoUmVmXCIpKTtcbmZ1bmN0aW9uIHRocm93SWZDb21wb3NpdGVDb21wb25lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAvLyBDdXN0b20gY29tcG9uZW50cyBjYW4gbm8gbG9uZ2VyIGJlIHdyYXBwZWQgZGlyZWN0bHkgaW4gUmVhY3QgRG5EIDIuMFxuICAgIC8vIHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBkZXBlbmQgb24gZmluZERPTU5vZGUoKSBmcm9tIHJlYWN0LWRvbS5cbiAgICBpZiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBlbGVtZW50LnR5cGUuZGlzcGxheU5hbWUgfHwgZWxlbWVudC50eXBlLm5hbWUgfHwgJ3RoZSBjb21wb25lbnQnO1xuICAgIHRocm93IG5ldyBFcnJvcignT25seSBuYXRpdmUgZWxlbWVudCBub2RlcyBjYW4gbm93IGJlIHBhc3NlZCB0byBSZWFjdCBEbkQgY29ubmVjdG9ycy4nICtcbiAgICAgICAgKFwiWW91IGNhbiBlaXRoZXIgd3JhcCBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW50byBhIDxkaXY+LCBvciB0dXJuIGl0IGludG8gYSBcIikgK1xuICAgICAgICAnZHJhZyBzb3VyY2Ugb3IgYSBkcm9wIHRhcmdldCBpdHNlbGYuJyk7XG59XG5mdW5jdGlvbiB3cmFwSG9va1RvUmVjb2duaXplRWxlbWVudChob29rKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50T3JOb2RlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChlbGVtZW50T3JOb2RlID09PSB2b2lkIDApIHsgZWxlbWVudE9yTm9kZSA9IG51bGw7IH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0gbnVsbDsgfVxuICAgICAgICAvLyBXaGVuIHBhc3NlZCBhIG5vZGUsIGNhbGwgdGhlIGhvb2sgc3RyYWlnaHQgYXdheS5cbiAgICAgICAgaWYgKCFyZWFjdF8xLmlzVmFsaWRFbGVtZW50KGVsZW1lbnRPck5vZGUpKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IGVsZW1lbnRPck5vZGU7XG4gICAgICAgICAgICBob29rKG5vZGUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBwYXNzZWQgYSBSZWFjdEVsZW1lbnQsIGNsb25lIGl0IGFuZCBhdHRhY2ggdGhpcyBmdW5jdGlvbiBhcyBhIHJlZi5cbiAgICAgICAgLy8gVGhpcyBoZWxwcyB1cyBhY2hpZXZlIGEgbmVhdCBBUEkgd2hlcmUgdXNlciBkb2Vzbid0IGV2ZW4ga25vdyB0aGF0IHJlZnNcbiAgICAgICAgLy8gYXJlIGJlaW5nIHVzZWQgdW5kZXIgdGhlIGhvb2QuXG4gICAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudE9yTm9kZTtcbiAgICAgICAgdGhyb3dJZkNvbXBvc2l0ZUNvbXBvbmVudEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgIC8vIFdoZW4gbm8gb3B0aW9ucyBhcmUgcGFzc2VkLCB1c2UgdGhlIGhvb2sgZGlyZWN0bHlcbiAgICAgICAgdmFyIHJlZiA9IG9wdGlvbnMgPyBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gaG9vayhub2RlLCBvcHRpb25zKTsgfSA6IGhvb2s7XG4gICAgICAgIHJldHVybiBjbG9uZVdpdGhSZWZfMS5kZWZhdWx0KGVsZW1lbnQsIHJlZik7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHdyYXBDb25uZWN0b3JIb29rcyhob29rcykge1xuICAgIHZhciB3cmFwcGVkSG9va3MgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhob29rcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBob29rID0gaG9va3Nba2V5XTtcbiAgICAgICAgdmFyIHdyYXBwZWRIb29rID0gd3JhcEhvb2tUb1JlY29nbml6ZUVsZW1lbnQoaG9vayk7XG4gICAgICAgIHdyYXBwZWRIb29rc1trZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gd3JhcHBlZEhvb2s7IH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHdyYXBwZWRIb29rcztcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHdyYXBDb25uZWN0b3JIb29rcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBDb25uZWN0b3JIb29rcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBIYW5kbGVyUm9sZTtcbihmdW5jdGlvbiAoSGFuZGxlclJvbGUpIHtcbiAgICBIYW5kbGVyUm9sZVtcIlNPVVJDRVwiXSA9IFwiU09VUkNFXCI7XG4gICAgSGFuZGxlclJvbGVbXCJUQVJHRVRcIl0gPSBcIlRBUkdFVFwiO1xufSkoSGFuZGxlclJvbGUgPSBleHBvcnRzLkhhbmRsZXJSb2xlIHx8IChleHBvcnRzLkhhbmRsZXJSb2xlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRHJhZ0Ryb3BNYW5hZ2VySW1wbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0RyYWdEcm9wTWFuYWdlckltcGxcIikpO1xuZnVuY3Rpb24gY3JlYXRlRHJhZ0Ryb3BNYW5hZ2VyKGJhY2tlbmQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IERyYWdEcm9wTWFuYWdlckltcGxfMS5kZWZhdWx0KGJhY2tlbmQsIGNvbnRleHQpO1xufVxuZXhwb3J0cy5jcmVhdGVEcmFnRHJvcE1hbmFnZXIgPSBjcmVhdGVEcmFnRHJvcE1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWN0b3JpZXMuanMubWFwIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy91aS9pZGVudGljb24nO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL2J1dHRvbi9idXR0b24uY29tcG9uZW50JztcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy91aS90ZXh0LWZpZWxkJztcbmltcG9ydCBQYWdlQ29udGFpbmVyRm9vdGVyIGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvcGFnZS1jb250YWluZXIvcGFnZS1jb250YWluZXItZm9vdGVyJztcbmltcG9ydCB7XG4gIGlzQnVybkFkZHJlc3MsXG4gIGlzVmFsaWRIZXhBZGRyZXNzLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9oZXhzdHJpbmctdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFZGl0Q29udGFjdCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgYWRkVG9BZGRyZXNzQm9vazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVtb3ZlRnJvbUFkZHJlc3NCb29rOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGFpbklkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1lbW86IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdmlld1JvdXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxpc3RSb3V0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIG5hbWU6ICcnLFxuICAgIG1lbW86ICcnLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIG5ld05hbWU6IHRoaXMucHJvcHMubmFtZSxcbiAgICBuZXdBZGRyZXNzOiB0aGlzLnByb3BzLmFkZHJlc3MsXG4gICAgbmV3TWVtbzogdGhpcy5wcm9wcy5tZW1vLFxuICAgIGVycm9yOiAnJyxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3Qge1xuICAgICAgYWRkcmVzcyxcbiAgICAgIGFkZFRvQWRkcmVzc0Jvb2ssXG4gICAgICBjaGFpbklkLFxuICAgICAgaGlzdG9yeSxcbiAgICAgIGxpc3RSb3V0ZSxcbiAgICAgIG1lbW8sXG4gICAgICBuYW1lLFxuICAgICAgcmVtb3ZlRnJvbUFkZHJlc3NCb29rLFxuICAgICAgdmlld1JvdXRlLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICByZXR1cm4gPFJlZGlyZWN0IHRvPXt7IHBhdGhuYW1lOiBsaXN0Um91dGUgfX0gLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2V0dGluZ3MtcGFnZV9fY29udGVudC1yb3cgYWRkcmVzcy1ib29rX19lZGl0LWNvbnRhY3RcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXR0aW5ncy1wYWdlX19oZWFkZXIgYWRkcmVzcy1ib29rX19oZWFkZXItLWVkaXRcIj5cbiAgICAgICAgICA8SWRlbnRpY29uIGFkZHJlc3M9e2FkZHJlc3N9IGRpYW1ldGVyPXs2MH0gLz5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzZXR0aW5ncy1wYWdlX19hZGRyZXNzLWJvb2stYnV0dG9uXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2FzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgYXdhaXQgcmVtb3ZlRnJvbUFkZHJlc3NCb29rKGNoYWluSWQsIGFkZHJlc3MpO1xuICAgICAgICAgICAgICBoaXN0b3J5LnB1c2gobGlzdFJvdXRlKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ2RlbGV0ZUFjY291bnQnKX1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWRkcmVzcy1ib29rX19lZGl0LWNvbnRhY3RfX2NvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3MtYm9va19fdmlldy1jb250YWN0X19ncm91cFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGRyZXNzLWJvb2tfX3ZpZXctY29udGFjdF9fZ3JvdXBfX2xhYmVsXCI+XG4gICAgICAgICAgICAgIHt0KCd1c2VyTmFtZScpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgaWQ9XCJuaWNrbmFtZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLmNvbnRleHQudCgnYWRkQWxpYXMnKX1cbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubmV3TmFtZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHsgbmV3TmFtZTogZS50YXJnZXQudmFsdWUgfSl9XG4gICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICBtYXJnaW49XCJkZW5zZVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGRyZXNzLWJvb2tfX3ZpZXctY29udGFjdF9fZ3JvdXBcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWRkcmVzcy1ib29rX192aWV3LWNvbnRhY3RfX2dyb3VwX19sYWJlbFwiPlxuICAgICAgICAgICAgICB7dCgnZXRoZXJldW1QdWJsaWNBZGRyZXNzJyl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBpZD1cImFkZHJlc3NcIlxuICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5uZXdBZGRyZXNzfVxuICAgICAgICAgICAgICBlcnJvcj17dGhpcy5zdGF0ZS5lcnJvcn1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHsgbmV3QWRkcmVzczogZS50YXJnZXQudmFsdWUgfSl9XG4gICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICBtdWx0aWxpbmVcbiAgICAgICAgICAgICAgcm93cz17M31cbiAgICAgICAgICAgICAgbWFyZ2luPVwiZGVuc2VcIlxuICAgICAgICAgICAgICBjbGFzc2VzPXt7XG4gICAgICAgICAgICAgICAgaW5wdXRNdWx0aWxpbmU6XG4gICAgICAgICAgICAgICAgICAnYWRkcmVzcy1ib29rX192aWV3LWNvbnRhY3RfX2FkZHJlc3NfX3RleHQtYXJlYScsXG4gICAgICAgICAgICAgICAgaW5wdXRSb290OiAnYWRkcmVzcy1ib29rX192aWV3LWNvbnRhY3RfX2FkZHJlc3MnLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWRkcmVzcy1ib29rX192aWV3LWNvbnRhY3RfX2dyb3VwXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3MtYm9va19fdmlldy1jb250YWN0X19ncm91cF9fbGFiZWwtLWNhcGl0YWxpemVkXCI+XG4gICAgICAgICAgICAgIHt0KCdtZW1vJyl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBpZD1cIm1lbW9cIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17bWVtb31cbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubmV3TWVtb31cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHsgbmV3TWVtbzogZS50YXJnZXQudmFsdWUgfSl9XG4gICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICBtYXJnaW49XCJkZW5zZVwiXG4gICAgICAgICAgICAgIG11bHRpbGluZVxuICAgICAgICAgICAgICByb3dzPXszfVxuICAgICAgICAgICAgICBjbGFzc2VzPXt7XG4gICAgICAgICAgICAgICAgaW5wdXRNdWx0aWxpbmU6ICdhZGRyZXNzLWJvb2tfX3ZpZXctY29udGFjdF9fdGV4dC1hcmVhJyxcbiAgICAgICAgICAgICAgICBpbnB1dFJvb3Q6ICdhZGRyZXNzLWJvb2tfX3ZpZXctY29udGFjdF9fdGV4dC1hcmVhLXdyYXBwZXInLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxQYWdlQ29udGFpbmVyRm9vdGVyXG4gICAgICAgICAgY2FuY2VsVGV4dD17dGhpcy5jb250ZXh0LnQoJ2NhbmNlbCcpfVxuICAgICAgICAgIG9uU3VibWl0PXthc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUubmV3QWRkcmVzcyAhPT0gJycgJiZcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5uZXdBZGRyZXNzICE9PSBhZGRyZXNzXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgLy8gaWYgdGhlIHVzZXIgbWFrZXMgYSB2YWxpZCBjaGFuZ2UgdG8gdGhlIGFkZHJlc3MgZmllbGQsIHJlbW92ZSB0aGUgb3JpZ2luYWwgYWRkcmVzc1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIWlzQnVybkFkZHJlc3ModGhpcy5zdGF0ZS5uZXdBZGRyZXNzKSAmJlxuICAgICAgICAgICAgICAgIGlzVmFsaWRIZXhBZGRyZXNzKHRoaXMuc3RhdGUubmV3QWRkcmVzcywge1xuICAgICAgICAgICAgICAgICAgbWl4ZWRDYXNlVXNlQ2hlY2tzdW06IHRydWUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcmVtb3ZlRnJvbUFkZHJlc3NCb29rKGNoYWluSWQsIGFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGFkZFRvQWRkcmVzc0Jvb2soXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLm5ld0FkZHJlc3MsXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLm5ld05hbWUgfHwgbmFtZSxcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUubmV3TWVtbyB8fCBtZW1vLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKGxpc3RSb3V0ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yOiB0aGlzLmNvbnRleHQudCgnaW52YWxpZEFkZHJlc3MnKSB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gdXBkYXRlIG5hbWVcbiAgICAgICAgICAgICAgYXdhaXQgYWRkVG9BZGRyZXNzQm9vayhcbiAgICAgICAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUubmV3TmFtZSB8fCBuYW1lLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUubmV3TWVtbyB8fCBtZW1vLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBoaXN0b3J5LnB1c2gobGlzdFJvdXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PiB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goYCR7dmlld1JvdXRlfS8ke2FkZHJlc3N9YCk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBzdWJtaXRUZXh0PXt0aGlzLmNvbnRleHQudCgnc2F2ZScpfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvaWRlbnRpY29uJztcbmltcG9ydCBDb3B5IGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvaWNvbi9jb3B5LWljb24uY29tcG9uZW50JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy91aS9idXR0b24vYnV0dG9uLmNvbXBvbmVudCc7XG5cbmltcG9ydCBUb29sdGlwIGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvdG9vbHRpcCc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IHVzZUNvcHlUb0NsaXBib2FyZCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUNvcHlUb0NsaXBib2FyZCc7XG5cbmZ1bmN0aW9uIHF1YWRTcGxpdChhZGRyZXNzKSB7XG4gIHJldHVybiBgMHggJHthZGRyZXNzXG4gICAgLnNsaWNlKDIpXG4gICAgLm1hdGNoKC8uezEsNH0vZ3UpXG4gICAgLmpvaW4oJyAnKX1gO1xufVxuXG5mdW5jdGlvbiBWaWV3Q29udGFjdCh7XG4gIGhpc3RvcnksXG4gIG5hbWUsXG4gIGFkZHJlc3MsXG4gIGNoZWNrU3VtbWVkQWRkcmVzcyxcbiAgbWVtbyxcbiAgZWRpdFJvdXRlLFxuICBsaXN0Um91dGUsXG59KSB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCBbY29waWVkLCBoYW5kbGVDb3B5XSA9IHVzZUNvcHlUb0NsaXBib2FyZCgpO1xuXG4gIGlmICghYWRkcmVzcykge1xuICAgIHJldHVybiA8UmVkaXJlY3QgdG89e3sgcGF0aG5hbWU6IGxpc3RSb3V0ZSB9fSAvPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzZXR0aW5ncy1wYWdlX19jb250ZW50LXJvd1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXR0aW5ncy1wYWdlX19jb250ZW50LWl0ZW1cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXR0aW5ncy1wYWdlX19oZWFkZXIgYWRkcmVzcy1ib29rX19oZWFkZXJcIj5cbiAgICAgICAgICA8SWRlbnRpY29uIGFkZHJlc3M9e2FkZHJlc3N9IGRpYW1ldGVyPXs2MH0gLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3MtYm9va19faGVhZGVyX19uYW1lXCI+e25hbWV9PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3MtYm9va19fdmlldy1jb250YWN0X19ncm91cFwiPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBoaXN0b3J5LnB1c2goYCR7ZWRpdFJvdXRlfS8ke2FkZHJlc3N9YCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCdlZGl0Jyl9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3MtYm9va19fdmlldy1jb250YWN0X19ncm91cFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWRkcmVzcy1ib29rX192aWV3LWNvbnRhY3RfX2dyb3VwX19sYWJlbFwiPlxuICAgICAgICAgICAge3QoJ2V0aGVyZXVtUHVibGljQWRkcmVzcycpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWRkcmVzcy1ib29rX192aWV3LWNvbnRhY3RfX2dyb3VwX192YWx1ZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGRyZXNzLWJvb2tfX3ZpZXctY29udGFjdF9fZ3JvdXBfX3N0YXRpYy1hZGRyZXNzXCI+XG4gICAgICAgICAgICAgIHtxdWFkU3BsaXQoY2hlY2tTdW1tZWRBZGRyZXNzKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPFRvb2x0aXBcbiAgICAgICAgICAgICAgcG9zaXRpb249XCJib3R0b21cIlxuICAgICAgICAgICAgICB0aXRsZT17Y29waWVkID8gdCgnY29waWVkRXhjbGFtYXRpb24nKSA6IHQoJ2NvcHlUb0NsaXBib2FyZCcpfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWRkcmVzcy1ib29rX192aWV3LWNvbnRhY3RfX2dyb3VwX19zdGF0aWMtYWRkcmVzcy0tY29weS1pY29uXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBoYW5kbGVDb3B5KGNoZWNrU3VtbWVkQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxDb3B5IHNpemU9ezIwfSBjb2xvcj1cIiMzMDk4RENcIiAvPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWRkcmVzcy1ib29rX192aWV3LWNvbnRhY3RfX2dyb3VwXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGRyZXNzLWJvb2tfX3ZpZXctY29udGFjdF9fZ3JvdXBfX2xhYmVsLS1jYXBpdGFsaXplZFwiPlxuICAgICAgICAgICAge3QoJ21lbW8nKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3MtYm9va19fdmlldy1jb250YWN0X19ncm91cF9fc3RhdGljLWFkZHJlc3NcIj5cbiAgICAgICAgICAgIHttZW1vfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5WaWV3Q29udGFjdC5wcm9wVHlwZXMgPSB7XG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNoZWNrU3VtbWVkQWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgbWVtbzogUHJvcFR5cGVzLnN0cmluZyxcbiAgZWRpdFJvdXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsaXN0Um91dGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0Lm1lbW8oVmlld0NvbnRhY3QpO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZGVib3VuY2UgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IElkZW50aWNvbiBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL2lkZW50aWNvbic7XG5pbXBvcnQgVGV4dEZpZWxkIGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvdGV4dC1maWVsZCc7XG5pbXBvcnQgeyBDT05UQUNUX0xJU1RfUk9VVEUgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9yb3V0ZXMnO1xuaW1wb3J0IHsgaXNWYWxpZERvbWFpbk5hbWUgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL3V0aWxzL3V0aWwnO1xuaW1wb3J0IEVuc0lucHV0IGZyb20gJy4uLy4uLy4uL3NlbmQvc2VuZC1jb250ZW50L2FkZC1yZWNpcGllbnQvZW5zLWlucHV0JztcbmltcG9ydCBQYWdlQ29udGFpbmVyRm9vdGVyIGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvcGFnZS1jb250YWluZXIvcGFnZS1jb250YWluZXItZm9vdGVyJztcbmltcG9ydCB7XG4gIGlzQnVybkFkZHJlc3MsXG4gIGlzVmFsaWRIZXhBZGRyZXNzLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9oZXhzdHJpbmctdXRpbHMnO1xuaW1wb3J0IHsgSU5WQUxJRF9SRUNJUElFTlRfQUREUkVTU19FUlJPUiB9IGZyb20gJy4uLy4uLy4uL3NlbmQvc2VuZC5jb25zdGFudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBZGRDb250YWN0IGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgdDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBhZGRUb0FkZHJlc3NCb29rOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNjYW5RckNvZGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIHFyQ29kZURhdGE6XG4gICAgICBQcm9wVHlwZXMub2JqZWN0IC8qIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXMgKi8sXG4gICAgcXJDb2RlRGV0ZWN0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIGVuc1Jlc29sdXRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZW5zRXJyb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcmVzZXRFbnNSZXNvbHV0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBuZXdOYW1lOiAnJyxcbiAgICBldGhBZGRyZXNzOiAnJyxcbiAgICBlcnJvcjogJycsXG4gICAgaW5wdXQ6ICcnLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuZFZhbGlkYXRlID0gZGVib3VuY2UodGhpcy52YWxpZGF0ZSwgNTAwKTtcbiAgfVxuXG4gIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMucXJDb2RlRGF0YSkge1xuICAgICAgaWYgKG5leHRQcm9wcy5xckNvZGVEYXRhLnR5cGUgPT09ICdhZGRyZXNzJykge1xuICAgICAgICBjb25zdCB7IGVuc1Jlc29sdXRpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHNjYW5uZWRBZGRyZXNzID0gbmV4dFByb3BzLnFyQ29kZURhdGEudmFsdWVzLmFkZHJlc3MudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgY3VycmVudEFkZHJlc3MgPSBlbnNSZXNvbHV0aW9uIHx8IHRoaXMuc3RhdGUuZXRoQWRkcmVzcztcbiAgICAgICAgaWYgKGN1cnJlbnRBZGRyZXNzLnRvTG93ZXJDYXNlKCkgIT09IHNjYW5uZWRBZGRyZXNzKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlucHV0OiBzY2FubmVkQWRkcmVzcyB9KTtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRlKHNjYW5uZWRBZGRyZXNzKTtcbiAgICAgICAgICAvLyBDbGVhbiB1cCBRUiBjb2RlIGRhdGEgYWZ0ZXIgaGFuZGxpbmdcbiAgICAgICAgICB0aGlzLnByb3BzLnFyQ29kZURldGVjdGVkKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGUgPSAoYWRkcmVzcykgPT4ge1xuICAgIGNvbnN0IHZhbGlkID1cbiAgICAgICFpc0J1cm5BZGRyZXNzKGFkZHJlc3MpICYmXG4gICAgICBpc1ZhbGlkSGV4QWRkcmVzcyhhZGRyZXNzLCB7IG1peGVkQ2FzZVVzZUNoZWNrc3VtOiB0cnVlIH0pO1xuICAgIGNvbnN0IHZhbGlkRW5zQWRkcmVzcyA9IGlzVmFsaWREb21haW5OYW1lKGFkZHJlc3MpO1xuXG4gICAgaWYgKHZhbGlkIHx8IHZhbGlkRW5zQWRkcmVzcyB8fCBhZGRyZXNzID09PSAnJykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yOiAnJywgZXRoQWRkcmVzczogYWRkcmVzcyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yOiBJTlZBTElEX1JFQ0lQSUVOVF9BRERSRVNTX0VSUk9SIH0pO1xuICAgIH1cbiAgfTtcblxuICBvbkNoYW5nZSA9IChpbnB1dCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpbnB1dCB9KTtcbiAgICB0aGlzLmRWYWxpZGF0ZShpbnB1dCk7XG4gIH07XG5cbiAgcmVuZGVySW5wdXQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxFbnNJbnB1dFxuICAgICAgICBzY2FuUXJDb2RlPXsoXykgPT4ge1xuICAgICAgICAgIHRoaXMucHJvcHMuc2NhblFyQ29kZSgpO1xuICAgICAgICB9fVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX1cbiAgICAgICAgb25QYXN0ZT17KHRleHQpID0+IHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaW5wdXQ6IHRleHQgfSk7XG4gICAgICAgICAgdGhpcy52YWxpZGF0ZSh0ZXh0KTtcbiAgICAgICAgfX1cbiAgICAgICAgb25SZXNldD17KCkgPT4ge1xuICAgICAgICAgIHRoaXMucHJvcHMucmVzZXRFbnNSZXNvbHV0aW9uKCk7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV0aEFkZHJlc3M6ICcnLCBpbnB1dDogJycgfSk7XG4gICAgICAgIH19XG4gICAgICAgIHVzZXJJbnB1dD17dGhpcy5zdGF0ZS5pbnB1dH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7IGhpc3RvcnksIGFkZFRvQWRkcmVzc0Jvb2ssIGVuc0Vycm9yLCBlbnNSZXNvbHV0aW9uIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgZXJyb3JUb1JlbmRlciA9IGVuc0Vycm9yIHx8IHRoaXMuc3RhdGUuZXJyb3I7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXR0aW5ncy1wYWdlX19jb250ZW50LXJvdyBhZGRyZXNzLWJvb2tfX2FkZC1jb250YWN0XCI+XG4gICAgICAgIHtlbnNSZXNvbHV0aW9uICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3MtYm9va19fdmlldy1jb250YWN0X19ncm91cFwiPlxuICAgICAgICAgICAgPElkZW50aWNvbiBhZGRyZXNzPXtlbnNSZXNvbHV0aW9ufSBkaWFtZXRlcj17NjB9IC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3MtYm9va19fdmlldy1jb250YWN0X19ncm91cF9fdmFsdWVcIj5cbiAgICAgICAgICAgICAge2Vuc1Jlc29sdXRpb259XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGRyZXNzLWJvb2tfX2FkZC1jb250YWN0X19jb250ZW50XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGRyZXNzLWJvb2tfX3ZpZXctY29udGFjdF9fZ3JvdXBcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWRkcmVzcy1ib29rX192aWV3LWNvbnRhY3RfX2dyb3VwX19sYWJlbFwiPlxuICAgICAgICAgICAgICB7dCgndXNlck5hbWUnKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIGlkPVwibmlja25hbWVcIlxuICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5uZXdOYW1lfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMuc2V0U3RhdGUoeyBuZXdOYW1lOiBlLnRhcmdldC52YWx1ZSB9KX1cbiAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgIG1hcmdpbj1cImRlbnNlXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3MtYm9va19fdmlldy1jb250YWN0X19ncm91cFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGRyZXNzLWJvb2tfX3ZpZXctY29udGFjdF9fZ3JvdXBfX2xhYmVsXCI+XG4gICAgICAgICAgICAgIHt0KCdldGhlcmV1bVB1YmxpY0FkZHJlc3MnKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge3RoaXMucmVuZGVySW5wdXQoKX1cbiAgICAgICAgICAgIHtlcnJvclRvUmVuZGVyICYmIChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGRyZXNzLWJvb2tfX2FkZC1jb250YWN0X19lcnJvclwiPlxuICAgICAgICAgICAgICAgIHt0KGVycm9yVG9SZW5kZXIpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8UGFnZUNvbnRhaW5lckZvb3RlclxuICAgICAgICAgIGNhbmNlbFRleHQ9e3RoaXMuY29udGV4dC50KCdjYW5jZWwnKX1cbiAgICAgICAgICBkaXNhYmxlZD17Qm9vbGVhbih0aGlzLnN0YXRlLmVycm9yKX1cbiAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgYWRkVG9BZGRyZXNzQm9vayhcbiAgICAgICAgICAgICAgZW5zUmVzb2x1dGlvbiB8fCB0aGlzLnN0YXRlLmV0aEFkZHJlc3MsXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUubmV3TmFtZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goQ09OVEFDVF9MSVNUX1JPVVRFKTtcbiAgICAgICAgICB9fVxuICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PiB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goQ09OVEFDVF9MSVNUX1JPVVRFKTtcbiAgICAgICAgICB9fVxuICAgICAgICAgIHN1Ym1pdFRleHQ9e3RoaXMuY29udGV4dC50KCdzYXZlJyl9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IE5ldHdvcmtzTGlzdEl0ZW0gZnJvbSAnLi4vbmV0d29ya3MtbGlzdC1pdGVtJztcblxuY29uc3QgTmV0d29ya3NMaXN0ID0gKHtcbiAgbmV0d29ya0lzU2VsZWN0ZWQsXG4gIG5ldHdvcmtzVG9SZW5kZXIsXG4gIG5ldHdvcmtEZWZhdWx0ZWRUb1Byb3ZpZGVyLFxuICBzZWxlY3RlZFJwY1VybCxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ25ldHdvcmtzLXRhYl9fbmV0d29ya3MtbGlzdCcsIHtcbiAgICAgICAgJ25ldHdvcmtzLXRhYl9fbmV0d29ya3MtbGlzdC0tc2VsZWN0aW9uJzpcbiAgICAgICAgICBuZXR3b3JrSXNTZWxlY3RlZCAmJiAhbmV0d29ya0RlZmF1bHRlZFRvUHJvdmlkZXIsXG4gICAgICB9KX1cbiAgICA+XG4gICAgICB7bmV0d29ya3NUb1JlbmRlci5tYXAoKG5ldHdvcmspID0+IChcbiAgICAgICAgPE5ldHdvcmtzTGlzdEl0ZW1cbiAgICAgICAgICBrZXk9e2BzZXR0aW5ncy1uZXR3b3JrLWxpc3Q6JHtuZXR3b3JrLnJwY1VybH1gfVxuICAgICAgICAgIG5ldHdvcms9e25ldHdvcmt9XG4gICAgICAgICAgbmV0d29ya0lzU2VsZWN0ZWQ9e25ldHdvcmtJc1NlbGVjdGVkfVxuICAgICAgICAgIHNlbGVjdGVkUnBjVXJsPXtzZWxlY3RlZFJwY1VybH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuTmV0d29ya3NMaXN0LnByb3BUeXBlcyA9IHtcbiAgbmV0d29ya0RlZmF1bHRlZFRvUHJvdmlkZXI6IFByb3BUeXBlcy5ib29sLFxuICBuZXR3b3JrSXNTZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIG5ldHdvcmtzVG9SZW5kZXI6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLmlzUmVxdWlyZWQsXG4gIHNlbGVjdGVkUnBjVXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTmV0d29ya3NMaXN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tdW5yZWFjaGFibGUtbG9vcFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkU3ludGF4RXJyb3IgPSBTeW50YXhFcnJvcjtcbnZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBnZXRFdmFsbGVkQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoZXhwcmVzc2lvblN5bnRheCkge1xuXHR0cnkge1xuXHRcdHJldHVybiAkRnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOyByZXR1cm4gKCcgKyBleHByZXNzaW9uU3ludGF4ICsgJykuY29uc3RydWN0b3I7JykoKTtcblx0fSBjYXRjaCAoZSkge31cbn07XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRCh7fSwgJycpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0JGdPUEQgPSBudWxsOyAvLyB0aGlzIGlzIElFIDgsIHdoaWNoIGhhcyBhIGJyb2tlbiBnT1BEXG5cdH1cbn1cblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkge1xuXHR0aHJvdyBuZXcgJFR5cGVFcnJvcigpO1xufTtcbnZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEXG5cdD8gKGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucywgbm8tY2FsbGVyLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0XHRcdGFyZ3VtZW50cy5jYWxsZWU7IC8vIElFIDggZG9lcyBub3QgdGhyb3cgaGVyZVxuXHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gSUUgOCB0aHJvd3Mgb24gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhcmd1bWVudHMsICcnKVxuXHRcdFx0XHRyZXR1cm4gJGdPUEQoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZ09QRHRocm93cykge1xuXHRcdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KCkpXG5cdDogdGhyb3dUeXBlRXJyb3I7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguX19wcm90b19fOyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG5cbnZhciBuZWVkc0V2YWwgPSB7fTtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBnZXRQcm90byhVaW50OEFycmF5KTtcblxudmFyIElOVFJJTlNJQ1MgPSB7XG5cdCclQWdncmVnYXRlRXJyb3IlJzogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFnZ3JlZ2F0ZUVycm9yLFxuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogbmVlZHNFdmFsLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCaWdJbnQlJzogdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQsXG5cdCclQm9vbGVhbiUnOiBCb29sZWFuLFxuXHQnJURhdGFWaWV3JSc6IHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBEYXRhVmlldyxcblx0JyVEYXRlJSc6IERhdGUsXG5cdCclZGVjb2RlVVJJJSc6IGRlY29kZVVSSSxcblx0JyVkZWNvZGVVUklDb21wb25lbnQlJzogZGVjb2RlVVJJQ29tcG9uZW50LFxuXHQnJWVuY29kZVVSSSUnOiBlbmNvZGVVUkksXG5cdCclZW5jb2RlVVJJQ29tcG9uZW50JSc6IGVuY29kZVVSSUNvbXBvbmVudCxcblx0JyVFcnJvciUnOiBFcnJvcixcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiBFdmFsRXJyb3IsXG5cdCclRmxvYXQzMkFycmF5JSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LFxuXHQnJUZsb2F0NjRBcnJheSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheSxcblx0JyVGaW5hbGl6YXRpb25SZWdpc3RyeSUnOiB0eXBlb2YgRmluYWxpemF0aW9uUmVnaXN0cnkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmluYWxpemF0aW9uUmVnaXN0cnksXG5cdCclRnVuY3Rpb24lJzogJEZ1bmN0aW9uLFxuXHQnJUdlbmVyYXRvckZ1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVJbnQ4QXJyYXklJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXksXG5cdCclSW50MTZBcnJheSUnOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQxNkFycmF5LFxuXHQnJUludDMyQXJyYXklJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheSxcblx0JyVpc0Zpbml0ZSUnOiBpc0Zpbml0ZSxcblx0JyVpc05hTiUnOiBpc05hTixcblx0JyVJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSkgOiB1bmRlZmluZWQsXG5cdCclSlNPTiUnOiB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgPyBKU09OIDogdW5kZWZpbmVkLFxuXHQnJU1hcCUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcCxcblx0JyVNYXBJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU9iamVjdCUnOiBPYmplY3QsXG5cdCclcGFyc2VGbG9hdCUnOiBwYXJzZUZsb2F0LFxuXHQnJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCclUmFuZ2VFcnJvciUnOiBSYW5nZUVycm9yLFxuXHQnJVJlZmVyZW5jZUVycm9yJSc6IFJlZmVyZW5jZUVycm9yLFxuXHQnJVJlZmxlY3QlJzogdHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUmVmbGVjdCxcblx0JyVSZWdFeHAlJzogUmVnRXhwLFxuXHQnJVNldCUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldCxcblx0JyVTZXRJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6ICRTeW50YXhFcnJvcixcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVSSUVycm9yJSc6IFVSSUVycm9yLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrUmVmJSc6IHR5cGVvZiBXZWFrUmVmID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtSZWYsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0XG59O1xuXG52YXIgZG9FdmFsID0gZnVuY3Rpb24gZG9FdmFsKG5hbWUpIHtcblx0dmFyIHZhbHVlO1xuXHRpZiAobmFtZSA9PT0gJyVBc3luY0Z1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24gKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUdlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvciUnKSB7XG5cdFx0dmFyIGZuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKTtcblx0XHRpZiAoZm4pIHtcblx0XHRcdHZhbHVlID0gZm4ucHJvdG90eXBlO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJykge1xuXHRcdHZhciBnZW4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvciUnKTtcblx0XHRpZiAoZ2VuKSB7XG5cdFx0XHR2YWx1ZSA9IGdldFByb3RvKGdlbi5wcm90b3R5cGUpO1xuXHRcdH1cblx0fVxuXG5cdElOVFJJTlNJQ1NbbmFtZV0gPSB2YWx1ZTtcblxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG5cdCclQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvdHlwZSUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG9fZW50cmllcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdlbnRyaWVzJ10sXG5cdCclQXJyYXlQcm90b19mb3JFYWNoJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2ZvckVhY2gnXSxcblx0JyVBcnJheVByb3RvX2tleXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAna2V5cyddLFxuXHQnJUFycmF5UHJvdG9fdmFsdWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ3ZhbHVlcyddLFxuXHQnJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlJzogWydBc3luY0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUJvb2xlYW5Qcm90b3R5cGUlJzogWydCb29sZWFuJywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGFWaWV3UHJvdG90eXBlJSc6IFsnRGF0YVZpZXcnLCAncHJvdG90eXBlJ10sXG5cdCclRGF0ZVByb3RvdHlwZSUnOiBbJ0RhdGUnLCAncHJvdG90eXBlJ10sXG5cdCclRXJyb3JQcm90b3R5cGUlJzogWydFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVFdmFsRXJyb3JQcm90b3R5cGUlJzogWydFdmFsRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQzMkFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0NjRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvciUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQ4QXJyYXlQcm90b3R5cGUlJzogWydJbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ0ludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ0ludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSlNPTlBhcnNlJSc6IFsnSlNPTicsICdwYXJzZSddLFxuXHQnJUpTT05TdHJpbmdpZnklJzogWydKU09OJywgJ3N0cmluZ2lmeSddLFxuXHQnJU1hcFByb3RvdHlwZSUnOiBbJ01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVOdW1iZXJQcm90b3R5cGUlJzogWydOdW1iZXInLCAncHJvdG90eXBlJ10sXG5cdCclT2JqZWN0UHJvdG90eXBlJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZSddLFxuXHQnJU9ialByb3RvX3RvU3RyaW5nJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd0b1N0cmluZyddLFxuXHQnJU9ialByb3RvX3ZhbHVlT2YlJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3ZhbHVlT2YnXSxcblx0JyVQcm9taXNlUHJvdG90eXBlJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnXSxcblx0JyVQcm9taXNlUHJvdG9fdGhlbiUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJywgJ3RoZW4nXSxcblx0JyVQcm9taXNlX2FsbCUnOiBbJ1Byb21pc2UnLCAnYWxsJ10sXG5cdCclUHJvbWlzZV9yZWplY3QlJzogWydQcm9taXNlJywgJ3JlamVjdCddLFxuXHQnJVByb21pc2VfcmVzb2x2ZSUnOiBbJ1Byb21pc2UnLCAncmVzb2x2ZSddLFxuXHQnJVJhbmdlRXJyb3JQcm90b3R5cGUlJzogWydSYW5nZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZmVyZW5jZUVycm9yUHJvdG90eXBlJSc6IFsnUmVmZXJlbmNlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVnRXhwUHJvdG90eXBlJSc6IFsnUmVnRXhwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVNldFByb3RvdHlwZSUnOiBbJ1NldCcsICdwcm90b3R5cGUnXSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ1NoYXJlZEFycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN0cmluZ1Byb3RvdHlwZSUnOiBbJ1N0cmluZycsICdwcm90b3R5cGUnXSxcblx0JyVTeW1ib2xQcm90b3R5cGUlJzogWydTeW1ib2wnLCAncHJvdG90eXBlJ10sXG5cdCclU3ludGF4RXJyb3JQcm90b3R5cGUlJzogWydTeW50YXhFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVHlwZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlRXJyb3JQcm90b3R5cGUlJzogWydUeXBlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogWydVaW50OENsYW1wZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnVWludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVVJJRXJyb3JQcm90b3R5cGUlJzogWydVUklFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrTWFwUHJvdG90eXBlJSc6IFsnV2Vha01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrU2V0UHJvdG90eXBlJSc6IFsnV2Vha1NldCcsICdwcm90b3R5cGUnXVxufTtcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgJGNvbmNhdCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUuY29uY2F0KTtcbnZhciAkc3BsaWNlQXBwbHkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgJHN0clNsaWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xuXG4vKiBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvYmxvYi80LjE3LjE1L2Rpc3QvbG9kYXNoLmpzI0w2NzM1LUw2NzQ0ICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXiUuW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JSQpKS9nO1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nOyAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBmdW5jdGlvbiBzdHJpbmdUb1BhdGgoc3RyaW5nKSB7XG5cdHZhciBmaXJzdCA9ICRzdHJTbGljZShzdHJpbmcsIDAsIDEpO1xuXHR2YXIgbGFzdCA9ICRzdHJTbGljZShzdHJpbmcsIC0xKTtcblx0aWYgKGZpcnN0ID09PSAnJScgJiYgbGFzdCAhPT0gJyUnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBjbG9zaW5nIGAlYCcpO1xuXHR9IGVsc2UgaWYgKGxhc3QgPT09ICclJyAmJiBmaXJzdCAhPT0gJyUnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBvcGVuaW5nIGAlYCcpO1xuXHR9XG5cdHZhciByZXN1bHQgPSBbXTtcblx0JHJlcGxhY2Uoc3RyaW5nLCByZVByb3BOYW1lLCBmdW5jdGlvbiAobWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuXHRcdHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHF1b3RlID8gJHJlcGxhY2Uoc3ViU3RyaW5nLCByZUVzY2FwZUNoYXIsICckMScpIDogbnVtYmVyIHx8IG1hdGNoO1xuXHR9KTtcblx0cmV0dXJuIHJlc3VsdDtcbn07XG4vKiBlbmQgYWRhcHRhdGlvbiAqL1xuXG52YXIgZ2V0QmFzZUludHJpbnNpYyA9IGZ1bmN0aW9uIGdldEJhc2VJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWNOYW1lID0gbmFtZTtcblx0dmFyIGFsaWFzO1xuXHRpZiAoaGFzT3duKExFR0FDWV9BTElBU0VTLCBpbnRyaW5zaWNOYW1lKSkge1xuXHRcdGFsaWFzID0gTEVHQUNZX0FMSUFTRVNbaW50cmluc2ljTmFtZV07XG5cdFx0aW50cmluc2ljTmFtZSA9ICclJyArIGFsaWFzWzBdICsgJyUnO1xuXHR9XG5cblx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNOYW1lKSkge1xuXHRcdHZhciB2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljTmFtZV07XG5cdFx0aWYgKHZhbHVlID09PSBuZWVkc0V2YWwpIHtcblx0XHRcdHZhbHVlID0gZG9FdmFsKGludHJpbnNpY05hbWUpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJiAhYWxsb3dNaXNzaW5nKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSEnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YWxpYXM6IGFsaWFzLFxuXHRcdFx0bmFtZTogaW50cmluc2ljTmFtZSxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH07XG5cdH1cblxuXHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1wiYWxsb3dNaXNzaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblx0dmFyIGludHJpbnNpY0Jhc2VOYW1lID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJyc7XG5cblx0dmFyIGludHJpbnNpYyA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdHZhciBpbnRyaW5zaWNSZWFsTmFtZSA9IGludHJpbnNpYy5uYW1lO1xuXHR2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG5cdHZhciBza2lwRnVydGhlckNhY2hpbmcgPSBmYWxzZTtcblxuXHR2YXIgYWxpYXMgPSBpbnRyaW5zaWMuYWxpYXM7XG5cdGlmIChhbGlhcykge1xuXHRcdGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG5cdFx0JHNwbGljZUFwcGx5KHBhcnRzLCAkY29uY2F0KFswLCAxXSwgYWxpYXMpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAxLCBpc093biA9IHRydWU7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdHZhciBwYXJ0ID0gcGFydHNbaV07XG5cdFx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHBhcnQsIDAsIDEpO1xuXHRcdHZhciBsYXN0ID0gJHN0clNsaWNlKHBhcnQsIC0xKTtcblx0XHRpZiAoXG5cdFx0XHQoXG5cdFx0XHRcdChmaXJzdCA9PT0gJ1wiJyB8fCBmaXJzdCA9PT0gXCInXCIgfHwgZmlyc3QgPT09ICdgJylcblx0XHRcdFx0fHwgKGxhc3QgPT09ICdcIicgfHwgbGFzdCA9PT0gXCInXCIgfHwgbGFzdCA9PT0gJ2AnKVxuXHRcdFx0KVxuXHRcdFx0JiYgZmlyc3QgIT09IGxhc3Rcblx0XHQpIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ3Byb3BlcnR5IG5hbWVzIHdpdGggcXVvdGVzIG11c3QgaGF2ZSBtYXRjaGluZyBxdW90ZXMnKTtcblx0XHR9XG5cdFx0aWYgKHBhcnQgPT09ICdjb25zdHJ1Y3RvcicgfHwgIWlzT3duKSB7XG5cdFx0XHRza2lwRnVydGhlckNhY2hpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGludHJpbnNpY0Jhc2VOYW1lICs9ICcuJyArIHBhcnQ7XG5cdFx0aW50cmluc2ljUmVhbE5hbWUgPSAnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJztcblxuXHRcdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG5cdFx0XHR2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCEocGFydCBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKCFhbGxvd01pc3NpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYmFzZSBpbnRyaW5zaWMgZm9yICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCB0aGUgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZS4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdm9pZCB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdGlzT3duID0gISFkZXNjO1xuXG5cdFx0XHRcdC8vIEJ5IGNvbnZlbnRpb24sIHdoZW4gYSBkYXRhIHByb3BlcnR5IGlzIGNvbnZlcnRlZCB0byBhbiBhY2Nlc3NvclxuXHRcdFx0XHQvLyBwcm9wZXJ0eSB0byBlbXVsYXRlIGEgZGF0YSBwcm9wZXJ0eSB0aGF0IGRvZXMgbm90IHN1ZmZlciBmcm9tXG5cdFx0XHRcdC8vIHRoZSBvdmVycmlkZSBtaXN0YWtlLCB0aGF0IGFjY2Vzc29yJ3MgZ2V0dGVyIGlzIG1hcmtlZCB3aXRoXG5cdFx0XHRcdC8vIGFuIGBvcmlnaW5hbFZhbHVlYCBwcm9wZXJ0eS4gSGVyZSwgd2hlbiB3ZSBkZXRlY3QgdGhpcywgd2Vcblx0XHRcdFx0Ly8gdXBob2xkIHRoZSBpbGx1c2lvbiBieSBwcmV0ZW5kaW5nIHRvIHNlZSB0aGF0IG9yaWdpbmFsIGRhdGFcblx0XHRcdFx0Ly8gcHJvcGVydHksIGkuZS4sIHJldHVybmluZyB0aGUgdmFsdWUgcmF0aGVyIHRoYW4gdGhlIGdldHRlclxuXHRcdFx0XHQvLyBpdHNlbGYuXG5cdFx0XHRcdGlmIChpc093biAmJiAnZ2V0JyBpbiBkZXNjICYmICEoJ29yaWdpbmFsVmFsdWUnIGluIGRlc2MuZ2V0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gZGVzYy5nZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXNPd24gPSBoYXNPd24odmFsdWUsIHBhcnQpO1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNPd24gJiYgIXNraXBGdXJ0aGVyQ2FjaGluZykge1xuXHRcdFx0XHRJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgbnVtYmVyVG9CTiA9IHJlcXVpcmUoJ251bWJlci10by1ibicpO1xudmFyIGtlY2NhazI1NiA9IHJlcXVpcmUoJ2pzLXNoYTMnKS5rZWNjYWtfMjU2O1xuXG4vLyBmcm9tIGV0aGVyZXVtanMtdXRpbFxuZnVuY3Rpb24gc3RyaXBaZXJvcyhhSW5wdXQpIHtcbiAgdmFyIGEgPSBhSW5wdXQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdmFyIGZpcnN0ID0gYVswXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB3aGlsZSAoYS5sZW5ndGggPiAwICYmIGZpcnN0LnRvU3RyaW5nKCkgPT09ICcwJykge1xuICAgIGEgPSBhLnNsaWNlKDEpO1xuICAgIGZpcnN0ID0gYVswXTtcbiAgfVxuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gYm5Ub0J1ZmZlcihibklucHV0KSB7XG4gIHZhciBibiA9IGJuSW5wdXQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdmFyIGhleCA9IGJuLnRvU3RyaW5nKDE2KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBpZiAoaGV4Lmxlbmd0aCAlIDIpIHtcbiAgICBoZXggPSAnMCcgKyBoZXg7XG4gIH1cbiAgcmV0dXJuIHN0cmlwWmVyb3MobmV3IEJ1ZmZlcihoZXgsICdoZXgnKSk7XG59XG5cbmZ1bmN0aW9uIGlzSGV4U3RyaW5nKHZhbHVlLCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgIXZhbHVlLm1hdGNoKC9eMHhbMC05QS1GYS1mXSokLykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxlbmd0aCAmJiB2YWx1ZS5sZW5ndGggIT09IDIgKyAyICogbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBoZXhPckJ1ZmZlcih2YWx1ZUlucHV0LCBuYW1lKSB7XG4gIHZhciB2YWx1ZSA9IHZhbHVlSW5wdXQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgaWYgKCFpc0hleFN0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihuYW1lID8gJ1tldGhqcy1hYmldIGludmFsaWQgJyArIG5hbWUgOiAnW2V0aGpzLWFiaV0gaW52YWxpZCBoZXggb3IgYnVmZmVyLCBtdXN0IGJlIGEgcHJlZml4ZWQgYWxwaGFudW1lcmljIGV2ZW4gbGVuZ3RoIGhleCBzdHJpbmcnKTtcbiAgICAgIGVycm9yLnJlYXNvbiA9ICdbZXRoanMtYWJpXSBpbnZhbGlkIGhleCBzdHJpbmcsIGhleCBtdXN0IGJlIHByZWZpeGVkIGFuZCBhbHBoYW51bWVyaWMgKGUuZy4gMHgwMjMuLiknO1xuICAgICAgZXJyb3IudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDIpO1xuICAgIGlmICh2YWx1ZS5sZW5ndGggJSAyKSB7XG4gICAgICB2YWx1ZSA9ICcwJyArIHZhbHVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IG5ldyBCdWZmZXIodmFsdWUsICdoZXgnKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gaGV4bGlmeSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAnMHgnICsgYm5Ub0J1ZmZlcihuZXcgQk4odmFsdWUpKS50b1N0cmluZygnaGV4Jyk7XG4gIH0gZWxzZSBpZiAodmFsdWUubW9kIHx8IHZhbHVlLm1vZHVsbykge1xuICAgIHJldHVybiAnMHgnICsgYm5Ub0J1ZmZlcih2YWx1ZSkudG9TdHJpbmcoJ2hleCcpO1xuICB9IGVsc2Uge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gJzB4JyArIGhleE9yQnVmZmVyKHZhbHVlKS50b1N0cmluZygnaGV4Jyk7XG4gIH1cbn1cblxuLy8gZ2V0S2V5cyhbe2E6IDEsIGI6IDJ9LCB7YTogMywgYjogNH1dLCAnYScpID0+IFsxLCAzXVxuZnVuY3Rpb24gZ2V0S2V5cyhwYXJhbXMsIGtleSwgYWxsb3dFbXB0eSkge1xuICB2YXIgcmVzdWx0ID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBpZiAoIUFycmF5LmlzQXJyYXkocGFyYW1zKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLWFiaV0gd2hpbGUgZ2V0dGluZyBrZXlzLCBpbnZhbGlkIHBhcmFtcyB2YWx1ZSAnICsgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB2YXIgdmFsdWUgPSBwYXJhbXNbaV1ba2V5XTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChhbGxvd0VtcHR5ICYmICF2YWx1ZSkge1xuICAgICAgdmFsdWUgPSAnJztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLWFiaV0gd2hpbGUgZ2V0S2V5cyBmb3VuZCBpbnZhbGlkIEFCSSBkYXRhIHN0cnVjdHVyZSwgdHlwZSB2YWx1ZSBub3Qgc3RyaW5nJyk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNvZGVyTnVtYmVyKHNpemUsIHNpZ25lZCkge1xuICByZXR1cm4ge1xuICAgIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlTnVtYmVyKHZhbHVlSW5wdXQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHZhbHVlSW5wdXQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUudG9TdHJpbmcgJiYgKHZhbHVlLnRvVHdvcyB8fCB2YWx1ZS5kaXZpZGVkVG9JbnRlZ2VyQnkpKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoMTApLnNwbGl0KCcuJylbMF07XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpLnNwbGl0KCcuJylbMF07XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gbnVtYmVyVG9CTih2YWx1ZSk7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvVHdvcyhzaXplICogOCkubWFza24oc2l6ZSAqIDgpO1xuICAgICAgaWYgKHNpZ25lZCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLmZyb21Ud29zKHNpemUgKiA4KS50b1R3b3MoMjU2KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKTtcbiAgICB9LFxuICAgIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlTnVtYmVyKGRhdGEsIG9mZnNldCkge1xuICAgICAgdmFyIGp1bmtMZW5ndGggPSAzMiAtIHNpemU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBCTihkYXRhLnNsaWNlKG9mZnNldCArIGp1bmtMZW5ndGgsIG9mZnNldCArIDMyKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmIChzaWduZWQpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5mcm9tVHdvcyhzaXplICogOCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLm1hc2tuKHNpemUgKiA4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnN1bWVkOiAzMixcbiAgICAgICAgdmFsdWU6IG5ldyBCTih2YWx1ZS50b1N0cmluZygxMCkpXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cbnZhciB1aW50MjU2Q29kZXIgPSBjb2Rlck51bWJlcigzMiwgZmFsc2UpO1xuXG52YXIgY29kZXJCb29sZWFuID0ge1xuICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZUJvb2xlYW4odmFsdWUpIHtcbiAgICByZXR1cm4gdWludDI1NkNvZGVyLmVuY29kZSh2YWx1ZSA/IDEgOiAwKTtcbiAgfSxcbiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGVCb29sZWFuKGRhdGEsIG9mZnNldCkge1xuICAgIHZhciByZXN1bHQgPSB1aW50MjU2Q29kZXIuZGVjb2RlKGRhdGEsIG9mZnNldCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4ge1xuICAgICAgY29uc3VtZWQ6IHJlc3VsdC5jb25zdW1lZCxcbiAgICAgIHZhbHVlOiAhcmVzdWx0LnZhbHVlLmlzWmVybygpXG4gICAgfTtcbiAgfVxufTtcblxuZnVuY3Rpb24gY29kZXJGaXhlZEJ5dGVzKGxlbmd0aCkge1xuICByZXR1cm4ge1xuICAgIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlRml4ZWRCeXRlcyh2YWx1ZUlucHV0KSB7XG4gICAgICB2YXIgdmFsdWUgPSB2YWx1ZUlucHV0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICB2YWx1ZSA9IGhleE9yQnVmZmVyKHZhbHVlKTtcblxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMzIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IEJ1ZmZlcigzMik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIHJlc3VsdC5maWxsKDApO1xuICAgICAgdmFsdWUuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlRml4ZWRCeXRlcyhkYXRhLCBvZmZzZXQpIHtcbiAgICAgIGlmIChkYXRhLmxlbmd0aCAhPT0gMCAmJiBkYXRhLmxlbmd0aCA8IG9mZnNldCArIDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLWFiaV0gd2hpbGUgZGVjb2RpbmcgZml4ZWQgYnl0ZXMsIGludmFsaWQgYnl0ZXMgZGF0YSBsZW5ndGg6ICcgKyBsZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb25zdW1lZDogMzIsXG4gICAgICAgIHZhbHVlOiAnMHgnICsgZGF0YS5zbGljZShvZmZzZXQsIG9mZnNldCArIGxlbmd0aCkudG9TdHJpbmcoJ2hleCcpXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIGNvZGVyQWRkcmVzcyA9IHtcbiAgZW5jb2RlOiBmdW5jdGlvbiBlbmNvZGVBZGRyZXNzKHZhbHVlSW5wdXQpIHtcbiAgICB2YXIgdmFsdWUgPSB2YWx1ZUlucHV0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBCdWZmZXIoMzIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKCFpc0hleFN0cmluZyh2YWx1ZSwgMjApKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1hYmldIHdoaWxlIGVuY29kaW5nIGFkZHJlc3MsIGludmFsaWQgYWRkcmVzcyB2YWx1ZSwgbm90IGFscGhhbnVtZXJpYyAyMCBieXRlIGhleCBzdHJpbmcnKTtcbiAgICB9XG4gICAgdmFsdWUgPSBoZXhPckJ1ZmZlcih2YWx1ZSk7XG4gICAgcmVzdWx0LmZpbGwoMCk7XG4gICAgdmFsdWUuY29weShyZXN1bHQsIDEyKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZUFkZHJlc3MoZGF0YSwgb2Zmc2V0KSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb25zdW1lZDogMzIsXG4gICAgICAgIHZhbHVlOiAnMHgnXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoZGF0YS5sZW5ndGggIT09IDAgJiYgZGF0YS5sZW5ndGggPCBvZmZzZXQgKyAzMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtYWJpXSB3aGlsZSBkZWNvZGluZyBhZGRyZXNzIGRhdGEsIGludmFsaWQgYWRkcmVzcyBkYXRhLCBpbnZhbGlkIGJ5dGUgbGVuZ3RoICcgKyBkYXRhLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjb25zdW1lZDogMzIsXG4gICAgICB2YWx1ZTogJzB4JyArIGRhdGEuc2xpY2Uob2Zmc2V0ICsgMTIsIG9mZnNldCArIDMyKS50b1N0cmluZygnaGV4JylcbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBlbmNvZGVEeW5hbWljQnl0ZXNIZWxwZXIodmFsdWUpIHtcbiAgdmFyIGRhdGFMZW5ndGggPSBwYXJzZUludCgzMiAqIE1hdGguY2VpbCh2YWx1ZS5sZW5ndGggLyAzMikpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHZhciBwYWRkaW5nID0gbmV3IEJ1ZmZlcihkYXRhTGVuZ3RoIC0gdmFsdWUubGVuZ3RoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBwYWRkaW5nLmZpbGwoMCk7XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW3VpbnQyNTZDb2Rlci5lbmNvZGUodmFsdWUubGVuZ3RoKSwgdmFsdWUsIHBhZGRpbmddKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlRHluYW1pY0J5dGVzSGVscGVyKGRhdGEsIG9mZnNldCkge1xuICBpZiAoZGF0YS5sZW5ndGggIT09IDAgJiYgZGF0YS5sZW5ndGggPCBvZmZzZXQgKyAzMikge1xuICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLWFiaV0gd2hpbGUgZGVjb2RpbmcgZHluYW1pYyBieXRlcyBkYXRhLCBpbnZhbGlkIGJ5dGVzIGxlbmd0aDogJyArIGRhdGEubGVuZ3RoICsgJyBzaG91bGQgYmUgbGVzcyB0aGFuICcgKyAob2Zmc2V0ICsgMzIpKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSB1aW50MjU2Q29kZXIuZGVjb2RlKGRhdGEsIG9mZnNldCkudmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGVuZ3RoID0gbGVuZ3RoLnRvTnVtYmVyKCk7XG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gMCAmJiBkYXRhLmxlbmd0aCA8IG9mZnNldCArIDMyICsgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtYWJpXSB3aGlsZSBkZWNvZGluZyBkeW5hbWljIGJ5dGVzIGRhdGEsIGludmFsaWQgYnl0ZXMgbGVuZ3RoOiAnICsgZGF0YS5sZW5ndGggKyAnIHNob3VsZCBiZSBsZXNzIHRoYW4gJyArIChvZmZzZXQgKyAzMiArIGxlbmd0aCkpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjb25zdW1lZDogcGFyc2VJbnQoMzIgKyAzMiAqIE1hdGguY2VpbChsZW5ndGggLyAzMiksIDEwKSxcbiAgICB2YWx1ZTogZGF0YS5zbGljZShvZmZzZXQgKyAzMiwgb2Zmc2V0ICsgMzIgKyBsZW5ndGgpXG4gIH07XG59XG5cbnZhciBjb2RlckR5bmFtaWNCeXRlcyA9IHtcbiAgZW5jb2RlOiBmdW5jdGlvbiBlbmNvZGVEeW5hbWljQnl0ZXModmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2RlRHluYW1pY0J5dGVzSGVscGVyKGhleE9yQnVmZmVyKHZhbHVlKSk7XG4gIH0sXG4gIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlRHluYW1pY0J5dGVzKGRhdGEsIG9mZnNldCkge1xuICAgIHZhciByZXN1bHQgPSBkZWNvZGVEeW5hbWljQnl0ZXNIZWxwZXIoZGF0YSwgb2Zmc2V0KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHJlc3VsdC52YWx1ZSA9ICcweCcgKyByZXN1bHQudmFsdWUudG9TdHJpbmcoJ2hleCcpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIGR5bmFtaWM6IHRydWVcbn07XG5cbnZhciBjb2RlclN0cmluZyA9IHtcbiAgZW5jb2RlOiBmdW5jdGlvbiBlbmNvZGVTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2RlRHluYW1pY0J5dGVzSGVscGVyKG5ldyBCdWZmZXIodmFsdWUsICd1dGY4JykpO1xuICB9LFxuICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZVN0cmluZyhkYXRhLCBvZmZzZXQpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGVjb2RlRHluYW1pY0J5dGVzSGVscGVyKGRhdGEsIG9mZnNldCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICByZXN1bHQudmFsdWUgPSByZXN1bHQudmFsdWUudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBkeW5hbWljOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBjb2RlckFycmF5KGNvZGVyLCBsZW5ndGhJbnB1dCkge1xuICByZXR1cm4ge1xuICAgIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlQXJyYXkodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgQnVmZmVyKDApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoSW5wdXQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1hYmldIHdoaWxlIGVuY29kaW5nIGFycmF5LCBpbnZhbGlkIGFycmF5IGRhdGEsIG5vdCB0eXBlIE9iamVjdCAoQXJyYXkpJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsZW5ndGggPT09IC0xKSB7XG4gICAgICAgIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgcmVzdWx0ID0gdWludDI1NkNvZGVyLmVuY29kZShsZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGVuZ3RoICE9PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtYWJpXSB3aGlsZSBlbmNvZGluZyBhcnJheSwgc2l6ZSBtaXNtYXRjaCBhcnJheSBsZW5ndGggJyArIGxlbmd0aCArICcgZG9lcyBub3QgZXF1YWwgJyArIHZhbHVlLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdFZhbHVlKSB7XG4gICAgICAgIHJlc3VsdCA9IEJ1ZmZlci5jb25jYXQoW3Jlc3VsdCwgY29kZXIuZW5jb2RlKHJlc3VsdFZhbHVlKV0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZUFycmF5KGRhdGEsIG9mZnNldElucHV0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoSW5wdXQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIHZhciBvZmZzZXQgPSBvZmZzZXRJbnB1dDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgLy8gQFRPRE86XG4gICAgICAvLyBpZiAoZGF0YS5sZW5ndGggPCBvZmZzZXQgKyBsZW5ndGggKiAzMikgeyB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYXJyYXknKTsgfVxuXG4gICAgICB2YXIgY29uc3VtZWQgPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICB2YXIgZGVjb2RlUmVzdWx0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgIGlmIChsZW5ndGggPT09IC0xKSB7XG4gICAgICAgIGRlY29kZVJlc3VsdCA9IHVpbnQyNTZDb2Rlci5kZWNvZGUoZGF0YSwgb2Zmc2V0KTtcbiAgICAgICAgbGVuZ3RoID0gZGVjb2RlUmVzdWx0LnZhbHVlLnRvTnVtYmVyKCk7XG4gICAgICAgIGNvbnN1bWVkICs9IGRlY29kZVJlc3VsdC5jb25zdW1lZDtcbiAgICAgICAgb2Zmc2V0ICs9IGRlY29kZVJlc3VsdC5jb25zdW1lZDtcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIHZhciBsb29wUmVzdWx0ID0gY29kZXIuZGVjb2RlKGRhdGEsIG9mZnNldCk7XG4gICAgICAgIGNvbnN1bWVkICs9IGxvb3BSZXN1bHQuY29uc3VtZWQ7XG4gICAgICAgIG9mZnNldCArPSBsb29wUmVzdWx0LmNvbnN1bWVkO1xuICAgICAgICB2YWx1ZS5wdXNoKGxvb3BSZXN1bHQudmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb25zdW1lZDogY29uc3VtZWQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9LFxuICAgIGR5bmFtaWM6IGxlbmd0aElucHV0ID09PSAtMVxuICB9O1xufVxuXG4vLyBCcmVhayB0aGUgdHlwZSB1cCBpbnRvIFtzdGF0aWNUeXBlXVtzdGF0aWNBcnJheV0qW2R5bmFtaWNBcnJheV0/IHwgW2R5bmFtaWNUeXBlXSBhbmRcbi8vIGJ1aWxkIHRoZSBjb2RlciB1cCBmcm9tIGl0cyBwYXJ0c1xudmFyIHBhcmFtVHlwZVBhcnQgPSBuZXcgUmVnRXhwKC9eKCh1P2ludHxieXRlcykoWzAtOV0qKXwoYWRkcmVzc3xib29sfHN0cmluZyl8KFxcWyhbMC05XSopXFxdKSkvKTtcblxuZnVuY3Rpb24gZ2V0UGFyYW1Db2Rlcih0eXBlSW5wdXQpIHtcbiAgdmFyIHR5cGUgPSB0eXBlSW5wdXQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdmFyIGNvZGVyID0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB2YXIgaW52YWxpZFR5cGVFcnJvck1lc3NhZ2UgPSAnW2V0aGpzLWFiaV0gd2hpbGUgZ2V0dGluZyBwYXJhbSBjb2RlciAoZ2V0UGFyYW1Db2RlcikgdHlwZSB2YWx1ZSAnICsgSlNPTi5zdHJpbmdpZnkodHlwZSkgKyAnIGlzIGVpdGhlciBpbnZhbGlkIG9yIHVuc3VwcG9ydGVkIGJ5IGV0aGpzLWFiaS4nO1xuXG4gIHdoaWxlICh0eXBlKSB7XG4gICAgdmFyIHBhcnQgPSB0eXBlLm1hdGNoKHBhcmFtVHlwZVBhcnQpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKCFwYXJ0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoaW52YWxpZFR5cGVFcnJvck1lc3NhZ2UpO1xuICAgIH1cbiAgICB0eXBlID0gdHlwZS5zdWJzdHJpbmcocGFydFswXS5sZW5ndGgpO1xuXG4gICAgdmFyIHByZWZpeCA9IHBhcnRbMl0gfHwgcGFydFs0XSB8fCBwYXJ0WzVdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgc3dpdGNoIChwcmVmaXgpIHtcbiAgICAgIGNhc2UgJ2ludCc6Y2FzZSAndWludCc6XG4gICAgICAgIGlmIChjb2Rlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihpbnZhbGlkVHlwZUVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGludFNpemUgPSBwYXJzZUludChwYXJ0WzNdIHx8IDI1Nik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgaWYgKGludFNpemUgPT09IDAgfHwgaW50U2l6ZSA+IDI1NiB8fCBpbnRTaXplICUgOCAhPT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLWFiaV0gd2hpbGUgZ2V0dGluZyBwYXJhbSBjb2RlciBmb3IgdHlwZSAnICsgdHlwZSArICcsIGludmFsaWQgJyArIHByZWZpeCArICc8Tj4gd2lkdGg6ICcgKyB0eXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvZGVyID0gY29kZXJOdW1iZXIoaW50U2l6ZSAvIDgsIHByZWZpeCA9PT0gJ2ludCcpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYm9vbCc6XG4gICAgICAgIGlmIChjb2Rlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihpbnZhbGlkVHlwZUVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29kZXIgPSBjb2RlckJvb2xlYW47XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBpZiAoY29kZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaW52YWxpZFR5cGVFcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVyID0gY29kZXJTdHJpbmc7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdieXRlcyc6XG4gICAgICAgIGlmIChjb2Rlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihpbnZhbGlkVHlwZUVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRbM10pIHtcbiAgICAgICAgICB2YXIgc2l6ZSA9IHBhcnNlSW50KHBhcnRbM10pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgaWYgKHNpemUgPT09IDAgfHwgc2l6ZSA+IDMyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1hYmldIHdoaWxlIGdldHRpbmcgcGFyYW0gY29kZXIgZm9yIHByZWZpeCBieXRlcywgaW52YWxpZCB0eXBlICcgKyB0eXBlICsgJywgc2l6ZSAnICsgc2l6ZSArICcgc2hvdWxkIGJlIDAgb3IgZ3JlYXRlciB0aGFuIDMyJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvZGVyID0gY29kZXJGaXhlZEJ5dGVzKHNpemUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvZGVyID0gY29kZXJEeW5hbWljQnl0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2FkZHJlc3MnOlxuICAgICAgICBpZiAoY29kZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaW52YWxpZFR5cGVFcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVyID0gY29kZXJBZGRyZXNzO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnW10nOlxuICAgICAgICBpZiAoIWNvZGVyIHx8IGNvZGVyLmR5bmFtaWMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaW52YWxpZFR5cGVFcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVyID0gY29kZXJBcnJheShjb2RlciwgLTEpO1xuICAgICAgICBicmVhaztcblxuICAgICAgLy8gXCJbMC05K11cIlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCFjb2RlciB8fCBjb2Rlci5keW5hbWljKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGludmFsaWRUeXBlRXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVmYXVsdFNpemUgPSBwYXJzZUludChwYXJ0WzZdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICBjb2RlciA9IGNvZGVyQXJyYXkoY29kZXIsIGRlZmF1bHRTaXplKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvZGVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGludmFsaWRUeXBlRXJyb3JNZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gY29kZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCTjogQk4sXG4gIGJuVG9CdWZmZXI6IGJuVG9CdWZmZXIsXG4gIGlzSGV4U3RyaW5nOiBpc0hleFN0cmluZyxcbiAgaGV4T3JCdWZmZXI6IGhleE9yQnVmZmVyLFxuICBoZXhsaWZ5OiBoZXhsaWZ5LFxuICBzdHJpcFplcm9zOiBzdHJpcFplcm9zLFxuXG4gIGtlY2NhazI1Njoga2VjY2FrMjU2LFxuXG4gIGdldEtleXM6IGdldEtleXMsXG4gIG51bWJlclRvQk46IG51bWJlclRvQk4sXG4gIGNvZGVyTnVtYmVyOiBjb2Rlck51bWJlcixcbiAgdWludDI1NkNvZGVyOiB1aW50MjU2Q29kZXIsXG4gIGNvZGVyQm9vbGVhbjogY29kZXJCb29sZWFuLFxuICBjb2RlckZpeGVkQnl0ZXM6IGNvZGVyRml4ZWRCeXRlcyxcbiAgY29kZXJBZGRyZXNzOiBjb2RlckFkZHJlc3MsXG4gIGNvZGVyRHluYW1pY0J5dGVzOiBjb2RlckR5bmFtaWNCeXRlcyxcbiAgY29kZXJTdHJpbmc6IGNvZGVyU3RyaW5nLFxuICBjb2RlckFycmF5OiBjb2RlckFycmF5LFxuICBwYXJhbVR5cGVQYXJ0OiBwYXJhbVR5cGVQYXJ0LFxuICBnZXRQYXJhbUNvZGVyOiBnZXRQYXJhbUNvZGVyXG59OyIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9pbmRleC5qcycpO1xudmFyIHVpbnQyNTZDb2RlciA9IHV0aWxzLnVpbnQyNTZDb2RlcjtcbnZhciBjb2RlckJvb2xlYW4gPSB1dGlscy5jb2RlckJvb2xlYW47XG52YXIgY29kZXJGaXhlZEJ5dGVzID0gdXRpbHMuY29kZXJGaXhlZEJ5dGVzO1xudmFyIGNvZGVyQWRkcmVzcyA9IHV0aWxzLmNvZGVyQWRkcmVzcztcbnZhciBjb2RlckR5bmFtaWNCeXRlcyA9IHV0aWxzLmNvZGVyRHluYW1pY0J5dGVzO1xudmFyIGNvZGVyU3RyaW5nID0gdXRpbHMuY29kZXJTdHJpbmc7XG52YXIgY29kZXJBcnJheSA9IHV0aWxzLmNvZGVyQXJyYXk7XG52YXIgcGFyYW1UeXBlUGFydCA9IHV0aWxzLnBhcmFtVHlwZVBhcnQ7XG52YXIgZ2V0UGFyYW1Db2RlciA9IHV0aWxzLmdldFBhcmFtQ29kZXI7XG5cbmZ1bmN0aW9uIFJlc3VsdCgpIHt9XG5cbmZ1bmN0aW9uIGVuY29kZVBhcmFtcyh0eXBlcywgdmFsdWVzKSB7XG4gIGlmICh0eXBlcy5sZW5ndGggIT09IHZhbHVlcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1hYmldIHdoaWxlIGVuY29kaW5nIHBhcmFtcywgdHlwZXMvdmFsdWVzIG1pc21hdGNoLCBZb3VyIGNvbnRyYWN0IHJlcXVpcmVzICcgKyB0eXBlcy5sZW5ndGggKyAnIHR5cGVzIChhcmd1bWVudHMpLCBhbmQgeW91IHBhc3NlZCBpbiAnICsgdmFsdWVzLmxlbmd0aCk7XG4gIH1cblxuICB2YXIgcGFydHMgPSBbXTtcblxuICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlLCBpbmRleCkge1xuICAgIHZhciBjb2RlciA9IGdldFBhcmFtQ29kZXIodHlwZSk7XG4gICAgcGFydHMucHVzaCh7IGR5bmFtaWM6IGNvZGVyLmR5bmFtaWMsIHZhbHVlOiBjb2Rlci5lbmNvZGUodmFsdWVzW2luZGV4XSkgfSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGFsaWduU2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KDMyICogTWF0aC5jZWlsKHNpemUgLyAzMikpO1xuICB9XG5cbiAgdmFyIHN0YXRpY1NpemUgPSAwLFxuICAgICAgZHluYW1pY1NpemUgPSAwO1xuICBwYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgaWYgKHBhcnQuZHluYW1pYykge1xuICAgICAgc3RhdGljU2l6ZSArPSAzMjtcbiAgICAgIGR5bmFtaWNTaXplICs9IGFsaWduU2l6ZShwYXJ0LnZhbHVlLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY1NpemUgKz0gYWxpZ25TaXplKHBhcnQudmFsdWUubGVuZ3RoKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBvZmZzZXQgPSAwLFxuICAgICAgZHluYW1pY09mZnNldCA9IHN0YXRpY1NpemU7XG4gIHZhciBkYXRhID0gbmV3IEJ1ZmZlcihzdGF0aWNTaXplICsgZHluYW1pY1NpemUpO1xuXG4gIHBhcnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcnQsIGluZGV4KSB7XG4gICAgaWYgKHBhcnQuZHluYW1pYykge1xuICAgICAgdWludDI1NkNvZGVyLmVuY29kZShkeW5hbWljT2Zmc2V0KS5jb3B5KGRhdGEsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gMzI7XG5cbiAgICAgIHBhcnQudmFsdWUuY29weShkYXRhLCBkeW5hbWljT2Zmc2V0KTtcbiAgICAgIGR5bmFtaWNPZmZzZXQgKz0gYWxpZ25TaXplKHBhcnQudmFsdWUubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFydC52YWx1ZS5jb3B5KGRhdGEsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gYWxpZ25TaXplKHBhcnQudmFsdWUubGVuZ3RoKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiAnMHgnICsgZGF0YS50b1N0cmluZygnaGV4Jyk7XG59XG5cbi8vIGRlY29kZSBieXRlY29kZSBkYXRhIGZyb20gb3V0cHV0IG5hbWVzIGFuZCB0eXBlc1xuZnVuY3Rpb24gZGVjb2RlUGFyYW1zKG5hbWVzLCB0eXBlcywgZGF0YSkge1xuICB2YXIgdXNlTnVtYmVyZWRQYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHRydWU7XG5cbiAgLy8gTmFtZXMgaXMgb3B0aW9uYWwsIHNvIHNoaWZ0IG92ZXIgYWxsIHRoZSBwYXJhbWV0ZXJzIGlmIG5vdCBwcm92aWRlZFxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICBkYXRhID0gdHlwZXM7XG4gICAgdHlwZXMgPSBuYW1lcztcbiAgICBuYW1lcyA9IFtdO1xuICB9XG5cbiAgZGF0YSA9IHV0aWxzLmhleE9yQnVmZmVyKGRhdGEpO1xuICB2YXIgdmFsdWVzID0gbmV3IFJlc3VsdCgpO1xuXG4gIHZhciBvZmZzZXQgPSAwO1xuICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlLCBpbmRleCkge1xuICAgIHZhciBjb2RlciA9IGdldFBhcmFtQ29kZXIodHlwZSk7XG4gICAgaWYgKGNvZGVyLmR5bmFtaWMpIHtcbiAgICAgIHZhciBkeW5hbWljT2Zmc2V0ID0gdWludDI1NkNvZGVyLmRlY29kZShkYXRhLCBvZmZzZXQpO1xuICAgICAgdmFyIHJlc3VsdCA9IGNvZGVyLmRlY29kZShkYXRhLCBkeW5hbWljT2Zmc2V0LnZhbHVlLnRvTnVtYmVyKCkpO1xuICAgICAgb2Zmc2V0ICs9IGR5bmFtaWNPZmZzZXQuY29uc3VtZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZXN1bHQgPSBjb2Rlci5kZWNvZGUoZGF0YSwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSByZXN1bHQuY29uc3VtZWQ7XG4gICAgfVxuICAgIGlmICh1c2VOdW1iZXJlZFBhcmFtcykgdmFsdWVzW2luZGV4XSA9IHJlc3VsdC52YWx1ZTtcbiAgICBpZiAobmFtZXNbaW5kZXhdKSB7XG4gICAgICB2YWx1ZXNbbmFtZXNbaW5kZXhdXSA9IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdmFsdWVzO1xufVxuXG4vLyBlbmNvZGUgbWV0aG9kIEFCSSBvYmplY3Qgd2l0aCB2YWx1ZXMgaW4gYW4gYXJyYXksIG91dHB1dCBieXRlY29kZVxuZnVuY3Rpb24gZW5jb2RlTWV0aG9kKG1ldGhvZCwgdmFsdWVzKSB7XG4gIHZhciBzaWduYXR1cmUgPSBtZXRob2QubmFtZSArICcoJyArIHV0aWxzLmdldEtleXMobWV0aG9kLmlucHV0cywgJ3R5cGUnKS5qb2luKCcsJykgKyAnKSc7XG4gIHZhciBzaWduYXR1cmVFbmNvZGVkID0gJzB4JyArIG5ldyBCdWZmZXIodXRpbHMua2VjY2FrMjU2KHNpZ25hdHVyZSksICdoZXgnKS5zbGljZSgwLCA0KS50b1N0cmluZygnaGV4Jyk7XG4gIHZhciBwYXJhbXNFbmNvZGVkID0gZW5jb2RlUGFyYW1zKHV0aWxzLmdldEtleXMobWV0aG9kLmlucHV0cywgJ3R5cGUnKSwgdmFsdWVzKS5zdWJzdHJpbmcoMik7XG5cbiAgcmV0dXJuICcnICsgc2lnbmF0dXJlRW5jb2RlZCArIHBhcmFtc0VuY29kZWQ7XG59XG5cbi8vIGRlY29kZSBtZXRob2QgZGF0YSBieXRlY29kZSwgZnJvbSBtZXRob2QgQUJJIG9iamVjdFxuZnVuY3Rpb24gZGVjb2RlTWV0aG9kKG1ldGhvZCwgZGF0YSkge1xuICB2YXIgb3V0cHV0TmFtZXMgPSB1dGlscy5nZXRLZXlzKG1ldGhvZC5vdXRwdXRzLCAnbmFtZScsIHRydWUpO1xuICB2YXIgb3V0cHV0VHlwZXMgPSB1dGlscy5nZXRLZXlzKG1ldGhvZC5vdXRwdXRzLCAndHlwZScpO1xuXG4gIHJldHVybiBkZWNvZGVQYXJhbXMob3V0cHV0TmFtZXMsIG91dHB1dFR5cGVzLCB1dGlscy5oZXhPckJ1ZmZlcihkYXRhKSk7XG59XG5cbi8vIGRlY29kZSBtZXRob2QgZGF0YSBieXRlY29kZSwgZnJvbSBtZXRob2QgQUJJIG9iamVjdFxuZnVuY3Rpb24gZW5jb2RlRXZlbnQoZXZlbnRPYmplY3QsIHZhbHVlcykge1xuICByZXR1cm4gZW5jb2RlTWV0aG9kKGV2ZW50T2JqZWN0LCB2YWx1ZXMpO1xufVxuXG5mdW5jdGlvbiBldmVudFNpZ25hdHVyZShldmVudE9iamVjdCkge1xuICB2YXIgc2lnbmF0dXJlID0gZXZlbnRPYmplY3QubmFtZSArICcoJyArIHV0aWxzLmdldEtleXMoZXZlbnRPYmplY3QuaW5wdXRzLCAndHlwZScpLmpvaW4oJywnKSArICcpJztcbiAgcmV0dXJuICcweCcgKyB1dGlscy5rZWNjYWsyNTYoc2lnbmF0dXJlKTtcbn1cblxuLy8gZGVjb2RlIG1ldGhvZCBkYXRhIGJ5dGVjb2RlLCBmcm9tIG1ldGhvZCBBQkkgb2JqZWN0XG5mdW5jdGlvbiBkZWNvZGVFdmVudChldmVudE9iamVjdCwgZGF0YSwgdG9waWNzKSB7XG4gIHZhciB1c2VOdW1iZXJlZFBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogdHJ1ZTtcblxuICB2YXIgbm9uSW5kZXhlZCA9IGV2ZW50T2JqZWN0LmlucHV0cy5maWx0ZXIoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgcmV0dXJuICFpbnB1dC5pbmRleGVkO1xuICB9KTtcbiAgdmFyIG5vbkluZGV4ZWROYW1lcyA9IHV0aWxzLmdldEtleXMobm9uSW5kZXhlZCwgJ25hbWUnLCB0cnVlKTtcbiAgdmFyIG5vbkluZGV4ZWRUeXBlcyA9IHV0aWxzLmdldEtleXMobm9uSW5kZXhlZCwgJ3R5cGUnKTtcbiAgdmFyIGV2ZW50ID0gZGVjb2RlUGFyYW1zKG5vbkluZGV4ZWROYW1lcywgbm9uSW5kZXhlZFR5cGVzLCB1dGlscy5oZXhPckJ1ZmZlcihkYXRhKSwgdXNlTnVtYmVyZWRQYXJhbXMpO1xuICB2YXIgdG9waWNPZmZzZXQgPSBldmVudE9iamVjdC5hbm9ueW1vdXMgPyAwIDogMTtcbiAgZXZlbnRPYmplY3QuaW5wdXRzLmZpbHRlcihmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQuaW5kZXhlZDtcbiAgfSkubWFwKGZ1bmN0aW9uIChpbnB1dCwgaSkge1xuICAgIHZhciB0b3BpYyA9IG5ldyBCdWZmZXIodG9waWNzW2kgKyB0b3BpY09mZnNldF0uc2xpY2UoMiksICdoZXgnKTtcbiAgICB2YXIgY29kZXIgPSBnZXRQYXJhbUNvZGVyKGlucHV0LnR5cGUpO1xuICAgIGV2ZW50W2lucHV0Lm5hbWVdID0gY29kZXIuZGVjb2RlKHRvcGljLCAwKS52YWx1ZTtcbiAgfSk7XG4gIGV2ZW50Ll9ldmVudE5hbWUgPSBldmVudE9iamVjdC5uYW1lO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8vIERlY29kZSBhIHNwZWNpZmljIGxvZyBpdGVtIHdpdGggYSBzcGVjaWZpYyBldmVudCBhYmlcbmZ1bmN0aW9uIGRlY29kZUxvZ0l0ZW0oZXZlbnRPYmplY3QsIGxvZykge1xuICB2YXIgdXNlTnVtYmVyZWRQYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG5cbiAgaWYgKGV2ZW50T2JqZWN0ICYmIGxvZy50b3BpY3NbMF0gPT09IGV2ZW50U2lnbmF0dXJlKGV2ZW50T2JqZWN0KSkge1xuICAgIHJldHVybiBkZWNvZGVFdmVudChldmVudE9iamVjdCwgbG9nLmRhdGEsIGxvZy50b3BpY3MsIHVzZU51bWJlcmVkUGFyYW1zKTtcbiAgfVxufVxuXG4vLyBDcmVhdGUgYSBkZWNvZGVyIGZvciBhbGwgZXZlbnRzIGRlZmluZWQgaW4gYW4gYWJpLiBJdCByZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkXG4vLyBvbiBhbiBhcnJheSBvZiBsb2cgZW50cmllcyBzdWNoIGFzIHJlY2VpdmVkIGZyb20gZ2V0TG9ncyBvciBnZXRUcmFuc2FjdGlvblJlY2VpcHQgYW5kIHBhcnNlc1xuLy8gYW55IG1hdGNoaW5nIGxvZyBlbnRyaWVzXG5mdW5jdGlvbiBsb2dEZWNvZGVyKGFiaSkge1xuICB2YXIgdXNlTnVtYmVyZWRQYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgdmFyIGV2ZW50TWFwID0ge307XG4gIGFiaS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS50eXBlID09PSAnZXZlbnQnO1xuICB9KS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBldmVudE1hcFtldmVudFNpZ25hdHVyZShpdGVtKV0gPSBpdGVtO1xuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChsb2dJdGVtcykge1xuICAgIHJldHVybiBsb2dJdGVtcy5tYXAoZnVuY3Rpb24gKGxvZykge1xuICAgICAgcmV0dXJuIGRlY29kZUxvZ0l0ZW0oZXZlbnRNYXBbbG9nLnRvcGljc1swXV0sIGxvZywgdXNlTnVtYmVyZWRQYXJhbXMpO1xuICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbmNvZGVQYXJhbXM6IGVuY29kZVBhcmFtcyxcbiAgZGVjb2RlUGFyYW1zOiBkZWNvZGVQYXJhbXMsXG4gIGVuY29kZU1ldGhvZDogZW5jb2RlTWV0aG9kLFxuICBkZWNvZGVNZXRob2Q6IGRlY29kZU1ldGhvZCxcbiAgZW5jb2RlRXZlbnQ6IGVuY29kZUV2ZW50LFxuICBkZWNvZGVFdmVudDogZGVjb2RlRXZlbnQsXG4gIGRlY29kZUxvZ0l0ZW06IGRlY29kZUxvZ0l0ZW0sXG4gIGxvZ0RlY29kZXI6IGxvZ0RlY29kZXIsXG4gIGV2ZW50U2lnbmF0dXJlOiBldmVudFNpZ25hdHVyZVxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpO1xuXG52YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIHR4T2JqZWN0UHJvcGVydGllcyA9IFsnZnJvbScsICd0bycsICdkYXRhJywgJ3ZhbHVlJywgJ2dhc1ByaWNlJywgJ2dhcyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1RyYW5zYWN0aW9uT2JqZWN0O1xuXG5mdW5jdGlvbiBoYXNUcmFuc2FjdGlvbk9iamVjdChhcmdzKSB7XG4gIC8vIGJhZC9lbXB0eSBhcmdzOiBiYWRcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFyZ3MpIHx8IGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0QXJnID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAvLyBtaXNzaW5nIG9yIG5vbi1vYmplY3Q6IGJhZFxuICBpZiAoIWxhc3RBcmcpIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBsYXN0QXJnICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBlbXB0eSBvYmplY3Q6IGdvb2RcbiAgaWYgKCgwLCBfa2V5czJbJ2RlZmF1bHQnXSkobGFzdEFyZykubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gdHhQYXJhbXMgb2JqZWN0OiBnb29kXG4gIHZhciBrZXlzID0gKDAsIF9rZXlzMlsnZGVmYXVsdCddKShsYXN0QXJnKTtcbiAgdmFyIGhhc01hdGNoaW5nS2V5cyA9IHR4T2JqZWN0UHJvcGVydGllcy5zb21lKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBrZXlzLmluY2x1ZGVzKHZhbHVlKTtcbiAgfSk7XG4gIGlmIChoYXNNYXRjaGluZ0tleXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBubyBtYXRjaFxuICByZXR1cm4gZmFsc2U7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcicpO1xuXG52YXIgX3JlZ2VuZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZ2VuZXJhdG9yKTtcblxudmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnknKTtcblxudmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yJyk7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3luY1RvR2VuZXJhdG9yMik7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24nKTtcblxudmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgYWJpID0gcmVxdWlyZSgnZXRoanMtYWJpJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbnZhciBFdGhGaWx0ZXIgPSByZXF1aXJlKCdldGhqcy1maWx0ZXInKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxudmFyIGdldEtleXMgPSByZXF1aXJlKCdldGhqcy11dGlsJykuZ2V0S2V5czsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxudmFyIGtlY2NhazI1NiA9IHJlcXVpcmUoJ2pzLXNoYTMnKS5rZWNjYWtfMjU2OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG52YXIgaGFzVHJhbnNhY3Rpb25PYmplY3QgPSByZXF1aXJlKCcuL2hhcy10eC1vYmplY3QnKTtcbnZhciBwcm9taXNlVG9DYWxsYmFjayA9IHJlcXVpcmUoJ3Byb21pc2UtdG8tY2FsbGJhY2snKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb250cmFjdDtcblxuZnVuY3Rpb24gQ29udHJhY3QoKSB7XG4gIHZhciBwZXJmb3JtQ2FsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3JlZjIgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzWydkZWZhdWx0J10pKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yMlsnZGVmYXVsdCddLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfcmVmKSB7XG4gICAgICB2YXIgbWV0aG9kT2JqZWN0ID0gX3JlZi5tZXRob2RPYmplY3QsXG4gICAgICAgICAgbWV0aG9kQXJncyA9IF9yZWYubWV0aG9kQXJncztcbiAgICAgIHZhciBxdWVyeU1ldGhvZCwgcHJvdmlkZWRUeE9iamVjdCwgbWV0aG9kVHhPYmplY3QsIHF1ZXJ5UmVzdWx0LCBkZWNvZGVkTWV0aG9kUmVzdWx0LCBkZWNvZGluZ0Vycm9yO1xuICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjJbJ2RlZmF1bHQnXS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICBxdWVyeU1ldGhvZCA9ICdjYWxsJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICAgICAgICAgIHByb3ZpZGVkVHhPYmplY3QgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICAgICAgICAgIGlmIChoYXNUcmFuc2FjdGlvbk9iamVjdChtZXRob2RBcmdzKSkgcHJvdmlkZWRUeE9iamVjdCA9IG1ldGhvZEFyZ3MucG9wKCk7XG4gICAgICAgICAgICAgIG1ldGhvZFR4T2JqZWN0ID0gKDAsIF9hc3NpZ24yWydkZWZhdWx0J10pKHt9LCBzZWxmLmRlZmF1bHRUeE9iamVjdCwgcHJvdmlkZWRUeE9iamVjdCwge1xuICAgICAgICAgICAgICAgIHRvOiBzZWxmLmFkZHJlc3NcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgbWV0aG9kVHhPYmplY3QuZGF0YSA9IGFiaS5lbmNvZGVNZXRob2QobWV0aG9kT2JqZWN0LCBtZXRob2RBcmdzKTtcblxuICAgICAgICAgICAgICBpZiAobWV0aG9kT2JqZWN0LmNvbnN0YW50ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5TWV0aG9kID0gJ3NlbmRUcmFuc2FjdGlvbic7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucXVlcnlbcXVlcnlNZXRob2RdKG1ldGhvZFR4T2JqZWN0KTtcblxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICBxdWVyeVJlc3VsdCA9IF9jb250ZXh0LnNlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKCEocXVlcnlNZXRob2QgPT09ICdjYWxsJykpIHtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTA7XG4gICAgICAgICAgICAgIGRlY29kZWRNZXRob2RSZXN1bHQgPSBhYmkuZGVjb2RlTWV0aG9kKG1ldGhvZE9iamVjdCwgcXVlcnlSZXN1bHQpO1xuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCBkZWNvZGVkTWV0aG9kUmVzdWx0KTtcblxuICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE1O1xuICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WydjYXRjaCddKDEwKTtcbiAgICAgICAgICAgICAgZGVjb2RpbmdFcnJvciA9IG5ldyBFcnJvcignW2V0aGpzLWNvbnRyYWN0XSB3aGlsZSBmb3JtYXR0aW5nIGluY29taW5nIHJhdyBjYWxsIGRhdGEgJyArICgwLCBfc3RyaW5naWZ5MlsnZGVmYXVsdCddKShxdWVyeVJlc3VsdCkgKyAnICcgKyBfY29udGV4dC50MCk7XG4gICAgICAgICAgICAgIHRocm93IGRlY29kaW5nRXJyb3I7XG5cbiAgICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsIHF1ZXJ5UmVzdWx0KTtcblxuICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzEwLCAxNV1dKTtcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gcGVyZm9ybUNhbGwoX3gyKSB7XG4gICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5hYmkgPSBvcHRzLmNvbnRyYWN0QUJJIHx8IFtdO1xuICBzZWxmLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgc2VsZi5hZGRyZXNzID0gb3B0cy5hZGRyZXNzIHx8ICcweCc7XG4gIHNlbGYuYnl0ZWNvZGUgPSBvcHRzLmNvbnRyYWN0Qnl0ZWNvZGUgfHwgJzB4JztcbiAgc2VsZi5kZWZhdWx0VHhPYmplY3QgPSBvcHRzLmNvbnRyYWN0RGVmYXVsdFR4T2JqZWN0IHx8IHt9O1xuICBzZWxmLmZpbHRlcnMgPSBuZXcgRXRoRmlsdGVyKHNlbGYucXVlcnkpO1xuXG4gIGdldENhbGxhYmxlTWV0aG9kc0Zyb21BQkkoc2VsZi5hYmkpLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE9iamVjdCkge1xuICAgIGlmIChtZXRob2RPYmplY3QudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc2VsZlttZXRob2RPYmplY3QubmFtZV0gPSBjcmVhdGVDb250cmFjdEZ1bmN0aW9uKG1ldGhvZE9iamVjdCk7XG4gICAgfSBlbHNlIGlmIChtZXRob2RPYmplY3QudHlwZSA9PT0gJ2V2ZW50Jykge1xuICAgICAgc2VsZlttZXRob2RPYmplY3QubmFtZV0gPSBjcmVhdGVDb250cmFjdEV2ZW50KG1ldGhvZE9iamVjdCk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBjcmVhdGVDb250cmFjdEV2ZW50KG1ldGhvZE9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjb250cmFjdEV2ZW50KCkge1xuICAgICAgdmFyIG1ldGhvZEFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgdmFyIGZpbHRlcklucHV0VHlwZXMgPSBnZXRLZXlzKG1ldGhvZE9iamVjdC5pbnB1dHMsICd0eXBlJywgZmFsc2UpO1xuICAgICAgdmFyIGZpbHRlclRvcGljID0gJzB4JyArIGtlY2NhazI1NihtZXRob2RPYmplY3QubmFtZSArICcoJyArIGZpbHRlcklucHV0VHlwZXMuam9pbignLCcpICsgJyknKTtcbiAgICAgIHZhciBmaWx0ZXJUb3BjaXMgPSBbZmlsdGVyVG9waWNdO1xuICAgICAgdmFyIGFyZ3NPYmplY3QgPSAoMCwgX2Fzc2lnbjJbJ2RlZmF1bHQnXSkoe30sIG1ldGhvZEFyZ3NbMF0pIHx8IHt9O1xuXG4gICAgICB2YXIgZGVmYXVsdEZpbHRlck9iamVjdCA9ICgwLCBfYXNzaWduMlsnZGVmYXVsdCddKSh7fSwgbWV0aG9kQXJnc1swXSB8fCB7fSwge1xuICAgICAgICB0bzogc2VsZi5hZGRyZXNzLFxuICAgICAgICB0b3BpY3M6IGZpbHRlclRvcGNpc1xuICAgICAgfSk7XG4gICAgICB2YXIgZmlsdGVyT3B0cyA9ICgwLCBfYXNzaWduMlsnZGVmYXVsdCddKSh7fSwgYXJnc09iamVjdCwge1xuICAgICAgICBkZWNvZGVyOiBmdW5jdGlvbiBkZWNvZGVyKGxvZ0RhdGEpIHtcbiAgICAgICAgICByZXR1cm4gYWJpLmRlY29kZUV2ZW50KG1ldGhvZE9iamVjdCwgbG9nRGF0YSwgZmlsdGVyVG9wY2lzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdEZpbHRlck9iamVjdDogZGVmYXVsdEZpbHRlck9iamVjdFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBuZXcgc2VsZi5maWx0ZXJzLkZpbHRlcihmaWx0ZXJPcHRzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29udHJhY3RGdW5jdGlvbihtZXRob2RPYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY29udHJhY3RGdW5jdGlvbigpIHtcbiAgICAgIHZhciBtZXRob2RDYWxsYmFjayA9IHZvaWQgMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgdmFyIG1ldGhvZEFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kQXJnc1ttZXRob2RBcmdzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG1ldGhvZENhbGxiYWNrID0gbWV0aG9kQXJncy5wb3AoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb21pc2UgPSBwZXJmb3JtQ2FsbCh7IG1ldGhvZE9iamVjdDogbWV0aG9kT2JqZWN0LCBtZXRob2RBcmdzOiBtZXRob2RBcmdzIH0pO1xuXG4gICAgICBpZiAobWV0aG9kQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VUb0NhbGxiYWNrKHByb21pc2UpKG1ldGhvZENhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDYWxsYWJsZU1ldGhvZHNGcm9tQUJJKGNvbnRyYWN0QUJJKSB7XG4gIHJldHVybiBjb250cmFjdEFCSS5maWx0ZXIoZnVuY3Rpb24gKGpzb24pIHtcbiAgICByZXR1cm4gKGpzb24udHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCBqc29uLnR5cGUgPT09ICdldmVudCcpICYmIGpzb24ubmFtZS5sZW5ndGggPiAwO1xuICB9KTtcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEZ1c2UgZnJvbSAnZnVzZS5qcyc7XG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCBJbnB1dEFkb3JubWVudCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEFkb3JubWVudCc7XG5pbXBvcnQgVGV4dEZpZWxkIGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvdGV4dC1maWVsZCc7XG5pbXBvcnQgeyB1c2VQcmV2aW91cyB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZVByZXZpb3VzJztcbmltcG9ydCB7IGlzVmFsaWRIZXhBZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvaGV4c3RyaW5nLXV0aWxzJztcbmltcG9ydCB7IGZldGNoVG9rZW4gfSBmcm9tICcuLi8uLi9zd2Fwcy51dGlsJztcbmltcG9ydCB7IGdldEN1cnJlbnRDaGFpbklkIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VsZWN0b3JzL3NlbGVjdG9ycyc7XG5cbmNvbnN0IHJlbmRlckFkb3JubWVudCA9ICgpID0+IChcbiAgPElucHV0QWRvcm5tZW50IHBvc2l0aW9uPVwic3RhcnRcIiBzdHlsZT17eyBtYXJnaW5SaWdodDogJzEycHgnIH19PlxuICAgIDxpbWcgc3JjPVwiaW1hZ2VzL3NlYXJjaC5zdmdcIiB3aWR0aD1cIjE3XCIgaGVpZ2h0PVwiMTdcIiBhbHQ9XCJcIiAvPlxuICA8L0lucHV0QWRvcm5tZW50PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGlzdEl0ZW1TZWFyY2goe1xuICBvblNlYXJjaCxcbiAgZXJyb3IsXG4gIGxpc3RUb1NlYXJjaCA9IFtdLFxuICBmdXNlU2VhcmNoS2V5cyxcbiAgc2VhcmNoUGxhY2Vob2xkZXJUZXh0LFxuICBkZWZhdWx0VG9BbGwsXG4gIHNob3VsZFNlYXJjaEZvckltcG9ydHMsXG59KSB7XG4gIGNvbnN0IGZ1c2VSZWYgPSB1c2VSZWYoKTtcbiAgY29uc3QgW3NlYXJjaFF1ZXJ5LCBzZXRTZWFyY2hRdWVyeV0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IGNoYWluSWQgPSB1c2VTZWxlY3RvcihnZXRDdXJyZW50Q2hhaW5JZCk7XG5cbiAgLyoqXG4gICAqIFNlYXJjaCBhIGN1c3RvbSB0b2tlbiBmb3IgaW1wb3J0IGJhc2VkIG9uIGEgY29udHJhY3QgYWRkcmVzcy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRyYWN0QWRkcmVzc1xuICAgKi9cbiAgY29uc3QgaGFuZGxlU2VhcmNoVG9rZW5Gb3JJbXBvcnQgPSBhc3luYyAoY29udHJhY3RBZGRyZXNzKSA9PiB7XG4gICAgc2V0U2VhcmNoUXVlcnkoY29udHJhY3RBZGRyZXNzKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCBmZXRjaFRva2VuKGNvbnRyYWN0QWRkcmVzcywgY2hhaW5JZCk7XG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgdG9rZW4ucHJpbWFyeUxhYmVsID0gdG9rZW4uc3ltYm9sO1xuICAgICAgICB0b2tlbi5zZWNvbmRhcnlMYWJlbCA9IHRva2VuLm5hbWU7XG4gICAgICAgIHRva2VuLm5vdEltcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgb25TZWFyY2goe1xuICAgICAgICAgIHNlYXJjaFF1ZXJ5OiBjb250cmFjdEFkZHJlc3MsXG4gICAgICAgICAgcmVzdWx0czogW3Rva2VuXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2cuZXJyb3IoJ1Rva2VuIG5vdCBmb3VuZCwgc2hvdyAwIHJlc3VsdHMuJywgZSk7XG4gICAgfVxuICAgIG9uU2VhcmNoKHtcbiAgICAgIHNlYXJjaFF1ZXJ5OiBjb250cmFjdEFkZHJlc3MsXG4gICAgICByZXN1bHRzOiBbXSwgLy8gTm8gdG9rZW4gZm9yIGltcG9ydCBmb3VuZC5cbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVTZWFyY2ggPSBhc3luYyAobmV3U2VhcmNoUXVlcnkpID0+IHtcbiAgICBjb25zdCB0cmltbWVkTmV3U2VhcmNoUXVlcnkgPSBuZXdTZWFyY2hRdWVyeS50cmltKCk7XG4gICAgY29uc3QgdmFsaWRIZXhBZGRyZXNzID0gaXNWYWxpZEhleEFkZHJlc3ModHJpbW1lZE5ld1NlYXJjaFF1ZXJ5KTtcbiAgICBjb25zdCBmdXNlU2VhcmNoUmVzdWx0ID0gZnVzZVJlZi5jdXJyZW50LnNlYXJjaChuZXdTZWFyY2hRdWVyeSk7XG4gICAgY29uc3QgcmVzdWx0cyA9XG4gICAgICBkZWZhdWx0VG9BbGwgJiYgbmV3U2VhcmNoUXVlcnkgPT09ICcnID8gbGlzdFRvU2VhcmNoIDogZnVzZVNlYXJjaFJlc3VsdDtcbiAgICBpZiAoc2hvdWxkU2VhcmNoRm9ySW1wb3J0cyAmJiByZXN1bHRzLmxlbmd0aCA9PT0gMCAmJiB2YWxpZEhleEFkZHJlc3MpIHtcbiAgICAgIGF3YWl0IGhhbmRsZVNlYXJjaFRva2VuRm9ySW1wb3J0KHRyaW1tZWROZXdTZWFyY2hRdWVyeSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldFNlYXJjaFF1ZXJ5KG5ld1NlYXJjaFF1ZXJ5KTtcbiAgICBvblNlYXJjaCh7XG4gICAgICBzZWFyY2hRdWVyeTogbmV3U2VhcmNoUXVlcnksXG4gICAgICByZXN1bHRzLFxuICAgIH0pO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFmdXNlUmVmLmN1cnJlbnQpIHtcbiAgICAgIGZ1c2VSZWYuY3VycmVudCA9IG5ldyBGdXNlKGxpc3RUb1NlYXJjaCwge1xuICAgICAgICBzaG91bGRTb3J0OiB0cnVlLFxuICAgICAgICB0aHJlc2hvbGQ6IDAuNDUsXG4gICAgICAgIGxvY2F0aW9uOiAwLFxuICAgICAgICBkaXN0YW5jZTogMTAwLFxuICAgICAgICBtYXhQYXR0ZXJuTGVuZ3RoOiAzMixcbiAgICAgICAgbWluTWF0Y2hDaGFyTGVuZ3RoOiAxLFxuICAgICAgICBrZXlzOiBmdXNlU2VhcmNoS2V5cyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2Z1c2VTZWFyY2hLZXlzLCBsaXN0VG9TZWFyY2hdKTtcblxuICBjb25zdCBwcmV2aW91c0xpc3RUb1NlYXJjaCA9IHVzZVByZXZpb3VzKGxpc3RUb1NlYXJjaCA/PyBbXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgZnVzZVJlZi5jdXJyZW50ICYmXG4gICAgICBzZWFyY2hRdWVyeSAmJlxuICAgICAgcHJldmlvdXNMaXN0VG9TZWFyY2ggIT09IGxpc3RUb1NlYXJjaFxuICAgICkge1xuICAgICAgZnVzZVJlZi5jdXJyZW50LnNldENvbGxlY3Rpb24obGlzdFRvU2VhcmNoKTtcbiAgICAgIGNvbnN0IGZ1c2VTZWFyY2hSZXN1bHQgPSBmdXNlUmVmLmN1cnJlbnQuc2VhcmNoKHNlYXJjaFF1ZXJ5KTtcbiAgICAgIG9uU2VhcmNoKHsgc2VhcmNoUXVlcnksIHJlc3VsdHM6IGZ1c2VTZWFyY2hSZXN1bHQgfSk7XG4gICAgfVxuICB9LCBbbGlzdFRvU2VhcmNoLCBzZWFyY2hRdWVyeSwgb25TZWFyY2gsIHByZXZpb3VzTGlzdFRvU2VhcmNoXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8VGV4dEZpZWxkXG4gICAgICBkYXRhLXRlc3RpZD1cInNlYXJjaC1saXN0LWl0ZW1zXCJcbiAgICAgIGNsYXNzTmFtZT1cInNlYXJjaGFibGUtaXRlbS1saXN0X19zZWFyY2hcIlxuICAgICAgcGxhY2Vob2xkZXI9e3NlYXJjaFBsYWNlaG9sZGVyVGV4dH1cbiAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgIHZhbHVlPXtzZWFyY2hRdWVyeX1cbiAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gaGFuZGxlU2VhcmNoKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgIGVycm9yPXtlcnJvcn1cbiAgICAgIGZ1bGxXaWR0aFxuICAgICAgc3RhcnRBZG9ybm1lbnQ9e3JlbmRlckFkb3JubWVudCgpfVxuICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcbiAgICAgIGF1dG9Gb2N1c1xuICAgIC8+XG4gICk7XG59XG5cbkxpc3RJdGVtU2VhcmNoLnByb3BUeXBlcyA9IHtcbiAgb25TZWFyY2g6IFByb3BUeXBlcy5mdW5jLFxuICBlcnJvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgbGlzdFRvU2VhcmNoOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgZnVzZVNlYXJjaEtleXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLmlzUmVxdWlyZWQsXG4gIHNlYXJjaFBsYWNlaG9sZGVyVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVmYXVsdFRvQWxsOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvdWxkU2VhcmNoRm9ySW1wb3J0czogUHJvcFR5cGVzLmJvb2wsXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy91aS9pZGVudGljb24nO1xuaW1wb3J0IFVybEljb24gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy91aS91cmwtaWNvbic7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvYnV0dG9uJztcbmltcG9ydCBBY3Rpb25hYmxlTWVzc2FnZSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3VpL2FjdGlvbmFibGUtbWVzc2FnZS9hY3Rpb25hYmxlLW1lc3NhZ2UnO1xuaW1wb3J0IHsgSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250ZXh0cy9pMThuJztcbmltcG9ydCB7XG4gIGdldEN1cnJlbnRDaGFpbklkLFxuICBnZXRScGNQcmVmc0ZvckN1cnJlbnRQcm92aWRlcixcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCB7IFNXQVBTX0NIQUlOSURfREVGQVVMVF9CTE9DS19FWFBMT1JFUl9VUkxfTUFQIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9zd2Fwcyc7XG5pbXBvcnQgeyB1c2VOZXdNZXRyaWNFdmVudCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZU1ldHJpY0V2ZW50JztcbmltcG9ydCB7IGdldFVSTEhvc3ROYW1lIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSXRlbUxpc3Qoe1xuICByZXN1bHRzID0gW10sXG4gIG9uQ2xpY2tJdGVtLFxuICBvbk9wZW5JbXBvcnRUb2tlbk1vZGFsQ2xpY2ssXG4gIFBsYWNlaG9sZGVyLFxuICBsaXN0VGl0bGUsXG4gIG1heExpc3RJdGVtcyA9IDYsXG4gIHNlYXJjaFF1ZXJ5ID0gJycsXG4gIGNvbnRhaW5lclJlZixcbiAgaGlkZVJpZ2h0TGFiZWxzLFxuICBoaWRlSXRlbUlmLFxuICBsaXN0Q29udGFpbmVyQ2xhc3NOYW1lLFxufSkge1xuICBjb25zdCB0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG4gIGNvbnN0IGNoYWluSWQgPSB1c2VTZWxlY3RvcihnZXRDdXJyZW50Q2hhaW5JZCk7XG4gIGNvbnN0IHJwY1ByZWZzID0gdXNlU2VsZWN0b3IoZ2V0UnBjUHJlZnNGb3JDdXJyZW50UHJvdmlkZXIpO1xuICBjb25zdCBibG9ja0V4cGxvcmVyTGluayA9XG4gICAgcnBjUHJlZnMuYmxvY2tFeHBsb3JlclVybCA/P1xuICAgIFNXQVBTX0NIQUlOSURfREVGQVVMVF9CTE9DS19FWFBMT1JFUl9VUkxfTUFQW2NoYWluSWRdID8/XG4gICAgbnVsbDtcblxuICBjb25zdCBibG9ja0V4cGxvcmVyTGFiZWwgPSBycGNQcmVmcy5ibG9ja0V4cGxvcmVyVXJsXG4gICAgPyBnZXRVUkxIb3N0TmFtZShibG9ja0V4cGxvcmVyTGluaylcbiAgICA6IHQoJ2V0aGVyc2NhbicpO1xuXG4gIGNvbnN0IGJsb2NrRXhwbG9yZXJMaW5rQ2xpY2tlZEV2ZW50ID0gdXNlTmV3TWV0cmljRXZlbnQoe1xuICAgIGNhdGVnb3J5OiAnU3dhcHMnLFxuICAgIGV2ZW50OiAnQ2xpY2tlZCBCbG9jayBFeHBsb3JlciBMaW5rJyxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBsaW5rX3R5cGU6ICdUb2tlbiBUcmFja2VyJyxcbiAgICAgIGFjdGlvbjogJ1ZlcmlmeSBDb250cmFjdCBBZGRyZXNzJyxcbiAgICAgIGJsb2NrX2V4cGxvcmVyX2RvbWFpbjogZ2V0VVJMSG9zdE5hbWUoYmxvY2tFeHBsb3JlckxpbmspLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIElmIHRoZXJlIGlzIGEgdG9rZW4gZm9yIGltcG9ydCBiYXNlZCBvbiBhIGNvbnRyYWN0IGFkZHJlc3MsIGl0J3MgdGhlIG9ubHkgb25lIGluIHRoZSBsaXN0LlxuICBjb25zdCBoYXNUb2tlbkZvckltcG9ydCA9IHJlc3VsdHMubGVuZ3RoID09PSAxICYmIHJlc3VsdHNbMF0ubm90SW1wb3J0ZWQ7XG4gIGNvbnN0IHBsYWNlaG9sZGVyID0gUGxhY2Vob2xkZXIgPyAoXG4gICAgPFBsYWNlaG9sZGVyIHNlYXJjaFF1ZXJ5PXtzZWFyY2hRdWVyeX0gLz5cbiAgKSA6IG51bGw7XG4gIHJldHVybiByZXN1bHRzLmxlbmd0aCA9PT0gMCA/IChcbiAgICBwbGFjZWhvbGRlclxuICApIDogKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwic2VhcmNoYWJsZS1pdGVtLWxpc3RcIj5cbiAgICAgIHtsaXN0VGl0bGUgPyAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VhcmNoYWJsZS1pdGVtLWxpc3RfX3RpdGxlXCI+e2xpc3RUaXRsZX08L2Rpdj5cbiAgICAgICkgOiBudWxsfVxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoXG4gICAgICAgICAgJ3NlYXJjaGFibGUtaXRlbS1saXN0X19saXN0LWNvbnRhaW5lcicsXG4gICAgICAgICAgbGlzdENvbnRhaW5lckNsYXNzTmFtZSxcbiAgICAgICAgKX1cbiAgICAgICAgcmVmPXtjb250YWluZXJSZWZ9XG4gICAgICA+XG4gICAgICAgIHtyZXN1bHRzLnNsaWNlKDAsIG1heExpc3RJdGVtcykubWFwKChyZXN1bHQsIGkpID0+IHtcbiAgICAgICAgICBpZiAoaGlkZUl0ZW1JZj8uKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0Lm5vdEltcG9ydGVkKSB7XG4gICAgICAgICAgICAgIG9uT3BlbkltcG9ydFRva2VuTW9kYWxDbGljayhyZXN1bHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb25DbGlja0l0ZW0/LihyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaWNvblVybCxcbiAgICAgICAgICAgIGlkZW50aWNvbkFkZHJlc3MsXG4gICAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgICAgIGRpc2FibGVkLFxuICAgICAgICAgICAgcHJpbWFyeUxhYmVsLFxuICAgICAgICAgICAgc2Vjb25kYXJ5TGFiZWwsXG4gICAgICAgICAgICByaWdodFByaW1hcnlMYWJlbCxcbiAgICAgICAgICAgIHJpZ2h0U2Vjb25kYXJ5TGFiZWwsXG4gICAgICAgICAgICBJY29uQ29tcG9uZW50LFxuICAgICAgICAgIH0gPSByZXN1bHQ7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgdGFiSW5kZXg9XCIwXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdzZWFyY2hhYmxlLWl0ZW0tbGlzdF9faXRlbScsIHtcbiAgICAgICAgICAgICAgICAnc2VhcmNoYWJsZS1pdGVtLWxpc3RfX2l0ZW0tLXNlbGVjdGVkJzogc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgJ3NlYXJjaGFibGUtaXRlbS1saXN0X19pdGVtLS1kaXNhYmxlZCc6IGRpc2FibGVkLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgICAgICAgb25LZXlVcD17KGUpID0+IGUua2V5ID09PSAnRW50ZXInICYmIG9uQ2xpY2soKX1cbiAgICAgICAgICAgICAga2V5PXtgc2VhcmNoYWJsZS1pdGVtLWxpc3QtaXRlbS0ke2l9YH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2ljb25VcmwgfHwgcHJpbWFyeUxhYmVsID8gKFxuICAgICAgICAgICAgICAgIDxVcmxJY29uIHVybD17aWNvblVybH0gbmFtZT17cHJpbWFyeUxhYmVsfSAvPlxuICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgeyEoaWNvblVybCB8fCBwcmltYXJ5TGFiZWwpICYmIGlkZW50aWNvbkFkZHJlc3MgPyAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWFyY2hhYmxlLWl0ZW0tbGlzdF9faWRlbnRpY29uXCI+XG4gICAgICAgICAgICAgICAgICA8SWRlbnRpY29uIGFkZHJlc3M9e2lkZW50aWNvbkFkZHJlc3N9IGRpYW1ldGVyPXsyNH0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgIHtJY29uQ29tcG9uZW50ID8gPEljb25Db21wb25lbnQgLz4gOiBudWxsfVxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaGFibGUtaXRlbS1saXN0X19sYWJlbHNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaGFibGUtaXRlbS1saXN0X19pdGVtLWxhYmVsc1wiPlxuICAgICAgICAgICAgICAgICAge3ByaW1hcnlMYWJlbCA/IChcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2VhcmNoYWJsZS1pdGVtLWxpc3RfX3ByaW1hcnktbGFiZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICB7cHJpbWFyeUxhYmVsfVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgIHtzZWNvbmRhcnlMYWJlbCA/IChcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2VhcmNoYWJsZS1pdGVtLWxpc3RfX3NlY29uZGFyeS1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgIHtzZWNvbmRhcnlMYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgeyFoaWRlUmlnaHRMYWJlbHMgJiZcbiAgICAgICAgICAgICAgICAocmlnaHRQcmltYXJ5TGFiZWwgfHwgcmlnaHRTZWNvbmRhcnlMYWJlbCkgPyAoXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaGFibGUtaXRlbS1saXN0X19yaWdodC1sYWJlbHNcIj5cbiAgICAgICAgICAgICAgICAgICAge3JpZ2h0UHJpbWFyeUxhYmVsID8gKFxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInNlYXJjaGFibGUtaXRlbS1saXN0X19yaWdodC1wcmltYXJ5LWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cmlnaHRQcmltYXJ5TGFiZWx9XG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAge3JpZ2h0U2Vjb25kYXJ5TGFiZWwgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2VhcmNoYWJsZS1pdGVtLWxpc3RfX3JpZ2h0LXNlY29uZGFyeS1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3JpZ2h0U2Vjb25kYXJ5TGFiZWx9XG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAge3Jlc3VsdC5ub3RJbXBvcnRlZCAmJiAoXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPVwiY29uZmlybVwiIG9uQ2xpY2s9e29uQ2xpY2t9PlxuICAgICAgICAgICAgICAgICAge3QoJ2ltcG9ydCcpfVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSl9XG4gICAgICAgIHshaGFzVG9rZW5Gb3JJbXBvcnQgJiYgKFxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHRhYkluZGV4PVwiMFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzZWFyY2hhYmxlLWl0ZW0tbGlzdF9faXRlbSBzZWFyY2hhYmxlLWl0ZW0tbGlzdF9faXRlbS0tYWRkLXRva2VuXCJcbiAgICAgICAgICAgIGtleT1cInNlYXJjaGFibGUtaXRlbS1saXN0LWl0ZW0tbGFzdFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEFjdGlvbmFibGVNZXNzYWdlXG4gICAgICAgICAgICAgIG1lc3NhZ2U9e1xuICAgICAgICAgICAgICAgIGJsb2NrRXhwbG9yZXJMaW5rICYmXG4gICAgICAgICAgICAgICAgdCgnYWRkQ3VzdG9tVG9rZW5CeUNvbnRyYWN0QWRkcmVzcycsIFtcbiAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgIGtleT1cInNlYXJjaGFibGUtaXRlbS1saXN0X19ldGhlcnNjYW4tbGlua1wiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBibG9ja0V4cGxvcmVyTGlua0NsaWNrZWRFdmVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5wbGF0Zm9ybS5vcGVuVGFiKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYmxvY2tFeHBsb3JlckxpbmssXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7YmxvY2tFeHBsb3JlckxhYmVsfVxuICAgICAgICAgICAgICAgICAgPC9hPixcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbkl0ZW1MaXN0LnByb3BUeXBlcyA9IHtcbiAgcmVzdWx0czogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGljb25Vcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgICBwcmltYXJ5TGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBzZWNvbmRhcnlMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHJpZ2h0UHJpbWFyeUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgcmlnaHRTZWNvbmRhcnlMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB9KSxcbiAgKSxcbiAgb25DbGlja0l0ZW06IFByb3BUeXBlcy5mdW5jLFxuICBvbk9wZW5JbXBvcnRUb2tlbk1vZGFsQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBQbGFjZWhvbGRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGxpc3RUaXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgbWF4TGlzdEl0ZW1zOiBQcm9wVHlwZXMubnVtYmVyLFxuICBzZWFyY2hRdWVyeTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGFpbmVyUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKHdpbmRvdy5FbGVtZW50KSxcbiAgfSksXG4gIGhpZGVSaWdodExhYmVsczogUHJvcFR5cGVzLmJvb2wsXG4gIGhpZGVJdGVtSWY6IFByb3BUeXBlcy5mdW5jLFxuICBsaXN0Q29udGFpbmVyQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1bmlxIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHRvQmlnTnVtYmVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvY29udmVyc2lvbi51dGlscyc7XG5pbXBvcnQgeyB1c2VHYXNGZWVDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29udGV4dHMvZ2FzRmVlJztcbmltcG9ydCBJMThuVmFsdWUgZnJvbSAnLi4vLi4vLi4vLi4vdWkvaTE4bi12YWx1ZSc7XG5pbXBvcnQgeyBQcmlvcml0eUZlZVRvb2x0aXAgfSBmcm9tICcuLi90b29sdGlwcyc7XG5cbmZ1bmN0aW9uIHJvdW5kVG9EZWNpbWFsUGxhY2VzUmVtb3ZpbmdFeHRyYVplcm9lcyhcbiAgbnVtYmVyaXNoLFxuICBudW1iZXJPZkRlY2ltYWxQbGFjZXMsXG4pIHtcbiAgcmV0dXJuIHRvQmlnTnVtYmVyLmRlYyhcbiAgICB0b0JpZ051bWJlci5kZWMobnVtYmVyaXNoKS50b0ZpeGVkKG51bWJlck9mRGVjaW1hbFBsYWNlcyksXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExhdGVzdFByaW9yaXR5RmVlRmllbGQoKSB7XG4gIGNvbnN0IHsgZ2FzRmVlRXN0aW1hdGVzIH0gPSB1c2VHYXNGZWVDb250ZXh0KCk7XG5cbiAgY29uc3QgcmVuZGVyUHJpb3JpdHlGZWVSYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IGxhdGVzdFByaW9yaXR5RmVlUmFuZ2UgfSA9IGdhc0ZlZUVzdGltYXRlcztcbiAgICBpZiAobGF0ZXN0UHJpb3JpdHlGZWVSYW5nZSkge1xuICAgICAgY29uc3QgZm9ybWF0dGVkUmFuZ2UgPSB1bmlxKFxuICAgICAgICBsYXRlc3RQcmlvcml0eUZlZVJhbmdlLm1hcCgocHJpb3JpdHlGZWUpID0+XG4gICAgICAgICAgcm91bmRUb0RlY2ltYWxQbGFjZXNSZW1vdmluZ0V4dHJhWmVyb2VzKHByaW9yaXR5RmVlLCAxKSxcbiAgICAgICAgKSxcbiAgICAgICkuam9pbignIC0gJyk7XG4gICAgICByZXR1cm4gYCR7Zm9ybWF0dGVkUmFuZ2V9IEdXRUlgO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibmV0d29yay1zdGF0aXN0aWNzX19pbmZvX19maWVsZCBsYXRlc3QtcHJpb3JpdHktZmVlLWZpZWxkXCI+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJuZXR3b3JrLXN0YXRpc3RpY3NfX2luZm9fX2ZpZWxkLWRhdGFcIj5cbiAgICAgICAgPFByaW9yaXR5RmVlVG9vbHRpcD57cmVuZGVyUHJpb3JpdHlGZWVSYW5nZSgpfTwvUHJpb3JpdHlGZWVUb29sdGlwPlxuICAgICAgPC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibmV0d29yay1zdGF0aXN0aWNzX19pbmZvX19maWVsZC1sYWJlbFwiPlxuICAgICAgICA8STE4blZhbHVlIG1lc3NhZ2VLZXk9XCJwcmlvcml0eUZlZVwiIC8+XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyB1c2VHYXNGZWVDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29udGV4dHMvZ2FzRmVlJztcbmltcG9ydCBJMThuVmFsdWUgZnJvbSAnLi4vLi4vLi4vLi4vdWkvaTE4bi12YWx1ZSc7XG5pbXBvcnQgeyBOZXR3b3JrU3RhYmlsaXR5VG9vbHRpcCB9IGZyb20gJy4uL3Rvb2x0aXBzJztcblxuY29uc3QgR1JBRElFTlRfQ09MT1JTID0gW1xuICAnIzAzN0RENicsXG4gICcjMTg3NkM4JyxcbiAgJyMyRDcwQkEnLFxuICAnIzQzNjlBQicsXG4gICcjNTc2MjlFJyxcbiAgJyM2QTVEOTInLFxuICAnIzgwNTY4MycsXG4gICcjOUE0RDcxJyxcbiAgJyNCNDQ1NjEnLFxuICAnI0M1NDA1NScsXG4gICcjRDczQTQ5Jyxcbl07XG5cbmNvbnN0IGRldGVybWluZVN0YXR1c0luZm8gPSAoZ2l2ZW5OZXR3b3JrQ29uZ2VzdGlvbikgPT4ge1xuICBjb25zdCBuZXR3b3JrQ29uZ2VzdGlvbiA9IGdpdmVuTmV0d29ya0Nvbmdlc3Rpb24gPz8gMC41O1xuICBjb25zdCBjb2xvckluZGV4ID0gTWF0aC5yb3VuZChuZXR3b3JrQ29uZ2VzdGlvbiAqIDEwKTtcbiAgY29uc3QgY29sb3IgPSBHUkFESUVOVF9DT0xPUlNbY29sb3JJbmRleF07XG4gIGNvbnN0IHNsaWRlclRpY2tWYWx1ZSA9IGNvbG9ySW5kZXggKiAxMDtcblxuICBpZiAobmV0d29ya0Nvbmdlc3Rpb24gPD0gMC4zMykge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNMYWJlbDogJ25vdEJ1c3knLFxuICAgICAgdG9vbHRpcExhYmVsOiAnbG93TG93ZXJjYXNlJyxcbiAgICAgIGNvbG9yLFxuICAgICAgc2xpZGVyVGlja1ZhbHVlLFxuICAgIH07XG4gIH0gZWxzZSBpZiAobmV0d29ya0Nvbmdlc3Rpb24gPiAwLjY2KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0xhYmVsOiAnYnVzeScsXG4gICAgICB0b29sdGlwTGFiZWw6ICdoaWdoTG93ZXJjYXNlJyxcbiAgICAgIGNvbG9yLFxuICAgICAgc2xpZGVyVGlja1ZhbHVlLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGF0dXNMYWJlbDogJ3N0YWJsZScsXG4gICAgdG9vbHRpcExhYmVsOiAnc3RhYmxlTG93ZXJjYXNlJyxcbiAgICBjb2xvcixcbiAgICBzbGlkZXJUaWNrVmFsdWUsXG4gIH07XG59O1xuXG5jb25zdCBTdGF0dXNTbGlkZXIgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZ2FzRmVlRXN0aW1hdGVzIH0gPSB1c2VHYXNGZWVDb250ZXh0KCk7XG4gIGNvbnN0IHN0YXR1c0luZm8gPSBkZXRlcm1pbmVTdGF0dXNJbmZvKGdhc0ZlZUVzdGltYXRlcy5uZXR3b3JrQ29uZ2VzdGlvbik7XG5cbiAgcmV0dXJuIChcbiAgICA8TmV0d29ya1N0YWJpbGl0eVRvb2x0aXBcbiAgICAgIGNvbG9yPXtzdGF0dXNJbmZvLmNvbG9yfVxuICAgICAgdG9vbHRpcExhYmVsPXtzdGF0dXNJbmZvLnRvb2x0aXBMYWJlbH1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0YXR1cy1zbGlkZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdGF0dXMtc2xpZGVyX19hcnJvdy1jb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzdGF0dXMtc2xpZGVyX19hcnJvdy1ib3JkZXJcIlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogYCR7c3RhdHVzSW5mby5zbGlkZXJUaWNrVmFsdWV9JWAsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJzdGF0dXMtc2xpZGVyLWFycm93LWJvcmRlclwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzdGF0dXMtc2xpZGVyX19hcnJvd1wiXG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYm9yZGVyVG9wQ29sb3I6IHN0YXR1c0luZm8uY29sb3IsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwic3RhdHVzLXNsaWRlci1hcnJvd1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdGF0dXMtc2xpZGVyX19saW5lXCIgLz5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cInN0YXR1cy1zbGlkZXJfX2xhYmVsXCJcbiAgICAgICAgICBzdHlsZT17eyBjb2xvcjogc3RhdHVzSW5mby5jb2xvciB9fVxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwic3RhdHVzLXNsaWRlci1sYWJlbFwiXG4gICAgICAgID5cbiAgICAgICAgICA8STE4blZhbHVlIG1lc3NhZ2VLZXk9e3N0YXR1c0luZm8uc3RhdHVzTGFiZWx9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9OZXR3b3JrU3RhYmlsaXR5VG9vbHRpcD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXR1c1NsaWRlcjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgeyBISUdIX0ZFRV9XQVJOSU5HX01VTFRJUExJRVIgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9wYWdlcy9zZW5kL3NlbmQuY29uc3RhbnRzJztcbmltcG9ydCB7IFBSSU9SSVRZX0xFVkVMUyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvZ2FzJztcbmltcG9ydCB7XG4gIGRpdmlkZUN1cnJlbmNpZXMsXG4gIG11bHRpcGx5Q3VycmVuY2llcyxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvY29udmVyc2lvbi51dGlscyc7XG5pbXBvcnQgeyBQUklNQVJZLCBTRUNPTkRBUlkgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9jb21tb24nO1xuaW1wb3J0IHsgYm5HcmVhdGVyVGhhbiwgYm5MZXNzVGhhbiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBkZWNHV0VJVG9IZXhXRUkgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9oZWxwZXJzL3V0aWxzL2NvbnZlcnNpb25zLnV0aWwnO1xuaW1wb3J0IHsgZ2V0QWR2YW5jZWRHYXNGZWVWYWx1ZXMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgdXNlR2FzRmVlQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbnRleHRzL2dhc0ZlZSc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IHVzZVVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vaG9va3MvdXNlVXNlclByZWZlcmVuY2VkQ3VycmVuY3knO1xuaW1wb3J0IHsgdXNlQ3VycmVuY3lEaXNwbGF5IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vaG9va3MvdXNlQ3VycmVuY3lEaXNwbGF5JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vLi4vLi4vdWkvYm94JztcbmltcG9ydCBGb3JtRmllbGQgZnJvbSAnLi4vLi4vLi4vLi4vdWkvZm9ybS1maWVsZCc7XG5pbXBvcnQgSTE4blZhbHVlIGZyb20gJy4uLy4uLy4uLy4uL3VpL2kxOG4tdmFsdWUnO1xuXG5pbXBvcnQgeyB1c2VBZHZhbmNlZEdhc0ZlZVBvcG92ZXJDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dCc7XG5pbXBvcnQgQWR2YW5jZWRHYXNGZWVJbnB1dFN1YnRleHQgZnJvbSAnLi4vLi4vYWR2YW5jZWQtZ2FzLWZlZS1pbnB1dC1zdWJ0ZXh0JztcbmltcG9ydCB7XG4gIHJvdW5kVG9EZWNpbWFsUGxhY2VzUmVtb3ZpbmdFeHRyYVplcm9lcyxcbiAgcmVuZGVyRmVlUmFuZ2UsXG59IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgZGl2aWRlQ3VycmVuY3lWYWx1ZXMgPSAodmFsdWUsIGJhc2VGZWUpID0+IHtcbiAgaWYgKGJhc2VGZWUgPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gZGl2aWRlQ3VycmVuY2llcyh2YWx1ZSwgYmFzZUZlZSwge1xuICAgIG51bWJlck9mRGVjaW1hbHM6IDIsXG4gICAgZGl2aWRlbmRCYXNlOiAxMCxcbiAgICBkaXZpc29yQmFzZTogMTAsXG4gIH0pLnRvTnVtYmVyKCk7XG59O1xuXG5jb25zdCBtdWx0aXBseUN1cnJlbmN5VmFsdWVzID0gKGJhc2VGZWUsIHZhbHVlLCBudW1iZXJPZkRlY2ltYWxzKSA9PlxuICBtdWx0aXBseUN1cnJlbmNpZXMoYmFzZUZlZSwgdmFsdWUsIHtcbiAgICBudW1iZXJPZkRlY2ltYWxzLFxuICAgIG11bHRpcGxpY2FuZEJhc2U6IDEwLFxuICAgIG11bHRpcGxpZXJCYXNlOiAxMCxcbiAgfSkudG9OdW1iZXIoKTtcblxuY29uc3QgdmFsaWRhdGVCYXNlRmVlID0gKFxuICBlZGl0aW5nSW5Hd2VpLFxuICB2YWx1ZSxcbiAgZ2FzRmVlRXN0aW1hdGVzLFxuICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbikgPT4ge1xuICBpZiAoYm5HcmVhdGVyVGhhbihtYXhQcmlvcml0eUZlZVBlckdhcywgdmFsdWUpKSB7XG4gICAgcmV0dXJuIGVkaXRpbmdJbkd3ZWlcbiAgICAgID8gJ2VkaXRHYXNNYXhCYXNlRmVlR1dFSUltYmFsYW5jZSdcbiAgICAgIDogJ2VkaXRHYXNNYXhCYXNlRmVlTXVsdGlwbGllckltYmFsYW5jZSc7XG4gIH1cbiAgaWYgKFxuICAgIGdhc0ZlZUVzdGltYXRlcz8ubG93ICYmXG4gICAgYm5MZXNzVGhhbih2YWx1ZSwgZ2FzRmVlRXN0aW1hdGVzLmxvdy5zdWdnZXN0ZWRNYXhGZWVQZXJHYXMpXG4gICkge1xuICAgIHJldHVybiAnZWRpdEdhc01heEJhc2VGZWVMb3cnO1xuICB9XG4gIGlmIChcbiAgICBnYXNGZWVFc3RpbWF0ZXM/LmhpZ2ggJiZcbiAgICBibkdyZWF0ZXJUaGFuKFxuICAgICAgdmFsdWUsXG4gICAgICBnYXNGZWVFc3RpbWF0ZXMuaGlnaC5zdWdnZXN0ZWRNYXhGZWVQZXJHYXMgKiBISUdIX0ZFRV9XQVJOSU5HX01VTFRJUExJRVIsXG4gICAgKVxuICApIHtcbiAgICByZXR1cm4gJ2VkaXRHYXNNYXhCYXNlRmVlSGlnaCc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBCYXNlRmVlSW5wdXQgPSAoKSA9PiB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuXG4gIGNvbnN0IHsgZ2FzRmVlRXN0aW1hdGVzLCBlc3RpbWF0ZVVzZWQsIG1heEZlZVBlckdhcyB9ID0gdXNlR2FzRmVlQ29udGV4dCgpO1xuICBjb25zdCB7XG4gICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgc2V0RXJyb3JWYWx1ZSxcbiAgICBzZXRNYXhGZWVQZXJHYXMsXG4gICAgc2V0QmFzZUZlZU11bHRpcGxpZXIsXG4gIH0gPSB1c2VBZHZhbmNlZEdhc0ZlZVBvcG92ZXJDb250ZXh0KCk7XG5cbiAgY29uc3Qge1xuICAgIGVzdGltYXRlZEJhc2VGZWUsXG4gICAgaGlzdG9yaWNhbEJhc2VGZWVSYW5nZSxcbiAgICBiYXNlRmVlVHJlbmQsXG4gIH0gPSBnYXNGZWVFc3RpbWF0ZXM7XG4gIGNvbnN0IFtmZWVUcmVuZCwgc2V0RmVlVHJlbmRdID0gdXNlU3RhdGUoYmFzZUZlZVRyZW5kKTtcbiAgY29uc3QgW2Jhc2VGZWVFcnJvciwgc2V0QmFzZUZlZUVycm9yXSA9IHVzZVN0YXRlKCk7XG4gIGNvbnN0IHtcbiAgICBudW1iZXJPZkRlY2ltYWxzOiBudW1iZXJPZkRlY2ltYWxzUHJpbWFyeSxcbiAgfSA9IHVzZVVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5KFBSSU1BUlkpO1xuICBjb25zdCB7XG4gICAgY3VycmVuY3ksXG4gICAgbnVtYmVyT2ZEZWNpbWFsczogbnVtYmVyT2ZEZWNpbWFsc0ZpYXQsXG4gIH0gPSB1c2VVc2VyUHJlZmVyZW5jZWRDdXJyZW5jeShTRUNPTkRBUlkpO1xuXG4gIGNvbnN0IGFkdmFuY2VkR2FzRmVlVmFsdWVzID0gdXNlU2VsZWN0b3IoZ2V0QWR2YW5jZWRHYXNGZWVWYWx1ZXMpO1xuXG4gIGNvbnN0IFtlZGl0aW5nSW5Hd2VpLCBzZXRFZGl0aW5nSW5Hd2VpXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBbbWF4QmFzZUZlZUdXRUksIHNldE1heEJhc2VGZWVHV0VJXSA9IHVzZVN0YXRlKCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBlc3RpbWF0ZVVzZWQgIT09IFBSSU9SSVRZX0xFVkVMUy5DVVNUT00gJiZcbiAgICAgIGFkdmFuY2VkR2FzRmVlVmFsdWVzPy5tYXhCYXNlRmVlXG4gICAgKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbHlDdXJyZW5jeVZhbHVlcyhcbiAgICAgICAgZXN0aW1hdGVkQmFzZUZlZSxcbiAgICAgICAgYWR2YW5jZWRHYXNGZWVWYWx1ZXMubWF4QmFzZUZlZSxcbiAgICAgICAgbnVtYmVyT2ZEZWNpbWFsc1ByaW1hcnksXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbWF4RmVlUGVyR2FzO1xuICB9KTtcblxuICBjb25zdCBbbWF4QmFzZUZlZU11bHRpcGxpZXIsIHNldE1heEJhc2VGZWVNdWx0aXBsaWVyXSA9IHVzZVN0YXRlKCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBlc3RpbWF0ZVVzZWQgIT09IFBSSU9SSVRZX0xFVkVMUy5DVVNUT00gJiZcbiAgICAgIGFkdmFuY2VkR2FzRmVlVmFsdWVzPy5tYXhCYXNlRmVlXG4gICAgKSB7XG4gICAgICByZXR1cm4gYWR2YW5jZWRHYXNGZWVWYWx1ZXMubWF4QmFzZUZlZTtcbiAgICB9XG4gICAgcmV0dXJuIGRpdmlkZUN1cnJlbmN5VmFsdWVzKG1heEZlZVBlckdhcywgZXN0aW1hdGVkQmFzZUZlZSk7XG4gIH0pO1xuXG4gIGNvbnN0IFssIHsgdmFsdWU6IGJhc2VGZWVJbkZpYXQgfV0gPSB1c2VDdXJyZW5jeURpc3BsYXkoXG4gICAgZGVjR1dFSVRvSGV4V0VJKG1heEJhc2VGZWVHV0VJKSxcbiAgICB7IGN1cnJlbmN5LCBudW1iZXJPZkRlY2ltYWxzRmlhdCB9LFxuICApO1xuXG4gIGNvbnN0IHVwZGF0ZUJhc2VGZWUgPSB1c2VDYWxsYmFjayhcbiAgICAodmFsdWUpID0+IHtcbiAgICAgIGxldCBiYXNlRmVlSW5HV0VJO1xuICAgICAgbGV0IGJhc2VGZWVNdWx0aXBsaWVyVmFsdWU7XG4gICAgICBpZiAoZWRpdGluZ0luR3dlaSkge1xuICAgICAgICBiYXNlRmVlSW5HV0VJID0gdmFsdWU7XG4gICAgICAgIGJhc2VGZWVNdWx0aXBsaWVyVmFsdWUgPSBkaXZpZGVDdXJyZW5jeVZhbHVlcyh2YWx1ZSwgZXN0aW1hdGVkQmFzZUZlZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlRmVlSW5HV0VJID0gbXVsdGlwbHlDdXJyZW5jeVZhbHVlcyhcbiAgICAgICAgICBlc3RpbWF0ZWRCYXNlRmVlLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIG51bWJlck9mRGVjaW1hbHNQcmltYXJ5LFxuICAgICAgICApO1xuICAgICAgICBiYXNlRmVlTXVsdGlwbGllclZhbHVlID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBzZXRNYXhCYXNlRmVlR1dFSShiYXNlRmVlSW5HV0VJKTtcbiAgICAgIHNldE1heEJhc2VGZWVNdWx0aXBsaWVyKGJhc2VGZWVNdWx0aXBsaWVyVmFsdWUpO1xuICAgIH0sXG4gICAgW1xuICAgICAgZWRpdGluZ0luR3dlaSxcbiAgICAgIGVzdGltYXRlZEJhc2VGZWUsXG4gICAgICBudW1iZXJPZkRlY2ltYWxzUHJpbWFyeSxcbiAgICAgIHNldE1heEJhc2VGZWVHV0VJLFxuICAgICAgc2V0TWF4QmFzZUZlZU11bHRpcGxpZXIsXG4gICAgXSxcbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1heEZlZVBlckdhcyhtYXhCYXNlRmVlR1dFSSk7XG4gICAgY29uc3QgZXJyb3IgPSB2YWxpZGF0ZUJhc2VGZWUoXG4gICAgICBlZGl0aW5nSW5Hd2VpLFxuICAgICAgbWF4QmFzZUZlZUdXRUksXG4gICAgICBnYXNGZWVFc3RpbWF0ZXMsXG4gICAgICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICApO1xuXG4gICAgc2V0QmFzZUZlZUVycm9yKGVycm9yKTtcbiAgICBzZXRFcnJvclZhbHVlKFxuICAgICAgJ21heEZlZVBlckdhcycsXG4gICAgICBlcnJvciA9PT0gJ2VkaXRHYXNNYXhCYXNlRmVlR1dFSUltYmFsYW5jZScgfHxcbiAgICAgICAgZXJyb3IgPT09ICdlZGl0R2FzTWF4QmFzZUZlZU11bHRpcGxpZXJJbWJhbGFuY2UnLFxuICAgICk7XG4gICAgaWYgKGJhc2VGZWVUcmVuZCAhPT0gJ2xldmVsJyAmJiBiYXNlRmVlVHJlbmQgIT09IGZlZVRyZW5kKSB7XG4gICAgICBzZXRGZWVUcmVuZChiYXNlRmVlVHJlbmQpO1xuICAgIH1cbiAgICBzZXRCYXNlRmVlTXVsdGlwbGllcihtYXhCYXNlRmVlTXVsdGlwbGllcik7XG4gIH0sIFtcbiAgICBmZWVUcmVuZCxcbiAgICBlZGl0aW5nSW5Hd2VpLFxuICAgIGJhc2VGZWVUcmVuZCxcbiAgICBnYXNGZWVFc3RpbWF0ZXMsXG4gICAgbWF4QmFzZUZlZUdXRUksXG4gICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgbWF4QmFzZUZlZU11bHRpcGxpZXIsXG4gICAgc2V0QmFzZUZlZUVycm9yLFxuICAgIHNldEVycm9yVmFsdWUsXG4gICAgc2V0TWF4RmVlUGVyR2FzLFxuICAgIHNldEZlZVRyZW5kLFxuICAgIHNldEJhc2VGZWVNdWx0aXBsaWVyLFxuICBdKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3ggY2xhc3NOYW1lPVwiYmFzZS1mZWUtaW5wdXRcIiBtYXJnaW49e1swLCAyXX0+XG4gICAgICA8Rm9ybUZpZWxkXG4gICAgICAgIGVycm9yPXtiYXNlRmVlRXJyb3IgPyB0KGJhc2VGZWVFcnJvcikgOiAnJ31cbiAgICAgICAgb25DaGFuZ2U9e3VwZGF0ZUJhc2VGZWV9XG4gICAgICAgIHRpdGxlVGV4dD17dCgnbWF4QmFzZUZlZScpfVxuICAgICAgICB0aXRsZVVuaXQ9e2VkaXRpbmdJbkd3ZWkgPyAnR1dFSScgOiBgKCR7dCgnbXVsdGlwbGllcicpfSlgfVxuICAgICAgICB0b29sdGlwVGV4dD17dCgnYWR2YW5jZWRCYXNlR2FzRmVlVG9vbFRpcCcpfVxuICAgICAgICB0aXRsZURldGFpbD17XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmFzZS1mZWUtaW5wdXRfX2VkaXQtbGlua1wiXG4gICAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRFZGl0aW5nSW5Hd2VpKCFlZGl0aW5nSW5Hd2VpKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8STE4blZhbHVlXG4gICAgICAgICAgICAgIG1lc3NhZ2VLZXk9e2VkaXRpbmdJbkd3ZWkgPyAnZWRpdEluTXVsdGlwbGllcicgOiAnZWRpdEluR3dlaSd9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICB9XG4gICAgICAgIHZhbHVlPXtlZGl0aW5nSW5Hd2VpID8gbWF4QmFzZUZlZUdXRUkgOiBtYXhCYXNlRmVlTXVsdGlwbGllcn1cbiAgICAgICAgZGV0YWlsVGV4dD17YOKJiCAke2Jhc2VGZWVJbkZpYXR9YH1cbiAgICAgICAgbnVtZXJpY1xuICAgICAgLz5cbiAgICAgIDxBZHZhbmNlZEdhc0ZlZUlucHV0U3VidGV4dFxuICAgICAgICBsYXRlc3Q9e2Ake3JvdW5kVG9EZWNpbWFsUGxhY2VzUmVtb3ZpbmdFeHRyYVplcm9lcyhcbiAgICAgICAgICBlc3RpbWF0ZWRCYXNlRmVlLFxuICAgICAgICAgIDIsXG4gICAgICAgICl9IEdXRUlgfVxuICAgICAgICBoaXN0b3JpY2FsPXtyZW5kZXJGZWVSYW5nZShoaXN0b3JpY2FsQmFzZUZlZVJhbmdlKX1cbiAgICAgICAgZmVlVHJlbmQ9e2ZlZVRyZW5kfVxuICAgICAgLz5cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2VGZWVJbnB1dDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7IEhJR0hfRkVFX1dBUk5JTkdfTVVMVElQTElFUiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3BhZ2VzL3NlbmQvc2VuZC5jb25zdGFudHMnO1xuaW1wb3J0IHsgUFJJT1JJVFlfTEVWRUxTIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9nYXMnO1xuaW1wb3J0IHsgU0VDT05EQVJZIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvY29tbW9uJztcbmltcG9ydCB7IGRlY0dXRUlUb0hleFdFSSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvY29udmVyc2lvbnMudXRpbCc7XG5pbXBvcnQgeyBnZXRBZHZhbmNlZEdhc0ZlZVZhbHVlcyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyB1c2VDdXJyZW5jeURpc3BsYXkgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9ob29rcy91c2VDdXJyZW5jeURpc3BsYXknO1xuaW1wb3J0IHsgdXNlR2FzRmVlQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbnRleHRzL2dhc0ZlZSc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IHVzZVVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vaG9va3MvdXNlVXNlclByZWZlcmVuY2VkQ3VycmVuY3knO1xuaW1wb3J0IEZvcm1GaWVsZCBmcm9tICcuLi8uLi8uLi8uLi91aS9mb3JtLWZpZWxkJztcbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vLi4vLi4vdWkvYm94JztcbmltcG9ydCB7IGJuR3JlYXRlclRoYW4sIGJuTGVzc1RoYW4gfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9oZWxwZXJzL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyB1c2VBZHZhbmNlZEdhc0ZlZVBvcG92ZXJDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dCc7XG5pbXBvcnQgQWR2YW5jZWRHYXNGZWVJbnB1dFN1YnRleHQgZnJvbSAnLi4vLi4vYWR2YW5jZWQtZ2FzLWZlZS1pbnB1dC1zdWJ0ZXh0JztcbmltcG9ydCB7IHJlbmRlckZlZVJhbmdlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCB2YWxpZGF0ZVByaW9yaXR5RmVlID0gKHZhbHVlLCBnYXNGZWVFc3RpbWF0ZXMpID0+IHtcbiAgaWYgKHZhbHVlIDw9IDApIHtcbiAgICByZXR1cm4gJ2VkaXRHYXNNYXhQcmlvcml0eUZlZUJlbG93TWluaW11bVYyJztcbiAgfVxuICBpZiAoXG4gICAgZ2FzRmVlRXN0aW1hdGVzPy5sb3cgJiZcbiAgICBibkxlc3NUaGFuKHZhbHVlLCBnYXNGZWVFc3RpbWF0ZXMubG93LnN1Z2dlc3RlZE1heFByaW9yaXR5RmVlUGVyR2FzKVxuICApIHtcbiAgICByZXR1cm4gJ2VkaXRHYXNNYXhQcmlvcml0eUZlZUxvd1YyJztcbiAgfVxuICBpZiAoXG4gICAgZ2FzRmVlRXN0aW1hdGVzPy5oaWdoICYmXG4gICAgYm5HcmVhdGVyVGhhbihcbiAgICAgIHZhbHVlLFxuICAgICAgZ2FzRmVlRXN0aW1hdGVzLmhpZ2guc3VnZ2VzdGVkTWF4UHJpb3JpdHlGZWVQZXJHYXMgKlxuICAgICAgICBISUdIX0ZFRV9XQVJOSU5HX01VTFRJUExJRVIsXG4gICAgKVxuICApIHtcbiAgICByZXR1cm4gJ2VkaXRHYXNNYXhQcmlvcml0eUZlZUhpZ2hWMic7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBQcmlvcml0eUZlZUlucHV0ID0gKCkgPT4ge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgY29uc3QgYWR2YW5jZWRHYXNGZWVWYWx1ZXMgPSB1c2VTZWxlY3RvcihnZXRBZHZhbmNlZEdhc0ZlZVZhbHVlcyk7XG4gIGNvbnN0IHtcbiAgICBzZXRFcnJvclZhbHVlLFxuICAgIHNldE1heFByaW9yaXR5RmVlUGVyR2FzLFxuICB9ID0gdXNlQWR2YW5jZWRHYXNGZWVQb3BvdmVyQ29udGV4dCgpO1xuICBjb25zdCB7XG4gICAgZXN0aW1hdGVVc2VkLFxuICAgIGdhc0ZlZUVzdGltYXRlcyxcbiAgICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgfSA9IHVzZUdhc0ZlZUNvbnRleHQoKTtcbiAgY29uc3Qge1xuICAgIGxhdGVzdFByaW9yaXR5RmVlUmFuZ2UsXG4gICAgaGlzdG9yaWNhbFByaW9yaXR5RmVlUmFuZ2UsXG4gICAgcHJpb3JpdHlGZWVUcmVuZCxcbiAgfSA9IGdhc0ZlZUVzdGltYXRlcztcbiAgY29uc3QgW2ZlZVRyZW5kLCBzZXRGZWVUcmVuZF0gPSB1c2VTdGF0ZShwcmlvcml0eUZlZVRyZW5kKTtcbiAgY29uc3QgW3ByaW9yaXR5RmVlRXJyb3IsIHNldFByaW9yaXR5RmVlRXJyb3JdID0gdXNlU3RhdGUoKTtcblxuICBjb25zdCBbcHJpb3JpdHlGZWUsIHNldFByaW9yaXR5RmVlXSA9IHVzZVN0YXRlKCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBlc3RpbWF0ZVVzZWQgIT09IFBSSU9SSVRZX0xFVkVMUy5DVVNUT00gJiZcbiAgICAgIGFkdmFuY2VkR2FzRmVlVmFsdWVzPy5wcmlvcml0eUZlZVxuICAgIClcbiAgICAgIHJldHVybiBhZHZhbmNlZEdhc0ZlZVZhbHVlcy5wcmlvcml0eUZlZTtcbiAgICByZXR1cm4gbWF4UHJpb3JpdHlGZWVQZXJHYXM7XG4gIH0pO1xuXG4gIGNvbnN0IHsgY3VycmVuY3ksIG51bWJlck9mRGVjaW1hbHMgfSA9IHVzZVVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5KFNFQ09OREFSWSk7XG5cbiAgY29uc3QgWywgeyB2YWx1ZTogcHJpb3JpdHlGZWVJbkZpYXQgfV0gPSB1c2VDdXJyZW5jeURpc3BsYXkoXG4gICAgZGVjR1dFSVRvSGV4V0VJKHByaW9yaXR5RmVlKSxcbiAgICB7IGN1cnJlbmN5LCBudW1iZXJPZkRlY2ltYWxzIH0sXG4gICk7XG5cbiAgY29uc3QgdXBkYXRlUHJpb3JpdHlGZWUgPSAodmFsdWUpID0+IHtcbiAgICBzZXRQcmlvcml0eUZlZSh2YWx1ZSk7XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRNYXhQcmlvcml0eUZlZVBlckdhcyhwcmlvcml0eUZlZSk7XG4gICAgY29uc3QgZXJyb3IgPSB2YWxpZGF0ZVByaW9yaXR5RmVlKHByaW9yaXR5RmVlLCBnYXNGZWVFc3RpbWF0ZXMpO1xuICAgIHNldEVycm9yVmFsdWUoXG4gICAgICAnbWF4UHJpb3JpdHlGZWVQZXJHYXMnLFxuICAgICAgZXJyb3IgPT09ICdlZGl0R2FzTWF4UHJpb3JpdHlGZWVCZWxvd01pbmltdW1WMicsXG4gICAgKTtcbiAgICBzZXRQcmlvcml0eUZlZUVycm9yKGVycm9yKTtcbiAgICBpZiAocHJpb3JpdHlGZWVUcmVuZCAhPT0gJ2xldmVsJyAmJiBwcmlvcml0eUZlZVRyZW5kICE9PSBmZWVUcmVuZCkge1xuICAgICAgc2V0RmVlVHJlbmQocHJpb3JpdHlGZWVUcmVuZCk7XG4gICAgfVxuICB9LCBbXG4gICAgZmVlVHJlbmQsXG4gICAgcHJpb3JpdHlGZWVUcmVuZCxcbiAgICBnYXNGZWVFc3RpbWF0ZXMsXG4gICAgcHJpb3JpdHlGZWUsXG4gICAgc2V0RXJyb3JWYWx1ZSxcbiAgICBzZXRNYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICBzZXRQcmlvcml0eUZlZUVycm9yLFxuICAgIHNldEZlZVRyZW5kLFxuICBdKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3ggbWFyZ2luPXtbMCwgMl19PlxuICAgICAgPEZvcm1GaWVsZFxuICAgICAgICBlcnJvcj17cHJpb3JpdHlGZWVFcnJvciA/IHQocHJpb3JpdHlGZWVFcnJvcikgOiAnJ31cbiAgICAgICAgb25DaGFuZ2U9e3VwZGF0ZVByaW9yaXR5RmVlfVxuICAgICAgICB0aXRsZVRleHQ9e3QoJ3ByaW9yaXR5RmVlUHJvcGVyQ2FzZScpfVxuICAgICAgICB0aXRsZVVuaXQ9XCIoR1dFSSlcIlxuICAgICAgICB0b29sdGlwVGV4dD17dCgnYWR2YW5jZWRQcmlvcml0eUZlZVRvb2xUaXAnKX1cbiAgICAgICAgdmFsdWU9e3ByaW9yaXR5RmVlfVxuICAgICAgICBkZXRhaWxUZXh0PXtg4omIICR7cHJpb3JpdHlGZWVJbkZpYXR9YH1cbiAgICAgICAgbnVtZXJpY1xuICAgICAgLz5cbiAgICAgIDxBZHZhbmNlZEdhc0ZlZUlucHV0U3VidGV4dFxuICAgICAgICBsYXRlc3Q9e3JlbmRlckZlZVJhbmdlKGxhdGVzdFByaW9yaXR5RmVlUmFuZ2UpfVxuICAgICAgICBoaXN0b3JpY2FsPXtyZW5kZXJGZWVSYW5nZShoaXN0b3JpY2FsUHJpb3JpdHlGZWVSYW5nZSl9XG4gICAgICAgIGZlZVRyZW5kPXtmZWVUcmVuZH1cbiAgICAgIC8+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcmlvcml0eUZlZUlucHV0O1xuIiwiaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IEFzc2V0TGlzdEl0ZW0gZnJvbSAnLi4vYXNzZXQtbGlzdC1pdGVtJztcbmltcG9ydCB7IGdldFNlbGVjdGVkQWRkcmVzcyB9IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IHVzZVRva2VuRmlhdEFtb3VudCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZVRva2VuRmlhdEFtb3VudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRva2VuQ2VsbCh7XG4gIGFkZHJlc3MsXG4gIGRlY2ltYWxzLFxuICBiYWxhbmNlRXJyb3IsXG4gIHN5bWJvbCxcbiAgc3RyaW5nLFxuICBpbWFnZSxcbiAgb25DbGljayxcbiAgaXNFUkM3MjEsXG59KSB7XG4gIGNvbnN0IHVzZXJBZGRyZXNzID0gdXNlU2VsZWN0b3IoZ2V0U2VsZWN0ZWRBZGRyZXNzKTtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG5cbiAgY29uc3QgZm9ybWF0dGVkRmlhdCA9IHVzZVRva2VuRmlhdEFtb3VudChhZGRyZXNzLCBzdHJpbmcsIHN5bWJvbCk7XG4gIGNvbnN0IHdhcm5pbmcgPSBiYWxhbmNlRXJyb3IgPyAoXG4gICAgPHNwYW4+XG4gICAgICB7dCgndHJvdWJsZVRva2VuQmFsYW5jZXMnKX1cbiAgICAgIDxhXG4gICAgICAgIGhyZWY9e2BodHRwczovL2V0aHBsb3Jlci5pby9hZGRyZXNzLyR7dXNlckFkZHJlc3N9YH1cbiAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgIG9uQ2xpY2s9eyhldmVudCkgPT4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCl9XG4gICAgICAgIHN0eWxlPXt7IGNvbG9yOiAnI0Y3ODYxQycgfX1cbiAgICAgID5cbiAgICAgICAge3QoJ2hlcmUnKX1cbiAgICAgIDwvYT5cbiAgICA8L3NwYW4+XG4gICkgOiBudWxsO1xuXG4gIHJldHVybiAoXG4gICAgPEFzc2V0TGlzdEl0ZW1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcygndG9rZW4tY2VsbCcsIHtcbiAgICAgICAgJ3Rva2VuLWNlbGwtLW91dGRhdGVkJzogQm9vbGVhbihiYWxhbmNlRXJyb3IpLFxuICAgICAgfSl9XG4gICAgICBpY29uQ2xhc3NOYW1lPVwidG9rZW4tY2VsbF9faWNvblwiXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrLmJpbmQobnVsbCwgYWRkcmVzcyl9XG4gICAgICB0b2tlbkFkZHJlc3M9e2FkZHJlc3N9XG4gICAgICB0b2tlbkltYWdlPXtpbWFnZX1cbiAgICAgIHRva2VuU3ltYm9sPXtzeW1ib2x9XG4gICAgICB0b2tlbkRlY2ltYWxzPXtkZWNpbWFsc31cbiAgICAgIHdhcm5pbmc9e3dhcm5pbmd9XG4gICAgICBwcmltYXJ5PXtgJHtzdHJpbmcgfHwgMH1gfVxuICAgICAgc2Vjb25kYXJ5PXtmb3JtYXR0ZWRGaWF0fVxuICAgICAgaXNFUkM3MjE9e2lzRVJDNzIxfVxuICAgIC8+XG4gICk7XG59XG5cblRva2VuQ2VsbC5wcm9wVHlwZXMgPSB7XG4gIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGJhbGFuY2VFcnJvcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgc3ltYm9sOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBkZWNpbWFsczogUHJvcFR5cGVzLm51bWJlcixcbiAgc3RyaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpbWFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNFUkM3MjE6IFByb3BUeXBlcy5ib29sLFxufTtcblxuVG9rZW5DZWxsLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFsYW5jZUVycm9yOiBudWxsLFxufTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3NlbmQtcm93LXdyYXBwZXIuY29tcG9uZW50JztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL2kxOG4nO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi4vdG9vbHRpcCc7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi9wb3BvdmVyJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9uJztcbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vaWRlbnRpY29uL2lkZW50aWNvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgc2hvcnRlbkFkZHJlc3MgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL3V0aWxzL3V0aWwnO1xuaW1wb3J0IENvcHlJY29uIGZyb20gJy4uL2ljb24vY29weS1pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyB1c2VDb3B5VG9DbGlwYm9hcmQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VDb3B5VG9DbGlwYm9hcmQnO1xuXG5jb25zdCBOaWNrbmFtZVBvcG92ZXIgPSAoe1xuICBhZGRyZXNzLFxuICBuaWNrbmFtZSxcbiAgb25DbG9zZSA9IG51bGwsXG4gIG9uQWRkID0gbnVsbCxcbiAgZXhwbG9yZXJMaW5rLFxufSkgPT4ge1xuICBjb25zdCB0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG5cbiAgY29uc3Qgb25BZGRDbGljayA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBvbkFkZCgpO1xuICB9LCBbb25BZGRdKTtcblxuICBjb25zdCBbY29waWVkLCBoYW5kbGVDb3B5XSA9IHVzZUNvcHlUb0NsaXBib2FyZCgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJuaWNrbmFtZS1wb3BvdmVyXCI+XG4gICAgICA8UG9wb3ZlciBvbkNsb3NlPXtvbkNsb3NlfSBjbGFzc05hbWU9XCJuaWNrbmFtZS1wb3BvdmVyX19wb3BvdmVyLXdyYXBcIj5cbiAgICAgICAgPElkZW50aWNvblxuICAgICAgICAgIGFkZHJlc3M9e2FkZHJlc3N9XG4gICAgICAgICAgZGlhbWV0ZXI9ezM2fVxuICAgICAgICAgIGNsYXNzTmFtZT1cIm5pY2tuYW1lLXBvcG92ZXJfX2lkZW50aWNvblwiXG4gICAgICAgIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmlja25hbWUtcG9wb3Zlcl9fYWRkcmVzc1wiPlxuICAgICAgICAgIHtuaWNrbmFtZSB8fCBzaG9ydGVuQWRkcmVzcyhhZGRyZXNzKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmlja25hbWUtcG9wb3Zlcl9fcHVibGljLWFkZHJlc3NcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5pY2tuYW1lLXBvcG92ZXJfX3B1YmxpYy1hZGRyZXNzX19jb25zdGFudFwiPlxuICAgICAgICAgICAge2FkZHJlc3N9XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8VG9vbHRpcFxuICAgICAgICAgICAgcG9zaXRpb249XCJib3R0b21cIlxuICAgICAgICAgICAgdGl0bGU9e2NvcGllZCA/IHQoJ2NvcGllZEV4Y2xhbWF0aW9uJykgOiB0KCdjb3B5VG9DbGlwYm9hcmQnKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJsaW5rXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGhhbmRsZUNvcHkoYWRkcmVzcyk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHRpdGxlPVwiXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPENvcHlJY29uIHNpemU9ezExfSBjb2xvcj1cIiM5ODlhOWJcIiAvPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5pY2tuYW1lLXBvcG92ZXJfX3ZpZXctb24tYmxvY2stZXhwbG9yZXJcIj5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJuaWNrbmFtZS1wb3BvdmVyX19ldGhlcnNjYW4tbGlua1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGdsb2JhbC5wbGF0Zm9ybS5vcGVuVGFiKHtcbiAgICAgICAgICAgICAgICB1cmw6IGV4cGxvcmVyTGluayxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgdGl0bGU9e3QoJ2V0aGVyc2NhblZpZXcnKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dCgndmlld09uQmxvY2tFeHBsb3JlcicpfVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJuaWNrbmFtZS1wb3BvdmVyX19mb290ZXItYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXtvbkFkZENsaWNrfVxuICAgICAgICA+XG4gICAgICAgICAge25pY2tuYW1lID8gdCgnZWRpdEFOaWNrbmFtZScpIDogdCgnYWRkQU5pY2tuYW1lJyl9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9Qb3BvdmVyPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuTmlja25hbWVQb3BvdmVyLnByb3BUeXBlcyA9IHtcbiAgYWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgbmlja25hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICBvbkFkZDogUHJvcFR5cGVzLmZ1bmMsXG4gIGV4cGxvcmVyTGluazogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5pY2tuYW1lUG9wb3ZlcjtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2Ftb3VudC1tYXgtYnV0dG9uJztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3VzZXItcHJlZmVyZW5jZWQtdG9rZW4taW5wdXQuY29udGFpbmVyJztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3VzZXItcHJlZmVyZW5jZWQtY3VycmVuY3ktaW5wdXQuY29udGFpbmVyJztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi90b29sdGlwJztcbmltcG9ydCB7IGdldFNlbGVjdGVkQWNjb3VudCB9IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgSW5mb0ljb24gZnJvbSAnLi4vaWNvbi9pbmZvLWljb24uY29tcG9uZW50JztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IHsgU0VWRVJJVElFUyB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBY2NvdW50TWlzbWF0Y2hXYXJuaW5nKHsgYWRkcmVzcyB9KSB7XG4gIGNvbnN0IHNlbGVjdGVkQWNjb3VudCA9IHVzZVNlbGVjdG9yKGdldFNlbGVjdGVkQWNjb3VudCk7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBpZiAoc2VsZWN0ZWRBY2NvdW50LmFkZHJlc3MgPT09IGFkZHJlc3MpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFRvb2x0aXBcbiAgICAgIHBvc2l0aW9uPVwiYm90dG9tXCJcbiAgICAgIGh0bWw9ezxwPnt0KCdub3RDdXJyZW50QWNjb3VudCcpfTwvcD59XG4gICAgICB3cmFwcGVyQ2xhc3NOYW1lPVwiYWNjb3VudC1taXNtYXRjaC13YXJuaW5nX190b29sdGlwLXdyYXBwZXJcIlxuICAgICAgY29udGFpbmVyQ2xhc3NOYW1lPVwiYWNjb3VudC1taXNtYXRjaC13YXJuaW5nX190b29sdGlwLWNvbnRhaW5lclwiXG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY2NvdW50LW1pc21hdGNoLXdhcm5pbmdfX3Rvb2x0aXAtY29udGFpbmVyLWljb25cIj5cbiAgICAgICAgPEluZm9JY29uIHNldmVyaXR5PXtTRVZFUklUSUVTLldBUk5JTkd9IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1Rvb2x0aXA+XG4gICk7XG59XG5cbkFjY291bnRNaXNtYXRjaFdhcm5pbmcucHJvcFR5cGVzID0ge1xuICBhZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IFRhYnMsIFRhYiB9IGZyb20gJy4uLy4uLy4uL3VpL3RhYnMnO1xuaW1wb3J0IEVycm9yTWVzc2FnZSBmcm9tICcuLi8uLi8uLi91aS9lcnJvci1tZXNzYWdlJztcbmltcG9ydCBBY3Rpb25hYmxlTWVzc2FnZSBmcm9tICcuLi8uLi8uLi91aS9hY3Rpb25hYmxlLW1lc3NhZ2UvYWN0aW9uYWJsZS1tZXNzYWdlJztcbmltcG9ydCB7IFBhZ2VDb250YWluZXJGb290ZXIgfSBmcm9tICcuLi8uLi8uLi91aS9wYWdlLWNvbnRhaW5lcic7XG5pbXBvcnQgeyBDb25maXJtUGFnZUNvbnRhaW5lclN1bW1hcnksIENvbmZpcm1QYWdlQ29udGFpbmVyV2FybmluZyB9IGZyb20gJy4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25maXJtUGFnZUNvbnRhaW5lckNvbnRlbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBhY3Rpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGF0YUNvbXBvbmVudDogUHJvcFR5cGVzLm5vZGUsXG4gICAgZGF0YUhleENvbXBvbmVudDogUHJvcFR5cGVzLm5vZGUsXG4gICAgZGV0YWlsc0NvbXBvbmVudDogUHJvcFR5cGVzLm5vZGUsXG4gICAgZXJyb3JLZXk6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXJyb3JNZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhhc1NpbXVsYXRpb25FcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGlkZVN1YnRpdGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpZGVudGljb25BZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG5vbmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN1YnRpdGxlQ29tcG9uZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgICB0aXRsZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgIHRpdGxlQ29tcG9uZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgICB3YXJuaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9yaWdpbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGV0aEdhc1ByaWNlV2FybmluZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvLyBGb290ZXJcbiAgICBvbkNhbmNlbEFsbDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DYW5jZWw6IFByb3BUeXBlcy5mdW5jLFxuICAgIGNhbmNlbFRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25TdWJtaXQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNldFVzZXJBY2tub3dsZWRnZWRHYXNNaXNzaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzdWJtaXRUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoaWRlVXNlckFja25vd2xlZGdlZEdhc01pc3Npbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIHVuYXBwcm92ZWRUeENvdW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHJlamVjdE5UZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhpZGVUaXRsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3VwcG9ydHNFSVAxNTU5VjI6IFByb3BUeXBlcy5ib29sLFxuICB9O1xuXG4gIHJlbmRlckNvbnRlbnQoKSB7XG4gICAgY29uc3QgeyBkZXRhaWxzQ29tcG9uZW50LCBkYXRhQ29tcG9uZW50IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGRldGFpbHNDb21wb25lbnQgJiYgZGF0YUNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyVGFicygpO1xuICAgIH1cbiAgICByZXR1cm4gZGV0YWlsc0NvbXBvbmVudCB8fCBkYXRhQ29tcG9uZW50O1xuICB9XG5cbiAgcmVuZGVyVGFicygpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7IGRldGFpbHNDb21wb25lbnQsIGRhdGFDb21wb25lbnQsIGRhdGFIZXhDb21wb25lbnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRhYnM+XG4gICAgICAgIDxUYWJcbiAgICAgICAgICBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLWNvbnRlbnRfX3RhYlwiXG4gICAgICAgICAgbmFtZT17dCgnZGV0YWlscycpfVxuICAgICAgICA+XG4gICAgICAgICAge2RldGFpbHNDb21wb25lbnR9XG4gICAgICAgIDwvVGFiPlxuICAgICAgICA8VGFiIGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItY29udGVudF9fdGFiXCIgbmFtZT17dCgnZGF0YScpfT5cbiAgICAgICAgICB7ZGF0YUNvbXBvbmVudH1cbiAgICAgICAgPC9UYWI+XG4gICAgICAgIHtkYXRhSGV4Q29tcG9uZW50ICYmIChcbiAgICAgICAgICA8VGFiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLWNvbnRlbnRfX3RhYlwiXG4gICAgICAgICAgICBuYW1lPXt0KCdkYXRhSGV4Jyl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2RhdGFIZXhDb21wb25lbnR9XG4gICAgICAgICAgPC9UYWI+XG4gICAgICAgICl9XG4gICAgICA8L1RhYnM+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBlcnJvcktleSxcbiAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgIGhhc1NpbXVsYXRpb25FcnJvcixcbiAgICAgIHRpdGxlLFxuICAgICAgdGl0bGVDb21wb25lbnQsXG4gICAgICBzdWJ0aXRsZUNvbXBvbmVudCxcbiAgICAgIGhpZGVTdWJ0aXRsZSxcbiAgICAgIGlkZW50aWNvbkFkZHJlc3MsXG4gICAgICBub25jZSxcbiAgICAgIGRldGFpbHNDb21wb25lbnQsXG4gICAgICBkYXRhQ29tcG9uZW50LFxuICAgICAgd2FybmluZyxcbiAgICAgIG9uQ2FuY2VsQWxsLFxuICAgICAgb25DYW5jZWwsXG4gICAgICBjYW5jZWxUZXh0LFxuICAgICAgb25TdWJtaXQsXG4gICAgICBzdWJtaXRUZXh0LFxuICAgICAgZGlzYWJsZWQsXG4gICAgICB1bmFwcHJvdmVkVHhDb3VudCxcbiAgICAgIHJlamVjdE5UZXh0LFxuICAgICAgb3JpZ2luLFxuICAgICAgZXRoR2FzUHJpY2VXYXJuaW5nLFxuICAgICAgaGlkZVRpdGxlLFxuICAgICAgc2V0VXNlckFja25vd2xlZGdlZEdhc01pc3NpbmcsXG4gICAgICBoaWRlVXNlckFja25vd2xlZGdlZEdhc01pc3NpbmcsXG4gICAgICBzdXBwb3J0c0VJUDE1NTlWMixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHByaW1hcnlBY3Rpb24gPSBoaWRlVXNlckFja25vd2xlZGdlZEdhc01pc3NpbmdcbiAgICAgID8gbnVsbFxuICAgICAgOiB7XG4gICAgICAgICAgbGFiZWw6IHRoaXMuY29udGV4dC50KCd0cnlBbnl3YXlPcHRpb24nKSxcbiAgICAgICAgICBvbkNsaWNrOiBzZXRVc2VyQWNrbm93bGVkZ2VkR2FzTWlzc2luZyxcbiAgICAgICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItY29udGVudFwiPlxuICAgICAgICB7d2FybmluZyA/IDxDb25maXJtUGFnZUNvbnRhaW5lcldhcm5pbmcgd2FybmluZz17d2FybmluZ30gLz4gOiBudWxsfVxuICAgICAgICB7ZXRoR2FzUHJpY2VXYXJuaW5nICYmIChcbiAgICAgICAgICA8Q29uZmlybVBhZ2VDb250YWluZXJXYXJuaW5nIHdhcm5pbmc9e2V0aEdhc1ByaWNlV2FybmluZ30gLz5cbiAgICAgICAgKX1cbiAgICAgICAge2hhc1NpbXVsYXRpb25FcnJvciAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLWNvbnRlbnRfX2Vycm9yLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPEFjdGlvbmFibGVNZXNzYWdlXG4gICAgICAgICAgICAgIHR5cGU9XCJkYW5nZXJcIlxuICAgICAgICAgICAgICBwcmltYXJ5QWN0aW9uPXtwcmltYXJ5QWN0aW9ufVxuICAgICAgICAgICAgICBtZXNzYWdlPXt0aGlzLmNvbnRleHQudCgnc2ltdWxhdGlvbkVycm9yTWVzc2FnZScpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAgPENvbmZpcm1QYWdlQ29udGFpbmVyU3VtbWFyeVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcyh7XG4gICAgICAgICAgICAnY29uZmlybS1wYWdlLWNvbnRhaW5lci1zdW1tYXJ5LS1ib3JkZXInOlxuICAgICAgICAgICAgICAhZGV0YWlsc0NvbXBvbmVudCB8fCAhZGF0YUNvbXBvbmVudCxcbiAgICAgICAgICB9KX1cbiAgICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgICAgdGl0bGVDb21wb25lbnQ9e3RpdGxlQ29tcG9uZW50fVxuICAgICAgICAgIHN1YnRpdGxlQ29tcG9uZW50PXtzdWJ0aXRsZUNvbXBvbmVudH1cbiAgICAgICAgICBoaWRlU3VidGl0bGU9e2hpZGVTdWJ0aXRsZX1cbiAgICAgICAgICBpZGVudGljb25BZGRyZXNzPXtpZGVudGljb25BZGRyZXNzfVxuICAgICAgICAgIG5vbmNlPXtub25jZX1cbiAgICAgICAgICBvcmlnaW49e29yaWdpbn1cbiAgICAgICAgICBoaWRlVGl0bGU9e2hpZGVUaXRsZX1cbiAgICAgICAgLz5cbiAgICAgICAge3RoaXMucmVuZGVyQ29udGVudCgpfVxuICAgICAgICB7IXN1cHBvcnRzRUlQMTU1OVYyICYmXG4gICAgICAgICAgIWhhc1NpbXVsYXRpb25FcnJvciAmJlxuICAgICAgICAgIChlcnJvcktleSB8fCBlcnJvck1lc3NhZ2UpICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybS1wYWdlLWNvbnRhaW5lci1jb250ZW50X19lcnJvci1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPEVycm9yTWVzc2FnZSBlcnJvck1lc3NhZ2U9e2Vycm9yTWVzc2FnZX0gZXJyb3JLZXk9e2Vycm9yS2V5fSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPFBhZ2VDb250YWluZXJGb290ZXJcbiAgICAgICAgICBvbkNhbmNlbD17b25DYW5jZWx9XG4gICAgICAgICAgY2FuY2VsVGV4dD17Y2FuY2VsVGV4dH1cbiAgICAgICAgICBvblN1Ym1pdD17b25TdWJtaXR9XG4gICAgICAgICAgc3VibWl0VGV4dD17c3VibWl0VGV4dH1cbiAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgID5cbiAgICAgICAgICB7dW5hcHByb3ZlZFR4Q291bnQgPiAxID8gKFxuICAgICAgICAgICAgPGEgb25DbGljaz17b25DYW5jZWxBbGx9PntyZWplY3ROVGV4dH08L2E+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvUGFnZUNvbnRhaW5lckZvb3Rlcj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2NvbmZpcm0tcGFnZS1jb250YWluZXItc3VtbWFyeS5jb21wb25lbnQnO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vY29uZmlybS1wYWdlLWNvbnRhaW5lci13YXJuaW5nLmNvbXBvbmVudCc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQWNjb3VudExpc3RJdGVtIGZyb20gJy4uLy4uL2FjY291bnQtbGlzdC1pdGVtJztcbmltcG9ydCBOZXR3b3JrRGlzcGxheSBmcm9tICcuLi8uLi9uZXR3b3JrLWRpc3BsYXknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaWduYXR1cmVSZXF1ZXN0SGVhZGVyIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZnJvbUFjY291bnQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZnJvbUFjY291bnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1oZWFkZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1oZWFkZXItLWFjY291bnRcIj5cbiAgICAgICAgICB7ZnJvbUFjY291bnQgPyA8QWNjb3VudExpc3RJdGVtIGFjY291bnQ9e2Zyb21BY2NvdW50fSAvPiA6IG51bGx9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZ25hdHVyZS1yZXF1ZXN0LWhlYWRlci0tbmV0d29ya1wiPlxuICAgICAgICAgIDxOZXR3b3JrRGlzcGxheSBjb2xvcmVkPXtmYWxzZX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uLy4uL3VpL2J1dHRvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpZ25hdHVyZVJlcXVlc3RGb290ZXIgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjYW5jZWxBY3Rpb246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2lnbkFjdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjYW5jZWxBY3Rpb24sIHNpZ25BY3Rpb24sIGRpc2FibGVkID0gZmFsc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2lnbmF0dXJlLXJlcXVlc3QtZm9vdGVyXCI+XG4gICAgICAgIDxCdXR0b24gb25DbGljaz17Y2FuY2VsQWN0aW9ufSB0eXBlPVwic2Vjb25kYXJ5XCIgbGFyZ2U+XG4gICAgICAgICAge3RoaXMuY29udGV4dC50KCdjYW5jZWwnKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDxCdXR0b24gb25DbGljaz17c2lnbkFjdGlvbn0gdHlwZT1cInByaW1hcnlcIiBkaXNhYmxlZD17ZGlzYWJsZWR9IGxhcmdlPlxuICAgICAgICAgIHt0aGlzLmNvbnRleHQudCgnc2lnbicpfVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaWduYXR1cmVSZXF1ZXN0TWVzc2FnZSBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGRhdGE6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHJlbmRlck5vZGUoZGF0YSkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZ25hdHVyZS1yZXF1ZXN0LW1lc3NhZ2UtLW5vZGVcIj5cbiAgICAgICAge09iamVjdC5lbnRyaWVzKGRhdGEpLm1hcCgoW2xhYmVsLCB2YWx1ZV0sIGkpID0+IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3NpZ25hdHVyZS1yZXF1ZXN0LW1lc3NhZ2UtLW5vZGUnLCB7XG4gICAgICAgICAgICAgICdzaWduYXR1cmUtcmVxdWVzdC1tZXNzYWdlLS1ub2RlLWxlYWYnOlxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1tZXNzYWdlLS1ub2RlLWxhYmVsXCI+XG4gICAgICAgICAgICAgIHtsYWJlbH06eycgJ31cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIHt0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsID8gKFxuICAgICAgICAgICAgICB0aGlzLnJlbmRlck5vZGUodmFsdWUpXG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1tZXNzYWdlLS1ub2RlLXZhbHVlXCI+XG4gICAgICAgICAgICAgICAge2Ake3ZhbHVlfWB9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1tZXNzYWdlXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2lnbmF0dXJlLXJlcXVlc3QtbWVzc2FnZV9fdGl0bGVcIj5cbiAgICAgICAgICB7dGhpcy5jb250ZXh0LnQoJ3NpZ25hdHVyZVJlcXVlc3QxJyl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZ25hdHVyZS1yZXF1ZXN0LW1lc3NhZ2UtLXJvb3RcIj5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJOb2RlKGRhdGEpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAob2JqLCBrZXlzKSB7XG4gIHZhciB0YXJnZXQgPSB7fTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7XG4gICAgdGFyZ2V0W2ldID0gb2JqW2ldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jaHJvbWVMaWdodCA9IGV4cG9ydHMuY2hyb21lRGFyayA9IHVuZGVmaW5lZDtcblxudmFyIF9jaHJvbWVEYXJrMiA9IHJlcXVpcmUoJy4vY2hyb21lRGFyaycpO1xuXG52YXIgX2Nocm9tZURhcmszID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hyb21lRGFyazIpO1xuXG52YXIgX2Nocm9tZUxpZ2h0MiA9IHJlcXVpcmUoJy4vY2hyb21lTGlnaHQnKTtcblxudmFyIF9jaHJvbWVMaWdodDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jaHJvbWVMaWdodDIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmNocm9tZURhcmsgPSBfY2hyb21lRGFyazMuZGVmYXVsdDtcbmV4cG9ydHMuY2hyb21lTGlnaHQgPSBfY2hyb21lTGlnaHQzLmRlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX09iamVjdE5hbWUgPSByZXF1aXJlKCcuLi9vYmplY3QvT2JqZWN0TmFtZScpO1xuXG52YXIgX09iamVjdE5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2JqZWN0TmFtZSk7XG5cbnZhciBfT2JqZWN0VmFsdWUgPSByZXF1aXJlKCcuLi9vYmplY3QvT2JqZWN0VmFsdWUnKTtcblxudmFyIF9PYmplY3RWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PYmplY3RWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogaWYgaXNOb25lbnVtZXJhYmxlIGlzIHNwZWNpZmllZCwgcmVuZGVyIHRoZSBuYW1lIGRpbW1lZFxuICovXG52YXIgT2JqZWN0TGFiZWwgPSBmdW5jdGlvbiBPYmplY3RMYWJlbChfcmVmKSB7XG4gIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgZGF0YSA9IF9yZWYuZGF0YSxcbiAgICAgIGlzTm9uZW51bWVyYWJsZSA9IF9yZWYuaXNOb25lbnVtZXJhYmxlO1xuXG4gIHZhciBvYmplY3QgPSBkYXRhO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnc3BhbicsXG4gICAgbnVsbCxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfT2JqZWN0TmFtZTIuZGVmYXVsdCwgeyBuYW1lOiBuYW1lLCBkaW1tZWQ6IGlzTm9uZW51bWVyYWJsZSB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIG51bGwsXG4gICAgICAnOiAnXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfT2JqZWN0VmFsdWUyLmRlZmF1bHQsIHsgb2JqZWN0OiBvYmplY3QgfSlcbiAgKTtcbn07XG5cbk9iamVjdExhYmVsLnByb3BUeXBlcyA9IHtcbiAgLyoqIE5vbiBlbnVtZXJhYmxlIG9iamVjdCBwcm9wZXJ0eSB3aWxsIGJlIGRpbW1lZCAqL1xuICBpc05vbmVudW1lcmFibGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufTtcblxuT2JqZWN0TGFiZWwuZGVmYXVsdFByb3BzID0ge1xuICBpc05vbmVudW1lcmFibGU6IGZhbHNlXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBPYmplY3RMYWJlbDsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCdpcy1vYmplY3QnKVxudmFyIGlzV2luZG93ID0gcmVxdWlyZSgnaXMtd2luZG93JylcblxuZnVuY3Rpb24gaXNOb2RlICh2YWwpIHtcbiAgaWYgKCFpc09iamVjdCh2YWwpIHx8ICFpc1dpbmRvdyh3aW5kb3cpIHx8IHR5cGVvZiB3aW5kb3cuTm9kZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHR5cGVvZiB2YWwubm9kZVR5cGUgPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIHZhbC5ub2RlTmFtZSA9PT0gJ3N0cmluZydcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGVcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9hc3NpZ24yLmRlZmF1bHQgfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcicpO1xuXG52YXIgX3JlZ2VuZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZ2VuZXJhdG9yKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9ET01Ob2RlUHJldmlldyA9IHJlcXVpcmUoJy4vRE9NTm9kZVByZXZpZXcnKTtcblxudmFyIF9ET01Ob2RlUHJldmlldzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ET01Ob2RlUHJldmlldyk7XG5cbnZhciBfVHJlZVZpZXcgPSByZXF1aXJlKCcuLi90cmVlLXZpZXcvVHJlZVZpZXcnKTtcblxudmFyIF9UcmVlVmlldzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UcmVlVmlldyk7XG5cbnZhciBfc2hvdWxkSW5saW5lID0gcmVxdWlyZSgnLi9zaG91bGRJbmxpbmUnKTtcblxudmFyIF9zaG91bGRJbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hvdWxkSW5saW5lKTtcblxudmFyIF9UaGVtZVByb3ZpZGVyID0gcmVxdWlyZSgnLi4vc3R5bGVzL1RoZW1lUHJvdmlkZXInKTtcblxudmFyIF9UaGVtZVByb3ZpZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RoZW1lUHJvdmlkZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZG9tSXRlcmF0b3IgPSAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gZG9tSXRlcmF0b3IoZGF0YSkge1xuICB2YXIgdGV4dElubGluZWQsIGksIG5vZGU7XG4gIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQud3JhcChmdW5jdGlvbiBkb21JdGVyYXRvciQoX2NvbnRleHQpIHtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgaWYgKCEoZGF0YSAmJiBkYXRhLmNoaWxkTm9kZXMpKSB7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0ZXh0SW5saW5lZCA9ICgwLCBfc2hvdWxkSW5saW5lMi5kZWZhdWx0KShkYXRhKTtcblxuICAgICAgICAgIGlmICghdGV4dElubGluZWQpIHtcbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJyk7XG5cbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBpZiAoIShpIDwgZGF0YS5jaGlsZE5vZGVzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5vZGUgPSBkYXRhLmNoaWxkTm9kZXNbaV07XG5cbiAgICAgICAgICBpZiAoIShub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBub2RlLnRleHRDb250ZW50LnRyaW0oKS5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ2NvbnRpbnVlJywgMTEpO1xuXG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IG5vZGUudGFnTmFtZSArICdbJyArIGkgKyAnXScsXG4gICAgICAgICAgICBkYXRhOiBub2RlXG4gICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIDExOlxuICAgICAgICAgIGkrKztcbiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgIGlmICghZGF0YS50YWdOYW1lKSB7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6ICdDTE9TRV9UQUcnLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICB0YWdOYW1lOiBkYXRhLnRhZ05hbWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0Nsb3NlVGFnOiB0cnVlXG4gICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIDE3OlxuICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBkb21JdGVyYXRvciwgdGhpcyk7XG59KTtcblxudmFyIERPTUluc3BlY3RvciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKERPTUluc3BlY3RvciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRE9NSW5zcGVjdG9yKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERPTUluc3BlY3Rvcik7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKERPTUluc3BlY3Rvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERPTUluc3BlY3RvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRE9NSW5zcGVjdG9yLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBub2RlUmVuZGVyZXIgPSBfRE9NTm9kZVByZXZpZXcyLmRlZmF1bHQ7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX1RoZW1lUHJvdmlkZXIyLmRlZmF1bHQsXG4gICAgICAgIHsgdGhlbWU6IHRoaXMucHJvcHMudGhlbWUgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyZWVWaWV3Mi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHsgbm9kZVJlbmRlcmVyOiBub2RlUmVuZGVyZXIsIGRhdGFJdGVyYXRvcjogZG9tSXRlcmF0b3IgfSwgdGhpcy5wcm9wcykpXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRE9NSW5zcGVjdG9yO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuRE9NSW5zcGVjdG9yLnByb3BUeXBlcyA9IHtcbiAgLyoqIFRoZSBET00gTm9kZSB0byBpbnNwZWN0ICovXG4gIGRhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5ET01JbnNwZWN0b3IuZGVmYXVsdFByb3BzID0ge1xuICB0aGVtZTogJ2Nocm9tZUxpZ2h0J1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IERPTUluc3BlY3RvcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NyZWF0ZVN0eWxlcyA9IHJlcXVpcmUoJy4uL3N0eWxlcy9jcmVhdGVTdHlsZXMnKTtcblxudmFyIF9jcmVhdGVTdHlsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlU3R5bGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBvYmplY3QgdmFsdWVzLlxuICogQ2FuIGJlIHVzZWQgdG8gcmVuZGVyIHRyZWUgbm9kZSBpbiBPYmplY3RJbnNwZWN0b3JcbiAqIG9yIHJlbmRlciBvYmplY3RzIGluIFRhYmxlSW5zcGVjdG9yLlxuICovXG52YXIgT2JqZWN0VmFsdWUgPSBmdW5jdGlvbiBPYmplY3RWYWx1ZShfcmVmLCBfcmVmMikge1xuICB2YXIgb2JqZWN0ID0gX3JlZi5vYmplY3QsXG4gICAgICBzdHlsZXMgPSBfcmVmLnN0eWxlcztcbiAgdmFyIHRoZW1lID0gX3JlZjIudGhlbWU7XG5cbiAgdmFyIHRoZW1lU3R5bGVzID0gKDAsIF9jcmVhdGVTdHlsZXMyLmRlZmF1bHQpKCdPYmplY3RWYWx1ZScsIHRoZW1lKTtcblxuICB2YXIgbWtTdHlsZSA9IGZ1bmN0aW9uIG1rU3R5bGUoa2V5KSB7XG4gICAgcmV0dXJuICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHRoZW1lU3R5bGVzW2tleV0sIHN0eWxlcyk7XG4gIH07XG5cbiAgc3dpdGNoICh0eXBlb2Ygb2JqZWN0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKG9iamVjdCkpIHtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHsgc3R5bGU6IG1rU3R5bGUoJ29iamVjdFZhbHVlTnVtYmVyJykgfSxcbiAgICAgICAgU3RyaW5nKG9iamVjdClcbiAgICAgICk7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IHN0eWxlOiBta1N0eWxlKCdvYmplY3RWYWx1ZVN0cmluZycpIH0sXG4gICAgICAgICdcIicsXG4gICAgICAgIG9iamVjdCxcbiAgICAgICAgJ1wiJ1xuICAgICAgKTtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IHN0eWxlOiBta1N0eWxlKCdvYmplY3RWYWx1ZUJvb2xlYW4nKSB9LFxuICAgICAgICBTdHJpbmcob2JqZWN0KVxuICAgICAgKTtcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHsgc3R5bGU6IG1rU3R5bGUoJ29iamVjdFZhbHVlVW5kZWZpbmVkJykgfSxcbiAgICAgICAgJ3VuZGVmaW5lZCdcbiAgICAgICk7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmIChvYmplY3QgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICB7IHN0eWxlOiBta1N0eWxlKCdvYmplY3RWYWx1ZU51bGwnKSB9LFxuICAgICAgICAgICdudWxsJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG9iamVjdC50b1N0cmluZygpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgeyBzdHlsZTogbWtTdHlsZSgnb2JqZWN0VmFsdWVSZWdFeHAnKSB9LFxuICAgICAgICAgIG9iamVjdC50b1N0cmluZygpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAnQXJyYXlbJyArIG9iamVjdC5sZW5ndGggKyAnXSdcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvYmplY3QuY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgICdPYmplY3QnXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICBudWxsLFxuICAgICAgICBvYmplY3QuY29uc3RydWN0b3IubmFtZVxuICAgICAgKTtcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgIHsgc3R5bGU6IG1rU3R5bGUoJ29iamVjdFZhbHVlRnVuY3Rpb25LZXl3b3JkJykgfSxcbiAgICAgICAgICAnZnVuY3Rpb24nXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICB7IHN0eWxlOiBta1N0eWxlKCdvYmplY3RWYWx1ZUZ1bmN0aW9uTmFtZScpIH0sXG4gICAgICAgICAgJ1xceEEwJyxcbiAgICAgICAgICBvYmplY3QubmFtZSxcbiAgICAgICAgICAnKCknXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IHN0eWxlOiBta1N0eWxlKCdvYmplY3RWYWx1ZVN5bWJvbCcpIH0sXG4gICAgICAgIG9iamVjdC50b1N0cmluZygpXG4gICAgICApO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBudWxsKTtcbiAgfVxufTtcblxuT2JqZWN0VmFsdWUucHJvcFR5cGVzID0ge1xuICAvKiogdGhlIG9iamVjdCB0byBkZXNjcmliZSAqL1xuICBvYmplY3Q6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55XG59O1xuXG5PYmplY3RWYWx1ZS5jb250ZXh0VHlwZXMgPSB7XG4gIHRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XSlcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE9iamVjdFZhbHVlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY3JlYXRlU3R5bGVzID0gcmVxdWlyZSgnLi4vc3R5bGVzL2NyZWF0ZVN0eWxlcycpO1xuXG52YXIgX2NyZWF0ZVN0eWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVTdHlsZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEEgdmlldyBmb3Igb2JqZWN0IHByb3BlcnR5IG5hbWVzLlxuICpcbiAqIElmIHRoZSBwcm9wZXJ0eSBuYW1lIGlzIGVudW1lcmFibGUgKGluIE9iamVjdC5rZXlzKG9iamVjdCkpLFxuICogdGhlIHByb3BlcnR5IG5hbWUgd2lsbCBiZSByZW5kZXJlZCBub3JtYWxseS5cbiAqXG4gKiBJZiB0aGUgcHJvcGVydHkgbmFtZSBpcyBub3QgZW51bWVyYWJsZSAoYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUoKWApLFxuICogdGhlIHByb3BlcnR5IG5hbWUgd2lsbCBiZSBkaW1tZWQgdG8gc2hvdyB0aGUgZGlmZmVyZW5jZS5cbiAqL1xudmFyIE9iamVjdE5hbWUgPSBmdW5jdGlvbiBPYmplY3ROYW1lKF9yZWYsIF9yZWYyKSB7XG4gIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgZGltbWVkID0gX3JlZi5kaW1tZWQsXG4gICAgICBzdHlsZXMgPSBfcmVmLnN0eWxlcztcbiAgdmFyIHRoZW1lID0gX3JlZjIudGhlbWU7XG5cbiAgdmFyIHRoZW1lU3R5bGVzID0gKDAsIF9jcmVhdGVTdHlsZXMyLmRlZmF1bHQpKCdPYmplY3ROYW1lJywgdGhlbWUpO1xuICB2YXIgYXBwbGllZFN0eWxlcyA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHRoZW1lU3R5bGVzLmJhc2UsIGRpbW1lZCA/IHRoZW1lU3R5bGVzWydkaW1tZWQnXSA6IHt9LCBzdHlsZXMpO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnc3BhbicsXG4gICAgeyBzdHlsZTogYXBwbGllZFN0eWxlcyB9LFxuICAgIG5hbWVcbiAgKTtcbn07XG5cbk9iamVjdE5hbWUucHJvcFR5cGVzID0ge1xuICAvKiogUHJvcGVydHkgbmFtZSAqL1xuICBuYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqIFNob3VsZCBwcm9wZXJ0eSBuYW1lIGJlIGRpbW1lZCAqL1xuICBkaW1tZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufTtcblxuT2JqZWN0TmFtZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpbW1lZDogZmFsc2Vcbn07XG5cbk9iamVjdE5hbWUuY29udGV4dFR5cGVzID0ge1xuICB0aGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdF0pXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBPYmplY3ROYW1lOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX09iamVjdE5hbWUgPSByZXF1aXJlKCcuLi9vYmplY3QvT2JqZWN0TmFtZScpO1xuXG52YXIgX09iamVjdE5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2JqZWN0TmFtZSk7XG5cbnZhciBfT2JqZWN0UHJldmlldyA9IHJlcXVpcmUoJy4vT2JqZWN0UHJldmlldycpO1xuXG52YXIgX09iamVjdFByZXZpZXcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2JqZWN0UHJldmlldyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBPYmplY3RSb290TGFiZWwgPSBmdW5jdGlvbiBPYmplY3RSb290TGFiZWwoX3JlZikge1xuICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIGRhdGEgPSBfcmVmLmRhdGE7XG5cbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIG51bGwsXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfT2JqZWN0TmFtZTIuZGVmYXVsdCwgeyBuYW1lOiBuYW1lIH0pLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgJzogJ1xuICAgICAgKSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PYmplY3RQcmV2aWV3Mi5kZWZhdWx0LCB7IGRhdGE6IGRhdGEgfSlcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfT2JqZWN0UHJldmlldzIuZGVmYXVsdCwgeyBkYXRhOiBkYXRhIH0pO1xuICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBPYmplY3RSb290TGFiZWw7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWdlbmVyYXRvciA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InKTtcblxudmFyIF9yZWdlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWdlbmVyYXRvcik7XG5cbnZhciBfc2xpY2VkVG9BcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheScpO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2xpY2VkVG9BcnJheTIpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJyk7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX1RyZWVWaWV3ID0gcmVxdWlyZSgnLi4vdHJlZS12aWV3L1RyZWVWaWV3Jyk7XG5cbnZhciBfVHJlZVZpZXcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJlZVZpZXcpO1xuXG52YXIgX09iamVjdFJvb3RMYWJlbCA9IHJlcXVpcmUoJy4vT2JqZWN0Um9vdExhYmVsJyk7XG5cbnZhciBfT2JqZWN0Um9vdExhYmVsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09iamVjdFJvb3RMYWJlbCk7XG5cbnZhciBfT2JqZWN0TGFiZWwgPSByZXF1aXJlKCcuL09iamVjdExhYmVsJyk7XG5cbnZhciBfT2JqZWN0TGFiZWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2JqZWN0TGFiZWwpO1xuXG52YXIgX1RoZW1lUHJvdmlkZXIgPSByZXF1aXJlKCcuLi9zdHlsZXMvVGhlbWVQcm92aWRlcicpO1xuXG52YXIgX1RoZW1lUHJvdmlkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGhlbWVQcm92aWRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjcmVhdGVJdGVyYXRvciA9IGZ1bmN0aW9uIGNyZWF0ZUl0ZXJhdG9yKHNob3dOb25lbnVtZXJhYmxlLCBzb3J0T2JqZWN0S2V5cykge1xuICB2YXIgb2JqZWN0SXRlcmF0b3IgPSAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gb2JqZWN0SXRlcmF0b3IoZGF0YSkge1xuICAgIHZhciBzaG91bGRJdGVyYXRlLCBpLCBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uLCBfZGlkSXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yRXJyb3IsIF9pdGVyYXRvciwgX3N0ZXAsIGVudHJ5LCBfZW50cnksIGssIHYsIGtleXMsIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yLCBfZGlkSXRlcmF0b3JFcnJvcjIsIF9pdGVyYXRvckVycm9yMiwgX2l0ZXJhdG9yMiwgX3N0ZXAyLCBwcm9wZXJ0eU5hbWUsIHByb3BlcnR5VmFsdWUsIF9wcm9wZXJ0eVZhbHVlO1xuXG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIG9iamVjdEl0ZXJhdG9yJChfY29udGV4dCkge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHNob3VsZEl0ZXJhdGUgPSAodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoZGF0YSkpID09PSAnb2JqZWN0JyAmJiBkYXRhICE9PSBudWxsIHx8IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nO1xuXG4gICAgICAgICAgICBpZiAoc2hvdWxkSXRlcmF0ZSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicpO1xuXG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgaWYgKCEoIUFycmF5LmlzQXJyYXkoZGF0YSkgJiYgZGF0YVtTeW1ib2wuaXRlcmF0b3JdKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDg7XG4gICAgICAgICAgICBfaXRlcmF0b3IgPSBkYXRhW1N5bWJvbC5pdGVyYXRvcl0oKTtcblxuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICBpZiAoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZW50cnkgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKCEoQXJyYXkuaXNBcnJheShlbnRyeSkgJiYgZW50cnkubGVuZ3RoID09PSAyKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTg7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfZW50cnkgPSAoMCwgX3NsaWNlZFRvQXJyYXkzLmRlZmF1bHQpKGVudHJ5LCAyKSwgayA9IF9lbnRyeVswXSwgdiA9IF9lbnRyeVsxXTtcbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIG5hbWU6IGssXG4gICAgICAgICAgICAgIGRhdGE6IHZcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIwO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbmFtZTogaS50b1N0cmluZygpLFxuICAgICAgICAgICAgICBkYXRhOiBlbnRyeVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgIGNhc2UgMjA6XG4gICAgICAgICAgICBpKys7XG5cbiAgICAgICAgICBjYXNlIDIxOlxuICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjY7XG4gICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WydjYXRjaCddKDgpO1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBfY29udGV4dC50MDtcblxuICAgICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzA7XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzE7XG5cbiAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgMzM6XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzM7XG5cbiAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM2O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG5cbiAgICAgICAgICBjYXNlIDM2OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgzMyk7XG5cbiAgICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgzMCk7XG5cbiAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDgxO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRhdGEpO1xuXG4gICAgICAgICAgICBpZiAoc29ydE9iamVjdEtleXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAga2V5cy5zb3J0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzb3J0T2JqZWN0S2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBrZXlzLnNvcnQoc29ydE9iamVjdEtleXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA0NTtcbiAgICAgICAgICAgIF9pdGVyYXRvcjIgPSBrZXlzW1N5bWJvbC5pdGVyYXRvcl0oKTtcblxuICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICBpZiAoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJvcGVydHlOYW1lID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoIWRhdGEucHJvcGVydHlJc0VudW1lcmFibGUocHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcm9wZXJ0eVZhbHVlID0gZGF0YVtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDUzO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbmFtZTogcHJvcGVydHlOYW1lIHx8ICdcIlwiJyxcbiAgICAgICAgICAgICAgZGF0YTogcHJvcGVydHlWYWx1ZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgIGNhc2UgNTM6XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgNTU6XG4gICAgICAgICAgICBpZiAoIXNob3dOb25lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2MTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRvIHdvcmsgYXJvdW5kIHRoZSBlcnJvciAoaGFwcGVucyBzb21lIHRpbWUgd2hlbiBwcm9wZXJ0eU5hbWUgPT09ICdjYWxsZXInIHx8IHByb3BlcnR5TmFtZSA9PT0gJ2FyZ3VtZW50cycpXG4gICAgICAgICAgICAvLyAnY2FsbGVyJyBhbmQgJ2FyZ3VtZW50cycgYXJlIHJlc3RyaWN0ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBhbmQgY2Fubm90IGJlIGFjY2Vzc2VkIGluIHRoaXMgY29udGV4dFxuICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTkyMTE4OS9jYWxsZXItYW5kLWFyZ3VtZW50cy1hcmUtcmVzdHJpY3RlZC1mdW5jdGlvbi1wcm9wZXJ0aWVzLWFuZC1jYW5ub3QtYmUtYWNjZXNzXG4gICAgICAgICAgICBfcHJvcGVydHlWYWx1ZSA9IHZvaWQgMDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgX3Byb3BlcnR5VmFsdWUgPSBkYXRhW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihlKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIShfcHJvcGVydHlWYWx1ZSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjE7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBuYW1lOiBwcm9wZXJ0eU5hbWUsXG4gICAgICAgICAgICAgIGRhdGE6IF9wcm9wZXJ0eVZhbHVlLFxuICAgICAgICAgICAgICBpc05vbmVudW1lcmFibGU6IHRydWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICBjYXNlIDYxOlxuICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ3O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDcwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDY2OlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDY2O1xuICAgICAgICAgICAgX2NvbnRleHQudDEgPSBfY29udGV4dFsnY2F0Y2gnXSg0NSk7XG4gICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gX2NvbnRleHQudDE7XG5cbiAgICAgICAgICBjYXNlIDcwOlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDcwO1xuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDcxO1xuXG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIDczOlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDczO1xuXG4gICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzY7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG5cbiAgICAgICAgICBjYXNlIDc2OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCg3Myk7XG5cbiAgICAgICAgICBjYXNlIDc3OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCg3MCk7XG5cbiAgICAgICAgICBjYXNlIDc4OlxuICAgICAgICAgICAgaWYgKCEoc2hvd05vbmVudW1lcmFibGUgJiYgZGF0YSAhPT0gT2JqZWN0LnByb3RvdHlwZSAvKiBhbHJlYWR5IGFkZGVkICovKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODE7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBuYW1lOiAnX19wcm90b19fJyxcbiAgICAgICAgICAgICAgZGF0YTogT2JqZWN0LmdldFByb3RvdHlwZU9mKGRhdGEpLFxuICAgICAgICAgICAgICBpc05vbmVudW1lcmFibGU6IHRydWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICBjYXNlIDgxOlxuICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgb2JqZWN0SXRlcmF0b3IsIHRoaXMsIFtbOCwgMjYsIDMwLCAzOF0sIFszMSwsIDMzLCAzN10sIFs0NSwgNjYsIDcwLCA3OF0sIFs3MSwsIDczLCA3N11dKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG9iamVjdEl0ZXJhdG9yO1xufTtcblxudmFyIGRlZmF1bHROb2RlUmVuZGVyZXIgPSBmdW5jdGlvbiBkZWZhdWx0Tm9kZVJlbmRlcmVyKF9yZWYpIHtcbiAgdmFyIGRlcHRoID0gX3JlZi5kZXB0aCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBkYXRhID0gX3JlZi5kYXRhLFxuICAgICAgaXNOb25lbnVtZXJhYmxlID0gX3JlZi5pc05vbmVudW1lcmFibGU7XG4gIHJldHVybiBkZXB0aCA9PT0gMCA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PYmplY3RSb290TGFiZWwyLmRlZmF1bHQsIHsgbmFtZTogbmFtZSwgZGF0YTogZGF0YSB9KSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PYmplY3RMYWJlbDIuZGVmYXVsdCwgeyBuYW1lOiBuYW1lLCBkYXRhOiBkYXRhLCBpc05vbmVudW1lcmFibGU6IGlzTm9uZW51bWVyYWJsZSB9KTtcbn07XG5cbi8qKlxuICogVHJlZS12aWV3IGZvciBvYmplY3RzXG4gKi9cblxudmFyIE9iamVjdEluc3BlY3RvciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKE9iamVjdEluc3BlY3RvciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT2JqZWN0SW5zcGVjdG9yKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIE9iamVjdEluc3BlY3Rvcik7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKE9iamVjdEluc3BlY3Rvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdEluc3BlY3RvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoT2JqZWN0SW5zcGVjdG9yLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHNob3dOb25lbnVtZXJhYmxlID0gX3Byb3BzLnNob3dOb25lbnVtZXJhYmxlLFxuICAgICAgICAgIHNvcnRPYmplY3RLZXlzID0gX3Byb3BzLnNvcnRPYmplY3RLZXlzLFxuICAgICAgICAgIG5vZGVSZW5kZXJlciA9IF9wcm9wcy5ub2RlUmVuZGVyZXIsXG4gICAgICAgICAgcmVzdCA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWydzaG93Tm9uZW51bWVyYWJsZScsICdzb3J0T2JqZWN0S2V5cycsICdub2RlUmVuZGVyZXInXSk7XG5cbiAgICAgIHZhciBkYXRhSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvcihzaG93Tm9uZW51bWVyYWJsZSwgc29ydE9iamVjdEtleXMpO1xuXG4gICAgICB2YXIgcmVuZGVyZXIgPSBub2RlUmVuZGVyZXIgPyBub2RlUmVuZGVyZXIgOiBkZWZhdWx0Tm9kZVJlbmRlcmVyO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9UaGVtZVByb3ZpZGVyMi5kZWZhdWx0LFxuICAgICAgICB7IHRoZW1lOiB0aGlzLnByb3BzLnRoZW1lIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmVlVmlldzIuZGVmYXVsdCwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7IG5vZGVSZW5kZXJlcjogcmVuZGVyZXIsIGRhdGFJdGVyYXRvcjogZGF0YUl0ZXJhdG9yIH0sIHJlc3QpKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE9iamVjdEluc3BlY3Rvcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk9iamVjdEluc3BlY3Rvci5kZWZhdWx0UHJvcHMgPSB7XG4gIHNob3dOb25lbnVtZXJhYmxlOiBmYWxzZSxcblxuICB0aGVtZTogJ2Nocm9tZUxpZ2h0J1xufTtcbk9iamVjdEluc3BlY3Rvci5wcm9wVHlwZXMgPSB7XG4gIC8qKiBBbiBpbnRlZ2VyIHNwZWNpZnlpbmcgdG8gd2hpY2ggbGV2ZWwgdGhlIHRyZWUgc2hvdWxkIGJlIGluaXRpYWxseSBleHBhbmRlZC4gKi9cbiAgZXhwYW5kTGV2ZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAvKiogQW4gYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIHBhdGhzIHRoYXQgc2hvdWxkIGJlIGV4cGFuZGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBpbml0aWFsaXplZCwgb3IgYSBzdHJpbmcgb2YganVzdCBvbmUgcGF0aCAqL1xuICBleHBhbmRQYXRoczogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5XSksXG5cbiAgbmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKiBOb3QgcmVxdWlyZWQgcHJvcCBiZWNhdXNlIHdlIGFsc28gYWxsb3cgdW5kZWZpbmVkIHZhbHVlICovXG4gIGRhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuXG4gIC8qKiBBIGtub3duIHRoZW1lIG9yIHRoZW1lIG9iamVjdCAqL1xuICB0aGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKiBTaG93IG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgKi9cbiAgc2hvd05vbmVudW1lcmFibGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqIFNvcnQgb2JqZWN0IGtleXMgd2l0aCBvcHRpb25hbCBjb21wYXJlIGZ1bmN0aW9uLiAqL1xuICBzb3J0T2JqZWN0S2V5czogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCwgX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqIFByb3ZpZGUgYSBjdXN0b20gbm9kZVJlbmRlcmVyICovXG4gIG5vZGVSZW5kZXJlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gT2JqZWN0SW5zcGVjdG9yOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfVGhlbWVQcm92aWRlciA9IHJlcXVpcmUoJy4uL3N0eWxlcy9UaGVtZVByb3ZpZGVyJyk7XG5cbnZhciBfVGhlbWVQcm92aWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UaGVtZVByb3ZpZGVyKTtcblxudmFyIF9jcmVhdGVTdHlsZXMgPSByZXF1aXJlKCcuLi9zdHlsZXMvY3JlYXRlU3R5bGVzJyk7XG5cbnZhciBfY3JlYXRlU3R5bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVN0eWxlcyk7XG5cbnZhciBfZ2V0SGVhZGVyczIgPSByZXF1aXJlKCcuL2dldEhlYWRlcnMnKTtcblxudmFyIF9nZXRIZWFkZXJzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldEhlYWRlcnMyKTtcblxudmFyIF9EYXRhQ29udGFpbmVyID0gcmVxdWlyZSgnLi9EYXRhQ29udGFpbmVyJyk7XG5cbnZhciBfRGF0YUNvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhQ29udGFpbmVyKTtcblxudmFyIF9IZWFkZXJDb250YWluZXIgPSByZXF1aXJlKCcuL0hlYWRlckNvbnRhaW5lcicpO1xuXG52YXIgX0hlYWRlckNvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IZWFkZXJDb250YWluZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgVGFibGVJbnNwZWN0b3IgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShUYWJsZUluc3BlY3RvciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFibGVJbnNwZWN0b3IocHJvcHMpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUYWJsZUluc3BlY3Rvcik7XG5cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChUYWJsZUluc3BlY3Rvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYmxlSW5zcGVjdG9yKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzb3J0ZWQ6IGZhbHNlLCAvLyBoYXMgdXNlciBldmVyIGNsaWNrZWQgdGhlIDx0aD4gdGFnIHRvIHNvcnQ/XG4gICAgICBzb3J0SW5kZXhDb2x1bW46IGZhbHNlLCAvLyBpcyBpbmRleCBjb2x1bW4gc29ydGVkP1xuICAgICAgc29ydENvbHVtbjogdW5kZWZpbmVkLCAvLyB3aGljaCBjb2x1bW4gaXMgc29ydGVkP1xuICAgICAgc29ydEFzY2VuZGluZzogZmFsc2UgLy8gaXMgc29ydGluZyBhc2NlbmRpbmcgb3IgZGVzY2VuZGluZz9cbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFRhYmxlSW5zcGVjdG9yLCBbe1xuICAgIGtleTogJ2hhbmRsZUluZGV4VEhDbGljaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUluZGV4VEhDbGljaygpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIHNvcnRJbmRleENvbHVtbiA9IF9yZWYuc29ydEluZGV4Q29sdW1uLFxuICAgICAgICAgICAgc29ydEFzY2VuZGluZyA9IF9yZWYuc29ydEFzY2VuZGluZztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3J0ZWQ6IHRydWUsXG4gICAgICAgICAgc29ydEluZGV4Q29sdW1uOiB0cnVlLFxuICAgICAgICAgIHNvcnRDb2x1bW46IHVuZGVmaW5lZCxcbiAgICAgICAgICAvLyB3aGVuIGNoYW5nZWQgdG8gYSBuZXcgY29sdW1uLCBkZWZhdWx0IHRvIGFzZW5kaW5nXG4gICAgICAgICAgc29ydEFzY2VuZGluZzogc29ydEluZGV4Q29sdW1uID8gIXNvcnRBc2NlbmRpbmcgOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVUSENsaWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlVEhDbGljayhjb2wpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgIHZhciBzb3J0Q29sdW1uID0gX3JlZjIuc29ydENvbHVtbixcbiAgICAgICAgICAgIHNvcnRBc2NlbmRpbmcgPSBfcmVmMi5zb3J0QXNjZW5kaW5nO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvcnRlZDogdHJ1ZSxcbiAgICAgICAgICBzb3J0SW5kZXhDb2x1bW46IGZhbHNlLFxuICAgICAgICAgIC8vIHVwZGF0ZSBzb3J0IGNvbHVtblxuICAgICAgICAgIHNvcnRDb2x1bW46IGNvbCxcbiAgICAgICAgICAvLyB3aGVuIGNoYW5nZWQgdG8gYSBuZXcgY29sdW1uLCBkZWZhdWx0IHRvIGFzZW5kaW5nXG4gICAgICAgICAgc29ydEFzY2VuZGluZzogY29sID09PSBzb3J0Q29sdW1uID8gIXNvcnRBc2NlbmRpbmcgOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMucHJvcHMuZGF0YTtcbiAgICAgIHZhciBjb2x1bW5zID0gdGhpcy5wcm9wcy5jb2x1bW5zO1xuXG4gICAgICB2YXIgdGhlbWUgPSB0aGlzLnByb3BzLnRoZW1lO1xuXG4gICAgICB2YXIgc3R5bGVzID0gKDAsIF9jcmVhdGVTdHlsZXMyLmRlZmF1bHQpKCdUYWJsZUluc3BlY3RvcicsIHRoZW1lKTtcblxuICAgICAgaWYgKCh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShkYXRhKSkgIT09ICdvYmplY3QnIHx8IGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBudWxsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9nZXRIZWFkZXJzID0gKDAsIF9nZXRIZWFkZXJzMy5kZWZhdWx0KShkYXRhKSxcbiAgICAgICAgICByb3dIZWFkZXJzID0gX2dldEhlYWRlcnMucm93SGVhZGVycyxcbiAgICAgICAgICBjb2xIZWFkZXJzID0gX2dldEhlYWRlcnMuY29sSGVhZGVycztcblxuICAgICAgLy8gY29sdW1ucyB0byBiZSBkaXNwbGF5ZWQgYXJlIHNwZWNpZmllZFxuICAgICAgLy8gTk9URTogdGhlcmUncyBzb21lIHNwYWNlIGZvciBvcHRpbWl6YXRpb24gaGVyZVxuXG5cbiAgICAgIGlmIChjb2x1bW5zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29sSGVhZGVycyA9IGNvbHVtbnM7XG4gICAgICB9XG5cbiAgICAgIHZhciByb3dzRGF0YSA9IHJvd0hlYWRlcnMubWFwKGZ1bmN0aW9uIChyb3dIZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFbcm93SGVhZGVyXTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgc29ydEluZGV4Q29sdW1uID0gdGhpcy5zdGF0ZS5zb3J0SW5kZXhDb2x1bW4sXG4gICAgICAgICAgc29ydENvbHVtbiA9IHRoaXMuc3RhdGUuc29ydENvbHVtbixcbiAgICAgICAgICBzb3J0QXNjZW5kaW5nID0gdGhpcy5zdGF0ZS5zb3J0QXNjZW5kaW5nO1xuXG4gICAgICB2YXIgY29sdW1uRGF0YVdpdGhSb3dJbmRleGVzID0gdm9pZCAwOyAvKiByb3cgaW5kZXhlcyBhcmUgWzAuLm5Sb3dzLTFdICovXG4gICAgICAvLyBUT0RPOiByZWZhY3RvclxuICAgICAgaWYgKHNvcnRDb2x1bW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyB0aGUgY29sdW1uIHRvIGJlIHNvcnRlZCAocm93c0RhdGEsIGNvbHVtbikgPT4gW1tjb2x1bW5EYXRhLCByb3dJbmRleF1dXG4gICAgICAgIGNvbHVtbkRhdGFXaXRoUm93SW5kZXhlcyA9IHJvd3NEYXRhLm1hcChmdW5jdGlvbiAocm93RGF0YSwgaW5kZXgpIHtcbiAgICAgICAgICAvLyBub3JtYWxpemUgcm93RGF0YVxuICAgICAgICAgIGlmICgodHlwZW9mIHJvd0RhdGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkocm93RGF0YSkpID09PSAnb2JqZWN0JyAmJiByb3dEYXRhICE9PSBudWxsIC8qJiYgcm93RGF0YS5oYXNPd25Qcm9wZXJ0eShzb3J0Q29sdW1uKSovXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHZhciBjb2x1bW5EYXRhID0gcm93RGF0YVtzb3J0Q29sdW1uXTtcbiAgICAgICAgICAgICAgcmV0dXJuIFtjb2x1bW5EYXRhLCBpbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFt1bmRlZmluZWQsIGluZGV4XTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc29ydEluZGV4Q29sdW1uKSB7XG4gICAgICAgICAgY29sdW1uRGF0YVdpdGhSb3dJbmRleGVzID0gcm93SGVhZGVycy5tYXAoZnVuY3Rpb24gKHJvd0RhdGEsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY29sdW1uRGF0YSA9IHJvd0hlYWRlcnNbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIFtjb2x1bW5EYXRhLCBpbmRleF07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjb2x1bW5EYXRhV2l0aFJvd0luZGV4ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBhcHBseSBhIG1hcHBlciBiZWZvcmUgc29ydGluZyAoYmVjYXVzZSB3ZSBuZWVkIHRvIGFjY2VzcyBpbnNpZGUgYSBjb250YWluZXIpXG4gICAgICAgIHZhciBjb21wYXJhdG9yID0gZnVuY3Rpb24gY29tcGFyYXRvcihtYXBwZXIsIGFzY2VuZGluZykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgdmFyIHYxID0gbWFwcGVyKGEpOyAvLyB0aGUgZGF0dW1cbiAgICAgICAgICAgIHZhciB2MiA9IG1hcHBlcihiKTtcbiAgICAgICAgICAgIHZhciB0eXBlMSA9IHR5cGVvZiB2MSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2MSk7XG4gICAgICAgICAgICB2YXIgdHlwZTIgPSB0eXBlb2YgdjIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodjIpO1xuICAgICAgICAgICAgLy8gdXNlICc8JyBvcGVyYXRvciB0byBjb21wYXJlIHNhbWUgdHlwZSBvZiB2YWx1ZXMgb3IgY29tcGFyZSB0eXBlIHByZWNlZGVuY2Ugb3JkZXIgI1xuICAgICAgICAgICAgdmFyIGx0ID0gZnVuY3Rpb24gbHQodjEsIHYyKSB7XG4gICAgICAgICAgICAgIGlmICh2MSA8IHYyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHYxID4gdjIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAodHlwZTEgPT09IHR5cGUyKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IGx0KHYxLCB2Mik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBvcmRlciBvZiBkaWZmZXJlbnQgdHlwZXNcbiAgICAgICAgICAgICAgdmFyIG9yZGVyID0ge1xuICAgICAgICAgICAgICAgIHN0cmluZzogMCxcbiAgICAgICAgICAgICAgICBudW1iZXI6IDEsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiAyLFxuICAgICAgICAgICAgICAgIHN5bWJvbDogMyxcbiAgICAgICAgICAgICAgICBib29sZWFuOiA0LFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZDogNSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbjogNlxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXN1bHQgPSBsdChvcmRlclt0eXBlMV0sIG9yZGVyW3R5cGUyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZXZlcnNlIHJlc3VsdCBpZiBkZXNjZW5kaW5nXG4gICAgICAgICAgICBpZiAoIWFzY2VuZGluZykgcmVzdWx0ID0gLXJlc3VsdDtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHNvcnRlZFJvd0luZGV4ZXMgPSBjb2x1bW5EYXRhV2l0aFJvd0luZGV4ZXMuc29ydChjb21wYXJhdG9yKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW1bMF07XG4gICAgICAgIH0sIHNvcnRBc2NlbmRpbmcpKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbVsxXTtcbiAgICAgICAgfSk7IC8vIHNvcnRlZCByb3cgaW5kZXhlc1xuICAgICAgICByb3dIZWFkZXJzID0gc29ydGVkUm93SW5kZXhlcy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gcm93SGVhZGVyc1tpXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJvd3NEYXRhID0gc29ydGVkUm93SW5kZXhlcy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gcm93c0RhdGFbaV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9UaGVtZVByb3ZpZGVyMi5kZWZhdWx0LFxuICAgICAgICB7IHRoZW1lOiB0aGlzLnByb3BzLnRoZW1lIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5iYXNlIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0hlYWRlckNvbnRhaW5lcjIuZGVmYXVsdCwge1xuICAgICAgICAgICAgY29sdW1uczogY29sSGVhZGVyc1xuICAgICAgICAgICAgLyogZm9yIHNvcnRpbmcgKi9cbiAgICAgICAgICAgICwgc29ydGVkOiB0aGlzLnN0YXRlLnNvcnRlZCxcbiAgICAgICAgICAgIHNvcnRJbmRleENvbHVtbjogdGhpcy5zdGF0ZS5zb3J0SW5kZXhDb2x1bW4sXG4gICAgICAgICAgICBzb3J0Q29sdW1uOiB0aGlzLnN0YXRlLnNvcnRDb2x1bW4sXG4gICAgICAgICAgICBzb3J0QXNjZW5kaW5nOiB0aGlzLnN0YXRlLnNvcnRBc2NlbmRpbmcsXG4gICAgICAgICAgICBvblRIQ2xpY2s6IHRoaXMuaGFuZGxlVEhDbGljay5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgb25JbmRleFRIQ2xpY2s6IHRoaXMuaGFuZGxlSW5kZXhUSENsaWNrLmJpbmQodGhpcylcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRGF0YUNvbnRhaW5lcjIuZGVmYXVsdCwgeyByb3dzOiByb3dIZWFkZXJzLCBjb2x1bW5zOiBjb2xIZWFkZXJzLCByb3dzRGF0YTogcm93c0RhdGEgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRhYmxlSW5zcGVjdG9yO1xufShfcmVhY3QuQ29tcG9uZW50KTsgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgKiBTcGVjczpcbiAgICAgICAgICAgICAgICAgICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9jb21tYW5kbGluZS1hcGkjdGFibGVkYXRhLWNvbHVtbnNcbiAgICAgICAgICAgICAgICAgICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Db25zb2xlL3RhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gVGFibGVJbnNwZWN0b3I7XG5cblxuVGFibGVJbnNwZWN0b3IucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogdGhlIEphdmFzY3JpcHQgb2JqZWN0IHlvdSB3b3VsZCBsaWtlIHRvIGluc3BlY3QsIGVpdGhlciBhbiBhcnJheSBvciBhbiBvYmplY3RcbiAgICovXG4gIGRhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5LCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdF0pLFxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgdGhlIG5hbWVzIG9mIHRoZSBjb2x1bW5zIHlvdSdkIGxpa2UgdG8gZGlzcGxheSBpbiB0aGUgdGFibGVcbiAgICovXG4gIGNvbHVtbnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXlcbn07XG5cblRhYmxlSW5zcGVjdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGF0YTogdW5kZWZpbmVkLFxuICBjb2x1bW5zOiB1bmRlZmluZWQsXG4gIHRoZW1lOiAnY2hyb21lTGlnaHQnXG59OyIsImltcG9ydCAqIGFzIGV0aGVycyBmcm9tICdldGhlcnMnO1xuaW1wb3J0ICogYXMgb3B0aW1pc21Db250cmFjdHMgZnJvbSAnQGV0aC1vcHRpbWlzbS9jb250cmFjdHMnO1xuaW1wb3J0IGJ1aWxkVW5zZXJpYWxpemVkVHJhbnNhY3Rpb24gZnJvbSAnLi9idWlsZFVuc2VyaWFsaXplZFRyYW5zYWN0aW9uJztcblxuLy8gVGhlIGNvZGUgaW4gdGhpcyBmaWxlIGlzIGxhcmdlbHkgZHJhd24gZnJvbSBodHRwczovL2NvbW11bml0eS5vcHRpbWlzbS5pby9kb2NzL2RldmVsb3BlcnMvbDIvbmV3LWZlZXMuaHRtbCNmb3ItZnJvbnRlbmQtYW5kLXdhbGxldC1kZXZlbG9wZXJzXG5cbmZ1bmN0aW9uIGJ1aWxkT1ZNR2FzUHJpY2VPcmFjbGVDb250cmFjdChldGgpIHtcbiAgY29uc3QgT1ZNR2FzUHJpY2VPcmFjbGUgPSBvcHRpbWlzbUNvbnRyYWN0c1xuICAgIC5nZXRDb250cmFjdEZhY3RvcnkoJ09WTV9HYXNQcmljZU9yYWNsZScpXG4gICAgLmF0dGFjaChvcHRpbWlzbUNvbnRyYWN0cy5wcmVkZXBsb3lzLk9WTV9HYXNQcmljZU9yYWNsZSk7XG4gIGNvbnN0IGFiaSA9IEpTT04ucGFyc2UoXG4gICAgT1ZNR2FzUHJpY2VPcmFjbGUuaW50ZXJmYWNlLmZvcm1hdChldGhlcnMudXRpbHMuRm9ybWF0VHlwZXMuanNvbiksXG4gICk7XG4gIHJldHVybiBldGguY29udHJhY3QoYWJpKS5hdChPVk1HYXNQcmljZU9yYWNsZS5hZGRyZXNzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hFc3RpbWF0ZWRMMUZlZShldGgsIHR4TWV0YSkge1xuICBjb25zdCBjb250cmFjdCA9IGJ1aWxkT1ZNR2FzUHJpY2VPcmFjbGVDb250cmFjdChldGgpO1xuICBjb25zdCBzZXJpYWxpemVkVHJhbnNhY3Rpb24gPSBidWlsZFVuc2VyaWFsaXplZFRyYW5zYWN0aW9uKFxuICAgIHR4TWV0YSxcbiAgKS5zZXJpYWxpemUoKTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJhY3QuZ2V0TDFGZWUoc2VyaWFsaXplZFRyYW5zYWN0aW9uKTtcbiAgcmV0dXJuIHJlc3VsdD8uWzBdPy50b1N0cmluZygxNik7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7XG4gIEVOVklST05NRU5UX1RZUEVfUE9QVVAsXG4gIEVOVklST05NRU5UX1RZUEVfTk9USUZJQ0FUSU9OLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5pbXBvcnQgeyBnZXRFbnZpcm9ubWVudFR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9hcHAvc2NyaXB0cy9saWIvdXRpbCc7XG5pbXBvcnQgTmV0d29ya0Rpc3BsYXkgZnJvbSAnLi4vLi4vbmV0d29yay1kaXNwbGF5JztcbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vLi4vLi4vdWkvaWRlbnRpY29uJztcbmltcG9ydCB7IHNob3J0ZW5BZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcbmltcG9ydCBBY2NvdW50TWlzbWF0Y2hXYXJuaW5nIGZyb20gJy4uLy4uLy4uL3VpL2FjY291bnQtbWlzbWF0Y2gtd2FybmluZy9hY2NvdW50LW1pc21hdGNoLXdhcm5pbmcuY29tcG9uZW50JztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb25maXJtUGFnZUNvbnRhaW5lckhlYWRlcih7XG4gIG9uRWRpdCxcbiAgc2hvd0VkaXQsXG4gIGFjY291bnRBZGRyZXNzLFxuICBzaG93QWNjb3VudEluSGVhZGVyLFxuICBjaGlsZHJlbixcbn0pIHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IHdpbmRvd1R5cGUgPSBnZXRFbnZpcm9ubWVudFR5cGUoKTtcbiAgY29uc3QgaXNGdWxsU2NyZWVuID1cbiAgICB3aW5kb3dUeXBlICE9PSBFTlZJUk9OTUVOVF9UWVBFX05PVElGSUNBVElPTiAmJlxuICAgIHdpbmRvd1R5cGUgIT09IEVOVklST05NRU5UX1RZUEVfUE9QVVA7XG5cbiAgaWYgKCFzaG93RWRpdCAmJiBpc0Z1bGxTY3JlZW4pIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItaGVhZGVyXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItaGVhZGVyX19yb3dcIj5cbiAgICAgICAge3Nob3dBY2NvdW50SW5IZWFkZXIgPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLWhlYWRlcl9fYWRkcmVzcy1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybS1wYWdlLWNvbnRhaW5lci1oZWFkZXJfX2FkZHJlc3MtaWRlbnRpY29uXCI+XG4gICAgICAgICAgICAgIDxJZGVudGljb24gYWRkcmVzcz17YWNjb3VudEFkZHJlc3N9IGRpYW1ldGVyPXsyNH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLWhlYWRlcl9fYWRkcmVzc1wiPlxuICAgICAgICAgICAgICB7c2hvcnRlbkFkZHJlc3MoYWNjb3VudEFkZHJlc3MpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8QWNjb3VudE1pc21hdGNoV2FybmluZyBhZGRyZXNzPXthY2NvdW50QWRkcmVzc30gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLWhlYWRlcl9fYmFjay1idXR0b24tY29udGFpbmVyXCJcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIHZpc2liaWxpdHk6IHNob3dFZGl0ID8gJ2luaXRpYWwnIDogJ2hpZGRlbicsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWcgc3JjPVwiLi9pbWFnZXMvY2FyZXQtbGVmdC5zdmdcIiBhbHQ9XCJcIiAvPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29uZmlybS1wYWdlLWNvbnRhaW5lci1oZWFkZXJfX2JhY2stYnV0dG9uXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25FZGl0KCl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0KCdlZGl0Jyl9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIHtpc0Z1bGxTY3JlZW4gPyBudWxsIDogPE5ldHdvcmtEaXNwbGF5IC8+fVxuICAgICAgPC9kaXY+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbkNvbmZpcm1QYWdlQ29udGFpbmVySGVhZGVyLnByb3BUeXBlcyA9IHtcbiAgYWNjb3VudEFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNob3dBY2NvdW50SW5IZWFkZXI6IFByb3BUeXBlcy5ib29sLFxuICBzaG93RWRpdDogUHJvcFR5cGVzLmJvb2wsXG4gIG9uRWRpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5RGlzcGxheSBmcm9tICcuLi8uLi91c2VyLXByZWZlcmVuY2VkLWN1cnJlbmN5LWRpc3BsYXknO1xuaW1wb3J0IHsgUFJJTUFSWSwgU0VDT05EQVJZIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvY29tbW9uJztcblxuY29uc3QgQ29uZmlybURldGFpbFJvdyA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgbGFiZWwsXG4gICAgcHJpbWFyeVRleHQsXG4gICAgc2Vjb25kYXJ5VGV4dCxcbiAgICBvbkhlYWRlckNsaWNrLFxuICAgIHByaW1hcnlWYWx1ZVRleHRDb2xvcixcbiAgICBoZWFkZXJUZXh0LFxuICAgIGhlYWRlclRleHRDbGFzc05hbWUsXG4gICAgdmFsdWUsXG4gIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybS1kZXRhaWwtcm93XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0tZGV0YWlsLXJvd19fbGFiZWxcIj57bGFiZWx9PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0tZGV0YWlsLXJvd19fZGV0YWlsc1wiPlxuICAgICAgICB7aGVhZGVyVGV4dCAmJiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKFxuICAgICAgICAgICAgICAnY29uZmlybS1kZXRhaWwtcm93X19oZWFkZXItdGV4dCcsXG4gICAgICAgICAgICAgIGhlYWRlclRleHRDbGFzc05hbWUsXG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25IZWFkZXJDbGljaz8uKCl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2hlYWRlclRleHR9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIHtwcmltYXJ5VGV4dCA/IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjb25maXJtLWRldGFpbC1yb3dfX3ByaW1hcnlcIlxuICAgICAgICAgICAgc3R5bGU9e3sgY29sb3I6IHByaW1hcnlWYWx1ZVRleHRDb2xvciB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwcmltYXJ5VGV4dH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8VXNlclByZWZlcmVuY2VkQ3VycmVuY3lEaXNwbGF5XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjb25maXJtLWRldGFpbC1yb3dfX3ByaW1hcnlcIlxuICAgICAgICAgICAgdHlwZT17UFJJTUFSWX1cbiAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICAgIHNob3dFdGhMb2dvXG4gICAgICAgICAgICBldGhMb2dvSGVpZ2h0PVwiMThcIlxuICAgICAgICAgICAgc3R5bGU9e3sgY29sb3I6IHByaW1hcnlWYWx1ZVRleHRDb2xvciB9fVxuICAgICAgICAgICAgaGlkZUxhYmVsXG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAge3NlY29uZGFyeVRleHQgPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLWRldGFpbC1yb3dfX3NlY29uZGFyeVwiPntzZWNvbmRhcnlUZXh0fTwvZGl2PlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxVc2VyUHJlZmVyZW5jZWRDdXJyZW5jeURpc3BsYXlcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNvbmZpcm0tZGV0YWlsLXJvd19fc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIHR5cGU9e1NFQ09OREFSWX1cbiAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICAgIHNob3dFdGhMb2dvXG4gICAgICAgICAgICBoaWRlTGFiZWxcbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5Db25maXJtRGV0YWlsUm93LnByb3BUeXBlcyA9IHtcbiAgaGVhZGVyVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgaGVhZGVyVGV4dENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uSGVhZGVyQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBwcmltYXJ5VmFsdWVUZXh0Q29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHByaW1hcnlUZXh0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubm9kZV0pLFxuICBzZWNvbmRhcnlUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbmZpcm1EZXRhaWxSb3c7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgQ29uZmlybVBhZ2VDb250YWluZXJOYXZpZ2F0aW9uID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvbk5leHRUeCxcbiAgICB0b3RhbFR4LFxuICAgIHBvc2l0aW9uT2ZDdXJyZW50VHgsXG4gICAgbmV4dFR4SWQsXG4gICAgcHJldlR4SWQsXG4gICAgc2hvd05hdmlnYXRpb24sXG4gICAgZmlyc3RUeCxcbiAgICBsYXN0VHgsXG4gICAgb2ZUZXh0LFxuICAgIHJlcXVlc3RzV2FpdGluZ1RleHQsXG4gIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItbmF2aWdhdGlvblwiXG4gICAgICBzdHlsZT17e1xuICAgICAgICBkaXNwbGF5OiBzaG93TmF2aWdhdGlvbiA/ICdmbGV4JyA6ICdub25lJyxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLW5hdmlnYXRpb25fX2NvbnRhaW5lclwiXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgdmlzaWJpbGl0eTogcHJldlR4SWQgPyAnaW5pdGlhbCcgOiAnaGlkZGVuJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItbmF2aWdhdGlvbl9fYXJyb3dcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwiZmlyc3QtcGFnZVwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gb25OZXh0VHgoZmlyc3RUeCl9XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz1cIi4vaW1hZ2VzL2RvdWJsZS1hcnJvdy5zdmdcIiBhbHQ9XCJcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItbmF2aWdhdGlvbl9fYXJyb3dcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwicHJldmlvdXMtcGFnZVwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gb25OZXh0VHgocHJldlR4SWQpfVxuICAgICAgICA+XG4gICAgICAgICAgPGltZyBzcmM9XCIuL2ltYWdlcy9zaW5nbGUtYXJyb3cuc3ZnXCIgYWx0PVwiXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybS1wYWdlLWNvbnRhaW5lci1uYXZpZ2F0aW9uX190ZXh0Y29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybS1wYWdlLWNvbnRhaW5lci1uYXZpZ2F0aW9uX19uYXZ0ZXh0XCI+XG4gICAgICAgICAge3Bvc2l0aW9uT2ZDdXJyZW50VHh9IHtvZlRleHR9IHt0b3RhbFR4fVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLW5hdmlnYXRpb25fX2xvbmd0ZXh0XCI+XG4gICAgICAgICAge3JlcXVlc3RzV2FpdGluZ1RleHR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItbmF2aWdhdGlvbl9fY29udGFpbmVyXCJcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICB2aXNpYmlsaXR5OiBuZXh0VHhJZCA/ICdpbml0aWFsJyA6ICdoaWRkZW4nLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwiY29uZmlybS1wYWdlLWNvbnRhaW5lci1uYXZpZ2F0aW9uX19hcnJvd1wiXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9XCJuZXh0LXBhZ2VcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uTmV4dFR4KG5leHRUeElkKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItbmF2aWdhdGlvbl9faW1hZ2VmbGlwXCJcbiAgICAgICAgICAgIHNyYz1cIi4vaW1hZ2VzL3NpbmdsZS1hcnJvdy5zdmdcIlxuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItbmF2aWdhdGlvbl9fYXJyb3dcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwibGFzdC1wYWdlXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbk5leHRUeChsYXN0VHgpfVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29uZmlybS1wYWdlLWNvbnRhaW5lci1uYXZpZ2F0aW9uX19pbWFnZWZsaXBcIlxuICAgICAgICAgICAgc3JjPVwiLi9pbWFnZXMvZG91YmxlLWFycm93LnN2Z1wiXG4gICAgICAgICAgICBhbHQ9XCJcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5Db25maXJtUGFnZUNvbnRhaW5lck5hdmlnYXRpb24ucHJvcFR5cGVzID0ge1xuICB0b3RhbFR4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBwb3NpdGlvbk9mQ3VycmVudFR4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBvbk5leHRUeDogUHJvcFR5cGVzLmZ1bmMsXG4gIG5leHRUeElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwcmV2VHhJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgc2hvd05hdmlnYXRpb246IFByb3BUeXBlcy5ib29sLFxuICBmaXJzdFR4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsYXN0VHg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9mVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVxdWVzdHNXYWl0aW5nVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbmZpcm1QYWdlQ29udGFpbmVyTmF2aWdhdGlvbjtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBFRElUX0dBU19NT0RFUyB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvZ2FzJztcbmltcG9ydCB7IEdhc0ZlZUNvbnRleHRQcm92aWRlciB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL2dhc0ZlZSc7XG5pbXBvcnQgeyBUUkFOU0FDVElPTl9UWVBFUyB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdHJhbnNhY3Rpb24nO1xuXG5pbXBvcnQgeyBQYWdlQ29udGFpbmVyRm9vdGVyIH0gZnJvbSAnLi4vLi4vdWkvcGFnZS1jb250YWluZXInO1xuaW1wb3J0IERpYWxvZyBmcm9tICcuLi8uLi91aS9kaWFsb2cnO1xuaW1wb3J0IEVycm9yTWVzc2FnZSBmcm9tICcuLi8uLi91aS9lcnJvci1tZXNzYWdlJztcbmltcG9ydCBTZW5kZXJUb1JlY2lwaWVudCBmcm9tICcuLi8uLi91aS9zZW5kZXItdG8tcmVjaXBpZW50JztcblxuaW1wb3J0IE5pY2tuYW1lUG9wb3ZlcnMgZnJvbSAnLi4vbW9kYWxzL25pY2tuYW1lLXBvcG92ZXJzJztcblxuaW1wb3J0IEFkdmFuY2VkR2FzRmVlUG9wb3ZlciBmcm9tICcuLi9hZHZhbmNlZC1nYXMtZmVlLXBvcG92ZXInO1xuaW1wb3J0IEVkaXRHYXNGZWVQb3BvdmVyIGZyb20gJy4uL2VkaXQtZ2FzLWZlZS1wb3BvdmVyL2VkaXQtZ2FzLWZlZS1wb3BvdmVyJztcbmltcG9ydCBFZGl0R2FzUG9wb3ZlciBmcm9tICcuLi9lZGl0LWdhcy1wb3BvdmVyJztcblxuaW1wb3J0IHtcbiAgQ29uZmlybVBhZ2VDb250YWluZXJIZWFkZXIsXG4gIENvbmZpcm1QYWdlQ29udGFpbmVyQ29udGVudCxcbiAgQ29uZmlybVBhZ2VDb250YWluZXJOYXZpZ2F0aW9uLFxufSBmcm9tICcuJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29uZmlybVBhZ2VDb250YWluZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0ZSA9IHtcbiAgICBzaG93Tmlja25hbWVQb3BvdmVyczogZmFsc2UsXG4gIH07XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8vIEhlYWRlclxuICAgIGFjdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBoaWRlU3VidGl0bGU6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uRWRpdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2hvd0VkaXQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHN1YnRpdGxlQ29tcG9uZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aXRsZUNvbXBvbmVudDogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlkZVNlbmRlclRvUmVjaXBpZW50OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93QWNjb3VudEluSGVhZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAvLyBTZW5kZXIgdG8gUmVjaXBpZW50XG4gICAgZnJvbUFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZnJvbU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG9BZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0b0VuczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0b05pY2tuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8vIENvbnRlbnRcbiAgICBjb250ZW50Q29tcG9uZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgICBlcnJvcktleTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBlcnJvck1lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGF0YUNvbXBvbmVudDogUHJvcFR5cGVzLm5vZGUsXG4gICAgZGF0YUhleENvbXBvbmVudDogUHJvcFR5cGVzLm5vZGUsXG4gICAgZGV0YWlsc0NvbXBvbmVudDogUHJvcFR5cGVzLm5vZGUsXG4gICAgaWRlbnRpY29uQWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBub25jZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB3YXJuaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHVuYXBwcm92ZWRUeENvdW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG9yaWdpbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGV0aEdhc1ByaWNlV2FybmluZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvLyBOYXZpZ2F0aW9uXG4gICAgdG90YWxUeDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBwb3NpdGlvbk9mQ3VycmVudFR4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG5leHRUeElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHByZXZUeElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNob3dOYXZpZ2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvbk5leHRUeDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZmlyc3RUeDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsYXN0VHg6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb2ZUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHJlcXVlc3RzV2FpdGluZ1RleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgLy8gRm9vdGVyXG4gICAgb25DYW5jZWxBbGw6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGVkaXRpbmdHYXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGhhbmRsZUNsb3NlRWRpdEdhczogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLy8gR2FzIFBvcG92ZXJcbiAgICBjdXJyZW50VHJhbnNhY3Rpb246IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb250YWN0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGlzT3duZWRBY2NvdW50OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdXBwb3J0c0VJUDE1NTlWMjogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNob3dFZGl0LFxuICAgICAgb25FZGl0LFxuICAgICAgZnJvbU5hbWUsXG4gICAgICBmcm9tQWRkcmVzcyxcbiAgICAgIHRvTmFtZSxcbiAgICAgIHRvRW5zLFxuICAgICAgdG9OaWNrbmFtZSxcbiAgICAgIHRvQWRkcmVzcyxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgZXJyb3JLZXksXG4gICAgICBlcnJvck1lc3NhZ2UsXG4gICAgICBjb250ZW50Q29tcG9uZW50LFxuICAgICAgYWN0aW9uLFxuICAgICAgdGl0bGUsXG4gICAgICB0aXRsZUNvbXBvbmVudCxcbiAgICAgIHN1YnRpdGxlQ29tcG9uZW50LFxuICAgICAgaGlkZVN1YnRpdGxlLFxuICAgICAgZGV0YWlsc0NvbXBvbmVudCxcbiAgICAgIGRhdGFDb21wb25lbnQsXG4gICAgICBkYXRhSGV4Q29tcG9uZW50LFxuICAgICAgb25DYW5jZWxBbGwsXG4gICAgICBvbkNhbmNlbCxcbiAgICAgIG9uU3VibWl0LFxuICAgICAgaWRlbnRpY29uQWRkcmVzcyxcbiAgICAgIG5vbmNlLFxuICAgICAgdW5hcHByb3ZlZFR4Q291bnQsXG4gICAgICB3YXJuaW5nLFxuICAgICAgdG90YWxUeCxcbiAgICAgIHBvc2l0aW9uT2ZDdXJyZW50VHgsXG4gICAgICBuZXh0VHhJZCxcbiAgICAgIHByZXZUeElkLFxuICAgICAgc2hvd05hdmlnYXRpb24sXG4gICAgICBvbk5leHRUeCxcbiAgICAgIGZpcnN0VHgsXG4gICAgICBsYXN0VHgsXG4gICAgICBvZlRleHQsXG4gICAgICByZXF1ZXN0c1dhaXRpbmdUZXh0LFxuICAgICAgaGlkZVNlbmRlclRvUmVjaXBpZW50LFxuICAgICAgc2hvd0FjY291bnRJbkhlYWRlcixcbiAgICAgIG9yaWdpbixcbiAgICAgIGV0aEdhc1ByaWNlV2FybmluZyxcbiAgICAgIGVkaXRpbmdHYXMsXG4gICAgICBoYW5kbGVDbG9zZUVkaXRHYXMsXG4gICAgICBjdXJyZW50VHJhbnNhY3Rpb24sXG4gICAgICBjb250YWN0ID0ge30sXG4gICAgICBpc093bmVkQWNjb3VudCxcbiAgICAgIHN1cHBvcnRzRUlQMTU1OVYyLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3Qgc2hvd0FkZFRvQWRkcmVzc0RpYWxvZyA9XG4gICAgICAhY29udGFjdC5uYW1lICYmIHRvQWRkcmVzcyAmJiAhaXNPd25lZEFjY291bnQgJiYgIWhpZGVTZW5kZXJUb1JlY2lwaWVudDtcblxuICAgIGNvbnN0IHNob3VsZERpc3BsYXlXYXJuaW5nID1cbiAgICAgIGNvbnRlbnRDb21wb25lbnQgJiYgZGlzYWJsZWQgJiYgKGVycm9yS2V5IHx8IGVycm9yTWVzc2FnZSk7XG5cbiAgICBjb25zdCBoaWRlVGl0bGUgPVxuICAgICAgKGN1cnJlbnRUcmFuc2FjdGlvbi50eXBlID09PSBUUkFOU0FDVElPTl9UWVBFUy5DT05UUkFDVF9JTlRFUkFDVElPTiB8fFxuICAgICAgICBjdXJyZW50VHJhbnNhY3Rpb24udHlwZSA9PT0gVFJBTlNBQ1RJT05fVFlQRVMuREVQTE9ZX0NPTlRSQUNUKSAmJlxuICAgICAgY3VycmVudFRyYW5zYWN0aW9uLnR4UGFyYW1zPy52YWx1ZSA9PT0gJzB4MCc7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEdhc0ZlZUNvbnRleHRQcm92aWRlciB0cmFuc2FjdGlvbj17Y3VycmVudFRyYW5zYWN0aW9ufT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxDb25maXJtUGFnZUNvbnRhaW5lck5hdmlnYXRpb25cbiAgICAgICAgICAgIHRvdGFsVHg9e3RvdGFsVHh9XG4gICAgICAgICAgICBwb3NpdGlvbk9mQ3VycmVudFR4PXtwb3NpdGlvbk9mQ3VycmVudFR4fVxuICAgICAgICAgICAgbmV4dFR4SWQ9e25leHRUeElkfVxuICAgICAgICAgICAgcHJldlR4SWQ9e3ByZXZUeElkfVxuICAgICAgICAgICAgc2hvd05hdmlnYXRpb249e3Nob3dOYXZpZ2F0aW9ufVxuICAgICAgICAgICAgb25OZXh0VHg9eyh0eElkKSA9PiBvbk5leHRUeCh0eElkKX1cbiAgICAgICAgICAgIGZpcnN0VHg9e2ZpcnN0VHh9XG4gICAgICAgICAgICBsYXN0VHg9e2xhc3RUeH1cbiAgICAgICAgICAgIG9mVGV4dD17b2ZUZXh0fVxuICAgICAgICAgICAgcmVxdWVzdHNXYWl0aW5nVGV4dD17cmVxdWVzdHNXYWl0aW5nVGV4dH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxDb25maXJtUGFnZUNvbnRhaW5lckhlYWRlclxuICAgICAgICAgICAgc2hvd0VkaXQ9e3Nob3dFZGl0fVxuICAgICAgICAgICAgb25FZGl0PXsoKSA9PiBvbkVkaXQoKX1cbiAgICAgICAgICAgIHNob3dBY2NvdW50SW5IZWFkZXI9e3Nob3dBY2NvdW50SW5IZWFkZXJ9XG4gICAgICAgICAgICBhY2NvdW50QWRkcmVzcz17ZnJvbUFkZHJlc3N9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2hpZGVTZW5kZXJUb1JlY2lwaWVudCA/IG51bGwgOiAoXG4gICAgICAgICAgICAgIDxTZW5kZXJUb1JlY2lwaWVudFxuICAgICAgICAgICAgICAgIHNlbmRlck5hbWU9e2Zyb21OYW1lfVxuICAgICAgICAgICAgICAgIHNlbmRlckFkZHJlc3M9e2Zyb21BZGRyZXNzfVxuICAgICAgICAgICAgICAgIHJlY2lwaWVudE5hbWU9e3RvTmFtZX1cbiAgICAgICAgICAgICAgICByZWNpcGllbnRBZGRyZXNzPXt0b0FkZHJlc3N9XG4gICAgICAgICAgICAgICAgcmVjaXBpZW50RW5zPXt0b0Vuc31cbiAgICAgICAgICAgICAgICByZWNpcGllbnROaWNrbmFtZT17dG9OaWNrbmFtZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9Db25maXJtUGFnZUNvbnRhaW5lckhlYWRlcj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAge3Nob3dBZGRUb0FkZHJlc3NEaWFsb2cgJiYgKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxEaWFsb2dcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJtZXNzYWdlXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNlbmRfX2RpYWxvZ1wiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgc2hvd05pY2tuYW1lUG9wb3ZlcnM6IHRydWUgfSl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge3RoaXMuY29udGV4dC50KCduZXdBY2NvdW50RGV0ZWN0ZWREaWFsb2dNZXNzYWdlJyl9XG4gICAgICAgICAgICAgICAgPC9EaWFsb2c+XG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuc2hvd05pY2tuYW1lUG9wb3ZlcnMgPyAoXG4gICAgICAgICAgICAgICAgICA8Tmlja25hbWVQb3BvdmVyc1xuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXsoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93Tmlja25hbWVQb3BvdmVyczogZmFsc2UgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzPXt0b0FkZHJlc3N9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAge2NvbnRlbnRDb21wb25lbnQgfHwgKFxuICAgICAgICAgICAgPENvbmZpcm1QYWdlQ29udGFpbmVyQ29udGVudFxuICAgICAgICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgICAgICAgdGl0bGU9e3RpdGxlfVxuICAgICAgICAgICAgICB0aXRsZUNvbXBvbmVudD17dGl0bGVDb21wb25lbnR9XG4gICAgICAgICAgICAgIHN1YnRpdGxlQ29tcG9uZW50PXtzdWJ0aXRsZUNvbXBvbmVudH1cbiAgICAgICAgICAgICAgaGlkZVN1YnRpdGxlPXtoaWRlU3VidGl0bGV9XG4gICAgICAgICAgICAgIGRldGFpbHNDb21wb25lbnQ9e2RldGFpbHNDb21wb25lbnR9XG4gICAgICAgICAgICAgIGRhdGFDb21wb25lbnQ9e2RhdGFDb21wb25lbnR9XG4gICAgICAgICAgICAgIGRhdGFIZXhDb21wb25lbnQ9e2RhdGFIZXhDb21wb25lbnR9XG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZT17ZXJyb3JNZXNzYWdlfVxuICAgICAgICAgICAgICBlcnJvcktleT17ZXJyb3JLZXl9XG4gICAgICAgICAgICAgIGlkZW50aWNvbkFkZHJlc3M9e2lkZW50aWNvbkFkZHJlc3N9XG4gICAgICAgICAgICAgIG5vbmNlPXtub25jZX1cbiAgICAgICAgICAgICAgd2FybmluZz17d2FybmluZ31cbiAgICAgICAgICAgICAgb25DYW5jZWxBbGw9e29uQ2FuY2VsQWxsfVxuICAgICAgICAgICAgICBvbkNhbmNlbD17b25DYW5jZWx9XG4gICAgICAgICAgICAgIGNhbmNlbFRleHQ9e3RoaXMuY29udGV4dC50KCdyZWplY3QnKX1cbiAgICAgICAgICAgICAgb25TdWJtaXQ9e29uU3VibWl0fVxuICAgICAgICAgICAgICBzdWJtaXRUZXh0PXt0aGlzLmNvbnRleHQudCgnY29uZmlybScpfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIHVuYXBwcm92ZWRUeENvdW50PXt1bmFwcHJvdmVkVHhDb3VudH1cbiAgICAgICAgICAgICAgcmVqZWN0TlRleHQ9e3RoaXMuY29udGV4dC50KCdyZWplY3RUeHNOJywgW3VuYXBwcm92ZWRUeENvdW50XSl9XG4gICAgICAgICAgICAgIG9yaWdpbj17b3JpZ2lufVxuICAgICAgICAgICAgICBldGhHYXNQcmljZVdhcm5pbmc9e2V0aEdhc1ByaWNlV2FybmluZ31cbiAgICAgICAgICAgICAgaGlkZVRpdGxlPXtoaWRlVGl0bGV9XG4gICAgICAgICAgICAgIHN1cHBvcnRzRUlQMTU1OVYyPXtzdXBwb3J0c0VJUDE1NTlWMn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7c2hvdWxkRGlzcGxheVdhcm5pbmcgJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLWFwcHJvdmUtY29udGVudF9fd2FybmluZ1wiPlxuICAgICAgICAgICAgICA8RXJyb3JNZXNzYWdlIGVycm9yS2V5PXtlcnJvcktleX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAge2NvbnRlbnRDb21wb25lbnQgJiYgKFxuICAgICAgICAgICAgPFBhZ2VDb250YWluZXJGb290ZXJcbiAgICAgICAgICAgICAgb25DYW5jZWw9e29uQ2FuY2VsfVxuICAgICAgICAgICAgICBjYW5jZWxUZXh0PXt0aGlzLmNvbnRleHQudCgncmVqZWN0Jyl9XG4gICAgICAgICAgICAgIG9uU3VibWl0PXtvblN1Ym1pdH1cbiAgICAgICAgICAgICAgc3VibWl0VGV4dD17dGhpcy5jb250ZXh0LnQoJ2NvbmZpcm0nKX1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dW5hcHByb3ZlZFR4Q291bnQgPiAxICYmIChcbiAgICAgICAgICAgICAgICA8YSBvbkNsaWNrPXtvbkNhbmNlbEFsbH0+XG4gICAgICAgICAgICAgICAgICB7dGhpcy5jb250ZXh0LnQoJ3JlamVjdFR4c04nLCBbdW5hcHByb3ZlZFR4Q291bnRdKX1cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L1BhZ2VDb250YWluZXJGb290ZXI+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7ZWRpdGluZ0dhcyAmJiAhc3VwcG9ydHNFSVAxNTU5VjIgJiYgKFxuICAgICAgICAgICAgPEVkaXRHYXNQb3BvdmVyXG4gICAgICAgICAgICAgIG1vZGU9e0VESVRfR0FTX01PREVTLk1PRElGWV9JTl9QTEFDRX1cbiAgICAgICAgICAgICAgb25DbG9zZT17aGFuZGxlQ2xvc2VFZGl0R2FzfVxuICAgICAgICAgICAgICB0cmFuc2FjdGlvbj17Y3VycmVudFRyYW5zYWN0aW9ufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtzdXBwb3J0c0VJUDE1NTlWMiAmJiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8RWRpdEdhc0ZlZVBvcG92ZXIgLz5cbiAgICAgICAgICAgICAgPEFkdmFuY2VkR2FzRmVlUG9wb3ZlciAvPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0dhc0ZlZUNvbnRleHRQcm92aWRlcj5cbiAgICApO1xuICB9XG59XG4iLCJjb25zdCBUWF9JTlNJR0hUU19CQVNFX1VSSSA9ICdodHRwczovL3R4LWluc2lnaHRzLm1ldGFzd2FwLmNvZGVmaS5uZXR3b3JrJztcblxuZXhwb3J0IGNvbnN0IEZFVENIX1BST0pFQ1RfSU5GT19VUkkgPSBgJHtUWF9JTlNJR0hUU19CQVNFX1VSSX0vZmV0Y2gtcHJvamVjdGA7XG5leHBvcnQgY29uc3QgRkVUQ0hfU1VQUE9SVEVEX05FVFdPUktTX1VSSSA9IGAke1RYX0lOU0lHSFRTX0JBU0VfVVJJfS9uZXR3b3Jrc2A7XG4iLCIvKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gaW5zcGVjdDtcblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqIEBsaWNlbnNlIE1JVCAowqkgSm95ZW50KVxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBfZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaGFzT3duKG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093bih2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICB0cnkge1xuICAgIGlmIChjdHguc2hvd0hpZGRlbiAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBpZ25vcmVcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSB7IHZhbHVlOiB2b2lkIDAgfTtcbiAgdHJ5IHtcbiAgICAvLyBpZTYg4oC6IG5hdmlnYXRvci50b1N0cmluZ1xuICAgIC8vIHRocm93cyBFcnJvcjogT2JqZWN0IGRvZXNuJ3Qgc3VwcG9ydCB0aGlzIHByb3BlcnR5IG9yIG1ldGhvZFxuICAgIGRlc2MudmFsdWUgPSB2YWx1ZVtrZXldO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaWdub3JlXG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBpZTEwIOKAuiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdy5sb2NhdGlvbiwgJ2hhc2gnKVxuICAgIC8vIHRocm93cyBUeXBlRXJyb3I6IE9iamVjdCBkb2Vzbid0IHN1cHBvcnQgdGhpcyBhY3Rpb25cbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgZGVzYztcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBpZ25vcmVcbiAgfVxuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duKHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cbmZ1bmN0aW9uIF9leHRlbmQob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn1cbiIsIi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8gZGF0YSB0cmFuc2Zvcm1hdGlvbiB1dGlsc1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5leHBvcnQgY29uc3QgdHJhbnNmb3JtVHhEZWNvZGluZyA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIHBhcmFtcy5tYXAoKG5vZGUpID0+IHtcbiAgICBjb25zdCBub2RlTmFtZSA9IG5vZGUubmFtZTtcbiAgICBjb25zdCBub2RlVmFsdWUgPSBub2RlLnZhbHVlO1xuICAgIGNvbnN0IG5vZGVLaW5kID0gbm9kZVZhbHVlLmtpbmQ7XG4gICAgY29uc3Qgbm9kZVR5cGVDbGFzcyA9IG5vZGVWYWx1ZS50eXBlLnR5cGVDbGFzcztcblxuICAgIGNvbnN0IHRyZWVJdGVtID0ge1xuICAgICAgbmFtZTogbm9kZU5hbWUsXG4gICAgICBraW5kOiBub2RlS2luZCxcbiAgICAgIHR5cGVDbGFzczogbm9kZVR5cGVDbGFzcyxcbiAgICAgIHR5cGU6IG5vZGVWYWx1ZS50eXBlLFxuICAgIH07XG5cbiAgICBpZiAobm9kZVR5cGVDbGFzcyA9PT0gJ3N0cnVjdCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnRyZWVJdGVtLFxuICAgICAgICBjaGlsZHJlbjogdHJhbnNmb3JtVHhEZWNvZGluZyhub2RlVmFsdWUudmFsdWUpLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4udHJlZUl0ZW0sXG4gICAgICB2YWx1ZTogbm9kZVZhbHVlLnZhbHVlID8gbm9kZVZhbHVlLnZhbHVlIDogbm9kZVZhbHVlLFxuICAgIH07XG4gIH0pO1xufTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2FkZHJlc3MuY29tcG9uZW50JztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2FjY3JlZGl0YXRpb24uY29tcG9uZW50JztcbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiAjIFRydWZmbGUgQ29kZWNcbiAqXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyBsb3ctbGV2ZWwgZGVjb2RpbmcgYW5kIGVuY29kaW5nIGZ1bmN0aW9uYWxpdHkgZm9yXG4gKiBTb2xpZGl0eSBhbmQgdGhlIFNvbGlkaXR5IEFCSS4gIE1hbnkgcGFydHMgb2YgdGhpcyBtb2R1bGUgYXJlIGludGVuZGVkXG4gKiBwcmltYXJpbHkgZm9yIGludGVybmFsIHVzZSBieSBUcnVmZmxlIGFuZCBzbyByZW1haW4gbGFyZ2VseSB1bmRvY3VtZW50ZWQsXG4gKiBidXQgc29tZSBvZiBpdHMgdHlwZXMgYXJlIGFsc28gb3V0cHV0IGJ5IEB0cnVmZmxlL2RlY29kZXIsIHdoaWNoIHByb3ZpZGVzXG4gKiBhIGhpZ2hlci1sZXZlbCBpbnRlcmZhY2UgdG8gbXVjaCBvZiB0aGlzIG1vZHVsZSdzIGZ1bmN0aW9uYWxpdHkuXG4gKlxuICogIyMgSWYgeW91J3JlIGhlcmUgZnJvbSBUcnVmZmxlIERlY29kZXJcbiAqXG4gKiBJZiB5b3UncmUgY29taW5nIGhlcmUgZnJvbSBbW0B0cnVmZmxlL2RlY29kZXJdXSwgeW91IHByb2JhYmx5IGp1c3Qgd2FudCB0b1xuICoga25vdyBhYm91dCB0aGUgcGFydHMgdGhhdCBhcmUgcmVsZXZhbnQgdG8geW91LiAgVGhlc2UgYXJlOlxuICpcbiAqICogVGhlIFwiZGF0YVwiIGNhdGVnb3J5IChzcGVjaWZpY2FsbHkgW1tGb3JtYXRdXSlcbiAqICogVGhlIFwib3V0cHV0XCIgYW5kIFwiZW51bWVyYXRpb25zXCIgY2F0ZWdvcmllcyAoW1tDYWxsZGF0YURlY29kaW5nXV0sIFtbTG9nRGVjb2RpbmddXSwgZXQgYWwuLCBzZWUgYmVsb3cpXG4gKiAqIFRoZSBcImVycm9yc1wiIGNhdGVnb3J5IChzcGVjaWZpY2FsbHkgW1tVbmtub3duVXNlckRlZmluZWRUeXBlRXJyb3JdXSlcbiAqXG4gKiBOb3RlIHRoYXQgdGhlIGRhdGEgY2F0ZWdvcnkgaXMgbGFyZ2VseSBzY2FyY2UgaW5cbiAqIGRvY3VtZW50YXRpb24sIGFsdGhvdWdoIHRoYXQncyBiZWNhdXNlIGl0J3MgbGFyZ2VseSBzZWxmLWV4cGxhbmF0b3J5LlxuICpcbiAqIElmIHlvdSdyZSBub3QganVzdCBoZXJlIGZyb20gVHJ1ZmZsZSBEZWNvZGVyLCBidXQgYXJlIGFjdHVhbGx5XG4gKiBpbnRlcmVzdGVkIGluIHRoZSBsb3dlci1sZXZlbCB3b3JraW5ncywgcmVhZCBvbi5cbiAqXG4gKiAjIyBIb3cgdGhpcyBtb2R1bGUgZGlmZmVycyBmcm9tIFRydWZmbGUgRGVjb2RlclxuICpcbiAqIFVubGlrZSBUcnVmZmxlIERlY29kZXIsIHRoaXMgbGlicmFyeSBtYWtlcyBubyBuZXR3b3JrIGNvbm5lY3Rpb25zXG4gKiBhbmQgYXZvaWRzIGRlcGVuZGVuY2llcyB0aGF0IGRvLiAgSW5zdGVhZCwgaXRzIGRlY29kaW5nIGZ1bmN0aW9uYWxpdHlcbiAqIGlzIGdlbmVyYXRvci1iYXNlZDsgY2FsbGluZyBvbmUgb2YgdGhlIGRlY29kaW5nIGZ1bmN0aW9ucyByZXR1cm5zIGFcbiAqIGdlbmVyYXRvci4gIFRoaXMgZ2VuZXJhdG9yJ3MgYG5leHQoKWAgZnVuY3Rpb24gbWF5IHJldHVybiBhIGZpbmlzaGVkXG4gKiByZXN1bHQsIG9yIGl0IG1heSByZXR1cm4gYSByZXF1ZXN0IGZvciBtb3JlIGluZm9ybWF0aW9uLiAgSXQgaXMgdXAgdG9cbiAqIHRoZSBjYWxsZXIgdG8gZnVsZmlsbCB0aGVzZSByZXF1ZXN0cyAtLSBzYXksIGJ5IG1ha2luZyBhIG5ldHdvcmtcbiAqIGNvbm5lY3Rpb24gb2YgaXRzIG93bi4gIFRoaXMgaXMgaG93IEB0cnVmZmxlL2RlY29kZXIgd29ya3M7IEB0cnVmZmxlL2NvZGVjXG4gKiBtYWtlcyByZXF1ZXN0cywgYW5kIEB0cnVmZmxlL2RlY29kZXIgZnVsZmlsbHMgdGhlbSBieVxuICogbG9va2luZyB1cCB0aGUgbmVjZXNzYXJ5IGluZm9ybWF0aW9uIG9uIHRoZSBibG9ja2NoYWluLlxuICpcbiAqIFRoaXMgbGlicmFyeSBhbHNvIHByb3ZpZGVzIGFkZGl0aW9uYWwgZnVuY3Rpb25hbGl0eSBiZXlvbmQgd2hhdCdzIHVzZWQgYnlcbiAqIFRydWZmbGUgRGVjb2Rlci4gIEluIHBhcnRpY3VsYXIsIHRoaXMgbGlicmFyeSBhbHNvIGV4aXN0cyB0byBzdXBwb3J0IFRydWZmbGVcbiAqIERlYnVnZ2VyLCBhbmQgc28gaXQgcHJvdmlkZXMgZW5jb2RpbmcgZnVuY3Rpb25hbGl0eSBub3QganVzdCBmb3JcbiAqIHRyYW5zYWN0aW9ucywgbG9ncywgYW5kIHN0YXRlIHZhcmlhYmxlcywgYnV0IGFsc28gZm9yIFNvbGlkaXR5IHZhcmlhYmxlc1xuICogZHVyaW5nIHRyYW5zYWN0aW9uIGV4ZWN1dGlvbiwgaW5jbHVkaW5nIGNpcmN1bGFyaXR5IGRldGVjdGlvbiBmb3IgbWVtcm95XG4gKiBzdHJ1Y3R1cmVzLiAgSXQgaW5jbHVkZXMgZnVuY3Rpb25hbGl0eSBmb3IgZGVjb2RpbmcgU29saWRpdHkncyBpbnRlcm5hbFxuICogZnVuY3Rpb24gcG9pbnRlcnMsIHdoaWNoIHRoZSBkZWJ1Z2dlciB1c2VzLCBidXQgd2hpY2ggVHJ1ZmZsZSBEZWNvZGVyXG4gKiBjdXJyZW50bHkgZG9lcyBub3QgKGFsdGhvdWdoIHRoaXMgaXMgcGxhbm5lZCBmb3IgdGhlIGZ1dHVyZSkuXG4gKlxuICogVGhlcmUgaXMgYWxzbyBmdW5jdGlvbmFsaXR5IGZvciBkZWNvZGluZyByZXR1cm4gdmFsdWVzIGFuZCByZXZlcnQgbWVzc2FnZXNcbiAqIHRoYXQgZ29lcyBiZXlvbmQgd2hhdCdzIGN1cnJlbnRseSBhdmFpbGFibGUgaW4gQHRydWZmbGUvZGVjb2RlcjsgdGhpcyBtYXkgZ2V0XG4gKiBhIGJldHRlciBpbnRlcmZhY2UgaW4gdGhlIGZ1dHVyZS5cbiAqXG4gKiAjIyBIb3cgdG8gdXNlXG4gKlxuICogWW91IHNob3VsZCBwcm9iYWJseSB1c2UgW1tAdHJ1ZmZsZS9kZWNvZGVyXV0gaW5zdGVhZCwgaWYgeW91ciB1c2UgY2FzZSBkb2Vzbid0XG4gKiBwcmVjbHVkZSBpdC4gIFRoaXMgbW9kdWxlIGhhcyBsaXR0bGUgZG9jdW1lbnRhdGlvbiwgd2hlcmUgaXQgaGFzIGFueSBhdCBhbGwsXG4gKiBhbmQgaXQncyBsaWtlbHkgdGhhdCBwYXJ0cyBvZiBpdHMgaW50ZXJmYWNlIG1heSBjaGFuZ2UgKHBhcnRpY3VsYXJseVxuICogcmVnYXJkaW5nIGFsbG9jYXRpb24pLiAgVGhhdCBzYWlkLCBpZiB5b3UgdHJ1bHkgbmVlZCB0aGUgZnVuY3Rpb25hbGl0eSBoZXJlLFxuICogVHJ1ZmZsZSBEZWNvZGVyIGNhbiBwZXJoYXBzIHNlcnZlIGFzIHNvbWV0aGluZyBvZiBhIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvblxuICogKGFuZCBwZXJoYXBzIFRydWZmbGUgRGVidWdnZXIgYXMgd2VsbCwgdGhvdWdoIHRoYXQgY29kZSBpcyBtdWNoIGhhcmRlciB0b1xuICogcmVhZCBvciBjb3B5KS5cbiAqXG4gKiBAbW9kdWxlIEB0cnVmZmxlL2NvZGVjXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHBvcnQgPSBleHBvcnRzLkV2bSA9IGV4cG9ydHMuQ29udmVyc2lvbiA9IGV4cG9ydHMuQ29udGV4dHMgPSBleHBvcnRzLkNvbXBpbGF0aW9ucyA9IGV4cG9ydHMuQ29tcGlsZXIgPSBleHBvcnRzLkFzdCA9IGV4cG9ydHMuQXN0Q29uc3RhbnQgPSBleHBvcnRzLlN0b3JhZ2UgPSBleHBvcnRzLlN0YWNrID0gZXhwb3J0cy5TcGVjaWFsID0gZXhwb3J0cy5NZW1vcnkgPSBleHBvcnRzLk1hcHBpbmdLZXkgPSBleHBvcnRzLlRvcGljID0gZXhwb3J0cy5BYmlEYXRhID0gZXhwb3J0cy5CeXRlcyA9IGV4cG9ydHMuQmFzaWMgPSBleHBvcnRzLmFiaWZ5UmV0dXJuZGF0YURlY29kaW5nID0gZXhwb3J0cy5hYmlmeUxvZ0RlY29kaW5nID0gZXhwb3J0cy5hYmlmeUNhbGxkYXRhRGVjb2RpbmcgPSBleHBvcnRzLlN0b3BEZWNvZGluZ0Vycm9yID0gZXhwb3J0cy5EZWNvZGluZ0Vycm9yID0gZXhwb3J0cy5kZWNvZGVSZXZlcnQgPSBleHBvcnRzLmRlY29kZVJldHVybmRhdGEgPSBleHBvcnRzLmRlY29kZUNhbGxkYXRhID0gZXhwb3J0cy5kZWNvZGVFdmVudCA9IGV4cG9ydHMuZGVjb2RlVmFyaWFibGUgPSBleHBvcnRzLkZvcm1hdCA9IHZvaWQgMDtcbi8vU28sIHdoYXQgc2hhbGwgY29kZWMgZXhwb3J0Li4uP1xuLy9GaXJzdDogZXhwb3J0IHRoZSBkYXRhIGZvcm1hdFxuY29uc3QgRm9ybWF0ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2Zvcm1hdFwiKSk7XG5leHBvcnRzLkZvcm1hdCA9IEZvcm1hdDtcbi8vbm93Li4uIHZhcmlvdXMgbG93LWxldmVsIHN0dWZmIHdlIHdhbnQgdG8gZXhwb3J0IVxuLy90aGUgYWN0dWFsIGRlY29kaW5nIGZ1bmN0aW9ucyBhbmQgcmVsYXRlZCBlcnJvcnNcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiLi9jb3JlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlVmFyaWFibGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5kZWNvZGVWYXJpYWJsZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUV2ZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlXzEuZGVjb2RlRXZlbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVDYWxsZGF0YVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZV8xLmRlY29kZUNhbGxkYXRhOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlUmV0dXJuZGF0YVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZV8xLmRlY29kZVJldHVybmRhdGE7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVSZXZlcnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmVfMS5kZWNvZGVSZXZlcnQ7IH0gfSk7XG52YXIgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWNvZGluZ0Vycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5EZWNvZGluZ0Vycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RvcERlY29kaW5nRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLlN0b3BEZWNvZGluZ0Vycm9yOyB9IH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbW1vblwiKSwgZXhwb3J0cyk7XG52YXIgYWJpZnlfMSA9IHJlcXVpcmUoXCIuL2FiaWZ5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWJpZnlDYWxsZGF0YURlY29kaW5nXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhYmlmeV8xLmFiaWZ5Q2FsbGRhdGFEZWNvZGluZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFiaWZ5TG9nRGVjb2RpbmdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFiaWZ5XzEuYWJpZnlMb2dEZWNvZGluZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFiaWZ5UmV0dXJuZGF0YURlY29kaW5nXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhYmlmeV8xLmFiaWZ5UmV0dXJuZGF0YURlY29kaW5nOyB9IH0pO1xuLy8gZGF0YSBsb2NhdGlvbnMgLSBjb21tb25cbmNvbnN0IEJhc2ljID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2Jhc2ljXCIpKTtcbmV4cG9ydHMuQmFzaWMgPSBCYXNpYztcbmNvbnN0IEJ5dGVzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2J5dGVzXCIpKTtcbmV4cG9ydHMuQnl0ZXMgPSBCeXRlcztcbi8vIGRhdGEgbG9jYXRpb25zIC0gYWJpXG5jb25zdCBBYmlEYXRhID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2FiaS1kYXRhXCIpKTtcbmV4cG9ydHMuQWJpRGF0YSA9IEFiaURhdGE7XG5jb25zdCBUb3BpYyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi90b3BpY1wiKSk7XG5leHBvcnRzLlRvcGljID0gVG9waWM7XG4vLyBkYXRhIGxvY2F0aW9ucyAtIHNvbGlkaXR5XG5jb25zdCBNYXBwaW5nS2V5ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL21hcHBpbmcta2V5XCIpKTtcbmV4cG9ydHMuTWFwcGluZ0tleSA9IE1hcHBpbmdLZXk7XG5jb25zdCBNZW1vcnkgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vbWVtb3J5XCIpKTtcbmV4cG9ydHMuTWVtb3J5ID0gTWVtb3J5O1xuY29uc3QgU3BlY2lhbCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9zcGVjaWFsXCIpKTtcbmV4cG9ydHMuU3BlY2lhbCA9IFNwZWNpYWw7XG5jb25zdCBTdGFjayA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9zdGFja1wiKSk7XG5leHBvcnRzLlN0YWNrID0gU3RhY2s7XG5jb25zdCBTdG9yYWdlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3N0b3JhZ2VcIikpO1xuZXhwb3J0cy5TdG9yYWdlID0gU3RvcmFnZTtcbmNvbnN0IEFzdENvbnN0YW50ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2FzdC1jb25zdGFudFwiKSk7XG5leHBvcnRzLkFzdENvbnN0YW50ID0gQXN0Q29uc3RhbnQ7XG5jb25zdCBBc3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vYXN0XCIpKTtcbmV4cG9ydHMuQXN0ID0gQXN0O1xuY29uc3QgQ29tcGlsZXIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vY29tcGlsZXJcIikpO1xuZXhwb3J0cy5Db21waWxlciA9IENvbXBpbGVyO1xuY29uc3QgQ29tcGlsYXRpb25zID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbXBpbGF0aW9uc1wiKSk7XG5leHBvcnRzLkNvbXBpbGF0aW9ucyA9IENvbXBpbGF0aW9ucztcbmNvbnN0IENvbnRleHRzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnRleHRzXCIpKTtcbmV4cG9ydHMuQ29udGV4dHMgPSBDb250ZXh0cztcbmNvbnN0IENvbnZlcnNpb24gPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vY29udmVyc2lvblwiKSk7XG5leHBvcnRzLkNvbnZlcnNpb24gPSBDb252ZXJzaW9uO1xuY29uc3QgRXZtID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2V2bVwiKSk7XG5leHBvcnRzLkV2bSA9IEV2bTtcbmNvbnN0IEV4cG9ydCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9leHBvcnRcIikpO1xuZXhwb3J0cy5FeHBvcnQgPSBFeHBvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuIyBUcnVmZmxlIERlY29kZXJcblxuVGhpcyBtb2R1bGUgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBkZWNvZGluZyBjb250cmFjdCBzdGF0ZSwgdHJhbnNhY3Rpb25cbmNhbGxkYXRhLCBldmVudHMsIGFuZCByZXR1cm4gdmFsdWVzIGFuZCByZXZlcnQgc3RyaW5ncy4gIEl0J3MgYW4gaW50ZXJmYWNlIHRvXG50aGUgc2FtZSBsb3ctbGV2ZWwgZGVjb2RpbmcgZnVuY3Rpb25hbGl0eSB0aGF0IFRydWZmbGUgRGVidWdnZXIgdXNlcy4gIEhvd2V2ZXIsXG5pdCBoYXMgYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5IHRoYXQgdGhlIGRlYnVnZ2VyIGRvZXMgbm90IG5lZWQsIGFuZCB0aGVcbmRlYnVnZ2VyIGhhcyBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdHkgdGhhdCB0aGlzIGRlY29kZXIgZG9lcyBub3QgbmVlZC5cblxuVGhlIGludGVyZmFjZSBpcyBzcGxpdCBpbnRvIHRocmVlIGNsYXNzZXM6IFRoZSBwcm9qZWN0IGRlY29kZXIsIHRoZSBjb250cmFjdFxuZGVjb2RlciwgYW5kIHRoZSBjb250cmFjdCBpbnN0YW5jZSBkZWNvZGVyLiAgVGhlIHByb2plY3QgZGVjb2RlciBpcyBhc3NvY2lhdGVkXG50byB0aGUgcHJvamVjdCBhcyBhIHdob2xlIGFuZCBkZWNvZGVzIHRyYW5zYWN0aW9uIGNhbGxkYXRhIGFuZCBldmVudHMuICBUaGVcbmNvbnRyYWN0IGRlY29kZXIgaXMgYXNzb2NpYXRlZCB0byBhIHNwZWNpZmljIGNvbnRyYWN0IGNsYXNzLiAgSXQgaGFzIGFsbCB0aGVcbmNhcGFiaWxpdGllcyBvZiB0aGUgcHJvamVjdCBkZWNvZGVyLCBidXQgaXQgY2FuIGFsc28gZGVjb2RlIHJldHVybiB2YWx1ZXMgZnJvbVxuY2FsbHMgbWFkZSBieSB0aGUgZ2l2ZW4gY29udHJhY3QgY2xhc3MuICBUaGUgY29udHJhY3QgaW5zdGFuY2UgZGVjb2RlciBpc1xuYXNzb2NpYXRlZCB0byBhIHNwZWNpZmljIGNvbnRyYWN0IGluc3RhbmNlOyBpdCBhZ2FpbiBoYXMgYWxsIHRoZSBjYXBhYmlsaXRpZXNcbm9mIHRoZSBwcm9qZWN0IGRlY29kZXIgYW5kIGNvbnRyYWN0IGRlY29kZXIsIGJ1dCBpdCBjYW4gYWxzbyBkZWNvZGUgdGhlIHN0YXRlXG52YXJpYWJsZXMgZm9yIHRoZSBzcGVjaWZpYyBpbnN0YW5jZS4gIChJbiBhZGRpdGlvbiwgaW4gdGhlIGNhc2UgdGhhdCB0aGVcbmNvbnRyYWN0IGRvZXMgbm90IGluY2x1ZGUgYSBgZGVwbG95ZWRCeXRlY29kZWAgZmllbGQgaW4gaXRzIGFydGlmYWN0LCB3aGljaCBjYW5cbmhpbmRlciBkZWNvZGluZyBjZXJ0YWluIHRoaW5ncywgdGhlIGNvbnRyYWN0IGluc3RhbmNlIGRlY29kZXIgY2FuIHNvbWV0aW1lc1xud29yayBhcm91bmQgdGhpcyB3aGVyZSB0aGUgb3RoZXIgZGVjb2RlcnMgY2Fubm90LilcblxuVGhpcyBkb2N1bWVudGF0aW9uIGRlc2NyaWJlcyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZGVjb2RlciwgYnV0IGZ1cnRoZXJcbmltcHJvdmVtZW50cyBhcmUgcGxhbm5lZC5cblxuIyMgVXNhZ2VcblxuIyMjIEluaXRpYWxpemF0aW9uXG5cbkNyZWF0ZSBhIGRlY29kZXIgd2l0aCBvbmUgb2YgdGhlIHZhcmlvdXMgY29uc3RydWN0b3IgZnVuY3Rpb25zLlxuXG5Gb3IgYSBwcm9qZWN0IGRlY29kZXIsIHVzZSB0aGUgW1tmb3JQcm9qZWN0fGBmb3JQcm9qZWN0YF1dIGZ1bmN0aW9uLlxuXG5Gb3IgYSBjb250cmFjdCBkZWNvZGVyLCB1c2UgdGhlIFtbZm9yQXJ0aWZhY3R8YGZvckFydGlmYWN0YF1dIG9yXG5bW2ZvckNvbnRyYWN0fGBmb3JDb250cmFjdGBdXSBmdW5jdGlvbi5cblxuRm9yIGEgY29udHJhY3QgaW5zdGFuY2UgZGVjb2RlciwgdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuKiBbW2ZvckRlcGxveWVkQXJ0aWZhY3R8YGZvckRlcGxveWVkQXJ0aWZhY3RgXV1cbiogW1tmb3JEZXBsb3llZENvbnRyYWN0fGBmb3JEZXBsb3llZENvbnRyYWN0YF1dXG4qIFtbZm9yQXJ0aWZhY3RBdHxgZm9yQXJ0aWZhY3RBdGBdXVxuKiBbW2ZvckNvbnRyYWN0QXR8YGZvckNvbnRyYWN0QXRgXV1cbiogW1tmb3JDb250cmFjdEluc3RhbmNlfGBmb3JDb250cmFjdEluc3RhbmNlYF1dXG4qIFtbZm9yQWRkcmVzc3xgZm9yQWRkcmVzc2BdXVxuXG5TZWUgdGhlIGRvY3VtZW50YXRpb24gb2YgdGhlc2UgZnVuY3Rpb25zIGZvciBkZXRhaWxzLCBvciBiZWxvdyBmb3IgdXNhZ2VcbmV4YW1wbGVzLlxuXG5BbGwgb2YgdGhlc2UgZnVuY3Rpb25zIHRha2UgYSBmaW5hbCBhcmd1bWVudCBpbiB3aGljaCBpbmZvcm1hdGlvbiBhYm91dCB0aGVcbnByb2plY3QgaXMgc3BlY2lmaWVkOyBjdXJyZW50bHkgb25seSBhIGZldyBtZXRob2RzIGZvciBzcGVjaWZ5aW5nIHByb2plY3RcbmluZm9ybWF0aW9uIGFyZSBhbGxvd2VkLCBidXQgbW9yZSBhcmUgcGxhbm5lZC5cblxuT25lIGNhbiBhbHNvIHNwYXduIGRlY29kZXJzIGZyb20gb3RoZXIgZGVjb2RlcnMgYnkgc3VwcGx5aW5nIGFkZGl0aW9uYWxcbmluZm9ybWF0aW9uLiAgU2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgaW5kaXZpZHVhbCBkZWNvZGVyIGNsYXNzZXMgZm9yIGFcbm1ldGhvZCBsaXN0aW5nLlxuXG4jIyMgRGVjb2RlciBtZXRob2RzXG5cblNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGluZGl2aWR1YWwgZGVjb2RlciBjbGFzc2VzIGZvciBhIG1ldGhvZCBsaXN0aW5nLlxuXG4jIyMgT3V0cHV0IGZvcm1hdCBpbmZvcm1hdGlvblxuXG5UaGUgZGVjb2RlciBvdXRwdXRzIGxvc3NsZXNzLCBtYWNoaW5lLXJlYWRhYmxlIFtbRm9ybWF0LlZhbHVlcy5SZXN1bHRdXSBvYmplY3RzXG5jb250YWluaW5nIGluZGl2aWR1YWwgZGVjb2RlZCB2YWx1ZXMuIFNlZSB0aGUgW1tGb3JtYXR8Zm9ybWF0IGRvY3VtZW50YXRpb25dXVxuZm9yIGFuIG92ZXJ2aWV3IGFuZCBjb21wbGV0ZSBtb2R1bGUgbGlzdGluZy5cblxuIyMjIERlY29kaW5nIG1vZGVzLCBhYmlmaWNhdGlvbiwgYW5kIGNhdmVhdHNcblxuVGhlIGRlY29kZXIgcnVucyBpbiBlaXRoZXIgb2YgdHdvIG1vZGVzOiBmdWxsIG1vZGUgb3IgQUJJIG1vZGUuIEZ1bGwgbW9kZVxucmVxdWlyZXMgc29tZSBhZGRpdGlvbmFsIGNvbnN0cmFpbnRzIGJ1dCByZXR1cm5zIHN1YnN0YW50aWFsbHkgbW9yZSBkZXRhaWxlZFxuaW5mb3JtYXRpb24uIFBsZWFzZSBzZWUgdGhlIG5vdGVzIG9uIFtkZWNvZGluZyBtb2Rlc10oLi4vI2RlY29kaW5nLW1vZGVzKSBmb3Jcbm1vcmUgYWJvdXQgdGhpcyBkaXN0aW5jdGlvbi5cblxuU2VlIGFsc28gdGhlIG5vdGVzIGFib3V0IFtkZWNvZGluZyBzdGF0ZSB2YXJpYWJsZXNdKC4uLyNhZGRpdGlvbmFsLW5vdGVzLW9uLWRlY29kaW5nLXN0YXRlLXZhcmlhYmxlcykgZm9yIGFkZGl0aW9uYWxcbmNhdmVhdHMgYWJvdXQgd2hhdCBtYXkgb3IgbWF5IG5vdCBiZSBmdWxseSBkZWNvZGFibGUuXG5cbiMjIyBCYXNpYyB1c2FnZSBleGFtcGxlc1xuXG4jIyMjIERlY29kaW5nIGEgbG9nIHdpdGggdGhlIHByb2plY3QgZGVjb2RlclxuXG5UaGlzIHVzYWdlIGV4YW1wbGUgaXMgZm9yIGEgcHJvamVjdCB3aXRoIHR3byBjb250cmFjdHMsIGBDb250cmFjdDFgIGFuZFxuYENvbnRyYWN0MmAuXG5cbmBgYHR5cGVzY3JpcHRcbmltcG9ydCB7IGZvclByb2plY3QgfSBmcm9tIFwiQHRydWZmbGUvZGVjb2RlclwiO1xuY29uc3QgY29udHJhY3QxID0gYXJ0aWZhY3RzLnJlcXVpcmUoXCJDb250cmFjdDFcIik7XG5jb25zdCBjb250cmFjdDIgPSBhcnRpZmFjdHMucmVxdWlyZShcIkNvbnRyYWN0MlwiKTtcbmNvbnN0IHByb3ZpZGVyID0gd2ViMy5jdXJyZW50UHJvdmlkZXI7XG5jb25zdCBkZWNvZGVyID0gYXdhaXQgRGVjb2Rlci5mb3JQcm9qZWN0KHByb3ZpZGVyLCBbY29udHJhY3QxLCBjb250cmFjdDJdKTtcbmNvbnN0IGRlY29kaW5ncyA9IGF3YWl0IGRlY29kZXIuZGVjb2RlTG9nKGxvZyk7XG5gYGBcblxuVGhlIHVzYWdlIG9mIFtbUHJvamVjdERlY29kZXIuZGVjb2RlVHJhbnNhY3Rpb258ZGVjb2RlVHJhbnNhY3Rpb25dXSBpcyBzaW1pbGFyLlxuXG5Gb3IgZ2V0dGluZyBhbHJlYWR5LWRlY29kZWQgbG9ncyBtZWV0aW5nIGFwcHJvcHJpYXRlIGNvbmRpdGlvbnMsIHNlZVxuW1tQcm9qZWN0RGVjb2Rlci5ldmVudHNdXS5cblxuIyMjIyBEZWNvZGluZyBzdGF0ZSB2YXJpYWJsZXMgd2l0aCB0aGUgY29udHJhY3QgaW5zdGFuY2UgZGVjb2RlclxuXG5UaGlzIHVzYWdlIGV4YW1wbGUgaXMgZm9yIGRlY29kaW5nIHRoZSBzdGF0ZSB2YXJpYWJsZXMgb2YgYSBjb250cmFjdCBgQ29udHJhY3RgXG5pbiBhIHByb2plY3QgdGhhdCBhbHNvIGNvbnRhaW5zIGEgY29udHJhY3QgYE90aGVyQ29udHJhY3RgLlxuXG5gYGB0eXBlc2NyaXB0XG5pbXBvcnQgeyBmb3JDb250cmFjdCB9IGZyb20gXCJAdHJ1ZmZsZS9kZWNvZGVyXCI7XG5jb25zdCBjb250cmFjdCA9IGFydGlmYWN0cy5yZXF1aXJlKFwiQ29udHJhY3RcIik7XG5jb25zdCBvdGhlckNvbnRyYWN0ID0gYXJ0aWZhY3RzLnJlcXVpcmUoXCJPdGhlckNvbnRyYWN0XCIpO1xuY29uc3QgZGVjb2RlciA9IGF3YWl0IERlY29kZXIuZm9yQ29udHJhY3QoY29udHJhY3QsIFtvdGhlckNvbnRyYWN0XSk7XG5jb25zdCBpbnN0YW5jZURlY29kZXIgPSBhd2FpdCBkZWNvZGVyLmZvckluc3RhbmNlKCk7XG5jb25zdCB2YXJpYWJsZXMgPSBhd2FpdCBpbnN0YW5jZURlY29kZXIudmFyaWFibGVzKCk7XG5gYGBcblxuSW4gdGhpcyBleGFtcGxlLCB3ZSB1c2UgdGhlIGRlcGxveWVkIHZlcnNpb24gb2YgYENvbnRyYWN0YC4gIElmIHdlIHdhbnRlZCBhblxuaW5zdGFuY2UgYXQgYSBkaWZmZXJlbnQgYWRkcmVzcywgd2UgY291bGQgcGFzcyB0aGUgYWRkcmVzcyB0byBgZm9ySW5zdGFuY2VgLlxuXG5JbiBhZGRpdGlvbiwgcmF0aGVyIHRoYW4gdXNpbmcgYGZvckNvbnRyYWN0YCBhbmQgdGhlbiBgZm9ySW5zdGFuY2VgLCB3ZSBjb3VsZFxuYWxzbyB1c2UgW1tmb3JEZXBsb3llZENvbnRyYWN0fGBmb3JDb250cmFjdEluc3RhbmNlYF1dIHRvIHBlcmZvcm0gYm90aCBvZiB0aGVzZVxuaW4gb25lIHN0ZXAuICBJZiB3ZSB3YW50ZWQgdG8gZG8gdGhpcyB3aXRoIGEgc3BlY2lmaWVkIGFkZHJlc3MsIHdlIGNvdWxkIHVzZVxuW1tmb3JDb250cmFjdEF0fGBmb3JDb250cmFjdEF0YF1dLlxuXG5ZZXQgYW5vdGhlciB3YXkgd291bGQgYmU6XG5gYGB0eXBlc2NyaXB0XG5pbXBvcnQgeyBmb3JDb250cmFjdEluc3RhbmNlIH0gZnJvbSBcIkB0cnVmZmxlL2RlY29kZXJcIjtcbmNvbnN0IGNvbnRyYWN0ID0gYXJ0aWZhY3RzLnJlcXVpcmUoXCJDb250cmFjdFwiKTtcbmNvbnN0IG90aGVyQ29udHJhY3QgPSBhcnRpZmFjdHMucmVxdWlyZShcIk90aGVyQ29udHJhY3RcIik7XG5jb25zdCBkZXBsb3llZENvbnRyYWN0ID0gYXdhaXQgY29udHJhY3QuZGVwbG95ZWQoKTtcbmNvbnN0IGluc3RhbmNlRGVjb2RlciA9IGF3YWl0IERlY29kZXIuZm9yQ29udHJhY3RJbnN0YW5jZShkZXBsb3llZENvbnRyYWN0LCBbb3RoZXJDb250cmFjdF0pO1xuY29uc3QgdmFyaWFibGVzID0gYXdhaXQgaW5zdGFuY2VEZWNvZGVyLnZhcmlhYmxlcygpO1xuYGBgXG5cblRoZXNlIGV4YW1wbGVzIGFyZSBub3QgZXhoYXVzdGl2ZS5cblxuT25lIGNhbiBmaW5kIG1vcmUgYWR2YW5jZWQgZGVjb2RpbmcgZXhhbXBsZXMgd2l0aFxuW1tDb250cmFjdEluc3RhbmNlRGVjb2Rlci52YXJpYWJsZXxgdmFyaWFibGVgXV0gYW5kXG5bW0NvbnRyYWN0SW5zdGFuY2VEZWNvZGVyLndhdGNoTWFwcGluZ0tleXxgd2F0Y2hNYXBwaW5nS2V5YF1dIGF0IHRoZVxuZG9jdW1lbnRhdGlvbiBmb3IgdGhlc2UgaW5kaXZpZHVhbCBmdW5jdGlvbnMuXG4gKlxuICogQG1vZHVsZSBAdHJ1ZmZsZS9kZWNvZGVyXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZvckFkZHJlc3MgPSBleHBvcnRzLmZvckNvbnRyYWN0SW5zdGFuY2UgPSBleHBvcnRzLmZvckNvbnRyYWN0QXQgPSBleHBvcnRzLmZvckFydGlmYWN0QXQgPSBleHBvcnRzLmZvckRlcGxveWVkQ29udHJhY3QgPSBleHBvcnRzLmZvckRlcGxveWVkQXJ0aWZhY3QgPSBleHBvcnRzLmZvckNvbnRyYWN0ID0gZXhwb3J0cy5mb3JBcnRpZmFjdCA9IGV4cG9ydHMuZm9yUHJvamVjdCA9IGV4cG9ydHMuTm9Qcm92aWRlckVycm9yID0gZXhwb3J0cy5WYXJpYWJsZU5vdEZvdW5kRXJyb3IgPSBleHBvcnRzLkludmFsaWRBZGRyZXNzRXJyb3IgPSBleHBvcnRzLkNvbnRyYWN0QWxsb2NhdGlvbkZhaWxlZEVycm9yID0gZXhwb3J0cy5Db250cmFjdE5vdEZvdW5kRXJyb3IgPSBleHBvcnRzLkNvbnRyYWN0QmVpbmdEZWNvZGVkSGFzTm9Ob2RlRXJyb3IgPSBleHBvcnRzLlByb2plY3REZWNvZGVyID0gZXhwb3J0cy5Db250cmFjdEluc3RhbmNlRGVjb2RlciA9IGV4cG9ydHMuQ29udHJhY3REZWNvZGVyID0gdm9pZCAwO1xuY29uc3QgZGVjb2RlcnNfMSA9IHJlcXVpcmUoXCIuL2RlY29kZXJzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29udHJhY3REZWNvZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVyc18xLkNvbnRyYWN0RGVjb2RlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbnRyYWN0SW5zdGFuY2VEZWNvZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVyc18xLkNvbnRyYWN0SW5zdGFuY2VEZWNvZGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUHJvamVjdERlY29kZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZXJzXzEuUHJvamVjdERlY29kZXI7IH0gfSk7XG52YXIgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb250cmFjdEJlaW5nRGVjb2RlZEhhc05vTm9kZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5Db250cmFjdEJlaW5nRGVjb2RlZEhhc05vTm9kZUVycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29udHJhY3ROb3RGb3VuZEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5Db250cmFjdE5vdEZvdW5kRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb250cmFjdEFsbG9jYXRpb25GYWlsZWRFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JzXzEuQ29udHJhY3RBbGxvY2F0aW9uRmFpbGVkRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbnZhbGlkQWRkcmVzc0Vycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5JbnZhbGlkQWRkcmVzc0Vycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmFyaWFibGVOb3RGb3VuZEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5WYXJpYWJsZU5vdEZvdW5kRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb1Byb3ZpZGVyRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLk5vUHJvdmlkZXJFcnJvcjsgfSB9KTtcbmNvbnN0IGNvZGVjXzEgPSByZXF1aXJlKFwiQHRydWZmbGUvY29kZWNcIik7XG4vKipcbiAqICoqVGhpcyBmdW5jdGlvbiBpcyBhc3luY2hyb25vdXMuKipcbiAqXG4gKiBDb25zdHJ1Y3RzIGEgcHJvamVjdCBkZWNvZGVyIGZvciB0aGUgcHJvamVjdC5cbiAqIFNlZSB0aGUgW1tEZWNvZGVyU2V0dGluZ3NdXSBkb2N1bWVudGF0aW9uIGZvciBmdXJ0aGVyIGluZm9ybWF0aW9uLlxuICogQGNhdGVnb3J5IFByb3ZpZGVyLWJhc2VkIENvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIGZvclByb2plY3Qoc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgY29tcGlsYXRpb25zID0gY29kZWNfMS5Db21waWxhdGlvbnMuVXRpbHMuaW5mb1RvQ29tcGlsYXRpb25zKHNldHRpbmdzLnByb2plY3RJbmZvKTtcbiAgICAgICAgbGV0IGVuc1NldHRpbmdzID0gZW5zU2V0dGluZ3NGb3JJbmZvKHNldHRpbmdzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBkZWNvZGVyc18xLlByb2plY3REZWNvZGVyKGNvbXBpbGF0aW9ucywgc2V0dGluZ3MucHJvdmlkZXIsIGVuc1NldHRpbmdzKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZm9yUHJvamVjdCA9IGZvclByb2plY3Q7XG4vKipcbiAqICoqVGhpcyBmdW5jdGlvbiBpcyBhc3luY2hyb25vdXMuKipcbiAqXG4gKiBDb25zdHJ1Y3RzIGEgY29udHJhY3QgZGVjb2RlciBmb3IgYSBnaXZlbiBjb250cmFjdCBhcnRpZmFjdC5cbiAqIEBwYXJhbSBhcnRpZmFjdCBUaGUgYXJ0aWZhY3QgZm9yIHRoZSBjb250cmFjdC5cbiAqXG4gKiAgIEEgY29udHJhY3QgY29uc3RydWN0b3Igb2JqZWN0IG1heSBiZSBzdWJzdGl0dXRlZCBmb3IgdGhlIGFydGlmYWN0LCBzbyBpZlxuICogICB5b3UncmUgbm90IHN1cmUgd2hpY2ggeW91J3JlIGRlYWxpbmcgd2l0aCwgaXQncyBPSy5cbiAqIEBwYXJhbSBzZXR0aW5ncyBUaGUgW1tEZWNvZGVyU2V0dGluZ3NdXSB0byB1c2UsIGluY2x1ZGluZyB0aGUgcHJvdmlkZXI7XG4gKiAgIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhhdCB0eXBlIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICogQGNhdGVnb3J5IFByb3ZpZGVyLWJhc2VkIENvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIGZvckFydGlmYWN0KGFydGlmYWN0LCBzZXR0aW5ncykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmICghc2V0dGluZ3MucHJvamVjdEluZm8pIHtcbiAgICAgICAgICAgIHNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzZXR0aW5ncyksIHsgcHJvamVjdEluZm86IHsgYXJ0aWZhY3RzOiBbYXJ0aWZhY3RdIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByb2plY3REZWNvZGVyID0geWllbGQgZm9yUHJvamVjdChzZXR0aW5ncyk7XG4gICAgICAgIHJldHVybiB5aWVsZCBwcm9qZWN0RGVjb2Rlci5mb3JBcnRpZmFjdChhcnRpZmFjdCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZvckFydGlmYWN0ID0gZm9yQXJ0aWZhY3Q7XG4vKipcbiAqICoqVGhpcyBmdW5jdGlvbiBpcyBhc3luY2hyb25vdXMuKipcbiAqXG4gKiBDb25zdHJ1Y3RzIGEgY29udHJhY3QgZGVjb2RlciBmb3IgYSBnaXZlbiBjb250cmFjdC5cbiAqIEBwYXJhbSBjb250cmFjdCBUaGUgY29udHJhY3QgY29uc3RydWN0b3Igb2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHR5cGUgb2ZcbiAqICAgdGhlIGNvbnRyYWN0LlxuICogQHBhcmFtIHNldHRpbmdzIFRoZSBbW0RlY29kZXJTZXR0aW5nc11dIHRvIHVzZTsgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvclxuICogICB0aGF0IHR5cGUgZm9yIG1vcmUgaW5mb3JtYXRpb24uICBJZiBhYnNlbnQsIHRoZSBkZWNvZGVyIHdpbGwgYmUgYmFzZWQgb25cbiAqICAganVzdCB0aGUgc2luZ2xlIGNvbnRyYWN0IHByb3ZpZGVkOyBpdCBpcyByZWNvbW1lbmRlZCB0byBwYXNzIG1vcmVcbiAqICAgaW5mb3JtYXRpb24gdG8gZ2V0IHRoZSBkZWNvZGVyJ3MgZnVsbCBwb3dlci5cbiAqIEBjYXRlZ29yeSBUcnVmZmxlIENvbnRyYWN0LWJhc2VkIENvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIGZvckNvbnRyYWN0KGNvbnRyYWN0LCBzZXR0aW5ncyA9IHt9KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHlpZWxkIGZvckFydGlmYWN0KGNvbnRyYWN0LCBPYmplY3QuYXNzaWduKHsgcHJvdmlkZXI6IGNvbnRyYWN0LndlYjMuY3VycmVudFByb3ZpZGVyIH0sIHNldHRpbmdzKSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZvckNvbnRyYWN0ID0gZm9yQ29udHJhY3Q7XG4vKipcbiAqICoqVGhpcyBmdW5jdGlvbiBpcyBhc3luY2hyb25vdXMuKipcbiAqXG4gKiBDb25zdHJ1Y3RzIGEgY29udHJhY3QgaW5zdGFuY2UgZGVjb2RlciBmb3IgYSBkZXBsb3llZCBjb250cmFjdCBpbnN0YW5jZS5cbiAqIEBwYXJhbSBhcnRpZmFjdCBUaGUgYXJ0aWZhY3QgY29ycmVzcG9uZGluZyB0byB0aGUgdHlwZSBvZiB0aGUgY29udHJhY3QuXG4gKlxuICogICBBIGNvbnRyYWN0IGNvbnN0cnVjdG9yIG9iamVjdCBtYXkgYmUgc3Vic3RpdHV0ZWQgZm9yIHRoZSBhcnRpZmFjdCwgc28gaWZcbiAqICAgeW91J3JlIG5vdCBzdXJlIHdoaWNoIHlvdSdyZSBkZWFsaW5nIHdpdGgsIGl0J3MgT0suXG4gKiBAcGFyYW0gc2V0dGluZ3MgVGhlIFtbRGVjb2RlclNldHRpbmdzXV0gdG8gdXNlLCBpbmNsdWRpbmcgdGhlIHByb3ZpZGVyO1xuICogICBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoYXQgdHlwZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqIEBjYXRlZ29yeSBQcm92aWRlci1iYXNlZCBDb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBmb3JEZXBsb3llZEFydGlmYWN0KGFydGlmYWN0LCBzZXR0aW5ncykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGxldCBjb250cmFjdERlY29kZXIgPSB5aWVsZCBmb3JBcnRpZmFjdChhcnRpZmFjdCwgc2V0dGluZ3MpO1xuICAgICAgICBsZXQgaW5zdGFuY2VEZWNvZGVyID0geWllbGQgY29udHJhY3REZWNvZGVyLmZvckluc3RhbmNlKCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZURlY29kZXI7XG4gICAgfSk7XG59XG5leHBvcnRzLmZvckRlcGxveWVkQXJ0aWZhY3QgPSBmb3JEZXBsb3llZEFydGlmYWN0O1xuLyoqXG4gKiAqKlRoaXMgZnVuY3Rpb24gaXMgYXN5bmNocm9ub3VzLioqXG4gKlxuICogQ29uc3RydWN0cyBhIGNvbnRyYWN0IGluc3RhbmNlIGRlY29kZXIgZm9yIGEgZGVwbG95ZWQgY29udHJhY3QgaW5zdGFuY2UuXG4gKiBAcGFyYW0gY29udHJhY3QgVGhlIGNvbnRyYWN0IGNvbnN0cnVjdG9yIG9iamVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSB0eXBlIG9mIHRoZSBjb250cmFjdC5cbiAqIEBwYXJhbSBzZXR0aW5ncyBUaGUgW1tEZWNvZGVyU2V0dGluZ3NdXSB0byB1c2U7IHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3JcbiAqICAgdGhhdCB0eXBlIGZvciBtb3JlIGluZm9ybWF0aW9uLiAgSWYgYWJzZW50LCB0aGUgZGVjb2RlciB3aWxsIGJlIGJhc2VkIG9uIGp1c3QgdGhlXG4gKiAgIHNpbmdsZSBjb250cmFjdCBwcm92aWRlZDsgaXQgaXMgcmVjb21tZW5kZWQgdG8gcGFzcyBtb3JlIGluZm9ybWF0aW9uIHRvIGdldCB0aGVcbiAqICAgZGVjb2RlcidzIGZ1bGwgcG93ZXIuXG4gKiBAY2F0ZWdvcnkgVHJ1ZmZsZSBDb250cmFjdC1iYXNlZCBDb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBmb3JEZXBsb3llZENvbnRyYWN0KGNvbnRyYWN0LCBzZXR0aW5ncyA9IHt9KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgbGV0IGNvbnRyYWN0RGVjb2RlciA9IHlpZWxkIGZvckNvbnRyYWN0KGNvbnRyYWN0LCBzZXR0aW5ncyk7XG4gICAgICAgIGxldCBpbnN0YW5jZURlY29kZXIgPSB5aWVsZCBjb250cmFjdERlY29kZXIuZm9ySW5zdGFuY2UoKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlRGVjb2RlcjtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZm9yRGVwbG95ZWRDb250cmFjdCA9IGZvckRlcGxveWVkQ29udHJhY3Q7XG4vKipcbiAqICoqVGhpcyBmdW5jdGlvbiBpcyBhc3luY2hyb25vdXMuKipcbiAqXG4gKiBDb25zdHJ1Y3RzIGEgY29udHJhY3QgaW5zdGFuY2UgZGVjb2RlciBmb3IgYSBjb250cmFjdCBpbnN0YW5jZSBhdCBhIGdpdmVuIGFkZHJlc3MuXG4gKiBAcGFyYW0gYXJ0aWZhY3QgVGhlIGFydGlmYWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHR5cGUgb2YgdGhlIGNvbnRyYWN0LlxuICpcbiAqICAgQSBjb250cmFjdCBjb25zdHJ1Y3RvciBvYmplY3QgbWF5IGJlIHN1YnN0aXR1dGVkIGZvciB0aGUgYXJ0aWZhY3QsIHNvIGlmXG4gKiAgIHlvdSdyZSBub3Qgc3VyZSB3aGljaCB5b3UncmUgZGVhbGluZyB3aXRoLCBpdCdzIE9LLlxuICogQHBhcmFtIGFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IGluc3RhbmNlIHRvIGRlY29kZS5cbiAqXG4gKiAgIEFkZHJlc3MgbXVzdCBlaXRoZXIgYmUgY2hlY2tzdW1tZWQsIG9yIGluIGFsbCBvbmUgY2FzZSB0byBjaXJjdW12ZW50IHRoZSBjaGVja3N1bS5cbiAqICAgTWl4ZWQtY2FzZSB3aXRoIGJhZCBjaGVja3N1bSB3aWxsIGNhdXNlIHRoaXMgZnVuY3Rpb24gdG8gdGhyb3cgYW4gZXhjZXB0aW9uLlxuICogQHBhcmFtIHNldHRpbmdzIFRoZSBbW0RlY29kZXJTZXR0aW5nc11dIHRvIHVzZSwgaW5jbHVkaW5nIHRoZSBwcm92aWRlcjtcbiAqICAgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGF0IHR5cGUgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKiBAY2F0ZWdvcnkgUHJvdmlkZXItYmFzZWQgQ29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gZm9yQXJ0aWZhY3RBdChhcnRpZmFjdCwgYWRkcmVzcywgc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgY29udHJhY3REZWNvZGVyID0geWllbGQgZm9yQXJ0aWZhY3QoYXJ0aWZhY3QsIHNldHRpbmdzKTtcbiAgICAgICAgbGV0IGluc3RhbmNlRGVjb2RlciA9IHlpZWxkIGNvbnRyYWN0RGVjb2Rlci5mb3JJbnN0YW5jZShhZGRyZXNzKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlRGVjb2RlcjtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZm9yQXJ0aWZhY3RBdCA9IGZvckFydGlmYWN0QXQ7XG4vKipcbiAqICoqVGhpcyBmdW5jdGlvbiBpcyBhc3luY2hyb25vdXMuKipcbiAqXG4gKiBDb25zdHJ1Y3RzIGEgY29udHJhY3QgaW5zdGFuY2UgZGVjb2RlciBmb3IgYSBjb250cmFjdCBpbnN0YW5jZSBhdCBhIGdpdmVuIGFkZHJlc3MuXG4gKiBAcGFyYW0gY29udHJhY3QgVGhlIGNvbnRyYWN0IGNvbnN0cnVjdG9yIG9iamVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSB0eXBlIG9mIHRoZSBjb250cmFjdC5cbiAqIEBwYXJhbSBhZGRyZXNzIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCBpbnN0YW5jZSB0byBkZWNvZGUuXG4gKlxuICogICBBZGRyZXNzIG11c3QgZWl0aGVyIGJlIGNoZWNrc3VtbWVkLCBvciBpbiBhbGwgb25lIGNhc2UgdG8gY2lyY3VtdmVudCB0aGUgY2hlY2tzdW0uXG4gKiAgIE1peGVkLWNhc2Ugd2l0aCBiYWQgY2hlY2tzdW0gd2lsbCBjYXVzZSB0aGlzIGZ1bmN0aW9uIHRvIHRocm93IGFuIGV4Y2VwdGlvbi5cbiAqIEBwYXJhbSBzZXR0aW5ncyBUaGUgW1tEZWNvZGVyU2V0dGluZ3NdXSB0byB1c2U7IHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3JcbiAqICAgdGhhdCB0eXBlIGZvciBtb3JlIGluZm9ybWF0aW9uLiAgSWYgYWJzZW50LCB0aGUgZGVjb2RlciB3aWxsIGJlIGJhc2VkIG9uIGp1c3QgdGhlXG4gKiAgIHNpbmdsZSBjb250cmFjdCBwcm92aWRlZDsgaXQgaXMgcmVjb21tZW5kZWQgdG8gcGFzcyBtb3JlIGluZm9ybWF0aW9uIHRvIGdldCB0aGVcbiAqICAgZGVjb2RlcidzIGZ1bGwgcG93ZXIuXG4gKiBAY2F0ZWdvcnkgVHJ1ZmZsZSBDb250cmFjdC1iYXNlZCBDb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBmb3JDb250cmFjdEF0KGNvbnRyYWN0LCBhZGRyZXNzLCBzZXR0aW5ncyA9IHt9KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgbGV0IGNvbnRyYWN0RGVjb2RlciA9IHlpZWxkIGZvckNvbnRyYWN0KGNvbnRyYWN0LCBzZXR0aW5ncyk7XG4gICAgICAgIGxldCBpbnN0YW5jZURlY29kZXIgPSB5aWVsZCBjb250cmFjdERlY29kZXIuZm9ySW5zdGFuY2UoYWRkcmVzcyk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZURlY29kZXI7XG4gICAgfSk7XG59XG5leHBvcnRzLmZvckNvbnRyYWN0QXQgPSBmb3JDb250cmFjdEF0O1xuLyoqXG4gKiAqKlRoaXMgZnVuY3Rpb24gaXMgYXN5bmNocm9ub3VzLioqXG4gKlxuICogQ29uc3RydWN0cyBhIGNvbnRyYWN0IGluc3RhbmNlIGRlY29kZXIgZm9yIGEgZ2l2ZW4gY29udHJhY3QgaW5zdGFuY2UuXG4gKiBAcGFyYW0gY29udHJhY3QgVGhlIGNvbnRyYWN0IGFic3RyYWN0aW9uIG9iamVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSBjb250cmFjdCBpbnN0YW5jZS5cbiAqIEBwYXJhbSBzZXR0aW5ncyBUaGUgW1tEZWNvZGVyU2V0dGluZ3NdXSB0byB1c2U7IHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3JcbiAqICAgdGhhdCB0eXBlIGZvciBtb3JlIGluZm9ybWF0aW9uLiAgSWYgYWJzZW50LCB0aGUgZGVjb2RlciB3aWxsIGJlIGJhc2VkIG9uIGp1c3QgdGhlXG4gKiAgIHNpbmdsZSBjb250cmFjdCBwcm92aWRlZDsgaXQgaXMgcmVjb21tZW5kZWQgdG8gcGFzcyBtb3JlIGluZm9ybWF0aW9uIHRvIGdldCB0aGVcbiAqICAgZGVjb2RlcidzIGZ1bGwgcG93ZXIuXG4gKiBAY2F0ZWdvcnkgVHJ1ZmZsZSBDb250cmFjdC1iYXNlZCBDb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBmb3JDb250cmFjdEluc3RhbmNlKGNvbnRyYWN0LCBzZXR0aW5ncyA9IHt9KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHlpZWxkIGZvckNvbnRyYWN0QXQoY29udHJhY3QuY29uc3RydWN0b3IsIGNvbnRyYWN0LmFkZHJlc3MsIHNldHRpbmdzKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZm9yQ29udHJhY3RJbnN0YW5jZSA9IGZvckNvbnRyYWN0SW5zdGFuY2U7XG4vKipcbiAqICoqVGhpcyBmdW5jdGlvbiBpcyBhc3luY2hyb25vdXMuKipcbiAqXG4gKiBDb25zdHJ1Y3RzIGEgY29udHJhY3QgaW5zdGFuY2UgZGVjb2RlciBmb3IgYSBnaXZlbiBpbnN0YW5jZSBvZiBhIGNvbnRyYWN0IGluIHRoaXNcbiAqIHByb2plY3QuICBVbmxpa2UgdGhlIG90aGVyIGZ1bmN0aW9ucywgdGhpcyBtZXRob2QgZG9lc24ndCByZXF1aXJlIGdpdmluZyBhblxuICogYXJ0aWZhY3QgZm9yIHRoZSBhZGRyZXNzIGl0c2VsZjsgaG93ZXZlciwgdGhlIGFkZHJlc3MgaGFkIGJldHRlciBjb3JyZXNwb25kIHRvXG4gKiBhIGNvbnRyYWN0IG9mIGEgdHlwZSBnaXZlbiBpbiB0aGUgcHJvamVjdCBpbmZvLCBvciB5b3UnbGwgZ2V0IGFuIGV4Y2VwdGlvbi5cbiAqIEBwYXJhbSBhZGRyZXNzIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCBpbnN0YW5jZSB0byBkZWNvZGUuXG4gKiAgIElmIGFuIGludmFsaWQgYWRkcmVzcyBpcyBwcm92aWRlZCwgdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24uXG4gKiBAcGFyYW0gc2V0dGluZ3MgVGhlIFtbRGVjb2RlclNldHRpbmdzXV0gdG8gdXNlLCBpbmNsdWRpbmcgdGhlIHByb3ZpZGVyO1xuICogICBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoYXQgdHlwZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqIEBjYXRlZ29yeSBQcm92aWRlci1iYXNlZCBDb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBmb3JBZGRyZXNzKGFkZHJlc3MsIHNldHRpbmdzID0ge30pIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgcHJvamVjdERlY29kZXIgPSB5aWVsZCBmb3JQcm9qZWN0KHNldHRpbmdzKTtcbiAgICAgICAgcmV0dXJuIHlpZWxkIHByb2plY3REZWNvZGVyLmZvckFkZHJlc3MoYWRkcmVzcyk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZvckFkZHJlc3MgPSBmb3JBZGRyZXNzO1xuLy93YXJuaW5nOiBjb3B5cGFzdGVkIGZyb20gQHRydWZmbGUvZW5jb2RlciFcbi8vQWxzbyB0aGUgY2F0ZWdvcnkgaXMgZmFrZSBidXQgaXMgcHV0IGhlcmUgdG8gaGlkZSBpdCA6UFxuLyoqXG4gKiBAY2F0ZWdvcnkgUHJvdmlkZXItYmFzZWQgY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gZW5zU2V0dGluZ3NGb3JJbmZvKHNldHRpbmdzKSB7XG4gICAgaWYgKHNldHRpbmdzLmVucykge1xuICAgICAgICByZXR1cm4gc2V0dGluZ3MuZW5zO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb3ZpZGVyOiBzZXR0aW5ncy5wcm92aWRlclxuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS91dGlsc1wiKTtcblxuZnVuY3Rpb24gbWVyZ2UoYWNjLCBpdGVtKSB7XG4gIGlmICghaXRlbSkge1xuICAgIHJldHVybiBhY2M7XG4gIH1cblxuICByZXR1cm4gKDAsIF91dGlscy5kZWVwbWVyZ2UpKGFjYywgaXRlbSwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXAsIGl0J3Mgd2F5IGZhc3Rlci5cblxuICB9KTtcbn1cblxudmFyIF9kZWZhdWx0ID0gbWVyZ2U7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciByZXNwb25zaXZlUHJvcFR5cGUgPSBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyA/IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheV0pIDoge307XG52YXIgX2RlZmF1bHQgPSByZXNwb25zaXZlUHJvcFR5cGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1lbW9pemU7XG5cbmZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgaXNCcm93c2VyID0gZXhwb3J0cy5pc0Jyb3dzZXIgPSAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSBcIm9iamVjdFwiICYmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihkb2N1bWVudCkpID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5ub2RlVHlwZSA9PT0gOTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gaXNCcm93c2VyOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldFN0eWxlc0NyZWF0b3I7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3R5cGVvZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgX25vb3BUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9vcFRoZW1lXCIpKTtcblxuZnVuY3Rpb24gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIHRoZW1pbmdFbmFibGVkID0gdHlwZW9mIHN0eWxlc09yQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoKDAsIF90eXBlb2YyLmRlZmF1bHQpKHN0eWxlc09yQ3JlYXRvcikgIT09ICdvYmplY3QnICYmICF0aGVtaW5nRW5hYmxlZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYHN0eWxlc2AgYXJndW1lbnQgcHJvdmlkZWQgaXMgaW52YWxpZC4nLCAnWW91IG5lZWQgdG8gcHJvdmlkZSBhIGZ1bmN0aW9uIGdlbmVyYXRpbmcgdGhlIHN0eWxlcyBvciBhIHN0eWxlcyBvYmplY3QuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUodGhlbWUsIG5hbWUpIHtcbiAgICAgIHZhciBzdHlsZXM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHN0eWxlcyA9IHRoZW1pbmdFbmFibGVkID8gc3R5bGVzT3JDcmVhdG9yKHRoZW1lKSA6IHN0eWxlc09yQ3JlYXRvcjtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAodGhlbWluZ0VuYWJsZWQgPT09IHRydWUgJiYgdGhlbWUgPT09IF9ub29wVGhlbWUuZGVmYXVsdCkge1xuICAgICAgICAgICAgLy8gVE9ETzogcHJlcGVuZCBlcnJvciBtZXNzYWdlL25hbWUgaW5zdGVhZFxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYHN0eWxlc2AgYXJndW1lbnQgcHJvdmlkZWQgaXMgaW52YWxpZC4nLCAnWW91IGFyZSBwcm92aWRpbmcgYSBmdW5jdGlvbiB3aXRob3V0IGEgdGhlbWUgaW4gdGhlIGNvbnRleHQuJywgJ09uZSBvZiB0aGUgcGFyZW50IGVsZW1lbnRzIG5lZWRzIHRvIHVzZSBhIFRoZW1lUHJvdmlkZXIuJ10uam9pbignXFxuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFuYW1lIHx8ICF0aGVtZS5vdmVycmlkZXMgfHwgIXRoZW1lLm92ZXJyaWRlc1tuYW1lXSkge1xuICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3ZlcnJpZGVzID0gdGhlbWUub3ZlcnJpZGVzW25hbWVdO1xuICAgICAgdmFyIHN0eWxlc1dpdGhPdmVycmlkZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBzdHlsZXMpO1xuICAgICAgT2JqZWN0LmtleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBZb3UgYXJlIHRyeWluZyB0byBvdmVycmlkZSBhIHN0eWxlIHRoYXQgZG9lcyBub3QgZXhpc3QuJywgXCJGaXggdGhlIGBcIi5jb25jYXQoa2V5LCBcImAga2V5IG9mIGB0aGVtZS5vdmVycmlkZXMuXCIpLmNvbmNhdChuYW1lLCBcImAuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldID0gKDAsIF91dGlscy5kZWVwbWVyZ2UpKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgb3ZlcnJpZGVzW2tleV0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3R5bGVzV2l0aE92ZXJyaWRlcztcbiAgICB9LFxuICAgIG9wdGlvbnM6IHt9XG4gIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby12YXIsIHByZWZlci10ZW1wbGF0ZSAqL1xudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvW0EtWl0vZztcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG52YXIgY2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gdG9IeXBoZW5Mb3dlcihtYXRjaCkge1xuICByZXR1cm4gJy0nICsgbWF0Y2gudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUobmFtZSkge1xuICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICByZXR1cm4gY2FjaGVbbmFtZV1cbiAgfVxuXG4gIHZhciBoTmFtZSA9IG5hbWUucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCB0b0h5cGhlbkxvd2VyKTtcbiAgcmV0dXJuIChjYWNoZVtuYW1lXSA9IG1zUGF0dGVybi50ZXN0KGhOYW1lKSA/ICctJyArIGhOYW1lIDogaE5hbWUpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIGlzSW5Ccm93c2VyID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ2lzLWluLWJyb3dzZXInKSk7XG52YXIgX3RvQ29uc3VtYWJsZUFycmF5ID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXknKSk7XG5cbi8vIEV4cG9ydCBqYXZhc2NyaXB0IHN0eWxlIGFuZCBjc3Mgc3R5bGUgdmVuZG9yIHByZWZpeGVzLlxudmFyIGpzID0gJyc7XG52YXIgY3NzID0gJyc7XG52YXIgdmVuZG9yID0gJyc7XG52YXIgYnJvd3NlciA9ICcnO1xudmFyIGlzVG91Y2ggPSBpc0luQnJvd3NlciAmJiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIFdlIHNob3VsZCBub3QgZG8gYW55dGhpbmcgaWYgcmVxdWlyZWQgc2VydmVyc2lkZS5cblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIC8vIE9yZGVyIG1hdHRlcnMuIFdlIG5lZWQgdG8gY2hlY2sgV2Via2l0IHRoZSBsYXN0IG9uZSBiZWNhdXNlXG4gIC8vIG90aGVyIHZlbmRvcnMgdXNlIHRvIGFkZCBXZWJraXQgcHJlZml4ZXMgdG8gc29tZSBwcm9wZXJ0aWVzXG4gIHZhciBqc0Nzc01hcCA9IHtcbiAgICBNb3o6ICctbW96LScsXG4gICAgbXM6ICctbXMtJyxcbiAgICBPOiAnLW8tJyxcbiAgICBXZWJraXQ6ICctd2Via2l0LSdcbiAgfTtcblxuICB2YXIgX2RvY3VtZW50JGNyZWF0ZUVsZW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLFxuICAgICAgc3R5bGUgPSBfZG9jdW1lbnQkY3JlYXRlRWxlbWUuc3R5bGU7XG5cbiAgdmFyIHRlc3RQcm9wID0gJ1RyYW5zZm9ybSc7XG5cbiAgZm9yICh2YXIga2V5IGluIGpzQ3NzTWFwKSB7XG4gICAgaWYgKGtleSArIHRlc3RQcm9wIGluIHN0eWxlKSB7XG4gICAgICBqcyA9IGtleTtcbiAgICAgIGNzcyA9IGpzQ3NzTWFwW2tleV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgRWRnZSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnbXNIeXBoZW5zJyBpbiBzdHlsZSkge1xuICAgIGpzID0gJ21zJztcbiAgICBjc3MgPSBqc0Nzc01hcC5tcztcbiAgICBicm93c2VyID0gJ2VkZ2UnO1xuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIFNhZmFyaSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnLWFwcGxlLXRyYWlsaW5nLXdvcmQnIGluIHN0eWxlKSB7XG4gICAgdmVuZG9yID0gJ2FwcGxlJztcbiAgfVxufVxuLyoqXG4gKiBWZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAdHlwZSB7e2pzOiBTdHJpbmcsIGNzczogU3RyaW5nLCB2ZW5kb3I6IFN0cmluZywgYnJvd3NlcjogU3RyaW5nfX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG52YXIgcHJlZml4ID0ge1xuICBqczoganMsXG4gIGNzczogY3NzLFxuICB2ZW5kb3I6IHZlbmRvcixcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgaXNUb3VjaDogaXNUb3VjaFxufTtcblxuLyoqXG4gKiBUZXN0IGlmIGEga2V5ZnJhbWUgYXQtcnVsZSBzaG91bGQgYmUgcHJlZml4ZWQgb3Igbm90XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRLZXlmcmFtZXMoa2V5KSB7XG4gIC8vIEtleWZyYW1lcyBpcyBhbHJlYWR5IHByZWZpeGVkLiBlLmcuIGtleSA9ICdALXdlYmtpdC1rZXlmcmFtZXMgYSdcbiAgaWYgKGtleVsxXSA9PT0gJy0nKSByZXR1cm4ga2V5OyAvLyBObyBuZWVkIHRvIHByZWZpeCBJRS9FZGdlLiBPbGRlciBicm93c2VycyB3aWxsIGlnbm9yZSB1bnN1cHBvcnRlZCBydWxlcy5cbiAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWtleWZyYW1lc1xuXG4gIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBrZXk7XG4gIHJldHVybiBcIkBcIiArIHByZWZpeC5jc3MgKyBcImtleWZyYW1lc1wiICsga2V5LnN1YnN0cigxMCk7XG59XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1hcHBlYXJhbmNlXG5cbnZhciBhcHBlYXJlbmNlID0ge1xuICBub1ByZWZpbGw6IFsnYXBwZWFyYW5jZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnYXBwZWFyYW5jZScpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jb2xvci1hZGp1c3RcblxudmFyIGNvbG9yQWRqdXN0ID0ge1xuICBub1ByZWZpbGw6IFsnY29sb3ItYWRqdXN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdjb2xvci1hZGp1c3QnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHJldHVybiBwcmVmaXguY3NzICsgXCJwcmludC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciByZWdFeHAgPSAvWy1cXHNdKyguKT8vZztcbi8qKlxuICogUmVwbGFjZXMgdGhlIGxldHRlciB3aXRoIHRoZSBjYXBpdGFsIGxldHRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IGNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRvVXBwZXIobWF0Y2gsIGMpIHtcbiAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbn1cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIGNhbWVsLWNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdFeHAsIHRvVXBwZXIpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBwYXNjYWwgY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFzY2FsaXplKHN0cikge1xuICByZXR1cm4gY2FtZWxpemUoXCItXCIgKyBzdHIpO1xufVxuXG4vLyBidXQgd2UgY2FuIHVzZSBhIGxvbmdoYW5kIHByb3BlcnR5IGluc3RlYWQuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bWFza1xuXG52YXIgbWFzayA9IHtcbiAgbm9QcmVmaWxsOiBbJ21hc2snXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXm1hc2svLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIgbG9uZ2hhbmQgPSAnbWFzay1pbWFnZSc7XG5cbiAgICAgIGlmIChjYW1lbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRleHQtb3JpZW50YXRpb25cblxudmFyIHRleHRPcmllbnRhdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RleHQtb3JpZW50YXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RleHQtb3JpZW50YXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJyAmJiAhcHJlZml4LmlzVG91Y2gpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zZm9ybVxuXG52YXIgdHJhbnNmb3JtID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNmb3JtJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNmb3JtJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNmb3JtKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNpdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zaXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD13cml0aW5nLW1vZGVcblxudmFyIHdyaXRpbmdNb2RlID0ge1xuICBub1ByZWZpbGw6IFsnd3JpdGluZy1tb2RlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd3cml0aW5nLW1vZGUnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JyB8fCBwcmVmaXguanMgPT09ICdtcycgJiYgcHJlZml4LmJyb3dzZXIgIT09ICdlZGdlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dXNlci1zZWxlY3RcblxudmFyIHVzZXJTZWxlY3QgPSB7XG4gIG5vUHJlZmlsbDogWyd1c2VyLXNlbGVjdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndXNlci1zZWxlY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JyB8fCBwcmVmaXguanMgPT09ICdtcycgfHwgcHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bXVsdGljb2x1bW5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvNDkxXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzE3N1xuXG52YXIgYnJlYWtQcm9wc09sZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXmJyZWFrLS8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBqc1Byb3AgPSBcIldlYmtpdENvbHVtblwiICsgcGFzY2FsaXplKHByb3ApO1xuICAgICAgcmV0dXJuIGpzUHJvcCBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBcImNvbHVtbi1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96Jykge1xuICAgICAgdmFyIF9qc1Byb3AgPSBcInBhZ2VcIiArIHBhc2NhbGl6ZShwcm9wKTtcblxuICAgICAgcmV0dXJuIF9qc1Byb3AgaW4gc3R5bGUgPyBcInBhZ2UtXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8zMjQuXG5cbnZhciBpbmxpbmVMb2dpY2FsT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eKGJvcmRlcnxtYXJnaW58cGFkZGluZyktaW5saW5lLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHJldHVybiBwcm9wO1xuICAgIHZhciBuZXdQcm9wID0gcHJvcC5yZXBsYWNlKCctaW5saW5lJywgJycpO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG4vLyBDYW1lbGl6YXRpb24gaXMgcmVxdWlyZWQgYmVjYXVzZSB3ZSBjYW4ndCB0ZXN0IHVzaW5nLlxuLy8gQ1NTIHN5bnRheCBmb3IgZS5nLiBpbiBGRi5cblxudmFyIHVucHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHJldHVybiBjYW1lbGl6ZShwcm9wKSBpbiBzdHlsZSA/IHByb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByZWZpeGVkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgcGFzY2FsaXplZCA9IHBhc2NhbGl6ZShwcm9wKTsgLy8gUmV0dXJuIGN1c3RvbSBDU1MgdmFyaWFibGUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nKSByZXR1cm4gcHJvcDsgLy8gUmV0dXJuIGFscmVhZHkgcHJlZml4ZWQgdmFsdWUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nICYmIHByb3BbMV0gPT09ICctJykgcmV0dXJuIHByb3A7XG4gICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDsgLy8gVHJ5IHdlYmtpdCBmYWxsYmFjay5cblxuICAgIGlmIChwcmVmaXguanMgIT09ICdXZWJraXQnICYmIFwiV2Via2l0XCIgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1zY3JvbGwtc25hcFxuXG52YXIgc2Nyb2xsU25hcCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcC5zdWJzdHJpbmcoMCwgMTEpICE9PSAnc2Nyb2xsLXNuYXAnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9b3ZlcnNjcm9sbC1iZWhhdmlvclxuXG52YXIgb3ZlcnNjcm9sbEJlaGF2aW9yID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnb3ZlcnNjcm9sbC1iZWhhdmlvcicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgXCJzY3JvbGwtY2hhaW5pbmdcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHByb3BNYXAgPSB7XG4gICdmbGV4LWdyb3cnOiAnZmxleC1wb3NpdGl2ZScsXG4gICdmbGV4LXNocmluayc6ICdmbGV4LW5lZ2F0aXZlJyxcbiAgJ2ZsZXgtYmFzaXMnOiAnZmxleC1wcmVmZXJyZWQtc2l6ZScsXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnZmxleC1wYWNrJyxcbiAgb3JkZXI6ICdmbGV4LW9yZGVyJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2ZsZXgtYWxpZ24nLFxuICAnYWxpZ24tY29udGVudCc6ICdmbGV4LWxpbmUtcGFjaycgLy8gJ2FsaWduLXNlbGYnIGlzIGhhbmRsZWQgYnkgJ2FsaWduLXNlbGYnIHBsdWdpbi5cblxufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAxMi5cblxudmFyIGZsZXgyMDEyID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXBbcHJvcF07XG4gICAgaWYgKCFuZXdQcm9wKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwJDEgPSB7XG4gIGZsZXg6ICdib3gtZmxleCcsXG4gICdmbGV4LWdyb3cnOiAnYm94LWZsZXgnLFxuICAnZmxleC1kaXJlY3Rpb24nOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICBvcmRlcjogJ2JveC1vcmRpbmFsLWdyb3VwJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2JveC1hbGlnbicsXG4gICdmbGV4LWZsb3cnOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2JveC1wYWNrJ1xufTtcbnZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BNYXAkMSk7XG5cbnZhciBwcmVmaXhDc3MgPSBmdW5jdGlvbiBwcmVmaXhDc3MocCkge1xuICByZXR1cm4gcHJlZml4LmNzcyArIHA7XG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDA5LlxuXG5cbnZhciBmbGV4MjAwOSA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBfcmVmKSB7XG4gICAgdmFyIG11bHRpcGxlID0gX3JlZi5tdWx0aXBsZTtcblxuICAgIGlmIChwcm9wS2V5cy5pbmRleE9mKHByb3ApID4gLTEpIHtcbiAgICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcCQxW3Byb3BdO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3UHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghbXVsdGlwbGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdQcm9wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghKHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wWzBdKSBpbiBzdHlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1Byb3AubWFwKHByZWZpeENzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBwbHVnaW5zID0gW1xuLy8gICAuLi5wbHVnaW5zLFxuLy8gICAgYnJlYWtQcm9wc09sZCxcbi8vICAgIGlubGluZUxvZ2ljYWxPbGQsXG4vLyAgICB1bnByZWZpeGVkLFxuLy8gICAgcHJlZml4ZWQsXG4vLyAgICBzY3JvbGxTbmFwLFxuLy8gICAgZmxleDIwMTIsXG4vLyAgICBmbGV4MjAwOVxuLy8gXVxuLy8gUGx1Z2lucyB3aXRob3V0ICdub1ByZWZpbGwnIHZhbHVlLCBnb2luZyBsYXN0LlxuLy8gJ2ZsZXgtKicgcGx1Z2lucyBzaG91bGQgYmUgYXQgdGhlIGJvdHRvbS5cbi8vICdmbGV4MjAwOScgZ29pbmcgYWZ0ZXIgJ2ZsZXgyMDEyJy5cbi8vICdwcmVmaXhlZCcgZ29pbmcgYWZ0ZXIgJ3VucHJlZml4ZWQnXG5cbnZhciBwbHVnaW5zID0gW2FwcGVhcmVuY2UsIGNvbG9yQWRqdXN0LCBtYXNrLCB0ZXh0T3JpZW50YXRpb24sIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgd3JpdGluZ01vZGUsIHVzZXJTZWxlY3QsIGJyZWFrUHJvcHNPbGQsIGlubGluZUxvZ2ljYWxPbGQsIHVucHJlZml4ZWQsIHByZWZpeGVkLCBzY3JvbGxTbmFwLCBvdmVyc2Nyb2xsQmVoYXZpb3IsIGZsZXgyMDEyLCBmbGV4MjAwOV07XG52YXIgcHJvcGVydHlEZXRlY3RvcnMgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pLm1hcChmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pO1xudmFyIG5vUHJlZmlsbCA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLm5vUHJlZmlsbDtcbn0pLnJlZHVjZShmdW5jdGlvbiAoYSwgcCkge1xuICBhLnB1c2guYXBwbHkoYSwgX3RvQ29uc3VtYWJsZUFycmF5KHAubm9QcmVmaWxsKSk7XG4gIHJldHVybiBhO1xufSwgW10pO1xuXG52YXIgZWw7XG52YXIgY2FjaGUgPSB7fTtcblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvLyBXZSB0ZXN0IGV2ZXJ5IHByb3BlcnR5IG9uIHZlbmRvciBwcmVmaXggcmVxdWlyZW1lbnQuXG4gIC8vIE9uY2UgdGVzdGVkLCByZXN1bHQgaXMgY2FjaGVkLiBJdCBnaXZlcyB1cyB1cCB0byA3MCUgcGVyZiBib29zdC5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vZWxlbWVudC1zdHlsZS1vYmplY3QtYWNjZXNzLXZzLXBsYWluLW9iamVjdFxuICAvL1xuICAvLyBQcmVmaWxsIGNhY2hlIHdpdGgga25vd24gY3NzIHByb3BlcnRpZXMgdG8gcmVkdWNlIGFtb3VudCBvZlxuICAvLyBwcm9wZXJ0aWVzIHdlIG5lZWQgdG8gZmVhdHVyZSB0ZXN0IGF0IHJ1bnRpbWUuXG4gIC8vIGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdmVuZG9yLXByZWZpeFxuXG4gIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJycpO1xuXG4gIGZvciAodmFyIGtleSQxIGluIGNvbXB1dGVkKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgIGlmICghaXNOYU4oa2V5JDEpKSBjYWNoZVtjb21wdXRlZFtrZXkkMV1dID0gY29tcHV0ZWRba2V5JDFdO1xuICB9IC8vIFByb3BlcnRpZXMgdGhhdCBjYW5ub3QgYmUgY29ycmVjdGx5IGRldGVjdGVkIHVzaW5nIHRoZVxuICAvLyBjYWNoZSBwcmVmaWxsIG1ldGhvZC5cblxuXG4gIG5vUHJlZmlsbC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGRlbGV0ZSBjYWNoZVt4XTtcbiAgfSk7XG59XG4vKipcbiAqIFRlc3QgaWYgYSBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQsIHJldHVybnMgc3VwcG9ydGVkIHByb3BlcnR5IHdpdGggdmVuZG9yXG4gKiBwcmVmaXggaWYgcmVxdWlyZWQuIFJldHVybnMgYGZhbHNlYCBpZiBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIGRhc2ggc2VwYXJhdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gcHJvcDsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHByb3BlcnR5IGZyb20gdGhlIGNhY2hlLlxuXG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdiZW5jaG1hcmsnICYmIGNhY2hlW3Byb3BdICE9IG51bGwpIHtcbiAgICByZXR1cm4gY2FjaGVbcHJvcF07XG4gIH0gLy8gQ2hlY2sgaWYgJ3RyYW5zaXRpb24nIG9yICd0cmFuc2Zvcm0nIG5hdGl2ZWx5IHN1cHBvcnRlZCBpbiBicm93c2VyLlxuXG5cbiAgaWYgKHByb3AgPT09ICd0cmFuc2l0aW9uJyB8fCBwcm9wID09PSAndHJhbnNmb3JtJykge1xuICAgIG9wdGlvbnNbcHJvcF0gPSBwcm9wIGluIGVsLnN0eWxlO1xuICB9IC8vIEZpbmQgYSBwbHVnaW4gZm9yIGN1cnJlbnQgcHJlZml4IHByb3BlcnR5LlxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0eURldGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIGNhY2hlW3Byb3BdID0gcHJvcGVydHlEZXRlY3RvcnNbaV0ocHJvcCwgZWwuc3R5bGUsIG9wdGlvbnMpOyAvLyBCcmVhayBsb29wLCBpZiB2YWx1ZSBmb3VuZC5cblxuICAgIGlmIChjYWNoZVtwcm9wXSkgYnJlYWs7XG4gIH0gLy8gUmVzZXQgc3R5bGVzIGZvciBjdXJyZW50IHByb3BlcnR5LlxuICAvLyBGaXJlZm94IGNhbiBldmVuIHRocm93IGFuIGVycm9yIGZvciBpbnZhbGlkIHByb3BlcnRpZXMsIGUuZy4sIFwiMFwiLlxuXG5cbiAgdHJ5IHtcbiAgICBlbC5zdHlsZVtwcm9wXSA9ICcnO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY2FjaGVbcHJvcF07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgdHJhbnNpdGlvblByb3BlcnRpZXMgPSB7XG4gIHRyYW5zaXRpb246IDEsXG4gICd0cmFuc2l0aW9uLXByb3BlcnR5JzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbic6IDEsXG4gICctd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHknOiAxXG59O1xudmFyIHRyYW5zUHJvcHNSZWdFeHAgPSAvKF5cXHMqW1xcdy1dKyl8LCAoXFxzKltcXHctXSspKD8hW14oKV0qXFwpKS9nO1xudmFyIGVsJDE7XG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgdHJhbnNpdGlvbi90cmFuc2Zvcm0gaWYgbmVlZGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IHAxXG4gKiBAcGFyYW0ge1N0cmluZ30gcDJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHByZWZpeFRyYW5zaXRpb25DYWxsYmFjayhtYXRjaCwgcDEsIHAyKSB7XG4gIGlmIChwMSA9PT0gJ3ZhcicpIHJldHVybiAndmFyJztcbiAgaWYgKHAxID09PSAnYWxsJykgcmV0dXJuICdhbGwnO1xuICBpZiAocDIgPT09ICdhbGwnKSByZXR1cm4gJywgYWxsJztcbiAgdmFyIHByZWZpeGVkVmFsdWUgPSBwMSA/IHN1cHBvcnRlZFByb3BlcnR5KHAxKSA6IFwiLCBcIiArIHN1cHBvcnRlZFByb3BlcnR5KHAyKTtcbiAgaWYgKCFwcmVmaXhlZFZhbHVlKSByZXR1cm4gcDEgfHwgcDI7XG4gIHJldHVybiBwcmVmaXhlZFZhbHVlO1xufVxuXG5pZiAoaXNJbkJyb3dzZXIpIGVsJDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgaWYgbmVlZGVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgdmFsdWUgaXMgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFZhbHVlKHByb3BlcnR5LCB2YWx1ZSkge1xuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHZhbHVlO1xuICBpZiAoIWVsJDEgfHwgcHJvcGVydHkgPT09ICdjb250ZW50JykgcmV0dXJuIHZhbHVlOyAvLyBJdCBpcyBhIHN0cmluZyBvciBhIG51bWJlciBhcyBhIHN0cmluZyBsaWtlICcxJy5cbiAgLy8gV2Ugd2FudCBvbmx5IHByZWZpeGFibGUgdmFsdWVzIGhlcmUuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcblxuICBpZiAodHlwZW9mIHByZWZpeGVkVmFsdWUgIT09ICdzdHJpbmcnIHx8ICFpc05hTihwYXJzZUludChwcmVmaXhlZFZhbHVlLCAxMCkpKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG4gIH0gLy8gQ3JlYXRlIGNhY2hlIGtleSBmb3IgY3VycmVudCB2YWx1ZS5cblxuXG4gIHZhciBjYWNoZUtleSA9IHByb3BlcnR5ICsgcHJlZml4ZWRWYWx1ZTsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHZhbHVlIGZyb20gY2FjaGUuXG5cbiAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGUkMVtjYWNoZUtleV0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbiAgfSAvLyBJRSBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBpbiBzb21lIGNhc2VzLCBmb3IgZS5nLiBzdHlsZS5jb250ZW50ID0gJ2JhcicuXG5cblxuICB0cnkge1xuICAgIC8vIFRlc3QgdmFsdWUgYXMgaXQgaXMuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cbiAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zaXRpb24tcHJvcGVydHknIHByb3BlcnR5LlxuXG5cbiAgaWYgKHRyYW5zaXRpb25Qcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXhlZFZhbHVlLnJlcGxhY2UodHJhbnNQcm9wc1JlZ0V4cCwgcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAvLyBWYWx1ZSB3aXRoIGEgdmVuZG9yIHByZWZpeC5cbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4LmNzcyArIHByZWZpeGVkVmFsdWU7IC8vIEhhcmRjb2RlIHRlc3QgdG8gY29udmVydCBcImZsZXhcIiB0byBcIi1tcy1mbGV4Ym94XCIgZm9yIElFMTAuXG5cbiAgICBpZiAocHJlZml4ZWRWYWx1ZSA9PT0gJy1tcy1mbGV4JykgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnLW1zLWZsZXhib3gnOyAvLyBUZXN0IHByZWZpeGVkIHZhbHVlLlxuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlOyAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cblxuICAgIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cblxuXG4gIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJyc7IC8vIFdyaXRlIGN1cnJlbnQgdmFsdWUgdG8gY2FjaGUuXG5cbiAgY2FjaGUkMVtjYWNoZUtleV0gPSBwcmVmaXhlZFZhbHVlO1xuICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG59XG5cbmV4cG9ydHMucHJlZml4ID0gcHJlZml4O1xuZXhwb3J0cy5zdXBwb3J0ZWRLZXlmcmFtZXMgPSBzdXBwb3J0ZWRLZXlmcmFtZXM7XG5leHBvcnRzLnN1cHBvcnRlZFByb3BlcnR5ID0gc3VwcG9ydGVkUHJvcGVydHk7XG5leHBvcnRzLnN1cHBvcnRlZFZhbHVlID0gc3VwcG9ydGVkVmFsdWU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2Nsc3ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbHN4XCIpKTtcblxudmFyIF9mb3JtQ29udHJvbFN0YXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZVwiKSk7XG5cbnZhciBfRm9ybUNvbnRyb2xDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dFwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9jYXBpdGFsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvY2FwaXRhbGl6ZVwiKSk7XG5cbnZhciBfdXNlRm9ya1JlZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3VzZUZvcmtSZWZcIikpO1xuXG52YXIgX1RleHRhcmVhQXV0b3NpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9UZXh0YXJlYUF1dG9zaXplXCIpKTtcblxudmFyIF91dGlsczIgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cywganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zICovXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBsaWdodCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JztcbiAgdmFyIHBsYWNlaG9sZGVyID0ge1xuICAgIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICBvcGFjaXR5OiBsaWdodCA/IDAuNDIgOiAwLjUsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICB9KVxuICB9O1xuICB2YXIgcGxhY2Vob2xkZXJIaWRkZW4gPSB7XG4gICAgb3BhY2l0eTogJzAgIWltcG9ydGFudCdcbiAgfTtcbiAgdmFyIHBsYWNlaG9sZGVyVmlzaWJsZSA9IHtcbiAgICBvcGFjaXR5OiBsaWdodCA/IDAuNDIgOiAwLjVcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAnQGdsb2JhbCc6IHtcbiAgICAgICdAa2V5ZnJhbWVzIG11aS1hdXRvLWZpbGwnOiB7fSxcbiAgICAgICdAa2V5ZnJhbWVzIG11aS1hdXRvLWZpbGwtY2FuY2VsJzoge31cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBsaW5lSGVpZ2h0OiAnMS4xODc2ZW0nLFxuICAgICAgLy8gUmVzZXQgKDE5cHgpLCBtYXRjaCB0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIGZ1bGxXaWR0aC5cbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgY3Vyc29yOiAndGV4dCcsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZCxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYEZvcm1Db250cm9sYC4gKi9cbiAgICBmb3JtQ29udHJvbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRTdGFydDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRFbmQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBtdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KDggLSAyLCBcInB4IDAgXCIpLmNvbmNhdCg4IC0gMSwgXCJweFwiKSxcbiAgICAgICcmJG1hcmdpbkRlbnNlJzoge1xuICAgICAgICBwYWRkaW5nVG9wOiA0IC0gMVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb2xvciBpcyBzZWNvbmRhcnkuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZnVsbFdpZHRoPXt0cnVlfWAuICovXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGxldHRlclNwYWNpbmc6ICdpbmhlcml0JyxcbiAgICAgIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KDggLSAyLCBcInB4IDAgXCIpLmNvbmNhdCg4IC0gMSwgXCJweFwiKSxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgIGhlaWdodDogJzEuMTg3NmVtJyxcbiAgICAgIC8vIFJlc2V0ICgxOXB4KSwgbWF0Y2ggdGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgLy8gUmVzZXQgZm9yIFNhZmFyaVxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgLy8gTWFrZSB0aGUgZmxleCBpdGVtIHNocmluayB3aXRoIEZpcmVmb3hcbiAgICAgIG1pbldpZHRoOiAwLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIC8vIEZpeCBJRSAxMSB3aWR0aCBpc3N1ZVxuICAgICAgYW5pbWF0aW9uTmFtZTogJ211aS1hdXRvLWZpbGwtY2FuY2VsJyxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMTBtcycsXG4gICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgJyY6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIElFIDExXG4gICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAvLyBFZGdlXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgb3V0bGluZTogMFxuICAgICAgfSxcbiAgICAgIC8vIFJlc2V0IEZpcmVmb3ggaW52YWxpZCByZXF1aXJlZCBpbnB1dCBzdHlsZVxuICAgICAgJyY6aW52YWxpZCc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbic6IHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIHdoZW4gdHlwZT1zZWFyY2guXG4gICAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAvLyBTaG93IGFuZCBoaWRlIHRoZSBwbGFjZWhvbGRlciBsb2dpY1xuICAgICAgJ2xhYmVsW2RhdGEtc2hyaW5rPWZhbHNlXSArICRmb3JtQ29udHJvbCAmJzoge1xuICAgICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICAgLy8gSUUgMTFcbiAgICAgICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBFZGdlXG4gICAgICAgICcmOmZvY3VzOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAnJjpmb2N1czo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICAgJyY6Zm9jdXM6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjpmb2N1czo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlIC8vIEVkZ2VcblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAxIC8vIFJlc2V0IGlPUyBvcGFjaXR5XG5cbiAgICAgIH0sXG4gICAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogJzUwMDBzJyxcbiAgICAgICAgYW5pbWF0aW9uTmFtZTogJ211aS1hdXRvLWZpbGwnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDQgLSAxXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIHJlc2l6ZTogJ25vbmUnLFxuICAgICAgcGFkZGluZzogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGB0eXBlPVwic2VhcmNoXCJgLiAqL1xuICAgIGlucHV0VHlwZVNlYXJjaDoge1xuICAgICAgLy8gSW1wcm92ZSB0eXBlIHNlYXJjaCBzdHlsZS5cbiAgICAgICctbW96LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJyxcbiAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkU3RhcnQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgaGlkZGVuTGFiZWw9e3RydWV9YC4gKi9cbiAgICBpbnB1dEhpZGRlbkxhYmVsOiB7fVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUVmZmVjdCA6IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcbi8qKlxuICogYElucHV0QmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGFuIGlucHV0LlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIHN0YXRlIGxvZ2ljLlxuICovXG5cbnZhciBJbnB1dEJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dEJhc2UocHJvcHMsIHJlZikge1xuICB2YXIgYXJpYURlc2NyaWJlZGJ5ID0gcHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSxcbiAgICAgIGF1dG9Db21wbGV0ZSA9IHByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgIGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBlbmRBZG9ybm1lbnQgPSBwcm9wcy5lbmRBZG9ybm1lbnQsXG4gICAgICBlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIGlkID0gcHJvcHMuaWQsXG4gICAgICBfcHJvcHMkaW5wdXRDb21wb25lbnQgPSBwcm9wcy5pbnB1dENvbXBvbmVudCxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gX3Byb3BzJGlucHV0Q29tcG9uZW50ID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX3Byb3BzJGlucHV0Q29tcG9uZW50LFxuICAgICAgX3Byb3BzJGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgaW5wdXRQcm9wc1Byb3AgPSBfcHJvcHMkaW5wdXRQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkaW5wdXRQcm9wcyxcbiAgICAgIGlucHV0UmVmUHJvcCA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgbWFyZ2luID0gcHJvcHMubWFyZ2luLFxuICAgICAgX3Byb3BzJG11bHRpbGluZSA9IHByb3BzLm11bHRpbGluZSxcbiAgICAgIG11bHRpbGluZSA9IF9wcm9wcyRtdWx0aWxpbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG11bHRpbGluZSxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbktleURvd24gPSBwcm9wcy5vbktleURvd24sXG4gICAgICBvbktleVVwID0gcHJvcHMub25LZXlVcCxcbiAgICAgIHBsYWNlaG9sZGVyID0gcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICByZWFkT25seSA9IHByb3BzLnJlYWRPbmx5LFxuICAgICAgcmVuZGVyU3VmZml4ID0gcHJvcHMucmVuZGVyU3VmZml4LFxuICAgICAgcm93cyA9IHByb3BzLnJvd3MsXG4gICAgICByb3dzTWF4ID0gcHJvcHMucm93c01heCxcbiAgICAgIHJvd3NNaW4gPSBwcm9wcy5yb3dzTWluLFxuICAgICAgc3RhcnRBZG9ybm1lbnQgPSBwcm9wcy5zdGFydEFkb3JubWVudCxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHR5cGUsXG4gICAgICB2YWx1ZVByb3AgPSBwcm9wcy52YWx1ZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImFyaWEtZGVzY3JpYmVkYnlcIiwgXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImVuZEFkb3JubWVudFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWRcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImlucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcIm1hcmdpblwiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJTdWZmaXhcIiwgXCJyb3dzXCIsIFwicm93c01heFwiLCBcInJvd3NNaW5cIiwgXCJzdGFydEFkb3JubWVudFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXSk7XG4gIHZhciB2YWx1ZSA9IGlucHV0UHJvcHNQcm9wLnZhbHVlICE9IG51bGwgPyBpbnB1dFByb3BzUHJvcC52YWx1ZSA6IHZhbHVlUHJvcDtcblxuICB2YXIgX1JlYWN0JHVzZVJlZiA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGhhbmRsZUlucHV0UmVmV2FybmluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLm5vZGVOYW1lICE9PSAnSU5QVVQnICYmICFpbnN0YW5jZS5mb2N1cykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGEgYGlucHV0Q29tcG9uZW50YCB0byB0aGUgaW5wdXQgY29tcG9uZW50JywgJ3RoYXQgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSB0aGUgYGlucHV0UmVmYCBwcm9wLicsICdNYWtlIHN1cmUgdGhlIGBpbnB1dFJlZmAgcHJvcCBpcyBjYWxsZWQgd2l0aCBhIEhUTUxJbnB1dEVsZW1lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3AgPSAoMCwgX3VzZUZvcmtSZWYuZGVmYXVsdCkoaW5wdXRQcm9wc1Byb3AucmVmLCBoYW5kbGVJbnB1dFJlZldhcm5pbmcpO1xuICB2YXIgaGFuZGxlSW5wdXRSZWZQcm9wID0gKDAsIF91c2VGb3JrUmVmLmRlZmF1bHQpKGlucHV0UmVmUHJvcCwgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3ApO1xuICB2YXIgaGFuZGxlSW5wdXRSZWYgPSAoMCwgX3VzZUZvcmtSZWYuZGVmYXVsdCkoaW5wdXRSZWYsIGhhbmRsZUlucHV0UmVmUHJvcCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9ICgwLCBfRm9ybUNvbnRyb2xDb250ZXh0LnVzZUZvcm1Db250cm9sKSgpO1xuXG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgcmV0dXJuIG11aUZvcm1Db250cm9sLnJlZ2lzdGVyRWZmZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSwgW211aUZvcm1Db250cm9sXSk7XG4gIH1cblxuICB2YXIgZmNzID0gKDAsIF9mb3JtQ29udHJvbFN0YXRlLmRlZmF1bHQpKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdkaXNhYmxlZCcsICdlcnJvcicsICdoaWRkZW5MYWJlbCcsICdtYXJnaW4nLCAncmVxdWlyZWQnLCAnZmlsbGVkJ11cbiAgfSk7XG4gIGZjcy5mb2N1c2VkID0gbXVpRm9ybUNvbnRyb2wgPyBtdWlGb3JtQ29udHJvbC5mb2N1c2VkIDogZm9jdXNlZDsgLy8gVGhlIGJsdXIgd29uJ3QgZmlyZSB3aGVuIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBzZXQgb24gYSBmb2N1c2VkIGlucHV0LlxuICAvLyBXZSBuZWVkIHRvIGJvb2sga2VlcCB0aGUgZm9jdXNlZCBzdGF0ZSBtYW51YWxseS5cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghbXVpRm9ybUNvbnRyb2wgJiYgZGlzYWJsZWQgJiYgZm9jdXNlZCkge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG5cbiAgICAgIGlmIChvbkJsdXIpIHtcbiAgICAgICAgb25CbHVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbbXVpRm9ybUNvbnRyb2wsIGRpc2FibGVkLCBmb2N1c2VkLCBvbkJsdXJdKTtcbiAgdmFyIG9uRmlsbGVkID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25GaWxsZWQ7XG4gIHZhciBvbkVtcHR5ID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25FbXB0eTtcbiAgdmFyIGNoZWNrRGlydHkgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKCgwLCBfdXRpbHMyLmlzRmlsbGVkKShvYmopKSB7XG4gICAgICBpZiAob25GaWxsZWQpIHtcbiAgICAgICAgb25GaWxsZWQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9uRW1wdHkpIHtcbiAgICAgIG9uRW1wdHkoKTtcbiAgICB9XG4gIH0sIFtvbkZpbGxlZCwgb25FbXB0eV0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzQ29udHJvbGxlZCkge1xuICAgICAgY2hlY2tEaXJ0eSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbdmFsdWUsIGNoZWNrRGlydHksIGlzQ29udHJvbGxlZF0pO1xuXG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGV2ZW50KSB7XG4gICAgLy8gRml4IGEgYnVnIHdpdGggSUUgMTEgd2hlcmUgdGhlIGZvY3VzL2JsdXIgZXZlbnRzIGFyZSB0cmlnZ2VyZWRcbiAgICAvLyB3aGlsZSB0aGUgaW5wdXQgaXMgZGlzYWJsZWQuXG4gICAgaWYgKGZjcy5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkZvY3VzKSB7XG4gICAgICBpbnB1dFByb3BzUHJvcC5vbkZvY3VzKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25Gb2N1cykge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25Gb2N1cyhldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVCbHVyID0gZnVuY3Rpb24gaGFuZGxlQmx1cihldmVudCkge1xuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uQmx1cikge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25CbHVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25CbHVyKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkJsdXIoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IGV2ZW50LnRhcmdldCB8fCBpbnB1dFJlZi5jdXJyZW50O1xuXG4gICAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImRldmVsb3BtZW50XCIgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogRXhwZWN0ZWQgdmFsaWQgaW5wdXQgdGFyZ2V0LiBEaWQgeW91IHVzZSBhIGN1c3RvbSBgaW5wdXRDb21wb25lbnRgIGFuZCBmb3JnZXQgdG8gZm9yd2FyZCByZWZzPyBTZWUgaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLlwiIDogKDAsIF91dGlscy5mb3JtYXRNdWlFcnJvck1lc3NhZ2UpKDEpKTtcbiAgICAgIH1cblxuICAgICAgY2hlY2tEaXJ0eSh7XG4gICAgICAgIHZhbHVlOiBlbGVtZW50LnZhbHVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQ2hhbmdlLmFwcGx5KGlucHV0UHJvcHNQcm9wLCBbZXZlbnRdLmNvbmNhdChhcmdzKSk7XG4gICAgfSAvLyBQZXJmb3JtIGluIHRoZSB3aWxsVXBkYXRlXG5cblxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UuYXBwbHkodm9pZCAwLCBbZXZlbnRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9OyAvLyBDaGVjayB0aGUgaW5wdXQgc3RhdGUgb24gbW91bnQsIGluIGNhc2UgaXQgd2FzIGZpbGxlZCBieSB0aGUgdXNlclxuICAvLyBvciBhdXRvIGZpbGxlZCBieSB0aGUgYnJvd3NlciBiZWZvcmUgdGhlIGh5ZHJhdGlvbiAoZm9yIFNTUikuXG5cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGNoZWNrRGlydHkoaW5wdXRSZWYuY3VycmVudCk7XG4gIH0sIFtdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIElucHV0Q29tcG9uZW50ID0gaW5wdXRDb21wb25lbnQ7XG4gIHZhciBpbnB1dFByb3BzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgaW5wdXRQcm9wc1Byb3AsIHtcbiAgICByZWY6IGhhbmRsZUlucHV0UmVmXG4gIH0pO1xuXG4gIGlmICh0eXBlb2YgSW5wdXRDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgaW5wdXRQcm9wcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgLy8gUmVuYW1lIHJlZiB0byBpbnB1dFJlZiBhcyB3ZSBkb24ndCBrbm93IHRoZVxuICAgICAgLy8gcHJvdmlkZWQgYGlucHV0Q29tcG9uZW50YCBzdHJ1Y3R1cmUuXG4gICAgICBpbnB1dFJlZjogaGFuZGxlSW5wdXRSZWYsXG4gICAgICB0eXBlOiB0eXBlXG4gICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgcmVmOiBudWxsXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAobXVsdGlsaW5lKSB7XG4gICAgaWYgKHJvd3MgJiYgIXJvd3NNYXggJiYgIXJvd3NNaW4pIHtcbiAgICAgIElucHV0Q29tcG9uZW50ID0gJ3RleHRhcmVhJztcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXRQcm9wcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICByb3dzTWF4OiByb3dzTWF4XG4gICAgICB9LCBpbnB1dFByb3BzKTtcbiAgICAgIElucHV0Q29tcG9uZW50ID0gX1RleHRhcmVhQXV0b3NpemUuZGVmYXVsdDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5wdXRQcm9wcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgdHlwZTogdHlwZVxuICAgIH0sIGlucHV0UHJvcHMpO1xuICB9XG5cbiAgdmFyIGhhbmRsZUF1dG9GaWxsID0gZnVuY3Rpb24gaGFuZGxlQXV0b0ZpbGwoZXZlbnQpIHtcbiAgICAvLyBQcm92aWRlIGEgZmFrZSB2YWx1ZSBhcyBDaHJvbWUgbWlnaHQgbm90IGxldCB5b3UgYWNjZXNzIGl0IGZvciBzZWN1cml0eSByZWFzb25zLlxuICAgIGNoZWNrRGlydHkoZXZlbnQuYW5pbWF0aW9uTmFtZSA9PT0gJ211aS1hdXRvLWZpbGwtY2FuY2VsJyA/IGlucHV0UmVmLmN1cnJlbnQgOiB7XG4gICAgICB2YWx1ZTogJ3gnXG4gICAgfSk7XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLnNldEFkb3JuZWRTdGFydChCb29sZWFuKHN0YXJ0QWRvcm5tZW50KSk7XG4gICAgfVxuICB9LCBbbXVpRm9ybUNvbnRyb2wsIHN0YXJ0QWRvcm5tZW50XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdCgoMCwgX2NhcGl0YWxpemUuZGVmYXVsdCkoZmNzLmNvbG9yIHx8ICdwcmltYXJ5JykpXSwgY2xhc3NOYW1lLCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IsIGZ1bGxXaWR0aCAmJiBjbGFzc2VzLmZ1bGxXaWR0aCwgZmNzLmZvY3VzZWQgJiYgY2xhc3Nlcy5mb2N1c2VkLCBtdWlGb3JtQ29udHJvbCAmJiBjbGFzc2VzLmZvcm1Db250cm9sLCBtdWx0aWxpbmUgJiYgY2xhc3Nlcy5tdWx0aWxpbmUsIHN0YXJ0QWRvcm5tZW50ICYmIGNsYXNzZXMuYWRvcm5lZFN0YXJ0LCBlbmRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5hZG9ybmVkRW5kLCBmY3MubWFyZ2luID09PSAnZGVuc2UnICYmIGNsYXNzZXMubWFyZ2luRGVuc2UpLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgc3RhcnRBZG9ybm1lbnQsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9Gb3JtQ29udHJvbENvbnRleHQuZGVmYXVsdC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBudWxsXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0Q29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBcImFyaWEtaW52YWxpZFwiOiBmY3MuZXJyb3IsXG4gICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRieSxcbiAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZSxcbiAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgIGlkOiBpZCxcbiAgICBvbkFuaW1hdGlvblN0YXJ0OiBoYW5kbGVBdXRvRmlsbCxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICByb3dzOiByb3dzLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICBvbktleVVwOiBvbktleVVwXG4gIH0sIGlucHV0UHJvcHMsIHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLmlucHV0LCBpbnB1dFByb3BzUHJvcC5jbGFzc05hbWUsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBtdWx0aWxpbmUgJiYgY2xhc3Nlcy5pbnB1dE11bHRpbGluZSwgZmNzLmhpZGRlbkxhYmVsICYmIGNsYXNzZXMuaW5wdXRIaWRkZW5MYWJlbCwgc3RhcnRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5pbnB1dEFkb3JuZWRTdGFydCwgZW5kQWRvcm5tZW50ICYmIGNsYXNzZXMuaW5wdXRBZG9ybmVkRW5kLCB0eXBlID09PSAnc2VhcmNoJyAmJiBjbGFzc2VzLmlucHV0VHlwZVNlYXJjaCwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLmlucHV0TWFyZ2luRGVuc2UpLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzXG4gIH0pKSksIGVuZEFkb3JubWVudCwgcmVuZGVyU3VmZml4ID8gcmVuZGVyU3VmZml4KCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGZjcywge1xuICAgIHN0YXJ0QWRvcm5tZW50OiBzdGFydEFkb3JubWVudFxuICB9KSkgOiBudWxsKTtcbn0pO1xuXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiBfdXRpbHMucmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVsdGlsaW5lOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGlucHV0IGlzIGJsdXJyZWQuXG4gICAqXG4gICAqIE5vdGljZSB0aGF0IHRoZSBmaXJzdCBhcmd1bWVudCAoZXZlbnQpIG1pZ2h0IGJlIHVuZGVmaW5lZC5cbiAgICovXG4gIG9uQmx1cjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlbmRlclN1ZmZpeDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNaW46IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55XG59IDogdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEJhc2UnXG59KShJbnB1dEJhc2UpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xzeCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsc3hcIikpO1xuXG52YXIgX2Zvcm1Db250cm9sU3RhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlXCIpKTtcblxudmFyIF91c2VGb3JtQ29udHJvbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sXCIpKTtcblxudmFyIF9jYXBpdGFsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvY2FwaXRhbGl6ZVwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29sb3IgaXMgc2Vjb25kYXJ5LiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICAnJiRmb2N1c2VkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb2N1c2VkPXt0cnVlfWAuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZmlsbGVkPXt0cnVlfWAuICovXG4gICAgZmlsbGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHJlcXVpcmVkPXt0cnVlfWAuICovXG4gICAgcmVxdWlyZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGFzdGVyaXNrIGVsZW1lbnQuICovXG4gICAgYXN0ZXJpc2s6IHtcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG52YXIgRm9ybUxhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUxhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2xhYmVsJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGZpbGxlZCA9IHByb3BzLmZpbGxlZCxcbiAgICAgIGZvY3VzZWQgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcImZpbGxlZFwiLCBcImZvY3VzZWRcIiwgXCJyZXF1aXJlZFwiXSk7XG4gIHZhciBtdWlGb3JtQ29udHJvbCA9ICgwLCBfdXNlRm9ybUNvbnRyb2wuZGVmYXVsdCkoKTtcbiAgdmFyIGZjcyA9ICgwLCBfZm9ybUNvbnRyb2xTdGF0ZS5kZWZhdWx0KSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnY29sb3InLCAncmVxdWlyZWQnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnXVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2Nsc3guZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoKDAsIF9jYXBpdGFsaXplLmRlZmF1bHQpKGZjcy5jb2xvciB8fCAncHJpbWFyeScpKV0sIGNsYXNzTmFtZSwgZmNzLmRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZjcy5lcnJvciAmJiBjbGFzc2VzLmVycm9yLCBmY3MuZmlsbGVkICYmIGNsYXNzZXMuZmlsbGVkLCBmY3MuZm9jdXNlZCAmJiBjbGFzc2VzLmZvY3VzZWQsIGZjcy5yZXF1aXJlZCAmJiBjbGFzc2VzLnJlcXVpcmVkKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCBmY3MucmVxdWlyZWQgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgY2xhc3NOYW1lOiAoMCwgX2Nsc3guZGVmYXVsdCkoY2xhc3Nlcy5hc3RlcmlzaywgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IpXG4gIH0sIFwiXFx1MjAwOVwiLCAnKicpKTtcbn0pO1xuXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1MYWJlbC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdFxuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IG9mIHRoaXMgbGFiZWwgaXMgZm9jdXNlZCAodXNlZCBieSBgRm9ybUdyb3VwYCBjb21wb25lbnRzKS5cbiAgICovXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGluZGljYXRlIHRoYXQgdGhlIGlucHV0IGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59IDogdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGb3JtTGFiZWwnXG59KShGb3JtTGFiZWwpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVTdmdJY29uO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vU3ZnSWNvblwiKSk7XG5cbi8qKlxuICogUHJpdmF0ZSBtb2R1bGUgcmVzZXJ2ZWQgZm9yIEBtYXRlcmlhbC11aS94IHBhY2thZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTdmdJY29uKHBhdGgsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciBDb21wb25lbnQgPSBmdW5jdGlvbiBDb21wb25lbnQocHJvcHMsIHJlZikge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMpLCBwYXRoKTtcbiAgfTtcblxuICBpZiAoXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBOZWVkIHRvIHNldCBgZGlzcGxheU5hbWVgIG9uIHRoZSBpbm5lciBjb21wb25lbnQgZm9yIFJlYWN0Lm1lbW8uXG4gICAgLy8gUmVhY3QgcHJpb3IgdG8gMTYuMTQgaWdub3JlcyBgZGlzcGxheU5hbWVgIG9uIHRoZSB3cmFwcGVyLlxuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiXCIuY29uY2F0KGRpc3BsYXlOYW1lLCBcIkljb25cIik7XG4gIH1cblxuICBDb21wb25lbnQubXVpTmFtZSA9IF9TdmdJY29uLmRlZmF1bHQubXVpTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5tZW1vKCAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuZm9yd2FyZFJlZihDb21wb25lbnQpKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG93bmVyRG9jdW1lbnQ7XG5cbmZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlRm9ya1JlZjtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9zZXRSZWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NldFJlZlwiKSk7XG5cbmZ1bmN0aW9uIHVzZUZvcmtSZWYocmVmQSwgcmVmQikge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmIHByb3BzIGNoYW5nZSBhbmQgYXJlIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3JcbiAgICovXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVmQSA9PSBudWxsICYmIHJlZkIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZWZWYWx1ZSkge1xuICAgICAgKDAsIF9zZXRSZWYuZGVmYXVsdCkocmVmQSwgcmVmVmFsdWUpO1xuICAgICAgKDAsIF9zZXRSZWYuZGVmYXVsdCkocmVmQiwgcmVmVmFsdWUpO1xuICAgIH07XG4gIH0sIFtyZWZBLCByZWZCXSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1c2VDb250cm9sbGVkO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcywgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG5mdW5jdGlvbiB1c2VDb250cm9sbGVkKF9yZWYpIHtcbiAgdmFyIGNvbnRyb2xsZWQgPSBfcmVmLmNvbnRyb2xsZWQsXG4gICAgICBkZWZhdWx0UHJvcCA9IF9yZWYuZGVmYXVsdCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBfcmVmJHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0YXRlID0gX3JlZiRzdGF0ZSA9PT0gdm9pZCAwID8gJ3ZhbHVlJyA6IF9yZWYkc3RhdGU7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFByb3ApLFxuICAgICAgdmFsdWVTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFZhbHVlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciB2YWx1ZSA9IGlzQ29udHJvbGxlZCA/IGNvbnRyb2xsZWQgOiB2YWx1ZVN0YXRlO1xuXG4gIGlmIChcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkICE9PSAoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgXCIuY29uY2F0KGlzQ29udHJvbGxlZCA/ICcnIDogJ3VuJywgXCJjb250cm9sbGVkIFwiKS5jb25jYXQoc3RhdGUsIFwiIHN0YXRlIG9mIFwiKS5jb25jYXQobmFtZSwgXCIgdG8gYmUgXCIpLmNvbmNhdChpc0NvbnRyb2xsZWQgPyAndW4nIDogJycsIFwiY29udHJvbGxlZC5cIiksICdFbGVtZW50cyBzaG91bGQgbm90IHN3aXRjaCBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4nLCBcIkRlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgXCIuY29uY2F0KG5hbWUsIFwiIFwiKSArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4nLCBcIlRoZSBuYXR1cmUgb2YgdGhlIHN0YXRlIGlzIGRldGVybWluZWQgZHVyaW5nIHRoZSBmaXJzdCByZW5kZXIsIGl0J3MgY29uc2lkZXJlZCBjb250cm9sbGVkIGlmIHRoZSB2YWx1ZSBpcyBub3QgYHVuZGVmaW5lZGAuXCIsICdNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtjb250cm9sbGVkXSk7XG5cbiAgICB2YXIgX1JlYWN0JHVzZVJlZjIgPSBSZWFjdC51c2VSZWYoZGVmYXVsdFByb3ApLFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBfUmVhY3QkdXNlUmVmMi5jdXJyZW50O1xuXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaXNDb250cm9sbGVkICYmIGRlZmF1bHRWYWx1ZSAhPT0gZGVmYXVsdFByb3ApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgdGhlIGRlZmF1bHQgXCIuY29uY2F0KHN0YXRlLCBcIiBzdGF0ZSBvZiBhbiB1bmNvbnRyb2xsZWQgXCIpLmNvbmNhdChuYW1lLCBcIiBhZnRlciBiZWluZyBpbml0aWFsaXplZC4gXCIpICsgXCJUbyBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgb3B0IHRvIHVzZSBhIGNvbnRyb2xsZWQgXCIuY29uY2F0KG5hbWUsIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtKU09OLnN0cmluZ2lmeShkZWZhdWx0UHJvcCldKTtcbiAgfVxuXG4gIHZhciBzZXRWYWx1ZUlmVW5jb250cm9sbGVkID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFt2YWx1ZSwgc2V0VmFsdWVJZlVuY29udHJvbGxlZF07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0SXMgPSByZXF1aXJlKFwicmVhY3QtaXNcIik7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xzeCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsc3hcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS91dGlsc1wiKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX1BvcG92ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Qb3BvdmVyXCIpKTtcblxudmFyIF9NZW51TGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL01lbnVMaXN0XCIpKTtcblxudmFyIFJlYWN0RE9NID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfc2V0UmVmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvc2V0UmVmXCIpKTtcblxudmFyIF91c2VUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy91c2VUaGVtZVwiKSk7XG5cbnZhciBSVExfT1JJR0lOID0ge1xuICB2ZXJ0aWNhbDogJ3RvcCcsXG4gIGhvcml6b250YWw6ICdyaWdodCdcbn07XG52YXIgTFRSX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAnbGVmdCdcbn07XG52YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQuICovXG4gIHBhcGVyOiB7XG4gICAgLy8gc3BlY1o6IFRoZSBtYXhpbXVtIGhlaWdodCBvZiBhIHNpbXBsZSBtZW51IHNob3VsZCBiZSBvbmUgb3IgbW9yZSByb3dzIGxlc3MgdGhhbiB0aGUgdmlld1xuICAgIC8vIGhlaWdodC4gVGhpcyBlbnN1cmVzIGEgdGFwYWJsZSBhcmVhIG91dHNpZGUgb2YgdGhlIHNpbXBsZSBtZW51IHdpdGggd2hpY2ggdG8gZGlzbWlzc1xuICAgIC8vIHRoZSBtZW51LlxuICAgIG1heEhlaWdodDogJ2NhbGMoMTAwJSAtIDk2cHgpJyxcbiAgICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cbiAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgTGlzdGAgY29tcG9uZW50IHZpYSBgTWVudUxpc3RgLiAqL1xuICBsaXN0OiB7XG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwXG4gIH1cbn07XG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcbnZhciBNZW51ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudShwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgYXV0b0ZvY3VzID0gX3Byb3BzJGF1dG9Gb2N1cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wcyRhdXRvRm9jdXMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPSBwcm9wcy5kaXNhYmxlQXV0b0ZvY3VzSXRlbSxcbiAgICAgIGRpc2FibGVBdXRvRm9jdXNJdGVtID0gX3Byb3BzJGRpc2FibGVBdXRvRm9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyxcbiAgICAgIF9wcm9wcyRNZW51TGlzdFByb3BzID0gcHJvcHMuTWVudUxpc3RQcm9wcyxcbiAgICAgIE1lbnVMaXN0UHJvcHMgPSBfcHJvcHMkTWVudUxpc3RQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkTWVudUxpc3RQcm9wcyxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgb25FbnRlcmluZyA9IHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIF9wcm9wcyRQYXBlclByb3BzID0gcHJvcHMuUGFwZXJQcm9wcyxcbiAgICAgIFBhcGVyUHJvcHMgPSBfcHJvcHMkUGFwZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkUGFwZXJQcm9wcyxcbiAgICAgIFBvcG92ZXJDbGFzc2VzID0gcHJvcHMuUG9wb3ZlckNsYXNzZXMsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPT09IHZvaWQgMCA/ICdhdXRvJyA6IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3NlbGVjdGVkTWVudScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImF1dG9Gb2N1c1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImRpc2FibGVBdXRvRm9jdXNJdGVtXCIsIFwiTWVudUxpc3RQcm9wc1wiLCBcIm9uQ2xvc2VcIiwgXCJvbkVudGVyaW5nXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJQb3BvdmVyQ2xhc3Nlc1wiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuICB2YXIgdGhlbWUgPSAoMCwgX3VzZVRoZW1lLmRlZmF1bHQpKCk7XG4gIHZhciBhdXRvRm9jdXNJdGVtID0gYXV0b0ZvY3VzICYmICFkaXNhYmxlQXV0b0ZvY3VzSXRlbSAmJiBvcGVuO1xuICB2YXIgbWVudUxpc3RBY3Rpb25zUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgY29udGVudEFuY2hvclJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgZ2V0Q29udGVudEFuY2hvckVsID0gZnVuY3Rpb24gZ2V0Q29udGVudEFuY2hvckVsKCkge1xuICAgIHJldHVybiBjb250ZW50QW5jaG9yUmVmLmN1cnJlbnQ7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gaGFuZGxlRW50ZXJpbmcoZWxlbWVudCwgaXNBcHBlYXJpbmcpIHtcbiAgICBpZiAobWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQpIHtcbiAgICAgIG1lbnVMaXN0QWN0aW9uc1JlZi5jdXJyZW50LmFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyKGVsZW1lbnQsIHRoZW1lKTtcbiAgICB9XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVMaXN0S2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUxpc3RLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ1RhYicpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZXZlbnQsICd0YWJLZXlEb3duJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogdGhlIGluZGV4IG9mIHRoZSBpdGVtIHNob3VsZCByZWNlaXZlIGZvY3VzXG4gICAqIGluIGEgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAgaXQncyB0aGUgZmlyc3QgYHNlbGVjdGVkYCBpdGVtXG4gICAqIG90aGVyd2lzZSBpdCdzIHRoZSB2ZXJ5IGZpcnN0IGl0ZW0uXG4gICAqL1xuXG5cbiAgdmFyIGFjdGl2ZUl0ZW1JbmRleCA9IC0xOyAvLyBzaW5jZSB3ZSBpbmplY3QgZm9jdXMgcmVsYXRlZCBwcm9wcyBpbnRvIGNoaWxkcmVuIHdlIGhhdmUgdG8gZG8gYSBsb29rYWhlYWRcbiAgLy8gdG8gY2hlY2sgaWYgdGhlcmUgaXMgYSBgc2VsZWN0ZWRgIGl0ZW0uIFdlJ3JlIGxvb2tpbmcgZm9yIHRoZSBsYXN0IGBzZWxlY3RlZGBcbiAgLy8gaXRlbSBhbmQgdXNlIHRoZSBmaXJzdCB2YWxpZCBpdGVtIGFzIGEgZmFsbGJhY2tcblxuICBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoKDAsIF9yZWFjdElzLmlzRnJhZ21lbnQpKGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgTWVudSBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghY2hpbGQucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGlmICh2YXJpYW50ICE9PSBcIm1lbnVcIiAmJiBjaGlsZC5wcm9wcy5zZWxlY3RlZCkge1xuICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSBpbmRleDtcbiAgICAgIH0gZWxzZSBpZiAoYWN0aXZlSXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB2YXIgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IGFjdGl2ZUl0ZW1JbmRleCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoaW5zdGFuY2UpIHtcbiAgICAgICAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgICAgICAgIGNvbnRlbnRBbmNob3JSZWYuY3VycmVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcbiAgICAgICAgICAoMCwgX3NldFJlZi5kZWZhdWx0KShjaGlsZC5yZWYsIGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9Qb3BvdmVyLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGdldENvbnRlbnRBbmNob3JFbDogZ2V0Q29udGVudEFuY2hvckVsLFxuICAgIGNsYXNzZXM6IFBvcG92ZXJDbGFzc2VzLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgYW5jaG9yT3JpZ2luOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gUlRMX09SSUdJTiA6IExUUl9PUklHSU4sXG4gICAgdHJhbnNmb3JtT3JpZ2luOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gUlRMX09SSUdJTiA6IExUUl9PUklHSU4sXG4gICAgUGFwZXJQcm9wczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgUGFwZXJQcm9wcywge1xuICAgICAgY2xhc3NlczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgUGFwZXJQcm9wcy5jbGFzc2VzLCB7XG4gICAgICAgIHJvb3Q6IGNsYXNzZXMucGFwZXJcbiAgICAgIH0pXG4gICAgfSksXG4gICAgb3Blbjogb3BlbixcbiAgICByZWY6IHJlZixcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9NZW51TGlzdC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBvbktleURvd246IGhhbmRsZUxpc3RLZXlEb3duLFxuICAgIGFjdGlvbnM6IG1lbnVMaXN0QWN0aW9uc1JlZixcbiAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyAmJiAoYWN0aXZlSXRlbUluZGV4ID09PSAtMSB8fCBkaXNhYmxlQXV0b0ZvY3VzSXRlbSksXG4gICAgYXV0b0ZvY3VzSXRlbTogYXV0b0ZvY3VzSXRlbSxcbiAgICB2YXJpYW50OiB2YXJpYW50XG4gIH0sIE1lbnVMaXN0UHJvcHMsIHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLmxpc3QsIE1lbnVMaXN0UHJvcHMuY2xhc3NOYW1lKVxuICB9KSwgaXRlbXMpKTtcbn0pO1xuXCJkZXZlbG9wbWVudFwiICE9PSBcInByb2R1Y3Rpb25cIiA/IE1lbnUucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSBIVE1MIGVsZW1lbnQsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGl0LlxuICAgKiBJdCdzIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVudS5cbiAgICovXG4gIGFuY2hvckVsOiBfcHJvcFR5cGVzLmRlZmF1bHRcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtfdXRpbHMuSFRNTEVsZW1lbnRUeXBlLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAgKERlZmF1bHQpIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGlmIG5vIGZvY3VzYWJsZSBjaGlsZCBpcyBmb3VuZC4gRGlzYWJsZWRcbiAgICogY2hpbGRyZW4gYXJlIG5vdCBmb2N1c2FibGUuIElmIHlvdSBzZXQgdGhpcyBwcm9wIHRvIGBmYWxzZWAgZm9jdXMgd2lsbCBiZSBwbGFjZWRcbiAgICogb24gdGhlIHBhcmVudCBtb2RhbCBjb250YWluZXIuIFRoaXMgaGFzIHNldmVyZSBhY2Nlc3NpYmlsaXR5IGltcGxpY2F0aW9uc1xuICAgKiBhbmQgc2hvdWxkIG9ubHkgYmUgY29uc2lkZXJlZCBpZiB5b3UgbWFuYWdlIGZvY3VzIG90aGVyd2lzZS5cbiAgICovXG4gIGF1dG9Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE1lbnUgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFdoZW4gb3BlbmluZyB0aGUgbWVudSB3aWxsIG5vdCBmb2N1cyB0aGUgYWN0aXZlIGl0ZW0gYnV0IHRoZSBgW3JvbGU9XCJtZW51XCJdYFxuICAgKiB1bmxlc3MgYGF1dG9Gb2N1c2AgaXMgYWxzbyBzZXQgdG8gYGZhbHNlYC4gTm90IHVzaW5nIHRoZSBkZWZhdWx0IG1lYW5zIG5vdFxuICAgKiBmb2xsb3dpbmcgV0FJLUFSSUEgYXV0aG9yaW5nIHByYWN0aWNlcy4gUGxlYXNlIGJlIGNvbnNpZGVyYXRlIGFib3V0IHBvc3NpYmxlXG4gICAqIGFjY2Vzc2liaWxpdHkgaW1wbGljYXRpb25zLlxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW06IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVMaXN0YF0oL2FwaS9tZW51LWxpc3QvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudUxpc3RQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYCwgYFwidGFiS2V5RG93blwiYC5cbiAgICovXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1lbnUgZW50ZXJzLlxuICAgKi9cbiAgb25FbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaGFzIGVudGVyZWQuXG4gICAqL1xuICBvbkVudGVyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcmluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgTWVudSBleGl0cy5cbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0aW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbWVudSBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgUGFwZXJQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogYGNsYXNzZXNgIHByb3AgYXBwbGllZCB0byB0aGUgW2BQb3BvdmVyYF0oL2FwaS9wb3BvdmVyLykgZWxlbWVudC5cbiAgICovXG4gIFBvcG92ZXJDbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHRoZSB0cmFuc2l0aW9uIGluIGBtc2AsIG9yICdhdXRvJ1xuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydhdXRvJ10pLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGFwcGVhcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS4gVXNlIGBtZW51YCB0byBwcmV2ZW50IHNlbGVjdGVkIGl0ZW1zIGZyb20gaW1wYWN0aW5nIHRoZSBpbml0aWFsIGZvY3VzXG4gICAqIGFuZCB0aGUgdmVydGljYWwgYWxpZ25tZW50IHJlbGF0aXZlIHRvIHRoZSBhbmNob3IgZWxlbWVudC5cbiAgICovXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ21lbnUnLCAnc2VsZWN0ZWRNZW51J10pXG59IDogdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlNZW51J1xufSkoTWVudSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImZ1bmN0aW9uIG5ld1BhcGVyKGRpYW1ldGVyLCBjb2xvcikge1xuICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgY29udGFpbmVyLnN0eWxlLmJvcmRlclJhZGl1cyA9ICc1MHB4J1xuICBjb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJ1xuICBjb250YWluZXIuc3R5bGUucGFkZGluZyA9ICcwcHgnXG4gIGNvbnRhaW5lci5zdHlsZS5tYXJnaW4gPSAnMHB4J1xuICBjb250YWluZXIuc3R5bGUud2lkdGggPSAnJyArIGRpYW1ldGVyICsgJ3B4J1xuICBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gJycgKyBkaWFtZXRlciArICdweCdcbiAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJ1xuICBjb250YWluZXIuc3R5bGUuYmFja2dyb3VuZCA9IGNvbG9yXG4gIHJldHVybiB7XG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXdQYXBlclxuIiwibW9kdWxlLmV4cG9ydHMgPSBbXG5cdCcjMDE4ODhDJywgLy8gdGVhbFxuICAnI0ZDNzUwMCcsIC8vIGJyaWdodCBvcmFuZ2VcbiAgJyMwMzRGNUQnLCAvLyBkYXJrIHRlYWxcbiAgJyNGNzNGMDEnLCAvLyBvcmFuZ2VyZWRcbiAgJyNGQzE5NjAnLCAvLyBtYWdlbnRhXG4gICcjQzcxNDRDJywgLy8gcmFzcGJlcnJ5XG4gICcjRjNDMTAwJywgLy8gZ29sZGVucm9kXG4gICcjMTU5OEYyJywgLy8gbGlnaHRuaW5nIGJsdWVcbiAgJyMyNDY1RTEnLCAvLyBzYWlsIGJsdWVcbiAgJyNGMTlFMDInLCAvLyBnb2xkXG5dXG4iLCIvKlxuICBodHRwczovL2dpdGh1Yi5jb20vYmFua3NlYW4gd3JhcHBlZCBNYWtvdG8gTWF0c3Vtb3RvIGFuZCBUYWt1amkgTmlzaGltdXJhJ3MgY29kZSBpbiBhIG5hbWVzcGFjZVxuICBzbyBpdCdzIGJldHRlciBlbmNhcHN1bGF0ZWQuIE5vdyB5b3UgY2FuIGhhdmUgbXVsdGlwbGUgcmFuZG9tIG51bWJlciBnZW5lcmF0b3JzXG4gIGFuZCB0aGV5IHdvbid0IHN0b21wIGFsbCBvdmVyIGVhY2hvdGhlcidzIHN0YXRlLlxuXG4gIElmIHlvdSB3YW50IHRvIHVzZSB0aGlzIGFzIGEgc3Vic3RpdHV0ZSBmb3IgTWF0aC5yYW5kb20oKSwgdXNlIHRoZSByYW5kb20oKVxuICBtZXRob2QgbGlrZSBzbzpcblxuICB2YXIgbSA9IG5ldyBNZXJzZW5uZVR3aXN0ZXIoKTtcbiAgdmFyIHJhbmRvbU51bWJlciA9IG0ucmFuZG9tKCk7XG5cbiAgWW91IGNhbiBhbHNvIGNhbGwgdGhlIG90aGVyIGdlbnJhbmRfe2Zvb30oKSBtZXRob2RzIG9uIHRoZSBpbnN0YW5jZS5cblxuICBJZiB5b3Ugd2FudCB0byB1c2UgYSBzcGVjaWZpYyBzZWVkIGluIG9yZGVyIHRvIGdldCBhIHJlcGVhdGFibGUgcmFuZG9tXG4gIHNlcXVlbmNlLCBwYXNzIGFuIGludGVnZXIgaW50byB0aGUgY29uc3RydWN0b3I6XG5cbiAgdmFyIG0gPSBuZXcgTWVyc2VubmVUd2lzdGVyKDEyMyk7XG5cbiAgYW5kIHRoYXQgd2lsbCBhbHdheXMgcHJvZHVjZSB0aGUgc2FtZSByYW5kb20gc2VxdWVuY2UuXG5cbiAgU2VhbiBNY0N1bGxvdWdoIChiYW5rc2VhbkBnbWFpbC5jb20pXG4qL1xuXG4vKlxuICAgQSBDLXByb2dyYW0gZm9yIE1UMTk5MzcsIHdpdGggaW5pdGlhbGl6YXRpb24gaW1wcm92ZWQgMjAwMi8xLzI2LlxuICAgQ29kZWQgYnkgVGFrdWppIE5pc2hpbXVyYSBhbmQgTWFrb3RvIE1hdHN1bW90by5cblxuICAgQmVmb3JlIHVzaW5nLCBpbml0aWFsaXplIHRoZSBzdGF0ZSBieSB1c2luZyBpbml0X3NlZWQoc2VlZClcbiAgIG9yIGluaXRfYnlfYXJyYXkoaW5pdF9rZXksIGtleV9sZW5ndGgpLlxuXG4gICBDb3B5cmlnaHQgKEMpIDE5OTcgLSAyMDAyLCBNYWtvdG8gTWF0c3Vtb3RvIGFuZCBUYWt1amkgTmlzaGltdXJhLFxuICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuICAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnNcbiAgIGFyZSBtZXQ6XG5cbiAgICAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gICAgIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAgICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuICAgICAzLiBUaGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlXG4gICAgICAgIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlblxuICAgICAgICBwZXJtaXNzaW9uLlxuXG4gICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gICBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gICBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAgIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBPV05FUiBPUlxuICAgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsXG4gICBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sXG4gICBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAgIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAgIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gICBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAgIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG5cbiAgIEFueSBmZWVkYmFjayBpcyB2ZXJ5IHdlbGNvbWUuXG4gICBodHRwOi8vd3d3Lm1hdGguc2NpLmhpcm9zaGltYS11LmFjLmpwL35tLW1hdC9NVC9lbXQuaHRtbFxuICAgZW1haWw6IG0tbWF0IEAgbWF0aC5zY2kuaGlyb3NoaW1hLXUuYWMuanAgKHJlbW92ZSBzcGFjZSlcbiovXG5cbnZhciBNZXJzZW5uZVR3aXN0ZXIgPSBmdW5jdGlvbihzZWVkKSB7XG5cdGlmIChzZWVkID09IHVuZGVmaW5lZCkge1xuXHRcdHNlZWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblx0fVxuXG5cdC8qIFBlcmlvZCBwYXJhbWV0ZXJzICovXG5cdHRoaXMuTiA9IDYyNDtcblx0dGhpcy5NID0gMzk3O1xuXHR0aGlzLk1BVFJJWF9BID0gMHg5OTA4YjBkZjsgICAvKiBjb25zdGFudCB2ZWN0b3IgYSAqL1xuXHR0aGlzLlVQUEVSX01BU0sgPSAweDgwMDAwMDAwOyAvKiBtb3N0IHNpZ25pZmljYW50IHctciBiaXRzICovXG5cdHRoaXMuTE9XRVJfTUFTSyA9IDB4N2ZmZmZmZmY7IC8qIGxlYXN0IHNpZ25pZmljYW50IHIgYml0cyAqL1xuXG5cdHRoaXMubXQgPSBuZXcgQXJyYXkodGhpcy5OKTsgLyogdGhlIGFycmF5IGZvciB0aGUgc3RhdGUgdmVjdG9yICovXG5cdHRoaXMubXRpPXRoaXMuTisxOyAvKiBtdGk9PU4rMSBtZWFucyBtdFtOXSBpcyBub3QgaW5pdGlhbGl6ZWQgKi9cblxuXHRpZiAoc2VlZC5jb25zdHJ1Y3RvciA9PSBBcnJheSkge1xuXHRcdHRoaXMuaW5pdF9ieV9hcnJheShzZWVkLCBzZWVkLmxlbmd0aCk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0dGhpcy5pbml0X3NlZWQoc2VlZCk7XG5cdH1cbn1cblxuLyogaW5pdGlhbGl6ZXMgbXRbTl0gd2l0aCBhIHNlZWQgKi9cbi8qIG9yaWdpbiBuYW1lIGluaXRfZ2VucmFuZCAqL1xuTWVyc2VubmVUd2lzdGVyLnByb3RvdHlwZS5pbml0X3NlZWQgPSBmdW5jdGlvbihzKSB7XG5cdHRoaXMubXRbMF0gPSBzID4+PiAwO1xuXHRmb3IgKHRoaXMubXRpPTE7IHRoaXMubXRpPHRoaXMuTjsgdGhpcy5tdGkrKykge1xuXHRcdHZhciBzID0gdGhpcy5tdFt0aGlzLm10aS0xXSBeICh0aGlzLm10W3RoaXMubXRpLTFdID4+PiAzMCk7XG5cdFx0dGhpcy5tdFt0aGlzLm10aV0gPSAoKCgoKHMgJiAweGZmZmYwMDAwKSA+Pj4gMTYpICogMTgxMjQzMzI1MykgPDwgMTYpICsgKHMgJiAweDAwMDBmZmZmKSAqIDE4MTI0MzMyNTMpXG5cdFx0KyB0aGlzLm10aTtcblx0XHQvKiBTZWUgS251dGggVEFPQ1AgVm9sMi4gM3JkIEVkLiBQLjEwNiBmb3IgbXVsdGlwbGllci4gKi9cblx0XHQvKiBJbiB0aGUgcHJldmlvdXMgdmVyc2lvbnMsIE1TQnMgb2YgdGhlIHNlZWQgYWZmZWN0ICAgKi9cblx0XHQvKiBvbmx5IE1TQnMgb2YgdGhlIGFycmF5IG10W10uICAgICAgICAgICAgICAgICAgICAgICAgKi9cblx0XHQvKiAyMDAyLzAxLzA5IG1vZGlmaWVkIGJ5IE1ha290byBNYXRzdW1vdG8gICAgICAgICAgICAgKi9cblx0XHR0aGlzLm10W3RoaXMubXRpXSA+Pj49IDA7XG5cdFx0LyogZm9yID4zMiBiaXQgbWFjaGluZXMgKi9cblx0fVxufVxuXG4vKiBpbml0aWFsaXplIGJ5IGFuIGFycmF5IHdpdGggYXJyYXktbGVuZ3RoICovXG4vKiBpbml0X2tleSBpcyB0aGUgYXJyYXkgZm9yIGluaXRpYWxpemluZyBrZXlzICovXG4vKiBrZXlfbGVuZ3RoIGlzIGl0cyBsZW5ndGggKi9cbi8qIHNsaWdodCBjaGFuZ2UgZm9yIEMrKywgMjAwNC8yLzI2ICovXG5NZXJzZW5uZVR3aXN0ZXIucHJvdG90eXBlLmluaXRfYnlfYXJyYXkgPSBmdW5jdGlvbihpbml0X2tleSwga2V5X2xlbmd0aCkge1xuXHR2YXIgaSwgaiwgaztcblx0dGhpcy5pbml0X3NlZWQoMTk2NTAyMTgpO1xuXHRpPTE7IGo9MDtcblx0ayA9ICh0aGlzLk4+a2V5X2xlbmd0aCA/IHRoaXMuTiA6IGtleV9sZW5ndGgpO1xuXHRmb3IgKDsgazsgay0tKSB7XG5cdFx0dmFyIHMgPSB0aGlzLm10W2ktMV0gXiAodGhpcy5tdFtpLTFdID4+PiAzMClcblx0XHR0aGlzLm10W2ldID0gKHRoaXMubXRbaV0gXiAoKCgoKHMgJiAweGZmZmYwMDAwKSA+Pj4gMTYpICogMTY2NDUyNSkgPDwgMTYpICsgKChzICYgMHgwMDAwZmZmZikgKiAxNjY0NTI1KSkpXG5cdFx0KyBpbml0X2tleVtqXSArIGo7IC8qIG5vbiBsaW5lYXIgKi9cblx0XHR0aGlzLm10W2ldID4+Pj0gMDsgLyogZm9yIFdPUkRTSVpFID4gMzIgbWFjaGluZXMgKi9cblx0XHRpKys7IGorKztcblx0XHRpZiAoaT49dGhpcy5OKSB7IHRoaXMubXRbMF0gPSB0aGlzLm10W3RoaXMuTi0xXTsgaT0xOyB9XG5cdFx0aWYgKGo+PWtleV9sZW5ndGgpIGo9MDtcblx0fVxuXHRmb3IgKGs9dGhpcy5OLTE7IGs7IGstLSkge1xuXHRcdHZhciBzID0gdGhpcy5tdFtpLTFdIF4gKHRoaXMubXRbaS0xXSA+Pj4gMzApO1xuXHRcdHRoaXMubXRbaV0gPSAodGhpcy5tdFtpXSBeICgoKCgocyAmIDB4ZmZmZjAwMDApID4+PiAxNikgKiAxNTY2MDgzOTQxKSA8PCAxNikgKyAocyAmIDB4MDAwMGZmZmYpICogMTU2NjA4Mzk0MSkpXG5cdFx0LSBpOyAvKiBub24gbGluZWFyICovXG5cdFx0dGhpcy5tdFtpXSA+Pj49IDA7IC8qIGZvciBXT1JEU0laRSA+IDMyIG1hY2hpbmVzICovXG5cdFx0aSsrO1xuXHRcdGlmIChpPj10aGlzLk4pIHsgdGhpcy5tdFswXSA9IHRoaXMubXRbdGhpcy5OLTFdOyBpPTE7IH1cblx0fVxuXG5cdHRoaXMubXRbMF0gPSAweDgwMDAwMDAwOyAvKiBNU0IgaXMgMTsgYXNzdXJpbmcgbm9uLXplcm8gaW5pdGlhbCBhcnJheSAqL1xufVxuXG4vKiBnZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIG9uIFswLDB4ZmZmZmZmZmZdLWludGVydmFsICovXG4vKiBvcmlnaW4gbmFtZSBnZW5yYW5kX2ludDMyICovXG5NZXJzZW5uZVR3aXN0ZXIucHJvdG90eXBlLnJhbmRvbV9pbnQgPSBmdW5jdGlvbigpIHtcblx0dmFyIHk7XG5cdHZhciBtYWcwMSA9IG5ldyBBcnJheSgweDAsIHRoaXMuTUFUUklYX0EpO1xuXHQvKiBtYWcwMVt4XSA9IHggKiBNQVRSSVhfQSAgZm9yIHg9MCwxICovXG5cblx0aWYgKHRoaXMubXRpID49IHRoaXMuTikgeyAvKiBnZW5lcmF0ZSBOIHdvcmRzIGF0IG9uZSB0aW1lICovXG5cdFx0dmFyIGtrO1xuXG5cdFx0aWYgKHRoaXMubXRpID09IHRoaXMuTisxKSAgLyogaWYgaW5pdF9zZWVkKCkgaGFzIG5vdCBiZWVuIGNhbGxlZCwgKi9cblx0XHRcdHRoaXMuaW5pdF9zZWVkKDU0ODkpOyAgLyogYSBkZWZhdWx0IGluaXRpYWwgc2VlZCBpcyB1c2VkICovXG5cblx0XHRmb3IgKGtrPTA7a2s8dGhpcy5OLXRoaXMuTTtraysrKSB7XG5cdFx0XHR5ID0gKHRoaXMubXRba2tdJnRoaXMuVVBQRVJfTUFTSyl8KHRoaXMubXRba2srMV0mdGhpcy5MT1dFUl9NQVNLKTtcblx0XHRcdHRoaXMubXRba2tdID0gdGhpcy5tdFtrayt0aGlzLk1dIF4gKHkgPj4+IDEpIF4gbWFnMDFbeSAmIDB4MV07XG5cdFx0fVxuXHRcdGZvciAoO2trPHRoaXMuTi0xO2trKyspIHtcblx0XHRcdHkgPSAodGhpcy5tdFtra10mdGhpcy5VUFBFUl9NQVNLKXwodGhpcy5tdFtraysxXSZ0aGlzLkxPV0VSX01BU0spO1xuXHRcdFx0dGhpcy5tdFtra10gPSB0aGlzLm10W2trKyh0aGlzLk0tdGhpcy5OKV0gXiAoeSA+Pj4gMSkgXiBtYWcwMVt5ICYgMHgxXTtcblx0XHR9XG5cdFx0eSA9ICh0aGlzLm10W3RoaXMuTi0xXSZ0aGlzLlVQUEVSX01BU0spfCh0aGlzLm10WzBdJnRoaXMuTE9XRVJfTUFTSyk7XG5cdFx0dGhpcy5tdFt0aGlzLk4tMV0gPSB0aGlzLm10W3RoaXMuTS0xXSBeICh5ID4+PiAxKSBeIG1hZzAxW3kgJiAweDFdO1xuXG5cdFx0dGhpcy5tdGkgPSAwO1xuXHR9XG5cblx0eSA9IHRoaXMubXRbdGhpcy5tdGkrK107XG5cblx0LyogVGVtcGVyaW5nICovXG5cdHkgXj0gKHkgPj4+IDExKTtcblx0eSBePSAoeSA8PCA3KSAmIDB4OWQyYzU2ODA7XG5cdHkgXj0gKHkgPDwgMTUpICYgMHhlZmM2MDAwMDtcblx0eSBePSAoeSA+Pj4gMTgpO1xuXG5cdHJldHVybiB5ID4+PiAwO1xufVxuXG4vKiBnZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIG9uIFswLDB4N2ZmZmZmZmZdLWludGVydmFsICovXG4vKiBvcmlnaW4gbmFtZSBnZW5yYW5kX2ludDMxICovXG5NZXJzZW5uZVR3aXN0ZXIucHJvdG90eXBlLnJhbmRvbV9pbnQzMSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gKHRoaXMucmFuZG9tX2ludCgpPj4+MSk7XG59XG5cbi8qIGdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgb24gWzAsMV0tcmVhbC1pbnRlcnZhbCAqL1xuLyogb3JpZ2luIG5hbWUgZ2VucmFuZF9yZWFsMSAqL1xuTWVyc2VubmVUd2lzdGVyLnByb3RvdHlwZS5yYW5kb21faW5jbCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5yYW5kb21faW50KCkqKDEuMC80Mjk0OTY3Mjk1LjApO1xuXHQvKiBkaXZpZGVkIGJ5IDJeMzItMSAqL1xufVxuXG4vKiBnZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIG9uIFswLDEpLXJlYWwtaW50ZXJ2YWwgKi9cbk1lcnNlbm5lVHdpc3Rlci5wcm90b3R5cGUucmFuZG9tID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLnJhbmRvbV9pbnQoKSooMS4wLzQyOTQ5NjcyOTYuMCk7XG5cdC8qIGRpdmlkZWQgYnkgMl4zMiAqL1xufVxuXG4vKiBnZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIG9uICgwLDEpLXJlYWwtaW50ZXJ2YWwgKi9cbi8qIG9yaWdpbiBuYW1lIGdlbnJhbmRfcmVhbDMgKi9cbk1lcnNlbm5lVHdpc3Rlci5wcm90b3R5cGUucmFuZG9tX2V4Y2wgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuICh0aGlzLnJhbmRvbV9pbnQoKSArIDAuNSkqKDEuMC80Mjk0OTY3Mjk2LjApO1xuXHQvKiBkaXZpZGVkIGJ5IDJeMzIgKi9cbn1cblxuLyogZ2VuZXJhdGVzIGEgcmFuZG9tIG51bWJlciBvbiBbMCwxKSB3aXRoIDUzLWJpdCByZXNvbHV0aW9uKi9cbi8qIG9yaWdpbiBuYW1lIGdlbnJhbmRfcmVzNTMgKi9cbk1lcnNlbm5lVHdpc3Rlci5wcm90b3R5cGUucmFuZG9tX2xvbmcgPSBmdW5jdGlvbigpIHtcblx0dmFyIGE9dGhpcy5yYW5kb21faW50KCk+Pj41LCBiPXRoaXMucmFuZG9tX2ludCgpPj4+Njtcblx0cmV0dXJuKGEqNjcxMDg4NjQuMCtiKSooMS4wLzkwMDcxOTkyNTQ3NDA5OTIuMCk7XG59XG5cbi8qIFRoZXNlIHJlYWwgdmVyc2lvbnMgYXJlIGR1ZSB0byBJc2FrdSBXYWRhLCAyMDAyLzAxLzA5IGFkZGVkICovXG5cbm1vZHVsZS5leHBvcnRzID0gTWVyc2VubmVUd2lzdGVyO1xuIiwiLyogTUlUIGxpY2Vuc2UgKi9cbnZhciBjbG9uZSA9IHJlcXVpcmUoJ2Nsb25lJyk7XG52YXIgY29udmVydCA9IHJlcXVpcmUoJ2NvbG9yLWNvbnZlcnQnKTtcbnZhciBzdHJpbmcgPSByZXF1aXJlKCdjb2xvci1zdHJpbmcnKTtcblxudmFyIENvbG9yID0gZnVuY3Rpb24gKG9iaikge1xuXHRpZiAob2JqIGluc3RhbmNlb2YgQ29sb3IpIHtcblx0XHRyZXR1cm4gb2JqO1xuXHR9XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb2xvcikpIHtcblx0XHRyZXR1cm4gbmV3IENvbG9yKG9iaik7XG5cdH1cblxuXHR0aGlzLnZhbHVlcyA9IHtcblx0XHRyZ2I6IFswLCAwLCAwXSxcblx0XHRoc2w6IFswLCAwLCAwXSxcblx0XHRoc3Y6IFswLCAwLCAwXSxcblx0XHRod2I6IFswLCAwLCAwXSxcblx0XHRjbXlrOiBbMCwgMCwgMCwgMF0sXG5cdFx0YWxwaGE6IDFcblx0fTtcblxuXHQvLyBwYXJzZSBDb2xvcigpIGFyZ3VtZW50XG5cdHZhciB2YWxzO1xuXHRpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcblx0XHR2YWxzID0gc3RyaW5nLmdldFJnYmEob2JqKTtcblx0XHRpZiAodmFscykge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscyA9IHN0cmluZy5nZXRIc2xhKG9iaikpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCB2YWxzKTtcblx0XHR9IGVsc2UgaWYgKHZhbHMgPSBzdHJpbmcuZ2V0SHdiKG9iaikpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdod2InLCB2YWxzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcGFyc2UgY29sb3IgZnJvbSBzdHJpbmcgXCInICsgb2JqICsgJ1wiJyk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG5cdFx0dmFscyA9IG9iajtcblx0XHRpZiAodmFscy5yICE9PSB1bmRlZmluZWQgfHwgdmFscy5yZWQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscy5sICE9PSB1bmRlZmluZWQgfHwgdmFscy5saWdodG5lc3MgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscy52ICE9PSB1bmRlZmluZWQgfHwgdmFscy52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHN2JywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzLncgIT09IHVuZGVmaW5lZCB8fCB2YWxzLndoaXRlbmVzcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzLmMgIT09IHVuZGVmaW5lZCB8fCB2YWxzLmN5YW4gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2NteWsnLCB2YWxzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcGFyc2UgY29sb3IgZnJvbSBvYmplY3QgJyArIEpTT04uc3RyaW5naWZ5KG9iaikpO1xuXHRcdH1cblx0fVxufTtcblxuQ29sb3IucHJvdG90eXBlID0ge1xuXHRyZ2I6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgncmdiJywgYXJndW1lbnRzKTtcblx0fSxcblx0aHNsOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0U3BhY2UoJ2hzbCcsIGFyZ3VtZW50cyk7XG5cdH0sXG5cdGhzdjogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdoc3YnLCBhcmd1bWVudHMpO1xuXHR9LFxuXHRod2I6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgnaHdiJywgYXJndW1lbnRzKTtcblx0fSxcblx0Y215azogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdjbXlrJywgYXJndW1lbnRzKTtcblx0fSxcblxuXHRyZ2JBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5yZ2I7XG5cdH0sXG5cdGhzbEFycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmhzbDtcblx0fSxcblx0aHN2QXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZXMuaHN2O1xuXHR9LFxuXHRod2JBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzLnZhbHVlcy5hbHBoYSAhPT0gMSkge1xuXHRcdFx0cmV0dXJuIHRoaXMudmFsdWVzLmh3Yi5jb25jYXQoW3RoaXMudmFsdWVzLmFscGhhXSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5od2I7XG5cdH0sXG5cdGNteWtBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5jbXlrO1xuXHR9LFxuXHRyZ2JhQXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gdGhpcy52YWx1ZXMucmdiO1xuXHRcdHJldHVybiByZ2IuY29uY2F0KFt0aGlzLnZhbHVlcy5hbHBoYV0pO1xuXHR9LFxuXHRyZ2JhQXJyYXlOb3JtYWxpemVkOiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHJnYiA9IHRoaXMudmFsdWVzLnJnYjtcblx0XHR2YXIgZ2xSZ2JhID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHRcdGdsUmdiYVtpXSA9IHJnYltpXSAvIDI1NTtcblx0XHR9XG5cdFx0Z2xSZ2JhLnB1c2godGhpcy52YWx1ZXMuYWxwaGEpO1xuXHRcdHJldHVybiBnbFJnYmE7XG5cdH0sXG5cdGhzbGFBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciBoc2wgPSB0aGlzLnZhbHVlcy5oc2w7XG5cdFx0cmV0dXJuIGhzbC5jb25jYXQoW3RoaXMudmFsdWVzLmFscGhhXSk7XG5cdH0sXG5cdGFscGhhOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0aWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy52YWx1ZXMuYWxwaGE7XG5cdFx0fVxuXHRcdHRoaXMuc2V0VmFsdWVzKCdhbHBoYScsIHZhbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVkOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgncmdiJywgMCwgdmFsKTtcblx0fSxcblx0Z3JlZW46IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdyZ2InLCAxLCB2YWwpO1xuXHR9LFxuXHRibHVlOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgncmdiJywgMiwgdmFsKTtcblx0fSxcblx0aHVlOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0aWYgKHZhbCkge1xuXHRcdFx0dmFsICU9IDM2MDtcblx0XHRcdHZhbCA9IHZhbCA8IDAgPyAzNjAgKyB2YWwgOiB2YWw7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzbCcsIDAsIHZhbCk7XG5cdH0sXG5cdHNhdHVyYXRpb246IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdoc2wnLCAxLCB2YWwpO1xuXHR9LFxuXHRsaWdodG5lc3M6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdoc2wnLCAyLCB2YWwpO1xuXHR9LFxuXHRzYXR1cmF0aW9udjogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzdicsIDEsIHZhbCk7XG5cdH0sXG5cdHdoaXRlbmVzczogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2h3YicsIDEsIHZhbCk7XG5cdH0sXG5cdGJsYWNrbmVzczogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2h3YicsIDIsIHZhbCk7XG5cdH0sXG5cdHZhbHVlOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHN2JywgMiwgdmFsKTtcblx0fSxcblx0Y3lhbjogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2NteWsnLCAwLCB2YWwpO1xuXHR9LFxuXHRtYWdlbnRhOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDEsIHZhbCk7XG5cdH0sXG5cdHllbGxvdzogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2NteWsnLCAyLCB2YWwpO1xuXHR9LFxuXHRibGFjazogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2NteWsnLCAzLCB2YWwpO1xuXHR9LFxuXG5cdGhleFN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBzdHJpbmcuaGV4U3RyaW5nKHRoaXMudmFsdWVzLnJnYik7XG5cdH0sXG5cdHJnYlN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBzdHJpbmcucmdiU3RyaW5nKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRyZ2JhU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZ2JhU3RyaW5nKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRwZXJjZW50U3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5wZXJjZW50U3RyaW5nKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRoc2xTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gc3RyaW5nLmhzbFN0cmluZyh0aGlzLnZhbHVlcy5oc2wsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0aHNsYVN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBzdHJpbmcuaHNsYVN0cmluZyh0aGlzLnZhbHVlcy5oc2wsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0aHdiU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5od2JTdHJpbmcodGhpcy52YWx1ZXMuaHdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cdGtleXdvcmQ6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gc3RyaW5nLmtleXdvcmQodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cblx0cmdiTnVtYmVyOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICh0aGlzLnZhbHVlcy5yZ2JbMF0gPDwgMTYpIHwgKHRoaXMudmFsdWVzLnJnYlsxXSA8PCA4KSB8IHRoaXMudmFsdWVzLnJnYlsyXTtcblx0fSxcblxuXHRsdW1pbm9zaXR5OiBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvV0NBRzIwLyNyZWxhdGl2ZWx1bWluYW5jZWRlZlxuXHRcdHZhciByZ2IgPSB0aGlzLnZhbHVlcy5yZ2I7XG5cdFx0dmFyIGx1bSA9IFtdO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgY2hhbiA9IHJnYltpXSAvIDI1NTtcblx0XHRcdGx1bVtpXSA9IChjaGFuIDw9IDAuMDM5MjgpID8gY2hhbiAvIDEyLjkyIDogTWF0aC5wb3coKChjaGFuICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO1xuXHRcdH1cblx0XHRyZXR1cm4gMC4yMTI2ICogbHVtWzBdICsgMC43MTUyICogbHVtWzFdICsgMC4wNzIyICogbHVtWzJdO1xuXHR9LFxuXG5cdGNvbnRyYXN0OiBmdW5jdGlvbiAoY29sb3IyKSB7XG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvV0NBRzIwLyNjb250cmFzdC1yYXRpb2RlZlxuXHRcdHZhciBsdW0xID0gdGhpcy5sdW1pbm9zaXR5KCk7XG5cdFx0dmFyIGx1bTIgPSBjb2xvcjIubHVtaW5vc2l0eSgpO1xuXHRcdGlmIChsdW0xID4gbHVtMikge1xuXHRcdFx0cmV0dXJuIChsdW0xICsgMC4wNSkgLyAobHVtMiArIDAuMDUpO1xuXHRcdH1cblx0XHRyZXR1cm4gKGx1bTIgKyAwLjA1KSAvIChsdW0xICsgMC4wNSk7XG5cdH0sXG5cblx0bGV2ZWw6IGZ1bmN0aW9uIChjb2xvcjIpIHtcblx0XHR2YXIgY29udHJhc3RSYXRpbyA9IHRoaXMuY29udHJhc3QoY29sb3IyKTtcblx0XHRpZiAoY29udHJhc3RSYXRpbyA+PSA3LjEpIHtcblx0XHRcdHJldHVybiAnQUFBJztcblx0XHR9XG5cblx0XHRyZXR1cm4gKGNvbnRyYXN0UmF0aW8gPj0gNC41KSA/ICdBQScgOiAnJztcblx0fSxcblxuXHRkYXJrOiBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gWUlRIGVxdWF0aW9uIGZyb20gaHR0cDovLzI0d2F5cy5vcmcvMjAxMC9jYWxjdWxhdGluZy1jb2xvci1jb250cmFzdFxuXHRcdHZhciByZ2IgPSB0aGlzLnZhbHVlcy5yZ2I7XG5cdFx0dmFyIHlpcSA9IChyZ2JbMF0gKiAyOTkgKyByZ2JbMV0gKiA1ODcgKyByZ2JbMl0gKiAxMTQpIC8gMTAwMDtcblx0XHRyZXR1cm4geWlxIDwgMTI4O1xuXHR9LFxuXG5cdGxpZ2h0OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICF0aGlzLmRhcmsoKTtcblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHRcdHJnYltpXSA9IDI1NSAtIHRoaXMudmFsdWVzLnJnYltpXTtcblx0XHR9XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHJnYik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0bGlnaHRlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dGhpcy52YWx1ZXMuaHNsWzJdICs9IHRoaXMudmFsdWVzLmhzbFsyXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCB0aGlzLnZhbHVlcy5oc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGRhcmtlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dGhpcy52YWx1ZXMuaHNsWzJdIC09IHRoaXMudmFsdWVzLmhzbFsyXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCB0aGlzLnZhbHVlcy5oc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHNhdHVyYXRlOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR0aGlzLnZhbHVlcy5oc2xbMV0gKz0gdGhpcy52YWx1ZXMuaHNsWzFdICogcmF0aW87XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIHRoaXMudmFsdWVzLmhzbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0ZGVzYXR1cmF0ZTogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dGhpcy52YWx1ZXMuaHNsWzFdIC09IHRoaXMudmFsdWVzLmhzbFsxXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCB0aGlzLnZhbHVlcy5oc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdoaXRlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dGhpcy52YWx1ZXMuaHdiWzFdICs9IHRoaXMudmFsdWVzLmh3YlsxXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdod2InLCB0aGlzLnZhbHVlcy5od2IpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGJsYWNrZW46IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHRoaXMudmFsdWVzLmh3YlsyXSArPSB0aGlzLnZhbHVlcy5od2JbMl0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgdGhpcy52YWx1ZXMuaHdiKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRncmV5c2NhbGU6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gdGhpcy52YWx1ZXMucmdiO1xuXHRcdC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR3JheXNjYWxlI0NvbnZlcnRpbmdfY29sb3JfdG9fZ3JheXNjYWxlXG5cdFx0dmFyIHZhbCA9IHJnYlswXSAqIDAuMyArIHJnYlsxXSAqIDAuNTkgKyByZ2JbMl0gKiAwLjExO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdyZ2InLCBbdmFsLCB2YWwsIHZhbF0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsZWFyZXI6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdhbHBoYScsIHRoaXMudmFsdWVzLmFscGhhIC0gKHRoaXMudmFsdWVzLmFscGhhICogcmF0aW8pKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRvcGFxdWVyOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR0aGlzLnNldFZhbHVlcygnYWxwaGEnLCB0aGlzLnZhbHVlcy5hbHBoYSArICh0aGlzLnZhbHVlcy5hbHBoYSAqIHJhdGlvKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cm90YXRlOiBmdW5jdGlvbiAoZGVncmVlcykge1xuXHRcdHZhciBodWUgPSB0aGlzLnZhbHVlcy5oc2xbMF07XG5cdFx0aHVlID0gKGh1ZSArIGRlZ3JlZXMpICUgMzYwO1xuXHRcdGh1ZSA9IGh1ZSA8IDAgPyAzNjAgKyBodWUgOiBodWU7XG5cdFx0dGhpcy52YWx1ZXMuaHNsWzBdID0gaHVlO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCB0aGlzLnZhbHVlcy5oc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBQb3J0ZWQgZnJvbSBzYXNzIGltcGxlbWVudGF0aW9uIGluIENcblx0ICogaHR0cHM6Ly9naXRodWIuY29tL3Nhc3MvbGlic2Fzcy9ibG9iLzBlNmI0YTI4NTAwOTIzNTZhYTNlY2UwN2M2YjI0OWYwMjIxY2FjZWQvZnVuY3Rpb25zLmNwcCNMMjA5XG5cdCAqL1xuXHRtaXg6IGZ1bmN0aW9uIChtaXhpbkNvbG9yLCB3ZWlnaHQpIHtcblx0XHR2YXIgY29sb3IxID0gdGhpcztcblx0XHR2YXIgY29sb3IyID0gbWl4aW5Db2xvcjtcblx0XHR2YXIgcCA9IHdlaWdodCA9PT0gdW5kZWZpbmVkID8gMC41IDogd2VpZ2h0O1xuXG5cdFx0dmFyIHcgPSAyICogcCAtIDE7XG5cdFx0dmFyIGEgPSBjb2xvcjEuYWxwaGEoKSAtIGNvbG9yMi5hbHBoYSgpO1xuXG5cdFx0dmFyIHcxID0gKCgodyAqIGEgPT09IC0xKSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyLjA7XG5cdFx0dmFyIHcyID0gMSAtIHcxO1xuXG5cdFx0cmV0dXJuIHRoaXNcblx0XHRcdC5yZ2IoXG5cdFx0XHRcdHcxICogY29sb3IxLnJlZCgpICsgdzIgKiBjb2xvcjIucmVkKCksXG5cdFx0XHRcdHcxICogY29sb3IxLmdyZWVuKCkgKyB3MiAqIGNvbG9yMi5ncmVlbigpLFxuXHRcdFx0XHR3MSAqIGNvbG9yMS5ibHVlKCkgKyB3MiAqIGNvbG9yMi5ibHVlKClcblx0XHRcdClcblx0XHRcdC5hbHBoYShjb2xvcjEuYWxwaGEoKSAqIHAgKyBjb2xvcjIuYWxwaGEoKSAqICgxIC0gcCkpO1xuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnJnYigpO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGNvbCA9IG5ldyBDb2xvcigpO1xuXHRcdGNvbC52YWx1ZXMgPSBjbG9uZSh0aGlzLnZhbHVlcyk7XG5cdFx0cmV0dXJuIGNvbDtcblx0fVxufTtcblxuQ29sb3IucHJvdG90eXBlLmdldFZhbHVlcyA9IGZ1bmN0aW9uIChzcGFjZSkge1xuXHR2YXIgdmFscyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHR2YWxzW3NwYWNlLmNoYXJBdChpKV0gPSB0aGlzLnZhbHVlc1tzcGFjZV1baV07XG5cdH1cblxuXHRpZiAodGhpcy52YWx1ZXMuYWxwaGEgIT09IDEpIHtcblx0XHR2YWxzLmEgPSB0aGlzLnZhbHVlcy5hbHBoYTtcblx0fVxuXG5cdC8vIHtyOiAyNTUsIGc6IDI1NSwgYjogMjU1LCBhOiAwLjR9XG5cdHJldHVybiB2YWxzO1xufTtcblxuQ29sb3IucHJvdG90eXBlLnNldFZhbHVlcyA9IGZ1bmN0aW9uIChzcGFjZSwgdmFscykge1xuXHR2YXIgc3BhY2VzID0ge1xuXHRcdHJnYjogWydyZWQnLCAnZ3JlZW4nLCAnYmx1ZSddLFxuXHRcdGhzbDogWydodWUnLCAnc2F0dXJhdGlvbicsICdsaWdodG5lc3MnXSxcblx0XHRoc3Y6IFsnaHVlJywgJ3NhdHVyYXRpb24nLCAndmFsdWUnXSxcblx0XHRod2I6IFsnaHVlJywgJ3doaXRlbmVzcycsICdibGFja25lc3MnXSxcblx0XHRjbXlrOiBbJ2N5YW4nLCAnbWFnZW50YScsICd5ZWxsb3cnLCAnYmxhY2snXVxuXHR9O1xuXG5cdHZhciBtYXhlcyA9IHtcblx0XHRyZ2I6IFsyNTUsIDI1NSwgMjU1XSxcblx0XHRoc2w6IFszNjAsIDEwMCwgMTAwXSxcblx0XHRoc3Y6IFszNjAsIDEwMCwgMTAwXSxcblx0XHRod2I6IFszNjAsIDEwMCwgMTAwXSxcblx0XHRjbXlrOiBbMTAwLCAxMDAsIDEwMCwgMTAwXVxuXHR9O1xuXG5cdHZhciBpO1xuXHR2YXIgYWxwaGEgPSAxO1xuXHRpZiAoc3BhY2UgPT09ICdhbHBoYScpIHtcblx0XHRhbHBoYSA9IHZhbHM7XG5cdH0gZWxzZSBpZiAodmFscy5sZW5ndGgpIHtcblx0XHQvLyBbMTAsIDEwLCAxMF1cblx0XHR0aGlzLnZhbHVlc1tzcGFjZV0gPSB2YWxzLnNsaWNlKDAsIHNwYWNlLmxlbmd0aCk7XG5cdFx0YWxwaGEgPSB2YWxzW3NwYWNlLmxlbmd0aF07XG5cdH0gZWxzZSBpZiAodmFsc1tzcGFjZS5jaGFyQXQoMCldICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyB7cjogMTAsIGc6IDEwLCBiOiAxMH1cblx0XHRmb3IgKGkgPSAwOyBpIDwgc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRoaXMudmFsdWVzW3NwYWNlXVtpXSA9IHZhbHNbc3BhY2UuY2hhckF0KGkpXTtcblx0XHR9XG5cblx0XHRhbHBoYSA9IHZhbHMuYTtcblx0fSBlbHNlIGlmICh2YWxzW3NwYWNlc1tzcGFjZV1bMF1dICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyB7cmVkOiAxMCwgZ3JlZW46IDEwLCBibHVlOiAxMH1cblx0XHR2YXIgY2hhbnMgPSBzcGFjZXNbc3BhY2VdO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IHNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0aGlzLnZhbHVlc1tzcGFjZV1baV0gPSB2YWxzW2NoYW5zW2ldXTtcblx0XHR9XG5cblx0XHRhbHBoYSA9IHZhbHMuYWxwaGE7XG5cdH1cblxuXHR0aGlzLnZhbHVlcy5hbHBoYSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIChhbHBoYSA9PT0gdW5kZWZpbmVkID8gdGhpcy52YWx1ZXMuYWxwaGEgOiBhbHBoYSkpKTtcblxuXHRpZiAoc3BhY2UgPT09ICdhbHBoYScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgY2FwcGVkO1xuXG5cdC8vIGNhcCB2YWx1ZXMgb2YgdGhlIHNwYWNlIHByaW9yIGNvbnZlcnRpbmcgYWxsIHZhbHVlc1xuXHRmb3IgKGkgPSAwOyBpIDwgc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRjYXBwZWQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihtYXhlc1tzcGFjZV1baV0sIHRoaXMudmFsdWVzW3NwYWNlXVtpXSkpO1xuXHRcdHRoaXMudmFsdWVzW3NwYWNlXVtpXSA9IE1hdGgucm91bmQoY2FwcGVkKTtcblx0fVxuXG5cdC8vIGNvbnZlcnQgdG8gYWxsIHRoZSBvdGhlciBjb2xvciBzcGFjZXNcblx0Zm9yICh2YXIgc25hbWUgaW4gc3BhY2VzKSB7XG5cdFx0aWYgKHNuYW1lICE9PSBzcGFjZSkge1xuXHRcdFx0dGhpcy52YWx1ZXNbc25hbWVdID0gY29udmVydFtzcGFjZV1bc25hbWVdKHRoaXMudmFsdWVzW3NwYWNlXSk7XG5cdFx0fVxuXG5cdFx0Ly8gY2FwIHZhbHVlc1xuXHRcdGZvciAoaSA9IDA7IGkgPCBzbmFtZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2FwcGVkID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obWF4ZXNbc25hbWVdW2ldLCB0aGlzLnZhbHVlc1tzbmFtZV1baV0pKTtcblx0XHRcdHRoaXMudmFsdWVzW3NuYW1lXVtpXSA9IE1hdGgucm91bmQoY2FwcGVkKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG5cbkNvbG9yLnByb3RvdHlwZS5zZXRTcGFjZSA9IGZ1bmN0aW9uIChzcGFjZSwgYXJncykge1xuXHR2YXIgdmFscyA9IGFyZ3NbMF07XG5cblx0aWYgKHZhbHMgPT09IHVuZGVmaW5lZCkge1xuXHRcdC8vIGNvbG9yLnJnYigpXG5cdFx0cmV0dXJuIHRoaXMuZ2V0VmFsdWVzKHNwYWNlKTtcblx0fVxuXG5cdC8vIGNvbG9yLnJnYigxMCwgMTAsIDEwKVxuXHRpZiAodHlwZW9mIHZhbHMgPT09ICdudW1iZXInKSB7XG5cdFx0dmFscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpO1xuXHR9XG5cblx0dGhpcy5zZXRWYWx1ZXMoc3BhY2UsIHZhbHMpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbkNvbG9yLnByb3RvdHlwZS5zZXRDaGFubmVsID0gZnVuY3Rpb24gKHNwYWNlLCBpbmRleCwgdmFsKSB7XG5cdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdC8vIGNvbG9yLnJlZCgpXG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzW3NwYWNlXVtpbmRleF07XG5cdH0gZWxzZSBpZiAodmFsID09PSB0aGlzLnZhbHVlc1tzcGFjZV1baW5kZXhdKSB7XG5cdFx0Ly8gY29sb3IucmVkKGNvbG9yLnJlZCgpKVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0Ly8gY29sb3IucmVkKDEwMClcblx0dGhpcy52YWx1ZXNbc3BhY2VdW2luZGV4XSA9IHZhbDtcblx0dGhpcy5zZXRWYWx1ZXMoc3BhY2UsIHRoaXMudmFsdWVzW3NwYWNlXSk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbG9yO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNvbnN0IFJlY2VpdmUgPSAoeyBjbGFzc05hbWUsIHNpemUsIGNvbG9yIH0pID0+IChcbiAgPHN2Z1xuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgIHdpZHRoPXtzaXplfVxuICAgIGhlaWdodD17c2l6ZX1cbiAgICB2aWV3Qm94PVwiMCAwIDI4IDI4XCJcbiAgICBmaWxsPVwibm9uZVwiXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gID5cbiAgICA8cmVjdCB4PVwiMC41XCIgeT1cIjAuNVwiIHdpZHRoPVwiMjdcIiBoZWlnaHQ9XCIyN1wiIHJ4PVwiMTMuNVwiIHN0cm9rZT17Y29sb3J9IC8+XG4gICAgPHBhdGhcbiAgICAgIGQ9XCJNMTQuMzQ2NSAxNy4zNjExQzE0LjM2NjEgMTcuMzQwMiAxNC4zODQ2IDE3LjMxODEgMTQuNDAxOCAxNy4yOTUyTDE3LjU5NyAxNC4wOTk5QzE3Ljc5NjEgMTMuOTA2MyAxNy44NzU2IDEzLjYyMDYgMTcuODA1IDEzLjM1MkMxNy43MzQ0IDEzLjA4MzQgMTcuNTI0NiAxMi44NzM3IDE3LjI1NjEgMTIuODAzMUMxNi45ODc1IDEyLjczMjUgMTYuNzAxNyAxMi44MTIgMTYuNTA4MiAxMy4wMTExTDE0LjU1NTkgMTQuOTYzM0wxNC41NTU5IDcuMjU1OThDMTQuNTYxNiA2Ljk3NzIxIDE0LjQxNjEgNi43MTcxNSAxNC4xNzU2IDYuNTc2MUMxMy45MzUxIDYuNDM1MDUgMTMuNjM3MSA2LjQzNTA1IDEzLjM5NjYgNi41NzYxQzEzLjE1NjEgNi43MTcxNSAxMy4wMTA2IDYuOTc3MjEgMTMuMDE2MyA3LjI1NTk4TDEzLjAxNjMgMTQuOTYzM0wxMS4wNjQgMTMuMDExMUMxMC44NzA1IDEyLjgxMiAxMC41ODQ3IDEyLjczMjUgMTAuMzE2MSAxMi44MDMxQzEwLjA0NzYgMTIuODczNyA5LjgzNzgyIDEzLjA4MzQgOS43NjcyMSAxMy4zNTJDOS42OTY2MSAxMy42MjA2IDkuNzc2MDggMTMuOTA2MyA5Ljk3NTE5IDE0LjA5OTlMMTMuMTcyNiAxNy4yOTczQzEzLjMwOTMgMTcuNDc3OSAxMy41MTg2IDE3LjU4OTEgMTMuNzQ0NyAxNy42MDE0QzEzLjk3MDkgMTcuNjEzNyAxNC4xOTEgMTcuNTI1OCAxNC4zNDY1IDE3LjM2MTFaXCJcbiAgICAgIGZpbGw9e2NvbG9yfVxuICAgIC8+XG4gICAgPHJlY3RcbiAgICAgIHg9XCI3Ljg3NVwiXG4gICAgICB5PVwiMTkuMjVcIlxuICAgICAgd2lkdGg9XCIxMi4yNVwiXG4gICAgICBoZWlnaHQ9XCIxLjc1XCJcbiAgICAgIHJ4PVwiMC44NzVcIlxuICAgICAgZmlsbD17Y29sb3J9XG4gICAgLz5cbiAgPC9zdmc+XG4pO1xuXG5SZWNlaXZlLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiB1bmRlZmluZWQsXG59O1xuXG5SZWNlaXZlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgY2xhc3NOYW1lXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBpY29uIHNob3VsZCBhZGhlcmUgdG8gOHB4IGdyaWQuIGUuZzogOCwgMTYsIDI0LCAzMiwgNDAgYW5kIGlzIHJlcXVpcmVkXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBDb2xvciBvZiB0aGUgaWNvbiBzaG91bGQgYmUgYSB2YWxpZCBkZXNpZ24gc3lzdGVtIGNvbG9yIGFuZCBpcyByZXF1aXJlZFxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlY2VpdmU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgSW50ZXJhY3Rpb24gPSAoeyBjbGFzc05hbWUsIHNpemUsIGNvbG9yIH0pID0+IChcbiAgPHN2Z1xuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgIHdpZHRoPXtzaXplfVxuICAgIGhlaWdodD17c2l6ZX1cbiAgICB2aWV3Qm94PVwiMCAwIDMwIDMwXCJcbiAgICBmaWxsPVwibm9uZVwiXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gID5cbiAgICA8cGF0aFxuICAgICAgZmlsbFJ1bGU9XCJldmVub2RkXCJcbiAgICAgIGNsaXBSdWxlPVwiZXZlbm9kZFwiXG4gICAgICBkPVwiTTE1IDI5QzIyLjczMiAyOSAyOSAyMi43MzIgMjkgMTVDMjkgNy4yNjgwMSAyMi43MzIgMSAxNSAxQzcuMjY4MDEgMSAxIDcuMjY4MDEgMSAxNUMxIDIyLjczMiA3LjI2ODAxIDI5IDE1IDI5WlwiXG4gICAgICBzdHJva2U9e2NvbG9yfVxuICAgIC8+XG4gICAgPHBhdGhcbiAgICAgIGQ9XCJNMTguODg4OSAxOC42NUMxOC44ODg5IDE4Ljg0MzMgMTguNzMyMiAxOSAxOC41Mzg5IDE5SDExLjQ2MTFDMTEuMjY3OCAxOSAxMS4xMTExIDE4Ljg0MzMgMTEuMTExMSAxOC42NVYxNy40NjIxQzExLjExMTEgMTcuMTQ3OSAxMC43MjkyIDE2Ljk5MjggMTAuNTEwMiAxNy4yMTgxTDguMjM3MiAxOS41NTZDOC4xMDUxMyAxOS42OTE5IDguMTA1MTMgMTkuOTA4MSA4LjIzNzIgMjAuMDQ0TDEwLjUxMDIgMjIuMzgxOUMxMC43MjkyIDIyLjYwNzIgMTEuMTExMSAyMi40NTIxIDExLjExMTEgMjIuMTM3OVYyMC45NUMxMS4xMTExIDIwLjc1NjcgMTEuMjY3OCAyMC42IDExLjQ2MTEgMjAuNkgyMC4wOTQ0QzIwLjI4NzcgMjAuNiAyMC40NDQ0IDIwLjQ0MzMgMjAuNDQ0NCAyMC4yNVYxNi4xNUMyMC40NDQ0IDE1Ljk1NjcgMjAuMjg3NyAxNS44IDIwLjA5NDQgMTUuOEgxOS4yMzg5QzE5LjA0NTYgMTUuOCAxOC44ODg5IDE1Ljk1NjcgMTguODg4OSAxNi4xNVYxOC42NVpNMTEuMTExMSAxMi4zNUMxMS4xMTExIDEyLjE1NjcgMTEuMjY3OCAxMiAxMS40NjExIDEySDE4LjUzODlDMTguNzMyMiAxMiAxOC44ODg5IDEyLjE1NjcgMTguODg4OSAxMi4zNVYxMy41Mzc5QzE4Ljg4ODkgMTMuODUyMSAxOS4yNzA4IDE0LjAwNzIgMTkuNDg5OCAxMy43ODE5TDIxLjc2MjggMTEuNDQ0QzIxLjg5NDkgMTEuMzA4MSAyMS44OTQ5IDExLjA5MTkgMjEuNzYyOCAxMC45NTZMMTkuNDg5OCA4LjYxODEyQzE5LjI3MDggOC4zOTI4NCAxOC44ODg5IDguNTQ3OSAxOC44ODg5IDguODYyMVYxMC4wNUMxOC44ODg5IDEwLjI0MzMgMTguNzMyMiAxMC40IDE4LjUzODkgMTAuNEg5LjkwNTU2QzkuNzEyMjYgMTAuNCA5LjU1NTU2IDEwLjU1NjcgOS41NTU1NiAxMC43NVYxNC44NUM5LjU1NTU2IDE1LjA0MzMgOS43MTIyNiAxNS4yIDkuOTA1NTYgMTUuMkgxMC43NjExQzEwLjk1NDQgMTUuMiAxMS4xMTExIDE1LjA0MzMgMTEuMTExMSAxNC44NVYxMi4zNVpcIlxuICAgICAgZmlsbD17Y29sb3J9XG4gICAgLz5cbiAgPC9zdmc+XG4pO1xuXG5JbnRlcmFjdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogdW5kZWZpbmVkLFxufTtcblxuSW50ZXJhY3Rpb24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQWRkaXRpb25hbCBjbGFzc05hbWVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIGljb24gc2hvdWxkIGFkaGVyZSB0byA4cHggZ3JpZC4gZS5nOiA4LCAxNiwgMjQsIDMyLCA0MFxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQ29sb3Igb2YgdGhlIGljb24gc2hvdWxkIGJlIGEgdmFsaWQgZGVzaWduIHN5c3RlbSBjb2xvciBhbmQgaXMgcmVxdWlyZWRcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmFjdGlvbjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jb25zdCBBcHByb3ZlID0gKHsgY2xhc3NOYW1lLCBzaXplLCBjb2xvciB9KSA9PiAoXG4gIDxzdmdcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICB3aWR0aD17c2l6ZX1cbiAgICBoZWlnaHQ9e3NpemV9XG4gICAgdmlld0JveD1cIjAgMCAzMCAzMFwiXG4gICAgZmlsbD1cIm5vbmVcIlxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICA+XG4gICAgPHBhdGhcbiAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgZD1cIk0xNSAyOUMyMi43MzIgMjkgMjkgMjIuNzMyIDI5IDE1QzI5IDcuMjY4MDEgMjIuNzMyIDEgMTUgMUM3LjI2ODAxIDEgMSA3LjI2ODAxIDEgMTVDMSAyMi43MzIgNy4yNjgwMSAyOSAxNSAyOVpcIlxuICAgICAgc3Ryb2tlPXtjb2xvcn1cbiAgICAvPlxuICAgIDxwYXRoXG4gICAgICBkPVwiTTUuMzQ0MjYgMTYuMDkyM0M1LjE1NzA4IDE2LjI2OTQgNS4xNTY1NiAxNi41NjcyIDUuMzQzMTEgMTYuNzQ1TDkuNDk3MDggMjAuNzAzMkM5LjY3MTM0IDIwLjg2OTIgOS45NDU0MSAyMC44Njg3IDEwLjExOTEgMjAuNzAyMUwxMC42ODIgMjAuMTYxOUMxMC44NjcgMTkuOTg0NCAxMC44NjY1IDE5LjY4ODMgMTAuNjgwOCAxOS41MTE0TDYuNTMwODQgMTUuNTU3QzYuMzU3NDcgMTUuMzkxOCA2LjA4NTA5IDE1LjM5MTQgNS45MTExMyAxNS41NTZMNS4zNDQyNiAxNi4wOTIzWk0yNC4wODkxIDEwLjI5NTlDMjMuOTE1MiAxMC4xMzAzIDIzLjY0MTkgMTAuMTMwMyAyMy40NjgxIDEwLjI5NjFMMTQuOTg4MiAxOC4zODM5QzE0LjgxNDMgMTguNTQ5OCAxNC41NDA3IDE4LjU0OTcgMTQuMzY2OCAxOC4zODM3TDExLjQwNzIgMTUuNTU2N0MxMS4yMzQzIDE1LjM5MTYgMTAuOTYyNSAxNS4zOTA1IDEwLjc4ODIgMTUuNTU0MkwxMC4yMTU0IDE2LjA5MjRDMTAuMDI3MiAxNi4yNjkyIDEwLjAyNjEgMTYuNTY3OSAxMC4yMTMxIDE2Ljc0NjFMMTQuMzY3IDIwLjcwNDJDMTQuNTQwOCAyMC44Njk4IDE0LjgxNCAyMC44Njk4IDE0Ljk4NzggMjAuNzA0MkwyNC42NTgxIDExLjQ4OTdDMjQuODQ0MiAxMS4zMTI0IDI0Ljg0NDIgMTEuMDE1NSAyNC42NTgxIDEwLjgzODJMMjQuMDg5MSAxMC4yOTU5Wk0xOS43OTA1IDExLjQ4ODZDMTkuOTc2MSAxMS4zMTE3IDE5Ljk3NjcgMTEuMDE1NiAxOS43OTE2IDEwLjgzODFMMTkuMjI4OCAxMC4yOTc5QzE5LjA1NTEgMTAuMTMxMyAxOC43ODEgMTAuMTMwOCAxOC42MDY4IDEwLjI5NjhMMTMuNzk5IDE0Ljg3OEMxMy42MTI1IDE1LjA1NTcgMTMuNjEzIDE1LjM1MzUgMTMuODAwMiAxNS41MzA2TDE0LjM2NyAxNi4wNjdDMTQuNTQxIDE2LjIzMTYgMTQuODEzNCAxNi4yMzExIDE0Ljk4NjggMTYuMDY1OUwxOS43OTA1IDExLjQ4ODZaXCJcbiAgICAgIGZpbGw9e2NvbG9yfVxuICAgIC8+XG4gIDwvc3ZnPlxuKTtcblxuQXBwcm92ZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogdW5kZWZpbmVkLFxufTtcblxuQXBwcm92ZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGNsYXNzTmFtZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgaWNvbiBzaG91bGQgYWRoZXJlIHRvIDhweCBncmlkLiBlLmc6IDgsIDE2LCAyNCwgMzIsIDQwXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBDb2xvciBvZiB0aGUgaWNvbiBzaG91bGQgYmUgYSB2YWxpZCBkZXNpZ24gc3lzdGVtIGNvbG9yIGFuZCBpcyByZXF1aXJlZFxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFwcHJvdmU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgU3dhcCA9ICh7IGNsYXNzTmFtZSwgc2l6ZSwgY29sb3IgfSkgPT4gKFxuICA8c3ZnXG4gICAgd2lkdGg9e3NpemV9XG4gICAgaGVpZ2h0PXtzaXplfVxuICAgIHZpZXdCb3g9XCIwIDAgMzQgMzRcIlxuICAgIGZpbGw9XCJub25lXCJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgPlxuICAgIDxwYXRoXG4gICAgICBmaWxsUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgY2xpcFJ1bGU9XCJldmVub2RkXCJcbiAgICAgIGQ9XCJNMTcgMzNDMjUuODM2NiAzMyAzMyAyNS44MzY2IDMzIDE3QzMzIDguMTYzNDQgMjUuODM2NiAxIDE3IDFDOC4xNjM0NCAxIDEgOC4xNjM0NCAxIDE3QzEgMjUuODM2NiA4LjE2MzQ0IDMzIDE3IDMzWlwiXG4gICAgICBzdHJva2U9e2NvbG9yfVxuICAgIC8+XG4gICAgPHBhdGhcbiAgICAgIGQ9XCJNMjEuNDQ0NCAyMS4yMjE0QzIxLjQ0NDQgMjEuNDE0NyAyMS4yODc3IDIxLjU3MTQgMjEuMDk0NCAyMS41NzE0SDEyLjkwNTZDMTIuNzEyMyAyMS41NzE0IDEyLjU1NTYgMjEuNDE0NyAxMi41NTU2IDIxLjIyMTRWMTkuNjkwN0MxMi41NTU2IDE5LjM3NjUgMTIuMTczNiAxOS4yMjE0IDExLjk1NDYgMTkuNDQ2N0w5LjIzNzIgMjIuMjQxN0M5LjEwNTEzIDIyLjM3NzYgOS4xMDUxMyAyMi41OTM4IDkuMjM3MiAyMi43Mjk3TDExLjk1NDYgMjUuNTI0N0MxMi4xNzM2IDI1Ljc1IDEyLjU1NTYgMjUuNTk1IDEyLjU1NTYgMjUuMjgwOFYyMy43NUMxMi41NTU2IDIzLjU1NjcgMTIuNzEyMyAyMy40IDEyLjkwNTYgMjMuNEgyMi44NzIyQzIzLjA2NTUgMjMuNCAyMy4yMjIyIDIzLjI0MzMgMjMuMjIyMiAyMy4wNVYxOC4yNjQzQzIzLjIyMjIgMTguMDcxIDIzLjA2NTUgMTcuOTE0MyAyMi44NzIyIDE3LjkxNDNIMjEuNzk0NEMyMS42MDExIDE3LjkxNDMgMjEuNDQ0NCAxOC4wNzEgMjEuNDQ0NCAxOC4yNjQzVjIxLjIyMTRaTTEyLjU1NTYgMTMuOTIxNEMxMi41NTU2IDEzLjcyODEgMTIuNzEyMyAxMy41NzE0IDEyLjkwNTYgMTMuNTcxNEgyMS4wOTQ0QzIxLjI4NzcgMTMuNTcxNCAyMS40NDQ0IDEzLjcyODEgMjEuNDQ0NCAxMy45MjE0VjE1LjQ1MjJDMjEuNDQ0NCAxNS43NjY0IDIxLjgyNjQgMTUuOTIxNCAyMi4wNDU0IDE1LjY5NjJMMjQuNzYyOCAxMi45MDExQzI0Ljg5NDkgMTIuNzY1MyAyNC44OTQ5IDEyLjU0OSAyNC43NjI4IDEyLjQxMzJMMjIuMDQ1NCA5LjYxODEyQzIxLjgyNjQgOS4zOTI4NCAyMS40NDQ0IDkuNTQ3OSAyMS40NDQ0IDkuODYyMVYxMS4zOTI5QzIxLjQ0NDQgMTEuNTg2MiAyMS4yODc3IDExLjc0MjkgMjEuMDk0NCAxMS43NDI5SDExLjEyNzhDMTAuOTM0NSAxMS43NDI5IDEwLjc3NzggMTEuODk5NiAxMC43Nzc4IDEyLjA5MjlWMTYuODc4NkMxMC43Nzc4IDE3LjA3MTkgMTAuOTM0NSAxNy4yMjg2IDExLjEyNzggMTcuMjI4NkgxMi4yMDU2QzEyLjM5ODkgMTcuMjI4NiAxMi41NTU2IDE3LjA3MTkgMTIuNTU1NiAxNi44Nzg2VjEzLjkyMTRaXCJcbiAgICAgIGZpbGw9e2NvbG9yfVxuICAgIC8+XG4gIDwvc3ZnPlxuKTtcblxuU3dhcC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogdW5kZWZpbmVkLFxufTtcblxuU3dhcC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGNsYXNzTmFtZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgaWNvbiBzaG91bGQgYWRoZXJlIHRvIDhweCBncmlkLiBlLmc6IDgsIDE2LCAyNCwgMzIsIDQwIGFuZCBpcyByZXF1aXJlZFxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQ29sb3Igb2YgdGhlIGljb24gc2hvdWxkIGJlIGEgdmFsaWQgZGVzaWduIHN5c3RlbSBjb2xvciBhbmQgaXMgcmVxdWlyZWRcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTd2FwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNpZ24oeyBjbGFzc05hbWUsIHNpemUsIGNvbG9yIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgIHdpZHRoPXtzaXplfVxuICAgICAgaGVpZ2h0PXtzaXplfVxuICAgICAgdmlld0JveD1cIjAgMCAzNCAzNFwiXG4gICAgICBmaWxsPVwibm9uZVwiXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBmaWxsUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICBkPVwiTTE3IDMzQzI1LjgzNjYgMzMgMzMgMjUuODM2NiAzMyAxN0MzMyA4LjE2MzQ0IDI1LjgzNjYgMSAxNyAxQzguMTYzNDQgMSAxIDguMTYzNDQgMSAxN0MxIDI1LjgzNjYgOC4xNjM0NCAzMyAxNyAzM1pcIlxuICAgICAgICBzdHJva2U9e2NvbG9yfVxuICAgICAgLz5cbiAgICAgIDxwYXRoXG4gICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgIGNsaXBSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgIGQ9XCJNMjEuMjA3MyA5LjY1ODU4QzIxLjI4NTQgOS41ODA0NyAyMS40MTIxIDkuNTgwNDcgMjEuNDkwMiA5LjY1ODU4TDIzLjg3MjIgMTIuMDQwNkMyMy45NTAzIDEyLjExODcgMjMuOTUwMyAxMi4yNDUzIDIzLjg3MjIgMTIuMzIzNEwyMi4zOTQxIDEzLjgwMTVMMTkuNzI5MyAxMS4xMzY3TDIxLjIwNzMgOS42NTg1OFpNMTguNTk3OSAxMi4yNjhMMTAuNzM2MSAyMC4xMjk5QzEwLjcwODYgMjAuMTU3MyAxMC42ODk4IDIwLjE5MjEgMTAuNjgxOCAyMC4yMzAxTDEwLjA0NjYgMjMuMjQ3M0MxMC4wMTY4IDIzLjM4ODYgMTAuMTQyMSAyMy41MTM5IDEwLjI4MzUgMjMuNDg0MkwxMy4zMDA3IDIyLjg0OUMxMy4zMzg2IDIyLjg0MSAxMy4zNzM0IDIyLjgyMjEgMTMuNDAwOSAyMi43OTQ3TDIxLjI2MjcgMTQuOTMyOEwxOC41OTc5IDEyLjI2OFpNMjIuNjIxNSA4LjUyNzIxQzIxLjkxODYgNy44MjQyNiAyMC43Nzg5IDcuODI0MjcgMjAuMDc2IDguNTI3MjFMOS42MDQ2OSAxOC45OTg1QzkuMzU3NzggMTkuMjQ1NCA5LjE4ODAyIDE5LjU1ODggOS4xMTYwOSAxOS45MDA1TDguNDgwODkgMjIuOTE3NkM4LjIxMzA2IDI0LjE4OTggOS4zNDA5MSAyNS4zMTc3IDEwLjYxMzEgMjUuMDQ5OEwxMy42MzAzIDI0LjQxNDZDMTMuOTcyIDI0LjM0MjcgMTQuMjg1MyAyNC4xNzMgMTQuNTMyMyAyMy45MjYxTDI1LjAwMzUgMTMuNDU0OEMyNS43MDY1IDEyLjc1MTggMjUuNzA2NSAxMS42MTIxIDI1LjAwMzUgMTAuOTA5MkwyMi42MjE1IDguNTI3MjFaXCJcbiAgICAgICAgZmlsbD17Y29sb3J9XG4gICAgICAvPlxuICAgIDwvc3ZnPlxuICApO1xufVxuXG5TaWduLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgY2xhc3NOYW1lXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBpY29uIHNob3VsZCBhZGhlcmUgdG8gOHB4IGdyaWQuIGUuZzogOCwgMTYsIDI0LCAzMiwgNDAgYW5kIGlzIHJlcXVpcmVkXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBDb2xvciBvZiB0aGUgaWNvbiBzaG91bGQgYmUgYSB2YWxpZCBkZXNpZ24gc3lzdGVtIGNvbG9yIGFuZCBpcyByZXF1aXJlZFxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgU2VuZCA9ICh7IGNsYXNzTmFtZSwgc2l6ZSwgY29sb3IgfSkgPT4gKFxuICA8c3ZnXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgd2lkdGg9e3NpemV9XG4gICAgaGVpZ2h0PXtzaXplfVxuICAgIHZpZXdCb3g9XCIwIDAgMzAgMzBcIlxuICAgIGZpbGw9XCJub25lXCJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgPlxuICAgIDxyZWN0IHg9XCIwLjVcIiB5PVwiMC41XCIgd2lkdGg9XCIyOVwiIGhlaWdodD1cIjI5XCIgcng9XCIxNC41XCIgc3Ryb2tlPXtjb2xvcn0gLz5cbiAgICA8cGF0aFxuICAgICAgZD1cIk0xOC41ODUxIDkuODg5MjFDMTguNTU4NiA5Ljg5MDA1IDE4LjUzMjEgOS44OTIzOCAxOC41MDU3IDkuODk2MThIMTQuMzIwN0MxNC4wNjM1IDkuODkyNTQgMTMuODI0MyAxMC4wMjc2IDEzLjY5NDcgMTAuMjQ5N0MxMy41NjUgMTAuNDcxOSAxMy41NjUgMTAuNzQ2NiAxMy42OTQ3IDEwLjk2ODdDMTMuODI0MyAxMS4xOTA4IDE0LjA2MzUgMTEuMzI1OSAxNC4zMjA3IDExLjMyMjJIMTYuODc3N0w5LjUzODExIDE4LjY2MTRDOS4zNTE4MiAxOC44NDAyIDkuMjc2NzkgMTkuMTA1OCA5LjM0MTkzIDE5LjM1NTdDOS40MDcwNyAxOS42MDU2IDkuNjAyMjIgMTkuODAwNyA5Ljg1MjExIDE5Ljg2NThDMTAuMTAyIDE5LjkzMSAxMC4zNjc2IDE5Ljg1NTkgMTAuNTQ2NCAxOS42Njk3TDE3Ljg4NiAxMi4zMzA1VjE0Ljg4NzRDMTcuODgyMyAxNS4xNDQ1IDE4LjAxNzUgMTUuMzgzNyAxOC4yMzk2IDE1LjUxMzNDMTguNDYxNyAxNS42NDMgMTguNzM2NCAxNS42NDMgMTguOTU4NSAxNS41MTMzQzE5LjE4MDYgMTUuMzgzNyAxOS4zMTU4IDE1LjE0NDUgMTkuMzEyMSAxNC44ODc0VjEwLjY5OTdDMTkuMzQwOSAxMC40OTE5IDE5LjI3NjcgMTAuMjgyIDE5LjEzNjYgMTAuMTI1OUMxOC45OTY1IDkuOTY5NzMgMTguNzk0OCA5Ljg4MzE2IDE4LjU4NTEgOS44ODkyMVpcIlxuICAgICAgZmlsbD17Y29sb3J9XG4gICAgLz5cbiAgPC9zdmc+XG4pO1xuXG5TZW5kLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiB1bmRlZmluZWQsXG59O1xuXG5TZW5kLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgY2xhc3NOYW1lXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBpY29uIHNob3VsZCBhZGhlcmUgdG8gOHB4IGdyaWQuIGUuZzogOCwgMTYsIDI0LCAzMiwgNDAgYW5kIGlzIHJlcXVpcmVkXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBDb2xvciBvZiB0aGUgaWNvbiBzaG91bGQgYmUgYSB2YWxpZCBkZXNpZ24gc3lzdGVtIGNvbG9yIGFuZCBpcyByZXF1aXJlZFxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlbmQ7XG4iLCIvKiogQGxpY2Vuc2UgTWF0ZXJpYWwtVUkgdjQuMTEuMFxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBfZXhwb3J0TmFtZXMgPSB7XG4gIGNvbG9yczogdHJ1ZSxcbiAgQWNjb3JkaW9uOiB0cnVlLFxuICBBY2NvcmRpb25BY3Rpb25zOiB0cnVlLFxuICBBY2NvcmRpb25EZXRhaWxzOiB0cnVlLFxuICBBY2NvcmRpb25TdW1tYXJ5OiB0cnVlLFxuICBBcHBCYXI6IHRydWUsXG4gIEF2YXRhcjogdHJ1ZSxcbiAgQmFja2Ryb3A6IHRydWUsXG4gIEJhZGdlOiB0cnVlLFxuICBCb3R0b21OYXZpZ2F0aW9uOiB0cnVlLFxuICBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uOiB0cnVlLFxuICBCb3g6IHRydWUsXG4gIEJyZWFkY3J1bWJzOiB0cnVlLFxuICBCdXR0b246IHRydWUsXG4gIEJ1dHRvbkJhc2U6IHRydWUsXG4gIEJ1dHRvbkdyb3VwOiB0cnVlLFxuICBDYXJkOiB0cnVlLFxuICBDYXJkQWN0aW9uQXJlYTogdHJ1ZSxcbiAgQ2FyZEFjdGlvbnM6IHRydWUsXG4gIENhcmRDb250ZW50OiB0cnVlLFxuICBDYXJkSGVhZGVyOiB0cnVlLFxuICBDYXJkTWVkaWE6IHRydWUsXG4gIENoZWNrYm94OiB0cnVlLFxuICBDaGlwOiB0cnVlLFxuICBDaXJjdWxhclByb2dyZXNzOiB0cnVlLFxuICBDbGlja0F3YXlMaXN0ZW5lcjogdHJ1ZSxcbiAgQ29sbGFwc2U6IHRydWUsXG4gIENvbnRhaW5lcjogdHJ1ZSxcbiAgQ3NzQmFzZWxpbmU6IHRydWUsXG4gIERpYWxvZzogdHJ1ZSxcbiAgRGlhbG9nQWN0aW9uczogdHJ1ZSxcbiAgRGlhbG9nQ29udGVudDogdHJ1ZSxcbiAgRGlhbG9nQ29udGVudFRleHQ6IHRydWUsXG4gIERpYWxvZ1RpdGxlOiB0cnVlLFxuICBEaXZpZGVyOiB0cnVlLFxuICBEcmF3ZXI6IHRydWUsXG4gIEV4cGFuc2lvblBhbmVsOiB0cnVlLFxuICBFeHBhbnNpb25QYW5lbEFjdGlvbnM6IHRydWUsXG4gIEV4cGFuc2lvblBhbmVsRGV0YWlsczogdHJ1ZSxcbiAgRXhwYW5zaW9uUGFuZWxTdW1tYXJ5OiB0cnVlLFxuICBGYWI6IHRydWUsXG4gIEZhZGU6IHRydWUsXG4gIEZpbGxlZElucHV0OiB0cnVlLFxuICBGb3JtQ29udHJvbDogdHJ1ZSxcbiAgRm9ybUNvbnRyb2xMYWJlbDogdHJ1ZSxcbiAgRm9ybUdyb3VwOiB0cnVlLFxuICBGb3JtSGVscGVyVGV4dDogdHJ1ZSxcbiAgRm9ybUxhYmVsOiB0cnVlLFxuICBHcmlkOiB0cnVlLFxuICBHcmlkTGlzdDogdHJ1ZSxcbiAgR3JpZExpc3RUaWxlOiB0cnVlLFxuICBHcmlkTGlzdFRpbGVCYXI6IHRydWUsXG4gIEdyb3c6IHRydWUsXG4gIEhpZGRlbjogdHJ1ZSxcbiAgSWNvbjogdHJ1ZSxcbiAgSWNvbkJ1dHRvbjogdHJ1ZSxcbiAgSW5wdXQ6IHRydWUsXG4gIElucHV0QWRvcm5tZW50OiB0cnVlLFxuICBJbnB1dEJhc2U6IHRydWUsXG4gIElucHV0TGFiZWw6IHRydWUsXG4gIExpbmVhclByb2dyZXNzOiB0cnVlLFxuICBMaW5rOiB0cnVlLFxuICBMaXN0OiB0cnVlLFxuICBMaXN0SXRlbTogdHJ1ZSxcbiAgTGlzdEl0ZW1BdmF0YXI6IHRydWUsXG4gIExpc3RJdGVtSWNvbjogdHJ1ZSxcbiAgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb246IHRydWUsXG4gIExpc3RJdGVtVGV4dDogdHJ1ZSxcbiAgTGlzdFN1YmhlYWRlcjogdHJ1ZSxcbiAgTWVudTogdHJ1ZSxcbiAgTWVudUl0ZW06IHRydWUsXG4gIE1lbnVMaXN0OiB0cnVlLFxuICBNb2JpbGVTdGVwcGVyOiB0cnVlLFxuICBNb2RhbDogdHJ1ZSxcbiAgTmF0aXZlU2VsZWN0OiB0cnVlLFxuICBOb1NzcjogdHJ1ZSxcbiAgT3V0bGluZWRJbnB1dDogdHJ1ZSxcbiAgUGFwZXI6IHRydWUsXG4gIFBvcG92ZXI6IHRydWUsXG4gIFBvcHBlcjogdHJ1ZSxcbiAgUG9ydGFsOiB0cnVlLFxuICBSYWRpbzogdHJ1ZSxcbiAgUmFkaW9Hcm91cDogdHJ1ZSxcbiAgUm9vdFJlZjogdHJ1ZSxcbiAgU2VsZWN0OiB0cnVlLFxuICBTbGlkZTogdHJ1ZSxcbiAgU2xpZGVyOiB0cnVlLFxuICBTbmFja2JhcjogdHJ1ZSxcbiAgU25hY2tiYXJDb250ZW50OiB0cnVlLFxuICBTdGVwOiB0cnVlLFxuICBTdGVwQnV0dG9uOiB0cnVlLFxuICBTdGVwQ29ubmVjdG9yOiB0cnVlLFxuICBTdGVwQ29udGVudDogdHJ1ZSxcbiAgU3RlcEljb246IHRydWUsXG4gIFN0ZXBMYWJlbDogdHJ1ZSxcbiAgU3RlcHBlcjogdHJ1ZSxcbiAgU3ZnSWNvbjogdHJ1ZSxcbiAgU3dpcGVhYmxlRHJhd2VyOiB0cnVlLFxuICBTd2l0Y2g6IHRydWUsXG4gIFRhYjogdHJ1ZSxcbiAgVGFibGU6IHRydWUsXG4gIFRhYmxlQm9keTogdHJ1ZSxcbiAgVGFibGVDZWxsOiB0cnVlLFxuICBUYWJsZUNvbnRhaW5lcjogdHJ1ZSxcbiAgVGFibGVGb290ZXI6IHRydWUsXG4gIFRhYmxlSGVhZDogdHJ1ZSxcbiAgVGFibGVQYWdpbmF0aW9uOiB0cnVlLFxuICBUYWJsZVJvdzogdHJ1ZSxcbiAgVGFibGVTb3J0TGFiZWw6IHRydWUsXG4gIFRhYnM6IHRydWUsXG4gIFRhYlNjcm9sbEJ1dHRvbjogdHJ1ZSxcbiAgVGV4dEZpZWxkOiB0cnVlLFxuICBUZXh0YXJlYUF1dG9zaXplOiB0cnVlLFxuICBUb29sYmFyOiB0cnVlLFxuICBUb29sdGlwOiB0cnVlLFxuICBUeXBvZ3JhcGh5OiB0cnVlLFxuICBVbnN0YWJsZV9UcmFwRm9jdXM6IHRydWUsXG4gIHVzZU1lZGlhUXVlcnk6IHRydWUsXG4gIHVzZVNjcm9sbFRyaWdnZXI6IHRydWUsXG4gIHdpdGhNb2JpbGVEaWFsb2c6IHRydWUsXG4gIHdpdGhXaWR0aDogdHJ1ZSxcbiAgWm9vbTogdHJ1ZVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFjY29yZGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQWNjb3JkaW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWNjb3JkaW9uQWN0aW9uc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQWNjb3JkaW9uQWN0aW9ucy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFjY29yZGlvbkRldGFpbHNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0FjY29yZGlvbkRldGFpbHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBY2NvcmRpb25TdW1tYXJ5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9BY2NvcmRpb25TdW1tYXJ5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXBwQmFyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9BcHBCYXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBdmF0YXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0F2YXRhci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJhY2tkcm9wXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9CYWNrZHJvcC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJhZGdlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9CYWRnZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJvdHRvbU5hdmlnYXRpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0JvdHRvbU5hdmlnYXRpb24uZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCb3R0b21OYXZpZ2F0aW9uQWN0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Cb3R0b21OYXZpZ2F0aW9uQWN0aW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQm94XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Cb3guZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCcmVhZGNydW1ic1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQnJlYWRjcnVtYnMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCdXR0b25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0J1dHRvbi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJ1dHRvbkJhc2VcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0J1dHRvbkJhc2UuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCdXR0b25Hcm91cFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQnV0dG9uR3JvdXAuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYXJkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DYXJkLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FyZEFjdGlvbkFyZWFcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NhcmRBY3Rpb25BcmVhLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FyZEFjdGlvbnNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NhcmRBY3Rpb25zLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FyZENvbnRlbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NhcmRDb250ZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FyZEhlYWRlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2FyZEhlYWRlci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhcmRNZWRpYVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2FyZE1lZGlhLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2hlY2tib3hcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NoZWNrYm94LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2hpcFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2hpcC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNpcmN1bGFyUHJvZ3Jlc3NcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NpcmN1bGFyUHJvZ3Jlc3MuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDbGlja0F3YXlMaXN0ZW5lclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2xpY2tBd2F5TGlzdGVuZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb2xsYXBzZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ29sbGFwc2UuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb250YWluZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NvbnRhaW5lci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNzc0Jhc2VsaW5lXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Dc3NCYXNlbGluZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpYWxvZ1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGlhbG9nLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlhbG9nQWN0aW9uc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGlhbG9nQWN0aW9ucy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpYWxvZ0NvbnRlbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RpYWxvZ0NvbnRlbnQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaWFsb2dDb250ZW50VGV4dFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGlhbG9nQ29udGVudFRleHQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaWFsb2dUaXRsZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGlhbG9nVGl0bGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaXZpZGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9EaXZpZGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRHJhd2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9EcmF3ZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFeHBhbnNpb25QYW5lbFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRXhwYW5zaW9uUGFuZWwuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFeHBhbnNpb25QYW5lbEFjdGlvbnNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0V4cGFuc2lvblBhbmVsQWN0aW9ucy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkV4cGFuc2lvblBhbmVsRGV0YWlsc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRXhwYW5zaW9uUGFuZWxEZXRhaWxzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhwYW5zaW9uUGFuZWxTdW1tYXJ5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9FeHBhbnNpb25QYW5lbFN1bW1hcnkuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGYWJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0ZhYi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZhZGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0ZhZGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGaWxsZWRJbnB1dFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRmlsbGVkSW5wdXQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGb3JtQ29udHJvbFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRm9ybUNvbnRyb2wuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGb3JtQ29udHJvbExhYmVsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Gb3JtQ29udHJvbExhYmVsLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRm9ybUdyb3VwXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Gb3JtR3JvdXAuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGb3JtSGVscGVyVGV4dFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRm9ybUhlbHBlclRleHQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGb3JtTGFiZWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0Zvcm1MYWJlbC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdyaWRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0dyaWQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHcmlkTGlzdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfR3JpZExpc3QuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHcmlkTGlzdFRpbGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0dyaWRMaXN0VGlsZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdyaWRMaXN0VGlsZUJhclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfR3JpZExpc3RUaWxlQmFyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR3Jvd1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfR3Jvdy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkhpZGRlblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSGlkZGVuLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSWNvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSWNvbi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkljb25CdXR0b25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0ljb25CdXR0b24uZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbnB1dFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSW5wdXQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbnB1dEFkb3JubWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSW5wdXRBZG9ybm1lbnQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbnB1dEJhc2VcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0lucHV0QmFzZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklucHV0TGFiZWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0lucHV0TGFiZWwuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaW5lYXJQcm9ncmVzc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGluZWFyUHJvZ3Jlc3MuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaW5rXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaW5rLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTGlzdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGlzdC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxpc3RJdGVtXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaXN0SXRlbS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxpc3RJdGVtQXZhdGFyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaXN0SXRlbUF2YXRhci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxpc3RJdGVtSWNvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGlzdEl0ZW1JY29uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTGlzdEl0ZW1UZXh0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaXN0SXRlbVRleHQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaXN0U3ViaGVhZGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaXN0U3ViaGVhZGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWVudVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTWVudS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1lbnVJdGVtXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9NZW51SXRlbS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1lbnVMaXN0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9NZW51TGlzdC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vYmlsZVN0ZXBwZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX01vYmlsZVN0ZXBwZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNb2RhbFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTW9kYWwuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOYXRpdmVTZWxlY3RcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX05hdGl2ZVNlbGVjdC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vU3NyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Ob1Nzci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk91dGxpbmVkSW5wdXRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX091dGxpbmVkSW5wdXQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXBlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGFwZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQb3BvdmVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Qb3BvdmVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUG9wcGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Qb3BwZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQb3J0YWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1BvcnRhbC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJhZGlvXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9SYWRpby5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJhZGlvR3JvdXBcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1JhZGlvR3JvdXAuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSb290UmVmXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Sb290UmVmLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VsZWN0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TZWxlY3QuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTbGlkZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU2xpZGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTbGlkZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1NsaWRlci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNuYWNrYmFyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TbmFja2Jhci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNuYWNrYmFyQ29udGVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU25hY2tiYXJDb250ZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RlcFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3RlcC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0ZXBCdXR0b25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N0ZXBCdXR0b24uZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdGVwQ29ubmVjdG9yXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TdGVwQ29ubmVjdG9yLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RlcENvbnRlbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N0ZXBDb250ZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RlcEljb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N0ZXBJY29uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RlcExhYmVsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TdGVwTGFiZWwuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdGVwcGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TdGVwcGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3ZnSWNvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3ZnSWNvbi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN3aXBlYWJsZURyYXdlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3dpcGVhYmxlRHJhd2VyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3dpdGNoXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Td2l0Y2guZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUYWJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRhYmxlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWJsZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRhYmxlQm9keVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFibGVCb2R5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGFibGVDZWxsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWJsZUNlbGwuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUYWJsZUNvbnRhaW5lclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFibGVDb250YWluZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUYWJsZUZvb3RlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFibGVGb290ZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUYWJsZUhlYWRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlSGVhZC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRhYmxlUGFnaW5hdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFibGVQYWdpbmF0aW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGFibGVSb3dcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlUm93LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGFibGVTb3J0TGFiZWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlU29ydExhYmVsLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGFic1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFicy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRhYlNjcm9sbEJ1dHRvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFiU2Nyb2xsQnV0dG9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGV4dEZpZWxkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UZXh0RmllbGQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUZXh0YXJlYUF1dG9zaXplXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UZXh0YXJlYUF1dG9zaXplLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG9vbGJhclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVG9vbGJhci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRvb2x0aXBcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1Rvb2x0aXAuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUeXBvZ3JhcGh5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UeXBvZ3JhcGh5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5zdGFibGVfVHJhcEZvY3VzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9VbnN0YWJsZV9UcmFwRm9jdXMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VNZWRpYVF1ZXJ5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91c2VNZWRpYVF1ZXJ5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlU2Nyb2xsVHJpZ2dlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdXNlU2Nyb2xsVHJpZ2dlci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndpdGhNb2JpbGVEaWFsb2dcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3dpdGhNb2JpbGVEaWFsb2cuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aXRoV2lkdGhcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3dpdGhXaWR0aC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlpvb21cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1pvb20uZGVmYXVsdDtcbiAgfVxufSk7XG5leHBvcnRzLmNvbG9ycyA9IHZvaWQgMDtcblxudmFyIGNvbG9ycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2NvbG9yc1wiKSk7XG5cbmV4cG9ydHMuY29sb3JzID0gY29sb3JzO1xuXG52YXIgX3N0eWxlcyA9IHJlcXVpcmUoXCIuL3N0eWxlc1wiKTtcblxuT2JqZWN0LmtleXMoX3N0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX3N0eWxlc1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5PYmplY3Qua2V5cyhfdXRpbHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF91dGlsc1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9BY2NvcmRpb24gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9BY2NvcmRpb25cIikpO1xuXG5PYmplY3Qua2V5cyhfQWNjb3JkaW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfQWNjb3JkaW9uW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0FjY29yZGlvbkFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9BY2NvcmRpb25BY3Rpb25zXCIpKTtcblxuT2JqZWN0LmtleXMoX0FjY29yZGlvbkFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9BY2NvcmRpb25BY3Rpb25zW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0FjY29yZGlvbkRldGFpbHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9BY2NvcmRpb25EZXRhaWxzXCIpKTtcblxuT2JqZWN0LmtleXMoX0FjY29yZGlvbkRldGFpbHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9BY2NvcmRpb25EZXRhaWxzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0FjY29yZGlvblN1bW1hcnkgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9BY2NvcmRpb25TdW1tYXJ5XCIpKTtcblxuT2JqZWN0LmtleXMoX0FjY29yZGlvblN1bW1hcnkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9BY2NvcmRpb25TdW1tYXJ5W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0FwcEJhciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0FwcEJhclwiKSk7XG5cbk9iamVjdC5rZXlzKF9BcHBCYXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9BcHBCYXJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfQXZhdGFyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vQXZhdGFyXCIpKTtcblxuT2JqZWN0LmtleXMoX0F2YXRhcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0F2YXRhcltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9CYWNrZHJvcCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0JhY2tkcm9wXCIpKTtcblxuT2JqZWN0LmtleXMoX0JhY2tkcm9wKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfQmFja2Ryb3Bba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfQmFkZ2UgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9CYWRnZVwiKSk7XG5cbk9iamVjdC5rZXlzKF9CYWRnZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0JhZGdlW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0JvdHRvbU5hdmlnYXRpb24gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Cb3R0b21OYXZpZ2F0aW9uXCIpKTtcblxuT2JqZWN0LmtleXMoX0JvdHRvbU5hdmlnYXRpb24pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Cb3R0b21OYXZpZ2F0aW9uW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0JvdHRvbU5hdmlnYXRpb25BY3Rpb24gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Cb3R0b21OYXZpZ2F0aW9uQWN0aW9uXCIpKTtcblxuT2JqZWN0LmtleXMoX0JvdHRvbU5hdmlnYXRpb25BY3Rpb24pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Cb3R0b21OYXZpZ2F0aW9uQWN0aW9uW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0JveCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0JveFwiKSk7XG5cbk9iamVjdC5rZXlzKF9Cb3gpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Cb3hba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfQnJlYWRjcnVtYnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9CcmVhZGNydW1ic1wiKSk7XG5cbk9iamVjdC5rZXlzKF9CcmVhZGNydW1icykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0JyZWFkY3J1bWJzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0J1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0J1dHRvblwiKSk7XG5cbk9iamVjdC5rZXlzKF9CdXR0b24pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9CdXR0b25ba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfQnV0dG9uQmFzZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0J1dHRvbkJhc2VcIikpO1xuXG5PYmplY3Qua2V5cyhfQnV0dG9uQmFzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0J1dHRvbkJhc2Vba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfQnV0dG9uR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9CdXR0b25Hcm91cFwiKSk7XG5cbk9iamVjdC5rZXlzKF9CdXR0b25Hcm91cCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0J1dHRvbkdyb3VwW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0NhcmQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9DYXJkXCIpKTtcblxuT2JqZWN0LmtleXMoX0NhcmQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9DYXJkW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0NhcmRBY3Rpb25BcmVhID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vQ2FyZEFjdGlvbkFyZWFcIikpO1xuXG5PYmplY3Qua2V5cyhfQ2FyZEFjdGlvbkFyZWEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9DYXJkQWN0aW9uQXJlYVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9DYXJkQWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0NhcmRBY3Rpb25zXCIpKTtcblxuT2JqZWN0LmtleXMoX0NhcmRBY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfQ2FyZEFjdGlvbnNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfQ2FyZENvbnRlbnQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9DYXJkQ29udGVudFwiKSk7XG5cbk9iamVjdC5rZXlzKF9DYXJkQ29udGVudCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0NhcmRDb250ZW50W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0NhcmRIZWFkZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9DYXJkSGVhZGVyXCIpKTtcblxuT2JqZWN0LmtleXMoX0NhcmRIZWFkZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9DYXJkSGVhZGVyW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0NhcmRNZWRpYSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0NhcmRNZWRpYVwiKSk7XG5cbk9iamVjdC5rZXlzKF9DYXJkTWVkaWEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9DYXJkTWVkaWFba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfQ2hlY2tib3ggPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9DaGVja2JveFwiKSk7XG5cbk9iamVjdC5rZXlzKF9DaGVja2JveCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0NoZWNrYm94W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0NoaXAgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9DaGlwXCIpKTtcblxuT2JqZWN0LmtleXMoX0NoaXApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9DaGlwW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0NpcmN1bGFyUHJvZ3Jlc3MgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9DaXJjdWxhclByb2dyZXNzXCIpKTtcblxuT2JqZWN0LmtleXMoX0NpcmN1bGFyUHJvZ3Jlc3MpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9DaXJjdWxhclByb2dyZXNzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0NsaWNrQXdheUxpc3RlbmVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vQ2xpY2tBd2F5TGlzdGVuZXJcIikpO1xuXG5PYmplY3Qua2V5cyhfQ2xpY2tBd2F5TGlzdGVuZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9DbGlja0F3YXlMaXN0ZW5lcltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9Db2xsYXBzZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0NvbGxhcHNlXCIpKTtcblxuT2JqZWN0LmtleXMoX0NvbGxhcHNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfQ29sbGFwc2Vba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfQ29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vQ29udGFpbmVyXCIpKTtcblxuT2JqZWN0LmtleXMoX0NvbnRhaW5lcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0NvbnRhaW5lcltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9Dc3NCYXNlbGluZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0Nzc0Jhc2VsaW5lXCIpKTtcblxuT2JqZWN0LmtleXMoX0Nzc0Jhc2VsaW5lKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfQ3NzQmFzZWxpbmVba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfRGlhbG9nID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vRGlhbG9nXCIpKTtcblxuT2JqZWN0LmtleXMoX0RpYWxvZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0RpYWxvZ1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9EaWFsb2dBY3Rpb25zID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vRGlhbG9nQWN0aW9uc1wiKSk7XG5cbk9iamVjdC5rZXlzKF9EaWFsb2dBY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfRGlhbG9nQWN0aW9uc1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9EaWFsb2dDb250ZW50ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vRGlhbG9nQ29udGVudFwiKSk7XG5cbk9iamVjdC5rZXlzKF9EaWFsb2dDb250ZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfRGlhbG9nQ29udGVudFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9EaWFsb2dDb250ZW50VGV4dCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0RpYWxvZ0NvbnRlbnRUZXh0XCIpKTtcblxuT2JqZWN0LmtleXMoX0RpYWxvZ0NvbnRlbnRUZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfRGlhbG9nQ29udGVudFRleHRba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfRGlhbG9nVGl0bGUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9EaWFsb2dUaXRsZVwiKSk7XG5cbk9iamVjdC5rZXlzKF9EaWFsb2dUaXRsZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0RpYWxvZ1RpdGxlW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0RpdmlkZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9EaXZpZGVyXCIpKTtcblxuT2JqZWN0LmtleXMoX0RpdmlkZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9EaXZpZGVyW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0RyYXdlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0RyYXdlclwiKSk7XG5cbk9iamVjdC5rZXlzKF9EcmF3ZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9EcmF3ZXJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfRXhwYW5zaW9uUGFuZWwgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9FeHBhbnNpb25QYW5lbFwiKSk7XG5cbk9iamVjdC5rZXlzKF9FeHBhbnNpb25QYW5lbCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0V4cGFuc2lvblBhbmVsW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0V4cGFuc2lvblBhbmVsQWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0V4cGFuc2lvblBhbmVsQWN0aW9uc1wiKSk7XG5cbk9iamVjdC5rZXlzKF9FeHBhbnNpb25QYW5lbEFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9FeHBhbnNpb25QYW5lbEFjdGlvbnNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfRXhwYW5zaW9uUGFuZWxEZXRhaWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vRXhwYW5zaW9uUGFuZWxEZXRhaWxzXCIpKTtcblxuT2JqZWN0LmtleXMoX0V4cGFuc2lvblBhbmVsRGV0YWlscykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0V4cGFuc2lvblBhbmVsRGV0YWlsc1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9FeHBhbnNpb25QYW5lbFN1bW1hcnkgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9FeHBhbnNpb25QYW5lbFN1bW1hcnlcIikpO1xuXG5PYmplY3Qua2V5cyhfRXhwYW5zaW9uUGFuZWxTdW1tYXJ5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfRXhwYW5zaW9uUGFuZWxTdW1tYXJ5W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0ZhYiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0ZhYlwiKSk7XG5cbk9iamVjdC5rZXlzKF9GYWIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9GYWJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfRmFkZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0ZhZGVcIikpO1xuXG5PYmplY3Qua2V5cyhfRmFkZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0ZhZGVba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfRmlsbGVkSW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9GaWxsZWRJbnB1dFwiKSk7XG5cbk9iamVjdC5rZXlzKF9GaWxsZWRJbnB1dCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0ZpbGxlZElucHV0W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0Zvcm1Db250cm9sID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vRm9ybUNvbnRyb2xcIikpO1xuXG5PYmplY3Qua2V5cyhfRm9ybUNvbnRyb2wpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Gb3JtQ29udHJvbFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9Gb3JtQ29udHJvbExhYmVsID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vRm9ybUNvbnRyb2xMYWJlbFwiKSk7XG5cbk9iamVjdC5rZXlzKF9Gb3JtQ29udHJvbExhYmVsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfRm9ybUNvbnRyb2xMYWJlbFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9Gb3JtR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Gb3JtR3JvdXBcIikpO1xuXG5PYmplY3Qua2V5cyhfRm9ybUdyb3VwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfRm9ybUdyb3VwW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0Zvcm1IZWxwZXJUZXh0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vRm9ybUhlbHBlclRleHRcIikpO1xuXG5PYmplY3Qua2V5cyhfRm9ybUhlbHBlclRleHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Gb3JtSGVscGVyVGV4dFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9Gb3JtTGFiZWwgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Gb3JtTGFiZWxcIikpO1xuXG5PYmplY3Qua2V5cyhfRm9ybUxhYmVsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfRm9ybUxhYmVsW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0dyaWQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9HcmlkXCIpKTtcblxuT2JqZWN0LmtleXMoX0dyaWQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9HcmlkW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0dyaWRMaXN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vR3JpZExpc3RcIikpO1xuXG5PYmplY3Qua2V5cyhfR3JpZExpc3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9HcmlkTGlzdFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9HcmlkTGlzdFRpbGUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9HcmlkTGlzdFRpbGVcIikpO1xuXG5PYmplY3Qua2V5cyhfR3JpZExpc3RUaWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfR3JpZExpc3RUaWxlW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0dyaWRMaXN0VGlsZUJhciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0dyaWRMaXN0VGlsZUJhclwiKSk7XG5cbk9iamVjdC5rZXlzKF9HcmlkTGlzdFRpbGVCYXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9HcmlkTGlzdFRpbGVCYXJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfR3JvdyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0dyb3dcIikpO1xuXG5PYmplY3Qua2V5cyhfR3JvdykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0dyb3dba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfSGlkZGVuID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vSGlkZGVuXCIpKTtcblxuT2JqZWN0LmtleXMoX0hpZGRlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0hpZGRlbltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9JY29uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vSWNvblwiKSk7XG5cbk9iamVjdC5rZXlzKF9JY29uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfSWNvbltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9JY29uQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vSWNvbkJ1dHRvblwiKSk7XG5cbk9iamVjdC5rZXlzKF9JY29uQnV0dG9uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfSWNvbkJ1dHRvbltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9JbnB1dCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0lucHV0XCIpKTtcblxuT2JqZWN0LmtleXMoX0lucHV0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfSW5wdXRba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfSW5wdXRBZG9ybm1lbnQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9JbnB1dEFkb3JubWVudFwiKSk7XG5cbk9iamVjdC5rZXlzKF9JbnB1dEFkb3JubWVudCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0lucHV0QWRvcm5tZW50W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0lucHV0QmFzZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0lucHV0QmFzZVwiKSk7XG5cbk9iamVjdC5rZXlzKF9JbnB1dEJhc2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9JbnB1dEJhc2Vba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfSW5wdXRMYWJlbCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0lucHV0TGFiZWxcIikpO1xuXG5PYmplY3Qua2V5cyhfSW5wdXRMYWJlbCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0lucHV0TGFiZWxba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfTGluZWFyUHJvZ3Jlc3MgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9MaW5lYXJQcm9ncmVzc1wiKSk7XG5cbk9iamVjdC5rZXlzKF9MaW5lYXJQcm9ncmVzcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0xpbmVhclByb2dyZXNzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0xpbmsgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9MaW5rXCIpKTtcblxuT2JqZWN0LmtleXMoX0xpbmspLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9MaW5rW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0xpc3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9MaXN0XCIpKTtcblxuT2JqZWN0LmtleXMoX0xpc3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9MaXN0W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX0xpc3RJdGVtID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vTGlzdEl0ZW1cIikpO1xuXG5PYmplY3Qua2V5cyhfTGlzdEl0ZW0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9MaXN0SXRlbVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9MaXN0SXRlbUF2YXRhciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0xpc3RJdGVtQXZhdGFyXCIpKTtcblxuT2JqZWN0LmtleXMoX0xpc3RJdGVtQXZhdGFyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfTGlzdEl0ZW1BdmF0YXJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfTGlzdEl0ZW1JY29uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vTGlzdEl0ZW1JY29uXCIpKTtcblxuT2JqZWN0LmtleXMoX0xpc3RJdGVtSWNvbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0xpc3RJdGVtSWNvbltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9MaXN0SXRlbVNlY29uZGFyeUFjdGlvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uXCIpKTtcblxuT2JqZWN0LmtleXMoX0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25ba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfTGlzdEl0ZW1UZXh0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vTGlzdEl0ZW1UZXh0XCIpKTtcblxuT2JqZWN0LmtleXMoX0xpc3RJdGVtVGV4dCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0xpc3RJdGVtVGV4dFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9MaXN0U3ViaGVhZGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vTGlzdFN1YmhlYWRlclwiKSk7XG5cbk9iamVjdC5rZXlzKF9MaXN0U3ViaGVhZGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfTGlzdFN1YmhlYWRlcltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9NZW51ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vTWVudVwiKSk7XG5cbk9iamVjdC5rZXlzKF9NZW51KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfTWVudVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9NZW51SXRlbSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL01lbnVJdGVtXCIpKTtcblxuT2JqZWN0LmtleXMoX01lbnVJdGVtKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfTWVudUl0ZW1ba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfTWVudUxpc3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9NZW51TGlzdFwiKSk7XG5cbk9iamVjdC5rZXlzKF9NZW51TGlzdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX01lbnVMaXN0W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX01vYmlsZVN0ZXBwZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Nb2JpbGVTdGVwcGVyXCIpKTtcblxuT2JqZWN0LmtleXMoX01vYmlsZVN0ZXBwZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Nb2JpbGVTdGVwcGVyW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX01vZGFsID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vTW9kYWxcIikpO1xuXG5PYmplY3Qua2V5cyhfTW9kYWwpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Nb2RhbFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9OYXRpdmVTZWxlY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9OYXRpdmVTZWxlY3RcIikpO1xuXG5PYmplY3Qua2V5cyhfTmF0aXZlU2VsZWN0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfTmF0aXZlU2VsZWN0W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX05vU3NyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vTm9Tc3JcIikpO1xuXG5PYmplY3Qua2V5cyhfTm9Tc3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Ob1NzcltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9PdXRsaW5lZElucHV0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vT3V0bGluZWRJbnB1dFwiKSk7XG5cbk9iamVjdC5rZXlzKF9PdXRsaW5lZElucHV0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfT3V0bGluZWRJbnB1dFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9QYXBlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1BhcGVyXCIpKTtcblxuT2JqZWN0LmtleXMoX1BhcGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfUGFwZXJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfUG9wb3ZlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1BvcG92ZXJcIikpO1xuXG5PYmplY3Qua2V5cyhfUG9wb3ZlcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX1BvcG92ZXJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfUG9wcGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vUG9wcGVyXCIpKTtcblxuT2JqZWN0LmtleXMoX1BvcHBlcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX1BvcHBlcltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9Qb3J0YWwgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Qb3J0YWxcIikpO1xuXG5PYmplY3Qua2V5cyhfUG9ydGFsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfUG9ydGFsW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1JhZGlvID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vUmFkaW9cIikpO1xuXG5PYmplY3Qua2V5cyhfUmFkaW8pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9SYWRpb1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9SYWRpb0dyb3VwID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vUmFkaW9Hcm91cFwiKSk7XG5cbk9iamVjdC5rZXlzKF9SYWRpb0dyb3VwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfUmFkaW9Hcm91cFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9Sb290UmVmID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vUm9vdFJlZlwiKSk7XG5cbk9iamVjdC5rZXlzKF9Sb290UmVmKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfUm9vdFJlZltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9TZWxlY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9TZWxlY3RcIikpO1xuXG5PYmplY3Qua2V5cyhfU2VsZWN0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfU2VsZWN0W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1NsaWRlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vU2xpZGVcIikpO1xuXG5PYmplY3Qua2V5cyhfU2xpZGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9TbGlkZVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9TbGlkZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9TbGlkZXJcIikpO1xuXG5PYmplY3Qua2V5cyhfU2xpZGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfU2xpZGVyW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1NuYWNrYmFyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vU25hY2tiYXJcIikpO1xuXG5PYmplY3Qua2V5cyhfU25hY2tiYXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9TbmFja2JhcltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9TbmFja2JhckNvbnRlbnQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9TbmFja2JhckNvbnRlbnRcIikpO1xuXG5PYmplY3Qua2V5cyhfU25hY2tiYXJDb250ZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfU25hY2tiYXJDb250ZW50W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1N0ZXAgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9TdGVwXCIpKTtcblxuT2JqZWN0LmtleXMoX1N0ZXApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9TdGVwW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1N0ZXBCdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9TdGVwQnV0dG9uXCIpKTtcblxuT2JqZWN0LmtleXMoX1N0ZXBCdXR0b24pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9TdGVwQnV0dG9uW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1N0ZXBDb25uZWN0b3IgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9TdGVwQ29ubmVjdG9yXCIpKTtcblxuT2JqZWN0LmtleXMoX1N0ZXBDb25uZWN0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9TdGVwQ29ubmVjdG9yW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1N0ZXBDb250ZW50ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vU3RlcENvbnRlbnRcIikpO1xuXG5PYmplY3Qua2V5cyhfU3RlcENvbnRlbnQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9TdGVwQ29udGVudFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9TdGVwSWNvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1N0ZXBJY29uXCIpKTtcblxuT2JqZWN0LmtleXMoX1N0ZXBJY29uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfU3RlcEljb25ba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfU3RlcExhYmVsID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vU3RlcExhYmVsXCIpKTtcblxuT2JqZWN0LmtleXMoX1N0ZXBMYWJlbCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX1N0ZXBMYWJlbFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9TdGVwcGVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vU3RlcHBlclwiKSk7XG5cbk9iamVjdC5rZXlzKF9TdGVwcGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfU3RlcHBlcltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vU3ZnSWNvblwiKSk7XG5cbk9iamVjdC5rZXlzKF9TdmdJY29uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfU3ZnSWNvbltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9Td2lwZWFibGVEcmF3ZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Td2lwZWFibGVEcmF3ZXJcIikpO1xuXG5PYmplY3Qua2V5cyhfU3dpcGVhYmxlRHJhd2VyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfU3dpcGVhYmxlRHJhd2VyW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1N3aXRjaCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1N3aXRjaFwiKSk7XG5cbk9iamVjdC5rZXlzKF9Td2l0Y2gpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Td2l0Y2hba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfVGFiID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vVGFiXCIpKTtcblxuT2JqZWN0LmtleXMoX1RhYikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX1RhYltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9UYWJsZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1RhYmxlXCIpKTtcblxuT2JqZWN0LmtleXMoX1RhYmxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfVGFibGVba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfVGFibGVCb2R5ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vVGFibGVCb2R5XCIpKTtcblxuT2JqZWN0LmtleXMoX1RhYmxlQm9keSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX1RhYmxlQm9keVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9UYWJsZUNlbGwgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9UYWJsZUNlbGxcIikpO1xuXG5PYmplY3Qua2V5cyhfVGFibGVDZWxsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfVGFibGVDZWxsW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1RhYmxlQ29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vVGFibGVDb250YWluZXJcIikpO1xuXG5PYmplY3Qua2V5cyhfVGFibGVDb250YWluZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9UYWJsZUNvbnRhaW5lcltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9UYWJsZUZvb3RlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1RhYmxlRm9vdGVyXCIpKTtcblxuT2JqZWN0LmtleXMoX1RhYmxlRm9vdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfVGFibGVGb290ZXJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfVGFibGVIZWFkID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vVGFibGVIZWFkXCIpKTtcblxuT2JqZWN0LmtleXMoX1RhYmxlSGVhZCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX1RhYmxlSGVhZFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9UYWJsZVBhZ2luYXRpb24gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9UYWJsZVBhZ2luYXRpb25cIikpO1xuXG5PYmplY3Qua2V5cyhfVGFibGVQYWdpbmF0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfVGFibGVQYWdpbmF0aW9uW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1RhYmxlUm93ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vVGFibGVSb3dcIikpO1xuXG5PYmplY3Qua2V5cyhfVGFibGVSb3cpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9UYWJsZVJvd1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9UYWJsZVNvcnRMYWJlbCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1RhYmxlU29ydExhYmVsXCIpKTtcblxuT2JqZWN0LmtleXMoX1RhYmxlU29ydExhYmVsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfVGFibGVTb3J0TGFiZWxba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfVGFicyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1RhYnNcIikpO1xuXG5PYmplY3Qua2V5cyhfVGFicykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX1RhYnNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfVGFiU2Nyb2xsQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vVGFiU2Nyb2xsQnV0dG9uXCIpKTtcblxuT2JqZWN0LmtleXMoX1RhYlNjcm9sbEJ1dHRvbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX1RhYlNjcm9sbEJ1dHRvbltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9UZXh0RmllbGQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9UZXh0RmllbGRcIikpO1xuXG5PYmplY3Qua2V5cyhfVGV4dEZpZWxkKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfVGV4dEZpZWxkW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1RleHRhcmVhQXV0b3NpemUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9UZXh0YXJlYUF1dG9zaXplXCIpKTtcblxuT2JqZWN0LmtleXMoX1RleHRhcmVhQXV0b3NpemUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9UZXh0YXJlYUF1dG9zaXplW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1Rvb2xiYXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Ub29sYmFyXCIpKTtcblxuT2JqZWN0LmtleXMoX1Rvb2xiYXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Ub29sYmFyW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1Rvb2x0aXAgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Ub29sdGlwXCIpKTtcblxuT2JqZWN0LmtleXMoX1Rvb2x0aXApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9Ub29sdGlwW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1R5cG9ncmFwaHkgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9UeXBvZ3JhcGh5XCIpKTtcblxuT2JqZWN0LmtleXMoX1R5cG9ncmFwaHkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9UeXBvZ3JhcGh5W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG52YXIgX1Vuc3RhYmxlX1RyYXBGb2N1cyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1Vuc3RhYmxlX1RyYXBGb2N1c1wiKSk7XG5cbk9iamVjdC5rZXlzKF9VbnN0YWJsZV9UcmFwRm9jdXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9VbnN0YWJsZV9UcmFwRm9jdXNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfdXNlTWVkaWFRdWVyeSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3VzZU1lZGlhUXVlcnlcIikpO1xuXG5PYmplY3Qua2V5cyhfdXNlTWVkaWFRdWVyeSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX3VzZU1lZGlhUXVlcnlba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfdXNlU2Nyb2xsVHJpZ2dlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3VzZVNjcm9sbFRyaWdnZXJcIikpO1xuXG5PYmplY3Qua2V5cyhfdXNlU2Nyb2xsVHJpZ2dlcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX3VzZVNjcm9sbFRyaWdnZXJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfd2l0aE1vYmlsZURpYWxvZyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3dpdGhNb2JpbGVEaWFsb2dcIikpO1xuXG5PYmplY3Qua2V5cyhfd2l0aE1vYmlsZURpYWxvZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX3dpdGhNb2JpbGVEaWFsb2dba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbnZhciBfd2l0aFdpZHRoID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vd2l0aFdpZHRoXCIpKTtcblxuT2JqZWN0LmtleXMoX3dpdGhXaWR0aCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX3dpdGhXaWR0aFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9ab29tID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vWm9vbVwiKSk7XG5cbk9iamVjdC5rZXlzKF9ab29tKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfWm9vbVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTsiLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdG8tY2xpcGJvYXJkJztcbmltcG9ydCB7IGdldEJsb2NrRXhwbG9yZXJMaW5rIH0gZnJvbSAnQG1ldGFtYXNrL2V0aGVyc2Nhbi1saW5rJztcbmltcG9ydCBTZW5kZXJUb1JlY2lwaWVudCBmcm9tICcuLi8uLi91aS9zZW5kZXItdG8tcmVjaXBpZW50JztcbmltcG9ydCB7IERFRkFVTFRfVkFSSUFOVCB9IGZyb20gJy4uLy4uL3VpL3NlbmRlci10by1yZWNpcGllbnQvc2VuZGVyLXRvLXJlY2lwaWVudC5jb25zdGFudHMnO1xuaW1wb3J0IERpc2Nsb3N1cmUgZnJvbSAnLi4vLi4vdWkvZGlzY2xvc3VyZSc7XG5pbXBvcnQgVHJhbnNhY3Rpb25BY3Rpdml0eUxvZyBmcm9tICcuLi90cmFuc2FjdGlvbi1hY3Rpdml0eS1sb2cnO1xuaW1wb3J0IFRyYW5zYWN0aW9uQnJlYWtkb3duIGZyb20gJy4uL3RyYW5zYWN0aW9uLWJyZWFrZG93bic7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uL3VpL2J1dHRvbic7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi8uLi91aS90b29sdGlwJztcbmltcG9ydCBDYW5jZWxCdXR0b24gZnJvbSAnLi4vY2FuY2VsLWJ1dHRvbic7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi8uLi91aS9wb3BvdmVyJztcbmltcG9ydCB7IFNFQ09ORCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdGltZSc7XG5pbXBvcnQgeyBUUkFOU0FDVElPTl9UWVBFUyB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgZ2V0VVJMSG9zdE5hbWUgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL3V0aWxzL3V0aWwnO1xuaW1wb3J0IFRyYW5zYWN0aW9uRGVjb2RpbmcgZnJvbSAnLi4vdHJhbnNhY3Rpb24tZGVjb2RpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc2FjdGlvbkxpc3RJdGVtRGV0YWlscyBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIG1ldHJpY3NFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdHJhY2tFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICByZWNpcGllbnRFbnM6IG51bGwsXG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25SZXRyeTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2hvd0NhbmNlbDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1NwZWVkVXA6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dSZXRyeTogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNFYXJsaWVzdE5vbmNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBwcmltYXJ5Q3VycmVuY3k6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdHJhbnNhY3Rpb25Hcm91cDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcmVjaXBpZW50RW5zOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHJlY2lwaWVudEFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcnBjUHJlZnM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2VuZGVyQWRkcmVzczogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHRyeVJldmVyc2VSZXNvbHZlQWRkcmVzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZW5kZXJOaWNrbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHJlY2lwaWVudE5pY2tuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRyYW5zYWN0aW9uU3RhdHVzOiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBqdXN0Q29waWVkOiBmYWxzZSxcbiAgfTtcblxuICBoYW5kbGVCbG9ja0V4cGxvcmVyQ2xpY2sgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdHJhbnNhY3Rpb25Hcm91cDogeyBwcmltYXJ5VHJhbnNhY3Rpb24gfSxcbiAgICAgIHJwY1ByZWZzLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGJsb2NrRXhwbG9yZXJMaW5rID0gZ2V0QmxvY2tFeHBsb3JlckxpbmsoXG4gICAgICBwcmltYXJ5VHJhbnNhY3Rpb24sXG4gICAgICBycGNQcmVmcyxcbiAgICApO1xuXG4gICAgdGhpcy5jb250ZXh0LnRyYWNrRXZlbnQoe1xuICAgICAgY2F0ZWdvcnk6ICdUcmFuc2FjdGlvbnMnLFxuICAgICAgZXZlbnQ6ICdDbGlja2VkIEJsb2NrIEV4cGxvcmVyIExpbmsnLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBsaW5rX3R5cGU6ICdUcmFuc2FjdGlvbiBCbG9jayBFeHBsb3JlcicsXG4gICAgICAgIGFjdGlvbjogJ1RyYW5zYWN0aW9uIERldGFpbHMnLFxuICAgICAgICBibG9ja19leHBsb3Jlcl9kb21haW46IGdldFVSTEhvc3ROYW1lKGJsb2NrRXhwbG9yZXJMaW5rKSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBnbG9iYWwucGxhdGZvcm0ub3BlblRhYih7XG4gICAgICB1cmw6IGJsb2NrRXhwbG9yZXJMaW5rLFxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZUNhbmNlbCA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IHsgb25DYW5jZWwsIG9uQ2xvc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgb25DYW5jZWwoZXZlbnQpO1xuICAgIG9uQ2xvc2UoKTtcbiAgfTtcblxuICBoYW5kbGVSZXRyeSA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IHsgb25DbG9zZSwgb25SZXRyeSB9ID0gdGhpcy5wcm9wcztcbiAgICBvblJldHJ5KGV2ZW50KTtcbiAgICBvbkNsb3NlKCk7XG4gIH07XG5cbiAgaGFuZGxlQ29weVR4SWQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyB0cmFuc2FjdGlvbkdyb3VwIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcHJpbWFyeVRyYW5zYWN0aW9uOiB0cmFuc2FjdGlvbiB9ID0gdHJhbnNhY3Rpb25Hcm91cDtcbiAgICBjb25zdCB7IGhhc2ggfSA9IHRyYW5zYWN0aW9uO1xuXG4gICAgdGhpcy5jb250ZXh0Lm1ldHJpY3NFdmVudCh7XG4gICAgICBldmVudE9wdHM6IHtcbiAgICAgICAgY2F0ZWdvcnk6ICdOYXZpZ2F0aW9uJyxcbiAgICAgICAgYWN0aW9uOiAnQWN0aXZpdHkgTG9nJyxcbiAgICAgICAgbmFtZTogJ0NvcGllZCBUcmFuc2FjdGlvbiBJRCcsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGp1c3RDb3BpZWQ6IHRydWUgfSwgKCkgPT4ge1xuICAgICAgY29weVRvQ2xpcGJvYXJkKGhhc2gpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNldFN0YXRlKHsganVzdENvcGllZDogZmFsc2UgfSksIFNFQ09ORCk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyByZWNpcGllbnRBZGRyZXNzLCB0cnlSZXZlcnNlUmVzb2x2ZUFkZHJlc3MgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAocmVjaXBpZW50QWRkcmVzcykge1xuICAgICAgdHJ5UmV2ZXJzZVJlc29sdmVBZGRyZXNzKHJlY2lwaWVudEFkZHJlc3MpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7IGp1c3RDb3BpZWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qge1xuICAgICAgdHJhbnNhY3Rpb25Hcm91cCxcbiAgICAgIHByaW1hcnlDdXJyZW5jeSxcbiAgICAgIHNob3dTcGVlZFVwLFxuICAgICAgc2hvd1JldHJ5LFxuICAgICAgcmVjaXBpZW50RW5zLFxuICAgICAgcmVjaXBpZW50QWRkcmVzcyxcbiAgICAgIHNlbmRlckFkZHJlc3MsXG4gICAgICBpc0VhcmxpZXN0Tm9uY2UsXG4gICAgICBzZW5kZXJOaWNrbmFtZSxcbiAgICAgIHRpdGxlLFxuICAgICAgb25DbG9zZSxcbiAgICAgIHJlY2lwaWVudE5pY2tuYW1lLFxuICAgICAgc2hvd0NhbmNlbCxcbiAgICAgIHRyYW5zYWN0aW9uU3RhdHVzOiBUcmFuc2FjdGlvblN0YXR1cyxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7XG4gICAgICBwcmltYXJ5VHJhbnNhY3Rpb246IHRyYW5zYWN0aW9uLFxuICAgICAgaW5pdGlhbFRyYW5zYWN0aW9uOiB7IHR5cGUgfSxcbiAgICB9ID0gdHJhbnNhY3Rpb25Hcm91cDtcbiAgICBjb25zdCB7IGhhc2ggfSA9IHRyYW5zYWN0aW9uO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQb3BvdmVyIHRpdGxlPXt0aXRsZX0gb25DbG9zZT17b25DbG9zZX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhbnNhY3Rpb24tbGlzdC1pdGVtLWRldGFpbHNcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyYW5zYWN0aW9uLWxpc3QtaXRlbS1kZXRhaWxzX19vcGVyYXRpb25zXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyYW5zYWN0aW9uLWxpc3QtaXRlbS1kZXRhaWxzX19oZWFkZXItYnV0dG9uc1wiPlxuICAgICAgICAgICAgICB7c2hvd1NwZWVkVXAgJiYgKFxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlUmV0cnl9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0cmFuc2FjdGlvbi1saXN0LWl0ZW0tZGV0YWlsc19faGVhZGVyLWJ1dHRvbi1yb3VuZGVkLWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge3QoJ3NwZWVkVXAnKX1cbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge3Nob3dDYW5jZWwgJiYgKFxuICAgICAgICAgICAgICAgIDxDYW5jZWxCdXR0b25cbiAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uPXt0cmFuc2FjdGlvbn1cbiAgICAgICAgICAgICAgICAgIGNhbmNlbFRyYW5zYWN0aW9uPXt0aGlzLmhhbmRsZUNhbmNlbH1cbiAgICAgICAgICAgICAgICAgIGRldGFpbHNNb2RhbFxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtzaG93UmV0cnkgJiYgKFxuICAgICAgICAgICAgICAgIDxUb29sdGlwIHRpdGxlPXt0KCdyZXRyeVRyYW5zYWN0aW9uJyl9PlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwicmFpc2VkXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVSZXRyeX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidHJhbnNhY3Rpb24tbGlzdC1pdGVtLWRldGFpbHNfX2hlYWRlci1idXR0b25cIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1zeW5jXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cmFuc2FjdGlvbi1saXN0LWl0ZW0tZGV0YWlsc19faGVhZGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyYW5zYWN0aW9uLWxpc3QtaXRlbS1kZXRhaWxzX190eC1zdGF0dXNcIj5cbiAgICAgICAgICAgICAgPGRpdj5TdGF0dXM8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8VHJhbnNhY3Rpb25TdGF0dXMgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhbnNhY3Rpb24tbGlzdC1pdGVtLWRldGFpbHNfX3R4LWhhc2hcIj5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUJsb2NrRXhwbG9yZXJDbGlja31cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshaGFzaH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7dCgndmlld09uQmxvY2tFeHBsb3JlcicpfVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8VG9vbHRpcFxuICAgICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzTmFtZT1cInRyYW5zYWN0aW9uLWxpc3QtaXRlbS1kZXRhaWxzX19oZWFkZXItYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckNsYXNzTmFtZT1cInRyYW5zYWN0aW9uLWxpc3QtaXRlbS1kZXRhaWxzX19oZWFkZXItYnV0dG9uLXRvb2x0aXAtY29udGFpbmVyXCJcbiAgICAgICAgICAgICAgICAgIHRpdGxlPXtqdXN0Q29waWVkID8gdCgnY29waWVkRXhjbGFtYXRpb24nKSA6IG51bGx9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ29weVR4SWR9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshaGFzaH1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge3QoJ2NvcHlUcmFuc2FjdGlvbklkJyl9XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cmFuc2FjdGlvbi1saXN0LWl0ZW0tZGV0YWlsc19fYm9keVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cmFuc2FjdGlvbi1saXN0LWl0ZW0tZGV0YWlsc19fc2VuZGVyLXRvLXJlY2lwaWVudC1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgPGRpdj57dCgnZnJvbScpfTwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2Pnt0KCd0bycpfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyYW5zYWN0aW9uLWxpc3QtaXRlbS1kZXRhaWxzX19zZW5kZXItdG8tcmVjaXBpZW50LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8U2VuZGVyVG9SZWNpcGllbnRcbiAgICAgICAgICAgICAgICB3YXJuVXNlck9uQWNjb3VudE1pc21hdGNoPXtmYWxzZX1cbiAgICAgICAgICAgICAgICB2YXJpYW50PXtERUZBVUxUX1ZBUklBTlR9XG4gICAgICAgICAgICAgICAgYWRkcmVzc09ubHlcbiAgICAgICAgICAgICAgICByZWNpcGllbnRFbnM9e3JlY2lwaWVudEVuc31cbiAgICAgICAgICAgICAgICByZWNpcGllbnRBZGRyZXNzPXtyZWNpcGllbnRBZGRyZXNzfVxuICAgICAgICAgICAgICAgIHJlY2lwaWVudE5pY2tuYW1lPXtyZWNpcGllbnROaWNrbmFtZX1cbiAgICAgICAgICAgICAgICBzZW5kZXJOYW1lPXtzZW5kZXJOaWNrbmFtZX1cbiAgICAgICAgICAgICAgICBzZW5kZXJBZGRyZXNzPXtzZW5kZXJBZGRyZXNzfVxuICAgICAgICAgICAgICAgIG9uUmVjaXBpZW50Q2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5tZXRyaWNzRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBldmVudE9wdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogJ05hdmlnYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ0FjdGl2aXR5IExvZycsXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0NvcGllZCBcIlRvXCIgQWRkcmVzcycsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIG9uU2VuZGVyQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5tZXRyaWNzRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBldmVudE9wdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogJ05hdmlnYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ0FjdGl2aXR5IExvZycsXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0NvcGllZCBcIkZyb21cIiBBZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhbnNhY3Rpb24tbGlzdC1pdGVtLWRldGFpbHNfX2NhcmRzLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8VHJhbnNhY3Rpb25CcmVha2Rvd25cbiAgICAgICAgICAgICAgICBub25jZT17dHJhbnNhY3Rpb25Hcm91cC5pbml0aWFsVHJhbnNhY3Rpb24udHhQYXJhbXMubm9uY2V9XG4gICAgICAgICAgICAgICAgaXNUb2tlbkFwcHJvdmU9e3R5cGUgPT09IFRSQU5TQUNUSU9OX1RZUEVTLlRPS0VOX01FVEhPRF9BUFBST1ZFfVxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uPXt0cmFuc2FjdGlvbn1cbiAgICAgICAgICAgICAgICBwcmltYXJ5Q3VycmVuY3k9e3ByaW1hcnlDdXJyZW5jeX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0cmFuc2FjdGlvbi1saXN0LWl0ZW0tZGV0YWlsc19fdHJhbnNhY3Rpb24tYnJlYWtkb3duXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge3RyYW5zYWN0aW9uR3JvdXAuaW5pdGlhbFRyYW5zYWN0aW9uLnR5cGUgIT09XG4gICAgICAgICAgICAgICAgVFJBTlNBQ1RJT05fVFlQRVMuSU5DT01JTkcgJiYgKFxuICAgICAgICAgICAgICAgIDxEaXNjbG9zdXJlIHRpdGxlPXt0KCdhY3Rpdml0eUxvZycpfSBzaXplPVwic21hbGxcIj5cbiAgICAgICAgICAgICAgICAgIDxUcmFuc2FjdGlvbkFjdGl2aXR5TG9nXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uR3JvdXA9e3RyYW5zYWN0aW9uR3JvdXB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRyYW5zYWN0aW9uLWxpc3QtaXRlbS1kZXRhaWxzX190cmFuc2FjdGlvbi1hY3Rpdml0eS1sb2dcIlxuICAgICAgICAgICAgICAgICAgICBvbkNhbmNlbD17dGhpcy5oYW5kbGVDYW5jZWx9XG4gICAgICAgICAgICAgICAgICAgIG9uUmV0cnk9e3RoaXMuaGFuZGxlUmV0cnl9XG4gICAgICAgICAgICAgICAgICAgIGlzRWFybGllc3ROb25jZT17aXNFYXJsaWVzdE5vbmNlfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L0Rpc2Nsb3N1cmU+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHt0cmFuc2FjdGlvbkdyb3VwLmluaXRpYWxUcmFuc2FjdGlvbj8udHhQYXJhbXM/LmRhdGEgPyAoXG4gICAgICAgICAgICAgICAgPERpc2Nsb3N1cmUgdGl0bGU9XCJUcmFuc2FjdGlvbiBkYXRhXCIgc2l6ZT1cInNtYWxsXCI+XG4gICAgICAgICAgICAgICAgICA8VHJhbnNhY3Rpb25EZWNvZGluZ1xuICAgICAgICAgICAgICAgICAgICB0aXRsZT17dCgndHJhbnNhY3Rpb25EYXRhJyl9XG4gICAgICAgICAgICAgICAgICAgIHRvPXt0cmFuc2FjdGlvbkdyb3VwLmluaXRpYWxUcmFuc2FjdGlvbi50eFBhcmFtcz8udG99XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RGF0YT17XG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25Hcm91cC5pbml0aWFsVHJhbnNhY3Rpb24udHhQYXJhbXM/LmRhdGFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L0Rpc2Nsb3N1cmU+XG4gICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9Qb3BvdmVyPlxuICAgICk7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gZ2V0RGF0YUZyb21EYXRhVHJhbnNmZXIoZGF0YVRyYW5zZmVyLCB0eXBlc1RvVHJ5LCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gdHlwZXNUb1RyeS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdFNvRmFyLCB0eXBlVG9UcnkpIHsgcmV0dXJuIHJlc3VsdFNvRmFyIHx8IGRhdGFUcmFuc2Zlci5nZXREYXRhKHR5cGVUb1RyeSk7IH0sICcnKTtcbiAgICByZXR1cm4gcmVzdWx0ICE9IG51bGwgPyByZXN1bHQgOiBkZWZhdWx0VmFsdWU7XG59XG5leHBvcnRzLmdldERhdGFGcm9tRGF0YVRyYW5zZmVyID0gZ2V0RGF0YUZyb21EYXRhVHJhbnNmZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2NrSWNvbihwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIHZlcnNpb249XCIxLjFcIlxuICAgICAgaWQ9XCJDYXBhXzFcIlxuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICB4bWxuc1hsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiXG4gICAgICB4PVwiMHB4XCJcbiAgICAgIHk9XCIwcHhcIlxuICAgICAgd2lkdGg9XCI0MDEuOTk4cHhcIlxuICAgICAgaGVpZ2h0PVwiNDAxLjk5OHB4XCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgNDAxLjk5OCA0MDEuOTk4XCJcbiAgICAgIHN0eWxlPXt7IGVuYWJsZUJhY2tncm91bmQ6ICduZXcgMCAwIDQwMS45OTggNDAxLjk5OCcgfX1cbiAgICAgIHhtbFNwYWNlPVwicHJlc2VydmVcIlxuICAgICAgey4uLnByb3BzfVxuICAgID5cbiAgICAgIDxnPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNMzU3LjQ1LDE5MC43MjFjLTUuMzMxLTUuMzMtMTEuOC03Ljk5My0xOS40MTctNy45OTNoLTkuMTMxdi01NC44MjFjMC0zNS4wMjItMTIuNTU5LTY1LjA5My0zNy42ODUtOTAuMjE4XG4gICAgICAgICAgICBDMjY2LjA5MywxMi41NjMsMjM2LjAyNSwwLDIwMC45OTgsMGMtMzUuMDI2LDAtNjUuMSwxMi41NjMtOTAuMjIyLDM3LjY4OEM4NS42NSw2Mi44MTQsNzMuMDkxLDkyLjg4NCw3My4wOTEsMTI3LjkwN3Y1NC44MjFcbiAgICAgICAgICAgIGgtOS4xMzVjLTcuNjExLDAtMTQuMDg0LDIuNjYzLTE5LjQxNCw3Ljk5M2MtNS4zMyw1LjMyNi03Ljk5NCwxMS43OTktNy45OTQsMTkuNDE3VjM3NC41OWMwLDcuNjExLDIuNjY1LDE0LjA4Niw3Ljk5NCwxOS40MTdcbiAgICAgICAgICAgIGM1LjMzLDUuMzI1LDExLjgwMyw3Ljk5MSwxOS40MTQsNy45OTFIMzM4LjA0YzcuNjE3LDAsMTQuMDg1LTIuNjYzLDE5LjQxNy03Ljk5MWM1LjMyNS01LjMzMSw3Ljk5NC0xMS44MDYsNy45OTQtMTkuNDE3VjIxMC4xMzVcbiAgICAgICAgICAgIEMzNjUuNDU1LDIwMi41MjMsMzYyLjc4MiwxOTYuMDUxLDM1Ny40NSwxOTAuNzIxeiBNMjc0LjA4NywxODIuNzI4SDEyNy45MDl2LTU0LjgyMWMwLTIwLjE3NSw3LjEzOS0zNy40MDIsMjEuNDE0LTUxLjY3NVxuICAgICAgICAgICAgYzE0LjI3Ny0xNC4yNzUsMzEuNTAxLTIxLjQxMSw1MS42NzgtMjEuNDExYzIwLjE3OSwwLDM3LjM5OSw3LjEzNSw1MS42NzcsMjEuNDExYzE0LjI3MSwxNC4yNzIsMjEuNDA5LDMxLjUsMjEuNDA5LDUxLjY3NVYxODIuNzI4XG4gICAgICAgICAgICB6XCJcbiAgICAgICAgLz5cbiAgICAgIDwvZz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGlzRGlzcG9zYWJsZTtcblxuZnVuY3Rpb24gaXNEaXNwb3NhYmxlKG9iaikge1xuICByZXR1cm4gQm9vbGVhbihvYmogJiYgdHlwZW9mIG9iai5kaXNwb3NlID09PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbi8qKlxuICogVGhlIGJhc2ljIGRpc3Bvc2FibGUuXG4gKi9cblxudmFyIERpc3Bvc2FibGUgPSAoZnVuY3Rpb24gKCkge1xuICBfY3JlYXRlQ2xhc3MoRGlzcG9zYWJsZSwgbnVsbCwgW3tcbiAgICBrZXk6IFwiZW1wdHlcIixcbiAgICB2YWx1ZTogeyBkaXNwb3NlOiBub29wIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gRGlzcG9zYWJsZShhY3Rpb24pIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGlzcG9zYWJsZSk7XG5cbiAgICB0aGlzLmlzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbiB8fCBub29wO1xuICB9XG5cbiAgRGlzcG9zYWJsZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgaWYgKCF0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgIHRoaXMuYWN0aW9uLmNhbGwobnVsbCk7XG4gICAgICB0aGlzLmlzRGlzcG9zZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gRGlzcG9zYWJsZTtcbn0pKCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gRGlzcG9zYWJsZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG52YXIgX2lzRGlzcG9zYWJsZSA9IHJlcXVpcmUoJy4vaXNEaXNwb3NhYmxlJyk7XG5cbnZhciBfaXNEaXNwb3NhYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzRGlzcG9zYWJsZSk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGdyb3VwIG9mIGRpc3Bvc2FibGUgcmVzb3VyY2VzIHRoYXQgYXJlIGRpc3Bvc2VkIHRvZ2V0aGVyLlxuICovXG5cbnZhciBDb21wb3NpdGVEaXNwb3NhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29tcG9zaXRlRGlzcG9zYWJsZSgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZGlzcG9zYWJsZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGRpc3Bvc2FibGVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wb3NpdGVEaXNwb3NhYmxlKTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGRpc3Bvc2FibGVzWzBdKSAmJiBkaXNwb3NhYmxlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGRpc3Bvc2FibGVzID0gZGlzcG9zYWJsZXNbMF07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwb3NhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFfaXNEaXNwb3NhYmxlMlsnZGVmYXVsdCddKGRpc3Bvc2FibGVzW2ldKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgZGlzcG9zYWJsZScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBkaXNwb3NhYmxlcztcbiAgICB0aGlzLmlzRGlzcG9zZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgZGlzcG9zYWJsZSB0byB0aGUgQ29tcG9zaXRlRGlzcG9zYWJsZSBvciBkaXNwb3NlcyB0aGUgZGlzcG9zYWJsZSBpZiB0aGUgQ29tcG9zaXRlRGlzcG9zYWJsZSBpcyBkaXNwb3NlZC5cbiAgICogQHBhcmFtIHtEaXNwb3NhYmxlfSBpdGVtIERpc3Bvc2FibGUgdG8gYWRkLlxuICAgKi9cblxuICBDb21wb3NpdGVEaXNwb3NhYmxlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoaXRlbSkge1xuICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgIGl0ZW0uZGlzcG9zZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc3Bvc2FibGVzLnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuZCBkaXNwb3NlcyB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhIGRpc3Bvc2FibGUgZnJvbSB0aGUgQ29tcG9zaXRlRGlzcG9zYWJsZS5cbiAgICogQHBhcmFtIHtEaXNwb3NhYmxlfSBpdGVtIERpc3Bvc2FibGUgdG8gcmVtb3ZlLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiBmb3VuZDsgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cblxuICBDb21wb3NpdGVEaXNwb3NhYmxlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoaXRlbSkge1xuICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLmRpc3Bvc2FibGVzLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuZGlzcG9zYWJsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICBpdGVtLmRpc3Bvc2UoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogRGlzcG9zZXMgYWxsIGRpc3Bvc2FibGVzIGluIHRoZSBncm91cCBhbmQgcmVtb3ZlcyB0aGVtIGZyb20gdGhlIGdyb3VwLlxuICAgKi9cblxuICBDb21wb3NpdGVEaXNwb3NhYmxlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxlbiA9IHRoaXMuZGlzcG9zYWJsZXMubGVuZ3RoO1xuICAgIHZhciBjdXJyZW50RGlzcG9zYWJsZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjdXJyZW50RGlzcG9zYWJsZXNbaV0gPSB0aGlzLmRpc3Bvc2FibGVzW2ldO1xuICAgIH1cblxuICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IFtdO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGN1cnJlbnREaXNwb3NhYmxlc1tpXS5kaXNwb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBDb21wb3NpdGVEaXNwb3NhYmxlO1xufSkoKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gQ29tcG9zaXRlRGlzcG9zYWJsZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxudmFyIF9pc0Rpc3Bvc2FibGUgPSByZXF1aXJlKCcuL2lzRGlzcG9zYWJsZScpO1xuXG52YXIgX2lzRGlzcG9zYWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0Rpc3Bvc2FibGUpO1xuXG52YXIgU2VyaWFsRGlzcG9zYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlcmlhbERpc3Bvc2FibGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlcmlhbERpc3Bvc2FibGUpO1xuXG4gICAgdGhpcy5pc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB1bmRlcmx5aW5nIGRpc3Bvc2FibGUuXG4gICAqIEByZXR1cm4gVGhlIHVuZGVybHlpbmcgZGlzcG9zYWJsZS5cbiAgICovXG5cbiAgU2VyaWFsRGlzcG9zYWJsZS5wcm90b3R5cGUuZ2V0RGlzcG9zYWJsZSA9IGZ1bmN0aW9uIGdldERpc3Bvc2FibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudDtcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdW5kZXJseWluZyBkaXNwb3NhYmxlLlxuICAgKiBAcGFyYW0ge0Rpc3Bvc2FibGV9IHZhbHVlIFRoZSBuZXcgdW5kZXJseWluZyBkaXNwb3NhYmxlLlxuICAgKi9cblxuICBTZXJpYWxEaXNwb3NhYmxlLnByb3RvdHlwZS5zZXREaXNwb3NhYmxlID0gZnVuY3Rpb24gc2V0RGlzcG9zYWJsZSgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyBudWxsIDogYXJndW1lbnRzWzBdO1xuXG4gICAgaWYgKHZhbHVlICE9IG51bGwgJiYgIV9pc0Rpc3Bvc2FibGUyWydkZWZhdWx0J10odmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGVpdGhlciBhbiBlbXB0eSB2YWx1ZSBvciBhIHZhbGlkIGRpc3Bvc2FibGUnKTtcbiAgICB9XG5cbiAgICB2YXIgaXNEaXNwb3NlZCA9IHRoaXMuaXNEaXNwb3NlZDtcbiAgICB2YXIgcHJldmlvdXMgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIWlzRGlzcG9zZWQpIHtcbiAgICAgIHByZXZpb3VzID0gdGhpcy5jdXJyZW50O1xuICAgICAgdGhpcy5jdXJyZW50ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICBwcmV2aW91cy5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcG9zZWQgJiYgdmFsdWUpIHtcbiAgICAgIHZhbHVlLmRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERpc3Bvc2VzIHRoZSB1bmRlcmx5aW5nIGRpc3Bvc2FibGUgYXMgd2VsbCBhcyBhbGwgZnV0dXJlIHJlcGxhY2VtZW50cy5cbiAgICovXG5cbiAgU2VyaWFsRGlzcG9zYWJsZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgdmFyIHByZXZpb3VzID0gdGhpcy5jdXJyZW50O1xuICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG5cbiAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgIHByZXZpb3VzLmRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFNlcmlhbERpc3Bvc2FibGU7XG59KSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBTZXJpYWxEaXNwb3NhYmxlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaW52YXJpYW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImludmFyaWFudFwiKSk7XG52YXIgcmVhY3RfMSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmZ1bmN0aW9uIGNsb25lV2l0aFJlZihlbGVtZW50LCBuZXdSZWYpIHtcbiAgICB2YXIgcHJldmlvdXNSZWYgPSBlbGVtZW50LnJlZjtcbiAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KHR5cGVvZiBwcmV2aW91c1JlZiAhPT0gJ3N0cmluZycsICdDYW5ub3QgY29ubmVjdCBSZWFjdCBEbkQgdG8gYW4gZWxlbWVudCB3aXRoIGFuIGV4aXN0aW5nIHN0cmluZyByZWYuICcgK1xuICAgICAgICAnUGxlYXNlIGNvbnZlcnQgaXQgdG8gdXNlIGEgY2FsbGJhY2sgcmVmIGluc3RlYWQsIG9yIHdyYXAgaXQgaW50byBhIDxzcGFuPiBvciA8ZGl2Pi4gJyArXG4gICAgICAgICdSZWFkIG1vcmU6IGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvbW9yZS1hYm91dC1yZWZzLmh0bWwjdGhlLXJlZi1jYWxsYmFjay1hdHRyaWJ1dGUnKTtcbiAgICBpZiAoIXByZXZpb3VzUmVmKSB7XG4gICAgICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcmVmIG9uIHRoZSBlbGVtZW50LCB1c2UgdGhlIG5ldyByZWYgZGlyZWN0bHlcbiAgICAgICAgcmV0dXJuIHJlYWN0XzEuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgICAgIHJlZjogbmV3UmVmLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWN0XzEuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgcmVmOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgbmV3UmVmKG5vZGUpO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzUmVmKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNSZWYobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBjbG9uZVdpdGhSZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbG9uZVdpdGhSZWYuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcmVkdXhfMSA9IHJlcXVpcmUoXCJyZWR1eFwiKTtcbnZhciByZWR1Y2Vyc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3JlZHVjZXJzXCIpKTtcbnZhciBkcmFnRHJvcF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2FjdGlvbnMvZHJhZ0Ryb3BcIikpO1xudmFyIERyYWdEcm9wTW9uaXRvckltcGxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9EcmFnRHJvcE1vbml0b3JJbXBsXCIpKTtcbnZhciBIYW5kbGVyUmVnaXN0cnlJbXBsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vSGFuZGxlclJlZ2lzdHJ5SW1wbFwiKSk7XG52YXIgRHJhZ0Ryb3BNYW5hZ2VySW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEcmFnRHJvcE1hbmFnZXJJbXBsKGNyZWF0ZUJhY2tlbmQsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0ge307IH1cbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5pc1NldFVwID0gZmFsc2U7XG4gICAgICAgIHZhciBzdG9yZSA9IHJlZHV4XzEuY3JlYXRlU3RvcmUocmVkdWNlcnNfMS5kZWZhdWx0KTtcbiAgICAgICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgICAgICB0aGlzLm1vbml0b3IgPSBuZXcgRHJhZ0Ryb3BNb25pdG9ySW1wbF8xLmRlZmF1bHQoc3RvcmUsIG5ldyBIYW5kbGVyUmVnaXN0cnlJbXBsXzEuZGVmYXVsdChzdG9yZSkpO1xuICAgICAgICB0aGlzLmJhY2tlbmQgPSBjcmVhdGVCYWNrZW5kKHRoaXMpO1xuICAgICAgICBzdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVSZWZDb3VudENoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgRHJhZ0Ryb3BNYW5hZ2VySW1wbC5wcm90b3R5cGUuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dDtcbiAgICB9O1xuICAgIERyYWdEcm9wTWFuYWdlckltcGwucHJvdG90eXBlLmdldE1vbml0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbml0b3I7XG4gICAgfTtcbiAgICBEcmFnRHJvcE1hbmFnZXJJbXBsLnByb3RvdHlwZS5nZXRCYWNrZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYWNrZW5kO1xuICAgIH07XG4gICAgRHJhZ0Ryb3BNYW5hZ2VySW1wbC5wcm90b3R5cGUuZ2V0UmVnaXN0cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbml0b3IucmVnaXN0cnk7XG4gICAgfTtcbiAgICBEcmFnRHJvcE1hbmFnZXJJbXBsLnByb3RvdHlwZS5nZXRBY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWFuYWdlciA9IHRoaXM7XG4gICAgICAgIHZhciBkaXNwYXRjaCA9IHRoaXMuc3RvcmUuZGlzcGF0Y2g7XG4gICAgICAgIGZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBhY3Rpb25DcmVhdG9yLmFwcGx5KG1hbmFnZXIsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChhY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFjdGlvbnMgPSBkcmFnRHJvcF8xLmRlZmF1bHQodGhpcyk7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhY3Rpb25zKS5yZWR1Y2UoZnVuY3Rpb24gKGJvdW5kQWN0aW9ucywga2V5KSB7XG4gICAgICAgICAgICB2YXIgYWN0aW9uID0gYWN0aW9uc1trZXldO1xuICAgICAgICAgICAgYm91bmRBY3Rpb25zW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb24pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICByZXR1cm4gYm91bmRBY3Rpb25zO1xuICAgICAgICB9LCB7fSk7XG4gICAgfTtcbiAgICBEcmFnRHJvcE1hbmFnZXJJbXBsLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChhY3Rpb24pO1xuICAgIH07XG4gICAgRHJhZ0Ryb3BNYW5hZ2VySW1wbC5wcm90b3R5cGUuaGFuZGxlUmVmQ291bnRDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzaG91bGRTZXRVcCA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5yZWZDb3VudCA+IDA7XG4gICAgICAgIGlmIChzaG91bGRTZXRVcCAmJiAhdGhpcy5pc1NldFVwKSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tlbmQuc2V0dXAoKTtcbiAgICAgICAgICAgIHRoaXMuaXNTZXRVcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXNob3VsZFNldFVwICYmIHRoaXMuaXNTZXRVcCkge1xuICAgICAgICAgICAgdGhpcy5iYWNrZW5kLnRlYXJkb3duKCk7XG4gICAgICAgICAgICB0aGlzLmlzU2V0VXAgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERyYWdEcm9wTWFuYWdlckltcGw7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gRHJhZ0Ryb3BNYW5hZ2VySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURyYWdEcm9wTWFuYWdlckltcGwuanMubWFwIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vbmV0d29ya3MtbGlzdC1pdGVtJztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmNhbGwodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IE1hdGgubWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3MucHVzaCgnJCcgKyBpKTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYm91bmRBcmdzLmpvaW4oJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIG51bWJlclRvQk4gPSByZXF1aXJlKCdudW1iZXItdG8tYm4nKTtcbnZhciBrZWNjYWsyNTYgPSByZXF1aXJlKCdqcy1zaGEzJykua2VjY2FrXzI1NjtcblxuLy8gZnJvbSBldGhlcmV1bWpzLXV0aWxcbmZ1bmN0aW9uIHN0cmlwWmVyb3MoYUlucHV0KSB7XG4gIHZhciBhID0gYUlucHV0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHZhciBmaXJzdCA9IGFbMF07IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgd2hpbGUgKGEubGVuZ3RoID4gMCAmJiBmaXJzdC50b1N0cmluZygpID09PSAnMCcpIHtcbiAgICBhID0gYS5zbGljZSgxKTtcbiAgICBmaXJzdCA9IGFbMF07XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIGJuVG9CdWZmZXIoYm5JbnB1dCkge1xuICB2YXIgYm4gPSBibklucHV0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHZhciBoZXggPSBibi50b1N0cmluZygxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgaWYgKGhleC5sZW5ndGggJSAyKSB7XG4gICAgaGV4ID0gJzAnICsgaGV4O1xuICB9XG4gIHJldHVybiBzdHJpcFplcm9zKG5ldyBCdWZmZXIoaGV4LCAnaGV4JykpO1xufVxuXG5mdW5jdGlvbiBpc0hleFN0cmluZyh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8ICF2YWx1ZS5tYXRjaCgvXjB4WzAtOUEtRmEtZl0qJC8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChsZW5ndGggJiYgdmFsdWUubGVuZ3RoICE9PSAyICsgMiAqIGxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaGV4T3JCdWZmZXIodmFsdWVJbnB1dCwgbmFtZSkge1xuICB2YXIgdmFsdWUgPSB2YWx1ZUlucHV0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgIGlmICghaXNIZXhTdHJpbmcodmFsdWUpKSB7XG4gICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobmFtZSA/ICdbZXRoanMtYWJpXSBpbnZhbGlkICcgKyBuYW1lIDogJ1tldGhqcy1hYmldIGludmFsaWQgaGV4IG9yIGJ1ZmZlciwgbXVzdCBiZSBhIHByZWZpeGVkIGFscGhhbnVtZXJpYyBldmVuIGxlbmd0aCBoZXggc3RyaW5nJyk7XG4gICAgICBlcnJvci5yZWFzb24gPSAnW2V0aGpzLWFiaV0gaW52YWxpZCBoZXggc3RyaW5nLCBoZXggbXVzdCBiZSBwcmVmaXhlZCBhbmQgYWxwaGFudW1lcmljIChlLmcuIDB4MDIzLi4pJztcbiAgICAgIGVycm9yLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygyKTtcbiAgICBpZiAodmFsdWUubGVuZ3RoICUgMikge1xuICAgICAgdmFsdWUgPSAnMCcgKyB2YWx1ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBuZXcgQnVmZmVyKHZhbHVlLCAnaGV4Jyk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGhleGxpZnkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gJzB4JyArIGJuVG9CdWZmZXIobmV3IEJOKHZhbHVlKSkudG9TdHJpbmcoJ2hleCcpO1xuICB9IGVsc2UgaWYgKHZhbHVlLm1vZCB8fCB2YWx1ZS5tb2R1bG8pIHtcbiAgICByZXR1cm4gJzB4JyArIGJuVG9CdWZmZXIodmFsdWUpLnRvU3RyaW5nKCdoZXgnKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuICcweCcgKyBoZXhPckJ1ZmZlcih2YWx1ZSkudG9TdHJpbmcoJ2hleCcpO1xuICB9XG59XG5cbi8vIGdldEtleXMoW3thOiAxLCBiOiAyfSwge2E6IDMsIGI6IDR9XSwgJ2EnKSA9PiBbMSwgM11cbmZ1bmN0aW9uIGdldEtleXMocGFyYW1zLCBrZXksIGFsbG93RW1wdHkpIHtcbiAgdmFyIHJlc3VsdCA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHBhcmFtcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1hYmldIHdoaWxlIGdldHRpbmcga2V5cywgaW52YWxpZCBwYXJhbXMgdmFsdWUgJyArIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgdmFyIHZhbHVlID0gcGFyYW1zW2ldW2tleV07IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoYWxsb3dFbXB0eSAmJiAhdmFsdWUpIHtcbiAgICAgIHZhbHVlID0gJyc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1hYmldIHdoaWxlIGdldEtleXMgZm91bmQgaW52YWxpZCBBQkkgZGF0YSBzdHJ1Y3R1cmUsIHR5cGUgdmFsdWUgbm90IHN0cmluZycpO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjb2Rlck51bWJlcihzaXplLCBzaWduZWQpIHtcbiAgcmV0dXJuIHtcbiAgICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZU51bWJlcih2YWx1ZUlucHV0KSB7XG4gICAgICB2YXIgdmFsdWUgPSB2YWx1ZUlucHV0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlLnRvU3RyaW5nICYmICh2YWx1ZS50b1R3b3MgfHwgdmFsdWUuZGl2aWRlZFRvSW50ZWdlckJ5KSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKDEwKS5zcGxpdCgnLicpWzBdO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKS5zcGxpdCgnLicpWzBdO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IG51bWJlclRvQk4odmFsdWUpO1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b1R3b3Moc2l6ZSAqIDgpLm1hc2tuKHNpemUgKiA4KTtcbiAgICAgIGlmIChzaWduZWQpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5mcm9tVHdvcyhzaXplICogOCkudG9Ud29zKDI1Nik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMik7XG4gICAgfSxcbiAgICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZU51bWJlcihkYXRhLCBvZmZzZXQpIHtcbiAgICAgIHZhciBqdW5rTGVuZ3RoID0gMzIgLSBzaXplOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICB2YXIgdmFsdWUgPSBuZXcgQk4oZGF0YS5zbGljZShvZmZzZXQgKyBqdW5rTGVuZ3RoLCBvZmZzZXQgKyAzMikpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICBpZiAoc2lnbmVkKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuZnJvbVR3b3Moc2l6ZSAqIDgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5tYXNrbihzaXplICogOCk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb25zdW1lZDogMzIsXG4gICAgICAgIHZhbHVlOiBuZXcgQk4odmFsdWUudG9TdHJpbmcoMTApKVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG52YXIgdWludDI1NkNvZGVyID0gY29kZXJOdW1iZXIoMzIsIGZhbHNlKTtcblxudmFyIGNvZGVyQm9vbGVhbiA9IHtcbiAgZW5jb2RlOiBmdW5jdGlvbiBlbmNvZGVCb29sZWFuKHZhbHVlKSB7XG4gICAgcmV0dXJuIHVpbnQyNTZDb2Rlci5lbmNvZGUodmFsdWUgPyAxIDogMCk7XG4gIH0sXG4gIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlQm9vbGVhbihkYXRhLCBvZmZzZXQpIHtcbiAgICB2YXIgcmVzdWx0ID0gdWludDI1NkNvZGVyLmRlY29kZShkYXRhLCBvZmZzZXQpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnN1bWVkOiByZXN1bHQuY29uc3VtZWQsXG4gICAgICB2YWx1ZTogIXJlc3VsdC52YWx1ZS5pc1plcm8oKVxuICAgIH07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNvZGVyRml4ZWRCeXRlcyhsZW5ndGgpIHtcbiAgcmV0dXJuIHtcbiAgICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZUZpeGVkQnl0ZXModmFsdWVJbnB1dCkge1xuICAgICAgdmFyIHZhbHVlID0gdmFsdWVJbnB1dDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgdmFsdWUgPSBoZXhPckJ1ZmZlcih2YWx1ZSk7XG5cbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDMyKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBCdWZmZXIoMzIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICByZXN1bHQuZmlsbCgwKTtcbiAgICAgIHZhbHVlLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZUZpeGVkQnl0ZXMoZGF0YSwgb2Zmc2V0KSB7XG4gICAgICBpZiAoZGF0YS5sZW5ndGggIT09IDAgJiYgZGF0YS5sZW5ndGggPCBvZmZzZXQgKyAzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1hYmldIHdoaWxlIGRlY29kaW5nIGZpeGVkIGJ5dGVzLCBpbnZhbGlkIGJ5dGVzIGRhdGEgbGVuZ3RoOiAnICsgbGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29uc3VtZWQ6IDMyLFxuICAgICAgICB2YWx1ZTogJzB4JyArIGRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBsZW5ndGgpLnRvU3RyaW5nKCdoZXgnKVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBjb2RlckFkZHJlc3MgPSB7XG4gIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlQWRkcmVzcyh2YWx1ZUlucHV0KSB7XG4gICAgdmFyIHZhbHVlID0gdmFsdWVJbnB1dDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHZhciByZXN1bHQgPSBuZXcgQnVmZmVyKDMyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmICghaXNIZXhTdHJpbmcodmFsdWUsIDIwKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtYWJpXSB3aGlsZSBlbmNvZGluZyBhZGRyZXNzLCBpbnZhbGlkIGFkZHJlc3MgdmFsdWUsIG5vdCBhbHBoYW51bWVyaWMgMjAgYnl0ZSBoZXggc3RyaW5nJyk7XG4gICAgfVxuICAgIHZhbHVlID0gaGV4T3JCdWZmZXIodmFsdWUpO1xuICAgIHJlc3VsdC5maWxsKDApO1xuICAgIHZhbHVlLmNvcHkocmVzdWx0LCAxMik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGVBZGRyZXNzKGRhdGEsIG9mZnNldCkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29uc3VtZWQ6IDMyLFxuICAgICAgICB2YWx1ZTogJzB4J1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGRhdGEubGVuZ3RoICE9PSAwICYmIGRhdGEubGVuZ3RoIDwgb2Zmc2V0ICsgMzIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLWFiaV0gd2hpbGUgZGVjb2RpbmcgYWRkcmVzcyBkYXRhLCBpbnZhbGlkIGFkZHJlc3MgZGF0YSwgaW52YWxpZCBieXRlIGxlbmd0aCAnICsgZGF0YS5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY29uc3VtZWQ6IDMyLFxuICAgICAgdmFsdWU6ICcweCcgKyBkYXRhLnNsaWNlKG9mZnNldCArIDEyLCBvZmZzZXQgKyAzMikudG9TdHJpbmcoJ2hleCcpXG4gICAgfTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZW5jb2RlRHluYW1pY0J5dGVzSGVscGVyKHZhbHVlKSB7XG4gIHZhciBkYXRhTGVuZ3RoID0gcGFyc2VJbnQoMzIgKiBNYXRoLmNlaWwodmFsdWUubGVuZ3RoIC8gMzIpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB2YXIgcGFkZGluZyA9IG5ldyBCdWZmZXIoZGF0YUxlbmd0aCAtIHZhbHVlLmxlbmd0aCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgcGFkZGluZy5maWxsKDApO1xuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KFt1aW50MjU2Q29kZXIuZW5jb2RlKHZhbHVlLmxlbmd0aCksIHZhbHVlLCBwYWRkaW5nXSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZUR5bmFtaWNCeXRlc0hlbHBlcihkYXRhLCBvZmZzZXQpIHtcbiAgaWYgKGRhdGEubGVuZ3RoICE9PSAwICYmIGRhdGEubGVuZ3RoIDwgb2Zmc2V0ICsgMzIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1hYmldIHdoaWxlIGRlY29kaW5nIGR5bmFtaWMgYnl0ZXMgZGF0YSwgaW52YWxpZCBieXRlcyBsZW5ndGg6ICcgKyBkYXRhLmxlbmd0aCArICcgc2hvdWxkIGJlIGxlc3MgdGhhbiAnICsgKG9mZnNldCArIDMyKSk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gdWludDI1NkNvZGVyLmRlY29kZShkYXRhLCBvZmZzZXQpLnZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGxlbmd0aCA9IGxlbmd0aC50b051bWJlcigpO1xuICBpZiAoZGF0YS5sZW5ndGggIT09IDAgJiYgZGF0YS5sZW5ndGggPCBvZmZzZXQgKyAzMiArIGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLWFiaV0gd2hpbGUgZGVjb2RpbmcgZHluYW1pYyBieXRlcyBkYXRhLCBpbnZhbGlkIGJ5dGVzIGxlbmd0aDogJyArIGRhdGEubGVuZ3RoICsgJyBzaG91bGQgYmUgbGVzcyB0aGFuICcgKyAob2Zmc2V0ICsgMzIgKyBsZW5ndGgpKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY29uc3VtZWQ6IHBhcnNlSW50KDMyICsgMzIgKiBNYXRoLmNlaWwobGVuZ3RoIC8gMzIpLCAxMCksXG4gICAgdmFsdWU6IGRhdGEuc2xpY2Uob2Zmc2V0ICsgMzIsIG9mZnNldCArIDMyICsgbGVuZ3RoKVxuICB9O1xufVxuXG52YXIgY29kZXJEeW5hbWljQnl0ZXMgPSB7XG4gIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlRHluYW1pY0J5dGVzKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZUR5bmFtaWNCeXRlc0hlbHBlcihoZXhPckJ1ZmZlcih2YWx1ZSkpO1xuICB9LFxuICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZUR5bmFtaWNCeXRlcyhkYXRhLCBvZmZzZXQpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGVjb2RlRHluYW1pY0J5dGVzSGVscGVyKGRhdGEsIG9mZnNldCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICByZXN1bHQudmFsdWUgPSAnMHgnICsgcmVzdWx0LnZhbHVlLnRvU3RyaW5nKCdoZXgnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBkeW5hbWljOiB0cnVlXG59O1xuXG52YXIgY29kZXJTdHJpbmcgPSB7XG4gIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZUR5bmFtaWNCeXRlc0hlbHBlcihuZXcgQnVmZmVyKHZhbHVlLCAndXRmOCcpKTtcbiAgfSxcbiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGVTdHJpbmcoZGF0YSwgb2Zmc2V0KSB7XG4gICAgdmFyIHJlc3VsdCA9IGRlY29kZUR5bmFtaWNCeXRlc0hlbHBlcihkYXRhLCBvZmZzZXQpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgcmVzdWx0LnZhbHVlID0gcmVzdWx0LnZhbHVlLnRvU3RyaW5nKCd1dGY4Jyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgZHluYW1pYzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gY29kZXJBcnJheShjb2RlciwgbGVuZ3RoSW5wdXQpIHtcbiAgcmV0dXJuIHtcbiAgICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZUFycmF5KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IEJ1ZmZlcigwKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgdmFyIGxlbmd0aCA9IGxlbmd0aElucHV0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtYWJpXSB3aGlsZSBlbmNvZGluZyBhcnJheSwgaW52YWxpZCBhcnJheSBkYXRhLCBub3QgdHlwZSBPYmplY3QgKEFycmF5KScpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGVuZ3RoID09PSAtMSkge1xuICAgICAgICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIHJlc3VsdCA9IHVpbnQyNTZDb2Rlci5lbmNvZGUobGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlbmd0aCAhPT0gdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW2V0aGpzLWFiaV0gd2hpbGUgZW5jb2RpbmcgYXJyYXksIHNpemUgbWlzbWF0Y2ggYXJyYXkgbGVuZ3RoICcgKyBsZW5ndGggKyAnIGRvZXMgbm90IGVxdWFsICcgKyB2YWx1ZS5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHRWYWx1ZSkge1xuICAgICAgICByZXN1bHQgPSBCdWZmZXIuY29uY2F0KFtyZXN1bHQsIGNvZGVyLmVuY29kZShyZXN1bHRWYWx1ZSldKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGVBcnJheShkYXRhLCBvZmZzZXRJbnB1dCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGxlbmd0aElucHV0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0SW5wdXQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIC8vIEBUT0RPOlxuICAgICAgLy8gaWYgKGRhdGEubGVuZ3RoIDwgb2Zmc2V0ICsgbGVuZ3RoICogMzIpIHsgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGFycmF5Jyk7IH1cblxuICAgICAgdmFyIGNvbnN1bWVkID0gMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgdmFyIGRlY29kZVJlc3VsdDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICBpZiAobGVuZ3RoID09PSAtMSkge1xuICAgICAgICBkZWNvZGVSZXN1bHQgPSB1aW50MjU2Q29kZXIuZGVjb2RlKGRhdGEsIG9mZnNldCk7XG4gICAgICAgIGxlbmd0aCA9IGRlY29kZVJlc3VsdC52YWx1ZS50b051bWJlcigpO1xuICAgICAgICBjb25zdW1lZCArPSBkZWNvZGVSZXN1bHQuY29uc3VtZWQ7XG4gICAgICAgIG9mZnNldCArPSBkZWNvZGVSZXN1bHQuY29uc3VtZWQ7XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICB2YXIgbG9vcFJlc3VsdCA9IGNvZGVyLmRlY29kZShkYXRhLCBvZmZzZXQpO1xuICAgICAgICBjb25zdW1lZCArPSBsb29wUmVzdWx0LmNvbnN1bWVkO1xuICAgICAgICBvZmZzZXQgKz0gbG9vcFJlc3VsdC5jb25zdW1lZDtcbiAgICAgICAgdmFsdWUucHVzaChsb29wUmVzdWx0LnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29uc3VtZWQ6IGNvbnN1bWVkLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH07XG4gICAgfSxcbiAgICBkeW5hbWljOiBsZW5ndGhJbnB1dCA9PT0gLTFcbiAgfTtcbn1cblxuLy8gQnJlYWsgdGhlIHR5cGUgdXAgaW50byBbc3RhdGljVHlwZV1bc3RhdGljQXJyYXldKltkeW5hbWljQXJyYXldPyB8IFtkeW5hbWljVHlwZV0gYW5kXG4vLyBidWlsZCB0aGUgY29kZXIgdXAgZnJvbSBpdHMgcGFydHNcbnZhciBwYXJhbVR5cGVQYXJ0ID0gbmV3IFJlZ0V4cCgvXigodT9pbnR8Ynl0ZXMpKFswLTldKil8KGFkZHJlc3N8Ym9vbHxzdHJpbmcpfChcXFsoWzAtOV0qKVxcXSkpLyk7XG5cbmZ1bmN0aW9uIGdldFBhcmFtQ29kZXIodHlwZUlucHV0KSB7XG4gIHZhciB0eXBlID0gdHlwZUlucHV0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHZhciBjb2RlciA9IG51bGw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdmFyIGludmFsaWRUeXBlRXJyb3JNZXNzYWdlID0gJ1tldGhqcy1hYmldIHdoaWxlIGdldHRpbmcgcGFyYW0gY29kZXIgKGdldFBhcmFtQ29kZXIpIHR5cGUgdmFsdWUgJyArIEpTT04uc3RyaW5naWZ5KHR5cGUpICsgJyBpcyBlaXRoZXIgaW52YWxpZCBvciB1bnN1cHBvcnRlZCBieSBldGhqcy1hYmkuJztcblxuICB3aGlsZSAodHlwZSkge1xuICAgIHZhciBwYXJ0ID0gdHlwZS5tYXRjaChwYXJhbVR5cGVQYXJ0KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmICghcGFydCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGludmFsaWRUeXBlRXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gICAgdHlwZSA9IHR5cGUuc3Vic3RyaW5nKHBhcnRbMF0ubGVuZ3RoKTtcblxuICAgIHZhciBwcmVmaXggPSBwYXJ0WzJdIHx8IHBhcnRbNF0gfHwgcGFydFs1XTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHN3aXRjaCAocHJlZml4KSB7XG4gICAgICBjYXNlICdpbnQnOmNhc2UgJ3VpbnQnOlxuICAgICAgICBpZiAoY29kZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaW52YWxpZFR5cGVFcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbnRTaXplID0gcGFyc2VJbnQocGFydFszXSB8fCAyNTYpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGlmIChpbnRTaXplID09PSAwIHx8IGludFNpemUgPiAyNTYgfHwgaW50U2l6ZSAlIDggIT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tldGhqcy1hYmldIHdoaWxlIGdldHRpbmcgcGFyYW0gY29kZXIgZm9yIHR5cGUgJyArIHR5cGUgKyAnLCBpbnZhbGlkICcgKyBwcmVmaXggKyAnPE4+IHdpZHRoOiAnICsgdHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb2RlciA9IGNvZGVyTnVtYmVyKGludFNpemUgLyA4LCBwcmVmaXggPT09ICdpbnQnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Jvb2wnOlxuICAgICAgICBpZiAoY29kZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaW52YWxpZFR5cGVFcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVyID0gY29kZXJCb29sZWFuO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgaWYgKGNvZGVyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGludmFsaWRUeXBlRXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBjb2RlciA9IGNvZGVyU3RyaW5nO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYnl0ZXMnOlxuICAgICAgICBpZiAoY29kZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaW52YWxpZFR5cGVFcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0WzNdKSB7XG4gICAgICAgICAgdmFyIHNpemUgPSBwYXJzZUludChwYXJ0WzNdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgIGlmIChzaXplID09PSAwIHx8IHNpemUgPiAzMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbZXRoanMtYWJpXSB3aGlsZSBnZXR0aW5nIHBhcmFtIGNvZGVyIGZvciBwcmVmaXggYnl0ZXMsIGludmFsaWQgdHlwZSAnICsgdHlwZSArICcsIHNpemUgJyArIHNpemUgKyAnIHNob3VsZCBiZSAwIG9yIGdyZWF0ZXIgdGhhbiAzMicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb2RlciA9IGNvZGVyRml4ZWRCeXRlcyhzaXplKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb2RlciA9IGNvZGVyRHluYW1pY0J5dGVzO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdhZGRyZXNzJzpcbiAgICAgICAgaWYgKGNvZGVyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGludmFsaWRUeXBlRXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBjb2RlciA9IGNvZGVyQWRkcmVzcztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ1tdJzpcbiAgICAgICAgaWYgKCFjb2RlciB8fCBjb2Rlci5keW5hbWljKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGludmFsaWRUeXBlRXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBjb2RlciA9IGNvZGVyQXJyYXkoY29kZXIsIC0xKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIC8vIFwiWzAtOStdXCJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICghY29kZXIgfHwgY29kZXIuZHluYW1pYykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihpbnZhbGlkVHlwZUVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlZmF1bHRTaXplID0gcGFyc2VJbnQocGFydFs2XSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgY29kZXIgPSBjb2RlckFycmF5KGNvZGVyLCBkZWZhdWx0U2l6ZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb2Rlcikge1xuICAgIHRocm93IG5ldyBFcnJvcihpbnZhbGlkVHlwZUVycm9yTWVzc2FnZSk7XG4gIH1cbiAgcmV0dXJuIGNvZGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQk46IEJOLFxuICBiblRvQnVmZmVyOiBiblRvQnVmZmVyLFxuICBpc0hleFN0cmluZzogaXNIZXhTdHJpbmcsXG4gIGhleE9yQnVmZmVyOiBoZXhPckJ1ZmZlcixcbiAgaGV4bGlmeTogaGV4bGlmeSxcbiAgc3RyaXBaZXJvczogc3RyaXBaZXJvcyxcblxuICBrZWNjYWsyNTY6IGtlY2NhazI1NixcblxuICBnZXRLZXlzOiBnZXRLZXlzLFxuICBudW1iZXJUb0JOOiBudW1iZXJUb0JOLFxuICBjb2Rlck51bWJlcjogY29kZXJOdW1iZXIsXG4gIHVpbnQyNTZDb2RlcjogdWludDI1NkNvZGVyLFxuICBjb2RlckJvb2xlYW46IGNvZGVyQm9vbGVhbixcbiAgY29kZXJGaXhlZEJ5dGVzOiBjb2RlckZpeGVkQnl0ZXMsXG4gIGNvZGVyQWRkcmVzczogY29kZXJBZGRyZXNzLFxuICBjb2RlckR5bmFtaWNCeXRlczogY29kZXJEeW5hbWljQnl0ZXMsXG4gIGNvZGVyU3RyaW5nOiBjb2RlclN0cmluZyxcbiAgY29kZXJBcnJheTogY29kZXJBcnJheSxcbiAgcGFyYW1UeXBlUGFydDogcGFyYW1UeXBlUGFydCxcbiAgZ2V0UGFyYW1Db2RlcjogZ2V0UGFyYW1Db2RlclxufTsiLCJpbXBvcnQgeyB1bmlxIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHRvQmlnTnVtYmVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvY29udmVyc2lvbi51dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiByb3VuZFRvRGVjaW1hbFBsYWNlc1JlbW92aW5nRXh0cmFaZXJvZXMoXG4gIG51bWJlcmlzaCxcbiAgbnVtYmVyT2ZEZWNpbWFsUGxhY2VzLFxuKSB7XG4gIGlmIChudW1iZXJpc2gpIHtcbiAgICByZXR1cm4gdG9CaWdOdW1iZXIuZGVjKFxuICAgICAgdG9CaWdOdW1iZXIuZGVjKG51bWJlcmlzaCkudG9GaXhlZChudW1iZXJPZkRlY2ltYWxQbGFjZXMpLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBjb25zdCByZW5kZXJGZWVSYW5nZSA9IChmZWVSYW5nZSkgPT4ge1xuICBpZiAoZmVlUmFuZ2UpIHtcbiAgICBjb25zdCBmb3JtYXR0ZWRSYW5nZSA9IHVuaXEoXG4gICAgICBmZWVSYW5nZS5tYXAoKGZlZSkgPT4gcm91bmRUb0RlY2ltYWxQbGFjZXNSZW1vdmluZ0V4dHJhWmVyb2VzKGZlZSwgMikpLFxuICAgICkuam9pbignIC0gJyk7XG4gICAgcmV0dXJuIGAke2Zvcm1hdHRlZFJhbmdlfSBHV0VJYDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9hZHZhbmNlZC1nYXMtZmVlLWlucHV0LXN1YnRleHQnO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgU2VuZFJvd0Vycm9yTWVzc2FnZSBmcm9tICcuL3NlbmQtcm93LWVycm9yLW1lc3NhZ2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5kUm93V3JhcHBlciBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGVycm9yVHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzaG93RXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICB9O1xuXG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgdDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgcmVuZGVyQW1vdW50Rm9ybVJvdygpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBlcnJvclR5cGUgPSAnJywgbGFiZWwsIHNob3dFcnJvciA9IGZhbHNlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZvcm1GaWVsZCA9IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IGNoaWxkcmVuWzFdIHx8IGNoaWxkcmVuWzBdXG4gICAgICA6IGNoaWxkcmVuO1xuICAgIGNvbnN0IGN1c3RvbUxhYmVsQ29udGVudCA9IGNoaWxkcmVuLmxlbmd0aCA+IDEgPyBjaGlsZHJlblswXSA6IG51bGw7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZW5kLXYyX19mb3JtLXJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmQtdjJfX2Zvcm0tbGFiZWxcIj5cbiAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAge2N1c3RvbUxhYmVsQ29udGVudH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZC12Ml9fZm9ybS1maWVsZC1jb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmQtdjJfX2Zvcm0tZmllbGRcIj57Zm9ybUZpZWxkfTwvZGl2PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7c2hvd0Vycm9yID8gPFNlbmRSb3dFcnJvck1lc3NhZ2UgZXJyb3JUeXBlPXtlcnJvclR5cGV9IC8+IDogbnVsbH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyRm9ybVJvdygpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBlcnJvclR5cGUgPSAnJywgbGFiZWwsIHNob3dFcnJvciA9IGZhbHNlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgZm9ybUZpZWxkID0gQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gY2hpbGRyZW5bMV0gfHwgY2hpbGRyZW5bMF1cbiAgICAgIDogY2hpbGRyZW47XG4gICAgY29uc3QgY3VzdG9tTGFiZWxDb250ZW50ID1cbiAgICAgIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGgpID4gMSA/IGNoaWxkcmVuWzBdIDogbnVsbDtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmQtdjJfX2Zvcm0tcm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZC12Ml9fZm9ybS1sYWJlbFwiPlxuICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgICB7c2hvd0Vycm9yID8gPFNlbmRSb3dFcnJvck1lc3NhZ2UgZXJyb3JUeXBlPXtlcnJvclR5cGV9IC8+IDogbnVsbH1cbiAgICAgICAgICB7Y3VzdG9tTGFiZWxDb250ZW50fVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZW5kLXYyX19mb3JtLWZpZWxkXCI+e2Zvcm1GaWVsZH08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBlcnJvclR5cGUgPSAnJyB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBlcnJvclR5cGUgPT09ICdhbW91bnQnXG4gICAgICA/IHRoaXMucmVuZGVyQW1vdW50Rm9ybVJvdygpXG4gICAgICA6IHRoaXMucmVuZGVyRm9ybVJvdygpO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBnZXRTZW5kTWF4TW9kZVN0YXRlLFxuICBpc1NlbmRGb3JtSW52YWxpZCxcbiAgdG9nZ2xlU2VuZE1heE1vZGUsXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL2R1Y2tzL3NlbmQnO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VNZXRyaWNFdmVudCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2hvb2tzL3VzZU1ldHJpY0V2ZW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQW1vdW50TWF4QnV0dG9uKCkge1xuICBjb25zdCBpc0RyYWZ0VHJhbnNhY3Rpb25JbnZhbGlkID0gdXNlU2VsZWN0b3IoaXNTZW5kRm9ybUludmFsaWQpO1xuICBjb25zdCBtYXhNb2RlT24gPSB1c2VTZWxlY3RvcihnZXRTZW5kTWF4TW9kZVN0YXRlKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB0cmFja0NsaWNrZWRNYXggPSB1c2VNZXRyaWNFdmVudCh7XG4gICAgZXZlbnRPcHRzOiB7XG4gICAgICBjYXRlZ29yeTogJ1RyYW5zYWN0aW9ucycsXG4gICAgICBhY3Rpb246ICdFZGl0IFNjcmVlbicsXG4gICAgICBuYW1lOiAnQ2xpY2tlZCBcIkFtb3VudCBNYXhcIicsXG4gICAgfSxcbiAgfSk7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuXG4gIGNvbnN0IG9uTWF4Q2xpY2sgPSAoKSA9PiB7XG4gICAgdHJhY2tDbGlja2VkTWF4KCk7XG4gICAgZGlzcGF0Y2godG9nZ2xlU2VuZE1heE1vZGUoKSk7XG4gIH07XG5cbiAgY29uc3QgZGlzYWJsZWQgPSBpc0RyYWZ0VHJhbnNhY3Rpb25JbnZhbGlkO1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3NOYW1lPVwic2VuZC12Ml9fYW1vdW50LW1heFwiXG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICBvbkNsaWNrPXtvbk1heENsaWNrfVxuICAgID5cbiAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkPXttYXhNb2RlT259IHJlYWRPbmx5IC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnc2VuZC12Ml9fYW1vdW50LW1heF9fYnV0dG9uJywge1xuICAgICAgICAgICdzZW5kLXYyX19hbW91bnQtbWF4X19idXR0b25fX2Rpc2FibGVkJzogZGlzYWJsZWQsXG4gICAgICAgIH0pfVxuICAgICAgPlxuICAgICAgICB7dCgnbWF4Jyl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0UHJlZmVyZW5jZXMgfSBmcm9tICcuLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IFVzZXJQcmVmZXJlbmNlZFRva2VuSW5wdXQgZnJvbSAnLi91c2VyLXByZWZlcmVuY2VkLXRva2VuLWlucHV0LmNvbXBvbmVudCc7XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICBjb25zdCB7IHVzZU5hdGl2ZUN1cnJlbmN5QXNQcmltYXJ5Q3VycmVuY3kgfSA9IGdldFByZWZlcmVuY2VzKHN0YXRlKTtcblxuICByZXR1cm4ge1xuICAgIHVzZU5hdGl2ZUN1cnJlbmN5QXNQcmltYXJ5Q3VycmVuY3ksXG4gIH07XG59O1xuXG5jb25zdCBVc2VyUHJlZmVyZW5jZWRUb2tlbklucHV0Q29udGFpbmVyID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFxuICBVc2VyUHJlZmVyZW5jZWRUb2tlbklucHV0LFxuKTtcblxuVXNlclByZWZlcmVuY2VkVG9rZW5JbnB1dENvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG4gIHRva2VuOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBkZWNpbWFsczogUHJvcFR5cGVzLm51bWJlcixcbiAgICBzeW1ib2w6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH0pLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBVc2VyUHJlZmVyZW5jZWRUb2tlbklucHV0Q29udGFpbmVyO1xuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGdldFByZWZlcmVuY2VzIH0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCBVc2VyUHJlZmVyZW5jZWRDdXJyZW5jeUlucHV0IGZyb20gJy4vdXNlci1wcmVmZXJlbmNlZC1jdXJyZW5jeS1pbnB1dC5jb21wb25lbnQnO1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgY29uc3QgeyB1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5IH0gPSBnZXRQcmVmZXJlbmNlcyhzdGF0ZSk7XG5cbiAgcmV0dXJuIHtcbiAgICB1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5LFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5SW5wdXQpO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tbmVnYXRlZC1jb25kaXRpb24gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJy4uLy4uLy4uLy4uL3VpL2lkZW50aWNvbic7XG5pbXBvcnQgeyB1c2VHYXNGZWVDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29udGV4dHMvZ2FzRmVlJztcblxuY29uc3QgQ29uZmlybVBhZ2VDb250YWluZXJTdW1tYXJ5ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhY3Rpb24sXG4gICAgdGl0bGUsXG4gICAgdGl0bGVDb21wb25lbnQsXG4gICAgc3VidGl0bGVDb21wb25lbnQsXG4gICAgaGlkZVN1YnRpdGxlLFxuICAgIGNsYXNzTmFtZSxcbiAgICBpZGVudGljb25BZGRyZXNzLFxuICAgIG5vbmNlLFxuICAgIG9yaWdpbixcbiAgICBoaWRlVGl0bGUsXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCB7IHN1cHBvcnRzRUlQMTU1OVYyIH0gPSB1c2VHYXNGZWVDb250ZXh0KCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnY29uZmlybS1wYWdlLWNvbnRhaW5lci1zdW1tYXJ5JywgY2xhc3NOYW1lKX0+XG4gICAgICB7b3JpZ2luID09PSAnbWV0YW1hc2snID8gbnVsbCA6IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLXN1bW1hcnlfX29yaWdpblwiPntvcmlnaW59PC9kaXY+XG4gICAgICApfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLXN1bW1hcnlfX2FjdGlvbi1yb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLXN1bW1hcnlfX2FjdGlvblwiPnthY3Rpb259PC9kaXY+XG4gICAgICAgIHtub25jZSAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLXN1bW1hcnlfX25vbmNlXCI+XG4gICAgICAgICAgICB7YCMke25vbmNlfWB9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybS1wYWdlLWNvbnRhaW5lci1zdW1tYXJ5X190aXRsZVwiPlxuICAgICAgICB7aWRlbnRpY29uQWRkcmVzcyAmJiAoXG4gICAgICAgICAgPElkZW50aWNvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29uZmlybS1wYWdlLWNvbnRhaW5lci1zdW1tYXJ5X19pZGVudGljb25cIlxuICAgICAgICAgICAgZGlhbWV0ZXI9ezM2fVxuICAgICAgICAgICAgYWRkcmVzcz17aWRlbnRpY29uQWRkcmVzc31cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICB7IWhpZGVUaXRsZSA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItc3VtbWFyeV9fdGl0bGUtdGV4dFwiPlxuICAgICAgICAgICAge3RpdGxlQ29tcG9uZW50IHx8IHRpdGxlfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgICAgeyFoaWRlU3VidGl0bGUgJiYgIXN1cHBvcnRzRUlQMTU1OVYyICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLXN1bW1hcnlfX3N1YnRpdGxlXCI+XG4gICAgICAgICAge3N1YnRpdGxlQ29tcG9uZW50fVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5Db25maXJtUGFnZUNvbnRhaW5lclN1bW1hcnkucHJvcFR5cGVzID0ge1xuICBhY3Rpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRpdGxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHRpdGxlQ29tcG9uZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgc3VidGl0bGVDb21wb25lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICBoaWRlU3VidGl0bGU6IFByb3BUeXBlcy5ib29sLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlkZW50aWNvbkFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5vbmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvcmlnaW46IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgaGlkZVRpdGxlOiBQcm9wVHlwZXMuYm9vbGVhbixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbmZpcm1QYWdlQ29udGFpbmVyU3VtbWFyeTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jb25zdCBDb25maXJtUGFnZUNvbnRhaW5lcldhcm5pbmcgPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0tcGFnZS1jb250YWluZXItd2FybmluZ1wiPlxuICAgICAgPGltZ1xuICAgICAgICBjbGFzc05hbWU9XCJjb25maXJtLXBhZ2UtY29udGFpbmVyLXdhcm5pbmdfX2ljb25cIlxuICAgICAgICBzcmM9XCIuL2ltYWdlcy9hbGVydC5zdmdcIlxuICAgICAgICBhbHQ9XCJcIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybS1wYWdlLWNvbnRhaW5lci13YXJuaW5nX193YXJuaW5nXCI+XG4gICAgICAgIHtwcm9wcy53YXJuaW5nfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5Db25maXJtUGFnZUNvbnRhaW5lcldhcm5pbmcucHJvcFR5cGVzID0ge1xuICB3YXJuaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlybVBhZ2VDb250YWluZXJXYXJuaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIHRoZW1lID0ge1xuICBCQVNFX0ZPTlRfRkFNSUxZOiAnTWVubG8sIG1vbm9zcGFjZScsXG4gIEJBU0VfRk9OVF9TSVpFOiAnMTFweCcsXG4gIEJBU0VfTElORV9IRUlHSFQ6ICcxNHB4JyxcblxuICBCQVNFX0JBQ0tHUk9VTkRfQ09MT1I6ICdyZ2IoMzYsIDM2LCAzNiknLFxuICBCQVNFX0NPTE9SOiAncmdiKDIxMywgMjEzLCAyMTMpJyxcblxuICBPQkpFQ1RfTkFNRV9DT0xPUjogJ3JnYigyMjcsIDExMCwgMjM2KScsXG4gIE9CSkVDVF9WQUxVRV9OVUxMX0NPTE9SOiAncmdiKDEyNywgMTI3LCAxMjcpJyxcbiAgT0JKRUNUX1ZBTFVFX1VOREVGSU5FRF9DT0xPUjogJ3JnYigxMjcsIDEyNywgMTI3KScsXG4gIE9CSkVDVF9WQUxVRV9SRUdFWFBfQ09MT1I6ICdyZ2IoMjMzLCA2MywgNTkpJyxcbiAgT0JKRUNUX1ZBTFVFX1NUUklOR19DT0xPUjogJ3JnYigyMzMsIDYzLCA1OSknLFxuICBPQkpFQ1RfVkFMVUVfU1lNQk9MX0NPTE9SOiAncmdiKDIzMywgNjMsIDU5KScsXG4gIE9CSkVDVF9WQUxVRV9OVU1CRVJfQ09MT1I6ICdoc2woMjUyLCAxMDAlLCA3NSUpJyxcbiAgT0JKRUNUX1ZBTFVFX0JPT0xFQU5fQ09MT1I6ICdoc2woMjUyLCAxMDAlLCA3NSUpJyxcbiAgT0JKRUNUX1ZBTFVFX0ZVTkNUSU9OX0tFWVdPUkRfQ09MT1I6ICdyZ2IoMjQyLCA4NSwgMjE3KScsXG5cbiAgSFRNTF9UQUdfQ09MT1I6ICdyZ2IoOTMsIDE3NiwgMjE1KScsXG4gIEhUTUxfVEFHTkFNRV9DT0xPUjogJ3JnYig5MywgMTc2LCAyMTUpJyxcbiAgSFRNTF9UQUdOQU1FX1RFWFRfVFJBTlNGT1JNOiAnbG93ZXJjYXNlJyxcbiAgSFRNTF9BVFRSSUJVVEVfTkFNRV9DT0xPUjogJ3JnYigxNTUsIDE4NywgMjIwKScsXG4gIEhUTUxfQVRUUklCVVRFX1ZBTFVFX0NPTE9SOiAncmdiKDI0MiwgMTUxLCAxMDIpJyxcbiAgSFRNTF9DT01NRU5UX0NPTE9SOiAncmdiKDEzNywgMTM3LCAxMzcpJyxcbiAgSFRNTF9ET0NUWVBFX0NPTE9SOiAncmdiKDE5MiwgMTkyLCAxOTIpJyxcblxuICBBUlJPV19DT0xPUjogJ3JnYigxNDUsIDE0NSwgMTQ1KScsXG4gIEFSUk9XX01BUkdJTl9SSUdIVDogMyxcbiAgQVJST1dfRk9OVF9TSVpFOiAxMixcblxuICBUUkVFTk9ERV9GT05UX0ZBTUlMWTogJ01lbmxvLCBtb25vc3BhY2UnLFxuICBUUkVFTk9ERV9GT05UX1NJWkU6ICcxMXB4JyxcbiAgVFJFRU5PREVfTElORV9IRUlHSFQ6ICcxNHB4JyxcbiAgVFJFRU5PREVfUEFERElOR19MRUZUOiAxMixcblxuICBUQUJMRV9CT1JERVJfQ09MT1I6ICdyZ2IoODUsIDg1LCA4NSknLFxuICBUQUJMRV9USF9CQUNLR1JPVU5EX0NPTE9SOiAncmdiKDQ0LCA0NCwgNDQpJyxcbiAgVEFCTEVfVEhfSE9WRVJfQ09MT1I6ICdyZ2IoNDgsIDQ4LCA0OCknLFxuICBUQUJMRV9TT1JUX0lDT05fQ09MT1I6ICdibGFjaycsIC8vJ3JnYig0OCwgNTcsIDY2KScsXG4gIFRBQkxFX0RBVEFfQkFDS0dST1VORF9JTUFHRTogJ2xpbmVhci1ncmFkaWVudChyZ2JhKDI1NSwgMjU1LCAyNTUsIDApLCByZ2JhKDI1NSwgMjU1LCAyNTUsIDApIDUwJSwgcmdiYSg1MSwgMTM5LCAyNTUsIDAuMDk4MDM5MikgNTAlLCByZ2JhKDUxLCAxMzksIDI1NSwgMC4wOTgwMzkyKSknLFxuICBUQUJMRV9EQVRBX0JBQ0tHUk9VTkRfU0laRTogJzEyOHB4IDMycHgnXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB0aGVtZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgdGhlbWUgPSB7XG4gIEJBU0VfRk9OVF9GQU1JTFk6ICdNZW5sbywgbW9ub3NwYWNlJyxcbiAgQkFTRV9GT05UX1NJWkU6ICcxMXB4JyxcbiAgQkFTRV9MSU5FX0hFSUdIVDogJzE0cHgnLFxuXG4gIEJBU0VfQkFDS0dST1VORF9DT0xPUjogJ3doaXRlJyxcbiAgQkFTRV9DT0xPUjogJ2JsYWNrJyxcblxuICBPQkpFQ1RfTkFNRV9DT0xPUjogJ3JnYigxMzYsIDE5LCAxNDUpJyxcbiAgT0JKRUNUX1ZBTFVFX05VTExfQ09MT1I6ICdyZ2IoMTI4LCAxMjgsIDEyOCknLFxuICBPQkpFQ1RfVkFMVUVfVU5ERUZJTkVEX0NPTE9SOiAncmdiKDEyOCwgMTI4LCAxMjgpJyxcbiAgT0JKRUNUX1ZBTFVFX1JFR0VYUF9DT0xPUjogJ3JnYigxOTYsIDI2LCAyMiknLFxuICBPQkpFQ1RfVkFMVUVfU1RSSU5HX0NPTE9SOiAncmdiKDE5NiwgMjYsIDIyKScsXG4gIE9CSkVDVF9WQUxVRV9TWU1CT0xfQ09MT1I6ICdyZ2IoMTk2LCAyNiwgMjIpJyxcbiAgT0JKRUNUX1ZBTFVFX05VTUJFUl9DT0xPUjogJ3JnYigyOCwgMCwgMjA3KScsXG4gIE9CSkVDVF9WQUxVRV9CT09MRUFOX0NPTE9SOiAncmdiKDI4LCAwLCAyMDcpJyxcbiAgT0JKRUNUX1ZBTFVFX0ZVTkNUSU9OX0tFWVdPUkRfQ09MT1I6ICdyZ2IoMTcwLCAxMywgMTQ1KScsXG5cbiAgSFRNTF9UQUdfQ09MT1I6ICdyZ2IoMTY4LCAxNDgsIDE2NiknLFxuICBIVE1MX1RBR05BTUVfQ09MT1I6ICdyZ2IoMTM2LCAxOCwgMTI4KScsXG4gIEhUTUxfVEFHTkFNRV9URVhUX1RSQU5TRk9STTogJ2xvd2VyY2FzZScsXG4gIEhUTUxfQVRUUklCVVRFX05BTUVfQ09MT1I6ICdyZ2IoMTUzLCA2OSwgMCknLFxuICBIVE1MX0FUVFJJQlVURV9WQUxVRV9DT0xPUjogJ3JnYigyNiwgMjYsIDE2NiknLFxuICBIVE1MX0NPTU1FTlRfQ09MT1I6ICdyZ2IoMzUsIDExMCwgMzcpJyxcbiAgSFRNTF9ET0NUWVBFX0NPTE9SOiAncmdiKDE5MiwgMTkyLCAxOTIpJyxcblxuICBBUlJPV19DT0xPUjogJyM2ZTZlNmUnLFxuICBBUlJPV19NQVJHSU5fUklHSFQ6IDMsXG4gIEFSUk9XX0ZPTlRfU0laRTogMTIsXG5cbiAgVFJFRU5PREVfRk9OVF9GQU1JTFk6ICdNZW5sbywgbW9ub3NwYWNlJyxcbiAgVFJFRU5PREVfRk9OVF9TSVpFOiAnMTFweCcsXG4gIFRSRUVOT0RFX0xJTkVfSEVJR0hUOiAnMTRweCcsXG4gIFRSRUVOT0RFX1BBRERJTkdfTEVGVDogMTIsXG5cbiAgVEFCTEVfQk9SREVSX0NPTE9SOiAnI2FhYScsXG4gIFRBQkxFX1RIX0JBQ0tHUk9VTkRfQ09MT1I6ICcjZWVlJyxcbiAgVEFCTEVfVEhfSE9WRVJfQ09MT1I6ICdoc2xhKDAsIDAlLCA5MCUsIDEpJyxcbiAgVEFCTEVfU09SVF9JQ09OX0NPTE9SOiAnIzZlNmU2ZScsXG4gIFRBQkxFX0RBVEFfQkFDS0dST1VORF9JTUFHRTogJ2xpbmVhci1ncmFkaWVudCh0byBib3R0b20sIHdoaXRlLCB3aGl0ZSA1MCUsIHJnYigyMzQsIDI0MywgMjU1KSA1MCUsIHJnYigyMzQsIDI0MywgMjU1KSknLFxuICBUQUJMRV9EQVRBX0JBQ0tHUk9VTkRfU0laRTogJzEyOHB4IDMycHgnXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB0aGVtZTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuXG4gIGlmIChvYmogPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBvID0gT2JqZWN0KG9iaik7XG5cbiAgcmV0dXJuIG8gPT09IG8ud2luZG93O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzT2JqZWN0KHgpIHtcblx0cmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIHggIT09IG51bGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eTIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX1RyZWVOb2RlID0gcmVxdWlyZSgnLi9UcmVlTm9kZScpO1xuXG52YXIgX1RyZWVOb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RyZWVOb2RlKTtcblxudmFyIF9wYXRoVXRpbHMgPSByZXF1aXJlKCcuL3BhdGhVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcmVkdWNlciA9IGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnVE9HR0xFX0VYUEFORCc6XG4gICAgICB7XG4gICAgICAgIHZhciBwYXRoID0gYWN0aW9uLnBhdGg7XG4gICAgICAgIHZhciBleHBhbmRlZFBhdGhzID0gc3RhdGUuZXhwYW5kZWRQYXRocztcbiAgICAgICAgdmFyIGV4cGFuZGVkID0gISFleHBhbmRlZFBhdGhzW3BhdGhdO1xuXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgIGV4cGFuZGVkUGF0aHM6IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmV4cGFuZGVkUGF0aHMsICgwLCBfZGVmaW5lUHJvcGVydHkzLmRlZmF1bHQpKHt9LCBwYXRoLCAhZXhwYW5kZWQpKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG52YXIgQ29ubmVjdGVkVHJlZU5vZGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShDb25uZWN0ZWRUcmVlTm9kZSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29ubmVjdGVkVHJlZU5vZGUocHJvcHMsIGNvbnRleHQpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDb25uZWN0ZWRUcmVlTm9kZSk7XG5cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChDb25uZWN0ZWRUcmVlTm9kZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbm5lY3RlZFRyZWVOb2RlKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSBjb250ZXh0LnN0b3JlLnN0b3JlU3RhdGU7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQ29ubmVjdGVkVHJlZU5vZGUsIFt7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICByZXR1cm4gISFuZXh0U3RhdGUuZXhwYW5kZWRQYXRoc1tuZXh0UHJvcHMucGF0aF0gIT09ICEhdGhpcy5zdGF0ZS5leHBhbmRlZFBhdGhzW3RoaXMucHJvcHMucGF0aF0gfHwgbmV4dFByb3BzLmRhdGEgIT09IHRoaXMucHJvcHMuZGF0YSB8fCBuZXh0UHJvcHMubmFtZSAhPT0gdGhpcy5wcm9wcy5uYW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZUNsaWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2socGF0aCkge1xuICAgICAgdGhpcy5jb250ZXh0LnN0b3JlLnN0b3JlU3RhdGUgPSByZWR1Y2VyKHRoaXMuY29udGV4dC5zdG9yZS5zdG9yZVN0YXRlLCB7XG4gICAgICAgIHR5cGU6ICdUT0dHTEVfRVhQQU5EJyxcbiAgICAgICAgcGF0aDogcGF0aFxuICAgICAgfSk7XG4gICAgICB0aGlzLnNldFN0YXRlKHRoaXMuY29udGV4dC5zdG9yZS5zdG9yZVN0YXRlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJDaGlsZE5vZGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ2hpbGROb2RlcyhwYXJlbnREYXRhLCBwYXJlbnRQYXRoKSB7XG4gICAgICB2YXIgZGF0YUl0ZXJhdG9yID0gdGhpcy5wcm9wcy5kYXRhSXRlcmF0b3I7XG4gICAgICB2YXIgZGVwdGggPSB0aGlzLnByb3BzLmRlcHRoO1xuICAgICAgdmFyIG5vZGVSZW5kZXJlciA9IHRoaXMucHJvcHMubm9kZVJlbmRlcmVyO1xuXG5cbiAgICAgIHZhciBjaGlsZE5vZGVzID0gW107XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gZGF0YUl0ZXJhdG9yKHBhcmVudERhdGEpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBfcmVmMiA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgIHZhciBuYW1lID0gX3JlZjIubmFtZSxcbiAgICAgICAgICAgICAgZGF0YSA9IF9yZWYyLmRhdGEsXG4gICAgICAgICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3JlZjIsIFsnbmFtZScsICdkYXRhJ10pO1xuXG4gICAgICAgICAgdmFyIGtleSA9IG5hbWU7XG4gICAgICAgICAgdmFyIHBhdGggPSBwYXJlbnRQYXRoICsgJy4nICsga2V5O1xuICAgICAgICAgIGNoaWxkTm9kZXMucHVzaChfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb25uZWN0ZWRUcmVlTm9kZSwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIGRlcHRoOiBkZXB0aCArIDEsXG4gICAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBkYXRhSXRlcmF0b3I6IGRhdGFJdGVyYXRvcixcbiAgICAgICAgICAgIG5vZGVSZW5kZXJlcjogbm9kZVJlbmRlcmVyXG4gICAgICAgICAgfSwgcHJvcHMpKSAvLyBwcm9wcyBmb3Igbm9kZVJlbmRlcmVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjaGlsZE5vZGVzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGRhdGEgPSBfcHJvcHMuZGF0YSxcbiAgICAgICAgICBkYXRhSXRlcmF0b3IgPSBfcHJvcHMuZGF0YUl0ZXJhdG9yLFxuICAgICAgICAgIHBhdGggPSBfcHJvcHMucGF0aCxcbiAgICAgICAgICBkZXB0aCA9IF9wcm9wcy5kZXB0aDtcblxuXG4gICAgICB2YXIgbm9kZUhhc0NoaWxkTm9kZXMgPSAoMCwgX3BhdGhVdGlscy5oYXNDaGlsZE5vZGVzKShkYXRhLCBkYXRhSXRlcmF0b3IpO1xuICAgICAgdmFyIGV4cGFuZGVkUGF0aHMgPSB0aGlzLnN0YXRlLmV4cGFuZGVkUGF0aHM7XG5cbiAgICAgIHZhciBleHBhbmRlZCA9ICEhZXhwYW5kZWRQYXRoc1twYXRoXTtcblxuICAgICAgdmFyIG5vZGVSZW5kZXJlciA9IHRoaXMucHJvcHMubm9kZVJlbmRlcmVyO1xuXG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX1RyZWVOb2RlMi5kZWZhdWx0LFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgICAgICBleHBhbmRlZDogZXhwYW5kZWQsXG4gICAgICAgICAgb25DbGljazogbm9kZUhhc0NoaWxkTm9kZXMgPyB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcywgcGF0aCkgOiBmdW5jdGlvbiAoKSB7fVxuICAgICAgICAgIC8vIHNob3cgYXJyb3cgYW55d2F5IGV2ZW4gaWYgbm90IGV4cGFuZGVkIGFuZCBub3QgcmVuZGVyaW5nIGNoaWxkcmVuXG4gICAgICAgICAgLCBzaG91bGRTaG93QXJyb3c6IG5vZGVIYXNDaGlsZE5vZGVzXG4gICAgICAgICAgLy8gc2hvdyBwbGFjZWhvbGRlciBvbmx5IGZvciBub24gcm9vdCBub2Rlc1xuICAgICAgICAgICwgc2hvdWxkU2hvd1BsYWNlaG9sZGVyOiBkZXB0aCA+IDBcbiAgICAgICAgICAvLyBSZW5kZXIgYSBub2RlIGZyb20gbmFtZSBhbmQgZGF0YSAob3IgcG9zc2libHkgb3RoZXIgcHJvcHMgbGlrZSBpc05vbmVudW1lcmFibGUpXG4gICAgICAgICAgLCBub2RlUmVuZGVyZXI6IG5vZGVSZW5kZXJlclxuICAgICAgICB9LCB0aGlzLnByb3BzKSxcbiAgICAgICAgLy8gb25seSByZW5kZXIgaWYgdGhlIG5vZGUgaXMgZXhwYW5kZWRcbiAgICAgICAgZXhwYW5kZWQgPyB0aGlzLnJlbmRlckNoaWxkTm9kZXMoZGF0YSwgcGF0aCkgOiB1bmRlZmluZWRcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBDb25uZWN0ZWRUcmVlTm9kZTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkNvbm5lY3RlZFRyZWVOb2RlLnByb3BUeXBlcyA9IHtcbiAgbmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGRhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuICBkYXRhSXRlcmF0b3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcblxuICBkZXB0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGV4cGFuZGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG5cbiAgbm9kZVJlbmRlcmVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbn07XG5cbkNvbm5lY3RlZFRyZWVOb2RlLmNvbnRleHRUeXBlcyA9IHtcbiAgc3RvcmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55XG59O1xuXG52YXIgVHJlZVZpZXcgPSBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoVHJlZVZpZXcsIF9Db21wb25lbnQyKTtcblxuICBmdW5jdGlvbiBUcmVlVmlldyhwcm9wcykge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFRyZWVWaWV3KTtcblxuICAgIHZhciBfdGhpczIgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChUcmVlVmlldy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRyZWVWaWV3KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMyLnN0b3JlID0ge1xuICAgICAgc3RvcmVTdGF0ZToge1xuICAgICAgICBleHBhbmRlZFBhdGhzOiAoMCwgX3BhdGhVdGlscy5nZXRFeHBhbmRlZFBhdGhzKShwcm9wcy5kYXRhLCBwcm9wcy5kYXRhSXRlcmF0b3IsIHByb3BzLmV4cGFuZFBhdGhzLCBwcm9wcy5leHBhbmRMZXZlbClcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShUcmVlVmlldywgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHRoaXMuc3RvcmUgPSB7XG4gICAgICAgIHN0b3JlU3RhdGU6IHtcbiAgICAgICAgICBleHBhbmRlZFBhdGhzOiAoMCwgX3BhdGhVdGlscy5nZXRFeHBhbmRlZFBhdGhzKShuZXh0UHJvcHMuZGF0YSwgbmV4dFByb3BzLmRhdGFJdGVyYXRvciwgbmV4dFByb3BzLmV4cGFuZFBhdGhzLCBuZXh0UHJvcHMuZXhwYW5kTGV2ZWwsIHRoaXMuc3RvcmUuc3RvcmVTdGF0ZS5leHBhbmRlZFBhdGhzKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldENoaWxkQ29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0b3JlOiB0aGlzLnN0b3JlXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBuYW1lID0gX3Byb3BzMi5uYW1lLFxuICAgICAgICAgIGRhdGEgPSBfcHJvcHMyLmRhdGEsXG4gICAgICAgICAgZGF0YUl0ZXJhdG9yID0gX3Byb3BzMi5kYXRhSXRlcmF0b3I7XG4gICAgICB2YXIgbm9kZVJlbmRlcmVyID0gdGhpcy5wcm9wcy5ub2RlUmVuZGVyZXI7XG5cblxuICAgICAgdmFyIHJvb3RQYXRoID0gX3BhdGhVdGlscy5ERUZBVUxUX1JPT1RfUEFUSDtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbm5lY3RlZFRyZWVOb2RlLCB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGRhdGFJdGVyYXRvcjogZGF0YUl0ZXJhdG9yLFxuICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgcGF0aDogcm9vdFBhdGgsXG4gICAgICAgIG5vZGVSZW5kZXJlcjogbm9kZVJlbmRlcmVyXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRyZWVWaWV3O1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuVHJlZVZpZXcuZGVmYXVsdFByb3BzID0ge1xuICBleHBhbmRMZXZlbDogMCxcbiAgZXhwYW5kUGF0aHM6IFtdXG59O1xuVHJlZVZpZXcuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHN0b3JlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueVxufTtcblxuXG5UcmVlVmlldy5wcm9wVHlwZXMgPSB7XG4gIG5hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBkYXRhOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgZGF0YUl0ZXJhdG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG5cbiAgbm9kZVJlbmRlcmVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbn07XG5cblRyZWVWaWV3LmRlZmF1bHRQcm9wcyA9IHtcbiAgbmFtZTogdW5kZWZpbmVkXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUcmVlVmlldzsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoVGhlbWVQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGhlbWVQcm92aWRlcigpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUaGVtZVByb3ZpZGVyKTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoVGhlbWVQcm92aWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRoZW1lUHJvdmlkZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFRoZW1lUHJvdmlkZXIsIFt7XG4gICAga2V5OiAnZ2V0Q2hpbGRDb250ZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIHRoZW1lID0gdGhpcy5wcm9wcy50aGVtZTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gY3JlYXRlU3R5bGVzOiBjcmVhdGVTdHlsZXNcbiAgICAgICAgdGhlbWU6IHRoZW1lXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGhlbWVQcm92aWRlcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblRoZW1lUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XSlcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRoZW1lUHJvdmlkZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgVEVYVF9OT0RFX01BWF9JTkxJTkVfQ0hBUlMgPSA4MDtcblxudmFyIHNob3VsZElubGluZSA9IGZ1bmN0aW9uIHNob3VsZElubGluZShkYXRhKSB7XG4gIHJldHVybiBkYXRhLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwIHx8IGRhdGEuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgJiYgZGF0YS5jaGlsZE5vZGVzWzBdLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBkYXRhLnRleHRDb250ZW50Lmxlbmd0aCA8IFRFWFRfTk9ERV9NQVhfSU5MSU5FX0NIQVJTO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gc2hvdWxkSW5saW5lOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jcmVhdGVTdHlsZXMgPSByZXF1aXJlKCcuLi9zdHlsZXMvY3JlYXRlU3R5bGVzJyk7XG5cbnZhciBfY3JlYXRlU3R5bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVN0eWxlcyk7XG5cbnZhciBfc2hvdWxkSW5saW5lID0gcmVxdWlyZSgnLi9zaG91bGRJbmxpbmUnKTtcblxudmFyIF9zaG91bGRJbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hvdWxkSW5saW5lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE9wZW5UYWcgPSBmdW5jdGlvbiBPcGVuVGFnKF9yZWYpIHtcbiAgdmFyIHRhZ05hbWUgPSBfcmVmLnRhZ05hbWUsXG4gICAgICBhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzLFxuICAgICAgc3R5bGVzID0gX3JlZi5zdHlsZXM7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdzcGFuJyxcbiAgICB7IHN0eWxlOiBzdHlsZXMuYmFzZSB9LFxuICAgICc8JyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy50YWdOYW1lIH0sXG4gICAgICB0YWdOYW1lXG4gICAgKSxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoYXR0cmlidXRlcykge1xuICAgICAgICB2YXIgYXR0cmlidXRlTm9kZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgICAgICAgYXR0cmlidXRlTm9kZXMucHVzaChfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgIHsga2V5OiBpIH0sXG4gICAgICAgICAgICAnICcsXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaHRtbEF0dHJpYnV0ZU5hbWUgfSxcbiAgICAgICAgICAgICAgYXR0cmlidXRlLm5hbWVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICAnPVwiJyxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5odG1sQXR0cmlidXRlVmFsdWUgfSxcbiAgICAgICAgICAgICAgYXR0cmlidXRlLnZhbHVlXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgJ1wiJ1xuICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVOb2RlcztcbiAgICAgIH1cbiAgICB9KCksXG4gICAgJz4nXG4gICk7XG59O1xuXG4vLyBpc0NoaWxkTm9kZSBzdHlsZT17eyBtYXJnaW5MZWZ0OiAtMTIgLyogaGFjazogb2Zmc2V0IHBsYWNlaG9sZGVyICovIH19XG52YXIgQ2xvc2VUYWcgPSBmdW5jdGlvbiBDbG9zZVRhZyhfcmVmMikge1xuICB2YXIgdGFnTmFtZSA9IF9yZWYyLnRhZ05hbWUsXG4gICAgICBfcmVmMiRpc0NoaWxkTm9kZSA9IF9yZWYyLmlzQ2hpbGROb2RlLFxuICAgICAgaXNDaGlsZE5vZGUgPSBfcmVmMiRpc0NoaWxkTm9kZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmMiRpc0NoaWxkTm9kZSxcbiAgICAgIHN0eWxlcyA9IF9yZWYyLnN0eWxlcztcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdzcGFuJyxcbiAgICB7IHN0eWxlOiBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMuYmFzZSwgaXNDaGlsZE5vZGUgJiYgc3R5bGVzLm9mZnNldExlZnQpIH0sXG4gICAgJzwvJyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy50YWdOYW1lIH0sXG4gICAgICB0YWdOYW1lXG4gICAgKSxcbiAgICAnPidcbiAgKTtcbn07XG5cbnZhciBuYW1lQnlOb2RlVHlwZSA9IHtcbiAgMTogJ0VMRU1FTlRfTk9ERScsXG4gIDM6ICdURVhUX05PREUnLFxuICA3OiAnUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFJyxcbiAgODogJ0NPTU1FTlRfTk9ERScsXG4gIDk6ICdET0NVTUVOVF9OT0RFJyxcbiAgMTA6ICdET0NVTUVOVF9UWVBFX05PREUnLCAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwODg5NzIvZ2V0LWRvY3R5cGUtb2YtYW4taHRtbC1hcy1zdHJpbmctd2l0aC1qYXZhc2NyaXB0XG4gIDExOiAnRE9DVU1FTlRfRlJBR01FTlRfTk9ERSdcbn07XG5cbnZhciBET01Ob2RlUHJldmlldyA9IGZ1bmN0aW9uIERPTU5vZGVQcmV2aWV3KF9yZWYzLCBfcmVmNCkge1xuICB2YXIgaXNDbG9zZVRhZyA9IF9yZWYzLmlzQ2xvc2VUYWcsXG4gICAgICBkYXRhID0gX3JlZjMuZGF0YSxcbiAgICAgIGV4cGFuZGVkID0gX3JlZjMuZXhwYW5kZWQ7XG4gIHZhciB0aGVtZSA9IF9yZWY0LnRoZW1lO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX2NyZWF0ZVN0eWxlczIuZGVmYXVsdCkoJ0RPTU5vZGVQcmV2aWV3JywgdGhlbWUpO1xuXG4gIGlmIChpc0Nsb3NlVGFnKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENsb3NlVGFnLCB7IHN0eWxlczogc3R5bGVzLmh0bWxDbG9zZVRhZywgaXNDaGlsZE5vZGU6IHRydWUsIHRhZ05hbWU6IGRhdGEudGFnTmFtZSB9KTtcbiAgfVxuXG4gIHN3aXRjaCAoZGF0YS5ub2RlVHlwZSkge1xuICAgIGNhc2UgTm9kZS5FTEVNRU5UX05PREU6XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoT3BlblRhZywge1xuICAgICAgICAgIHRhZ05hbWU6IGRhdGEudGFnTmFtZSxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBkYXRhLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgc3R5bGVzOiBzdHlsZXMuaHRtbE9wZW5UYWdcbiAgICAgICAgfSksXG4gICAgICAgICgwLCBfc2hvdWxkSW5saW5lMi5kZWZhdWx0KShkYXRhKSA/IGRhdGEudGV4dENvbnRlbnQgOiAhZXhwYW5kZWQgJiYgJ+KApicsXG4gICAgICAgICFleHBhbmRlZCAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDbG9zZVRhZywgeyB0YWdOYW1lOiBkYXRhLnRhZ05hbWUsIHN0eWxlczogc3R5bGVzLmh0bWxDbG9zZVRhZyB9KVxuICAgICAgKTtcbiAgICBjYXNlIE5vZGUuVEVYVF9OT0RFOlxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGRhdGEudGV4dENvbnRlbnRcbiAgICAgICk7XG4gICAgY2FzZSBOb2RlLkNEQVRBX1NFQ1RJT05fTk9ERTpcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICBudWxsLFxuICAgICAgICAnPCFbQ0RBVEFbJyArIGRhdGEudGV4dENvbnRlbnQgKyAnXV0+J1xuICAgICAgKTtcbiAgICBjYXNlIE5vZGUuQ09NTUVOVF9OT0RFOlxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5odG1sQ29tbWVudCB9LFxuICAgICAgICAnPCAhIC0tJyxcbiAgICAgICAgZGF0YS50ZXh0Q29udGVudCxcbiAgICAgICAgJy0tID4nXG4gICAgICApO1xuICAgIGNhc2UgTm9kZS5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU6XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgZGF0YS5ub2RlTmFtZVxuICAgICAgKTtcbiAgICBjYXNlIE5vZGUuRE9DVU1FTlRfVFlQRV9OT0RFOlxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5odG1sRG9jdHlwZSB9LFxuICAgICAgICAnPCFET0NUWVBFICcsXG4gICAgICAgIGRhdGEubmFtZSxcbiAgICAgICAgZGF0YS5wdWJsaWNJZCA/ICcgUFVCTElDIFwiJyArIGRhdGEucHVibGljSWQgKyAnXCInIDogJycsXG4gICAgICAgICFkYXRhLnB1YmxpY0lkICYmIGRhdGEuc3lzdGVtSWQgPyAnIFNZU1RFTScgOiAnJyxcbiAgICAgICAgZGF0YS5zeXN0ZW1JZCA/ICcgXCInICsgZGF0YS5zeXN0ZW1JZCArICdcIicgOiAnJyxcbiAgICAgICAgJz4nXG4gICAgICApO1xuICAgIGNhc2UgTm9kZS5ET0NVTUVOVF9OT0RFOlxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGRhdGEubm9kZU5hbWVcbiAgICAgICk7XG4gICAgY2FzZSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgZGF0YS5ub2RlTmFtZVxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG5hbWVCeU5vZGVUeXBlW2RhdGEubm9kZVR5cGVdXG4gICAgICApO1xuICB9XG59O1xuXG5ET01Ob2RlUHJldmlldy5wcm9wVHlwZXMgPSB7XG4gIC8qKiBJZiB0cnVlLCBqdXN0IHJlbmRlciBhIGNsb3NlIHRhZyAqL1xuICBpc0Nsb3NlVGFnOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKiAgKi9cbiAgbmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKiBUaGUgRE9NIE5vZGUgKi9cbiAgZGF0YTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcbiAgLyoqIFdoZXRoZXIgdGhlIERPTSBub2RlIGhhcyBiZWVuIGV4cGFuZGVkLiAqL1xuICBleHBhbmRlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWRcbn07XG5cbkRPTU5vZGVQcmV2aWV3LmNvbnRleHRUeXBlcyA9IHtcbiAgdGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBET01Ob2RlUHJldmlldzsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9zZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX3NldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFByb3RvdHlwZU9mKTtcblxudmFyIF9jcmVhdGUgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpO1xuXG52YXIgX2NyZWF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGUpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbnZhciBfdGhlbWVzID0gcmVxdWlyZSgnLi90aGVtZXMnKTtcblxudmFyIHRoZW1lcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF90aGVtZXMpO1xuXG52YXIgX2Jhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcblxudmFyIF9iYXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jhc2UpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc3R5bGVzID0gT2JqZWN0LmtleXModGhlbWVzKS5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlcywgdGhlbWVOYW1lKSB7XG4gIHN0eWxlc1t0aGVtZU5hbWVdID0gKDAsIF9iYXNlMi5kZWZhdWx0KSh0aGVtZXNbdGhlbWVOYW1lXSk7XG4gIHJldHVybiBzdHlsZXM7XG59LCB7fSk7XG5cbnZhciBjcmVhdGVTdHlsZXMgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoa2V5LCB0aGVtZSkge1xuICAvLyBjb25zb2xlLmRlYnVnKHN0eWxlcywgdGhlbWUsIHN0eWxlc1t0aGVtZV0pXG4gIGlmICh0eXBlb2YgdGhlbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHN0eWxlc1t0aGVtZV1ba2V5XTtcbiAgfSBlbHNlIGlmICgodHlwZW9mIHRoZW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHRoZW1lKSkgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuICgwLCBfYmFzZTIuZGVmYXVsdCkodGhlbWUpW2tleV07XG4gIH1cbiAgLy8gRGVmYXVsdCBzdHlsZXNcbiAgcmV0dXJuIHN0eWxlc1snY2hyb21lTGlnaHQnXVtrZXldO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlU3R5bGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9PYmplY3RWYWx1ZSA9IHJlcXVpcmUoJy4uL29iamVjdC9PYmplY3RWYWx1ZScpO1xuXG52YXIgX09iamVjdFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09iamVjdFZhbHVlKTtcblxudmFyIF9PYmplY3ROYW1lID0gcmVxdWlyZSgnLi4vb2JqZWN0L09iamVjdE5hbWUnKTtcblxudmFyIF9PYmplY3ROYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09iamVjdE5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKiBOT1RFOiBDaHJvbWUgY29uc29sZS5sb2cgaXMgaXRhbGljICovXG52YXIgc3R5bGVzID0ge1xuICBwcmV2aWV3OiB7XG4gICAgZm9udFN0eWxlOiAnaXRhbGljJ1xuICB9XG59O1xuXG4vKiBpbnRlcnNwZXJzZSBhcnIgd2l0aCBzZXBhcmF0b3IgKi9cbmZ1bmN0aW9uIGludGVyc3BlcnNlKGFyciwgc2VwKSB7XG4gIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIGFyci5zbGljZSgxKS5yZWR1Y2UoZnVuY3Rpb24gKHhzLCB4KSB7XG4gICAgcmV0dXJuIHhzLmNvbmNhdChbc2VwLCB4XSk7XG4gIH0sIFthcnJbMF1dKTtcbn1cblxuLyoqXG4gKiBBIHByZXZpZXcgb2YgdGhlIG9iamVjdFxuICovXG52YXIgT2JqZWN0UHJldmlldyA9IGZ1bmN0aW9uIE9iamVjdFByZXZpZXcoX3JlZikge1xuICB2YXIgZGF0YSA9IF9yZWYuZGF0YSxcbiAgICAgIG1heFByb3BlcnRpZXMgPSBfcmVmLm1heFByb3BlcnRpZXM7XG5cbiAgdmFyIG9iamVjdCA9IGRhdGE7XG5cbiAgaWYgKCh0eXBlb2Ygb2JqZWN0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKG9iamVjdCkpICE9PSAnb2JqZWN0JyB8fCBvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0IGluc3RhbmNlb2YgRGF0ZSB8fCBvYmplY3QgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX09iamVjdFZhbHVlMi5kZWZhdWx0LCB7IG9iamVjdDogb2JqZWN0IH0pO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5wcmV2aWV3IH0sXG4gICAgICAnWycsXG4gICAgICBpbnRlcnNwZXJzZShvYmplY3QubWFwKGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX09iamVjdFZhbHVlMi5kZWZhdWx0LCB7IGtleTogaW5kZXgsIG9iamVjdDogZWxlbWVudCB9KTtcbiAgICAgIH0pLCAnLCAnKSxcbiAgICAgICddJ1xuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHByb3BlcnR5Tm9kZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eU5hbWUgaW4gb2JqZWN0KSB7XG4gICAgICB2YXIgcHJvcGVydHlWYWx1ZSA9IG9iamVjdFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgIHZhciBlbGxpcHNpcyA9IHZvaWQgMDtcbiAgICAgICAgaWYgKHByb3BlcnR5Tm9kZXMubGVuZ3RoID09PSBtYXhQcm9wZXJ0aWVzIC0gMSAmJiBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCA+IG1heFByb3BlcnRpZXMpIHtcbiAgICAgICAgICBlbGxpcHNpcyA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgeyBrZXk6ICdlbGxpcHNpcycgfSxcbiAgICAgICAgICAgICdcXHUyMDI2J1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcGVydHlOb2Rlcy5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICB7IGtleTogcHJvcGVydHlOYW1lIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX09iamVjdE5hbWUyLmRlZmF1bHQsIHsgbmFtZTogcHJvcGVydHlOYW1lIHx8ICdcIlwiJyB9KSxcbiAgICAgICAgICAnOlxceEEwJyxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfT2JqZWN0VmFsdWUyLmRlZmF1bHQsIHsgb2JqZWN0OiBwcm9wZXJ0eVZhbHVlIH0pLFxuICAgICAgICAgIGVsbGlwc2lzXG4gICAgICAgICkpO1xuICAgICAgICBpZiAoZWxsaXBzaXMpIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5wcmV2aWV3IH0sXG4gICAgICBvYmplY3QuY29uc3RydWN0b3IubmFtZSArICcgeycsXG4gICAgICBpbnRlcnNwZXJzZShwcm9wZXJ0eU5vZGVzLCAnLCAnKSxcbiAgICAgICd9J1xuICAgICk7XG4gIH1cbn07XG5cbk9iamVjdFByZXZpZXcucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogbWF4IG51bWJlciBvZiBwcm9wZXJ0aWVzIHNob3duIGluIHRoZSBwcm9wZXJ0eSB2aWV3XG4gICAqL1xuICBtYXhQcm9wZXJ0aWVzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxufTtcbk9iamVjdFByZXZpZXcuZGVmYXVsdFByb3BzID0ge1xuICBtYXhQcm9wZXJ0aWVzOiA1XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBPYmplY3RQcmV2aWV3OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2lzSXRlcmFibGUyID0gcmVxdWlyZShcIi4uL2NvcmUtanMvaXMtaXRlcmFibGVcIik7XG5cbnZhciBfaXNJdGVyYWJsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0l0ZXJhYmxlMik7XG5cbnZhciBfZ2V0SXRlcmF0b3IyID0gcmVxdWlyZShcIi4uL2NvcmUtanMvZ2V0LWl0ZXJhdG9yXCIpO1xuXG52YXIgX2dldEl0ZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldEl0ZXJhdG9yMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHtcbiAgICB2YXIgX2FyciA9IFtdO1xuICAgIHZhciBfbiA9IHRydWU7XG4gICAgdmFyIF9kID0gZmFsc2U7XG4gICAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9pID0gKDAsIF9nZXRJdGVyYXRvcjMuZGVmYXVsdCkoYXJyKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZCA9IHRydWU7XG4gICAgICBfZSA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hcnI7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzSXRlcmFibGUzLmRlZmF1bHQpKE9iamVjdChhcnIpKSkge1xuICAgICAgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG4gICAgfVxuICB9O1xufSgpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY3JlYXRlU3R5bGVzID0gcmVxdWlyZSgnLi4vc3R5bGVzL2NyZWF0ZVN0eWxlcycpO1xuXG52YXIgX2NyZWF0ZVN0eWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVTdHlsZXMpO1xuXG52YXIgX09iamVjdFZhbHVlID0gcmVxdWlyZSgnLi4vb2JqZWN0L09iamVjdFZhbHVlJyk7XG5cbnZhciBfT2JqZWN0VmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2JqZWN0VmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgRGF0YUNvbnRhaW5lciA9IGZ1bmN0aW9uIERhdGFDb250YWluZXIoX3JlZiwgX3JlZjIpIHtcbiAgdmFyIHJvd3MgPSBfcmVmLnJvd3MsXG4gICAgICBjb2x1bW5zID0gX3JlZi5jb2x1bW5zLFxuICAgICAgcm93c0RhdGEgPSBfcmVmLnJvd3NEYXRhO1xuICB2YXIgdGhlbWUgPSBfcmVmMi50aGVtZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9jcmVhdGVTdHlsZXMyLmRlZmF1bHQpKCdUYWJsZUluc3BlY3RvckRhdGFDb250YWluZXInLCB0aGVtZSk7XG4gIHZhciBib3JkZXJTdHlsZXMgPSAoMCwgX2NyZWF0ZVN0eWxlczIuZGVmYXVsdCkoJ1RhYmxlSW5zcGVjdG9yTGVmdEJvcmRlcicsIHRoZW1lKTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmRpdiB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3RhYmxlJyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy50YWJsZSB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2NvbGdyb3VwJywgbnVsbCksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3Rib2R5JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcm93cy5tYXAoZnVuY3Rpb24gKHJvdywgaSkge1xuICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICd0cicsXG4gICAgICAgICAgICB7IGtleTogcm93LCBzdHlsZTogc3R5bGVzLnRyIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ3RkJyxcbiAgICAgICAgICAgICAgeyBzdHlsZTogKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgc3R5bGVzLnRkLCBib3JkZXJTdHlsZXMubm9uZSkgfSxcbiAgICAgICAgICAgICAgcm93XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgICB2YXIgcm93RGF0YSA9IHJvd3NEYXRhW2ldO1xuICAgICAgICAgICAgICAvLyByb3dEYXRhIGNvdWxkIGJlXG4gICAgICAgICAgICAgIC8vICBvYmplY3QgLT4gaW5kZXggYnkga2V5XG4gICAgICAgICAgICAgIC8vICAgIGFycmF5IC0+IGluZGV4IGJ5IGFycmF5IGluZGV4XG4gICAgICAgICAgICAgIC8vICAgIG51bGwgLT4gcGFzc1xuICAgICAgICAgICAgICAvLyAgYm9vbGVhbiAtPiBwYXNzXG4gICAgICAgICAgICAgIC8vICBzdHJpbmcgLT4gcGFzcyAoaGFzT3duUHJvcGVydHkgcmV0dXJucyB0cnVlIGZvciBbMC4ubGVuLTFdKVxuICAgICAgICAgICAgICAvLyAgbnVtYmVyIC0+IHBhc3NcbiAgICAgICAgICAgICAgLy8gIGZ1bmN0aW9uIC0+IHBhc3NcbiAgICAgICAgICAgICAgLy8gIHN5bWJvbFxuICAgICAgICAgICAgICAvLyAgdW5kZWZpbmVkIC0+IHBhc3NcbiAgICAgICAgICAgICAgaWYgKCh0eXBlb2Ygcm93RGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShyb3dEYXRhKSkgPT09ICdvYmplY3QnICYmIHJvd0RhdGEgIT09IG51bGwgJiYgcm93RGF0YS5oYXNPd25Qcm9wZXJ0eShjb2x1bW4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ3RkJyxcbiAgICAgICAgICAgICAgICAgIHsga2V5OiBjb2x1bW4sIHN0eWxlOiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBzdHlsZXMudGQsIGJvcmRlclN0eWxlcy5zb2xpZCkgfSxcbiAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PYmplY3RWYWx1ZTIuZGVmYXVsdCwgeyBvYmplY3Q6IHJvd0RhdGFbY29sdW1uXSB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCd0ZCcsIHsga2V5OiBjb2x1bW4sIHN0eWxlOiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBzdHlsZXMudGQsIGJvcmRlclN0eWxlcy5zb2xpZCkgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApXG4gICk7XG59O1xuXG5EYXRhQ29udGFpbmVyLmNvbnRleHRUeXBlcyA9IHtcbiAgdGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEYXRhQ29udGFpbmVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jcmVhdGVTdHlsZXMgPSByZXF1aXJlKCcuLi9zdHlsZXMvY3JlYXRlU3R5bGVzJyk7XG5cbnZhciBfY3JlYXRlU3R5bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVN0eWxlcyk7XG5cbnZhciBfVEggPSByZXF1aXJlKCcuL1RIJyk7XG5cbnZhciBfVEgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVEgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGVhZGVyQ29udGFpbmVyID0gZnVuY3Rpb24gSGVhZGVyQ29udGFpbmVyKF9yZWYsIF9yZWYyKSB7XG4gIHZhciBpbmRleENvbHVtblRleHQgPSBfcmVmLmluZGV4Q29sdW1uVGV4dCxcbiAgICAgIGNvbHVtbnMgPSBfcmVmLmNvbHVtbnMsXG4gICAgICBzb3J0ZWQgPSBfcmVmLnNvcnRlZCxcbiAgICAgIHNvcnRJbmRleENvbHVtbiA9IF9yZWYuc29ydEluZGV4Q29sdW1uLFxuICAgICAgc29ydENvbHVtbiA9IF9yZWYuc29ydENvbHVtbixcbiAgICAgIHNvcnRBc2NlbmRpbmcgPSBfcmVmLnNvcnRBc2NlbmRpbmcsXG4gICAgICBvblRIQ2xpY2sgPSBfcmVmLm9uVEhDbGljayxcbiAgICAgIG9uSW5kZXhUSENsaWNrID0gX3JlZi5vbkluZGV4VEhDbGljaztcbiAgdmFyIHRoZW1lID0gX3JlZjIudGhlbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfY3JlYXRlU3R5bGVzMi5kZWZhdWx0KSgnVGFibGVJbnNwZWN0b3JIZWFkZXJDb250YWluZXInLCB0aGVtZSk7XG4gIHZhciBib3JkZXJTdHlsZXMgPSAoMCwgX2NyZWF0ZVN0eWxlczIuZGVmYXVsdCkoJ1RhYmxlSW5zcGVjdG9yTGVmdEJvcmRlcicsIHRoZW1lKTtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5iYXNlIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndGFibGUnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnRhYmxlIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3Rib2R5JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3RyJyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX1RIMi5kZWZhdWx0LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBib3JkZXJTdHlsZTogYm9yZGVyU3R5bGVzLm5vbmUsXG4gICAgICAgICAgICAgIHNvcnRlZDogc29ydGVkICYmIHNvcnRJbmRleENvbHVtbixcbiAgICAgICAgICAgICAgc29ydEFzY2VuZGluZzogc29ydEFzY2VuZGluZyxcbiAgICAgICAgICAgICAgb25DbGljazogb25JbmRleFRIQ2xpY2tcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmRleENvbHVtblRleHRcbiAgICAgICAgICApLFxuICAgICAgICAgIGNvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgX1RIMi5kZWZhdWx0LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYm9yZGVyU3R5bGU6IGJvcmRlclN0eWxlcy5zb2xpZCxcbiAgICAgICAgICAgICAgICBrZXk6IGNvbHVtbixcbiAgICAgICAgICAgICAgICBzb3J0ZWQ6IHNvcnRlZCAmJiBzb3J0Q29sdW1uID09PSBjb2x1bW4sXG4gICAgICAgICAgICAgICAgc29ydEFzY2VuZGluZzogc29ydEFzY2VuZGluZyxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiBvblRIQ2xpY2suYmluZCh1bmRlZmluZWQsIGNvbHVtbilcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY29sdW1uXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gICk7XG59O1xuXG5IZWFkZXJDb250YWluZXIuZGVmYXVsdFByb3BzID0ge1xuICBpbmRleENvbHVtblRleHQ6ICcoaW5kZXgpJyxcbiAgY29sdW1uczogW11cbn07XG5cbkhlYWRlckNvbnRhaW5lci5jb250ZXh0VHlwZXMgPSB7XG4gIHRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XSkuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSGVhZGVyQ29udGFpbmVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXknKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0NvbnN1bWFibGVBcnJheTIpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJyk7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBnZXRIZWFkZXJzO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKlxuICogUG9seWZpbGwgZm9yIHJ1bm5pbmcgdGVzdHNcbiAqIGBpbmNsdWRlc2AgaXMgYW4gRVMyMDE2IGZlYXR1cmVcbiAqL1xuaWYgKCFBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMpIHtcbiAgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCovKSB7XG4gICAgdmFyIE8gPSBPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IHBhcnNlSW50KE8ubGVuZ3RoKSB8fCAwO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIG4gPSBwYXJzZUludChhcmd1bWVudHNbMV0pIHx8IDA7XG4gICAgdmFyIGs7XG4gICAgaWYgKG4gPj0gMCkge1xuICAgICAgayA9IG47XG4gICAgfSBlbHNlIHtcbiAgICAgIGsgPSBsZW4gKyBuO1xuICAgICAgaWYgKGsgPCAwKSB7XG4gICAgICAgIGsgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY3VycmVudEVsZW1lbnQ7XG4gICAgd2hpbGUgKGsgPCBsZW4pIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50ID0gT1trXTtcbiAgICAgIGlmIChzZWFyY2hFbGVtZW50ID09PSBjdXJyZW50RWxlbWVudCB8fCBzZWFyY2hFbGVtZW50ICE9PSBzZWFyY2hFbGVtZW50ICYmIGN1cnJlbnRFbGVtZW50ICE9PSBjdXJyZW50RWxlbWVudCkge1xuICAgICAgICAvLyBOYU4gIT09IE5hTlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGsrKztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRIZWFkZXJzKGRhdGEpIHtcbiAgaWYgKCh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShkYXRhKSkgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJvd0hlYWRlcnMgPSB2b2lkIDA7XG4gICAgLy8gaXMgYW4gYXJyYXlcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgdmFyIG5Sb3dzID0gZGF0YS5sZW5ndGg7XG4gICAgICByb3dIZWFkZXJzID0gW10uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkzLmRlZmF1bHQpKEFycmF5KG5Sb3dzKS5rZXlzKCkpKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgIC8vIGlzIGFuIG9iamVjdFxuICAgICAgLy8ga2V5cyBhcmUgcm93IGluZGV4ZXNcbiAgICAgIHJvd0hlYWRlcnMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgICB9XG5cbiAgICAvLyBUaW1lOiBPKG5Sb3dzICogbkNvbHMpXG4gICAgdmFyIGNvbEhlYWRlcnMgPSByb3dIZWFkZXJzLnJlZHVjZShmdW5jdGlvbiAoY29sSGVhZGVycywgcm93SGVhZGVyKSB7XG4gICAgICB2YXIgcm93ID0gZGF0YVtyb3dIZWFkZXJdO1xuICAgICAgaWYgKCh0eXBlb2Ygcm93ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHJvdykpID09PSAnb2JqZWN0JyAmJiByb3cgIT09IG51bGwpIHtcbiAgICAgICAgLyogTyhuQ29scykgQ291bGQgb3B0aW1pemUgYGluY2x1ZGVzYCBoZXJlICovXG4gICAgICAgIHZhciBjb2xzID0gT2JqZWN0LmtleXMocm93KTtcbiAgICAgICAgY29scy5yZWR1Y2UoZnVuY3Rpb24gKHhzLCB4KSB7XG4gICAgICAgICAgaWYgKCF4cy5pbmNsdWRlcyh4KSkge1xuICAgICAgICAgICAgLyogeHMgaXMgdGhlIGNvbEhlYWRlcnMgdG8gYmUgZmlsbGVkIGJ5IHNlYXJjaGluZyB0aGUgcm93J3MgaW5kZXhlcyAqL1xuICAgICAgICAgICAgeHMucHVzaCh4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHhzO1xuICAgICAgICB9LCBjb2xIZWFkZXJzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb2xIZWFkZXJzO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4ge1xuICAgICAgcm93SGVhZGVyczogcm93SGVhZGVycyxcbiAgICAgIGNvbEhlYWRlcnM6IGNvbEhlYWRlcnNcbiAgICB9O1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IHsgb21pdCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBCTiwgc3RyaXBIZXhQcmVmaXggfSBmcm9tICdldGhlcmV1bWpzLXV0aWwnO1xuaW1wb3J0IENvbW1vbiwgeyBDaGFpbiwgSGFyZGZvcmsgfSBmcm9tICdAZXRoZXJldW1qcy9jb21tb24nO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25GYWN0b3J5IH0gZnJvbSAnQGV0aGVyZXVtanMvdHgnO1xuXG5mdW5jdGlvbiBidWlsZFR4UGFyYW1zKHR4TWV0YSkge1xuICByZXR1cm4ge1xuICAgIC4uLm9taXQodHhNZXRhLnR4UGFyYW1zLCAnZ2FzJyksXG4gICAgZ2FzTGltaXQ6IHR4TWV0YS50eFBhcmFtcy5nYXMsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkVHJhbnNhY3Rpb25Db21tb24odHhNZXRhKSB7XG4gIC8vIFRoaXMgcHJvZHVjZXMgYSB0cmFuc2FjdGlvbiB3aG9zZSBpbmZvcm1hdGlvbiBkb2VzIG5vdCBjb21wbGV0ZWx5IG1hdGNoIGFuXG4gIC8vIE9wdGltaXNtIHRyYW5zYWN0aW9uIOKAlCBmb3IgaW5zdGFuY2UsIERFRkFVTFRfQ0hBSU4gaXMgc3RpbGwgJ21haW5uZXQnIGFuZFxuICAvLyBnZW5lc2lzIHBvaW50cyB0byB0aGUgbWFpbm5ldCBnZW5lc2lzLCBub3QgdGhlIE9wdGltaXNtIGdlbmVzaXMg4oCUIGJ1dFxuICAvLyBjb25zaWRlcmluZyB0aGF0IGFsbCB3ZSB3YW50IHRvIGRvIGlzIHNlcmlhbGl6ZSBhIHRyYW5zYWN0aW9uLCB0aGlzIHdvcmtzXG4gIC8vIGZpbmUgZm9yIG91ciB1c2UgY2FzZS5cbiAgcmV0dXJuIENvbW1vbi5mb3JDdXN0b21DaGFpbihDaGFpbi5NYWlubmV0LCB7XG4gICAgY2hhaW5JZDogbmV3IEJOKHN0cmlwSGV4UHJlZml4KHR4TWV0YS5jaGFpbklkKSwgMTYpLFxuICAgIG5ldHdvcmtJZDogbmV3IEJOKHR4TWV0YS5tZXRhbWFza05ldHdvcmtJZCwgMTApLFxuICAgIC8vIE9wdGltaXNtIG9ubHkgc3VwcG9ydHMgdHlwZS0wIHRyYW5zYWN0aW9uczsgaXQgZG9lcyBub3Qgc3VwcG9ydCBhbnkgb2ZcbiAgICAvLyB0aGUgbmV3ZXIgRUlQcyBzaW5jZSBFSVAtMTU1LiBTb3VyY2U6XG4gICAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS1vcHRpbWlzbS9vcHRpbWlzbS9ibG9iL2RldmVsb3Avc3BlY3MvbDJnZXRoL3RyYW5zYWN0aW9uLXR5cGVzLm1kPlxuICAgIGRlZmF1bHRIYXJkZm9yazogSGFyZGZvcmsuU3B1cmlvdXNEcmFnb24sXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZFVuc2VyaWFsaXplZFRyYW5zYWN0aW9uKHR4TWV0YSkge1xuICBjb25zdCB0eFBhcmFtcyA9IGJ1aWxkVHhQYXJhbXModHhNZXRhKTtcbiAgY29uc3QgY29tbW9uID0gYnVpbGRUcmFuc2FjdGlvbkNvbW1vbih0eE1ldGEpO1xuICByZXR1cm4gVHJhbnNhY3Rpb25GYWN0b3J5LmZyb21UeERhdGEodHhQYXJhbXMsIHsgY29tbW9uIH0pO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb250cmFjdC1kZWZzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wcmVkZXBsb3lzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25uZWN0LWNvbnRyYWN0c1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9zZW5kZXItdG8tcmVjaXBpZW50LmNvbXBvbmVudCc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdG8tY2xpcGJvYXJkJztcbmltcG9ydCB7IHNob3J0ZW5BZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdWkvaWRlbnRpY29uJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IHsgZ2V0QWRkcmVzc0Jvb2sgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IE5pY2tuYW1lUG9wb3ZlcnMgZnJvbSAnLi4vLi4vLi4vLi4vbW9kYWxzL25pY2tuYW1lLXBvcG92ZXJzJztcblxuY29uc3QgQWRkcmVzcyA9ICh7XG4gIGNoZWNrc3VtbWVkUmVjaXBpZW50QWRkcmVzcyxcbiAgb25SZWNpcGllbnRDbGljayxcbiAgYWRkcmVzc09ubHksXG4gIHJlY2lwaWVudEVucyxcbiAgcmVjaXBpZW50TmFtZSxcbn0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IFtzaG93Tmlja25hbWVQb3BvdmVycywgc2V0U2hvd05pY2tuYW1lUG9wb3ZlcnNdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGFkZHJlc3NCb29rID0gdXNlU2VsZWN0b3IoZ2V0QWRkcmVzc0Jvb2spO1xuICBjb25zdCBhZGRyZXNzQm9va0VudHJ5T2JqZWN0ID0gYWRkcmVzc0Jvb2suZmluZChcbiAgICAoZW50cnkpID0+IGVudHJ5LmFkZHJlc3MgPT09IGNoZWNrc3VtbWVkUmVjaXBpZW50QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgcmVjaXBpZW50Tmlja25hbWUgPSBhZGRyZXNzQm9va0VudHJ5T2JqZWN0Py5uYW1lO1xuXG4gIGNvbnN0IHJlY2lwaWVudFRvUmVuZGVyID0gYWRkcmVzc09ubHlcbiAgICA/IHJlY2lwaWVudE5pY2tuYW1lIHx8XG4gICAgICByZWNpcGllbnRFbnMgfHxcbiAgICAgIHNob3J0ZW5BZGRyZXNzKGNoZWNrc3VtbWVkUmVjaXBpZW50QWRkcmVzcylcbiAgICA6IHJlY2lwaWVudE5pY2tuYW1lIHx8IHJlY2lwaWVudEVucyB8fCByZWNpcGllbnROYW1lIHx8IHQoJ25ld0NvbnRyYWN0Jyk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9XCJ0eC1pbnNpZ2h0IHR4LWluc2lnaHQtY29tcG9uZW50IHR4LWluc2lnaHQtY29tcG9uZW50LWFkZHJlc3NcIlxuICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBjb3B5VG9DbGlwYm9hcmQoY2hlY2tzdW1tZWRSZWNpcGllbnRBZGRyZXNzKTtcbiAgICAgICAgaWYgKG9uUmVjaXBpZW50Q2xpY2spIHtcbiAgICAgICAgICBvblJlY2lwaWVudENsaWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH19XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0eC1pbnNpZ2h0LWNvbXBvbmVudC1hZGRyZXNzX19zZW5kZXItaWNvblwiPlxuICAgICAgICA8SWRlbnRpY29uIGFkZHJlc3M9e2NoZWNrc3VtbWVkUmVjaXBpZW50QWRkcmVzc30gZGlhbWV0ZXI9ezE4fSAvPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwiYWRkcmVzc19fbmFtZVwiXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dOaWNrbmFtZVBvcG92ZXJzKHRydWUpfVxuICAgICAgPlxuICAgICAgICB7cmVjaXBpZW50VG9SZW5kZXJ9XG4gICAgICA8L2Rpdj5cbiAgICAgIHtzaG93Tmlja25hbWVQb3BvdmVycyA/IChcbiAgICAgICAgPE5pY2tuYW1lUG9wb3ZlcnNcbiAgICAgICAgICBvbkNsb3NlPXsoKSA9PiBzZXRTaG93Tmlja25hbWVQb3BvdmVycyhmYWxzZSl9XG4gICAgICAgICAgYWRkcmVzcz17Y2hlY2tzdW1tZWRSZWNpcGllbnRBZGRyZXNzfVxuICAgICAgICAvPlxuICAgICAgKSA6IG51bGx9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5BZGRyZXNzLnByb3BUeXBlcyA9IHtcbiAgY2hlY2tzdW1tZWRSZWNpcGllbnRBZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZWNpcGllbnROYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZWNpcGllbnRFbnM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFkZHJlc3NPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgb25SZWNpcGllbnRDbGljazogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBZGRyZXNzO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBnZXRBY2NvdW50TGluayB9IGZyb20gJ0BtZXRhbWFzay9ldGhlcnNjYW4tbGluayc7XG5pbXBvcnQge1xuICBnZXRDdXJyZW50Q2hhaW5JZCxcbiAgZ2V0UnBjUHJlZnNGb3JDdXJyZW50UHJvdmlkZXIsXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL2NvbnRleHRzL2kxOG4nO1xuXG5pbXBvcnQgeyBUWVBPR1JBUEhZIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uLy4uLy4uLy4uLy4uL3VpL3R5cG9ncmFwaHknO1xuXG5jb25zdCBBY2NyZWRpdGF0aW9uID0gKHsgZmV0Y2hWaWEsIGFkZHJlc3MgfSkgPT4ge1xuICBjb25zdCB0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG4gIGNvbnN0IGNoYWluSWQgPSB1c2VTZWxlY3RvcihnZXRDdXJyZW50Q2hhaW5JZCk7XG4gIGNvbnN0IHJwY1ByZWZzID0gdXNlU2VsZWN0b3IoZ2V0UnBjUHJlZnNGb3JDdXJyZW50UHJvdmlkZXIpO1xuICBjb25zdCBhZGRyZXNzTGluayA9IGdldEFjY291bnRMaW5rKGFkZHJlc3MsIGNoYWluSWQsIHJwY1ByZWZzKTtcblxuICBjb25zdCBBY2NyZWRpdGF0aW9uTGluayA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICB2YXJpYW50PXtUWVBPR1JBUEhZLkg3fVxuICAgICAgICAgIGNsYXNzTmFtZT1cImFjY3JlZGl0YXRpb25fX3ByZWZpeFwiXG4gICAgICAgICAgYm94UHJvcHM9e3sgbWFyZ2luOiAwIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dCgndHJhbnNhY3Rpb25EZWNvZGluZ0FjY3JlZGl0YXRpb25WZXJpZmllZCcsIFtcbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cImxpbmtcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhY2NyZWRpdGF0aW9uX19saW5rXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGdsb2JhbC5wbGF0Zm9ybS5vcGVuVGFiKHtcbiAgICAgICAgICAgICAgICAgIHVybDogYWRkcmVzc0xpbmssXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICB0aXRsZT17dCgnZXRoZXJzY2FuVmlldycpfVxuICAgICAgICAgICAgICBrZXk9XCJhY2NyZWRpdGF0aW9uLWxpbmstYnV0dG9uXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2ZldGNoVmlhfVxuICAgICAgICAgICAgPC9CdXR0b24+LFxuICAgICAgICAgIF0pfVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9e1RZUE9HUkFQSFkuSDd9IGJveFByb3BzPXt7IG1hcmdpbjogMCB9fT5cbiAgICAgICAgICB7dCgndHJhbnNhY3Rpb25EZWNvZGluZ0FjY3JlZGl0YXRpb25EZWNvZGVkJyl9XG4gICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFjY3JlZGl0YXRpb25cIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWNjcmVkaXRhdGlvbl9faWNvblwiPlxuICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1pbmZvLWNpcmNsZVwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWNjcmVkaXRhdGlvbl9faW5mb1wiPlxuICAgICAgICA8QWNjcmVkaXRhdGlvbkxpbmsgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuQWNjcmVkaXRhdGlvbi5wcm9wVHlwZXMgPSB7XG4gIGZldGNoVmlhOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFjY3JlZGl0YXRpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ob1Byb2plY3RJbmZvRXJyb3IgPSBleHBvcnRzLmhhbmRsZURlY29kaW5nRXJyb3IgPSBleHBvcnRzLlN0b3BEZWNvZGluZ0Vycm9yID0gZXhwb3J0cy5EZWNvZGluZ0Vycm9yID0gdm9pZCAwO1xuY29uc3QgRm9ybWF0ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2Zvcm1hdFwiKSk7XG4vL0ZvciB3aGVuIHdlIG5lZWQgdG8gdGhyb3cgYW4gZXJyb3IsIGhlcmUncyBhIHdyYXBwZXIgY2xhc3MgdGhhdCBleHRlbmRzIEVycm9yLlxuLy9BcG9sb2dpZXMgYWJvdXQgdGhlIGNvbmZ1c2luZyBuYW1lLCBidXQgSSB3YW50ZWQgc29tZXRoaW5nIHRoYXQgd291bGQgbWFrZVxuLy9zZW5zZSBzaG91bGQgaXQgbm90IGJlIGNhdWdodCBhbmQgdGh1cyBhY2NpZGVudGFsbHkgZXhwb3NlZCB0byB0aGUgb3V0c2lkZS5cbi8qKlxuICogQGhpZGRlblxuICovXG5jbGFzcyBEZWNvZGluZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGVycm9yKSB7XG4gICAgICAgIHN1cGVyKEZvcm1hdC5VdGlscy5FeGNlcHRpb24ubWVzc2FnZShlcnJvcikpO1xuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiRGVjb2RpbmdFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuRGVjb2RpbmdFcnJvciA9IERlY29kaW5nRXJyb3I7XG4vL3VzZWQgdG8gc3RvcCBkZWNvZGluZzsgbGlrZSBEZWNvZGluZ0Vycm9yLCBidXQgdXNlZCBpbiBjb250ZXh0c1xuLy93aGVyZSBJIGRvbid0IGV4cGVjdCBpdCB0byBiZSBjYXVnaHRcbi8vTk9URTogY3VycmVudGx5IHdlIGRvbid0IGFjdHVhbGx5IGNoZWNrIHRoZSB0eXBlIG9mIGEgdGhyb3duIGVycm9yLFxuLy93ZSBqdXN0IHJlbHkgb24gY29udGV4dC4gIHN0aWxsLCBJIHRoaW5rIGl0IG1ha2VzIHNlbnNlIHRvIGJlIGEgc2VwYXJhdGVcbi8vdHlwZS5cbi8qKlxuICogQGhpZGRlblxuICovXG5jbGFzcyBTdG9wRGVjb2RpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICAvL3doZW4gZGVjb2RpbmcgaW4gZnVsbCBtb2RlLCB3ZSBhbGxvdyBhbiBBQkktbW9kZSByZXRyeS4gIChpZiB3ZSB3ZXJlIGFscmVhZHkgaW5cbiAgICAvL0FCSSBtb2RlLCB3ZSBnaXZlIHVwLilcbiAgICBjb25zdHJ1Y3RvcihlcnJvciwgYWxsb3dSZXRyeSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYFN0b3BwaW5nIGRlY29kaW5nOiAke2Vycm9yLmtpbmR9YDsgLy9zb3JyeSBhYm91dCB0aGUgYmFyZS1ib25lcyBtZXNzYWdlLFxuICAgICAgICAvL2J1dCBhZ2FpbiwgdXNlcnMgc2hvdWxkbid0IGFjdHVhbGx5IHNlZSB0aGlzLCBzbyBJIHRoaW5rIHRoaXMgc2hvdWxkIHN1ZmZpY2UgZm9yIG5vd1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLmFsbG93UmV0cnkgPSBCb29sZWFuKGFsbG93UmV0cnkpO1xuICAgIH1cbn1cbmV4cG9ydHMuU3RvcERlY29kaW5nRXJyb3IgPSBTdG9wRGVjb2RpbmdFcnJvcjtcbi8qKlxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBoYW5kbGVEZWNvZGluZ0Vycm9yKGRhdGFUeXBlLCBlcnJvciwgc3RyaWN0ID0gZmFsc2UpIHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBEZWNvZGluZ0Vycm9yKSB7XG4gICAgICAgIC8vZXhwZWN0ZWQgZXJyb3JcbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgLy9zdHJpY3QgbW9kZSAtLSBzdG9wIGRlY29kaW5nIG9uIGVycm9yc1xuICAgICAgICAgICAgdGhyb3cgbmV3IFN0b3BEZWNvZGluZ0Vycm9yKGVycm9yLmVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vbm9uc3RyaWN0IG1vZGUgLS0gcmV0dXJuIGFuIGVycm9yIHJlc3VsdFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAvL0kgZG9uJ3Qga25vdyB3aHkgVFMncyBpbmZlcmVuY2UgaXMgZmFpbGluZyBoZXJlIGFuZCBuZWVkcyB0aGUgY29lcmNpb25cbiAgICAgICAgICAgICAgICB0eXBlOiBkYXRhVHlwZSxcbiAgICAgICAgICAgICAgICBraW5kOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLmVycm9yXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvL2lmIGl0J3MgKm5vdCogYW4gZXhwZWN0ZWQgZXJyb3IsIHdlIGJldHRlciBub3Qgc3dhbGxvdyBpdCAtLSByZXRocm93IVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5leHBvcnRzLmhhbmRsZURlY29kaW5nRXJyb3IgPSBoYW5kbGVEZWNvZGluZ0Vycm9yO1xuLyoqXG4gKiBUaGlzIGVycm9yIGluZGljYXRlcyB0aGF0IHRoZSB1c2VyIGF0dGVtcHRlZCB0byBpbnN0YW50aWF0ZSBhIGRlY29kZXJcbiAqIHdpdGggbm8gcHJvamVjdCBpbmZvcm1hdGlvbiAoYnkgZXhwbGljaXRseSBvdmVycmlkaW5nIHRoZSBkZWZhdWx0KS5cbiAqIEBjYXRlZ29yeSBFeGNlcHRpb25cbiAqL1xuY2xhc3MgTm9Qcm9qZWN0SW5mb0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcIk5vIHByb2plY3QgaW5mb3JtYXRpb24gc3BlY2lmaWVkLlwiKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJOb1Byb2plY3RJbmZvRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLk5vUHJvamVjdEluZm9FcnJvciA9IE5vUHJvamVjdEluZm9FcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTsgLy9jYW4ndCBkbyAnZXhwb3J0IHR5cGUgKicgOi0vXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hYmlmeVJldHVybmRhdGFEZWNvZGluZyA9IGV4cG9ydHMuYWJpZnlMb2dEZWNvZGluZyA9IGV4cG9ydHMuYWJpZnlDYWxsZGF0YURlY29kaW5nID0gZXhwb3J0cy5hYmlmeVJlc3VsdCA9IGV4cG9ydHMuYWJpZnlUeXBlID0gdm9pZCAwO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgZGVidWcgPSBkZWJ1Z18xLmRlZmF1bHQoXCJjb2RlYzphYmlmeVwiKTtcbmNvbnN0IEZvcm1hdCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9mb3JtYXRcIikpO1xuY29uc3QgQ29tbW9uID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbW1vblwiKSk7XG5jb25zdCBDb252ZXJzaW9uID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnZlcnNpb25cIikpO1xuLyoqIEBjYXRlZ29yeSBBQklmaWNhdGlvbiAqL1xuZnVuY3Rpb24gYWJpZnlUeXBlKGRhdGFUeXBlLCB1c2VyRGVmaW5lZFR5cGVzKSB7XG4gICAgc3dpdGNoIChkYXRhVHlwZS50eXBlQ2xhc3MpIHtcbiAgICAgICAgLy93ZSBvbmx5IG5lZWQgdG8gc3BlY2lhbGx5IGhhbmRsZSB0eXBlcyB0aGF0IGRvbid0IGdvIGluXG4gICAgICAgIC8vdGhlIEFCSSwgb3IgdGhhdCBoYXZlIHNvbWUgaW5mb3JtYXRpb24gbG9zcyB3aGVuIGdvaW5nXG4gICAgICAgIC8vaW4gdGhlIEFCSVxuICAgICAgICAvL25vdGUgdGhhdCB3ZSBkbyBuZWVkIHRvIGhhbmRsZSBhcnJheXMsIGR1ZSB0byByZWN1cnNpb24hXG4gICAgICAgIC8vRmlyc3Q6IHR5cGVzIHRoYXQgZG8gbm90IGdvIGluIHRoZSBBQklcbiAgICAgICAgY2FzZSBcIm1hcHBpbmdcIjpcbiAgICAgICAgY2FzZSBcIm1hZ2ljXCI6XG4gICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAvL05leHQ6IGFkZHJlc3MgJiBjb250cmFjdCwgdGhlc2UgY2FuIGdldCBoYW5kbGVkIHRvZ2V0aGVyXG4gICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XG4gICAgICAgIGNhc2UgXCJjb250cmFjdFwiOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlQ2xhc3M6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIGtpbmQ6IFwiZ2VuZXJhbFwiLFxuICAgICAgICAgICAgICAgIHR5cGVIaW50OiBGb3JtYXQuVHlwZXMudHlwZVN0cmluZyhkYXRhVHlwZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgc3dpdGNoIChkYXRhVHlwZS52aXNpYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImV4dGVybmFsXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ2xhc3M6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IFwiZXh0ZXJuYWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IFwiZ2VuZXJhbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUhpbnQ6IEZvcm1hdC5UeXBlcy50eXBlU3RyaW5nKGRhdGFUeXBlKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNhc2UgXCJpbnRlcm5hbFwiOiAvL3RoZXNlIGRvbid0IGdvIGluIHRoZSBBQklcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrOyAvL3RvIHNhdGlzZnkgVHlwZVNjcmlwdFxuICAgICAgICAvL3RoZSBjb21wbGV4IGNhc2VzOiBzdHJ1Y3QgJiBlbnVtXG4gICAgICAgIGNhc2UgXCJzdHJ1Y3RcIjoge1xuICAgICAgICAgICAgY29uc3QgZnVsbFR5cGUgPSAoRm9ybWF0LlR5cGVzLmZ1bGxUeXBlKGRhdGFUeXBlLCB1c2VyRGVmaW5lZFR5cGVzKSk7XG4gICAgICAgICAgICBpZiAoIWZ1bGxUeXBlLm1lbWJlclR5cGVzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHR5cGVUb0Rpc3BsYXkgPSBGb3JtYXQuVHlwZXMudHlwZVN0cmluZyhkYXRhVHlwZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbW1vbi5Vbmtub3duVXNlckRlZmluZWRUeXBlRXJyb3IoZGF0YVR5cGUuaWQsIHR5cGVUb0Rpc3BsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWVtYmVyVHlwZXMgPSBmdWxsVHlwZS5tZW1iZXJUeXBlcy5tYXAoKHsgbmFtZSwgdHlwZTogbWVtYmVyVHlwZSB9KSA9PiAoe1xuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgdHlwZTogYWJpZnlUeXBlKG1lbWJlclR5cGUsIHVzZXJEZWZpbmVkVHlwZXMpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGVDbGFzczogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGVIaW50OiBGb3JtYXQuVHlwZXMudHlwZVN0cmluZyhmdWxsVHlwZSksXG4gICAgICAgICAgICAgICAgbWVtYmVyVHlwZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImVudW1cIjoge1xuICAgICAgICAgICAgY29uc3QgZnVsbFR5cGUgPSAoRm9ybWF0LlR5cGVzLmZ1bGxUeXBlKGRhdGFUeXBlLCB1c2VyRGVmaW5lZFR5cGVzKSk7XG4gICAgICAgICAgICBpZiAoIWZ1bGxUeXBlLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBsZXQgdHlwZVRvRGlzcGxheSA9IEZvcm1hdC5UeXBlcy50eXBlU3RyaW5nKGRhdGFUeXBlKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29tbW9uLlVua25vd25Vc2VyRGVmaW5lZFR5cGVFcnJvcihkYXRhVHlwZS5pZCwgdHlwZVRvRGlzcGxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbnVtT3B0aW9ucyA9IGZ1bGxUeXBlLm9wdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGJpdHMgPSA4ICogTWF0aC5jZWlsKE1hdGgubG9nMihudW1PcHRpb25zKSAvIDgpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlQ2xhc3M6IFwidWludFwiLFxuICAgICAgICAgICAgICAgIGJpdHMsXG4gICAgICAgICAgICAgICAgdHlwZUhpbnQ6IEZvcm1hdC5UeXBlcy50eXBlU3RyaW5nKGZ1bGxUeXBlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidXNlckRlZmluZWRWYWx1ZVR5cGVcIjoge1xuICAgICAgICAgICAgY29uc3QgZnVsbFR5cGUgPSAoRm9ybWF0LlR5cGVzLmZ1bGxUeXBlKGRhdGFUeXBlLCB1c2VyRGVmaW5lZFR5cGVzKSk7XG4gICAgICAgICAgICBpZiAoIWZ1bGxUeXBlLnVuZGVybHlpbmdUeXBlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHR5cGVUb0Rpc3BsYXkgPSBGb3JtYXQuVHlwZXMudHlwZVN0cmluZyhkYXRhVHlwZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbW1vbi5Vbmtub3duVXNlckRlZmluZWRUeXBlRXJyb3IoZGF0YVR5cGUuaWQsIHR5cGVUb0Rpc3BsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWJpZmllZFVuZGVybHlpbmcgPSBhYmlmeVR5cGUoZnVsbFR5cGUudW5kZXJseWluZ1R5cGUsIHVzZXJEZWZpbmVkVHlwZXMpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYWJpZmllZFVuZGVybHlpbmcpLCB7IHR5cGVIaW50OiBGb3JtYXQuVHlwZXMudHlwZVN0cmluZ1dpdGhvdXRMb2NhdGlvbihkYXRhVHlwZSkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy9maW5hbGx5OiBhcnJheXNcbiAgICAgICAgY2FzZSBcImFycmF5XCI6XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkYXRhVHlwZSksIHsgdHlwZUhpbnQ6IEZvcm1hdC5UeXBlcy50eXBlU3RyaW5nKGRhdGFUeXBlKSwgYmFzZVR5cGU6IGFiaWZ5VHlwZShkYXRhVHlwZS5iYXNlVHlwZSwgdXNlckRlZmluZWRUeXBlcykgfSk7XG4gICAgICAgIC8vZGVmYXVsdCBjYXNlOiBqdXN0IGxlYXZlIGFzLWlzXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZGF0YVR5cGU7XG4gICAgfVxufVxuZXhwb3J0cy5hYmlmeVR5cGUgPSBhYmlmeVR5cGU7XG4vKiogQGNhdGVnb3J5IEFCSWZpY2F0aW9uICovXG5mdW5jdGlvbiBhYmlmeVJlc3VsdChyZXN1bHQsIHVzZXJEZWZpbmVkVHlwZXMpIHtcbiAgICBzd2l0Y2ggKHJlc3VsdC50eXBlLnR5cGVDbGFzcykge1xuICAgICAgICBjYXNlIFwibWFwcGluZ1wiOiAvL2RvZXNuJ3QgZ28gaW4gQUJJXG4gICAgICAgIGNhc2UgXCJtYWdpY1wiOiAvL2RvZXNuJ3QgZ28gaW4gQUJJXG4gICAgICAgIGNhc2UgXCJ0eXBlXCI6IC8vZG9lc24ndCBnbyBpbiBBQklcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XG4gICAgICAgICAgICAvL2FiaWZ5IHRoZSB0eXBlIGJ1dCBsZWF2ZSB0aGUgdmFsdWUgYWxvbmVcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3VsdCksIHsgdHlwZTogYWJpZnlUeXBlKHJlc3VsdC50eXBlLCB1c2VyRGVmaW5lZFR5cGVzKSB9KTtcbiAgICAgICAgY2FzZSBcImNvbnRyYWN0XCI6IHtcbiAgICAgICAgICAgIGxldCBjb2VyY2VkUmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgc3dpdGNoIChjb2VyY2VkUmVzdWx0LmtpbmQpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IChhYmlmeVR5cGUocmVzdWx0LnR5cGUsIHVzZXJEZWZpbmVkVHlwZXMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNBZGRyZXNzOiBjb2VyY2VkUmVzdWx0LnZhbHVlLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3QXNIZXg6IGNvZXJjZWRSZXN1bHQudmFsdWUucmF3QWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvZXJjZWRSZXN1bHQuZXJyb3Iua2luZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkNvbnRyYWN0UGFkZGluZ0Vycm9yXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogKGFiaWZ5VHlwZShyZXN1bHQudHlwZSwgdXNlckRlZmluZWRUeXBlcykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBcIkFkZHJlc3NQYWRkaW5nRXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdUeXBlOiBjb2VyY2VkUmVzdWx0LmVycm9yLnBhZGRpbmdUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3OiBjb2VyY2VkUmVzdWx0LmVycm9yLnJhd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vdGhlciBjb250cmFjdCBlcnJvcnMgYXJlIGdlbmVyaWMgZXJyb3JzIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYnV0IFRTIGRvZXNuJ3Qga25vdyB0aGlzIHNvIHdlIGNvZXJjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvZXJjZWRSZXN1bHQpLCB7IHR5cGU6IChhYmlmeVR5cGUocmVzdWx0LnR5cGUsIHVzZXJEZWZpbmVkVHlwZXMpKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7IC8vdG8gc2F0aXNmeSB0eXBlc2NyaXB0XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICBzd2l0Y2ggKHJlc3VsdC50eXBlLnZpc2liaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXh0ZXJuYWxcIjoge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29lcmNlZFJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29lcmNlZFJlc3VsdCksIHsgdHlwZTogKGFiaWZ5VHlwZShyZXN1bHQudHlwZSwgdXNlckRlZmluZWRUeXBlcykpIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwiaW50ZXJuYWxcIjogLy90aGVzZSBkb24ndCBnbyBpbiB0aGUgQUJJXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhazsgLy90byBzYXRpc2Z5IFR5cGVTY3JpcHRcbiAgICAgICAgY2FzZSBcInN0cnVjdFwiOiB7XG4gICAgICAgICAgICBsZXQgY29lcmNlZFJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICAgIHN3aXRjaCAoY29lcmNlZFJlc3VsdC5raW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2VyY2VkUmVzdWx0LnJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvL25vIGNpcmN1bGFyIHZhbHVlcyBpbiB0aGUgQUJJIVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBhYmlmaWVkTWVtYmVycyA9IGNvZXJjZWRSZXN1bHQudmFsdWUubWFwKCh7IG5hbWUsIHZhbHVlOiBtZW1iZXIgfSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYWJpZnlSZXN1bHQobWVtYmVyLCB1c2VyRGVmaW5lZFR5cGVzKVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAoYWJpZnlUeXBlKHJlc3VsdC50eXBlLCB1c2VyRGVmaW5lZFR5cGVzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYWJpZmllZE1lbWJlcnNcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29lcmNlZFJlc3VsdCksIHsgdHlwZTogKGFiaWZ5VHlwZShyZXN1bHQudHlwZSwgdXNlckRlZmluZWRUeXBlcykpIC8vbm90ZTogbWF5IHRocm93IGV4Y2VwdGlvblxuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInVzZXJEZWZpbmVkVmFsdWVUeXBlXCI6IHtcbiAgICAgICAgICAgIGNvbnN0IGNvZXJjZWRSZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgICAgICBzd2l0Y2ggKGNvZXJjZWRSZXN1bHQua2luZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWJpZnlSZXN1bHQoY29lcmNlZFJlc3VsdC52YWx1ZSwgdXNlckRlZmluZWRUeXBlcyk7XG4gICAgICAgICAgICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvZXJjZWRSZXN1bHQpLCB7IHR5cGU6IGFiaWZ5VHlwZShyZXN1bHQudHlwZSwgdXNlckRlZmluZWRUeXBlcykgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhazsgLy90byBzYXRpc2Z5IFRTIDpQXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImVudW1cIjoge1xuICAgICAgICAgICAgLy9OT1RFOiB0aGlzIGlzIHRoZSBvbmUgY2FzZSB3aGVyZSBlcnJvcnMgYXJlIGNvbnZlcnRlZCB0byBub24tZXJyb3IgdmFsdWVzISFcbiAgICAgICAgICAgIC8vKG90aGVyIHRoYW4gcmVjdXJzaXZlbHksIEkgbWVhbilcbiAgICAgICAgICAgIC8vYmUgYXdhcmUhXG4gICAgICAgICAgICBsZXQgY29lcmNlZFJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICAgIGxldCB1aW50VHlwZSA9IChhYmlmeVR5cGUocmVzdWx0LnR5cGUsIHVzZXJEZWZpbmVkVHlwZXMpKTsgLy9tYXkgdGhyb3cgZXhjZXB0aW9uXG4gICAgICAgICAgICBzd2l0Y2ggKGNvZXJjZWRSZXN1bHQua2luZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdWludFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzQk46IGNvZXJjZWRSZXN1bHQudmFsdWUubnVtZXJpY0FzQk4uY2xvbmUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvZXJjZWRSZXN1bHQuZXJyb3Iua2luZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkVudW1PdXRPZlJhbmdlRXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB1aW50VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNCTjogY29lcmNlZFJlc3VsdC5lcnJvci5yYXdBc0JOLmNsb25lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRW51bVBhZGRpbmdFcnJvclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHVpbnRUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBcIlVpbnRQYWRkaW5nRXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdUeXBlOiBjb2VyY2VkUmVzdWx0LmVycm9yLnBhZGRpbmdUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3OiBjb2VyY2VkUmVzdWx0LmVycm9yLnJhd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJFbnVtTm90Rm91bmREZWNvZGluZ0Vycm9yXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG51bWVyaWNWYWx1ZSA9IGNvZXJjZWRSZXN1bHQuZXJyb3IucmF3QXNCTi5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudW1lcmljVmFsdWUuYml0TGVuZ3RoKCkgPD0gdWludFR5cGUuYml0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdWludFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzQk46IG51bWVyaWNWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHVpbnRUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBcIlVpbnRQYWRkaW5nRXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nVHlwZTogXCJsZWZ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3OiBDb252ZXJzaW9uLnRvSGV4U3RyaW5nKG51bWVyaWNWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHVpbnRUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBjb2VyY2VkUmVzdWx0LmVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJhcnJheVwiOiB7XG4gICAgICAgICAgICBsZXQgY29lcmNlZFJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICAgIHN3aXRjaCAoY29lcmNlZFJlc3VsdC5raW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2VyY2VkUmVzdWx0LnJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvL25vIGNpcmN1bGFyIHZhbHVlcyBpbiB0aGUgQUJJIVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBhYmlmaWVkTWVtYmVycyA9IGNvZXJjZWRSZXN1bHQudmFsdWUubWFwKG1lbWJlciA9PiBhYmlmeVJlc3VsdChtZW1iZXIsIHVzZXJEZWZpbmVkVHlwZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IChhYmlmeVR5cGUocmVzdWx0LnR5cGUsIHVzZXJEZWZpbmVkVHlwZXMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhYmlmaWVkTWVtYmVyc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb2VyY2VkUmVzdWx0KSwgeyB0eXBlOiAoYWJpZnlUeXBlKHJlc3VsdC50eXBlLCB1c2VyRGVmaW5lZFR5cGVzKSkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7IC8vanVzdCBjb2VyY2UgOi0vXG4gICAgfVxufVxuZXhwb3J0cy5hYmlmeVJlc3VsdCA9IGFiaWZ5UmVzdWx0O1xuLyoqIEBjYXRlZ29yeSBBQklmaWNhdGlvbiAqL1xuZnVuY3Rpb24gYWJpZnlDYWxsZGF0YURlY29kaW5nKGRlY29kaW5nLCB1c2VyRGVmaW5lZFR5cGVzKSB7XG4gICAgaWYgKGRlY29kaW5nLmRlY29kaW5nTW9kZSA9PT0gXCJhYmlcIikge1xuICAgICAgICByZXR1cm4gZGVjb2Rpbmc7XG4gICAgfVxuICAgIHN3aXRjaCAoZGVjb2Rpbmcua2luZCkge1xuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbnN0cnVjdG9yXCI6XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWNvZGluZyksIHsgZGVjb2RpbmdNb2RlOiBcImFiaVwiLCBhcmd1bWVudHM6IGRlY29kaW5nLmFyZ3VtZW50cy5tYXAoYXJndW1lbnQgPT4gKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYXJndW1lbnQpLCB7IHZhbHVlOiBhYmlmeVJlc3VsdChhcmd1bWVudC52YWx1ZSwgdXNlckRlZmluZWRUeXBlcykgfSkpKSB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlY29kaW5nKSwgeyBkZWNvZGluZ01vZGU6IFwiYWJpXCIgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5hYmlmeUNhbGxkYXRhRGVjb2RpbmcgPSBhYmlmeUNhbGxkYXRhRGVjb2Rpbmc7XG4vKiogQGNhdGVnb3J5IEFCSWZpY2F0aW9uICovXG5mdW5jdGlvbiBhYmlmeUxvZ0RlY29kaW5nKGRlY29kaW5nLCB1c2VyRGVmaW5lZFR5cGVzKSB7XG4gICAgaWYgKGRlY29kaW5nLmRlY29kaW5nTW9kZSA9PT0gXCJhYmlcIikge1xuICAgICAgICByZXR1cm4gZGVjb2Rpbmc7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlY29kaW5nKSwgeyBkZWNvZGluZ01vZGU6IFwiYWJpXCIsIGFyZ3VtZW50czogZGVjb2RpbmcuYXJndW1lbnRzLm1hcChhcmd1bWVudCA9PiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhcmd1bWVudCksIHsgdmFsdWU6IGFiaWZ5UmVzdWx0KGFyZ3VtZW50LnZhbHVlLCB1c2VyRGVmaW5lZFR5cGVzKSB9KSkpIH0pO1xufVxuZXhwb3J0cy5hYmlmeUxvZ0RlY29kaW5nID0gYWJpZnlMb2dEZWNvZGluZztcbi8qKiBAY2F0ZWdvcnkgQUJJZmljYXRpb24gKi9cbmZ1bmN0aW9uIGFiaWZ5UmV0dXJuZGF0YURlY29kaW5nKGRlY29kaW5nLCB1c2VyRGVmaW5lZFR5cGVzKSB7XG4gICAgaWYgKGRlY29kaW5nLmRlY29kaW5nTW9kZSA9PT0gXCJhYmlcIikge1xuICAgICAgICByZXR1cm4gZGVjb2Rpbmc7XG4gICAgfVxuICAgIHN3aXRjaCAoZGVjb2Rpbmcua2luZCkge1xuICAgICAgICBjYXNlIFwicmV0dXJuXCI6XG4gICAgICAgIGNhc2UgXCJyZXZlcnRcIjpcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlY29kaW5nKSwgeyBkZWNvZGluZ01vZGU6IFwiYWJpXCIsIGFyZ3VtZW50czogZGVjb2RpbmcuYXJndW1lbnRzLm1hcChhcmd1bWVudCA9PiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhcmd1bWVudCksIHsgdmFsdWU6IGFiaWZ5UmVzdWx0KGFyZ3VtZW50LnZhbHVlLCB1c2VyRGVmaW5lZFR5cGVzKSB9KSkpIH0pO1xuICAgICAgICBjYXNlIFwiYnl0ZWNvZGVcIjpcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlY29kaW5nKSwgeyBkZWNvZGluZ01vZGU6IFwiYWJpXCIsIGltbXV0YWJsZXM6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlY29kaW5nKSwgeyBkZWNvZGluZ01vZGU6IFwiYWJpXCIgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5hYmlmeVJldHVybmRhdGFEZWNvZGluZyA9IGFiaWZ5UmV0dXJuZGF0YURlY29kaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWJpZnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNsZWFuQm9vbCA9IGV4cG9ydHMuY291bnREZWNpbWFsUGxhY2VzID0gZXhwb3J0cy5zaGlmdEJpZ0Rvd24gPSBleHBvcnRzLnNoaWZ0QmlnVXAgPSBleHBvcnRzLnRvQnl0ZXMgPSBleHBvcnRzLnRvSGV4U3RyaW5nID0gZXhwb3J0cy50b0JpZyA9IGV4cG9ydHMudG9CaWdJbnQgPSBleHBvcnRzLnRvU2lnbmVkQk4gPSBleHBvcnRzLnRvQk4gPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBkZWJ1ZyA9IGRlYnVnXzEuZGVmYXVsdChcImNvZGVjOmNvbnZlcnNpb25cIik7XG5jb25zdCBibl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJibi5qc1wiKSk7XG5jb25zdCBiaWdfanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYmlnLmpzXCIpKTtcbi8qKlxuICogQHBhcmFtIGJ5dGVzIC0gdW5kZWZpbmVkIHwgc3RyaW5nIHwgbnVtYmVyIHwgQk4gfCBVaW50OEFycmF5IHwgQmlnXG4gKiBAcmV0dXJuIHtCTn1cbiAqL1xuZnVuY3Rpb24gdG9CTihieXRlcykge1xuICAgIGlmIChieXRlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBuZXcgYm5fanNfMS5kZWZhdWx0KGJ5dGVzLCAxNik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PSBcIm51bWJlclwiIHx8IGJuX2pzXzEuZGVmYXVsdC5pc0JOKGJ5dGVzKSkge1xuICAgICAgICByZXR1cm4gbmV3IGJuX2pzXzEuZGVmYXVsdChieXRlcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJ5dGVzIGluc3RhbmNlb2YgYmlnX2pzXzEuZGVmYXVsdCkge1xuICAgICAgICByZXR1cm4gbmV3IGJuX2pzXzEuZGVmYXVsdChieXRlcy50b0ZpeGVkKCkpOyAvL3dhcm5pbmcsIGJldHRlciBob3BlIGlucHV0IGlzIGludGVnZXIhXG4gICAgICAgIC8vbm90ZTogZ29pbmcgdGhyb3VnaCBzdHJpbmcgbWF5IHNlZW0gc2lsbHkgYnV0IGl0J3MgYWN0dWFsbHkgbm90IHRlcnJpYmxlIGhlcmUsXG4gICAgICAgIC8vc2luY2UgQk4gaXMgYmluYXJ5LWJhc2VkIGFuZCBCaWcgaXMgZGVjaW1hbC1iYXNlZFxuICAgICAgICAvL1t0b0ZpeGVkIGlzIGxpa2UgdG9TdHJpbmcgZXhjZXB0IGl0IGd1YXJhbnRlZXMgc2NpZW50aWZpYyBub3RhdGlvbiBpcyBub3QgdXNlZF1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGJ5dGVzLnJlZHVjZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBieXRlcy5yZWR1Y2UoKG51bSwgYnl0ZSkgPT4gbnVtLnNobG4oOCkuYWRkbihieXRlKSwgbmV3IGJuX2pzXzEuZGVmYXVsdCgwKSk7XG4gICAgfVxufVxuZXhwb3J0cy50b0JOID0gdG9CTjtcbi8qKlxuICogQHBhcmFtIGJ5dGVzIC0gVWludDhBcnJheVxuICogQHJldHVybiB7Qk59XG4gKi9cbmZ1bmN0aW9uIHRvU2lnbmVkQk4oYnl0ZXMpIHtcbiAgICBpZiAoYnl0ZXNbMF0gPCAweDgwKSB7XG4gICAgICAgIC8vIGlmIGZpcnN0IGJpdCBpcyAwXG4gICAgICAgIHJldHVybiB0b0JOKGJ5dGVzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB0b0JOKGJ5dGVzLm1hcChiID0+IDB4ZmYgLSBiKSlcbiAgICAgICAgICAgIC5hZGRuKDEpXG4gICAgICAgICAgICAubmVnKCk7XG4gICAgfVxufVxuZXhwb3J0cy50b1NpZ25lZEJOID0gdG9TaWduZWRCTjtcbmZ1bmN0aW9uIHRvQmlnSW50KHZhbHVlKSB7XG4gICAgLy9CTiBpcyBiaW5hcnktYmFzZWQsIHNvIHdlIGNvbnZlcnQgYnkgbWVhbnMgb2YgYSBoZXggc3RyaW5nIGluIG9yZGVyXG4gICAgLy90byBhdm9pZCBoYXZpbmcgdG8gZG8gYSBiaW5hcnktZGVjaW1hbCBjb252ZXJzaW9uIGFuZCBiYWNrIDpQXG4gICAgcmV0dXJuICF2YWx1ZS5pc05lZygpXG4gICAgICAgID8gQmlnSW50KFwiMHhcIiArIHZhbHVlLnRvU3RyaW5nKDE2KSlcbiAgICAgICAgOiAtQmlnSW50KFwiMHhcIiArIHZhbHVlLm5lZygpLnRvU3RyaW5nKDE2KSk7IC8vY2FuJ3QgZGlyZWN0bHkgbWFrZSBuZWdhdGl2ZSBCaWdJbnQgZnJvbSBoZXggc3RyaW5nXG59XG5leHBvcnRzLnRvQmlnSW50ID0gdG9CaWdJbnQ7XG5mdW5jdGlvbiB0b0JpZyh2YWx1ZSkge1xuICAgIC8vbm90ZTogZ29pbmcgdGhyb3VnaCBzdHJpbmcgbWF5IHNlZW0gc2lsbHkgYnV0IGl0J3MgYWN0dWFsbHkgbm90IHRlcnJpYmxlIGhlcmUsXG4gICAgLy9zaW5jZSBCTiAoJiBudW1iZXIpIGlzIGJpbmFyeS1iYXNlZCBhbmQgQmlnIGlzIGRlY2ltYWwtYmFzZWRcbiAgICByZXR1cm4gbmV3IGJpZ19qc18xLmRlZmF1bHQodmFsdWUudG9TdHJpbmcoKSk7XG59XG5leHBvcnRzLnRvQmlnID0gdG9CaWc7XG4vKipcbiAqIEBwYXJhbSBieXRlcyAtIFVpbnQ4QXJyYXkgfCBCTlxuICogQHBhcmFtIHBhZExlbmd0aCAtIG51bWJlciAtIG1pbmltdW0gZGVzaXJlZCBieXRlIGxlbmd0aCAobGVmdC1wYWQgd2l0aCB6ZXJvZXMpXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvSGV4U3RyaW5nKGJ5dGVzLCBwYWRMZW5ndGggPSAwLCBwYWRSaWdodCA9IGZhbHNlIC8vcGFkIG9uIHJpZ2h0IGluc3RlYWQgb2YgbGVuZ3RoXG4pIHtcbiAgICBpZiAoYm5fanNfMS5kZWZhdWx0LmlzQk4oYnl0ZXMpKSB7XG4gICAgICAgIGJ5dGVzID0gdG9CeXRlcyhieXRlcyk7XG4gICAgfVxuICAgIGNvbnN0IHBhZCA9IChzKSA9PiBgJHtcIjAwXCIuc2xpY2UoMCwgMiAtIHMubGVuZ3RoKX0ke3N9YDtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgIDEgIDIgIDMgIDRcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgIDEgIDIgIDMgIDQgIDUgIDYgIDdcbiAgICAvLyBieXRlcy5sZW5ndGg6ICAgICAgICA1ICAtICAweCggICAgICAgICAgZTUgYzIgYWEgMDkgMTEgKVxuICAgIC8vIGxlbmd0aCAocHJlZmVycmVkKTogIDggIC0gIDB4KCAwMCAwMCAwMCBlNSBjMiBhYSAwOSAxMSApXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAtLS4tLS0nXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0IDNcbiAgICBpZiAoYnl0ZXMubGVuZ3RoIDwgcGFkTGVuZ3RoKSB7XG4gICAgICAgIGxldCBwcmlvciA9IGJ5dGVzO1xuICAgICAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KHBhZExlbmd0aCk7XG4gICAgICAgIGlmIChwYWRSaWdodCkge1xuICAgICAgICAgICAgLy91bnVzdWFsIGNhc2U6IHBhZCBvbiByaWdodFxuICAgICAgICAgICAgYnl0ZXMuc2V0KHByaW9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vdXN1YWwgY2FzZVxuICAgICAgICAgICAgYnl0ZXMuc2V0KHByaW9yLCBwYWRMZW5ndGggLSBwcmlvci5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlYnVnKFwiYnl0ZXM6ICVvXCIsIGJ5dGVzKTtcbiAgICBsZXQgc3RyaW5nID0gYnl0ZXMucmVkdWNlKChzdHIsIGJ5dGUpID0+IGAke3N0cn0ke3BhZChieXRlLnRvU3RyaW5nKDE2KSl9YCwgXCJcIik7XG4gICAgcmV0dXJuIGAweCR7c3RyaW5nfWA7XG59XG5leHBvcnRzLnRvSGV4U3RyaW5nID0gdG9IZXhTdHJpbmc7XG5mdW5jdGlvbiB0b0J5dGVzKGRhdGEsIGxlbmd0aCA9IDApIHtcbiAgICAvL25vdGUgdGhhdCBsZW5ndGggaXMgYSBtaW5pbXVtIG91dHB1dCBsZW5ndGhcbiAgICAvL3N0cmluZ3Mgd2lsbCBiZSAwLXBhZGRlZCBvbiBsZWZ0XG4gICAgLy9udW1iZXJzL0JOcyB3aWxsIGJlIHNpZ24tcGFkZGVkIG9uIGxlZnRcbiAgICAvL05PVEU6IGlmIGEgbnVtYmVyL0JOIGlzIHBhc3NlZCBpbiB0aGF0IGlzIHRvbyBiaWcgZm9yIHRoZSBnaXZlbiBsZW5ndGgsXG4gICAgLy95b3Ugd2lsbCBnZXQgYW4gZXJyb3IhXG4gICAgLy8obm90ZSB0aGF0IHN0cmluZ3MgcGFzc2VkIGluIHNob3VsZCBiZSBoZXggc3RyaW5nczsgdGhpcyBpcyBub3QgZm9yIGNvbnZlcnRpbmdcbiAgICAvL2dlbmVyaWMgc3RyaW5ncyB0byBoZXgpXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGxldCBoZXggPSBkYXRhOyAvL3JlbmFtaW5nIGZvciBjbGFyaXR5XG4gICAgICAgIGlmIChoZXguc3RhcnRzV2l0aChcIjB4XCIpKSB7XG4gICAgICAgICAgICBoZXggPSBoZXguc2xpY2UoMik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhleCA9PT0gXCJcIikge1xuICAgICAgICAgICAgLy90aGlzIHNwZWNpYWwgY2FzZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgbWF0Y2ggYmVsb3cgd2lsbCByZXR1cm4gbnVsbCxcbiAgICAgICAgICAgIC8vbm90IGFuIGVtcHR5IGFycmF5LCB3aGVuIGdpdmVuIGFuIGVtcHR5IHN0cmluZ1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXgubGVuZ3RoICUgMiA9PSAxKSB7XG4gICAgICAgICAgICBoZXggPSBgMCR7aGV4fWA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lm1hdGNoKC8uezJ9L2cpLm1hcChieXRlID0+IHBhcnNlSW50KGJ5dGUsIDE2KSkpO1xuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgcHJpb3IgPSBieXRlcztcbiAgICAgICAgICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgIGJ5dGVzLnNldChwcmlvciwgbGVuZ3RoIC0gcHJpb3IubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBCTi9CaWcvbnVtYmVyIGNhc2VcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBkYXRhID0gbmV3IGJuX2pzXzEuZGVmYXVsdChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgYmlnX2pzXzEuZGVmYXVsdCkge1xuICAgICAgICAgICAgLy9ub3RlOiBnb2luZyB0aHJvdWdoIHN0cmluZyBtYXkgc2VlbSBzaWxseSBidXQgaXQncyBhY3R1YWxseSBub3QgdGVycmlibGUgaGVyZSxcbiAgICAgICAgICAgIC8vc2luY2UgQk4gaXMgYmluYXJ5LWJhc2VkIGFuZCBCaWcgaXMgZGVjaW1hbC1iYXNlZFxuICAgICAgICAgICAgZGF0YSA9IG5ldyBibl9qc18xLmRlZmF1bHQoZGF0YS50b0ZpeGVkKCkpO1xuICAgICAgICAgICAgLy9bdG9GaXhlZCBpcyBsaWtlIHRvU3RyaW5nIGV4Y2VwdCBpdCBndWFyYW50ZWVzIHNjaWVudGlmaWMgbm90YXRpb24gaXMgbm90IHVzZWRdXG4gICAgICAgIH1cbiAgICAgICAgLy9ub3RlIHRoYXQgdGhlIGFyZ3VtZW50IGZvciB0b1R3b3MgaXMgZ2l2ZW4gaW4gYml0c1xuICAgICAgICByZXR1cm4gZGF0YS50b1R3b3MobGVuZ3RoICogOCkudG9BcnJheUxpa2UoVWludDhBcnJheSwgXCJiZVwiLCBsZW5ndGgpO1xuICAgICAgICAvL2JpZy1lbmRpYW5cbiAgICB9XG59XG5leHBvcnRzLnRvQnl0ZXMgPSB0b0J5dGVzO1xuLy9jb21wdXRlcyB2YWx1ZSAqIDEwKipkZWNpbWFsUGxhY2VzXG5mdW5jdGlvbiBzaGlmdEJpZ1VwKHZhbHVlLCBkZWNpbWFsUGxhY2VzKSB7XG4gICAgbGV0IG5ld1ZhbHVlID0gbmV3IGJpZ19qc18xLmRlZmF1bHQodmFsdWUpO1xuICAgIG5ld1ZhbHVlLmUgKz0gZGVjaW1hbFBsYWNlcztcbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5leHBvcnRzLnNoaWZ0QmlnVXAgPSBzaGlmdEJpZ1VwO1xuLy9jb21wdXRlcyB2YWx1ZSAqIDEwKiotZGVjaW1hbFBsYWNlc1xuZnVuY3Rpb24gc2hpZnRCaWdEb3duKHZhbHVlLCBkZWNpbWFsUGxhY2VzKSB7XG4gICAgbGV0IG5ld1ZhbHVlID0gbmV3IGJpZ19qc18xLmRlZmF1bHQodmFsdWUpO1xuICAgIG5ld1ZhbHVlLmUgLT0gZGVjaW1hbFBsYWNlcztcbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5leHBvcnRzLnNoaWZ0QmlnRG93biA9IHNoaWZ0QmlnRG93bjtcbi8vd2UgZG9uJ3QgbmVlZCB0aGlzIHlldCwgYnV0IHdlIHdpbGwgZXZlbnR1YWxseVxuZnVuY3Rpb24gY291bnREZWNpbWFsUGxhY2VzKHZhbHVlKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIHZhbHVlLmMubGVuZ3RoIC0gdmFsdWUuZSAtIDEpO1xufVxuZXhwb3J0cy5jb3VudERlY2ltYWxQbGFjZXMgPSBjb3VudERlY2ltYWxQbGFjZXM7XG4vL2NvbnZlcnRzIG91dCBvZiByYW5nZSBib29sZWFucyB0byB0cnVlOyBzb21ldGhpbmcgb2YgYSBIQUNLXG4vL05PVEU6IGRvZXMgTk9UIGRvIHRoaXMgcmVjdXJzaXZlbHkgaW5zaWRlIHN0cnVjdHMsIGFycmF5cywgZXRjIVxuLy9JIG1lYW4sIHRob3NlIGFyZW4ndCBlbGVtZW50YXJ5IGFuZCB0aGVyZWZvcmUgYXJlbid0IGluIHRoZSBkb21haW5cbi8vYW55d2F5LCBidXQgc3RpbGxcbmZ1bmN0aW9uIGNsZWFuQm9vbChyZXN1bHQpIHtcbiAgICBzd2l0Y2ggKHJlc3VsdC5raW5kKSB7XG4gICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgICAgICBzd2l0Y2ggKHJlc3VsdC5lcnJvci5raW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkJvb2xPdXRPZlJhbmdlRXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcmVzdWx0LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzQm9vbGVhbjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5jbGVhbkJvb2wgPSBjbGVhbkJvb2w7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJzaW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VdGlscyA9IHZvaWQgMDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7IC8vJ2V4cG9ydCB0eXBlIConIGlzIG5vdCBhbGxvd2VkXG5jb25zdCBVdGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsc1wiKSk7XG5leHBvcnRzLlV0aWxzID0gVXRpbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW1wb3J0ID0gZXhwb3J0cy5VdGlscyA9IHZvaWQgMDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7IC8vJ2V4cG9ydCB0eXBlIConIGlzIG5vdCBhbGxvd2VkXG5jb25zdCBVdGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsc1wiKSk7XG5leHBvcnRzLlV0aWxzID0gVXRpbHM7XG5jb25zdCBJbXBvcnQgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vaW1wb3J0XCIpKTtcbmV4cG9ydHMuSW1wb3J0ID0gSW1wb3J0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEZvciBkZWNvZGluZyBvZiBwcmltaXRpdmVzIGFuZCBjb25zdGFudHNcbiAqXG4gKiBAcHJvdGVjdGVkXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cbi8vQ2F0ZWdvcnk6IENvbW1vbiBkYXRhIGxvY2F0aW9uXG4vL1tOT1QgbWFraW5nIHRoaXMgYW4gYWN0dWFsIGNhdGVnb3J5IGZvciBub3dcbi8vc2luY2UgdGhlcmUncyBub3RoaW5nIHB1YmxpYyBpbiBpdF1cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbGxvY2F0ZSA9IGV4cG9ydHMuRW5jb2RlID0gZXhwb3J0cy5EZWNvZGUgPSB2b2lkIDA7XG5jb25zdCBEZWNvZGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZGVjb2RlXCIpKTtcbmV4cG9ydHMuRGVjb2RlID0gRGVjb2RlO1xuY29uc3QgRW5jb2RlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2VuY29kZVwiKSk7XG5leHBvcnRzLkVuY29kZSA9IEVuY29kZTtcbmNvbnN0IEFsbG9jYXRlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2FsbG9jYXRlXCIpKTtcbmV4cG9ydHMuQWxsb2NhdGUgPSBBbGxvY2F0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb250YWlucyBmdW5jdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCByYXcgYnl0ZXN0cmluZ3NcbiAqIEBwcm90ZWN0ZWRcbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuLy9DYXRlZ29yeTogQ29tbW9uIGRhdGEgbG9jYXRpb25cbi8vW05PVCBtYWtpbmcgdGhpcyBhbiBhY3R1YWwgY2F0ZWdvcnkgZm9yIG5vd1xuLy9zaW5jZSB0aGVyZSdzIG5vdGhpbmcgcHVibGljIGluIGl0XVxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVuY29kZSA9IGV4cG9ydHMuRGVjb2RlID0gZXhwb3J0cy5SZWFkID0gdm9pZCAwO1xuY29uc3QgUmVhZCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9yZWFkXCIpKTtcbmV4cG9ydHMuUmVhZCA9IFJlYWQ7XG5jb25zdCBEZWNvZGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZGVjb2RlXCIpKTtcbmV4cG9ydHMuRGVjb2RlID0gRGVjb2RlO1xuY29uc3QgRW5jb2RlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2VuY29kZVwiKSk7XG5leHBvcnRzLkVuY29kZSA9IEVuY29kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlYWQgPSBleHBvcnRzLkVuY29kZSA9IGV4cG9ydHMuRGVjb2RlID0gdm9pZCAwO1xuLyoqXG4gKiBGb3IgZGVjb2Rpbmcgb2YgZXZlbnQgdG9waWNzXG4gKlxuICogQHByb3RlY3RlZFxuICogQGNhdGVnb3J5IEFCSSBkYXRhIGxvY2F0aW9uXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cbmNvbnN0IERlY29kZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9kZWNvZGVcIikpO1xuZXhwb3J0cy5EZWNvZGUgPSBEZWNvZGU7XG5jb25zdCBFbmNvZGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZW5jb2RlXCIpKTtcbmV4cG9ydHMuRW5jb2RlID0gRW5jb2RlO1xuY29uc3QgUmVhZCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9yZWFkXCIpKTtcbmV4cG9ydHMuUmVhZCA9IFJlYWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogRm9yIGVuY29kaW5nIG1hcHBpbmcga2V5c1xuICpcbiAqIEBwcm90ZWN0ZWRcbiAqIEBjYXRlZ29yeSBTb2xpZGl0eSBkYXRhIGxvY2F0aW9uXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbmNvZGUgPSB2b2lkIDA7XG5jb25zdCBFbmNvZGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZW5jb2RlXCIpKTtcbmV4cG9ydHMuRW5jb2RlID0gRW5jb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEZvciBhbGxvY2F0aW9uIGFuZCBkZWNvZGluZyBvZiBtZW1vcnkgZGF0YVxuICpcbiAqIEBjYXRlZ29yeSBTb2xpZGl0eSBkYXRhIGxvY2F0aW9uXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EZWNvZGUgPSBleHBvcnRzLkFsbG9jYXRlID0gdm9pZCAwO1xuY29uc3QgQWxsb2NhdGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vYWxsb2NhdGVcIikpO1xuZXhwb3J0cy5BbGxvY2F0ZSA9IEFsbG9jYXRlO1xuY29uc3QgRGVjb2RlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlY29kZVwiKSk7XG5leHBvcnRzLkRlY29kZSA9IERlY29kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBGb3IgZGVjb2Rpbmcgc3RhY2sgdmFyaWFibGVzXG4gKlxuICogQGNhdGVnb3J5IFNvbGlkaXR5IGRhdGEgbG9jYXRpb25cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlYWQgPSBleHBvcnRzLkRlY29kZSA9IHZvaWQgMDtcbmNvbnN0IERlY29kZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9kZWNvZGVcIikpO1xuZXhwb3J0cy5EZWNvZGUgPSBEZWNvZGU7XG5jb25zdCBSZWFkID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3JlYWRcIikpO1xuZXhwb3J0cy5SZWFkID0gUmVhZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBGb3IgZGVjb2Rpbmcgb2Ygc3BlY2lhbC9tYWdpYyB2YXJpYWJsZXNcbiAqXG4gKiBAcHJvdGVjdGVkXG4gKiBAY2F0ZWdvcnkgU29saWRpdHkgZGF0YSBsb2NhdGlvblxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVhZCA9IGV4cG9ydHMuRGVjb2RlID0gdm9pZCAwO1xuY29uc3QgRGVjb2RlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlY29kZVwiKSk7XG5leHBvcnRzLkRlY29kZSA9IERlY29kZTtcbmNvbnN0IFJlYWQgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vcmVhZFwiKSk7XG5leHBvcnRzLlJlYWQgPSBSZWFkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEZvciBhbGxvY2F0aW9uIGFuZCBkZWNvZGluZyBvZiBzdG9yYWdlIHZhcmlhYmxlc1xuICpcbiAqIEBjYXRlZ29yeSBTb2xpZGl0eSBkYXRhIGxvY2F0aW9uXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVhZCA9IGV4cG9ydHMuRGVjb2RlID0gZXhwb3J0cy5BbGxvY2F0ZSA9IGV4cG9ydHMuVXRpbHMgPSB2b2lkIDA7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpOyAvL2Nhbid0IGRvICdleHBvcnQgdHlwZSAqJ1xuY29uc3QgVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIikpO1xuZXhwb3J0cy5VdGlscyA9IFV0aWxzO1xuY29uc3QgQWxsb2NhdGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vYWxsb2NhdGVcIikpO1xuZXhwb3J0cy5BbGxvY2F0ZSA9IEFsbG9jYXRlO1xuY29uc3QgRGVjb2RlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlY29kZVwiKSk7XG5leHBvcnRzLkRlY29kZSA9IERlY29kZTtcbmNvbnN0IFJlYWQgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vcmVhZFwiKSk7XG5leHBvcnRzLlJlYWQgPSBSZWFkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEZvciByZWFkaW5nL2RlY29kaW5nIGNvbnN0YW50cyBleHByZXNzZWQgYXMgQVNUIG5vZGVzXG4gKlxuICogQGNhdGVnb3J5IFNvbGlkaXR5IGRhdGEgbG9jYXRpb25cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlY29kZSA9IGV4cG9ydHMuUmVhZCA9IHZvaWQgMDtcbmNvbnN0IFJlYWQgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vcmVhZFwiKSk7XG5leHBvcnRzLlJlYWQgPSBSZWFkO1xuY29uc3QgRGVjb2RlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlY29kZVwiKSk7XG5leHBvcnRzLkRlY29kZSA9IERlY29kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbXBvcnQgPSBleHBvcnRzLlV0aWxzID0gdm9pZCAwO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTsgLy8nZXhwb3J0IHR5cGUgKicgaXMgbm90IGFsbG93ZWRcbmNvbnN0IFV0aWxzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpKTtcbmV4cG9ydHMuVXRpbHMgPSBVdGlscztcbmNvbnN0IEltcG9ydCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9pbXBvcnRcIikpO1xuZXhwb3J0cy5JbXBvcnQgPSBJbXBvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5uYXRpdml6ZUV2ZW50QXJncyA9IGV4cG9ydHMubmF0aXZpemVSZXR1cm4gPSBleHBvcnRzLm5hdGl2aXplID0gZXhwb3J0cy51bnNhZmVOYXRpdml6ZSA9IGV4cG9ydHMuUmVzdWx0SW5zcGVjdG9yID0gdm9pZCAwO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgZGVidWcgPSBkZWJ1Z18xLmRlZmF1bHQoXCJjb2RlYzpleHBvcnRcIik7XG5jb25zdCBDb252ZXJzaW9uID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnZlcnNpb25cIikpO1xuY29uc3QgaW5zcGVjdF8xID0gcmVxdWlyZShcIi4vZm9ybWF0L3V0aWxzL2luc3BlY3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXN1bHRJbnNwZWN0b3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3BlY3RfMS5SZXN1bHRJbnNwZWN0b3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1bnNhZmVOYXRpdml6ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zcGVjdF8xLnVuc2FmZU5hdGl2aXplOyB9IH0pO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHNpbWlsYXIgdG9cbiAqIFtbRm9ybWF0LlV0aWxzLkluc3BlY3QudW5zYWZlTmF0aXZpemV8dW5zYWZlTmF0aXZpemVdXSwgYnV0IGlzIGludGVuZGVkIHRvXG4gKiBiZSBzYWZlLCBhbmQgYWxzbyBhbGxvd3MgZm9yIGRpZmZlcmVudCBvdXRwdXQgZm9ybWF0cy4gIFRoZSBvbmx5IGN1cnJlbnRseVxuICogc3VwcG9ydGVkIGZvcm1hdCBpcyBcImV0aGVyc1wiLCB3aGljaCBpcyBpbnRlbmRlZCB0byBtYXRjaCB0aGUgd2F5IHRoYXRcbiAqIFRydWZmbGUgQ29udHJhY3QgY3VycmVudGx5IHJldHVybnMgdmFsdWVzIChiYXNlZCBvbiB0aGUgRXRoZXJzIGRlY29kZXIpLiAgQXNcbiAqIHN1Y2gsIGl0IG9ubHkgaGFuZGxlcyBBQkkgdHlwZXMsIGFuZCBpbiBhZGRpdGlvbiBkb2VzIG5vdCBoYW5kbGUgdGhlIHR5cGVzXG4gKiBmaXhlZCwgdWZpeGVkLCBvciBmdW5jdGlvbi4gIE5vdGUgdGhhdCBpbiB0aGVzZSBjYXNlcyBpdCByZXR1cm5zIGB1bmRlZmluZWRgXG4gKiByYXRoZXIgdGhhbiB0aHJvd2luZywgYXMgd2Ugd2FudCB0aGlzIGZ1bmN0aW9uIHRvIGJlIHVzZWQgaW4gY29udGV4dHMgd2hlcmVcbiAqIGl0IGhhZCBiZXR0ZXIgbm90IHRocm93LiAgSXQgYWxzbyBkb2VzIG5vdCBoYW5kbGUgY2lyY3VsYXJpdGllcywgZm9yIHNpbWlsYXJcbiAqIHJlYXNvbnMuXG4gKlxuICogVG8gaGFuZGxlIG51bWVyaWMgdHlwZXMsIHRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gb3B0aW9uYWwgbnVtYmVyRm9ybWF0dGVyXG4gKiBvcHRpb24gdGhhdCB0ZWxscyBpdCBob3cgdG8gaGFuZGxlIG51bWJlcnM7IHRoaXMgZnVuY3Rpb24gc2hvdWxkIHRha2UgYVxuICogQmlnSW50IGFzIGlucHV0LiAgQnkgZGVmYXVsdCwgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIHRoZSBpZGVudGl0eSwgYW5kIHNvXG4gKiBudW1iZXJzIHdpbGwgYmUgcmVwcmVzZW50ZWQgYXMgQmlnSW50cy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBiZWdpbnMgYnkgY2FsbGluZyBhYmlmeSwgc28gb3V0LW9mLXJhbmdlIGVudW1zICh0aGF0XG4gKiBhcmVuJ3Qgc28gb3V0LW9mLXJhbmdlIGFzIHRvIGJlIHBhZGRpbmcgZXJyb3JzKSB3aWxsIG5vdCByZXR1cm4gYHVuZGVmaW5lZGAuXG4gKiBPdXQtb2YtcmFuZ2UgYm9vbGVhbnMgc2ltaWxhcmx5IHdpbGwgcmV0dXJuIHRydWUgcmF0aGVyIHRoYW4gYHVuZGVmaW5lZGAuXG4gKiBIb3dldmVyLCBvdGhlciByYW5nZSBlcnJvcnMgbWF5IHJldHVybiBgdW5kZWZpbmVkYDsgdGhpcyBtYXkgdGVjaG5pY2FsbHkgYmUgYVxuICogc2xpZ2h0IGluY29tcGF0aWJpbGl0eSB3aXRoIGV4aXN0aW5nIGJlaGF2aW9yLCBidXQgc2hvdWxkIG5vdCBiZSByZWxldmFudFxuICogZXhjZXB0IGluIHF1aXRlIHVudXN1YWwgY2FzZXMuXG4gKlxuICogSW4gb3JkZXIgdG8gbWF0Y2ggdGhlIGJlaGF2aW9yIGZvciB0dXBsZXMsIHR1cGxlcyB3aWxsIGJlIHRyYW5zZm9ybWVkIGludG9cbiAqIGFycmF5cywgYnV0IG5hbWVkIGVudHJpZXMgd2lsbCBhZGRpdGlvbmFsbHkgYmUga2V5ZWQgYnkgbmFtZS4gIE1vcmVvdmVyLFxuICogaW5kZXhlZCB2YXJpYWJsZXMgb2YgcmVmZXJlbmNlIHR5cGUgd2lsbCBiZSBuYXRpdml6ZWQgdG8gYW4gdW5kZWNvZGVkIGhleFxuICogc3RyaW5nLlxuICovXG5mdW5jdGlvbiBuYXRpdml6ZShyZXN1bHQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IG51bWJlckZvcm1hdHRlciA9IG9wdGlvbnMubnVtYmVyRm9ybWF0dGVyIHx8ICh4ID0+IHgpO1xuICAgIGNvbnN0IGZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0IHx8IFwiZXRoZXJzXCI7XG4gICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgY2FzZSBcImV0aGVyc1wiOlxuICAgICAgICAgICAgcmV0dXJuIGV0aGVyc0NvbXBhdGlibGVOYXRpdml6ZShyZXN1bHQsIG51bWJlckZvcm1hdHRlcik7XG4gICAgfVxufVxuZXhwb3J0cy5uYXRpdml6ZSA9IG5hdGl2aXplO1xuZnVuY3Rpb24gZXRoZXJzQ29tcGF0aWJsZU5hdGl2aXplKHJlc3VsdCwgbnVtYmVyRm9ybWF0dGVyID0geCA9PiB4KSB7XG4gICAgLy9ub3RlOiB0aGUgb3JpZ2luYWwgdmVyc2lvbiBvZiB0aGlzIGZ1bmN0aW9uIGJlZ2FuIGJ5IGNhbGxpbmcgYWJpZnksXG4gICAgLy9idXQgd2UgZG9uJ3QgZG8gdGhhdCBoZXJlIGJlY2F1c2UgYWJpZnkgcmVxdWlyZXMgYSB1c2VyRGVmaW5lZFR5cGVzXG4gICAgLy9wYXJhbWV0ZXIgYW5kIHdlIGRvbid0IHdhbnQgdGhhdC5cbiAgICAvL0hvd2V2ZXIsIGl0IG9ubHkgbmVlZHMgdGhhdCB0byBoYW5kbGUgZ2V0dGluZyB0aGUgdHlwZXMgcmlnaHQuICBTaW5jZVxuICAgIC8vd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGF0IGhlcmUsIHdlIGluc3RlYWQgZG8gYXdheSB3aXRoIGFiaWZ5IGFuZCBoYW5kbGVcbiAgICAvL3N1Y2ggbWF0dGVycyBvdXJzZWx2ZXMgKHdoaWNoIGlzIGxlc3MgY29udmVuaWVudCwgeWVhaCkuXG4gICAgc3dpdGNoIChyZXN1bHQua2luZCkge1xuICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgIHN3aXRjaCAocmVzdWx0LmVycm9yLmtpbmQpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiSW5kZXhlZFJlZmVyZW5jZVR5cGVFcnJvclwiOlxuICAgICAgICAgICAgICAgICAgICAvL3N0cmljdGx5IHNwZWFraW5nIGZvciBhcnJheXMgZXRoZXJzIHdpbGwgZmFpbCB0byBkZWNvZGVcbiAgICAgICAgICAgICAgICAgICAgLy9yYXRoZXIgdGhhbiBkbyB0aGlzLCBidXQsIGVoXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZXJyb3IucmF3O1xuICAgICAgICAgICAgICAgIGNhc2UgXCJFbnVtT3V0T2ZSYW5nZUVycm9yXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJGb3JtYXR0ZXIoQ29udmVyc2lvbi50b0JpZ0ludChyZXN1bHQuZXJyb3IucmF3QXNCTikpO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgc3dpdGNoIChyZXN1bHQudHlwZS50eXBlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwidWludFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJpbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXNCTiA9IChyZXN1bHQpLnZhbHVlLmFzQk47XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJGb3JtYXR0ZXIoQ29udmVyc2lvbi50b0JpZ0ludChhc0JOKSk7XG4gICAgICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbnVtZXJpY0FzQk4gPSAocmVzdWx0KS52YWx1ZS5udW1lcmljQXNCTjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlckZvcm1hdHRlcihDb252ZXJzaW9uLnRvQmlnSW50KG51bWVyaWNBc0JOKSk7XG4gICAgICAgICAgICAgICAgY2FzZSBcImJvb2xcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC52YWx1ZS5hc0Jvb2xlYW47XG4gICAgICAgICAgICAgICAgY2FzZSBcImJ5dGVzXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzSGV4ID0gcmVzdWx0LnZhbHVlLmFzSGV4O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXNIZXggIT09IFwiMHhcIiA/IGFzSGV4IDogbnVsbDtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWRkcmVzc1wiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnZhbHVlLmFzQWRkcmVzcztcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29udHJhY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC52YWx1ZS5hZGRyZXNzO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2VyY2VkUmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvZXJjZWRSZXN1bHQudmFsdWUua2luZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInZhbGlkXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvZXJjZWRSZXN1bHQudmFsdWUuYXNTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWFsZm9ybWVkXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHR1cm4gbWFsZm9ybWVkIHV0Zi04IGludG8gcmVwbGFjZW1lbnQgY2hhcmFjdGVycyAoVStGRkZEKSAoV0FSTklORylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RlIHdlIG5lZWQgdG8gY3V0IG9mZiB0aGUgMHggcHJlZml4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNvZXJjZWRSZXN1bHQudmFsdWUuYXNIZXguc2xpY2UoMiksIFwiaGV4XCIpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcInVzZXJEZWZpbmVkVmFsdWVUeXBlXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldGhlcnNDb21wYXRpYmxlTmF0aXZpemUocmVzdWx0LnZhbHVlLCBudW1iZXJGb3JtYXR0ZXIpO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJhcnJheVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnZhbHVlLm1hcCh2YWx1ZSA9PiBldGhlcnNDb21wYXRpYmxlTmF0aXZpemUodmFsdWUsIG51bWJlckZvcm1hdHRlcikpO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ0dXBsZVwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJ1Y3RcIjpcbiAgICAgICAgICAgICAgICAgICAgLy9pbiB0aGlzIGNhc2UsIHdlIG5lZWQgdGhlIHJlc3VsdCB0byBiZSBhbiBhcnJheSwgYnV0IGFsc29cbiAgICAgICAgICAgICAgICAgICAgLy90byBoYXZlIHRoZSBmaWVsZCBuYW1lcyAod2hlcmUgZXh0YW50KSBhcyBrZXlzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hdGl2aXplZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWlycyA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IG5hbWUsIHZhbHVlIH0gb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hdGl2aXplZFZhbHVlID0gZXRoZXJzQ29tcGF0aWJsZU5hdGl2aXplKHZhbHVlLCBudW1iZXJGb3JtYXR0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZpemVkLnB1c2gobmF0aXZpemVkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdml6ZWRbbmFtZV0gPSBuYXRpdml6ZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmF0aXZpemVkO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHJlc3VsdC50eXBlLnZpc2liaWxpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJleHRlcm5hbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZXJjZWRSZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ldGhlcnMgcGVyIHNlIGRvZXNuJ3QgaGFuZGxlIHRoaXMsIGJ1dCB3ZWIzJ3MgaGFja2VkIHZlcnNpb24gd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc29tZXRpbWVzIGRlY29kZSB0aGVzZSBhcyBqdXN0IGEgYnl0ZXMyNCwgc28gbGV0J3MgZG8gdGhhdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2VyY2VkUmVzdWx0LnZhbHVlLmNvbnRyYWN0LmFkZHJlc3MudG9Mb3dlckNhc2UoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZXJjZWRSZXN1bHQudmFsdWUuc2VsZWN0b3Iuc2xpY2UoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW50ZXJuYWxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcImZpeGVkXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcInVmaXhlZFwiOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHNpbWlsYXIgdG8gW1tuYXRpdml6ZV1dLCBidXQgdGFrZXNcbiAqIGEgW1tSZXR1cm5kYXRhRGVjb2RpbmddXS4gIElmIHRoZXJlJ3Mgb25seSBvbmUgcmV0dXJuZWQgdmFsdWUsIGl0XG4gKiB3aWxsIGJlIHJ1biB0aHJvdWdoIGNvbXBhdGlibGVOYXRpdml6ZSBidXQgb3RoZXJ3aXNlIHVuYWx0ZXJlZDtcbiAqIG90aGVyd2lzZSB0aGUgcmVzdWx0cyB3aWxsIGJlIHB1dCBpbiBhbiBvYmplY3QuXG4gKlxuICogTm90ZSB0aGF0IGlmIHRoZSBSZXR1cm5kYXRhRGVjb2RpbmcgaXMgbm90IGEgW1tSZXR1cm5EZWNvZGluZ11dLFxuICogdGhpcyB3aWxsIGp1c3QgcmV0dXJuIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBuYXRpdml6ZVJldHVybihkZWNvZGluZywgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgbnVtYmVyRm9ybWF0dGVyID0gb3B0aW9ucy5udW1iZXJGb3JtYXR0ZXIgfHwgKHggPT4geCk7XG4gICAgY29uc3QgZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQgfHwgXCJldGhlcnNcIjtcbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICBjYXNlIFwiZXRoZXJzXCI6XG4gICAgICAgICAgICByZXR1cm4gZXRoZXJzQ29tcGF0aWJsZU5hdGl2aXplUmV0dXJuKGRlY29kaW5nLCBudW1iZXJGb3JtYXR0ZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMubmF0aXZpemVSZXR1cm4gPSBuYXRpdml6ZVJldHVybjtcbmZ1bmN0aW9uIGV0aGVyc0NvbXBhdGlibGVOYXRpdml6ZVJldHVybihkZWNvZGluZywgbnVtYmVyRm9ybWF0dGVyID0geCA9PiB4KSB7XG4gICAgaWYgKGRlY29kaW5nLmtpbmQgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGRlY29kaW5nLmFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGV0aGVyc0NvbXBhdGlibGVOYXRpdml6ZShkZWNvZGluZy5hcmd1bWVudHNbMF0udmFsdWUsIG51bWJlckZvcm1hdHRlcik7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVjb2RpbmcuYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGRlY29kaW5nLmFyZ3VtZW50c1tpXTtcbiAgICAgICAgY29uc3QgbmF0aXZpemVkID0gZXRoZXJzQ29tcGF0aWJsZU5hdGl2aXplKHZhbHVlLCBudW1iZXJGb3JtYXR0ZXIpO1xuICAgICAgICByZXN1bHRbaV0gPSBuYXRpdml6ZWQ7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBuYXRpdml6ZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBzaW1pbGFyIHRvIFtbY29tcGF0aWJsZU5hdGl2aXplXV0sIGJ1dCB0YWtlc1xuICogYSBbW0xvZ0RlY29kaW5nXV0sIGFuZCBwdXRzIHRoZSByZXN1bHRzIGluIGFuIG9iamVjdC4gIE5vdGVcbiAqIHRoYXQgdGhpcyBkb2VzIG5vdCByZXR1cm4gdGhlIGVudGlyZSBldmVudCBpbmZvLCBidXQganVzdCB0aGVcbiAqIGBhcmdzYCBmb3IgdGhlIGV2ZW50LlxuICovXG5mdW5jdGlvbiBuYXRpdml6ZUV2ZW50QXJncyhkZWNvZGluZywgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgbnVtYmVyRm9ybWF0dGVyID0gb3B0aW9ucy5udW1iZXJGb3JtYXR0ZXIgfHwgKHggPT4geCk7XG4gICAgY29uc3QgZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQgfHwgXCJldGhlcnNcIjtcbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICBjYXNlIFwiZXRoZXJzXCI6XG4gICAgICAgICAgICByZXR1cm4gZXRoZXJzQ29tcGF0aWJsZU5hdGl2aXplRXZlbnRBcmdzKGRlY29kaW5nLCBudW1iZXJGb3JtYXR0ZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMubmF0aXZpemVFdmVudEFyZ3MgPSBuYXRpdml6ZUV2ZW50QXJncztcbmZ1bmN0aW9uIGV0aGVyc0NvbXBhdGlibGVOYXRpdml6ZUV2ZW50QXJncyhkZWNvZGluZywgbnVtYmVyRm9ybWF0dGVyID0geCA9PiB4KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWNvZGluZy5hcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZGVjb2RpbmcuYXJndW1lbnRzW2ldO1xuICAgICAgICBjb25zdCBuYXRpdml6ZWQgPSBldGhlcnNDb21wYXRpYmxlTmF0aXZpemUodmFsdWUsIG51bWJlckZvcm1hdHRlcik7XG4gICAgICAgIHJlc3VsdFtpXSA9IG5hdGl2aXplZDtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IG5hdGl2aXplZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvL25vdGU6IGlmIHlvdSBoYXZlIGFuIGFyZ3VtZW50IG5hbWVkIF9fbGVuZ3RoX18sIHdoYXQgZXRoZXJzXG4gICAgLy9hY3R1YWxseSBkb2VzIGlzLi4uIHdlaXJkLiAgd2UncmUganVzdCBnb2luZyB0byBkbyB0aGlzIGluc3RlYWQsXG4gICAgLy93aGljaCBpcyBzaW1wbGVyIGFuZCBwcm9iYWJseSBtb3JlIHVzZWZ1bCwgZXZlbiBpZiBpdCdzIG5vdCBzdHJpY3RseVxuICAgIC8vdGhlIHNhbWUgKEkgKnNlcmlvdXNseSogZG91YnQgYW55b25lIHdhcyByZWx5aW5nIG9uIHRoZSBvbGQgYmVoYXZpb3IsXG4gICAgLy9iZWNhdXNlIGl0J3MsIHVoLCBub3QgdmVyeSB1c2VmdWwpXG4gICAgcmVzdWx0Ll9fbGVuZ3RoX18gPSBkZWNvZGluZy5hcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBvcnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVXRpbHMgPSBleHBvcnRzLlR5cGVzID0gdm9pZCAwO1xuLyoqXG4gKiAjIENvZGVjIE91dHB1dCBGb3JtYXRcbiAqXG4gKiAjIyBNb2R1bGUgaW5mb3JtYXRpb25cbiAqXG4gKiBUaGlzIG1vZHVsZSBwcmltYXJpbHkgZGVmaW5lcyBUeXBlU2NyaXB0IHR5cGVzIGZvciB0aGUgb3V0cHV0IGZvcm1hdFxuICogdXNlZCBpbiByZXN1bHRzIHByb3ZpZGVkIGJ5IHBhY2thZ2VzXG4gKiBgQHRydWZmbGUvZGVjb2RlckBeNC4wLjBgIGFuZCBgQHRydWZmbGUvY29kZWNAXjAuMS4wYC5cbiAqXG4gKiBTZWUgYmVsb3cgZm9yIGNvbXBsZXRlIGxpc3Rpbmcgb3IgY29udGludWUgcmVhZGluZ1xuICogW0Zvcm1hdCBpbmZvcm1hdGlvbl0oI2Zvcm1hdC1pbmZvcm1hdGlvbikgdG8gbGVhcm4gYWJvdXQgdGhpcyBmb3JtYXQuXG4gKlxuICogIyMjIEhvdyB0byBpbXBvcnRcbiAqXG4gKiBJbXBvcnQgZWl0aGVyIGFzIHBhcnQgb2YgQ29kZWMgb3IgYnkgaXRzZWxmOlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIHdoZW4gaW1wb3J0aW5nIGVudGlyZSBDb2RlYywgdXNlIENvZGVjLkZvcm1hdC4qOlxuICogaW1wb3J0ICogYXMgQ29kZWMgZnJvbSBcIkB0cnVmZmxlL2NvZGVjXCI7XG4gKlxuICogLy8gb3IgaW1wb3J0IEZvcm1hdCBkaXJlY3RseTpcbiAqIGltcG9ydCB7IEZvcm1hdCB9IGZyb20gXCJAdHJ1ZmZsZS9jb2RlY1wiO1xuICogYGBgXG4gKlxuICogIVtFeGFtcGxlIHN0cnVjdCBkZWNvZGluZ10obWVkaWE6Ly9leGFtcGxlLXN0cnVjdC1kZWNvZGluZy5wbmcpXG4gKlxuICogIyMgRm9ybWF0IGluZm9ybWF0aW9uXG4gKlxuICogVGhpcyBmb3JtYXQgaXMgaW50ZW5kZWQgZm9yIHVzZSBpbiBzbWFydCBjb250cmFjdCBhbmQgZGFwcCBkZXZlbG9wbWVudFxuICogdG9vbHMgYW5kIGxpYnJhcmllcywgYW5kIGZvciB1c2UgaW4gZGlzcGxheSBjb250ZXh0cywgc3VjaCBhcyB3aGVuXG4gKiBidWlsZGluZyBvbi1zY3JlZW4gY29tcG9uZW50cyB0byBzaG93IHRyYW5zYWN0aW9uIGFuZCBzbWFydCBjb250cmFjdFxuICogc3RhdGUgaW5mb3JtYXRpb24uXG4gKlxuICogVGhpcyBmb3JtYXQgc2Vla3MgdG8gcHJvdmlkZSBhbiBleGhhdXN0aXZlIHNjaGVtYSBmb3IgSmF2YVNjcmlwdFxuICogb2JqZWN0cyB0byBlbmNvZGUgKipsb3NzbGVzcyoqLCAqKm1hY2hpbmUtcmVhZGFibGUqKiByZXByZXNlbnRhdGlvbnMgb2ZcbiAqIGFsbCBwb3NzaWJsZSBTb2xpZGl0eSBhbmQgQUJJIGRhdGEgdHlwZXMgYW5kIGFsbCBwb3NzaWJsZSB2YWx1ZXMgb2YgdGhvc2VcbiAqIHR5cGVzLlxuICpcbiAqIFRoaXMgZm9ybWF0IHRhcmdldHMgdHlwZXMgYW5kIHZhbHVlcyB1bmRlcnN0b29kIGJ5IHRoZVxuICogW1NvbGlkaXR5IHByb2dyYW1taW5nIGxhbmd1YWdlXShodHRwczovL3NvbGlkaXR5LnJlYWR0aGVkb2NzLmlvKSBhbmRcbiAqIHRoZSBbQ29udHJhY3QgQUJJIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vc29saWRpdHkucmVhZHRoZWRvY3MuaW8vZW4vdjAuNS4zL2FiaS1zcGVjLmh0bWwpLFxuICogd2l0aGluIHRoZSBjb250ZXh0IG9mIHRoZSBbRXRoZXJldW0gVmlydHVhbCBNYWNoaW5lXShodHRwczovL2V0aGVyZXVtLmdpdGh1Yi5pby95ZWxsb3dwYXBlci9wYXBlci5wZGYpXG4gKiAoRVZNKSBhbmQgaW4gcmF3IGRhdGEgZm9yIHRyYW5zYWN0aW9ucyBhbmQgbG9ncyBhY2NvcmRpbmcgdG8gdGhlXG4gKiBbRXRoZXJldW0gSlNPTiBSUENdKGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS93aWtpL3dpa2kvSlNPTi1SUEMpLlxuICpcbiAqIE9iamVjdHMgaW4gdGhpcyBmb3JtYXQgbWF5IGJlIGRlZXBseSBuZXN0ZWQgYW5kL29yIGNvbnRhaW4gY2lyY3VsYXJcbiAqIGRlcGVuZGVuY2llcy4gQXMgc3VjaCwgKipkbyBub3QqKiBzZXJpYWxpemUgb2JqZWN0cyBpbiB0aGlzIGZvcm1hdCBvclxuICogb3RoZXJ3aXNlIGF0dGVtcHQgdG8gZGlzcGxheSB0aGVtIGluIGZ1bGwgd2l0aG91dCBjb25zaWRlcmluZyBwb3RlbnRpYWxcbiAqIHJpc2suICoqT2JqZWN0cyBpbiB0aGlzIGZvcm1hdCBhcmUgZm9yIHRoZSBtYWNoaW5lIHRvIHJlYWQsIG5vdCBodW1hbnMhKipcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHV0aWxpdGllcyBmb3IgaW5zcGVjdGluZyBvYmplY3RzIGluIHRoaXMgZm9ybWF0LFxuICogaW5jbHVkaW5nIHRoZSAqKnNhZmUqKiBbW0Zvcm1hdC5VdGlscy5JbnNwZWN0LlJlc3VsdEluc3BlY3Rvcl1dIHdyYXBwZXJcbiAqIChmb3IgW3V0aWwuaW5zcGVjdF0oaHR0cHM6Ly9ub2RlanMub3JnL2FwaS91dGlsLmh0bWwjdXRpbF91dGlsX2luc3BlY3Rfb2JqZWN0X29wdGlvbnMpKSxcbiAqIGFuZCB0aGUgKip1bnNhZmUqKiBbW0Zvcm1hdC5VdGlscy5JbnNwZWN0LnVuc2FmZU5hdGl2aXplXV0gZnVuY3Rpb24uIEZvciBtb3JlXG4gKiBpbmZvcm1hdGlvbiwgcGxlYXNlIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhvc2UgdXRpbGl0aWVzLlxuICpcbiAqICMjIyBTcGVjaWZpY2F0aW9uXG4gKlxuICogSW5kaXZpZHVhbCBkZWNvZGVkIHZhbHVlcyBhcmUgcmVwcmVzZW50ZWQgYnkgb2JqZWN0cyBvZiB0aGUgdHlwZVxuICogW1tGb3JtYXQuVmFsdWVzLlJlc3VsdF1dLCB3aGljaCBjb250YWluIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICogICAxLiBgdHlwZWA6IFRoaXMgaXMgYSBbW0Zvcm1hdC5UeXBlcy5UeXBlfGBUeXBlYF1dIG9iamVjdCBkZXNjcmliaW5nIHRoZSB2YWx1ZSdzXG4gKiAgICAgdHlwZS4gIEVhY2ggYFR5cGVgIGhhcyBhIGB0eXBlQ2xhc3NgIGZpZWxkIGRlc2NyaWJpbmcgdGhlIG92ZXJhbGwgYnJvYWQgdHlwZSxcbiAqICAgICBzdWNoIGFzIGBcInVpbnRcImAgb3IgYFwiYnl0ZXNcImAsIHRvZ2V0aGVyIHdpdGggYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0aGF0IGdpdmVzXG4gKiAgICAgdGhlIHNwZWNpZmljIHR5cGUuICBGb3IgZnVsbCBkZXRhaWwsIHNlZSBbW0Zvcm1hdC5UeXBlc11dLlxuICpcbiAqICAgMi4gYGtpbmRgOiBUaGlzIGlzIGVpdGhlciBgXCJ2YWx1ZVwiYCwgaW4gd2hpY2ggY2FzZSB0aGUgYFJlc3VsdGAgaXMgYVxuICogICAgIFtbRm9ybWF0LlZhbHVlcy5WYWx1ZXxgVmFsdWVgXV0sIG9yIGBcImVycm9yXCJgLCBpbiB3aGljaCBjYXNlIHRoZSBgUmVzdWx0YCBpcyBhblxuICogICAgIFtbRm9ybWF0LkVycm9ycy5FcnJvclJlc3VsdHxgRXJyb3JSZXN1bHRgXV0uICBJbiB0aGUgZm9ybWVyIGNhc2UsIHRoZXJlIHdpbGwgYmVcbiAqICAgICBhIGB2YWx1ZWAgZmllbGQgY29udGFpbmluIHRoZSBkZWNvZGVkIHZhbHVlLiAgSW4gdGhlIGxhdHRlciBjYXNlLCB0aGVyZSB3aWxsIGJlXG4gKiAgICAgYW4gYGVycm9yYCBmaWVsZCBpbmRpY2F0aW5nIHdoYXQgd2VudCB3cm9uZy4gICpXYXJuaW5nKjogV2hlbiBkZWNvZGluZyBhXG4gKiAgICAgY29tcGxleCB0eXBlLCBzdWNoIGFzIGFuIGFycmF5LCBtYXBwaW5nLCBvciBhcnJheSwgZ2V0dGluZyBhIGtpbmQgb2YgYFwidmFsdWVcImBcbiAqICAgICBkb2VzIG5vdCBuZWNlc3NhcmlseSBtZWFuIHRoZSBpbmRpdmlkdWFsIGVsZW1lbnRzIHdlcmUgZGVjb2RlZCBzdWNjZXNzZnVsbHkuXG4gKiAgICAgRXZlbiBpZiB0aGUgYFJlc3VsdGAgZm9yIHRoZSBhcnJheSAobWFwcGluZywgc3RydWN0KSBhcyBhIHdob2xlIGhhcyBraW5kXG4gKiAgICAgYFwidmFsdWVcImAsIHRoZSBlbGVtZW50cyBtaWdodCBzdGlsbCBoYXZlIGtpbmQgYFwiZXJyb3JcImAuXG4gKlxuICogICAzLiBgdmFsdWVgOiBBcyBtZW50aW9uZWQsIHRoaXMgaXMgaW5jbHVkZWQgd2hlbiBga2luZGAgaXMgZXF1YWwgdG8gYFwidmFsdWVcImAuXG4gKiAgICAgSXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGFjdHVhbCBkZWNvZGVkIHZhbHVlLiAgU2VlXG4gKiAgICAgW1tGb3JtYXQuVmFsdWVzfGBGb3JtYXQuVmFsdWVzYF1dIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqICAgNC4gYGVycm9yYDogVGhlIGFsdGVybmF0aXZlIHRvIGB2YWx1ZWAuICBHZW5lcmFsbHkgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXRcbiAqICAgICB0aGUgcmF3IGRhdGEgdGhhdCBsZWQgdG8gdGhlIGVycm9yLiAgU2VlIFtbRm9ybWF0LkVycm9yc3xgRm9ybWF0LkVycm9yc2BdXSBmb3JcbiAqICAgICBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqICAgNS4gYHJlZmVyZW5jZWA6IFRoaXMgZmllbGQgaXMgYSBkZWJ1Z2dlci1vbmx5IGZlYXR1cmUgYW5kIGRvZXMgbm90XG4gKiAgICAgIGFwcGx5IHRvIHJlc3VsdHMgcmV0dXJuZWQgYnkgIEB0cnVmZmxlL2RlY29kZXIsIHNvIGl0IHdvbid0IGJlIGRvY3VtZW50ZWQgaGVyZS5cbiAqXG4gKiAjIyMgVmFsdWVzIHZzLiBlcnJvcnNcbiAqXG4gKiBJdCdzIHdvcnRoIHRha2luZyBhIG1vbWVudCBoZXJlIHRvIGFuc3dlciB0aGUgcXVlc3Rpb246IFdoYXQgY291bnRzIGFzIGEgdmFsdWUsXG4gKiBhbmQgd2hhdCBjb3VudHMgYXMgYW4gZXJyb3I/XG4gKlxuICogSW4gZ2VuZXJhbCwgdGhlIGFuc3dlciBpcyB0aGF0IGFueXRoaW5nIHRoYXQgY2FuIGJlIGdlbmVyYXRlZCB2aWEgU29saWRpdHlcbiAqIGFsb25lIChpLmUuIG5vIGFzc2VtYmx5KSwgd2l0aCBjb3JyZWN0bHktZW5jb2RlZCBpbnB1dHMsIGFuZCB3aXRob3V0IG1ha2luZyB1c2VcbiAqIG9mIGNvbXBpbGVyIGJ1Z3MsIGlzIGEgdmFsdWUsIG5vdCBhbiBlcnJvci4gIFRoYXQgbWVhbnMgdGhhdCwgZm9yIGluc3RhbmNlLCB0aGVcbiAqIGZvbGxvd2luZyB0aGluZ3MgYXJlIHZhbHVlcywgbm90IGVycm9yczpcbiAqICAgLSBBIHZhcmlhYmxlIG9mIGNvbnRyYWN0IHR5cGUgd2hvc2UgYWRkcmVzcyBkb2VzIG5vdCBhY3R1YWxseSBob2xkIGFcbiAqICAgICBjb250cmFjdCBvZiB0aGF0IHR5cGU7XG4gKiAgIC0gQW4gZXh0ZXJuYWwgZnVuY3Rpb24gcG9pbnRlciB0aGF0IGRvZXMgbm90IGNvcnJlc3BvbmQgdG8gYSB2YWxpZFxuICogICAgIGZ1bmN0aW9uO1xuICogICAtIEEgc3RyaW5nIGNvbnRhaW5pbmcgaW52YWxpZCBVVEYtODtcbiAqICAgLSAuLi4sIGV0Yy5cbiAqXG4gKiBCeSBjb250cmFzdCwgdGhlIGZvbGxvd2luZyAqYXJlKiBlcnJvcnM6XG4gKiAgIC0gQSBgYm9vbGAgd2hpY2ggaXMgbmVpdGhlciBgZmFsc2VgICgwKSBub3IgYHRydWVgICgxKTtcbiAqICAgLSBBbiBgZW51bWAgd2hpY2ggaXMgb3V0IG9mIHJhbmdlO1xuICogICAtIC4uLiwgZXRjLlxuICpcbiAqIChZb3UgbWF5IGJlIHdvbmRlcmluZyBhYm91dCB0aGUgZW51bSBjYXNlIGhlcmUsIGJlY2F1c2UgaWYgeW91IGdvIHN1ZmZpY2llbnRseVxuICogZmFyIGJhY2ssIHRvIFNvbGlkaXR5IDAuNC40IG9yIGVhcmxpZXIsIGl0ICp3YXMqIHBvc3NpYmxlIHRvIGdlbmVyYXRlXG4gKiBvdXQtb2YtcmFuZ2UgZW51bXMgd2l0aG91dCByZXNvcnRpbmcgdG8gYXNzZW1ibHkgb3IgY29tcGlsZXIgYnVncy4gIEhvd2V2ZXIsXG4gKiBlbnVtcyBhcmUgb25seSBzdXBwb3J0ZWQgaW4gZnVsbCBtb2RlIChzZWVcbiAqIFtOb3RlcyBvbiBkZWNvZGluZyBtb2Rlc10oLi4vI2RlY29kaW5nLW1vZGVzKSksXG4gKiB3aGljaCBvbmx5IHN1cHBvcnRzIDAuNC4xMiBhbmQgbGF0ZXIsIHNvXG4gKiB3ZSBjb25zaWRlciBvdXQtb2YtcmFuZ2UgZW51bXMgYW4gZXJyb3IuICBUaGVyZSBhcmUgYWxzbyBhZGRpdGlvbmFsIHRlY2huaWNhbFxuICogcmVhc29ucyB3aHkgc3VwcG9ydGluZyBvdXQtb2YtcmFuZ2UgZW51bXMgYXMgYSB2YWx1ZSB3b3VsZCBiZSBkaWZmaWN1bHQuKVxuICpcbiAqIFRoZXJlIGFyZSB0aHJlZSBzcGVjaWFsIGNhc2VzIGhlcmUgdGhhdCBhcmUgbGlrZWx5IHdvcnRoeSBvZiBub3RlLlxuICpcbiAqIEZpcnN0bHksIGludGVybmFsIGZ1bmN0aW9uIHBvaW50ZXJzIGN1cnJlbnRseSBjYW4ndCBiZSBtZWFuaW5nZnVsbHlcbiAqIGRlY29kZWQgdmlhIEB0cnVmZmxlL2RlY29kZXIuICBIb3dldmVyLCB0aGV5IGRlY29kZSB0byBhIGJhcmUtYm9uZXMgdmFsdWUsXG4gKiBub3QgYW4gZXJyb3IsIGFzIGl0IGlzIChpbiBhIHNlbnNlKSBvdXIgb3duIGZhdWx0IHRoYXQgd2UgY2FuJ3QgZGVjb2RlXG4gKiB0aGVzZSwgc28gaXQgZG9lc24ndCBtYWtlIHNlbnNlIHRvIHJlcG9ydCBhbiBlcnJvciwgd2hpY2ggd291bGQgbWVhbiB0aGF0XG4gKiBzb21ldGhpbmcgaXMgd3Jvbmcgd2l0aCB0aGUgZW5jb2RlZCBkYXRhIGl0c2VsZi4gIFRoaXMgdmFsdWUgdGhhdCBpdFxuICogZGVjb2RlcyB0byB3aWxsIGdpdmUgdGhlIHByb2dyYW0gY291bnRlciB2YWx1ZXMgaXQgY29ycmVzcG9uZHMgdG8sIGJ1dFxuICogd2lsbCBub3QgaW5jbHVkZSB0aGUgZnVuY3Rpb24gbmFtZSBvciBkZWZpbmluZyBjbGFzcywgYXMgQHRydWZmbGUvZGVjb2RlclxuICogaXMgbm90IHByZXNlbnRseSBjYXBhYmxlIG9mIHRoYXQuICBGb3Igbm93LCBmdWxsIGRlY29kaW5nIG9mIGludGVybmFsXG4gKiBmdW5jdGlvbiBwb2ludGVycyByZW1haW5zIGEgZGVidWdnZXItb25seSBmZWF0dXJlLiAgKEJ1dCBsaW1pdGVkIHN1cHBvcnQgZm9yXG4gKiB0aGlzIHZpYSBAdHJ1ZmZsZS9kZWNvZGVyIGlzIHBsYW5uZWQgZm9yIHRoZSBmdXR1cmUuKVxuICpcbiAqIChXaGVuIHVzaW5nIHRoZSBkZWJ1Z2dlciwgYW4gaW52YWxpZCBpbnRlcm5hbCBmdW5jdGlvbiBwb2ludGVyIHdpbGwgZGVjb2RlIHRvIGFuXG4gKiBlcnJvci4gIEhvd2V2ZXIsIHdoZW4gdXNpbmcgQHRydWZmbGUvZGVjb2Rlciwgd2UgaGF2ZSBubyB3YXkgb2YgZGlzY2VybmluZyB3aGV0aGVyXG4gKiB0aGUgcG9pbnRlciBpcyB2YWxpZCBvciBub3QsIHNvIGludGVybmFsIGZ1bmN0aW9uIHBvaW50ZXJzIHdpbGwgYWx3YXlzIGRlY29kZSB0b1xuICogYSB2YWx1ZSwgaWYgYW4gdW5pbmZvcm1hdGl2ZSBvbmUuKVxuICpcbiAqIFNlY29uZGx5LCB3aGVuIGRlY29kaW5nIGV2ZW50cywgaXQgaXMgaW1wb3NzaWJsZSB0byBkZWNvZGUgaW5kZXhlZCBwYXJhbWV0ZXJzXG4gKiBvZiByZWZlcmVuY2UgdHlwZS4gIFRodXMsIHRoZXNlIGRlY29kZSB0byBhbiBlcnJvclxuICogKGBJbmRleGVkUmVmZXJlbmNlVHlwZUVycm9yYCwgd2hpY2ggc2VlKSByYXRoZXIgdGhhbiB0byBhIHZhbHVlLlxuICpcbiAqIFRoaXJkbHksIHRoZSBkZWNvZGVyIGlzIGN1cnJlbnRseSBsaW1pdGVkIHdoZW4gaXQgY29tZXMgdG8gZGVjb2Rpbmcgc3RhdGVcbiAqIHZhcmlhYmxlcyB0aGF0IGFyZSBkZWNsYXJlZCBjb25zdGFudCwgYW5kIG5vdCBhbGwgc3VjaCB2YXJpYWJsZXMgYXJlIHlldFxuICogc3VwcG9ydGVkIGluIGRlY29kaW5nOyBhdHRlbXB0aW5nIHRvIGRlY29kZSBvbmUgb2YgdGhlc2UgdGhhdCBpcyBub3QgY3VycmVudGx5XG4gKiBzdXBwb3J0ZWQgd2lsbCB5aWVsZCBhbiBlcnJvci5cbiAqXG4gKiBTaW1pbGFybHksIHRoZXJlIGFyZSB2YXJpb3VzIHRoaW5ncyB0aGF0IGRlY29kZSB0byBlcnJvcnMgZm9yIHRlY2huaWNhbCByZWFzb25zLlxuICogT2JqZWN0cyB3aXRoIGVuY29kZWQgbGVuZ3RoIGZpZWxkcyBsYXJnZXIgdGhhbiB3aGF0IGZpdHMgaW4gYSBKYXZhU2NyaXB0IHNhZmVcbiAqIGludGVnZXIsIG9yIHBvaW50ZWQgdG8gYnkgcG9pbnRlcnMgd2l0aCB2YWx1ZXMgbGFyZ2VyIHRoYW4gd2hhdCBmaXRzIGluIGFcbiAqIEphdmFTY3JpcHQgc2FmZSBpbnRlZ2VyLCB3aWxsIGRlY29kZSB0byBlcnJvcnMsIGV2ZW4gaWYgdGhleSBtYXkgdGVjaG5pY2FsbHkgYmVcbiAqIGxlZ2FsLiAgU3VjaCBjYXNlcyBhcmUgaW1wcmFjdGljYWwgdG8gaGFuZGxlIGFuZCBzaG91bGQgbmV2ZXIgY29tZSB1cCBpbiByZWFsXG4gKiB1c2Ugc28gd2UgZGVjb2RlIHRoZW0gdG8gZXJyb3JzLiAgRXJyb3JzIG1heSBhbHNvIGJlIHJldHVybmVkIGluIGNhc2Ugb2YgYW5cbiAqIGVycm9yIGluIGF0dGVtcHRpbmcgdG8gcmVhZCB0aGUgZGF0YSB0byBiZSBkZWNvZGVkLlxuICpcbiAqIEZpbmFsbHksIGV4Y2VwdCB3aGVuIGRlY29kaW5nIGV2ZW50cywgd2UgZG8gbm90IHJldHVybiBhbiBlcnJvciBpZiB0aGUgcG9pbnRlcnNcbiAqIGluIGFuIEFCSS1lbmNvZGVkIGFycmF5IG9yIHR1cGxlIGFyZSBhcnJhbmdlZCBpbiBhIG5vbnN0YW5kYXJkIHdheSwgb3IgaWZcbiAqIHN0cmluZ3Mgb3IgYnl0ZXN0cmluZ3MgYXJlIGluY29ycmVjdGx5IHBhZGRlZCwgYmVjYXVzZSBpdCBpcyBub3Qgd29ydGggdGhlXG4gKiB0cm91YmxlIHRvIGRldGVjdCB0aGVzZSBjb25kaXRpb25zLlxuICpcbiAqXG4gKiAjIyBOb3RlcyBvbiB0aGlzIGRvY3VtZW50YXRpb25cbiAqXG4gKiBNb3N0IG9mIHRoaXMgZG9lc24ndCBoYXZlIGV4cGxhbmF0b3J5IGRvY3VtZW50YXRpb25cbiAqIGJlY2F1c2UgaXQncyBsYXJnZWx5IHNlbGYtZXhwbGFuYXRvcnksIGJ1dCBwYXJ0aWN1bGFybHlcbiAqIG5vbi1vYnZpb3VzIHBhcnRzIGhhdmUgYmVlbiBkb2N1bWVudGVkIGZvciBjbGFyaXR5LlxuICpcbiAqIEEgbm90ZSBvbiBvcHRpb25hbCBmaWVsZHM6IEEgbnVtYmVyIG9mIHR5cGVzIG9yIHZhbHVlc1xuICogaGF2ZSBvcHRpb25hbCBmaWVsZHMuICBUaGVzZSBjb250YWluIGhlbHBmdWxcbiAqIGJ1dCBub24tZXNzZW50aWFsIGluZm9ybWF0aW9uLCBvciBpbmZvcm1hdGlvbiB3aGljaFxuICogZm9yIHRlY2huaWNhbCByZWFzb25zIHdlIGNhbid0IGd1YXJhbnRlZSB3ZSBjYW4gZGV0ZXJtaW5lLlxuICpcbiAqIEBjYXRlZ29yeSBEYXRhXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHlwZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbW1vbl8xLlR5cGVzOyB9IH0pO1xuY29uc3QgVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIikpO1xuZXhwb3J0cy5VdGlscyA9IFV0aWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlUmV2ZXJ0ID0gZXhwb3J0cy5kZWNvZGVSZXR1cm5kYXRhID0gZXhwb3J0cy5kZWNvZGVFdmVudCA9IGV4cG9ydHMuZGVjb2RlQ2FsbGRhdGEgPSBleHBvcnRzLmRlY29kZVZhcmlhYmxlID0gdm9pZCAwO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgZGVidWcgPSBkZWJ1Z18xLmRlZmF1bHQoXCJjb2RlYzpjb3JlXCIpO1xuY29uc3QgQXN0ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2FzdFwiKSk7XG5jb25zdCBBYmlEYXRhID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2FiaS1kYXRhXCIpKTtcbmNvbnN0IFRvcGljID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3RvcGljXCIpKTtcbmNvbnN0IEV2bSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9ldm1cIikpO1xuY29uc3QgQ29udGV4dHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vY29udGV4dHNcIikpO1xuY29uc3QgYWJpZnlfMSA9IHJlcXVpcmUoXCIuL2FiaWZ5XCIpO1xuY29uc3QgQ29udmVyc2lvbiA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9jb252ZXJzaW9uXCIpKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuY29uc3QgcmVhZF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3JlYWRcIikpO1xuY29uc3QgZGVjb2RlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZGVjb2RlXCIpKTtcbi8vIHVudHlwZWQgaW1wb3J0IHNpbmNlIG5vIEB0eXBlcy93ZWIzLXV0aWxzIGV4aXN0c1xuY29uc3QgV2ViM1V0aWxzID0gcmVxdWlyZShcIndlYjMtdXRpbHNcIik7XG4vKipcbiAqIEBDYXRlZ29yeSBEZWNvZGluZ1xuICovXG5mdW5jdGlvbiogZGVjb2RlVmFyaWFibGUoZGVmaW5pdGlvbiwgcG9pbnRlciwgaW5mbywgY29tcGlsYXRpb25JZCkge1xuICAgIGxldCBjb21waWxlciA9IGluZm8uY3VycmVudENvbnRleHQuY29tcGlsZXI7XG4gICAgbGV0IGRhdGFUeXBlID0gQXN0LkltcG9ydC5kZWZpbml0aW9uVG9UeXBlKGRlZmluaXRpb24sIGNvbXBpbGF0aW9uSWQsIGNvbXBpbGVyKTtcbiAgICByZXR1cm4geWllbGQqIGRlY29kZV8xLmRlZmF1bHQoZGF0YVR5cGUsIHBvaW50ZXIsIGluZm8pOyAvL25vIG5lZWQgdG8gcGFzcyBhbiBvZmZzZXRcbn1cbmV4cG9ydHMuZGVjb2RlVmFyaWFibGUgPSBkZWNvZGVWYXJpYWJsZTtcbi8qKlxuICogQENhdGVnb3J5IERlY29kaW5nXG4gKi9cbmZ1bmN0aW9uKiBkZWNvZGVDYWxsZGF0YShpbmZvLCBpc0NvbnN0cnVjdG9yIC8vaWdub3JlZCBpZiBjb250ZXh0ISB0cnVzdCBjb250ZXh0IGluc3RlYWQgaWYgaGF2ZVxuKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGluZm8uY3VycmVudENvbnRleHQ7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpIHtcbiAgICAgICAgLy9pZiB3ZSBkb24ndCBrbm93IHRoZSBjb250cmFjdCBJRCwgd2UgY2FuJ3QgZGVjb2RlXG4gICAgICAgIGlmIChpc0NvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtpbmQ6IFwiY3JlYXRlXCIsXG4gICAgICAgICAgICAgICAgZGVjb2RpbmdNb2RlOiBcImZ1bGxcIixcbiAgICAgICAgICAgICAgICBieXRlY29kZTogQ29udmVyc2lvbi50b0hleFN0cmluZyhpbmZvLnN0YXRlLmNhbGxkYXRhKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2luZDogXCJ1bmtub3duXCIsXG4gICAgICAgICAgICAgICAgZGVjb2RpbmdNb2RlOiBcImZ1bGxcIixcbiAgICAgICAgICAgICAgICBkYXRhOiBDb252ZXJzaW9uLnRvSGV4U3RyaW5nKGluZm8uc3RhdGUuY2FsbGRhdGEpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNvbnRleHRIYXNoID0gY29udGV4dC5jb250ZXh0O1xuICAgIGNvbnN0IGNvbnRyYWN0VHlwZSA9IENvbnRleHRzLkltcG9ydC5jb250ZXh0VG9UeXBlKGNvbnRleHQpO1xuICAgIGlzQ29uc3RydWN0b3IgPSBjb250ZXh0LmlzQ29uc3RydWN0b3I7XG4gICAgY29uc3QgYWxsb2NhdGlvbnMgPSBpbmZvLmFsbG9jYXRpb25zLmNhbGxkYXRhO1xuICAgIGxldCBhbGxvY2F0aW9uO1xuICAgIGxldCBzZWxlY3RvcjtcbiAgICAvL2ZpcnN0OiBpcyB0aGlzIGEgY3JlYXRpb24gY2FsbD9cbiAgICBpZiAoaXNDb25zdHJ1Y3Rvcikge1xuICAgICAgICBhbGxvY2F0aW9uID0gKGFsbG9jYXRpb25zLmNvbnN0cnVjdG9yQWxsb2NhdGlvbnNbY29udGV4dEhhc2hdIHx8IHsgaW5wdXQ6IHVuZGVmaW5lZCB9KS5pbnB1dDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vc2tpcHBpbmcgYW55IGVycm9yLWhhbmRsaW5nIG9uIHRoaXMgcmVhZCwgYXMgYSBjYWxsZGF0YSByZWFkIGNhbid0IHRocm93IGFueXdheVxuICAgICAgICBsZXQgcmF3U2VsZWN0b3IgPSB5aWVsZCogcmVhZF8xLmRlZmF1bHQoe1xuICAgICAgICAgICAgbG9jYXRpb246IFwiY2FsbGRhdGFcIixcbiAgICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgICAgbGVuZ3RoOiBFdm0uVXRpbHMuU0VMRUNUT1JfU0laRVxuICAgICAgICB9LCBpbmZvLnN0YXRlKTtcbiAgICAgICAgc2VsZWN0b3IgPSBDb252ZXJzaW9uLnRvSGV4U3RyaW5nKHJhd1NlbGVjdG9yKTtcbiAgICAgICAgYWxsb2NhdGlvbiA9ICgoYWxsb2NhdGlvbnMuZnVuY3Rpb25BbGxvY2F0aW9uc1tjb250ZXh0SGFzaF0gfHwge30pW3NlbGVjdG9yXSB8fCB7XG4gICAgICAgICAgICBpbnB1dDogdW5kZWZpbmVkXG4gICAgICAgIH0pLmlucHV0O1xuICAgIH1cbiAgICBpZiAoYWxsb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCBhYmlFbnRyeSA9IG51bGw7XG4gICAgICAgIGlmIChpbmZvLnN0YXRlLmNhbGxkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy90byBoZWxsIHdpdGggcmVhZHMsIGxldCdzIGp1c3QgYmUgZGlyZWN0XG4gICAgICAgICAgICBhYmlFbnRyeSA9IGNvbnRleHQuZmFsbGJhY2tBYmkucmVjZWl2ZSB8fCBjb250ZXh0LmZhbGxiYWNrQWJpLmZhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYWJpRW50cnkgPSBjb250ZXh0LmZhbGxiYWNrQWJpLmZhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiBcIm1lc3NhZ2VcIixcbiAgICAgICAgICAgIGNsYXNzOiBjb250cmFjdFR5cGUsXG4gICAgICAgICAgICBhYmk6IGFiaUVudHJ5LFxuICAgICAgICAgICAgZGF0YTogQ29udmVyc2lvbi50b0hleFN0cmluZyhpbmZvLnN0YXRlLmNhbGxkYXRhKSxcbiAgICAgICAgICAgIGRlY29kaW5nTW9kZTogXCJmdWxsXCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbGV0IGRlY29kaW5nTW9kZSA9IGFsbG9jYXRpb24uYWxsb2NhdGlvbk1vZGU7IC8vc3RhcnRzIG91dCB0aGlzIHdheSwgZGVncmFkZXMgdG8gQUJJIGlmIG5lY2Vzc2FyeVxuICAgIGRlYnVnKFwiY2FsbGRhdGEgZGVjb2RpbmcgbW9kZTogJXNcIiwgZGVjb2RpbmdNb2RlKTtcbiAgICAvL3lvdSBjYW4ndCBtYXAgd2l0aCBhIGdlbmVyYXRvciwgc28gd2UgaGF2ZSB0byBkbyB0aGlzIG1hcCBtYW51YWxseVxuICAgIGxldCBkZWNvZGVkQXJndW1lbnRzID0gW107XG4gICAgZm9yIChjb25zdCBhcmd1bWVudEFsbG9jYXRpb24gb2YgYWxsb2NhdGlvbi5hcmd1bWVudHMpIHtcbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBsZXQgZGF0YVR5cGUgPSBkZWNvZGluZ01vZGUgPT09IFwiZnVsbFwiXG4gICAgICAgICAgICA/IGFyZ3VtZW50QWxsb2NhdGlvbi50eXBlXG4gICAgICAgICAgICA6IGFiaWZ5XzEuYWJpZnlUeXBlKGFyZ3VtZW50QWxsb2NhdGlvbi50eXBlLCBpbmZvLnVzZXJEZWZpbmVkVHlwZXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsdWUgPSB5aWVsZCogZGVjb2RlXzEuZGVmYXVsdChkYXRhVHlwZSwgYXJndW1lbnRBbGxvY2F0aW9uLnBvaW50ZXIsIGluZm8sIHtcbiAgICAgICAgICAgICAgICBhYmlQb2ludGVyQmFzZTogYWxsb2NhdGlvbi5vZmZzZXQsXG4gICAgICAgICAgICAgICAgYWxsb3dSZXRyeTogZGVjb2RpbmdNb2RlID09PSBcImZ1bGxcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcnNfMS5TdG9wRGVjb2RpbmdFcnJvciAmJlxuICAgICAgICAgICAgICAgIGVycm9yLmFsbG93UmV0cnkgJiZcbiAgICAgICAgICAgICAgICBkZWNvZGluZ01vZGUgPT09IFwiZnVsbFwiKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJwcm9ibGVtISByZXRyeWluZyBhcyBBQklcIik7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJlcnJvcjogJU9cIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIC8vaWYgYSByZXRyeSBoYXBwZW5zLCB3ZSd2ZSBnb3QgdG8gZG8gc2V2ZXJhbCB0aGluZ3MgaW4gb3JkZXIgdG8gc3dpdGNoIHRvIEFCSSBtb2RlOlxuICAgICAgICAgICAgICAgIC8vMS4gbWFyayB0aGF0IHdlJ3JlIHN3aXRjaGluZyB0byBBQkkgbW9kZTtcbiAgICAgICAgICAgICAgICBkZWNvZGluZ01vZGUgPSBcImFiaVwiO1xuICAgICAgICAgICAgICAgIC8vMi4gYWJpZnkgYWxsIHByZXZpb3VzbHkgZGVjb2RlZCB2YWx1ZXM7XG4gICAgICAgICAgICAgICAgZGVjb2RlZEFyZ3VtZW50cyA9IGRlY29kZWRBcmd1bWVudHMubWFwKGFyZ3VtZW50RGVjb2RpbmcgPT4gKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYXJndW1lbnREZWNvZGluZyksIHsgdmFsdWU6IGFiaWZ5XzEuYWJpZnlSZXN1bHQoYXJndW1lbnREZWNvZGluZy52YWx1ZSwgaW5mby51c2VyRGVmaW5lZFR5cGVzKSB9KSkpO1xuICAgICAgICAgICAgICAgIC8vMy4gcmV0cnkgdGhpcyBwYXJ0aWN1bGFyIGRlY29kZSBpbiBBQkkgbW9kZS5cbiAgICAgICAgICAgICAgICAvLyhubyB0cnkvY2F0Y2ggb24gdGhpcyBvbmUgYmVjYXVzZSB3ZSBjYW4ndCBhY3R1YWxseSBoYW5kbGUgZXJyb3JzIGhlcmUhXG4gICAgICAgICAgICAgICAgLy9ub3QgdGhhdCB0aGV5IHNob3VsZCBiZSBvY2N1cnJpbmcpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB5aWVsZCogZGVjb2RlXzEuZGVmYXVsdChhYmlmeV8xLmFiaWZ5VHlwZShhcmd1bWVudEFsbG9jYXRpb24udHlwZSwgaW5mby51c2VyRGVmaW5lZFR5cGVzKSwgLy90eXBlIGlzIG5vdyBhYmlmaWVkIVxuICAgICAgICAgICAgICAgIGFyZ3VtZW50QWxsb2NhdGlvbi5wb2ludGVyLCBpbmZvLCB7XG4gICAgICAgICAgICAgICAgICAgIGFiaVBvaW50ZXJCYXNlOiBhbGxvY2F0aW9uLm9mZnNldFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vNC4gdGhlIHJlbWFpbmluZyBwYXJhbWV0ZXJzIHdpbGwgdGhlbiBhdXRvbWF0aWNhbGx5IGJlIGRlY29kZWQgaW4gQUJJIG1vZGUgZHVlIHRvICgxKSxcbiAgICAgICAgICAgICAgICAvL3NvIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgc3BlY2lhbCB0aGVyZS5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vd2Ugc2hvdWxkbid0IGJlIGdldHRpbmcgb3RoZXIgZXhjZXB0aW9ucywgYnV0IGlmIHdlIGRvLCB3ZSBkb24ndCBrbm93XG4gICAgICAgICAgICAgICAgLy9ob3cgdG8gaGFuZGxlIHRoZW0sIHNvIHVoaGhoIGp1c3QgcmV0aHJvdyBJIGd1ZXNzPz9cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lID0gYXJndW1lbnRBbGxvY2F0aW9uLm5hbWU7XG4gICAgICAgIGRlY29kZWRBcmd1bWVudHMucHVzaChuYW1lIC8vZGVsaWJlcmF0ZSBnZW5lcmFsIGZhbHNpbmVzcyB0ZXN0XG4gICAgICAgICAgICA/IHsgbmFtZSwgdmFsdWUgfVxuICAgICAgICAgICAgOiB7IHZhbHVlIH0pO1xuICAgIH1cbiAgICBpZiAoaXNDb25zdHJ1Y3Rvcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogXCJjb25zdHJ1Y3RvclwiLFxuICAgICAgICAgICAgY2xhc3M6IGNvbnRyYWN0VHlwZSxcbiAgICAgICAgICAgIGFyZ3VtZW50czogZGVjb2RlZEFyZ3VtZW50cyxcbiAgICAgICAgICAgIGFiaTogYWxsb2NhdGlvbi5hYmksXG4gICAgICAgICAgICBieXRlY29kZTogQ29udmVyc2lvbi50b0hleFN0cmluZyhpbmZvLnN0YXRlLmNhbGxkYXRhLnNsaWNlKDAsIGFsbG9jYXRpb24ub2Zmc2V0KSksXG4gICAgICAgICAgICBkZWNvZGluZ01vZGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgICBjbGFzczogY29udHJhY3RUeXBlLFxuICAgICAgICAgICAgYWJpOiBhbGxvY2F0aW9uLmFiaSxcbiAgICAgICAgICAgIGFyZ3VtZW50czogZGVjb2RlZEFyZ3VtZW50cyxcbiAgICAgICAgICAgIHNlbGVjdG9yLFxuICAgICAgICAgICAgZGVjb2RpbmdNb2RlXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5kZWNvZGVDYWxsZGF0YSA9IGRlY29kZUNhbGxkYXRhO1xuLyoqXG4gKiBAQ2F0ZWdvcnkgRGVjb2RpbmdcbiAqL1xuZnVuY3Rpb24qIGRlY29kZUV2ZW50KGluZm8sIGFkZHJlc3MsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGFsbG9jYXRpb25zID0gaW5mby5hbGxvY2F0aW9ucy5ldmVudDtcbiAgICBjb25zdCBleHRyYXMgPSBvcHRpb25zLmV4dHJhcyB8fCBcIm9mZlwiO1xuICAgIGxldCByYXdTZWxlY3RvcjtcbiAgICBsZXQgc2VsZWN0b3I7XG4gICAgbGV0IGNvbnRyYWN0QWxsb2NhdGlvbnM7IC8vZm9yIG5vbi1hbm9ueW1vdXMgZXZlbnRzXG4gICAgbGV0IGxpYnJhcnlBbGxvY2F0aW9uczsgLy9zaW1pbGFyXG4gICAgbGV0IGNvbnRyYWN0QW5vbnltb3VzQWxsb2NhdGlvbnM7XG4gICAgbGV0IGxpYnJhcnlBbm9ueW1vdXNBbGxvY2F0aW9ucztcbiAgICBjb25zdCB0b3BpY3NDb3VudCA9IGluZm8uc3RhdGUuZXZlbnR0b3BpY3MubGVuZ3RoO1xuICAgIC8veWVhaCwgaXQncyBub3QgZ3JlYXQgdG8gcmVhZCBkaXJlY3RseSBmcm9tIHRoZSBzdGF0ZSBsaWtlIHRoaXMgKGJ5cGFzc2luZyByZWFkKSwgYnV0IHdoYXQgYXJlIHlvdSBnb25uYSBkbz9cbiAgICBpZiAoYWxsb2NhdGlvbnNbdG9waWNzQ291bnRdKSB7XG4gICAgICAgIGlmICh0b3BpY3NDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHJhd1NlbGVjdG9yID0geWllbGQqIHJlYWRfMS5kZWZhdWx0KHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogXCJldmVudHRvcGljXCIsXG4gICAgICAgICAgICAgICAgdG9waWM6IDBcbiAgICAgICAgICAgIH0sIGluZm8uc3RhdGUpO1xuICAgICAgICAgICAgc2VsZWN0b3IgPSBDb252ZXJzaW9uLnRvSGV4U3RyaW5nKHJhd1NlbGVjdG9yKTtcbiAgICAgICAgICAgIGlmIChhbGxvY2F0aW9uc1t0b3BpY3NDb3VudF0uYnlTZWxlY3RvcltzZWxlY3Rvcl0pIHtcbiAgICAgICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAgICAgICBjb250cmFjdDogY29udHJhY3RBbGxvY2F0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbGlicmFyeTogbGlicmFyeUFsbG9jYXRpb25zXG4gICAgICAgICAgICAgICAgfSA9IGFsbG9jYXRpb25zW3RvcGljc0NvdW50XS5ieVNlbGVjdG9yW3NlbGVjdG9yXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIm5vIGFsbG9jYXRpb25zIGZvciB0aGF0IHNlbGVjdG9yIVwiKTtcbiAgICAgICAgICAgICAgICBjb250cmFjdEFsbG9jYXRpb25zID0ge307XG4gICAgICAgICAgICAgICAgbGlicmFyeUFsbG9jYXRpb25zID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvL2lmIHdlIGRvbid0IGhhdmUgYSBzZWxlY3RvciwgaXQgbWVhbnMgd2UgZG9uJ3QgaGF2ZSBhbnkgbm9uLWFub255bW91cyBldmVudHNcbiAgICAgICAgICAgIGNvbnRyYWN0QWxsb2NhdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIGxpYnJhcnlBbGxvY2F0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIC8vbm93OiBsZXQncyBnZXQgb3VyIGFsbG9jYXRpb25zIGZvciBhbm9ueW1vdXMgZXZlbnRzXG4gICAgICAgICh7XG4gICAgICAgICAgICBjb250cmFjdDogY29udHJhY3RBbm9ueW1vdXNBbGxvY2F0aW9ucyxcbiAgICAgICAgICAgIGxpYnJhcnk6IGxpYnJhcnlBbm9ueW1vdXNBbGxvY2F0aW9uc1xuICAgICAgICB9ID0gYWxsb2NhdGlvbnNbdG9waWNzQ291bnRdLmFub255bW91cyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvL2lmIHRoZXJlJ3Mgbm90IGV2ZW4gYW4gYWxsb2NhdGlvbiBmb3IgdGhlIHRvcGljcyBjb3VudCwgd2UgY2FuJ3RcbiAgICAgICAgLy9kZWNvZGU7IHdlIGNvdWxkIGRvIHRoaXMgdGhlIGhvbmVzdCB3YXkgb2Ygc2V0dGluZyBhbGwgZm91ciBhbGxvY2F0aW9uXG4gICAgICAgIC8vb2JqZWN0cyB0byB7fSwgYnV0IGxldCdzIGp1c3Qgc2hvcnQgY2lyY3VpdFxuICAgICAgICBkZWJ1ZyhcIm5vIGFsbG9jYXRpb25zIGZvciB0aGF0IHRvcGljIGNvdW50IVwiKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICAvL25vdzogd2hhdCBjb250cmFjdCBhcmUgd2UgKHByb2JhYmx5KSBkZWFsaW5nIHdpdGg/IGxldCdzIGdldCBpdHMgY29kZSB0byBmaW5kIG91dFxuICAgIGNvbnN0IGNvZGVCeXRlcyA9IHlpZWxkIHtcbiAgICAgICAgdHlwZTogXCJjb2RlXCIsXG4gICAgICAgIGFkZHJlc3NcbiAgICB9O1xuICAgIGNvbnN0IGNvZGVBc0hleCA9IENvbnZlcnNpb24udG9IZXhTdHJpbmcoY29kZUJ5dGVzKTtcbiAgICBjb25zdCBjb250cmFjdENvbnRleHQgPSBDb250ZXh0cy5VdGlscy5maW5kQ29udGV4dChpbmZvLmNvbnRleHRzLCBjb2RlQXNIZXgpO1xuICAgIGxldCBwb3NzaWJsZUNvbnRyYWN0QWxsb2NhdGlvbnM7IC8vZXhjbHVkZXMgYW5vbnltb3VzIGV2ZW50c1xuICAgIGxldCBwb3NzaWJsZUNvbnRyYWN0QW5vbnltb3VzQWxsb2NhdGlvbnM7XG4gICAgbGV0IHBvc3NpYmxlRXh0cmFBbGxvY2F0aW9uczsgLy9leGNsdWRlcyBhbm9ueW1vdXMgZXZlbnRzXG4gICAgbGV0IHBvc3NpYmxlRXh0cmFBbm9ueW1vdXNBbGxvY2F0aW9ucztcbiAgICBjb25zdCBlbWl0dGluZ0NvbnRleHRIYXNoID0gKGNvbnRyYWN0Q29udGV4dCB8fCB7IGNvbnRleHQ6IHVuZGVmaW5lZCB9KVxuICAgICAgICAuY29udGV4dDtcbiAgICBpZiAoZW1pdHRpbmdDb250ZXh0SGFzaCkge1xuICAgICAgICAvL2lmIHdlIGZvdW5kIHRoZSBjb250cmFjdCwgbWF5YmUgaXQncyBmcm9tIHRoYXQgY29udHJhY3RcbiAgICAgICAgY29uc3QgY29udHJhY3RBbGxvY2F0aW9uID0gY29udHJhY3RBbGxvY2F0aW9uc1tlbWl0dGluZ0NvbnRleHRIYXNoXTtcbiAgICAgICAgY29uc3QgY29udHJhY3RBbm9ueW1vdXNBbGxvY2F0aW9uID0gY29udHJhY3RBbm9ueW1vdXNBbGxvY2F0aW9uc1tlbWl0dGluZ0NvbnRleHRIYXNoXTtcbiAgICAgICAgcG9zc2libGVDb250cmFjdEFsbG9jYXRpb25zID0gY29udHJhY3RBbGxvY2F0aW9uIHx8IFtdO1xuICAgICAgICBwb3NzaWJsZUNvbnRyYWN0QW5vbnltb3VzQWxsb2NhdGlvbnMgPSBjb250cmFjdEFub255bW91c0FsbG9jYXRpb24gfHwgW107XG4gICAgICAgIC8vYWxzbywgd2UgbmVlZCB0byBzZXQgdXAgdGhlIGV4dHJhcyAoZXZlcnl0aGluZyB0aGF0J3MgZnJvbSBhXG4gICAgICAgIC8vbm9uLWxpYnJhcnkgY29udHJhY3QgYnV0ICpub3QqIHRoaXMgb25lKVxuICAgICAgICBwb3NzaWJsZUV4dHJhQWxsb2NhdGlvbnMgPSBbXS5jb25jYXQoLi4uT2JqZWN0LmVudHJpZXMoY29udHJhY3RBbGxvY2F0aW9ucylcbiAgICAgICAgICAgIC5maWx0ZXIoKFtrZXksIF9dKSA9PiBrZXkgIT09IGVtaXR0aW5nQ29udGV4dEhhc2gpXG4gICAgICAgICAgICAubWFwKChbXywgdmFsdWVdKSA9PiB2YWx1ZSkpO1xuICAgICAgICBwb3NzaWJsZUV4dHJhQW5vbnltb3VzQWxsb2NhdGlvbnMgPSBbXS5jb25jYXQoLi4uT2JqZWN0LmVudHJpZXMoY29udHJhY3RBbm9ueW1vdXNBbGxvY2F0aW9ucylcbiAgICAgICAgICAgIC5maWx0ZXIoKFtrZXksIF9dKSA9PiBrZXkgIT09IGVtaXR0aW5nQ29udGV4dEhhc2gpXG4gICAgICAgICAgICAubWFwKChbXywgdmFsdWVdKSA9PiB2YWx1ZSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy9pZiB3ZSBjb3VsZG4ndCBkZXRlcm1pbmUgdGhlIGNvbnRyYWN0LCB3ZWxsLCB3ZSBoYXZlIHRvIGFzc3VtZSBpdCdzIGZyb20gYSBsaWJyYXJ5XG4gICAgICAgIGRlYnVnKFwiY291bGRuJ3QgZmluZCBjb250ZXh0XCIpO1xuICAgICAgICBwb3NzaWJsZUNvbnRyYWN0QWxsb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgcG9zc2libGVDb250cmFjdEFub255bW91c0FsbG9jYXRpb25zID0gW107XG4gICAgICAgIC8vb3IgaXQncyBhbiBleHRyYSwgd2hpY2ggY291bGQgYmUgYW55IG9mIHRoZSBjb250cmFjdHNcbiAgICAgICAgcG9zc2libGVFeHRyYUFsbG9jYXRpb25zID0gW10uY29uY2F0KC4uLk9iamVjdC52YWx1ZXMoY29udHJhY3RBbGxvY2F0aW9ucykpO1xuICAgICAgICBwb3NzaWJsZUV4dHJhQW5vbnltb3VzQWxsb2NhdGlvbnMgPSBbXS5jb25jYXQoLi4uT2JqZWN0LnZhbHVlcyhjb250cmFjdEFub255bW91c0FsbG9jYXRpb25zKSk7XG4gICAgfVxuICAgIC8vbm93IHdlIGdldCBhbGwgdGhlIGxpYnJhcnkgYWxsb2NhdGlvbnMhXG4gICAgY29uc3QgcG9zc2libGVMaWJyYXJ5QWxsb2NhdGlvbnMgPSBbXS5jb25jYXQoLi4uT2JqZWN0LnZhbHVlcyhsaWJyYXJ5QWxsb2NhdGlvbnMpKTtcbiAgICBjb25zdCBwb3NzaWJsZUxpYnJhcnlBbm9ueW1vdXNBbGxvY2F0aW9ucyA9IFtdLmNvbmNhdCguLi5PYmplY3QudmFsdWVzKGxpYnJhcnlBbm9ueW1vdXNBbGxvY2F0aW9ucykpO1xuICAgIC8vbm93IHdlIHB1dCBpdCBhbGwgdG9nZXRoZXIhXG4gICAgY29uc3QgcG9zc2libGVBbGxvY2F0aW9ucyA9IHBvc3NpYmxlQ29udHJhY3RBbGxvY2F0aW9ucy5jb25jYXQocG9zc2libGVMaWJyYXJ5QWxsb2NhdGlvbnMpO1xuICAgIGNvbnN0IHBvc3NpYmxlQW5vbnltb3VzQWxsb2NhdGlvbnMgPSBwb3NzaWJsZUNvbnRyYWN0QW5vbnltb3VzQWxsb2NhdGlvbnMuY29uY2F0KHBvc3NpYmxlTGlicmFyeUFub255bW91c0FsbG9jYXRpb25zKTtcbiAgICBjb25zdCBwb3NzaWJsZUFsbG9jYXRpb25zVG90YWxNaW51c0V4dHJhcyA9IHBvc3NpYmxlQWxsb2NhdGlvbnMuY29uY2F0KHBvc3NpYmxlQW5vbnltb3VzQWxsb2NhdGlvbnMpO1xuICAgIC8vLi4uYW5kIGFsc28gdGhlcmUncyB0aGUgZXh0cmFzXG4gICAgY29uc3QgcG9zc2libGVFeHRyYUFsbG9jYXRpb25zVG90YWwgPSBwb3NzaWJsZUV4dHJhQWxsb2NhdGlvbnMuY29uY2F0KHBvc3NpYmxlRXh0cmFBbm9ueW1vdXNBbGxvY2F0aW9ucyk7XG4gICAgY29uc3QgcG9zc2libGVBbGxvY2F0aW9uc1RvdGFsID0gcG9zc2libGVBbGxvY2F0aW9uc1RvdGFsTWludXNFeHRyYXMuY29uY2F0KFtudWxsXSwgLy9IQUNLOiBhZGQgc2VudGluZWwgdmFsdWUgYmVmb3JlIHRoZSBleHRyYXNcbiAgICBwb3NzaWJsZUV4dHJhQWxsb2NhdGlvbnNUb3RhbCk7XG4gICAgLy93aGV3IVxuICAgIGxldCBkZWNvZGluZ3MgPSBbXTtcbiAgICBhbGxvY2F0aW9uQXR0ZW1wdHM6IGZvciAoY29uc3QgYWxsb2NhdGlvbiBvZiBwb3NzaWJsZUFsbG9jYXRpb25zVG90YWwpIHtcbiAgICAgICAgZGVidWcoXCJ0cnlpbmcgYWxsb2NhdGlvbjogJU9cIiwgYWxsb2NhdGlvbik7XG4gICAgICAgIC8vZmlyc3Q6IGNoZWNrIGZvciBvdXIgc2VudGluZWwgdmFsdWUgZm9yIGV4dHJhcyAoeWVhaCwga2luZCBvZiBIQUNLeSlcbiAgICAgICAgaWYgKGFsbG9jYXRpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZXh0cmFzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm9uXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIGFsbG9jYXRpb25BdHRlbXB0czsgLy9pZ25vcmUgdGhlIHNlbnRpbmVsIGFuZCBjb250aW51ZVxuICAgICAgICAgICAgICAgIGNhc2UgXCJvZmZcIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYWxsb2NhdGlvbkF0dGVtcHRzOyAvL2Rvbid0IGluY2x1ZGUgZXh0cmFzOyBzdG9wIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlIFwibmVjZXNzYXJ5XCI6XG4gICAgICAgICAgICAgICAgICAgIC8vc3RvcCBvbiB0aGUgc2VudGluZWwgYW5kIGV4Y2x1ZGUgZXh0cmFzICp1bmxlc3MqIHRoZXJlIGFyZSBubyBkZWNvZGluZ3MgeWV0XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWNvZGluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYWxsb2NhdGlvbkF0dGVtcHRzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgYWxsb2NhdGlvbkF0dGVtcHRzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy9zZWNvbmQ6IGRvIGEgbmFtZSBjaGVjayBzbyB3ZSBjYW4gc2tpcCBkZWNvZGluZyBpZiBuYW1lIGlzIHdyb25nXG4gICAgICAgIC8vKHRoaXMgd2lsbCBsaWtlbHkgYmUgYSBtb3JlIGRldGFpbGVkIGNoZWNrIGluIHRoZSBmdXR1cmUpXG4gICAgICAgIGlmIChvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCAmJiBhbGxvY2F0aW9uLmFiaS5uYW1lICE9PSBvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vbm93OiB0aGUgbWFpbiBwYXJ0IVxuICAgICAgICBsZXQgZGVjb2RpbmdNb2RlID0gYWxsb2NhdGlvbi5hbGxvY2F0aW9uTW9kZTsgLy9zdGFydHMgb3V0IGhlcmU7IGRlZ3JhZGVzIHRvIGFiaSBpZiBuZWNlc3NhcnlcbiAgICAgICAgY29uc3QgY29udGV4dEhhc2ggPSBhbGxvY2F0aW9uLmNvbnRleHRIYXNoO1xuICAgICAgICBjb25zdCBhdHRlbXB0Q29udGV4dCA9IGluZm8uY29udGV4dHNbY29udGV4dEhhc2hdO1xuICAgICAgICBjb25zdCBlbWl0dGluZ0NvbnRyYWN0VHlwZSA9IENvbnRleHRzLkltcG9ydC5jb250ZXh0VG9UeXBlKGF0dGVtcHRDb250ZXh0KTtcbiAgICAgICAgY29uc3QgY29udHJhY3RUeXBlID0gYWxsb2NhdGlvbi5kZWZpbmVkSW47XG4gICAgICAgIC8veW91IGNhbid0IG1hcCB3aXRoIGEgZ2VuZXJhdG9yLCBzbyB3ZSBoYXZlIHRvIGRvIHRoaXMgbWFwIG1hbnVhbGx5XG4gICAgICAgIGxldCBkZWNvZGVkQXJndW1lbnRzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgYXJndW1lbnRBbGxvY2F0aW9uIG9mIGFsbG9jYXRpb24uYXJndW1lbnRzKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgICAgICAvL2lmIGluIGZ1bGwgbW9kZSwgdXNlIHRoZSBhbGxvY2F0aW9uJ3MgbGlzdGVkIGRhdGEgdHlwZS5cbiAgICAgICAgICAgIC8vaWYgaW4gQUJJIG1vZGUsIGFiaWZ5IGl0IGJlZm9yZSB1c2UuXG4gICAgICAgICAgICBsZXQgZGF0YVR5cGUgPSBkZWNvZGluZ01vZGUgPT09IFwiZnVsbFwiXG4gICAgICAgICAgICAgICAgPyBhcmd1bWVudEFsbG9jYXRpb24udHlwZVxuICAgICAgICAgICAgICAgIDogYWJpZnlfMS5hYmlmeVR5cGUoYXJndW1lbnRBbGxvY2F0aW9uLnR5cGUsIGluZm8udXNlckRlZmluZWRUeXBlcyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0geWllbGQqIGRlY29kZV8xLmRlZmF1bHQoZGF0YVR5cGUsIGFyZ3VtZW50QWxsb2NhdGlvbi5wb2ludGVyLCBpbmZvLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmljdEFiaU1vZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93UmV0cnk6IGRlY29kaW5nTW9kZSA9PT0gXCJmdWxsXCIgLy90aGlzIG9wdGlvbiBpcyB1bm5lY2Vzc2FyeSBidXQgaW5jbHVkaW5nIGZvciBjbGFyaXR5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcnNfMS5TdG9wRGVjb2RpbmdFcnJvciAmJlxuICAgICAgICAgICAgICAgICAgICBlcnJvci5hbGxvd1JldHJ5ICYmXG4gICAgICAgICAgICAgICAgICAgIGRlY29kaW5nTW9kZSA9PT0gXCJmdWxsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBhIHJldHJ5IGhhcHBlbnMsIHdlJ3ZlIGdvdCB0byBkbyBzZXZlcmFsIHRoaW5ncyBpbiBvcmRlciB0byBzd2l0Y2ggdG8gQUJJIG1vZGU6XG4gICAgICAgICAgICAgICAgICAgIC8vMS4gbWFyayB0aGF0IHdlJ3JlIHN3aXRjaGluZyB0byBBQkkgbW9kZTtcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RpbmdNb2RlID0gXCJhYmlcIjtcbiAgICAgICAgICAgICAgICAgICAgLy8yLiBhYmlmeSBhbGwgcHJldmlvdXNseSBkZWNvZGVkIHZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlZEFyZ3VtZW50cyA9IGRlY29kZWRBcmd1bWVudHMubWFwKGFyZ3VtZW50RGVjb2RpbmcgPT4gKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYXJndW1lbnREZWNvZGluZyksIHsgdmFsdWU6IGFiaWZ5XzEuYWJpZnlSZXN1bHQoYXJndW1lbnREZWNvZGluZy52YWx1ZSwgaW5mby51c2VyRGVmaW5lZFR5cGVzKSB9KSkpO1xuICAgICAgICAgICAgICAgICAgICAvLzMuIHJldHJ5IHRoaXMgcGFydGljdWxhciBkZWNvZGUgaW4gQUJJIG1vZGUuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHlpZWxkKiBkZWNvZGVfMS5kZWZhdWx0KGFiaWZ5XzEuYWJpZnlUeXBlKGFyZ3VtZW50QWxsb2NhdGlvbi50eXBlLCBpbmZvLnVzZXJEZWZpbmVkVHlwZXMpLCAvL3R5cGUgaXMgbm93IGFiaWZpZWQhXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudEFsbG9jYXRpb24ucG9pbnRlciwgaW5mbywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmljdEFiaU1vZGU6IHRydWUgLy90dXJucyBvbiBTVFJJQ1QgTU9ERSB0byBjYXVzZSBtb3JlIGVycm9ycyB0byBiZSB0aHJvd25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3JldHJpZXMgbm8gbG9uZ2VyIGFsbG93ZWQsIG5vdCB0aGF0IHRoaXMgaGFzIGFuIGVmZmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgYW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHJldHJ5LCB0aGlzIGlzbid0IGEgdmFsaWQgZGVjb2RpbmchXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInJlamVjdGVkIGR1ZSB0byBleGNlcHRpb24gb24gcmV0cnlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBhbGxvY2F0aW9uQXR0ZW1wdHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy80LiB0aGUgcmVtYWluaW5nIHBhcmFtZXRlcnMgd2lsbCB0aGVuIGF1dG9tYXRpY2FsbHkgYmUgZGVjb2RlZCBpbiBBQkkgbW9kZSBkdWUgdG8gKDEpLFxuICAgICAgICAgICAgICAgICAgICAvL3NvIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgc3BlY2lhbCB0aGVyZS5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgYW55IG90aGVyIHNvcnQgb2YgZXJyb3Igb2NjdXJyZWQsIHRoaXMgaXNuJ3QgYSB2YWxpZCBkZWNvZGluZyFcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJyZWplY3RlZCBkdWUgdG8gZXhjZXB0aW9uIG9uIGZpcnN0IHRyeTogJU9cIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBhbGxvY2F0aW9uQXR0ZW1wdHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGFyZ3VtZW50QWxsb2NhdGlvbi5uYW1lO1xuICAgICAgICAgICAgY29uc3QgaW5kZXhlZCA9IGFyZ3VtZW50QWxsb2NhdGlvbi5wb2ludGVyLmxvY2F0aW9uID09PSBcImV2ZW50dG9waWNcIjtcbiAgICAgICAgICAgIGRlY29kZWRBcmd1bWVudHMucHVzaChuYW1lIC8vZGVsaWJlcmF0ZSBnZW5lcmFsIGZhbHNpbmVzcyB0ZXN0XG4gICAgICAgICAgICAgICAgPyB7IG5hbWUsIGluZGV4ZWQsIHZhbHVlIH1cbiAgICAgICAgICAgICAgICA6IHsgaW5kZXhlZCwgdmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy9PSywgc28sIGhhdmluZyBkZWNvZGVkIHRoZSByZXN1bHQsIHRoZSBxdWVzdGlvbiBpczogZG9lcyBpdCByZWVuY29kZSB0byB0aGUgb3JpZ2luYWw/XG4gICAgICAgIC8vZmlyc3QsIHdlIGhhdmUgdG8gZmlsdGVyIG91dCB0aGUgaW5kZXhlZCBhcmd1bWVudHMsIGFuZCBhbHNvIGdldCByaWQgb2YgdGhlIG5hbWUgaW5mb3JtYXRpb25cbiAgICAgICAgY29uc3Qgbm9uSW5kZXhlZFZhbHVlcyA9IGRlY29kZWRBcmd1bWVudHNcbiAgICAgICAgICAgIC5maWx0ZXIoYXJndW1lbnQgPT4gIWFyZ3VtZW50LmluZGV4ZWQpXG4gICAgICAgICAgICAubWFwKGFyZ3VtZW50ID0+IGFyZ3VtZW50LnZhbHVlKTtcbiAgICAgICAgLy9ub3csIHdlIGNhbiBlbmNvZGUhXG4gICAgICAgIGNvbnN0IHJlRW5jb2RlZERhdGEgPSBBYmlEYXRhLkVuY29kZS5lbmNvZGVUdXBsZUFiaShub25JbmRleGVkVmFsdWVzLCBpbmZvLmFsbG9jYXRpb25zLmFiaSk7XG4gICAgICAgIGNvbnN0IGVuY29kZWREYXRhID0gaW5mby5zdGF0ZS5ldmVudGRhdGE7IC8vYWdhaW4sIG5vdCBncmVhdCB0byByZWFkIHRoaXMgZGlyZWN0bHksIGJ1dCBvaCB3ZWxsXG4gICAgICAgIC8vYXJlIHRoZXkgZXF1YWw/XG4gICAgICAgIGlmICghRXZtLlV0aWxzLmVxdWFsRGF0YShyZUVuY29kZWREYXRhLCBlbmNvZGVkRGF0YSkpIHtcbiAgICAgICAgICAgIC8vaWYgbm90LCB0aGlzIGFsbG9jYXRpb24gZG9lc24ndCB3b3JrXG4gICAgICAgICAgICBkZWJ1ZyhcInJlamVjdGVkIGR1ZSB0byBbbm9uLWluZGV4ZWRdIG1pc21hdGNoXCIpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy9vbmUgbGFzdCBjaGVjayAtLSBsZXQncyBjaGVjayB0aGF0IHRoZSBpbmRleGVkIGFyZ3VtZW50cyBtYXRjaCB1cCwgdG9vXG4gICAgICAgIGNvbnN0IGluZGV4ZWRWYWx1ZXMgPSBkZWNvZGVkQXJndW1lbnRzXG4gICAgICAgICAgICAuZmlsdGVyKGFyZ3VtZW50ID0+IGFyZ3VtZW50LmluZGV4ZWQpXG4gICAgICAgICAgICAubWFwKGFyZ3VtZW50ID0+IGFyZ3VtZW50LnZhbHVlKTtcbiAgICAgICAgY29uc3QgcmVFbmNvZGVkVG9waWNzID0gaW5kZXhlZFZhbHVlcy5tYXAoVG9waWMuRW5jb2RlLmVuY29kZVRvcGljKTtcbiAgICAgICAgY29uc3QgZW5jb2RlZFRvcGljcyA9IGluZm8uc3RhdGUuZXZlbnR0b3BpY3M7XG4gICAgICAgIC8vbm93OiBkbyAqdGhlc2UqIG1hdGNoP1xuICAgICAgICBjb25zdCBzZWxlY3RvckFkanVzdG1lbnQgPSBhbGxvY2F0aW9uLmFub255bW91cyA/IDAgOiAxO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlRW5jb2RlZFRvcGljcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFFdm0uVXRpbHMuZXF1YWxEYXRhKHJlRW5jb2RlZFRvcGljc1tpXSwgZW5jb2RlZFRvcGljc1tpICsgc2VsZWN0b3JBZGp1c3RtZW50XSkpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcInJlamVjdGVkIGR1ZSB0byBpbmRleGVkIG1pc21hdGNoXCIpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlIGFsbG9jYXRpb25BdHRlbXB0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL2lmIHdlJ3ZlIG1hZGUgaXQgaGVyZSwgdGhlIGFsbG9jYXRpb24gd29ya3MhICBob29yYXkhXG4gICAgICAgIGRlYnVnKFwiYWxsb2NhdGlvbiBhY2NlcHRlZCFcIik7XG4gICAgICAgIGxldCBkZWNvZGluZztcbiAgICAgICAgaWYgKGFsbG9jYXRpb24uYWJpLmFub255bW91cykge1xuICAgICAgICAgICAgZGVjb2RpbmcgPSB7XG4gICAgICAgICAgICAgICAga2luZDogXCJhbm9ueW1vdXNcIixcbiAgICAgICAgICAgICAgICBkZWZpbmVkSW46IGNvbnRyYWN0VHlwZSxcbiAgICAgICAgICAgICAgICBjbGFzczogZW1pdHRpbmdDb250cmFjdFR5cGUsXG4gICAgICAgICAgICAgICAgYWJpOiBhbGxvY2F0aW9uLmFiaSxcbiAgICAgICAgICAgICAgICBhcmd1bWVudHM6IGRlY29kZWRBcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgZGVjb2RpbmdNb2RlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVjb2RpbmcgPSB7XG4gICAgICAgICAgICAgICAga2luZDogXCJldmVudFwiLFxuICAgICAgICAgICAgICAgIGRlZmluZWRJbjogY29udHJhY3RUeXBlLFxuICAgICAgICAgICAgICAgIGNsYXNzOiBlbWl0dGluZ0NvbnRyYWN0VHlwZSxcbiAgICAgICAgICAgICAgICBhYmk6IGFsbG9jYXRpb24uYWJpLFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogZGVjb2RlZEFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcixcbiAgICAgICAgICAgICAgICBkZWNvZGluZ01vZGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZGVjb2RpbmdzLnB1c2goZGVjb2RpbmcpO1xuICAgICAgICAvL2lmIHdlJ3ZlIG1hZGUgdGhpcyBmYXIgKHNvIHRoaXMgYWxsb2NhdGlvbiB3b3JrcyksIGFuZCB3ZSB3ZXJlIHBhc3NlZCBhblxuICAgICAgICAvL0lELCBhbmQgaXQgbWF0Y2hlcyB0aGlzIElELCBiYWlsIG91dCAmIHJldHVybiB0aGlzIGFzIHRoZSAqb25seSogZGVjb2RpbmdcbiAgICAgICAgaWYgKG9wdGlvbnMuaWQgJiYgYWxsb2NhdGlvbi5pZCA9PT0gb3B0aW9ucy5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIFtkZWNvZGluZ107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlY29kaW5ncztcbn1cbmV4cG9ydHMuZGVjb2RlRXZlbnQgPSBkZWNvZGVFdmVudDtcbmNvbnN0IGVycm9yU2VsZWN0b3IgPSBDb252ZXJzaW9uLnRvQnl0ZXMoV2ViM1V0aWxzLnNvbGlkaXR5U2hhMyh7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICB2YWx1ZTogXCJFcnJvcihzdHJpbmcpXCJcbn0pKS5zdWJhcnJheSgwLCBFdm0uVXRpbHMuU0VMRUNUT1JfU0laRSk7XG5jb25zdCBwYW5pY1NlbGVjdG9yID0gQ29udmVyc2lvbi50b0J5dGVzKFdlYjNVdGlscy5zb2xpZGl0eVNoYTMoe1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgdmFsdWU6IFwiUGFuaWModWludDI1NilcIlxufSkpLnN1YmFycmF5KDAsIEV2bS5VdGlscy5TRUxFQ1RPUl9TSVpFKTtcbmNvbnN0IGRlZmF1bHRSZXZlcnRBbGxvY2F0aW9ucyA9IFtcbiAgICB7XG4gICAgICAgIGtpbmQ6IFwicmV2ZXJ0XCIsXG4gICAgICAgIGFsbG9jYXRpb25Nb2RlOiBcImZ1bGxcIixcbiAgICAgICAgc2VsZWN0b3I6IGVycm9yU2VsZWN0b3IsXG4gICAgICAgIGFiaToge1xuICAgICAgICAgICAgbmFtZTogXCJFcnJvclwiLFxuICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmluZWRJbjogbnVsbCxcbiAgICAgICAgYXJndW1lbnRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICBwb2ludGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBcInJldHVybmRhdGFcIixcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGVycm9yU2VsZWN0b3IubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IEV2bS5VdGlscy5XT1JEX1NJWkVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZUNsYXNzOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlSGludDogXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBraW5kOiBcInJldmVydFwiLFxuICAgICAgICBhbGxvY2F0aW9uTW9kZTogXCJmdWxsXCIsXG4gICAgICAgIHNlbGVjdG9yOiBwYW5pY1NlbGVjdG9yLFxuICAgICAgICBhYmk6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiUGFuaWNcIixcbiAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmluZWRJbjogbnVsbCxcbiAgICAgICAgYXJndW1lbnRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICBwb2ludGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBcInJldHVybmRhdGFcIixcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBhbmljU2VsZWN0b3IubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IEV2bS5VdGlscy5XT1JEX1NJWkVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZUNsYXNzOiBcInVpbnRcIixcbiAgICAgICAgICAgICAgICAgICAgYml0czogRXZtLlV0aWxzLldPUkRfU0laRSAqIDgsXG4gICAgICAgICAgICAgICAgICAgIHR5cGVIaW50OiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH1cbl07XG5jb25zdCBkZWZhdWx0RW1wdHlBbGxvY2F0aW9ucyA9IFtcbiAgICB7XG4gICAgICAgIGtpbmQ6IFwiZmFpbHVyZVwiLFxuICAgICAgICBhbGxvY2F0aW9uTW9kZTogXCJmdWxsXCIsXG4gICAgICAgIHNlbGVjdG9yOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBhcmd1bWVudHM6IFtdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGtpbmQ6IFwic2VsZmRlc3RydWN0XCIsXG4gICAgICAgIGFsbG9jYXRpb25Nb2RlOiBcImZ1bGxcIixcbiAgICAgICAgc2VsZWN0b3I6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIGFyZ3VtZW50czogW11cbiAgICB9XG5dO1xuLyoqXG4gKiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgcG9zc2liaWxpdGllcywgdGhleSdyZSBhbHdheXMgcmV0dXJuZWQgaW5cbiAqIHRoZSBvcmRlcjogcmV0dXJuLCByZXZlcnQsIHJldHVybm1lc3NhZ2UsIGZhaWx1cmUsIGVtcHR5LCBieXRlY29kZSwgdW5rbm93bmJ5dGVjb2RlXG4gKiBNb3Jlb3Zlciwgd2l0aGluIFwicmV2ZXJ0XCIsIGJ1aWx0aW4gb25lcyBhcmUgcHV0IGFib3ZlIGN1c3RvbSBvbmVzXG4gKiBAQ2F0ZWdvcnkgRGVjb2RpbmdcbiAqL1xuZnVuY3Rpb24qIGRlY29kZVJldHVybmRhdGEoaW5mbywgc3VjY2Vzc0FsbG9jYXRpb24sIC8vbnVsbCBoZXJlIG11c3QgYmUgZXhwbGljaXRcbnN0YXR1cywgLy95b3UgY2FuIHBhc3MgdGhpcyB0byBpbmRpY2F0ZSB0aGF0IHlvdSBrbm93IHRoZSBzdGF0dXMsXG5pZCAvL3VzZWZ1bCB3aGVuIHN0YXR1cyA9IGZhbHNlXG4pIHtcbiAgICBsZXQgcG9zc2libGVBbGxvY2F0aW9ucztcbiAgICBjb25zdCBzZWxlY3RvciA9IENvbnZlcnNpb24udG9IZXhTdHJpbmcoaW5mby5zdGF0ZS5yZXR1cm5kYXRhLnNsaWNlKDAsIDQpKTtcbiAgICBjb25zdCBjb250ZXh0SGFzaCA9IChpbmZvLmN1cnJlbnRDb250ZXh0IHx8IHsgY29udGV4dDogXCJcIiB9KS5jb250ZXh0OyAvL0hBQ0s6IFwiXCIgaXMgdXNlZCB0byByZXByZXNlbnQgbm8gY29udGV4dFxuICAgIGNvbnN0IGN1c3RvbVJldmVydEFsbG9jYXRpb25zID0gKCgoaW5mby5hbGxvY2F0aW9ucy5yZXR1cm5kYXRhIHx8IHsgW2NvbnRleHRIYXNoXToge30gfSlbY29udGV4dEhhc2hdKSB8fCB7IFtzZWxlY3Rvcl06IFtdIH0pW3NlbGVjdG9yXSB8fCBbXTtcbiAgICBpZiAoc3VjY2Vzc0FsbG9jYXRpb24gPT09IG51bGwpIHtcbiAgICAgICAgcG9zc2libGVBbGxvY2F0aW9ucyA9IFtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRSZXZlcnRBbGxvY2F0aW9ucyxcbiAgICAgICAgICAgIC4uLmN1c3RvbVJldmVydEFsbG9jYXRpb25zLFxuICAgICAgICAgICAgLi4uZGVmYXVsdEVtcHR5QWxsb2NhdGlvbnNcbiAgICAgICAgXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN3aXRjaCAoc3VjY2Vzc0FsbG9jYXRpb24ua2luZCkge1xuICAgICAgICAgICAgY2FzZSBcInJldHVyblwiOlxuICAgICAgICAgICAgICAgIHBvc3NpYmxlQWxsb2NhdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NBbGxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICAuLi5kZWZhdWx0UmV2ZXJ0QWxsb2NhdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLmN1c3RvbVJldmVydEFsbG9jYXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAuLi5kZWZhdWx0RW1wdHlBbGxvY2F0aW9uc1xuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYnl0ZWNvZGVcIjpcbiAgICAgICAgICAgICAgICBwb3NzaWJsZUFsbG9jYXRpb25zID0gW1xuICAgICAgICAgICAgICAgICAgICAuLi5kZWZhdWx0UmV2ZXJ0QWxsb2NhdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLmN1c3RvbVJldmVydEFsbG9jYXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAuLi5kZWZhdWx0RW1wdHlBbGxvY2F0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0FsbG9jYXRpb25cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJldHVybm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICBwb3NzaWJsZUFsbG9jYXRpb25zID0gW1xuICAgICAgICAgICAgICAgICAgICAuLi5kZWZhdWx0UmV2ZXJ0QWxsb2NhdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLmN1c3RvbVJldmVydEFsbG9jYXRpb25zLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQWxsb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgLi4uZGVmYXVsdEVtcHR5QWxsb2NhdGlvbnNcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy9PdGhlciBjYXNlcyBzaG91bGRuJ3QgaGFwcGVuIHNvIEknbSBsZWF2aW5nIHRoZW0gdG8gY2F1c2UgZXJyb3JzIVxuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBkZWNvZGluZ3MgPSBbXTtcbiAgICBhbGxvY2F0aW9uQXR0ZW1wdHM6IGZvciAoY29uc3QgYWxsb2NhdGlvbiBvZiBwb3NzaWJsZUFsbG9jYXRpb25zKSB7XG4gICAgICAgIGRlYnVnKFwidHJ5aW5nIGFsbG9jYXRpb246ICVPXCIsIGFsbG9jYXRpb24pO1xuICAgICAgICAvL2JlZm9yZSB3ZSBhdHRlbXB0IHRvIHVzZSB0aGlzIGFsbG9jYXRpb24sIHdlIGNoZWNrOiBkb2VzIHRoZSBzZWxlY3RvciBtYXRjaD9cbiAgICAgICAgbGV0IGVuY29kZWREYXRhID0gaW5mby5zdGF0ZS5yZXR1cm5kYXRhOyAvL2FnYWluLCBub3QgZ3JlYXQgdG8gcmVhZCB0aGlzIGRpcmVjdGx5LCBidXQgb2ggd2VsbFxuICAgICAgICBjb25zdCBlbmNvZGVkUHJlZml4ID0gZW5jb2RlZERhdGEuc3ViYXJyYXkoMCwgYWxsb2NhdGlvbi5zZWxlY3Rvci5sZW5ndGgpO1xuICAgICAgICBpZiAoIUV2bS5VdGlscy5lcXVhbERhdGEoZW5jb2RlZFByZWZpeCwgYWxsb2NhdGlvbi5zZWxlY3RvcikpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVuY29kZWREYXRhID0gZW5jb2RlZERhdGEuc3ViYXJyYXkoYWxsb2NhdGlvbi5zZWxlY3Rvci5sZW5ndGgpOyAvL3NsaWNlIG9mZiB0aGUgc2VsZWN0b3IgZm9yIGxhdGVyXG4gICAgICAgIC8vYWxzbyB3ZSBjaGVjaywgZG9lcyB0aGUgc3RhdHVzIG1hdGNoP1xuICAgICAgICBpZiAoc3RhdHVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NLaW5kcyA9IFtcbiAgICAgICAgICAgICAgICBcInJldHVyblwiLFxuICAgICAgICAgICAgICAgIFwic2VsZmRlc3RydWN0XCIsXG4gICAgICAgICAgICAgICAgXCJieXRlY29kZVwiLFxuICAgICAgICAgICAgICAgIFwicmV0dXJubWVzc2FnZVwiXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgY29uc3QgZmFpbEtpbmRzID0gW1wiZmFpbHVyZVwiLCBcInJldmVydFwiXTtcbiAgICAgICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN1Y2Nlc3NLaW5kcy5pbmNsdWRlcyhhbGxvY2F0aW9uLmtpbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghZmFpbEtpbmRzLmluY2x1ZGVzKGFsbG9jYXRpb24ua2luZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhbGxvY2F0aW9uLmtpbmQgPT09IFwiYnl0ZWNvZGVcIikge1xuICAgICAgICAgICAgLy9ieXRlY29kZSBpcyBzcGVjaWFsIGFuZCBjYW4ndCByZWFsbHkgYmUgaW50ZWdyYXRlZCB3aXRoIHRoZSBvdGhlciBjYXNlcy5cbiAgICAgICAgICAgIC8vc28gaXQgZ2V0cyBpdHMgb3duIGZ1bmN0aW9uLlxuICAgICAgICAgICAgY29uc3QgZGVjb2RpbmcgPSB5aWVsZCogZGVjb2RlQnl0ZWNvZGUoaW5mbyk7XG4gICAgICAgICAgICBpZiAoZGVjb2RpbmcpIHtcbiAgICAgICAgICAgICAgICBkZWNvZGluZ3MucHVzaChkZWNvZGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsb2NhdGlvbi5raW5kID09PSBcInJldHVybm1lc3NhZ2VcIikge1xuICAgICAgICAgICAgLy90aGlzIGtpbmQgaXMgYWxzbyBzcGVjaWFsLCB0aG91Z2ggdGhhbmtmdWxseSBpdCdzIGVhc2llclxuICAgICAgICAgICAgY29uc3QgZGVjb2RpbmcgPSB7XG4gICAgICAgICAgICAgICAga2luZDogXCJyZXR1cm5tZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IENvbnZlcnNpb24udG9IZXhTdHJpbmcoaW5mby5zdGF0ZS5yZXR1cm5kYXRhKSxcbiAgICAgICAgICAgICAgICBkZWNvZGluZ01vZGU6IGFsbG9jYXRpb24uYWxsb2NhdGlvbk1vZGVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWNvZGluZ3MucHVzaChkZWNvZGluZyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGVjb2RpbmdNb2RlID0gYWxsb2NhdGlvbi5hbGxvY2F0aW9uTW9kZTsgLy9zdGFydHMgb3V0IGhlcmU7IGRlZ3JhZGVzIHRvIGFiaSBpZiBuZWNlc3NhcnlcbiAgICAgICAgLy95b3UgY2FuJ3QgbWFwIHdpdGggYSBnZW5lcmF0b3IsIHNvIHdlIGhhdmUgdG8gZG8gdGhpcyBtYXAgbWFudWFsbHlcbiAgICAgICAgbGV0IGRlY29kZWRBcmd1bWVudHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBhcmd1bWVudEFsbG9jYXRpb24gb2YgYWxsb2NhdGlvbi5hcmd1bWVudHMpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgICAgIC8vaWYgaW4gZnVsbCBtb2RlLCB1c2UgdGhlIGFsbG9jYXRpb24ncyBsaXN0ZWQgZGF0YSB0eXBlLlxuICAgICAgICAgICAgLy9pZiBpbiBBQkkgbW9kZSwgYWJpZnkgaXQgYmVmb3JlIHVzZS5cbiAgICAgICAgICAgIGxldCBkYXRhVHlwZSA9IGRlY29kaW5nTW9kZSA9PT0gXCJmdWxsXCJcbiAgICAgICAgICAgICAgICA/IGFyZ3VtZW50QWxsb2NhdGlvbi50eXBlXG4gICAgICAgICAgICAgICAgOiBhYmlmeV8xLmFiaWZ5VHlwZShhcmd1bWVudEFsbG9jYXRpb24udHlwZSwgaW5mby51c2VyRGVmaW5lZFR5cGVzKTtcbiAgICAgICAgICAgIC8vbm93LCBsZXQncyBkZWNvZGUhXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0geWllbGQqIGRlY29kZV8xLmRlZmF1bHQoZGF0YVR5cGUsIGFyZ3VtZW50QWxsb2NhdGlvbi5wb2ludGVyLCBpbmZvLCB7XG4gICAgICAgICAgICAgICAgICAgIGFiaVBvaW50ZXJCYXNlOiBhbGxvY2F0aW9uLnNlbGVjdG9yLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgc3RyaWN0QWJpTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dSZXRyeTogZGVjb2RpbmdNb2RlID09PSBcImZ1bGxcIiAvL3RoaXMgb3B0aW9uIGlzIHVubmVjZXNzYXJ5IGJ1dCBpbmNsdWRpbmcgZm9yIGNsYXJpdHlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcInZhbHVlIG9uIGZpcnN0IHRyeTogJU9cIiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgZXJyb3JzXzEuU3RvcERlY29kaW5nRXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuYWxsb3dSZXRyeSAmJlxuICAgICAgICAgICAgICAgICAgICBkZWNvZGluZ01vZGUgPT09IFwiZnVsbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKFwicmV0cnkhXCIpO1xuICAgICAgICAgICAgICAgICAgICAvL2lmIGEgcmV0cnkgaGFwcGVucywgd2UndmUgZ290IHRvIGRvIHNldmVyYWwgdGhpbmdzIGluIG9yZGVyIHRvIHN3aXRjaCB0byBBQkkgbW9kZTpcbiAgICAgICAgICAgICAgICAgICAgLy8xLiBtYXJrIHRoYXQgd2UncmUgc3dpdGNoaW5nIHRvIEFCSSBtb2RlO1xuICAgICAgICAgICAgICAgICAgICBkZWNvZGluZ01vZGUgPSBcImFiaVwiO1xuICAgICAgICAgICAgICAgICAgICAvLzIuIGFiaWZ5IGFsbCBwcmV2aW91c2x5IGRlY29kZWQgdmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICBkZWNvZGVkQXJndW1lbnRzID0gZGVjb2RlZEFyZ3VtZW50cy5tYXAoYXJndW1lbnREZWNvZGluZyA9PiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhcmd1bWVudERlY29kaW5nKSwgeyB2YWx1ZTogYWJpZnlfMS5hYmlmeVJlc3VsdChhcmd1bWVudERlY29kaW5nLnZhbHVlLCBpbmZvLnVzZXJEZWZpbmVkVHlwZXMpIH0pKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vMy4gcmV0cnkgdGhpcyBwYXJ0aWN1bGFyIGRlY29kZSBpbiBBQkkgbW9kZS5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0geWllbGQqIGRlY29kZV8xLmRlZmF1bHQoYWJpZnlfMS5hYmlmeVR5cGUoYXJndW1lbnRBbGxvY2F0aW9uLnR5cGUsIGluZm8udXNlckRlZmluZWRUeXBlcyksIC8vdHlwZSBpcyBub3cgYWJpZmllZCFcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50QWxsb2NhdGlvbi5wb2ludGVyLCBpbmZvLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJpUG9pbnRlckJhc2U6IGFsbG9jYXRpb24uc2VsZWN0b3IubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmljdEFiaU1vZGU6IHRydWUgLy90dXJucyBvbiBTVFJJQ1QgTU9ERSB0byBjYXVzZSBtb3JlIGVycm9ycyB0byBiZSB0aHJvd25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3JldHJpZXMgbm8gbG9uZ2VyIGFsbG93ZWQsIG5vdCB0aGF0IHRoaXMgaGFzIGFuIGVmZmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInZhbHVlIG9uIHJldHJ5OiAlT1wiLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgYW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHJldHJ5LCB0aGlzIGlzbid0IGEgdmFsaWQgZGVjb2RpbmchXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInJlamVjdGVkIGR1ZSB0byBleGNlcHRpb24gb24gcmV0cnlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBhbGxvY2F0aW9uQXR0ZW1wdHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy80LiB0aGUgcmVtYWluaW5nIHBhcmFtZXRlcnMgd2lsbCB0aGVuIGF1dG9tYXRpY2FsbHkgYmUgZGVjb2RlZCBpbiBBQkkgbW9kZSBkdWUgdG8gKDEpLFxuICAgICAgICAgICAgICAgICAgICAvL3NvIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgc3BlY2lhbCB0aGVyZS5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgYW55IG90aGVyIHNvcnQgb2YgZXJyb3Igb2NjdXJyZWQsIHRoaXMgaXNuJ3QgYSB2YWxpZCBkZWNvZGluZyFcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJyZWplY3RlZCBkdWUgdG8gZXhjZXB0aW9uIG9uIGZpcnN0IHRyeTogJU9cIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBhbGxvY2F0aW9uQXR0ZW1wdHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGFyZ3VtZW50QWxsb2NhdGlvbi5uYW1lO1xuICAgICAgICAgICAgZGVjb2RlZEFyZ3VtZW50cy5wdXNoKG5hbWUgLy9kZWxpYmVyYXRlIGdlbmVyYWwgZmFsc2luZXNzIHRlc3RcbiAgICAgICAgICAgICAgICA/IHsgbmFtZSwgdmFsdWUgfVxuICAgICAgICAgICAgICAgIDogeyB2YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL09LLCBzbywgaGF2aW5nIGRlY29kZWQgdGhlIHJlc3VsdCwgdGhlIHF1ZXN0aW9uIGlzOiBkb2VzIGl0IHJlZW5jb2RlIHRvIHRoZSBvcmlnaW5hbD9cbiAgICAgICAgLy9maXJzdCwgd2UgaGF2ZSB0byBmaWx0ZXIgb3V0IHRoZSBpbmRleGVkIGFyZ3VtZW50cywgYW5kIGFsc28gZ2V0IHJpZCBvZiB0aGUgbmFtZSBpbmZvcm1hdGlvblxuICAgICAgICBkZWJ1ZyhcImRlY29kZWRBcmd1bWVudHM6ICVPXCIsIGRlY29kZWRBcmd1bWVudHMpO1xuICAgICAgICBjb25zdCBkZWNvZGVkQXJndW1lbnRWYWx1ZXMgPSBkZWNvZGVkQXJndW1lbnRzLm1hcChhcmd1bWVudCA9PiBhcmd1bWVudC52YWx1ZSk7XG4gICAgICAgIGNvbnN0IHJlRW5jb2RlZERhdGEgPSBBYmlEYXRhLkVuY29kZS5lbmNvZGVUdXBsZUFiaShkZWNvZGVkQXJndW1lbnRWYWx1ZXMsIGluZm8uYWxsb2NhdGlvbnMuYWJpKTtcbiAgICAgICAgLy9hcmUgdGhleSBlcXVhbD8gbm90ZSB0aGUgc2VsZWN0b3IgaGFzIGJlZW4gc3RyaXBwZWQgb2ZmIGVuY29kZWREYXRhIVxuICAgICAgICBpZiAoIUV2bS5VdGlscy5lcXVhbERhdGEocmVFbmNvZGVkRGF0YSwgZW5jb2RlZERhdGEpKSB7XG4gICAgICAgICAgICAvL2lmIG5vdCwgdGhpcyBhbGxvY2F0aW9uIGRvZXNuJ3Qgd29ya1xuICAgICAgICAgICAgZGVidWcoXCJyZWplY3RlZCBkdWUgdG8gbWlzbWF0Y2hcIik7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvL2lmIHdlJ3ZlIG1hZGUgaXQgaGVyZSwgdGhlIGFsbG9jYXRpb24gd29ya3MhICBob29yYXkhXG4gICAgICAgIGRlYnVnKFwiYWxsb2NhdGlvbiBhY2NlcHRlZCFcIik7XG4gICAgICAgIGxldCBkZWNvZGluZztcbiAgICAgICAgc3dpdGNoIChhbGxvY2F0aW9uLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJyZXR1cm5cIjpcbiAgICAgICAgICAgICAgICBkZWNvZGluZyA9IHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogXCJyZXR1cm5cIixcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHM6IGRlY29kZWRBcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgIGRlY29kaW5nTW9kZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicmV2ZXJ0XCI6XG4gICAgICAgICAgICAgICAgZGVjb2RpbmcgPSB7XG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6IFwicmV2ZXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgIGFiaTogYWxsb2NhdGlvbi5hYmksXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZWRJbjogYWxsb2NhdGlvbi5kZWZpbmVkSW4sXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogZGVjb2RlZEFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RpbmdNb2RlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzZWxmZGVzdHJ1Y3RcIjpcbiAgICAgICAgICAgICAgICBkZWNvZGluZyA9IHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogXCJzZWxmZGVzdHJ1Y3RcIixcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkZWNvZGluZ01vZGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImZhaWx1cmVcIjpcbiAgICAgICAgICAgICAgICBkZWNvZGluZyA9IHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogXCJmYWlsdXJlXCIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRlY29kaW5nTW9kZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVjb2RpbmdzLnB1c2goZGVjb2RpbmcpO1xuICAgICAgICAvL2lmIHdlJ3ZlIG1hZGUgdGhpcyBmYXIgKHNvIHRoaXMgYWxsb2NhdGlvbiB3b3JrcyksIGFuZCB3ZSB3ZXJlIHBhc3NlZCBhblxuICAgICAgICAvL0lELCBhbmQgaXQgbWF0Y2hlcyB0aGlzIElELCBiYWlsIG91dCAmIHJldHVybiB0aGlzIGFzIHRoZSAqb25seSogZGVjb2RpbmdcbiAgICAgICAgaWYgKGlkICYmIGFsbG9jYXRpb24ua2luZCA9PT0gXCJyZXZlcnRcIiAmJiBhbGxvY2F0aW9uLmlkID09PSBpZCkge1xuICAgICAgICAgICAgcmV0dXJuIFtkZWNvZGluZ107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlY29kaW5ncztcbn1cbmV4cG9ydHMuZGVjb2RlUmV0dXJuZGF0YSA9IGRlY29kZVJldHVybmRhdGE7XG4vL25vdGU6IHJlcXVpcmVzIHRoZSBieXRlY29kZSB0byBiZSBpbiByZXR1cm5kYXRhLCBub3QgY29kZVxuZnVuY3Rpb24qIGRlY29kZUJ5dGVjb2RlKGluZm8pIHtcbiAgICBsZXQgZGVjb2RpbmdNb2RlID0gXCJmdWxsXCI7IC8vYXMgYWx3YXlzLCBkZWdyYWRlIGFzIG5lY2Vzc2FyeVxuICAgIGNvbnN0IGJ5dGVjb2RlID0gQ29udmVyc2lvbi50b0hleFN0cmluZyhpbmZvLnN0YXRlLnJldHVybmRhdGEpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBDb250ZXh0cy5VdGlscy5maW5kQ29udGV4dChpbmZvLmNvbnRleHRzLCBieXRlY29kZSk7XG4gICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiBcInVua25vd25ieXRlY29kZVwiLFxuICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICAgICAgZGVjb2RpbmdNb2RlOiBcImZ1bGxcIixcbiAgICAgICAgICAgIGJ5dGVjb2RlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGNvbnRyYWN0VHlwZSA9IENvbnRleHRzLkltcG9ydC5jb250ZXh0VG9UeXBlKGNvbnRleHQpO1xuICAgIC8vbm93OiBpZ25vcmUgb3JpZ2luYWwgYWxsb2NhdGlvbiAod2hpY2ggd2UgZGlkbid0IGV2ZW4gcGFzcyA6KSApXG4gICAgLy9hbmQgbG9va3VwIGFsbG9jYXRpb24gYnkgY29udGV4dFxuICAgIGNvbnN0IGFsbG9jYXRpb24gPSBpbmZvLmFsbG9jYXRpb25zLmNhbGxkYXRhLmNvbnN0cnVjdG9yQWxsb2NhdGlvbnNbY29udGV4dC5jb250ZXh0XS5vdXRwdXQ7XG4gICAgZGVidWcoXCJieXRlY29kZSBhbGxvY2F0aW9uOiAlT1wiLCBhbGxvY2F0aW9uKTtcbiAgICAvL25vdzogYWRkIGltbXV0YWJsZXMgaWYgYXBwbGljYWJsZVxuICAgIGxldCBpbW11dGFibGVzO1xuICAgIGlmIChhbGxvY2F0aW9uLmltbXV0YWJsZXMpIHtcbiAgICAgICAgaW1tdXRhYmxlcyA9IFtdO1xuICAgICAgICAvL05PVEU6IGlmIHdlJ3JlIGluIGhlcmUsIHdlIGNhbiBhc3N1bWUgZGVjb2RpbmdNb2RlID09PSBcImZ1bGxcIlxuICAgICAgICBmb3IgKGNvbnN0IHZhcmlhYmxlIG9mIGFsbG9jYXRpb24uaW1tdXRhYmxlcykge1xuICAgICAgICAgICAgY29uc3QgZGF0YVR5cGUgPSB2YXJpYWJsZS50eXBlOyAvL3dlIGRvbid0IGNvbmRpdGlvbmluZyBvbiBkZWNvZGluZ01vZGUgaGVyZSBiZWNhdXNlIHdlIGtub3cgaXRcbiAgICAgICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB5aWVsZCogZGVjb2RlXzEuZGVmYXVsdChkYXRhVHlwZSwgdmFyaWFibGUucG9pbnRlciwgaW5mbywge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd1JldHJ5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzdHJpY3RBYmlNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTW9kZTogXCJkZWZhdWx0T3JaZXJvXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIGVycm9yc18xLlN0b3BEZWNvZGluZ0Vycm9yICYmIGVycm9yLmFsbG93UmV0cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy93ZSBcInJldHJ5XCIgYnkuLi4gbm90IGJvdGhlcmluZyB3aXRoIGltbXV0YWJsZXMgOlBcbiAgICAgICAgICAgICAgICAgICAgLy8oYnV0IHdlIGRvIHNldCB0aGUgbW9kZSB0byBBQkkpXG4gICAgICAgICAgICAgICAgICAgIGRlY29kaW5nTW9kZSA9IFwiYWJpXCI7XG4gICAgICAgICAgICAgICAgICAgIGltbXV0YWJsZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9vdGhlcndpc2UsIHRoaXMgaXNuJ3QgYSB2YWxpZCBkZWNvZGluZyBJIGd1ZXNzXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGltbXV0YWJsZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogdmFyaWFibGUubmFtZSxcbiAgICAgICAgICAgICAgICBjbGFzczogdmFyaWFibGUuZGVmaW5lZEluLFxuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgZGVjb2RpbmcgPSB7XG4gICAgICAgIGtpbmQ6IFwiYnl0ZWNvZGVcIixcbiAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICBkZWNvZGluZ01vZGUsXG4gICAgICAgIGJ5dGVjb2RlLFxuICAgICAgICBpbW11dGFibGVzLFxuICAgICAgICBjbGFzczogY29udHJhY3RUeXBlXG4gICAgfTtcbiAgICAvL2ZpbmFsbHk6IGFkZCBhZGRyZXNzIGlmIGFwcGxpY2FibGVcbiAgICBpZiAoYWxsb2NhdGlvbi5kZWxlZ2F0ZWNhbGxHdWFyZCkge1xuICAgICAgICBkZWNvZGluZy5hZGRyZXNzID0gV2ViM1V0aWxzLnRvQ2hlY2tzdW1BZGRyZXNzKGJ5dGVjb2RlLnNsaWNlKDQsIDQgKyAyICogRXZtLlV0aWxzLkFERFJFU1NfU0laRSkgLy80ID0gXCIweDczXCIubGVuZ3RoXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGluZztcbn1cbi8qKlxuICogRGVjb2RlcyB0aGUgcmV0dXJuIGRhdGEgZnJvbSBhIGZhaWxlZCBjYWxsLlxuICpcbiAqIEBwYXJhbSByZXR1cm5kYXRhIFRoZSByZXR1cm5lZCBkYXRhLCBhcyBhIFVpbnQ4QXJyYXkuXG4gKiBAcmV0dXJuIEFuIGFycmF5IG9mIHBvc3NpYmxlIGRlY29kaW5ncy4gIEF0IHRoZSBtb21lbnQgaXQnc1xuICogICBpbXBvc3NpYmxlIGZvciB0aGVyZSB0byBiZSBtb3JlIHRoYW4gb25lLiAgKElmIHRoZSBjYWxsIGRpZG4ndCBhY3R1YWxseVxuICogICBmYWlsLCBvciBmYWlsZWQgaW4gYSBub25zdGFuZGFyZCB3YXksIHlvdSBtYXkgZ2V0IG5vIGRlY29kaW5ncyBhdCBhbGwsIHRob3VnaCEpXG4gKlxuICogICBEZWNvZGluZ3MgY2FuIGVpdGhlciBiZSBkZWNvZGluZ3Mgb2YgcmV2ZXJ0IG1lc3NhZ2VzLCBvciBkZWNvZGluZ3NcbiAqICAgaW5kaWNhdGluZyB0aGF0IHRoZXJlIHdhcyBubyByZXZlcnQgbWVzc2FnZS4gIElmIHNvbWVob3cgYm90aCB3ZXJlIHRvIGJlXG4gKiAgIHBvc3NpYmxlLCB0aGV5J2QgZ28gaW4gdGhhdCBvcmRlciwgYWx0aG91Z2ggYXMgbWVudGlvbmVkLCB0aGVyZSAoYXQgbGVhc3RcbiAqICAgY3VycmVudGx5KSBpc24ndCBhbnkgd2F5IGZvciB0aGF0IHRvIG9jY3VyLlxuICogQENhdGVnb3J5IERlY29kaW5nIGNvbnZlbmllbmNlXG4gKi9cbmZ1bmN0aW9uIGRlY29kZVJldmVydChyZXR1cm5kYXRhKSB7XG4gICAgLy9jb2VyY2luZyBiZWNhdXNlIFRTIGRvZXNuJ3Qga25vdyBpdCdsbCBmaW5pc2ggaW4gb25lIGdvXG4gICAgcmV0dXJuIGRlY29kZVJldHVybmRhdGEoe1xuICAgICAgICBhbGxvY2F0aW9uczoge30sXG4gICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICBzdG9yYWdlOiB7fSxcbiAgICAgICAgICAgIHJldHVybmRhdGFcbiAgICAgICAgfVxuICAgIH0sIG51bGwsIGZhbHNlKS5uZXh0KCkudmFsdWU7XG59XG5leHBvcnRzLmRlY29kZVJldmVydCA9IGRlY29kZVJldmVydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvcmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEZvciBhbGxvY2F0aW9uLCBlbmNvZGluZywgYW5kIGRlY29kaW5nIG9mIGxvY2F0aW9ucyByZWxhdGVkIHRvIHRoZSBBQklcbiAqIChjYWxsZGF0YSBpbiBTb2xpZGl0eSwgZXZlbnRzLCBldGMuKVxuICpcbiAqIEBjYXRlZ29yeSBBQkkgZGF0YSBsb2NhdGlvblxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlV0aWxzID0gZXhwb3J0cy5JbXBvcnQgPSBleHBvcnRzLkRlY29kZSA9IGV4cG9ydHMuRW5jb2RlID0gZXhwb3J0cy5BbGxvY2F0ZSA9IHZvaWQgMDtcbmNvbnN0IEFsbG9jYXRlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2FsbG9jYXRlXCIpKTtcbmV4cG9ydHMuQWxsb2NhdGUgPSBBbGxvY2F0ZTtcbmNvbnN0IEVuY29kZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9lbmNvZGVcIikpO1xuZXhwb3J0cy5FbmNvZGUgPSBFbmNvZGU7XG5jb25zdCBEZWNvZGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZGVjb2RlXCIpKTtcbmV4cG9ydHMuRGVjb2RlID0gRGVjb2RlO1xuY29uc3QgSW1wb3J0ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2ltcG9ydFwiKSk7XG5leHBvcnRzLkltcG9ydCA9IEltcG9ydDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7IC8vY2FuJ3QgZG8gJ2V4cG9ydCB0eXBlIConXG5jb25zdCBVdGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsc1wiKSk7XG5leHBvcnRzLlV0aWxzID0gVXRpbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVXRpbHMgPSBleHBvcnRzLkltcG9ydCA9IHZvaWQgMDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7IC8vJ2V4cG9ydCB0eXBlIConIGlzIG5vdCBhbGxvd2VkXG5jb25zdCBJbXBvcnQgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vaW1wb3J0XCIpKTtcbmV4cG9ydHMuSW1wb3J0ID0gSW1wb3J0O1xuY29uc3QgVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIikpO1xuZXhwb3J0cy5VdGlscyA9IFV0aWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlV0aWxzID0gdm9pZCAwO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTsgLy8nZXhwb3J0IHR5cGUgKicgaXMgbm90IGFsbG93ZWRcbmNvbnN0IFV0aWxzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpKTtcbmV4cG9ydHMuVXRpbHMgPSBVdGlscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ob1Byb3ZpZGVyRXJyb3IgPSBleHBvcnRzLkFycmF5SW5kZXhPdXRPZkJvdW5kc0Vycm9yID0gZXhwb3J0cy5NZW1iZXJOb3RGb3VuZEVycm9yID0gZXhwb3J0cy5WYXJpYWJsZU5vdEZvdW5kRXJyb3IgPSBleHBvcnRzLkludmFsaWRBZGRyZXNzRXJyb3IgPSBleHBvcnRzLkNvbnRyYWN0QWxsb2NhdGlvbkZhaWxlZEVycm9yID0gZXhwb3J0cy5Db250cmFjdE5vdEZvdW5kRXJyb3IgPSBleHBvcnRzLkNvbnRyYWN0QmVpbmdEZWNvZGVkSGFzTm9Ob2RlRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBjb2RlY18xID0gcmVxdWlyZShcIkB0cnVmZmxlL2NvZGVjXCIpO1xuLyoqXG4gKiBUaGlzIGVycm9yIGluZGljYXRlcyB0aGF0IHRoZSBjb250cmFjdCB5b3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVjb2RlIGRvZXMgbm90IGhhdmUgQVNUXG4gKiBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggaXQsIG9yIHRoYXQgdGhlIGRlY29kZXIgY2Fubm90IGZpbmQgaXQuICBUaGlzIGVycm9yIHdpbGxcbiAqIGJlIHRocm93biBpZiB5b3UgYXR0ZW1wdCB0byB1c2UgZnVuY3Rpb25zIHRoYXQgcmVxdWlyZSBBU1QgaW5mb3JtYXRpb24gd2l0aCBzdWNoIGEgY29udHJhY3QuXG4gKiBAY2F0ZWdvcnkgRXhjZXB0aW9uXG4gKi9cbmNsYXNzIENvbnRyYWN0QmVpbmdEZWNvZGVkSGFzTm9Ob2RlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoY29udHJhY3ROYW1lLCBjb21waWxhdGlvbklkKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgQ29udHJhY3QgJHtjb250cmFjdE5hbWV9IGRvZXMgbm90IGFwcGVhciB0byBoYXZlIGJlZW4gY29tcGlsZWQgd2l0aCBTb2xpZGl0eSAoY2Fubm90IGxvY2F0ZSBjb250cmFjdCBub2RlKWA7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmNvbnRyYWN0TmFtZSA9IGNvbnRyYWN0TmFtZTtcbiAgICAgICAgdGhpcy5jb21waWxhdGlvbklkID0gY29tcGlsYXRpb25JZDtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJDb250cmFjdEJlaW5nRGVjb2RlZEhhc05vTm9kZUVycm9yXCI7XG4gICAgfVxufVxuZXhwb3J0cy5Db250cmFjdEJlaW5nRGVjb2RlZEhhc05vTm9kZUVycm9yID0gQ29udHJhY3RCZWluZ0RlY29kZWRIYXNOb05vZGVFcnJvcjtcbi8qKlxuICogVGhpcyBlcnJvciBpbmRpY2F0ZXMgdGhhdCB0aGUgY29udHJhY3QgeW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlY29kZSBjb3VsZCBub3QgYmUgZm91bmQgaW5cbiAqIHRoZSBwcm9qZWN0IGluZm8uICBUaGlzIGVycm9yIHdpbGwgYmUgdGhyb3duIGlmIHlvdSBhdHRlbXB0IHRvIHNwYXduIGEgY29udHJhY3QgZGVjb2RlciBvclxuICogY29udHJhY3QgaW5zdGFuY2UgZGVjb2RlciBmb3IgYSBjb250cmFjdCBub3QgYXBwZWFyaW5nIGluIHRoZSBwcm9qZWN0IGluZm8uXG4gKiBAY2F0ZWdvcnkgRXhjZXB0aW9uXG4gKi9cbmNsYXNzIENvbnRyYWN0Tm90Rm91bmRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250cmFjdE5hbWUsIGJ5dGVjb2RlLCBkZXBsb3llZEJ5dGVjb2RlLCBhZGRyZXNzKSB7XG4gICAgICAgIGxldCBtZXNzYWdlO1xuICAgICAgICBpZiAoY29udHJhY3ROYW1lKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gYENvbnRyYWN0ICR7Y29udHJhY3ROYW1lfSBjb3VsZCBub3QgYmUgZm91bmQgaW4gdGhlIHByb2plY3QgaW5mb3JtYXRpb25gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZSA9IGBDb250cmFjdCBhdCAke2FkZHJlc3N9IGNvdWxkIG5vdCBiZSBmb3VuZCBpbiB0aGUgcHJvamVjdCBpbmZvcm1hdGlvbmA7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29udHJhY3ROYW1lID0gY29udHJhY3ROYW1lO1xuICAgICAgICB0aGlzLmJ5dGVjb2RlID0gYnl0ZWNvZGU7XG4gICAgICAgIHRoaXMuZGVwbG95ZWRCeXRlY29kZSA9IGRlcGxveWVkQnl0ZWNvZGU7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ29udHJhY3ROb3RGb3VuZEVycm9yXCI7XG4gICAgfVxufVxuZXhwb3J0cy5Db250cmFjdE5vdEZvdW5kRXJyb3IgPSBDb250cmFjdE5vdEZvdW5kRXJyb3I7XG4vKipcbiAqIFRoaXMgZXJyb3IgaW5kaWNhdGVzIHRoYXQgc29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgYXR0ZW1wdGluZyB0byBkZXRlcm1pbmUgdGhlIGxvY2F0aW9uXG4gKiBvZiB0aGlzIGNvbnRyYWN0J3Mgc3RhdGUgdmFyaWFibGVzLiAgVGhpcyBlcnJvciB3aWxsIGJlIHRocm93biBpZiB5b3UgYXR0ZW1wdCB0byB1c2VcbiAqIGRlY29kaW5nIGZ1bmN0aW9ucyBhZnRlciBzb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgc2V0dXAuICBVbmZvcnR1bmF0ZWx5LCB3ZSBjYW4ndFxuICogYWx3YXlzIGF2b2lkIHRoaXMgYXQgdGhlIG1vbWVudDsgd2UncmUgaG9waW5nIHRvIG1ha2UgdGhpcyBtb3JlIHJvYnVzdCBpbiB0aGUgZnV0dXJlXG4gKiB3aXRoIFRydWZmbGUgREIuICBJbiB0aGUgbWVhbnRpbWUsIGl0IGlzIGF0IGxlYXN0IHdvcnRoIG5vdGluZyB0aGF0IHlvdSBzaG91bGQgbm90IGVuY291bnRlclxuICogdGhpcyBlcnJvciBpZiB5b3VyIGVudGlyZSBwcm9qZWN0IHdhcyB3cml0dGVuIGluIFNvbGlkaXR5IGFuZCBhbGwgY29tcGlsZWQgYXQgb25jZS4gIFNvcnJ5LlxuICogQGNhdGVnb3J5IEV4Y2VwdGlvblxuICovXG5jbGFzcyBDb250cmFjdEFsbG9jYXRpb25GYWlsZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihpZCwgY29udHJhY3ROYW1lLCBjb21waWxhdGlvbklkKSB7XG4gICAgICAgIHN1cGVyKGBObyBhbGxvY2F0aW9uIGZvdW5kIGZvciBjb250cmFjdCBJRCAke2lkfSAoJHtjb250cmFjdE5hbWV9KSBpbiBjb21waWxhdGlvbiAke2NvbXBpbGF0aW9uSWR9YCk7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5jb250cmFjdE5hbWUgPSBjb250cmFjdE5hbWU7XG4gICAgICAgIHRoaXMuY29tcGlsYXRpb25JZCA9IGNvbXBpbGF0aW9uSWQ7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ29udHJhY3RBbGxvY2F0aW9uRmFpbGVkRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLkNvbnRyYWN0QWxsb2NhdGlvbkZhaWxlZEVycm9yID0gQ29udHJhY3RBbGxvY2F0aW9uRmFpbGVkRXJyb3I7XG4vKipcbiAqIFRoaXMgZXJyb3IgaW5kaWNhdGVzIHRoYXQgYW4gaW52YWxpZCBhZGRyZXNzIHdhcyBwYXNzZWQgdG8gb25lIG9mIHRoZVxuICogY29udHJhY3QgaW5zdGFuY2UgZGVjb2RlciBzcGF3bmVycyAoW1tmb3JDb250cmFjdEluc3RhbmNlXV0sIGV0YykuICBWYWxpZFxuICogYWRkcmVzc2VzIGFyZSB0aG9zZSB0aGF0IFdlYjMgYWNjZXB0czsgaS5lLiwgZWl0aGVyIHRob3NlIHdpdGggY29ycmVjdFxuICogY2hlY2tzdW1zLCBvciB0aG9zZSB0aGF0IGFyZSBhbGwtbG93ZXJjYXNlIG9yIGFsbC11cHBlcmNhc2UgdG8gZGVsaWJlcmF0ZWx5XG4gKiBjaXJjdW12ZW50IHRoZSBjaGVja3N1bS5cbiAqIEBjYXRlZ29yeSBFeGNlcHRpb25cbiAqL1xuY2xhc3MgSW52YWxpZEFkZHJlc3NFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihhZGRyZXNzKSB7XG4gICAgICAgIHN1cGVyKGBJbnZhbGlkIGFkZHJlc3MgJHthZGRyZXNzfWApO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkludmFsaWRBZGRyZXNzRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLkludmFsaWRBZGRyZXNzRXJyb3IgPSBJbnZhbGlkQWRkcmVzc0Vycm9yO1xuLyoqXG4gKiBUaGlzIGVycm9yIGluZGljYXRlcyB0aGF0IHRoZSB1c2VyIHJlcXVlc3RlZCBhIHZhcmlhYmxlIHRoYXQgZG9lcyBub3QgZXhpc3QuXG4gKiBAY2F0ZWdvcnkgRXhjZXB0aW9uXG4gKi9cbmNsYXNzIFZhcmlhYmxlTm90Rm91bmRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lT3JJZCkge1xuICAgICAgICBzdXBlcihgTm8gc3VjaCB2YXJpYWJsZSAke25hbWVPcklkfWApO1xuICAgICAgICB0aGlzLm5hbWVPcklkID0gbmFtZU9ySWQ7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiVmFyaWFibGVOb3RGb3VuZEVycm9yXCI7XG4gICAgfVxufVxuZXhwb3J0cy5WYXJpYWJsZU5vdEZvdW5kRXJyb3IgPSBWYXJpYWJsZU5vdEZvdW5kRXJyb3I7XG4vKipcbiAqIFRoaXMgZXJyb3IgaW5kaWNhdGVzIHRoYXQgdGhlIHVzZXIgcmVxdWVzdGVkIGEgc3RydWN0IG1lbWJlciB0aGF0IGRvZXMgbm90XG4gKiBleGlzdC5cbiAqIEBjYXRlZ29yeSBFeGNlcHRpb25cbiAqL1xuY2xhc3MgTWVtYmVyTm90Rm91bmRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZW1iZXJOYW1lLCBzdHJ1Y3RUeXBlLCB2YXJpYWJsZSwgaW5kaWNlcykge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYE1lbWJlciAke21lbWJlck5hbWV9IGRvZXMgbm90IGV4aXN0IG9uIHN0cnVjdCB0eXBlICR7Y29kZWNfMS5Gb3JtYXQuVHlwZXMudHlwZVN0cmluZ1dpdGhvdXRMb2NhdGlvbihzdHJ1Y3RUeXBlKX0gaW4gYXR0ZW1wdGluZyB0byBhY2Nlc3MgdmFyaWFibGUgJHt2YXJpYWJsZX0kLCBpbmRleFNlcXVlbmNlICR7aW5kaWNlcy5qb2luKFwiLCBcIil9YDtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubWVtYmVyTmFtZSA9IG1lbWJlck5hbWU7XG4gICAgICAgIHRoaXMuc3RydWN0VHlwZSA9IHN0cnVjdFR5cGU7XG4gICAgICAgIHRoaXMudmFyaWFibGUgPSB2YXJpYWJsZTtcbiAgICAgICAgdGhpcy5pbmRpY2VzID0gaW5kaWNlcztcbiAgICAgICAgdGhpcy5uYW1lID0gXCJNZW1iZXJOb3RGb3VuZEVycm9yXCI7XG4gICAgfVxufVxuZXhwb3J0cy5NZW1iZXJOb3RGb3VuZEVycm9yID0gTWVtYmVyTm90Rm91bmRFcnJvcjtcbi8qKlxuICogVGhpcyBlcnJvciBpbmRpY2F0ZXMgdGhhdCB0aGUgdXNlciByZXF1ZXN0ZWQgYW4gYXJyYXkgaW5kZXggdGhhdCBpcyBvdXRcbiAqIG9mIGJvdW5kcy4gIE5vdGUgdGhhdCBjdXJyZW50bHkgdGhpcyBlcnJvciBpcyBvbmx5IHRocm93biB3aGVuIGFuIGluZGV4XG4gKiBpcyByZXF1ZXN0ZWQgdGhhdCBpcyBvdXRzaWRlICpzdGF0aWMqIGJvdW5kczsgZHluYW1pYyBhcnJheSBib3VuZHMgYXJlXG4gKiBjdXJyZW50bHkgbm90IGNoZWNrZWQuXG4gKiBAY2F0ZWdvcnkgRXhjZXB0aW9uXG4gKi9cbmNsYXNzIEFycmF5SW5kZXhPdXRPZkJvdW5kc0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGluZGV4LCBsZW5ndGgsIHZhcmlhYmxlLCBpbmRpY2VzKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgSW5kZXggJHtpbmRleH0gaXMgb3V0IG9mIGJvdW5kcyBmb3IgYXJyYXkgb2YgbGVuZ3RoICR7bGVuZ3RofSBpbiBhdHRlbXB0aW5nIHRvIGFjY2VzcyB2YXJpYWJsZSAke3ZhcmlhYmxlfSwgaW5kZXggc2VxdWVuY2UgJHtpbmRpY2VzLmpvaW4oXCIsIFwiKX1gO1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4LmNsb25lKCk7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoLmNsb25lKCk7XG4gICAgICAgIHRoaXMudmFyaWFibGUgPSB2YXJpYWJsZTtcbiAgICAgICAgdGhpcy5pbmRpY2VzID0gaW5kaWNlcztcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBcnJheUluZGV4T3V0T2ZCb3VuZHNFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuQXJyYXlJbmRleE91dE9mQm91bmRzRXJyb3IgPSBBcnJheUluZGV4T3V0T2ZCb3VuZHNFcnJvcjtcbi8qKlxuICogVGhpcyBlcnJvciBpbmRpY2F0ZXMgdGhhdCBubyBwcm92aWRlciB3YXMgcGFzc2VkIHRvIHRoZSBkZWNvZGVyLlxuICovXG5jbGFzcyBOb1Byb3ZpZGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiTm8gcHJvdmlkZXIgd2FzIGdpdmVuIGZvciB0aGUgZGVjb2RlciB0byB1c2UuXCIpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIk5vUHJvdmlkZXJFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuTm9Qcm92aWRlckVycm9yID0gTm9Qcm92aWRlckVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29udHJhY3RJbnN0YW5jZURlY29kZXIgPSBleHBvcnRzLkNvbnRyYWN0RGVjb2RlciA9IGV4cG9ydHMuUHJvamVjdERlY29kZXIgPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBkZWJ1ZyA9IGRlYnVnXzEuZGVmYXVsdChcImRlY29kZXI6ZGVjb2RlcnNcIik7XG5jb25zdCBBYmkgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIkB0cnVmZmxlL2FiaS11dGlsc1wiKSk7XG5jb25zdCBDb2RlYyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiQHRydWZmbGUvY29kZWNcIikpO1xuY29uc3QgY29kZWNfMSA9IHJlcXVpcmUoXCJAdHJ1ZmZsZS9jb2RlY1wiKTtcbmNvbnN0IFV0aWxzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpKTtcbmNvbnN0IHdlYjNfdXRpbHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwid2ViMy11dGlsc1wiKSk7XG5jb25zdCBibl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJibi5qc1wiKSk7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmNvbnN0IGNvbXBpbGVfY29tbW9uXzEgPSByZXF1aXJlKFwiQHRydWZmbGUvY29tcGlsZS1jb21tb25cIik7XG5jb25zdCBQcm92aWRlckFkYXB0ZXJfMSA9IHJlcXVpcmUoXCIuL1Byb3ZpZGVyQWRhcHRlclwiKTtcbi8vc29ycnkgZm9yIHRoZSB1bnR5cGVkIGltcG9ydCwgYnV0Li4uXG5jb25zdCBTb3VyY2VNYXBVdGlscyA9IHJlcXVpcmUoXCJAdHJ1ZmZsZS9zb3VyY2UtbWFwLXV0aWxzXCIpO1xuLyoqXG4gKiBUaGUgUHJvamVjdERlY29kZXIgY2xhc3MuICBEZWNvZGVzIHRyYW5zYWN0aW9ucyBhbmQgbG9ncy4gIFNlZSBiZWxvdyBmb3IgYSBtZXRob2QgbGlzdGluZy5cbiAqIEBjYXRlZ29yeSBEZWNvZGVyXG4gKi9cbmNsYXNzIFByb2plY3REZWNvZGVyIHtcbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29tcGlsYXRpb25zLCBwcm92aWRlciwgZW5zU2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0cyA9IHt9OyAvL2FsbCBjb250ZXh0c1xuICAgICAgICB0aGlzLmRlcGxveWVkQ29udGV4dHMgPSB7fTtcbiAgICAgICAgdGhpcy5jb250cmFjdHNBbmRDb250ZXh0cyA9IFtdO1xuICAgICAgICB0aGlzLmNvZGVDYWNoZSA9IHt9O1xuICAgICAgICBpZiAoIXByb3ZpZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTm9Qcm92aWRlckVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm92aWRlckFkYXB0ZXIgPSBuZXcgUHJvdmlkZXJBZGFwdGVyXzEuUHJvdmlkZXJBZGFwdGVyKHByb3ZpZGVyKTtcbiAgICAgICAgdGhpcy5jb21waWxhdGlvbnMgPSBjb21waWxhdGlvbnM7XG4gICAgICAgIHRoaXMuZW5zU2V0dGluZ3MgPSBlbnNTZXR0aW5ncyB8fCB7fTtcbiAgICAgICAgbGV0IGFsbG9jYXRpb25JbmZvO1xuICAgICAgICAoe1xuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHRoaXMucmVmZXJlbmNlRGVjbGFyYXRpb25zLFxuICAgICAgICAgICAgdHlwZXNCeUNvbXBpbGF0aW9uOiB0aGlzLnVzZXJEZWZpbmVkVHlwZXNCeUNvbXBpbGF0aW9uLFxuICAgICAgICAgICAgdHlwZXM6IHRoaXMudXNlckRlZmluZWRUeXBlc1xuICAgICAgICB9ID0gY29kZWNfMS5Db21waWxhdGlvbnMuVXRpbHMuY29sbGVjdFVzZXJEZWZpbmVkVHlwZXNBbmRUYWdnZWRPdXRwdXRzKHRoaXMuY29tcGlsYXRpb25zKSk7XG4gICAgICAgICh7XG4gICAgICAgICAgICBjb250ZXh0czogdGhpcy5jb250ZXh0cyxcbiAgICAgICAgICAgIGRlcGxveWVkQ29udGV4dHM6IHRoaXMuZGVwbG95ZWRDb250ZXh0cyxcbiAgICAgICAgICAgIGNvbnRyYWN0c0FuZENvbnRleHRzOiB0aGlzLmNvbnRyYWN0c0FuZENvbnRleHRzLFxuICAgICAgICAgICAgYWxsb2NhdGlvbkluZm9cbiAgICAgICAgfSA9IGNvZGVjXzEuQWJpRGF0YS5BbGxvY2F0ZS5VdGlscy5jb2xsZWN0QWxsb2NhdGlvbkluZm8odGhpcy5jb21waWxhdGlvbnMpKTtcbiAgICAgICAgdGhpcy5hbGxvY2F0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmFsbG9jYXRpb25zLmFiaSA9IGNvZGVjXzEuQWJpRGF0YS5BbGxvY2F0ZS5nZXRBYmlBbGxvY2F0aW9ucyh0aGlzLnVzZXJEZWZpbmVkVHlwZXMpO1xuICAgICAgICB0aGlzLmFsbG9jYXRpb25zLnN0b3JhZ2UgPSBjb2RlY18xLlN0b3JhZ2UuQWxsb2NhdGUuZ2V0U3RvcmFnZUFsbG9jYXRpb25zKHRoaXMudXNlckRlZmluZWRUeXBlc0J5Q29tcGlsYXRpb24pOyAvL25vdCB1c2VkIGJ5IHByb2plY3QgZGVjb2RlciBpdHNlbGYsIGJ1dCB1c2VkIGJ5IGNvbnRyYWN0IGRlY29kZXJcbiAgICAgICAgdGhpcy5hbGxvY2F0aW9ucy5jYWxsZGF0YSA9IGNvZGVjXzEuQWJpRGF0YS5BbGxvY2F0ZS5nZXRDYWxsZGF0YUFsbG9jYXRpb25zKGFsbG9jYXRpb25JbmZvLCB0aGlzLnJlZmVyZW5jZURlY2xhcmF0aW9ucywgdGhpcy51c2VyRGVmaW5lZFR5cGVzLCB0aGlzLmFsbG9jYXRpb25zLmFiaSk7XG4gICAgICAgIHRoaXMuYWxsb2NhdGlvbnMucmV0dXJuZGF0YSA9IGNvZGVjXzEuQWJpRGF0YS5BbGxvY2F0ZS5nZXRSZXR1cm5kYXRhQWxsb2NhdGlvbnMoYWxsb2NhdGlvbkluZm8sIHRoaXMucmVmZXJlbmNlRGVjbGFyYXRpb25zLCB0aGlzLnVzZXJEZWZpbmVkVHlwZXMsIHRoaXMuYWxsb2NhdGlvbnMuYWJpKTtcbiAgICAgICAgdGhpcy5hbGxvY2F0aW9ucy5ldmVudCA9IGNvZGVjXzEuQWJpRGF0YS5BbGxvY2F0ZS5nZXRFdmVudEFsbG9jYXRpb25zKGFsbG9jYXRpb25JbmZvLCB0aGlzLnJlZmVyZW5jZURlY2xhcmF0aW9ucywgdGhpcy51c2VyRGVmaW5lZFR5cGVzLCB0aGlzLmFsbG9jYXRpb25zLmFiaSk7XG4gICAgICAgIHRoaXMuYWxsb2NhdGlvbnMuc3RhdGUgPSBjb2RlY18xLlN0b3JhZ2UuQWxsb2NhdGUuZ2V0U3RhdGVBbGxvY2F0aW9ucyhhbGxvY2F0aW9uSW5mbywgdGhpcy5yZWZlcmVuY2VEZWNsYXJhdGlvbnMsIHRoaXMudXNlckRlZmluZWRUeXBlcywgdGhpcy5hbGxvY2F0aW9ucy5zdG9yYWdlKTtcbiAgICAgICAgZGVidWcoXCJkb25lIHdpdGggYWxsb2NhdGlvblwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGdldENvZGUoYWRkcmVzcywgYmxvY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vaWYgcGVuZGluZywgaWdub3JlIHRoZSBjYWNoZVxuICAgICAgICAgICAgaWYgKGJsb2NrID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2RlY18xLkNvbnZlcnNpb24udG9CeXRlcyh5aWVsZCB0aGlzLnByb3ZpZGVyQWRhcHRlci5nZXRDb2RlKGFkZHJlc3MsIGJsb2NrKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL290aGVyd2lzZSwgc3RhcnQgYnkgc2V0dGluZyB1cCBhbnkgcHJlbGltaW5hcnkgbGF5ZXJzIGFzIG5lZWRlZFxuICAgICAgICAgICAgaWYgKHRoaXMuY29kZUNhY2hlW2Jsb2NrXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2RlQ2FjaGVbYmxvY2tdID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL25vdywgaWYgd2UgaGF2ZSBpdCBjYWNoZWQsIGp1c3QgcmV0dXJuIGl0XG4gICAgICAgICAgICBpZiAodGhpcy5jb2RlQ2FjaGVbYmxvY2tdW2FkZHJlc3NdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2RlQ2FjaGVbYmxvY2tdW2FkZHJlc3NdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9vdGhlcndpc2UsIGdldCBpdCwgY2FjaGUgaXQsIGFuZCByZXR1cm4gaXRcbiAgICAgICAgICAgIGxldCBjb2RlID0gY29kZWNfMS5Db252ZXJzaW9uLnRvQnl0ZXMoeWllbGQgdGhpcy5wcm92aWRlckFkYXB0ZXIuZ2V0Q29kZShhZGRyZXNzLCBibG9jaykpO1xuICAgICAgICAgICAgdGhpcy5jb2RlQ2FjaGVbYmxvY2tdW2FkZHJlc3NdID0gY29kZTtcbiAgICAgICAgICAgIHJldHVybiBjb2RlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJlZ3VsYXJpemVCbG9jayhibG9jaykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBibG9jayA9PT0gXCJudW1iZXJcIiB8fCBibG9jayA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmxvY2sgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJwZW5kaW5nXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoKHlpZWxkIHRoaXMucHJvdmlkZXJBZGFwdGVyLmdldEJsb2NrQnlOdW1iZXIoYmxvY2spKS5udW1iZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogKipUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMuKipcbiAgICAgKlxuICAgICAqIFRha2VzIGEgW1tUcmFuc2FjdGlvbl1dIG9iamVjdCBhbmQgZGVjb2RlcyBpdC4gIFRoZSByZXN1bHQgaXMgYVxuICAgICAqIFtbQ2FsbGRhdGFEZWNvZGluZ11dOyBzZWUgdGhlIGRvY3VtZW50YXRpb24gb24gdGhhdCBpbnRlcmZhY2UgZm9yIG1vcmUuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgZGVjb2Rpbmcgb2YgdHJhbnNhY3Rpb25zIHNlbnQgdG8gbGlicmFyaWVzIGlzIHByZXNlbnRseSBub3RcbiAgICAgKiBzdXBwb3J0ZWQgYW5kIG1heSBoYXZlIHVucmVsaWFibGUgcmVzdWx0cy4gIExpbWl0ZWQgc3VwcG9ydCBmb3IgdGhpcyBpc1xuICAgICAqIHBsYW5uZWQgZm9yIGZ1dHVyZSB2ZXJzaW9ucy5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gVGhlIHRyYW5zYWN0aW9uIHRvIGJlIGRlY29kZWQuXG4gICAgICovXG4gICAgZGVjb2RlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmRlY29kZVRyYW5zYWN0aW9uV2l0aEFkZGl0aW9uYWxDb250ZXh0cyh0cmFuc2FjdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgZGVjb2RlVHJhbnNhY3Rpb25XaXRoQWRkaXRpb25hbENvbnRleHRzKHRyYW5zYWN0aW9uLCBhZGRpdGlvbmFsQ29udGV4dHMgPSB7fSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgYmxvY2sgPSB0cmFuc2FjdGlvbi5ibG9ja051bWJlcjtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5yZWd1bGFyaXplQmxvY2soYmxvY2spO1xuICAgICAgICAgICAgY29uc3QgaXNDb25zdHJ1Y3RvciA9IHRyYW5zYWN0aW9uLnRvID09PSBudWxsO1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHlpZWxkIHRoaXMuZ2V0Q29udGV4dEJ5QWRkcmVzcyh0cmFuc2FjdGlvbi50bywgYmxvY2tOdW1iZXIsIHRyYW5zYWN0aW9uLmlucHV0LCBhZGRpdGlvbmFsQ29udGV4dHMpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNvZGVjXzEuQ29udmVyc2lvbi50b0J5dGVzKHRyYW5zYWN0aW9uLmlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZToge30sXG4gICAgICAgICAgICAgICAgICAgIGNhbGxkYXRhOiBkYXRhXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1c2VyRGVmaW5lZFR5cGVzOiB0aGlzLnVzZXJEZWZpbmVkVHlwZXMsXG4gICAgICAgICAgICAgICAgYWxsb2NhdGlvbnM6IHRoaXMuYWxsb2NhdGlvbnMsXG4gICAgICAgICAgICAgICAgY29udGV4dHM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kZXBsb3llZENvbnRleHRzKSwgYWRkaXRpb25hbENvbnRleHRzKSxcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29udGV4dDogY29udGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGRlY29kZXIgPSBjb2RlY18xLmRlY29kZUNhbGxkYXRhKGluZm8sIGlzQ29uc3RydWN0b3IpO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGRlY29kZXIubmV4dCgpO1xuICAgICAgICAgICAgd2hpbGUgKHJlc3VsdC5kb25lID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHJlcXVlc3QudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY29kZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLmdldENvZGUocmVxdWVzdC5hZGRyZXNzLCBibG9ja051bWJlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgLy9ub3Qgd3JpdGluZyBhIHN0b3JhZ2UgY2FzZSBhcyBpdCBzaG91bGRuJ3Qgb2NjdXIgaGVyZSFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZGVjb2Rlci5uZXh0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vYXQgdGhpcyBwb2ludCwgcmVzdWx0LnZhbHVlIGhvbGRzIHRoZSBmaW5hbCB2YWx1ZVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzLioqXG4gICAgICpcbiAgICAgKiBUYWtlcyBhIFtbTG9nXV0gb2JqZWN0IGFuZCBkZWNvZGVzIGl0LiAgTG9ncyBjYW4gYmUgYW1iaWd1b3VzLCBzbyB0aGlzIHNvXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGFycmF5IG9mIFtbTG9nRGVjb2Rpbmd8TG9nRGVjb2RpbmdzXV0uXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgbG9ncyBhcmUgZGVjb2RlZCBpbiBzdHJpY3QgbW9kZSwgc28gKHdpdGggb25lIGV4Y2VwdGlvbikgbm9uZSBvZiB0aGUgZGVjb2RpbmdzIHNob3VsZFxuICAgICAqIGNvbnRhaW4gZXJyb3JzOyBpZiBhIGRlY29kaW5nIHdvdWxkIGNvbnRhaW4gYW4gZXJyb3IsIGluc3RlYWQgaXQgaXMgc2ltcGx5IGV4Y2x1ZGVkIGZyb20gdGhlXG4gICAgICogbGlzdCBvZiBwb3NzaWJsZSBkZWNvZGluZ3MuICBUaGUgb25lIGV4Y2VwdGlvbiB0byB0aGlzIGlzIHRoYXQgaW5kZXhlZCBwYXJhbWV0ZXJzIG9mIHJlZmVyZW5jZVxuICAgICAqIHR5cGUgY2Fubm90IG1lYW5pbmdmdWxseSBiZSBkZWNvZGVkLCBzbyB0aG9zZSB3aWxsIGRlY29kZSB0byBhbiBlcnJvci5cbiAgICAgKlxuICAgICAqIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBwb3NzaWJsZSBkZWNvZGluZ3MsIHRoZXkgd2lsbCBhbHdheXMgYmUgbGlzdGVkIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6XG4gICAgICpcbiAgICAgKiAxLiBOb24tYW5vbnltb3VzIGV2ZW50cyBjb21pbmcgZnJvbSB0aGUgY29udHJhY3QgaXRzZWxmICh0aGVzZSB3aWxsIG1vcmVvdmVyIGJlIG9yZGVyZWRcbiAgICAgKiAgIGZyb20gbW9zdCBkZXJpdmVkIHRvIG1vc3QgYmFzZSlcbiAgICAgKiAyLiBOb24tYW5vbnltb3VzIGV2ZW50cyBjb21pbmcgZnJvbSBsaWJyYXJpZXNcbiAgICAgKiAzLiBBbm9ueW1vdXMgZXZlbnRzIGNvbWluZyBmcm9tIHRoZSBjb250cmFjdCBpdHNlbGYgKGFnYWluLCBvcmRlcmVkIGZyb20gbW9zdCBkZXJpdmVkXG4gICAgICogICB0byBtb3N0IGJhc2UpXG4gICAgICogNC4gQW5vbnltb3VzIGV2ZW50cyBjb21pbmcgZnJvbSBsaWJyYXJpZXNcbiAgICAgKlxuICAgICAqIFlvdSBjYW4gY2hlY2sgdGhlIGtpbmQgYW5kIGNsYXNzLmNvbnRyYWN0S2luZCBmaWVsZHMgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiB0aGVzZS5cbiAgICAgKlxuICAgICAqIElmIG5vIHBvc3NpYmxlIGRlY29kaW5ncyBhcmUgZm91bmQsIHRoZSByZXR1cm5lZCBhcnJheSBvZiBkZWNvZGluZ3Mgd2lsbCBiZSBlbXB0eS5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBkaWZmZXJlbnQgZGVjb2RpbmdzIG1heSB1c2UgZGlmZmVyZW50IGRlY29kaW5nIG1vZGVzLlxuICAgICAqXG4gICAgICogQ2hhbmdpbmcgYG9wdGlvbnMuZXh0cmFzID0gXCJvblwiYCBvciBgb3B0aW9ucy5leHRyYXMgPSBcIm5lY2Vzc2FyeVwiYCB3aWxsIGNoYW5nZSB0aGVcbiAgICAgKiBhYm92ZSBiZWhhdmlvcjsgc2VlIHRoZSBkb2N1bWVudGF0aW9uIG9uIFtbRXh0cmFzQWxsb3dlZF1dIGZvciBtb3JlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxvZyBUaGUgbG9nIHRvIGJlIGRlY29kZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3IgY29udHJvbGxpbmcgZGVjb2RpbmcuXG4gICAgICovXG4gICAgZGVjb2RlTG9nKGxvZywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5kZWNvZGVMb2dXaXRoQWRkaXRpb25hbE9wdGlvbnMobG9nLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBkZWNvZGVMb2dXaXRoQWRkaXRpb25hbE9wdGlvbnMobG9nLCBvcHRpb25zID0ge30sIGFkZGl0aW9uYWxDb250ZXh0cyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBibG9jayA9IGxvZy5ibG9ja051bWJlcjtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5yZWd1bGFyaXplQmxvY2soYmxvY2spO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNvZGVjXzEuQ29udmVyc2lvbi50b0J5dGVzKGxvZy5kYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IHRvcGljcyA9IGxvZy50b3BpY3MubWFwKGNvZGVjXzEuQ29udmVyc2lvbi50b0J5dGVzKTtcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZToge30sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnR0b3BpY3M6IHRvcGljc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXNlckRlZmluZWRUeXBlczogdGhpcy51c2VyRGVmaW5lZFR5cGVzLFxuICAgICAgICAgICAgICAgIGFsbG9jYXRpb25zOiB0aGlzLmFsbG9jYXRpb25zLFxuICAgICAgICAgICAgICAgIGNvbnRleHRzOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVwbG95ZWRDb250ZXh0cyksIGFkZGl0aW9uYWxDb250ZXh0cylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBkZWNvZGVyID0gY29kZWNfMS5kZWNvZGVFdmVudChpbmZvLCBsb2cuYWRkcmVzcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZGVjb2Rlci5uZXh0KCk7XG4gICAgICAgICAgICB3aGlsZSAocmVzdWx0LmRvbmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSByZXN1bHQudmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAocmVxdWVzdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb2RlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHlpZWxkIHRoaXMuZ2V0Q29kZShyZXF1ZXN0LmFkZHJlc3MsIGJsb2NrTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAvL25vdCB3cml0aW5nIGEgc3RvcmFnZSBjYXNlIGFzIGl0IHNob3VsZG4ndCBvY2N1ciBoZXJlIVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQgPSBkZWNvZGVyLm5leHQocmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9hdCB0aGlzIHBvaW50LCByZXN1bHQudmFsdWUgaG9sZHMgdGhlIGZpbmFsIHZhbHVlXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogKipUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMuKipcbiAgICAgKlxuICAgICAqIEdldHMgYWxsIGV2ZW50cyBtZWV0aW5nIGNlcnRhaW4gY29uZGl0aW9ucyBhbmQgZGVjb2RlcyB0aGVtLlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgZmFpcmx5IHJ1ZGltZW50YXJ5IGF0IHRoZSBtb21lbnQgYnV0IG1vcmUgZnVuY3Rpb25hbGl0eVxuICAgICAqIHdpbGwgYmUgYWRkZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBVc2VkIHRvIGRldGVybWluZSB3aGF0IGV2ZW50cyB0byBmZXRjaCBhbmQgaG93IHRvIGRlY29kZVxuICAgICAqICAgdGhlbTsgc2VlIHRoZSBkb2N1bWVudGF0aW9uIG9uIHRoZSBbW0V2ZW50T3B0aW9uc11dIHR5cGUgZm9yIG1vcmUuXG4gICAgICogQHJldHVybiBBbiBhcnJheSBvZiBbW0RlY29kZWRMb2d8RGVjb2RlZExvZ3NdXS5cbiAgICAgKiAgIFRoZXNlIGNvbnNpc3Qgb2YgYSBsb2cgdG9nZXRoZXIgd2l0aCBpdHMgcG9zc2libGUgZGVjb2RpbmdzOyBzZWUgdGhhdFxuICAgICAqICAgdHlwZSBmb3IgbW9yZSBpbmZvLiAgQW5kIHNlZSBbW2RlY29kZUxvZ11dIGZvciBtb3JlIGluZm8gb24gaG93IGxvZ1xuICAgICAqICAgZGVjb2Rpbmcgd29ya3MgaW4gZ2VuZXJhbC5cbiAgICAgKiBAZXhhbXBsZSBgZXZlbnRzKHtuYW1lOiBcIlRlc3RFdmVudFwifSlgIC0tIGdldCBldmVudHMgbmFtZWQgXCJUZXN0RXZlbnRcIlxuICAgICAqICAgZnJvbSB0aGUgbW9zdCByZWNlbnQgYmxvY2tcbiAgICAgKi9cbiAgICBldmVudHMob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5ldmVudHNXaXRoQWRkaXRpb25hbENvbnRleHRzKG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGV2ZW50c1dpdGhBZGRpdGlvbmFsQ29udGV4dHMob3B0aW9ucyA9IHt9LCBhZGRpdGlvbmFsQ29udGV4dHMgPSB7fSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IHsgYWRkcmVzcywgbmFtZSwgZnJvbUJsb2NrLCB0b0Jsb2NrIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgaWYgKGZyb21CbG9jayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZnJvbUJsb2NrID0gXCJsYXRlc3RcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b0Jsb2NrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0b0Jsb2NrID0gXCJsYXRlc3RcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZyb21CbG9ja051bWJlciA9IHlpZWxkIHRoaXMucmVndWxhcml6ZUJsb2NrKGZyb21CbG9jayk7XG4gICAgICAgICAgICBjb25zdCB0b0Jsb2NrTnVtYmVyID0geWllbGQgdGhpcy5yZWd1bGFyaXplQmxvY2sodG9CbG9jayk7XG4gICAgICAgICAgICBjb25zdCBsb2dzID0geWllbGQgdGhpcy5wcm92aWRlckFkYXB0ZXIuZ2V0UGFzdExvZ3Moe1xuICAgICAgICAgICAgICAgIGFkZHJlc3MsXG4gICAgICAgICAgICAgICAgZnJvbUJsb2NrOiBmcm9tQmxvY2tOdW1iZXIsXG4gICAgICAgICAgICAgICAgdG9CbG9jazogdG9CbG9ja051bWJlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgZXZlbnRzID0geWllbGQgUHJvbWlzZS5hbGwobG9ncy5tYXAoKGxvZykgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2cpLCB7IGRlY29kaW5nczogeWllbGQgdGhpcy5kZWNvZGVMb2dXaXRoQWRkaXRpb25hbE9wdGlvbnMobG9nLCBvcHRpb25zLCBhZGRpdGlvbmFsQ29udGV4dHMpIH0pKTtcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICBkZWJ1ZyhcImV2ZW50czogJW9cIiwgZXZlbnRzKTtcbiAgICAgICAgICAgIC8vaWYgYSB0YXJnZXQgbmFtZSB3YXMgc3BlY2lmaWVkLCB3ZSdsbCByZXN0cmljdCB0byBldmVudHMgdGhhdCBkZWNvZGVkXG4gICAgICAgICAgICAvL3RvIHNvbWV0aGluZyB3aXRoIHRoYXQgbmFtZS4gIChub3RlIHRoYXQgb25seSBkZWNvZGluZ3Mgd2l0aCB0aGF0IG5hbWVcbiAgICAgICAgICAgIC8vd2lsbCBoYXZlIGJlZW4gcmV0dXJuZWQgZnJvbSBkZWNvZGVMb2dzIGluIHRoZSBmaXJzdCBwbGFjZSlcbiAgICAgICAgICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBldmVudHMgPSBldmVudHMuZmlsdGVyKGV2ZW50ID0+IGV2ZW50LmRlY29kaW5ncy5sZW5ndGggPiAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmVudHM7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIFtbQ2FsbGRhdGFEZWNvZGluZ11dLCB3aGljaCBtYXkgaGF2ZSBiZWVuIHByb2R1Y2VkIGluIGZ1bGwgbW9kZSBvciBBQkkgbW9kZSxcbiAgICAgKiBhbmQgY29udmVydHMgaXQgdG8gaXRzIEFCSSBtb2RlIGVxdWl2YWxlbnQuICBTZWUgdGhlIFJFQURNRSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIFBsZWFzZSBvbmx5IHVzZSBvbiBkZWNvZGluZ3MgcHJvZHVjZWQgYnkgdGhpcyBzYW1lIGRlY29kZXIgaW5zdGFuY2U7IHVzZVxuICAgICAqIG9uIGRlY29kaW5ncyBwcm9kdWNlZCBieSBvdGhlciBpbnN0YW5jZXMgbWF5IG5vdCB3b3JrIGNvbnNpc3RlbnRseS5cbiAgICAgKiBAcGFyYW0gZGVjb2RpbmcgVGhlIGRlY29kaW5nIHRvIGFiaWZ5XG4gICAgICovXG4gICAgYWJpZnlDYWxsZGF0YURlY29kaW5nKGRlY29kaW5nKSB7XG4gICAgICAgIHJldHVybiBDb2RlYy5hYmlmeUNhbGxkYXRhRGVjb2RpbmcoZGVjb2RpbmcsIHRoaXMudXNlckRlZmluZWRUeXBlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRha2VzIGEgW1tMb2dEZWNvZGluZ11dLCB3aGljaCBtYXkgaGF2ZSBiZWVuIHByb2R1Y2VkIGluIGZ1bGwgbW9kZSBvciBBQkkgbW9kZSxcbiAgICAgKiBhbmQgY29udmVydHMgaXQgdG8gaXRzIEFCSSBtb2RlIGVxdWl2YWxlbnQuICBTZWUgdGhlIFJFQURNRSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIFBsZWFzZSBvbmx5IHVzZSBvbiBkZWNvZGluZ3MgcHJvZHVjZWQgYnkgdGhpcyBzYW1lIGRlY29kZXIgaW5zdGFuY2U7IHVzZVxuICAgICAqIG9uIGRlY29kaW5ncyBwcm9kdWNlZCBieSBvdGhlciBpbnN0YW5jZXMgbWF5IG5vdCB3b3JrIGNvbnNpc3RlbnRseS5cbiAgICAgKiBAcGFyYW0gZGVjb2RpbmcgVGhlIGRlY29kaW5nIHRvIGFiaWZ5XG4gICAgICovXG4gICAgYWJpZnlMb2dEZWNvZGluZyhkZWNvZGluZykge1xuICAgICAgICByZXR1cm4gQ29kZWMuYWJpZnlMb2dEZWNvZGluZyhkZWNvZGluZywgdGhpcy51c2VyRGVmaW5lZFR5cGVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBbW1JldHVybmRhdGFEZWNvZGluZ11dLCB3aGljaCBtYXkgaGF2ZSBiZWVuIHByb2R1Y2VkIGluIGZ1bGwgbW9kZVxuICAgICAqIG9yIEFCSSBtb2RlLCBhbmQgY29udmVydHMgaXQgdG8gaXRzIEFCSSBtb2RlIGVxdWl2YWxlbnQuICBTZWUgdGhlIFJFQURNRVxuICAgICAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogUGxlYXNlIG9ubHkgdXNlIG9uIGRlY29kaW5ncyBwcm9kdWNlZCBieSB0aGlzIHNhbWUgZGVjb2RlciBpbnN0YW5jZTsgdXNlXG4gICAgICogb24gZGVjb2RpbmdzIHByb2R1Y2VkIGJ5IG90aGVyIGluc3RhbmNlcyBtYXkgbm90IHdvcmsgY29uc2lzdGVudGx5LlxuICAgICAqIEBwYXJhbSBkZWNvZGluZyBUaGUgZGVjb2RpbmcgdG8gYWJpZnlcbiAgICAgKi9cbiAgICBhYmlmeVJldHVybmRhdGFEZWNvZGluZyhkZWNvZGluZykge1xuICAgICAgICByZXR1cm4gQ29kZWMuYWJpZnlSZXR1cm5kYXRhRGVjb2RpbmcoZGVjb2RpbmcsIHRoaXMudXNlckRlZmluZWRUeXBlcyk7XG4gICAgfVxuICAgIC8vbm9ybWFsbHksIHRoaXMgZnVuY3Rpb24gZ2V0cyB0aGUgY29kZSBvZiB0aGUgZ2l2ZW4gYWRkcmVzcyBhdCB0aGUgZ2l2ZW4gYmxvY2ssXG4gICAgLy9hbmQgY2hlY2tzIHRoaXMgYWdhaW5zdCB0aGUga25vd24gY29udGV4dHMgdG8gZGV0ZXJtaW5lIHRoZSBjb250cmFjdCB0eXBlXG4gICAgLy9ob3dldmVyLCBpZiB0aGlzIGZhaWxzIGFuZCBjb25zdHJ1Y3RvckJpbmFyeSBpcyBwYXNzZWQgaW4sIGl0IHdpbGwgdGhlbiBhbHNvXG4gICAgLy9hdHRlbXB0IHRvIGRldGVybWluZSBpdCBmcm9tIHRoYXRcbiAgICBnZXRDb250ZXh0QnlBZGRyZXNzKGFkZHJlc3MsIGJsb2NrLCBjb25zdHJ1Y3RvckJpbmFyeSwgYWRkaXRpb25hbENvbnRleHRzID0ge30pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGxldCBjb2RlO1xuICAgICAgICAgICAgaWYgKGFkZHJlc3MgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gY29kZWNfMS5Db252ZXJzaW9uLnRvSGV4U3RyaW5nKHlpZWxkIHRoaXMuZ2V0Q29kZShhZGRyZXNzLCBibG9jaykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29uc3RydWN0b3JCaW5hcnkpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gY29uc3RydWN0b3JCaW5hcnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2lmIG5laXRoZXIgb2YgdGhlc2UgaG9sZC4uLiB3ZSBoYXZlIGEgcHJvYmxlbVxuICAgICAgICAgICAgbGV0IGNvbnRleHRzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbnRleHRzKSwgYWRkaXRpb25hbENvbnRleHRzKTtcbiAgICAgICAgICAgIHJldHVybiBjb2RlY18xLkNvbnRleHRzLlV0aWxzLmZpbmRDb250ZXh0KGNvbnRleHRzLCBjb2RlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vZmluYWxseTogdGhlIHNwYXduZXJzIVxuICAgIC8qKlxuICAgICAqICoqVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzLioqXG4gICAgICpcbiAgICAgKiBDb25zdHJ1Y3RzIGEgY29udHJhY3QgZGVjb2RlciBmb3IgYSBnaXZlbiBjb250cmFjdCBhcnRpZmFjdC5cbiAgICAgKiBAcGFyYW0gYXJ0aWZhY3QgVGhlIGFydGlmYWN0IGZvciB0aGUgY29udHJhY3QuXG4gICAgICpcbiAgICAgKiAgIEEgY29udHJhY3QgY29uc3RydWN0b3Igb2JqZWN0IG1heSBiZSBzdWJzdGl0dXRlZCBmb3IgdGhlIGFydGlmYWN0LCBzbyBpZlxuICAgICAqICAgeW91J3JlIG5vdCBzdXJlIHdoaWNoIHlvdSdyZSBkZWFsaW5nIHdpdGgsIGl0J3MgT0suXG4gICAgICpcbiAgICAgKiAgIE5vdGU6IFRoZSBhcnRpZmFjdCBtdXN0IGJlIGZvciBhIGNvbnRyYWN0IHRoYXQgdGhlIGRlY29kZXIga25vd3MgYWJvdXQ7XG4gICAgICogICBvdGhlcndpc2UgeW91IHdpbGwgaGF2ZSBwcm9ibGVtcy5cbiAgICAgKi9cbiAgICBmb3JBcnRpZmFjdChhcnRpZmFjdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgZGVwbG95ZWRCeXRlY29kZSA9IGNvbXBpbGVfY29tbW9uXzEuU2hpbXMuTmV3VG9MZWdhY3kuZm9yQnl0ZWNvZGUoYXJ0aWZhY3QuZGVwbG95ZWRCeXRlY29kZSk7XG4gICAgICAgICAgICBjb25zdCBieXRlY29kZSA9IGNvbXBpbGVfY29tbW9uXzEuU2hpbXMuTmV3VG9MZWdhY3kuZm9yQnl0ZWNvZGUoYXJ0aWZhY3QuYnl0ZWNvZGUpO1xuICAgICAgICAgICAgY29uc3QgeyBjb21waWxhdGlvbiwgY29udHJhY3QgfSA9IHRoaXMuY29tcGlsYXRpb25zLnJlZHVjZSgoZm91bmRTb0ZhciwgY29tcGlsYXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRTb0Zhcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmRTb0ZhcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJhY3RGb3VuZCA9IGNvbXBpbGF0aW9uLmNvbnRyYWN0cy5maW5kKGNvbnRyYWN0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ5dGVjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNvbXBpbGVfY29tbW9uXzEuU2hpbXMuTmV3VG9MZWdhY3kuZm9yQnl0ZWNvZGUoY29udHJhY3QuYnl0ZWNvZGUpID09PSBieXRlY29kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0LmNvbnRyYWN0TmFtZSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFydGlmYWN0LmNvbnRyYWN0TmFtZSB8fCBhcnRpZmFjdC5jb250cmFjdF9uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZGVwbG95ZWRCeXRlY29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9JJ2xsIGp1c3QgZ28gYnkgb25lIG9mIGJ5dGVjb2RlIG9yIGRlcGxveWVkQnl0ZWNvZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vIHJlYWwgbmVlZCB0byBjaGVjayBib3RoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNvbXBpbGVfY29tbW9uXzEuU2hpbXMuTmV3VG9MZWdhY3kuZm9yQnl0ZWNvZGUoY29udHJhY3QuZGVwbG95ZWRCeXRlY29kZSkgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwbG95ZWRCeXRlY29kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0LmNvbnRyYWN0TmFtZSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFydGlmYWN0LmNvbnRyYWN0TmFtZSB8fCBhcnRpZmFjdC5jb250cmFjdF9uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1dBUk5JTkc6IGJldHRlciBob3BlIHdlIGRvbid0IGVuZCB1cCBoZXJlIVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjb250cmFjdC5jb250cmFjdE5hbWUgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFydGlmYWN0LmNvbnRyYWN0TmFtZSB8fCBhcnRpZmFjdC5jb250cmFjdF9uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJhY3RGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBjb21waWxhdGlvbiwgY29udHJhY3Q6IGNvbnRyYWN0Rm91bmQgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGlmIChjb250cmFjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkNvbnRyYWN0Tm90Rm91bmRFcnJvcihhcnRpZmFjdC5jb250cmFjdE5hbWUsIGJ5dGVjb2RlLCBkZXBsb3llZEJ5dGVjb2RlLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNvbnRyYWN0RGVjb2RlciA9IG5ldyBDb250cmFjdERlY29kZXIoY29udHJhY3QsIGNvbXBpbGF0aW9uLCB0aGlzLCBhcnRpZmFjdCk7XG4gICAgICAgICAgICB5aWVsZCBjb250cmFjdERlY29kZXIuaW5pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRyYWN0RGVjb2RlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzLioqXG4gICAgICpcbiAgICAgKiBDb25zdHJ1Y3RzIGEgY29udHJhY3QgaW5zdGFuY2UgZGVjb2RlciBmb3IgYSBnaXZlbiBpbnN0YW5jZSBvZiBhIGNvbnRyYWN0IGluIHRoaXNcbiAgICAgKiBwcm9qZWN0LlxuICAgICAqIEBwYXJhbSBhcnRpZmFjdCBUaGUgYXJ0aWZhY3QgZm9yIHRoZSBjb250cmFjdC5cbiAgICAgKlxuICAgICAqICAgQSBjb250cmFjdCBjb25zdHJ1Y3RvciBvYmplY3QgbWF5IGJlIHN1YnN0aXR1dGVkIGZvciB0aGUgYXJ0aWZhY3QsIHNvIGlmXG4gICAgICogICB5b3UncmUgbm90IHN1cmUgd2hpY2ggeW91J3JlIGRlYWxpbmcgd2l0aCwgaXQncyBPSy5cbiAgICAgKlxuICAgICAqICAgTm90ZTogVGhlIGFydGlmYWN0IG11c3QgYmUgZm9yIGEgY29udHJhY3QgdGhhdCB0aGUgZGVjb2RlciBrbm93cyBhYm91dDtcbiAgICAgKiAgIG90aGVyd2lzZSB5b3Ugd2lsbCBoYXZlIHByb2JsZW1zLlxuICAgICAqIEBwYXJhbSBhZGRyZXNzIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCBpbnN0YW5jZSB0byBkZWNvZGUuICBJZiBsZWZ0IG91dCwgaXQgd2lsbCBiZSBhdXRvZGV0ZWN0ZWQuXG4gICAgICogICBJZiBhbiBpbnZhbGlkIGFkZHJlc3MgaXMgcHJvdmlkZWQsIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uLlxuICAgICAqL1xuICAgIGZvckluc3RhbmNlKGFydGlmYWN0LCBhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgY29udHJhY3REZWNvZGVyID0geWllbGQgdGhpcy5mb3JBcnRpZmFjdChhcnRpZmFjdCk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgY29udHJhY3REZWNvZGVyLmZvckluc3RhbmNlKGFkZHJlc3MpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogKipUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMuKipcbiAgICAgKlxuICAgICAqIENvbnN0cnVjdHMgYSBjb250cmFjdCBpbnN0YW5jZSBkZWNvZGVyIGZvciBhIGdpdmVuIGluc3RhbmNlIG9mIGEgY29udHJhY3QgaW4gdGhpc1xuICAgICAqIHByb2plY3QuICBVbmxpa2UgW1tmb3JJbnN0YW5jZV1dLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHJlcXVpcmUgYW4gYXJ0aWZhY3Q7IGl0XG4gICAgICogd2lsbCBhdXRvbWF0aWNhbGx5IGRldGVjdCB0aGUgY2xhc3Mgb2YgdGhlIGdpdmVuIGNvbnRyYWN0LiAgSWYgaXQncyBub3QgaW5cbiAgICAgKiB0aGUgcHJvamVjdCwgb3IgdGhlIGRlY29kZXIgY2FuJ3QgaWRlbnRpZnkgaXQsIHlvdSdsbCBnZXQgYW4gZXhjZXB0aW9uLlxuICAgICAqIEBwYXJhbSBhZGRyZXNzIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCBpbnN0YW5jZSB0byBkZWNvZGUuXG4gICAgICogICBJZiBhbiBpbnZhbGlkIGFkZHJlc3MgaXMgcHJvdmlkZWQsIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uLlxuICAgICAqIEBwYXJhbSBibG9jayBZb3UgY2FuIGluY2x1ZGUgdGhpcyBhcmd1bWVudCB0byBzcGVjaWZ5IHRoYXQgdGhpcyBzaG91bGQgYmVcbiAgICAgKiAgIGJhc2VkIG9uIHRoZSBhZGRyZXNzZXMgY29udGVudCdzIGF0IGEgc3BlY2lmaWMgYmxvY2sgKGlmIHNheSB0aGUgY29udHJhY3RcbiAgICAgKiAgIGhhcyBzaW5jZSBzZWxmLWRlc3RydWN0ZWQpLlxuICAgICAqL1xuICAgIGZvckFkZHJlc3MoYWRkcmVzcywgYmxvY2sgPSBcImxhdGVzdFwiKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAoIXdlYjNfdXRpbHNfMS5kZWZhdWx0LmlzQWRkcmVzcyhhZGRyZXNzKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5JbnZhbGlkQWRkcmVzc0Vycm9yKGFkZHJlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkcmVzcyA9IHdlYjNfdXRpbHNfMS5kZWZhdWx0LnRvQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgY29uc3QgYmxvY2tOdW1iZXIgPSB5aWVsZCB0aGlzLnJlZ3VsYXJpemVCbG9jayhibG9jayk7XG4gICAgICAgICAgICBjb25zdCBkZXBsb3llZEJ5dGVjb2RlID0gY29kZWNfMS5Db252ZXJzaW9uLnRvSGV4U3RyaW5nKHlpZWxkIHRoaXMuZ2V0Q29kZShhZGRyZXNzLCBibG9ja051bWJlcikpO1xuICAgICAgICAgICAgY29uc3QgY29udHJhY3RBbmRDb250ZXh0cyA9IHRoaXMuY29udHJhY3RzQW5kQ29udGV4dHMuZmluZCgoeyBkZXBsb3llZENvbnRleHQgfSkgPT4gZGVwbG95ZWRDb250ZXh0ICYmXG4gICAgICAgICAgICAgICAgY29kZWNfMS5Db250ZXh0cy5VdGlscy5tYXRjaENvbnRleHQoZGVwbG95ZWRDb250ZXh0LCBkZXBsb3llZEJ5dGVjb2RlKSk7XG4gICAgICAgICAgICBpZiAoIWNvbnRyYWN0QW5kQ29udGV4dHMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuQ29udHJhY3ROb3RGb3VuZEVycm9yKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBkZXBsb3llZEJ5dGVjb2RlLCBhZGRyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgY29udHJhY3QsIGNvbXBpbGF0aW9uSWQgfSA9IGNvbnRyYWN0QW5kQ29udGV4dHM7XG4gICAgICAgICAgICBjb25zdCBjb21waWxhdGlvbiA9IHRoaXMuY29tcGlsYXRpb25zLmZpbmQoY29tcGlsYXRpb24gPT4gY29tcGlsYXRpb24uaWQgPT09IGNvbXBpbGF0aW9uSWQpO1xuICAgICAgICAgICAgbGV0IGNvbnRyYWN0RGVjb2RlciA9IG5ldyBDb250cmFjdERlY29kZXIoY29udHJhY3QsIGNvbXBpbGF0aW9uLCB0aGlzKTsgLy9ubyBhcnRpZmFjdFxuICAgICAgICAgICAgLy8oYXJ0aWZhY3QgaXMgb25seSB1c2VkIGZvciBhZGRyZXNzIGF1dG9kZXRlY3Rpb24sIGFuZCBoZXJlIHdlJ3JlIHN1cHBseWluZyB0aGVcbiAgICAgICAgICAgIC8vYWRkcmVzcywgc28gdGhpcyB3b24ndCBjYXVzZSBhbnkgcHJvYmxlbXMpXG4gICAgICAgICAgICB5aWVsZCBjb250cmFjdERlY29kZXIuaW5pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIGNvbnRyYWN0RGVjb2Rlci5mb3JJbnN0YW5jZShhZGRyZXNzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgYXJlIGludGVuZGVkIGZvciBpbnRlcm5hbCB1c2Ugb25seVxuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBnZXRSZWZlcmVuY2VEZWNsYXJhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmVyZW5jZURlY2xhcmF0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGdldFVzZXJEZWZpbmVkVHlwZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJEZWZpbmVkVHlwZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBnZXRBbGxvY2F0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxsb2NhdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBnZXRQcm92aWRlckFkYXB0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyQWRhcHRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGdldEVuc1NldHRpbmdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnNTZXR0aW5ncztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGdldERlcGxveWVkQ29udGV4dHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlcGxveWVkQ29udGV4dHM7XG4gICAgfVxufVxuZXhwb3J0cy5Qcm9qZWN0RGVjb2RlciA9IFByb2plY3REZWNvZGVyO1xuLyoqXG4gKiBUaGUgQ29udHJhY3REZWNvZGVyIGNsYXNzLiAgRGVjb2RlcyByZXR1cm4gdmFsdWVzLCBhbmQgc3Bhd25zIHRoZVxuICogW1tDb250cmFjdEluc3RhbmNlRGVjb2Rlcl1dIGNsYXNzLiAgQWxzbywgZGVjb2RlcyB0cmFuc2FjdGlvbnMgbG9ncy4gIFNlZVxuICogYmVsb3cgZm9yIGEgbWV0aG9kIGxpc3RpbmcuXG4gKiBAY2F0ZWdvcnkgRGVjb2RlclxuICovXG5jbGFzcyBDb250cmFjdERlY29kZXIge1xuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb250cmFjdCwgY29tcGlsYXRpb24sIHByb2plY3REZWNvZGVyLCBhcnRpZmFjdCkge1xuICAgICAgICB0aGlzLmFydGlmYWN0ID0gYXJ0aWZhY3Q7IC8vbWF5IGJlIHVuZGVmaW5lZDsgb25seSB1c2VkIGZvciBhZGRyZXNzIGF1dG9kZXRlY3Rpb24gaW4gaW5zdGFuY2UgZGVjb2RlclxuICAgICAgICB0aGlzLmNvbnRyYWN0ID0gY29udHJhY3Q7XG4gICAgICAgIHRoaXMuY29tcGlsYXRpb24gPSBjb21waWxhdGlvbjtcbiAgICAgICAgdGhpcy5wcm9qZWN0RGVjb2RlciA9IHByb2plY3REZWNvZGVyO1xuICAgICAgICB0aGlzLnByb3ZpZGVyQWRhcHRlciA9IHByb2plY3REZWNvZGVyLmdldFByb3ZpZGVyQWRhcHRlcigpO1xuICAgICAgICB0aGlzLmNvbnRleHRzID0gcHJvamVjdERlY29kZXIuZ2V0RGVwbG95ZWRDb250ZXh0cygpO1xuICAgICAgICB0aGlzLnVzZXJEZWZpbmVkVHlwZXMgPSB0aGlzLnByb2plY3REZWNvZGVyLmdldFVzZXJEZWZpbmVkVHlwZXMoKTtcbiAgICAgICAgdGhpcy5jb250cmFjdE5vZGUgPSBjb2RlY18xLkNvbXBpbGF0aW9ucy5VdGlscy5nZXRDb250cmFjdE5vZGUodGhpcy5jb250cmFjdCwgdGhpcy5jb21waWxhdGlvbik7XG4gICAgICAgIHRoaXMuYWxsb2NhdGlvbnMgPSB0aGlzLnByb2plY3REZWNvZGVyLmdldEFsbG9jYXRpb25zKCk7XG4gICAgICAgIC8vbm90ZTogb3JkaW5hcmlseSB0aGlzLmNvbnRyYWN0LmRlcGxveWVkQnl0ZWNvZGUgc2hvdWxkIGVxdWFsIGFydGlmYWN0LmRlcGxveWVkQnl0ZWNvZGVcbiAgICAgICAgLy9hdCB0aGlzIHBvaW50LCBzbyBpdCBtYXkgc2VlbSBzdHJhbmdlIHRoYXQgSSdtIHVzaW5nIHRoaXMgbG9uZ2VyIHZlcnNpb24gKGJ1dCBub3RcbiAgICAgICAgLy9kb2luZyBhbnl0aGluZyB0byBoYW5kbGUgdGhlIGNhc2Ugd2UncmUgdGhlcmUgbm90KS4gIFRoaXMgaXMgYmFzaWNhbGx5IGJlY2F1c2UgSSBkb24ndFxuICAgICAgICAvL3RoaW5rIHN1Y2ggZXJyb3IgaGFuZGxpbmcgaXMgcmVhbGx5IG5lY2Vzc2FyeSByaWdodCBub3csIGJ1dCB0aGlzIHdheSBhdCBsZWFzdCBpdCB3b24ndFxuICAgICAgICAvL2NyYXNoLlxuICAgICAgICBpZiAodGhpcy5jb250cmFjdC5kZXBsb3llZEJ5dGVjb2RlICYmXG4gICAgICAgICAgICB0aGlzLmNvbnRyYWN0LmRlcGxveWVkQnl0ZWNvZGUgIT09IFwiMHhcIikge1xuICAgICAgICAgICAgY29uc3QgdW5ub3JtYWxpemVkQ29udGV4dCA9IGNvZGVjXzEuQ29udGV4dHMuVXRpbHMubWFrZUNvbnRleHQodGhpcy5jb250cmFjdCwgdGhpcy5jb250cmFjdE5vZGUsIHRoaXMuY29tcGlsYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0SGFzaCA9IHVubm9ybWFsaXplZENvbnRleHQuY29udGV4dDtcbiAgICAgICAgICAgIC8vd2Ugbm93IHRocm93IGF3YXkgdGhlIHVubm9ybWFsaXplZCBjb250ZXh0LCBpbnN0ZWFkIGZldGNoaW5nIHRoZSBjb3JyZWN0IG9uZSBmcm9tXG4gICAgICAgICAgICAvL3RoaXMuY29udGV4dHMgKHdoaWNoIGlzIG5vcm1hbGl6ZWQpIHZpYSB0aGUgY29udGV4dCBnZXR0ZXIgYmVsb3dcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vaWYgdGhlcmUncyBubyBieXRlY29kZSwgYWxsb2NhdGUgb3V0cHV0IGRhdGEgaW4gQUJJIG1vZGUgYW55d2F5XG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VEZWNsYXJhdGlvbnMgPSB0aGlzLnByb2plY3REZWNvZGVyLmdldFJlZmVyZW5jZURlY2xhcmF0aW9ucygpO1xuICAgICAgICAgICAgY29uc3QgY29tcGlsZXIgPSB0aGlzLmNvbXBpbGF0aW9uLmNvbXBpbGVyIHx8IHRoaXMuY29udHJhY3QuY29tcGlsZXI7XG4gICAgICAgICAgICB0aGlzLm5vQnl0ZWNvZGVBbGxvY2F0aW9ucyA9IE9iamVjdC52YWx1ZXMoY29kZWNfMS5BYmlEYXRhLkFsbG9jYXRlLmdldENhbGxkYXRhQWxsb2NhdGlvbnMoW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWJpOiBBYmkubm9ybWFsaXplKHRoaXMuY29udHJhY3QuYWJpKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGlsYXRpb25JZDogdGhpcy5jb21waWxhdGlvbi5pZCxcbiAgICAgICAgICAgICAgICAgICAgY29tcGlsZXIsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0Tm9kZTogdGhpcy5jb250cmFjdE5vZGUsXG4gICAgICAgICAgICAgICAgICAgIGRlcGxveWVkQ29udGV4dDogY29kZWNfMS5Db250ZXh0cy5VdGlscy5tYWtlQ29udGV4dChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29udHJhY3QpLCB7IGRlcGxveWVkQnl0ZWNvZGU6IFwiMHhcIiAvL29ubHkgdGltZSB0aGlzIHNob3VsZCBldmVyIGFwcGVhciBpbiBhIGNvbnRleHQhXG4gICAgICAgICAgICAgICAgICAgICB9KSwgdGhpcy5jb250cmFjdE5vZGUsIHRoaXMuY29tcGlsYXRpb24pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSwgcmVmZXJlbmNlRGVjbGFyYXRpb25zLCB0aGlzLnVzZXJEZWZpbmVkVHlwZXMsIHRoaXMuYWxsb2NhdGlvbnMuYWJpKS5mdW5jdGlvbkFsbG9jYXRpb25zKVswXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb250cmFjdE5vZGUpIHtcbiAgICAgICAgICAgIC8vbm90ZTogdGhlcmUgdXNlZCB0byBiZSBjb2RlIGhlcmUgdG8gZG8gc3RhdGUgYWxsb2NhdGlvbnMgZm9yIHRoZSBjb250cmFjdCxcbiAgICAgICAgICAgIC8vYnV0IG5vdyB0aGUgcHJvamVjdCBkZWNvZGVyIGRvZXMgdGhpcyBhbGwgdXAtZnJvbnRcbiAgICAgICAgICAgIC8vKEkgY291bGQgY2hhbmdlIHRoaXMgYmFjayBpZiBmb3Igc29tZSByZWFzb24gcGVyZm9ybWFuY2UgaXMgYW4gaXNzdWUsXG4gICAgICAgICAgICAvL2J1dCB0aGlzIHdheSBpcyBzaW1wbGVyIFRCSClcbiAgICAgICAgICAgIC8vTk9URTogZG9lcyB0aGlzIGNoYW5nZSBtYWtlIHRoaXMgaW50ZXJtZWRpYXRlIGNsYXNzIGVzc2VudGlhbGx5IHBvaW50bGVzcz9cbiAgICAgICAgICAgIC8vWWVzLiAgQnV0IG5vdCBnb2luZyB0byBnZXQgcmlkIG9mIGl0IG5vdyFcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG9jYXRpb25zLnN0YXRlW3RoaXMuY29tcGlsYXRpb24uaWRdICYmXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxvY2F0aW9ucy5zdGF0ZVt0aGlzLmNvbXBpbGF0aW9uLmlkXVt0aGlzLmNvbnRyYWN0Tm9kZS5pZF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlVmFyaWFibGVSZWZlcmVuY2VzID0gdGhpcy5hbGxvY2F0aW9ucy5zdGF0ZVt0aGlzLmNvbXBpbGF0aW9uLmlkXVt0aGlzLmNvbnRyYWN0Tm9kZS5pZF0ubWVtYmVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vaWYgaXQgZG9lc24ndCBleGlzdCwgd2Ugd2lsbCBsZWF2ZSBpdCB1bmRlZmluZWQsIGFuZCB0aGVuIHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuXG4gICAgICAgICAgICAvL3dlIGF0dGVtcHQgdG8gZGVjb2RlXG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGluaXQoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyYWN0TmV0d29yayA9IHlpZWxkIHRoaXMucHJvdmlkZXJBZGFwdGVyLmdldE5ldHdvcmtJZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGNvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRzW3RoaXMuY29udGV4dEhhc2hdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAqKlRoaXMgbWV0aG9kIGlzIGFzeW5jaHJvbm91cy4qKlxuICAgICAqXG4gICAgICogRGVjb2RlcyB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgY2FsbC4gIFJldHVybiB2YWx1ZXMgY2FuIGJlIGFtYmlndW91cywgc28gdGhpcyBzb1xuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBhcnJheSBvZiBbW1JldHVybmRhdGFEZWNvZGluZ3xSZXR1cm5kYXRhRGVjb2RpbmdzXV0uXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgcmV0dXJuIHZhbHVlcyBhcmUgZGVjb2RlZCBpbiBzdHJpY3QgbW9kZSwgc28gbm9uZSBvZiB0aGUgZGVjb2RpbmdzIHNob3VsZFxuICAgICAqIGNvbnRhaW4gZXJyb3JzOyBpZiBhIGRlY29kaW5nIHdvdWxkIGNvbnRhaW4gYW4gZXJyb3IsIGluc3RlYWQgaXQgaXMgc2ltcGx5IGV4Y2x1ZGVkIGZyb20gdGhlXG4gICAgICogbGlzdCBvZiBwb3NzaWJsZSBkZWNvZGluZ3MuXG4gICAgICpcbiAgICAgKiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgcG9zc2libGUgZGVjb2RpbmdzLCB0aGV5IHdpbGwgYWx3YXlzIGJlIGxpc3RlZCBpbiB0aGUgZm9sbG93aW5nIG9yZGVyOlxuICAgICAqIDEuIFRoZSBkZWNvZGVkIHJldHVybiB2YWx1ZSBmcm9tIGEgc3VjY2Vzc2Z1bCBjYWxsLlxuICAgICAqIDIuIFRoZSBkZWNvZGVkIHJldmVydCBtZXNzYWdlIGZyb20gYSBjYWxsIHRoYXQgcmV2ZXJ0ZWQgd2l0aCBhIG1lc3NhZ2UuXG4gICAgICogMy4gQSBkZWNvZGluZyBpbmRpY2F0aW5nIHRoYXQgdGhlIGNhbGwgcmV2ZXJ0ZWQgd2l0aCBubyBtZXNzYWdlLlxuICAgICAqIDQuIEEgZGVjb2RpbmcgaW5kaWNhdGluZyB0aGF0IHRoZSBjYWxsIHNlbGYtZGVzdHJ1Y3RlZC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gY2hlY2sgdGhlIGtpbmQgYW5kIGZpZWxkIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gdGhlc2UuXG4gICAgICpcbiAgICAgKiBJZiBubyBwb3NzaWJsZSBkZWNvZGluZ3MgYXJlIGZvdW5kLCB0aGUgcmV0dXJuZWQgYXJyYXkgb2YgZGVjb2RpbmdzIHdpbGwgYmUgZW1wdHkuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgZGlmZmVyZW50IGRlY29kaW5ncyBtYXkgdXNlIGRpZmZlcmVudCBkZWNvZGluZyBtb2Rlcy5cbiAgICAgKlxuICAgICAqIERlY29kaW5nIGNyZWF0aW9uIGNhbGxzIHdpdGggdGhpcyBtZXRob2QgaXMgbm90IHN1cHBvcnRlZC4gIElmIHlvdSBzaW1wbHlcbiAgICAgKiB3YW50IHRvIGRlY29kZSBhIHJldmVydCBtZXNzYWdlIGZyb20gYW4gYXJiaXRyYXJ5IGNhbGwgdGhhdCB5b3Uga25vd1xuICAgICAqIGZhaWxlZCwgeW91IG1heSBhbHNvIHdhbnQgdG8gc2VlIHRoZSBbW2RlY29kZVJldmVydF1dIGZ1bmN0aW9uIGluXG4gICAgICogYEB0cnVmZmxlL2NvZGVjYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhYmkgVGhlIGFiaSBlbnRyeSBmb3IgdGhlIGZ1bmN0aW9uIGNhbGwgd2hvc2UgcmV0dXJuIHZhbHVlIGlzIGJlaW5nIGRlY29kZWQuXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdG8gYmUgZGVjb2RlZCwgYXMgYSBoZXggc3RyaW5nIChiZWdpbm5pbmcgd2l0aCBcIjB4XCIpLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucywgc3VjaCBhcyB0aGUgYmxvY2sgdGhlIGNhbGwgb2NjdXJyZWQgaW4uXG4gICAgICogICBTZWUgW1tSZXR1cm5PcHRpb25zXV0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgZGVjb2RlUmV0dXJuVmFsdWUoYWJpLCBkYXRhLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmRlY29kZVJldHVyblZhbHVlV2l0aEFkZGl0aW9uYWxDb250ZXh0cyhhYmksIGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGRlY29kZVJldHVyblZhbHVlV2l0aEFkZGl0aW9uYWxDb250ZXh0cyhhYmksIGRhdGEsIG9wdGlvbnMgPSB7fSwgYWRkaXRpb25hbENvbnRleHRzID0ge30pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGFiaSA9IEFiaS5ub3JtYWxpemVFbnRyeShhYmkpOyAvL2p1c3QgdG8gYmUgYWJzb2x1dGVseSBjZXJ0YWluIVxuICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBvcHRpb25zLmJsb2NrICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJsb2NrIDogXCJsYXRlc3RcIjtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5yZWd1bGFyaXplQmxvY2soYmxvY2spO1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gb3B0aW9ucy5zdGF0dXM7IC8vdHJ1ZSwgZmFsc2UsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBjb2RlY18xLkFiaURhdGEuVXRpbHMuYWJpU2VsZWN0b3IoYWJpKTtcbiAgICAgICAgICAgIGxldCBhbGxvY2F0aW9uO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dEhhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFsbG9jYXRpb24gPSB0aGlzLmFsbG9jYXRpb25zLmNhbGxkYXRhLmZ1bmN0aW9uQWxsb2NhdGlvbnNbdGhpcy5jb250ZXh0SGFzaF1bc2VsZWN0b3JdLm91dHB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFsbG9jYXRpb24gPSB0aGlzLm5vQnl0ZWNvZGVBbGxvY2F0aW9uc1tzZWxlY3Rvcl0ub3V0cHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVidWcoXCJ0aGlzLmFsbG9jYXRpb25zOiAlT1wiLCB0aGlzLmFsbG9jYXRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gY29kZWNfMS5Db252ZXJzaW9uLnRvQnl0ZXMoZGF0YSk7XG4gICAgICAgICAgICBjb25zdCBpbmZvID0ge1xuICAgICAgICAgICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2U6IHt9LFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5kYXRhOiBieXRlc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXNlckRlZmluZWRUeXBlczogdGhpcy51c2VyRGVmaW5lZFR5cGVzLFxuICAgICAgICAgICAgICAgIGFsbG9jYXRpb25zOiB0aGlzLmFsbG9jYXRpb25zLFxuICAgICAgICAgICAgICAgIGNvbnRleHRzOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29udGV4dHMpLCBhZGRpdGlvbmFsQ29udGV4dHMpLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRDb250ZXh0OiB0aGlzLmNvbnRleHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBkZWNvZGVyID0gY29kZWNfMS5kZWNvZGVSZXR1cm5kYXRhKGluZm8sIGFsbG9jYXRpb24sIHN0YXR1cyk7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZGVjb2Rlci5uZXh0KCk7XG4gICAgICAgICAgICB3aGlsZSAocmVzdWx0LmRvbmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSByZXN1bHQudmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAocmVxdWVzdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb2RlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHlpZWxkIHRoaXMuZ2V0Q29kZShyZXF1ZXN0LmFkZHJlc3MsIGJsb2NrTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAvL25vdCB3cml0aW5nIGEgc3RvcmFnZSBjYXNlIGFzIGl0IHNob3VsZG4ndCBvY2N1ciBoZXJlIVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQgPSBkZWNvZGVyLm5leHQocmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9hdCB0aGlzIHBvaW50LCByZXN1bHQudmFsdWUgaG9sZHMgdGhlIGZpbmFsIHZhbHVlXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogKipUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMuKipcbiAgICAgKlxuICAgICAqIENvbnN0cnVjdHMgYSBjb250cmFjdCBpbnN0YW5jZSBkZWNvZGVyIGZvciBhIGdpdmVuIGluc3RhbmNlIG9mIHRoaXMgY29udHJhY3QuXG4gICAgICogQHBhcmFtIGFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IGluc3RhbmNlIGRlY29kZS4gIElmIGxlZnQgb3V0LCBpdCB3aWxsIGJlIGF1dG9kZXRlY3RlZC5cbiAgICAgKiAgIElmIGFuIGludmFsaWQgYWRkcmVzcyBpcyBwcm92aWRlZCwgdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24uXG4gICAgICovXG4gICAgZm9ySW5zdGFuY2UoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IGluc3RhbmNlRGVjb2RlciA9IG5ldyBDb250cmFjdEluc3RhbmNlRGVjb2Rlcih0aGlzLCBhZGRyZXNzKTtcbiAgICAgICAgICAgIHlpZWxkIGluc3RhbmNlRGVjb2Rlci5pbml0KCk7XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VEZWNvZGVyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0Q29kZShhZGRyZXNzLCBibG9jaykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMucHJvamVjdERlY29kZXIuZ2V0Q29kZShhZGRyZXNzLCBibG9jayk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWd1bGFyaXplQmxvY2soYmxvY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnByb2plY3REZWNvZGVyLnJlZ3VsYXJpemVCbG9jayhibG9jayk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAqKlRoaXMgbWV0aG9kIGlzIGFzeW5jaHJvbm91cy4qKlxuICAgICAqXG4gICAgICogU2VlIFtbUHJvamVjdERlY29kZXIuZGVjb2RlVHJhbnNhY3Rpb25dXS5cbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb24gVGhlIHRyYW5zYWN0aW9uIHRvIGJlIGRlY29kZWQuXG4gICAgICovXG4gICAgZGVjb2RlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnByb2plY3REZWNvZGVyLmRlY29kZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzLioqXG4gICAgICpcbiAgICAgKiBTZWUgW1tQcm9qZWN0RGVjb2Rlci5kZWNvZGVMb2ddXS5cbiAgICAgKiBAcGFyYW0gbG9nIFRoZSBsb2cgdG8gYmUgZGVjb2RlZC5cbiAgICAgKi9cbiAgICBkZWNvZGVMb2cobG9nLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnByb2plY3REZWNvZGVyLmRlY29kZUxvZyhsb2csIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogKipUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMuKipcbiAgICAgKlxuICAgICAqIFNlZSBbW1Byb2plY3REZWNvZGVyLmV2ZW50c11dLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFVzZWQgdG8gZGV0ZXJtaW5lIHdoYXQgZXZlbnRzIHRvIGZldGNoIGFuZCBob3cgdG8gZGVjb2RlIHRoZW07XG4gICAgICogICBzZWUgdGhlIGRvY3VtZW50YXRpb24gb24gdGhlIEV2ZW50T3B0aW9ucyB0eXBlIGZvciBtb3JlLlxuICAgICAqL1xuICAgIGV2ZW50cyhvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnByb2plY3REZWNvZGVyLmV2ZW50cyhvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlZSBbW1Byb2plY3REZWNvZGVyLmFiaWZ5Q2FsbGRhdGFEZWNvZGluZ11dLlxuICAgICAqL1xuICAgIGFiaWZ5Q2FsbGRhdGFEZWNvZGluZyhkZWNvZGluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0RGVjb2Rlci5hYmlmeUNhbGxkYXRhRGVjb2RpbmcoZGVjb2RpbmcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWUgW1tQcm9qZWN0RGVjb2Rlci5hYmlmeUxvZ0RlY29kaW5nXV0uXG4gICAgICovXG4gICAgYWJpZnlMb2dEZWNvZGluZyhkZWNvZGluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0RGVjb2Rlci5hYmlmeUxvZ0RlY29kaW5nKGRlY29kaW5nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VlIFtbUHJvamVjdERlY29kZXIuYWJpZnlSZXR1cm5kYXRhRGVjb2RpbmddXS5cbiAgICAgKi9cbiAgICBhYmlmeVJldHVybmRhdGFEZWNvZGluZyhkZWNvZGluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0RGVjb2Rlci5hYmlmeVJldHVybmRhdGFEZWNvZGluZyhkZWNvZGluZyk7XG4gICAgfVxuICAgIC8vdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgYXJlIGZvciBpbnRlcm5hbCB1c2VcbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgZ2V0QWxsb2NhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsbG9jYXRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgZ2V0U3RhdGVWYXJpYWJsZVJlZmVyZW5jZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlVmFyaWFibGVSZWZlcmVuY2VzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgZ2V0UHJvamVjdERlY29kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2plY3REZWNvZGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgZ2V0Q29udHJhY3RJbmZvKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tcGlsYXRpb246IHRoaXMuY29tcGlsYXRpb24sXG4gICAgICAgICAgICBjb250cmFjdDogdGhpcy5jb250cmFjdCxcbiAgICAgICAgICAgIGFydGlmYWN0OiB0aGlzLmFydGlmYWN0LFxuICAgICAgICAgICAgY29udHJhY3ROb2RlOiB0aGlzLmNvbnRyYWN0Tm9kZSxcbiAgICAgICAgICAgIGNvbnRyYWN0TmV0d29yazogdGhpcy5jb250cmFjdE5ldHdvcmssXG4gICAgICAgICAgICBjb250ZXh0SGFzaDogdGhpcy5jb250ZXh0SGFzaFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuQ29udHJhY3REZWNvZGVyID0gQ29udHJhY3REZWNvZGVyO1xuLyoqXG4gKiBUaGUgQ29udHJhY3RJbnN0YW5jZURlY29kZXIgY2xhc3MuICBEZWNvZGVzIHN0b3JhZ2UgZm9yIGEgc3BlY2lmaWVkXG4gKiBpbnN0YW5jZS4gIEFsc28sIGRlY29kZXMgdHJhbnNhY3Rpb25zLCBsb2dzLCBhbmQgcmV0dXJuIHZhbHVlcy4gIFNlZSBiZWxvd1xuICogZm9yIGEgbWV0aG9kIGxpc3RpbmcuXG4gKlxuICogTm90ZSB0aGF0IHdoZW4gdXNpbmcgdGhpcyBjbGFzcyB0byBkZWNvZGUgdHJhbnNhY3Rpb25zLCBsb2dzLCBhbmQgcmV0dXJuXG4gKiB2YWx1ZXMsIGl0IGRvZXMgaGF2ZSBvbmUgYWR2YW50YWdlIG92ZXIgdXNpbmcgdGhlIFByb2plY3REZWNvZGVyIG9yXG4gKiBDb250cmFjdERlY29kZXIuICBJZiB0aGUgYXJ0aWZhY3QgZm9yIHRoZSBjbGFzcyBkb2VzIG5vdCBoYXZlIGFcbiAqIGRlcGxveWVkQnl0ZWNvZGUgZmllbGQsIHRoZSBQcm9qZWN0RGVjb2RlciAoYW5kIHRoZXJlZm9yZSBhbHNvIHRoZVxuICogQ29udHJhY3REZWNvZGVyKSB3aWxsIG5vdCBiZSBhYmxlIHRvIHRlbGwgdGhhdCB0aGlzIGluc3RhbmNlIGlzIG9mIHRoYXRcbiAqIGNsYXNzLCBhbmQgc28gd2lsbCBmYWlsIHRvIGRlY29kZSB0cmFuc2FjdGlvbnMgc2VudCB0byBpdCBvciBsb2dzXG4gKiBvcmlnaW5hdGluZyBmcm9tIGl0LCBhbmQgd2lsbCBmYWxsIGJhY2sgdG8gQUJJIG1vZGUgd2hlbiBkZWNvZGluZyByZXR1cm5cbiAqIHZhbHVlcyByZWNlaXZlZCBmcm9tIGl0LiAgSG93ZXZlciwgdGhlIENvbnRyYWN0SW5zdGFuY2VEZWNvZGVyIGhhcyB0aGF0XG4gKiBpbmZvcm1hdGlvbiBhbmQgd2lsbCBtYWtlIHVzZSBvZiBpdCwgbWFraW5nIGl0IHBvc3NpYmxlIGZvciBpdCB0byBkZWNvZGVcbiAqIHRyYW5zYWN0aW9ucyBzZW50IHRvIHRoaXMgaW5zdGFuY2UsIG9yIGxvZ3Mgb3JpZ2luYXRpbmcgZnJvbSBpdCwgb3IgZGVjb2RlXG4gKiByZXR1cm4gdmFsdWVzIHJlY2VpdmVkIGZyb20gaXQgaW4gZnVsbCBtb2RlLCBldmVuIGlmIHRoZSBkZXBsb3llZEJ5dGVjb2RlXG4gKiBmaWVsZCBpcyBtaXNzc2luZy5cbiAqIEBjYXRlZ29yeSBEZWNvZGVyXG4gKi9cbmNsYXNzIENvbnRyYWN0SW5zdGFuY2VEZWNvZGVyIHtcbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29udHJhY3REZWNvZGVyLCBhZGRyZXNzKSB7XG4gICAgICAgIHRoaXMuY29udGV4dHMgPSB7fTsgLy9kZXBsb3llZCBjb250ZXh0cyBvbmx5XG4gICAgICAgIHRoaXMuYWRkaXRpb25hbENvbnRleHRzID0ge307IC8vZm9yIHBhc3NpbmcgdG8gcHJvamVjdCBkZWNvZGVyIHdoZW4gY29udHJhY3QgaGFzIG5vIGRlcGxveWVkQnl0ZWNvZGVcbiAgICAgICAgdGhpcy5tYXBwaW5nS2V5cyA9IFtdO1xuICAgICAgICB0aGlzLnN0b3JhZ2VDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLmNvbnRyYWN0RGVjb2RlciA9IGNvbnRyYWN0RGVjb2RlcjtcbiAgICAgICAgdGhpcy5wcm9qZWN0RGVjb2RlciA9IHRoaXMuY29udHJhY3REZWNvZGVyLmdldFByb2plY3REZWNvZGVyKCk7XG4gICAgICAgIHRoaXMucHJvdmlkZXJBZGFwdGVyID0gdGhpcy5wcm9qZWN0RGVjb2Rlci5nZXRQcm92aWRlckFkYXB0ZXIoKTtcbiAgICAgICAgaWYgKGFkZHJlc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCF3ZWIzX3V0aWxzXzEuZGVmYXVsdC5pc0FkZHJlc3MoYWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSW52YWxpZEFkZHJlc3NFcnJvcihhZGRyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29udHJhY3RBZGRyZXNzID0gd2ViM191dGlsc18xLmRlZmF1bHQudG9DaGVja3N1bUFkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWZlcmVuY2VEZWNsYXJhdGlvbnMgPSB0aGlzLnByb2plY3REZWNvZGVyLmdldFJlZmVyZW5jZURlY2xhcmF0aW9ucygpO1xuICAgICAgICB0aGlzLnVzZXJEZWZpbmVkVHlwZXMgPSB0aGlzLnByb2plY3REZWNvZGVyLmdldFVzZXJEZWZpbmVkVHlwZXMoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0cyA9IHRoaXMucHJvamVjdERlY29kZXIuZ2V0RGVwbG95ZWRDb250ZXh0cygpO1xuICAgICAgICBsZXQgYXJ0aWZhY3Q7XG4gICAgICAgICh7XG4gICAgICAgICAgICBjb21waWxhdGlvbjogdGhpcy5jb21waWxhdGlvbixcbiAgICAgICAgICAgIGNvbnRyYWN0OiB0aGlzLmNvbnRyYWN0LFxuICAgICAgICAgICAgYXJ0aWZhY3QsXG4gICAgICAgICAgICBjb250cmFjdE5vZGU6IHRoaXMuY29udHJhY3ROb2RlLFxuICAgICAgICAgICAgY29udHJhY3ROZXR3b3JrOiB0aGlzLmNvbnRyYWN0TmV0d29yayxcbiAgICAgICAgICAgIGNvbnRleHRIYXNoOiB0aGlzLmNvbnRleHRIYXNoXG4gICAgICAgIH0gPSB0aGlzLmNvbnRyYWN0RGVjb2Rlci5nZXRDb250cmFjdEluZm8oKSk7XG4gICAgICAgIHRoaXMuYWxsb2NhdGlvbnMgPSB0aGlzLmNvbnRyYWN0RGVjb2Rlci5nZXRBbGxvY2F0aW9ucygpO1xuICAgICAgICB0aGlzLnN0YXRlVmFyaWFibGVSZWZlcmVuY2VzID0gdGhpcy5jb250cmFjdERlY29kZXIuZ2V0U3RhdGVWYXJpYWJsZVJlZmVyZW5jZXMoKTtcbiAgICAgICAgLy9ub3RlIHRoYXQgaWYgd2UncmUgaW4gdGhlIG51bGwgYXJ0aWZhY3QgY2FzZSwgdGhpcy5jb250cmFjdEFkZHJlc3Mgc2hvdWxkIGhhdmVcbiAgICAgICAgLy9iZWVuIHNldCBieSBub3csIHNvIHdlIHNob3VsZG4ndCBlbmQgdXAgaGVyZVxuICAgICAgICBpZiAodGhpcy5jb250cmFjdEFkZHJlc3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jb250cmFjdEFkZHJlc3MgPSBhcnRpZmFjdC5uZXR3b3Jrc1t0aGlzLmNvbnRyYWN0TmV0d29ya10uYWRkcmVzcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbXBpbGVyID0gdGhpcy5jb21waWxhdGlvbi5jb21waWxlciB8fCB0aGlzLmNvbnRyYWN0LmNvbXBpbGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgaW5pdCgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJhY3RDb2RlID0gY29kZWNfMS5Db252ZXJzaW9uLnRvSGV4U3RyaW5nKHlpZWxkIHRoaXMuZ2V0Q29kZSh0aGlzLmNvbnRyYWN0QWRkcmVzcywgeWllbGQgdGhpcy5wcm92aWRlckFkYXB0ZXIuZ2V0QmxvY2tOdW1iZXIoKSAvL25vdCBcImxhdGVzdFwiIGJlY2F1c2UgcmVndWxhcml6ZWRcbiAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgY29uc3QgZGVwbG95ZWRCeXRlY29kZSA9IGNvbXBpbGVfY29tbW9uXzEuU2hpbXMuTmV3VG9MZWdhY3kuZm9yQnl0ZWNvZGUodGhpcy5jb250cmFjdC5kZXBsb3llZEJ5dGVjb2RlKTtcbiAgICAgICAgICAgIGlmICghZGVwbG95ZWRCeXRlY29kZSB8fCBkZXBsb3llZEJ5dGVjb2RlID09PSBcIjB4XCIpIHtcbiAgICAgICAgICAgICAgICAvL2lmIHRoaXMgY29udHJhY3QgZG9lcyAqbm90KiBoYXZlIHRoZSBkZXBsb3llZEJ5dGVjb2RlIGZpZWxkLCB0aGVuIHRoZSBkZWNvZGVyIGNvcmVcbiAgICAgICAgICAgICAgICAvL2hhcyBubyB3YXkgb2Yga25vd2luZyB0aGF0IGNvbnRyYWN0cyBvciBmdW5jdGlvbiBwb2ludGVycyB3aXRoIGl0cyBhZGRyZXNzXG4gICAgICAgICAgICAgICAgLy9hcmUgb2YgaXRzIGNsYXNzOyB0aGlzIGlzIGFuIGVzcGVjaWFsIHByb2JsZW0gZm9yIGZ1bmN0aW9uIHBvaW50ZXJzLCBhcyBpdFxuICAgICAgICAgICAgICAgIC8vd29uJ3QgYmUgYWJsZSB0byBkZXRlcm1pbmUgd2hhdCB0aGUgc2VsZWN0b3IgcG9pbnRzIHRvLlxuICAgICAgICAgICAgICAgIC8vc28sIHRvIGdldCBhcm91bmQgdGhpcywgd2UgbWFrZSBhbiBcImFkZGl0aW9uYWwgY29udGV4dFwiIGZvciB0aGUgY29udHJhY3QsXG4gICAgICAgICAgICAgICAgLy9iYXNlZCBvbiBpdHMgKmFjdHVhbCogZGVwbG95ZWQgYnl0ZWNvZGUgYXMgcHVsbGVkIGZyb20gdGhlIGJsb2NrY2hhaW4uXG4gICAgICAgICAgICAgICAgLy9UaGlzIHdheSB0aGUgZGVjb2RlciBjb3JlIGNhbiByZWNvZ25pemUgdGhlIGFkZHJlc3MgYXMgdGhlIGNsYXNzLCB3aXRob3V0IHVzIGhhdmluZ1xuICAgICAgICAgICAgICAgIC8vdG8gbWFrZSBzZXJpb3VzIG1vZGlmaWNhdGlvbnMgdG8gY29udHJhY3QgZGVjb2RpbmcuICBBbmQgd2hpbGUgc3VyZSB0aGlzIHJlcXVpcmVzXG4gICAgICAgICAgICAgICAgLy9hIGxpdHRsZSBtb3JlIHdvcmssIEkgbWVhbiwgaXQncyBhbGwgY2FjaGVkLCBzbywgbm8gYmlnIGRlYWwuXG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJhY3RXaXRoQ29kZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb250cmFjdCksIHsgZGVwbG95ZWRCeXRlY29kZTogdGhpcy5jb250cmFjdENvZGUgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZXh0cmFDb250ZXh0ID0gY29kZWNfMS5Db250ZXh0cy5VdGlscy5tYWtlQ29udGV4dChjb250cmFjdFdpdGhDb2RlLCB0aGlzLmNvbnRyYWN0Tm9kZSwgdGhpcy5jb21waWxhdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0SGFzaCA9IGV4dHJhQ29udGV4dC5jb250ZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkaXRpb25hbENvbnRleHRzID0geyBbZXh0cmFDb250ZXh0LmNvbnRleHRdOiBleHRyYUNvbnRleHQgfTtcbiAgICAgICAgICAgICAgICAvL3RoZSBmb2xsb3dpbmcgbGluZSBvbmx5IGhhcyBhbnkgZWZmZWN0IGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGxpYnJhcnksXG4gICAgICAgICAgICAgICAgLy9zaW5jZSB0aGUgY29kZSB3ZSBwdWxsZWQgZnJvbSB0aGUgYmxvY2tjaGFpbiBvYnZpb3VzbHkgZG9lcyBub3QgaGF2ZSB1bnJlc29sdmVkIGxpbmsgcmVmZXJlbmNlcyFcbiAgICAgICAgICAgICAgICAvLyhpdCdzIG5vdCBzdHJpY3RseSBuZWNlc3NhcnkgZXZlbiB0aGVuLCBidXQsIGhleSwgd2h5IG5vdD8pXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRpdGlvbmFsQ29udGV4dHMgPSBjb2RlY18xLkNvbnRleHRzLlV0aWxzLm5vcm1hbGl6ZUNvbnRleHRzKHRoaXMuYWRkaXRpb25hbENvbnRleHRzKTtcbiAgICAgICAgICAgICAgICAvL2FnYWluLCBzaW5jZSB0aGUgY29kZSBkaWQgbm90IGhhdmUgdW5yZXNvbHZlZCBsaW5rIHJlZmVyZW5jZXMsIGl0IGlzIHNhZmUgdG8ganVzdFxuICAgICAgICAgICAgICAgIC8vbWFzaCB0aGVzZSB0b2dldGhlciBsaWtlIEknbSBhYm91dCB0b1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29udGV4dHMpLCB0aGlzLmFkZGl0aW9uYWxDb250ZXh0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2ZpbmFsbHk6IHNldCB1cCBpbnRlcm5hbCBmdW5jdGlvbnMgdGFibGUgKG9ubHkgaWYgc291cmNlIG9yZGVyIGlzIHJlbGlhYmxlO1xuICAgICAgICAgICAgLy9vdGhlcndpc2UgbGVhdmUgYXMgdW5kZWZpbmVkKVxuICAgICAgICAgICAgLy91bmxpa2UgdGhlIGRlYnVnZ2VyLCB3ZSBkb24ndCAqZGVtYW5kKiBhbiBhbnN3ZXIsIHNvIHdlIHdvbid0IHNldCB1cFxuICAgICAgICAgICAgLy9zb21lIHNvcnQgb2YgZmFrZSB0YWJsZSBpZiB3ZSBkb24ndCBoYXZlIGEgc291cmNlIG1hcCwgb3IgaWYgYW55IEFTVHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgIC8vKGlmIGEgd2hvbGUgKnNvdXJjZSogaXMgbWlzc2luZywgd2UnbGwgY29uc2lkZXIgdGhhdCBPSylcbiAgICAgICAgICAgIC8vbm90ZTogd2UgZG9uJ3QgYXR0ZW1wdCB0byBoYW5kbGUgVnlwZXIgc291cmNlIG1hcHMhXG4gICAgICAgICAgICBjb25zdCBjb21waWxlciA9IHRoaXMuY29tcGlsYXRpb24uY29tcGlsZXIgfHwgdGhpcy5jb250cmFjdC5jb21waWxlcjtcbiAgICAgICAgICAgIGlmICghdGhpcy5jb21waWxhdGlvbi51bnJlbGlhYmxlU291cmNlT3JkZXIgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyYWN0LmRlcGxveWVkU291cmNlTWFwICYmXG4gICAgICAgICAgICAgICAgY29tcGlsZXIubmFtZSA9PT0gXCJzb2xjXCIgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBpbGF0aW9uLnNvdXJjZXMuZXZlcnkoc291cmNlID0+ICFzb3VyY2UgfHwgc291cmNlLmFzdCkpIHtcbiAgICAgICAgICAgICAgICAvL1dBUk5JTkc6IHVudHlwZWQgY29kZSBpbiB0aGlzIGJsb2NrIVxuICAgICAgICAgICAgICAgIGxldCBhc3RzID0gdGhpcy5jb21waWxhdGlvbi5zb3VyY2VzLm1hcChzb3VyY2UgPT4gc291cmNlID8gc291cmNlLmFzdCA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgbGV0IGluc3RydWN0aW9ucyA9IFNvdXJjZU1hcFV0aWxzLmdldFByb2Nlc3NlZEluc3RydWN0aW9uc0ZvckJpbmFyeSh0aGlzLmNvbXBpbGF0aW9uLnNvdXJjZXMubWFwKHNvdXJjZSA9PiBzb3VyY2UgPyBzb3VyY2Uuc291cmNlIDogdW5kZWZpbmVkKSwgdGhpcy5jb250cmFjdENvZGUsIFNvdXJjZU1hcFV0aWxzLmdldEh1bWFuUmVhZGFibGVTb3VyY2VNYXAodGhpcy5jb250cmFjdC5kZXBsb3llZFNvdXJjZU1hcCkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcyBjYW4gZmFpbCBpZiBzb21lIG9mIHRoZSBzb3VyY2UgZmlsZXMgYXJlIG1pc3NpbmcgOihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbEZ1bmN0aW9uc1RhYmxlID0gU291cmNlTWFwVXRpbHMuZ2V0RnVuY3Rpb25zQnlQcm9ncmFtQ291bnRlcihpbnN0cnVjdGlvbnMsIGFzdHMsIGFzdHMubWFwKFNvdXJjZU1hcFV0aWxzLm1ha2VPdmVybGFwRnVuY3Rpb24pLCB0aGlzLmNvbXBpbGF0aW9uLmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy9qdXN0IGxlYXZlIHRoZSBpbnRlcm5hbCBmdW5jdGlvbnMgdGFibGUgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGNvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRzW3RoaXMuY29udGV4dEhhc2hdO1xuICAgIH1cbiAgICBjaGVja0FsbG9jYXRpb25TdWNjZXNzKCkge1xuICAgICAgICBpZiAoIXRoaXMuY29udHJhY3ROb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuQ29udHJhY3RCZWluZ0RlY29kZWRIYXNOb05vZGVFcnJvcih0aGlzLmNvbnRyYWN0LmNvbnRyYWN0TmFtZSwgdGhpcy5jb21waWxhdGlvbi5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlVmFyaWFibGVSZWZlcmVuY2VzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuQ29udHJhY3RBbGxvY2F0aW9uRmFpbGVkRXJyb3IodGhpcy5jb250cmFjdE5vZGUuaWQsIHRoaXMuY29udHJhY3QuY29udHJhY3ROYW1lLCB0aGlzLmNvbXBpbGF0aW9uLmlkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWNvZGVWYXJpYWJsZSh2YXJpYWJsZSwgYmxvY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZToge30sXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGNvZGVjXzEuQ29udmVyc2lvbi50b0J5dGVzKHRoaXMuY29udHJhY3RDb2RlKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFwcGluZ0tleXM6IHRoaXMubWFwcGluZ0tleXMsXG4gICAgICAgICAgICAgICAgdXNlckRlZmluZWRUeXBlczogdGhpcy51c2VyRGVmaW5lZFR5cGVzLFxuICAgICAgICAgICAgICAgIGFsbG9jYXRpb25zOiB0aGlzLmFsbG9jYXRpb25zLFxuICAgICAgICAgICAgICAgIGNvbnRleHRzOiB0aGlzLmNvbnRleHRzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRDb250ZXh0OiB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxGdW5jdGlvbnNUYWJsZTogdGhpcy5pbnRlcm5hbEZ1bmN0aW9uc1RhYmxlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVidWcoXCJ0aGlzLmNvbnRleHRIYXNoOiAlc1wiLCB0aGlzLmNvbnRleHRIYXNoKTtcbiAgICAgICAgICAgIGNvbnN0IGRlY29kZXIgPSBDb2RlYy5kZWNvZGVWYXJpYWJsZSh2YXJpYWJsZS5kZWZpbml0aW9uLCB2YXJpYWJsZS5wb2ludGVyLCBpbmZvLCB0aGlzLmNvbXBpbGF0aW9uLmlkKTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBkZWNvZGVyLm5leHQoKTtcbiAgICAgICAgICAgIHdoaWxlIChyZXN1bHQuZG9uZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVxdWVzdCA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChyZXF1ZXN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0b3JhZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0geWllbGQgdGhpcy5nZXRTdG9yYWdlKHRoaXMuY29udHJhY3RBZGRyZXNzLCByZXF1ZXN0LnNsb3QsIGJsb2NrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY29kZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLmdldENvZGUocmVxdWVzdC5hZGRyZXNzLCBibG9jayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZGVjb2Rlci5uZXh0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vYXQgdGhpcyBwb2ludCwgcmVzdWx0LnZhbHVlIGhvbGRzIHRoZSBmaW5hbCB2YWx1ZVxuICAgICAgICAgICAgZGVidWcoXCJkZWZpbmVkSW46ICVvXCIsIHZhcmlhYmxlLmRlZmluZWRJbik7XG4gICAgICAgICAgICBsZXQgY2xhc3NUeXBlID0gY29kZWNfMS5Bc3QuSW1wb3J0LmRlZmluaXRpb25Ub1N0b3JlZFR5cGUodmFyaWFibGUuZGVmaW5lZEluLCB0aGlzLmNvbXBpbGF0aW9uLmlkLCB0aGlzLmNvbXBpbGVyKTsgLy9jYW4gc2tpcCByZWZlcmVuY2UgZGVjbHNcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogdmFyaWFibGUuZGVmaW5pdGlvbi5uYW1lLFxuICAgICAgICAgICAgICAgIGNsYXNzOiBjbGFzc1R5cGUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC52YWx1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzLioqXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzdGF0ZSBvZiB0aGUgY29udHJhY3QsIGJ1dCBkb2VzIG5vdCBpbmNsdWRlXG4gICAgICogaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN0b3JhZ2Ugb3IgZGVjb2RlZCB2YXJpYWJsZXMuICBTZWUgdGhlIGRvY3VtZW50YXRpb25cbiAgICAgKiBmb3IgdGhlIFtbQ29udHJhY3RTdGF0ZV1dIHR5cGUgZm9yIG1vcmUuXG4gICAgICogQHBhcmFtIGJsb2NrIFRoZSBibG9jayB0byBpbnNwZWN0IHRoZSBjb250cmFjdCdzIHN0YXRlIGF0LiAgRGVmYXVsdHMgdG8gbGF0ZXN0LlxuICAgICAqICAgU2VlIFtbQmxvY2tTcGVjaWZpZXJdXSBmb3IgbGVnYWwgdmFsdWVzLlxuICAgICAqL1xuICAgIHN0YXRlKGJsb2NrID0gXCJsYXRlc3RcIikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5yZWd1bGFyaXplQmxvY2soYmxvY2spO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjbGFzczogY29kZWNfMS5Db250ZXh0cy5JbXBvcnQuY29udGV4dFRvVHlwZSh0aGlzLmNvbnRleHQpLFxuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuY29udHJhY3RBZGRyZXNzLFxuICAgICAgICAgICAgICAgIGNvZGU6IHRoaXMuY29udHJhY3RDb2RlLFxuICAgICAgICAgICAgICAgIGJhbGFuY2VBc0JOOiBuZXcgYm5fanNfMS5kZWZhdWx0KHlpZWxkIHRoaXMucHJvdmlkZXJBZGFwdGVyLmdldEJhbGFuY2UodGhpcy5jb250cmFjdEFkZHJlc3MsIGJsb2NrTnVtYmVyKSksXG4gICAgICAgICAgICAgICAgbm9uY2VBc0JOOiBuZXcgYm5fanNfMS5kZWZhdWx0KHlpZWxkIHRoaXMucHJvdmlkZXJBZGFwdGVyLmdldFRyYW5zYWN0aW9uQ291bnQodGhpcy5jb250cmFjdEFkZHJlc3MsIGJsb2NrTnVtYmVyKSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAqKlRoaXMgbWV0aG9kIGlzIGFzeW5jaHJvbm91cy4qKlxuICAgICAqXG4gICAgICogRGVjb2RlcyB0aGUgY29udHJhY3QncyB2YXJpYWJsZXM7IHJldHVybnMgYW4gYXJyYXkgb2YgdGhlc2UgZGVjb2RlZCB2YXJpYWJsZXMuXG4gICAgICogU2VlIHRoZSBkb2N1bWVudGF0aW9uIG9mIHRoZSBbW0RlY29kZWRWYXJpYWJsZV1dIHR5cGUgZm9yIG1vcmUuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdmFyaWFibGUgZGVjb2RpbmcgY2FuIG9ubHkgb3BlcmF0ZSBpbiBmdWxsIG1vZGU7IGlmIHRoZSBkZWNvZGVyIHdhc24ndCBhYmxlIHRvXG4gICAgICogc3RhcnQgdXAgaW4gZnVsbCBtb2RlLCB0aGlzIG1ldGhvZCB3aWxsIHRocm93IGEgW1tDb250cmFjdEFsbG9jYXRpb25GYWlsZWRFcnJvcl1dLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGRlY29kaW5nIG1hcHBpbmdzIHJlcXVpcmVzIGZpcnN0IHdhdGNoaW5nIG1hcHBpbmcga2V5cyBpbiBvcmRlciB0byBnZXQgYW55IHJlc3VsdHM7XG4gICAgICogc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciBbW3dhdGNoTWFwcGluZ0tleV1dLlxuICAgICAqIEFkZGl0aW9uYWwgbWV0aG9kcyB0byBtYWtlIG1hcHBpbmcgZGVjb2RpbmcgYSBsZXNzIG1hbnVhbCBhZmZhaXIgYXJlIHBsYW5uZWQgZm9yIHRoZSBmdXR1cmUuXG4gICAgICpcbiAgICAgKiBBbHNvLCBkdWUgdG8gYSB0ZWNobmljYWwgbGltaXRhdGlvbiwgaXQgaXMgbm90IGN1cnJlbnRseSBwb3NzaWJsZSB0b1xuICAgICAqIHVzZWZ1bGx5IGRlY29kZSBpbnRlcm5hbCBmdW5jdGlvbiBwb2ludGVycy4gIFNlZSB0aGVcbiAgICAgKiBbW0Zvcm1hdC5WYWx1ZXMuRnVuY3Rpb25JbnRlcm5hbFZhbHVlfEZ1bmN0aW9uSW50ZXJuYWxWYWx1ZV1dXG4gICAgICogZG9jdW1lbnRhdGlvbiBhbmQgdGhlIFJFQURNRSBmb3IgbW9yZSBvbiBob3cgdGhlc2UgYXJlIGhhbmRsZWQuXG4gICAgICogQHBhcmFtIGJsb2NrIFRoZSBibG9jayB0byBpbnNwZWN0IHRoZSBjb250cmFjdCdzIHN0YXRlIGF0LiAgRGVmYXVsdHMgdG8gbGF0ZXN0LlxuICAgICAqICAgU2VlIFtbQmxvY2tTcGVjaWZpZXJdXSBmb3IgbGVnYWwgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhcmlhYmxlcyhibG9jayA9IFwibGF0ZXN0XCIpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tBbGxvY2F0aW9uU3VjY2VzcygpO1xuICAgICAgICAgICAgbGV0IGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5yZWd1bGFyaXplQmxvY2soYmxvY2spO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB0aGlzLnN0YXRlVmFyaWFibGVSZWZlcmVuY2VzKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJhYm91dCB0byBkZWNvZGUgJXNcIiwgdmFyaWFibGUuZGVmaW5pdGlvbi5uYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWNvZGVkVmFyaWFibGUgPSB5aWVsZCB0aGlzLmRlY29kZVZhcmlhYmxlKHZhcmlhYmxlLCBibG9ja051bWJlcik7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJkZWNvZGVkXCIpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRlY29kZWRWYXJpYWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogKipUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMuKipcbiAgICAgKlxuICAgICAqIERlY29kZXMgYW4gaW5kaXZpZHVhbCBjb250cmFjdCB2YXJpYWJsZTsgcmV0dXJucyBpdHMgdmFsdWUgYXMgYVxuICAgICAqIFtbRm9ybWF0LlZhbHVlcy5SZXN1bHR8UmVzdWx0XV0uICBTZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yXG4gICAgICogW1t2YXJpYWJsZXN8dmFyaWFibGVzKCldXSBmb3IgdmFyaW91cyBjYXZlYXRzIHRoYXQgYWxzbyBhcHBseSBoZXJlLlxuICAgICAqXG4gICAgICogSWYgdGhlIHZhcmlhYmxlIGNhbid0IGJlIGxvY2F0ZWQsIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICogQHBhcmFtIG5hbWVPcklkIFRoZSBuYW1lIChvciBudW1lcmljIElELCBpZiB5b3Uga25vdyB0aGF0KSBvZiB0aGVcbiAgICAgKiAgIHZhcmlhYmxlLiAgQ2FuIGJlIGdpdmVuIGFzIGEgcXVhbGlmaWVkIG5hbWUsIGFsbG93aW5nIG9uZSB0byBnZXQgYXRcbiAgICAgKiAgIHNoYWRvd2VkIHZhcmlhYmxlcyBmcm9tIGJhc2UgY29udHJhY3RzLiAgSWYgZ2l2ZW4gYnkgSUQsIGNhbiBiZSBnaXZlbiBhcyBhXG4gICAgICogICBudW1iZXIgb3IgbnVtZXJpYyBzdHJpbmcuXG4gICAgICogQHBhcmFtIGJsb2NrIFRoZSBibG9jayB0byBpbnNwZWN0IHRoZSBjb250cmFjdCdzIHN0YXRlIGF0LiAgRGVmYXVsdHMgdG8gbGF0ZXN0LlxuICAgICAqICAgU2VlIFtbQmxvY2tTcGVjaWZpZXJdXSBmb3IgbGVnYWwgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlIENvbnNpZGVyIGEgY29udHJhY3QgYERlcml2ZWRgIGluaGVyaXRpbmcgZnJvbSBhIGNvbnRyYWN0IGBCYXNlYC5cbiAgICAgKiAgIFN1cHBvc2UgYERlcml2ZWRgIGhhcyBhIHZhcmlhYmxlIGB4YCBhbmQgYEJhc2VgIGhhcyB2YXJpYWJsZXMgYHhgIGFuZFxuICAgICAqICAgYHlgLiAgT25lIGNhbiBhY2Nlc3MgYERlcml2ZWQueGAgYXMgYHZhcmlhYmxlKFwieFwiKWAgb3JcbiAgICAgKiAgIGB2YXJpYWJsZShcIkRlcml2ZWQueFwiKWAsIGNhbiBhY2Nlc3MgYEJhc2UueGAgYXMgYHZhcmlhYmxlKFwiQmFzZS54XCIpYCxcbiAgICAgKiAgIGFuZCBjYW4gYWNjZXNzIGBCYXNlLnlgIGFzIGB2YXJpYWJsZShcInlcIilgIG9yIGB2YXJpYWJsZShcIkJhc2UueVwiKWAuXG4gICAgICovXG4gICAgdmFyaWFibGUobmFtZU9ySWQsIGJsb2NrID0gXCJsYXRlc3RcIikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy5jaGVja0FsbG9jYXRpb25TdWNjZXNzKCk7XG4gICAgICAgICAgICBsZXQgYmxvY2tOdW1iZXIgPSB5aWVsZCB0aGlzLnJlZ3VsYXJpemVCbG9jayhibG9jayk7XG4gICAgICAgICAgICBsZXQgdmFyaWFibGUgPSB0aGlzLmZpbmRWYXJpYWJsZUJ5TmFtZU9ySWQobmFtZU9ySWQpO1xuICAgICAgICAgICAgaWYgKHZhcmlhYmxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvL2lmIHVzZXIgcHV0IGluIGEgYmFkIG5hbWVcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVmFyaWFibGVOb3RGb3VuZEVycm9yKG5hbWVPcklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoeWllbGQgdGhpcy5kZWNvZGVWYXJpYWJsZSh2YXJpYWJsZSwgYmxvY2tOdW1iZXIpKS52YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZpbmRWYXJpYWJsZUJ5TmFtZU9ySWQobmFtZU9ySWQpIHtcbiAgICAgICAgLy9jYXNlIDE6IGFuIElEIHdhcyBpbnB1dFxuICAgICAgICBpZiAodHlwZW9mIG5hbWVPcklkID09PSBcIm51bWJlclwiIHx8IG5hbWVPcklkLm1hdGNoKC9bMC05XSsvKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVWYXJpYWJsZVJlZmVyZW5jZXMuZmluZCgoeyBkZWZpbml0aW9uIH0pID0+IGRlZmluaXRpb24uaWQgPT09IG5hbWVPcklkKTtcbiAgICAgICAgICAgIC8vdGhlcmUgc2hvdWxkIGJlIGV4YWN0bHkgb25lOyByZXR1cm5zIHVuZGVmaW5lZCBpZiBub25lXG4gICAgICAgIH1cbiAgICAgICAgLy9jYXNlIDI6IGEgbmFtZSB3YXMgaW5wdXRcbiAgICAgICAgZWxzZSBpZiAoIW5hbWVPcklkLmluY2x1ZGVzKFwiLlwiKSkge1xuICAgICAgICAgICAgLy93ZSB3YW50IHRvIHNlYXJjaCAqYmFja3dhcmRzKiwgdG8gZ2V0IG1vc3QgZGVyaXZlZCB2ZXJzaW9uO1xuICAgICAgICAgICAgLy93ZSB1c2Ugc2xpY2UoKS5yZXZlcnNlKCkgdG8gY2xvbmUgYmVmb3JlIHJldmVyc2luZyBzaW5jZSByZXZlcnNlIG1vZGlmaWVzXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZVZhcmlhYmxlUmVmZXJlbmNlc1xuICAgICAgICAgICAgICAgIC5zbGljZSgpXG4gICAgICAgICAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAgICAgICAgIC5maW5kKCh7IGRlZmluaXRpb24gfSkgPT4gZGVmaW5pdGlvbi5uYW1lID09PSBuYW1lT3JJZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9jYXNlIDM6IGEgcXVhbGlmaWVkIG5hbWUgd2FzIGlucHV0XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IFtjbGFzc05hbWUsIHZhcmlhYmxlTmFtZV0gPSBuYW1lT3JJZC5zcGxpdChcIi5cIik7XG4gICAgICAgICAgICAvL2FnYWluLCB3ZSdsbCBzZWFyY2ggYmFja3dhcmRzLCBhbHRob3VnaCwgdWhoaC4uLj9cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlVmFyaWFibGVSZWZlcmVuY2VzXG4gICAgICAgICAgICAgICAgLnNsaWNlKClcbiAgICAgICAgICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgICAgICAgICAgLmZpbmQoKHsgZGVmaW5pdGlvbiwgZGVmaW5lZEluIH0pID0+IGRlZmluaXRpb24ubmFtZSA9PT0gdmFyaWFibGVOYW1lICYmIGRlZmluZWRJbi5uYW1lID09PSBjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFN0b3JhZ2UoYWRkcmVzcywgc2xvdCwgYmxvY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vaWYgcGVuZGluZywgYnlwYXNzIHRoZSBjYWNoZVxuICAgICAgICAgICAgaWYgKGJsb2NrID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2RlY18xLkNvbnZlcnNpb24udG9CeXRlcyh5aWVsZCB0aGlzLnByb3ZpZGVyQWRhcHRlci5nZXRTdG9yYWdlQXQoYWRkcmVzcywgc2xvdCwgYmxvY2spLCBDb2RlYy5Fdm0uVXRpbHMuV09SRF9TSVpFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vb3RoZXJ3aXNlLCBzdGFydCBieSBzZXR0aW5nIHVwIGFueSBwcmVsaW1pbmFyeSBsYXllcnMgYXMgbmVlZGVkXG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yYWdlQ2FjaGVbYmxvY2tdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2VDYWNoZVtibG9ja10gPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnN0b3JhZ2VDYWNoZVtibG9ja11bYWRkcmVzc10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZUNhY2hlW2Jsb2NrXVthZGRyZXNzXSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9ub3csIGlmIHdlIGhhdmUgaXQgY2FjaGVkLCBqdXN0IHJldHVybiBpdFxuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmFnZUNhY2hlW2Jsb2NrXVthZGRyZXNzXVtzbG90LnRvU3RyaW5nKCldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlQ2FjaGVbYmxvY2tdW2FkZHJlc3NdW3Nsb3QudG9TdHJpbmcoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL290aGVyd2lzZSwgZ2V0IGl0LCBjYWNoZSBpdCwgYW5kIHJldHVybiBpdFxuICAgICAgICAgICAgbGV0IHdvcmQgPSBjb2RlY18xLkNvbnZlcnNpb24udG9CeXRlcyh5aWVsZCB0aGlzLnByb3ZpZGVyQWRhcHRlci5nZXRTdG9yYWdlQXQoYWRkcmVzcywgc2xvdCwgYmxvY2spLCBDb2RlYy5Fdm0uVXRpbHMuV09SRF9TSVpFKTtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZUNhY2hlW2Jsb2NrXVthZGRyZXNzXVtzbG90LnRvU3RyaW5nKCldID0gd29yZDtcbiAgICAgICAgICAgIHJldHVybiB3b3JkO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0Q29kZShhZGRyZXNzLCBibG9jaykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMucHJvamVjdERlY29kZXIuZ2V0Q29kZShhZGRyZXNzLCBibG9jayk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWd1bGFyaXplQmxvY2soYmxvY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnByb2plY3REZWNvZGVyLnJlZ3VsYXJpemVCbG9jayhibG9jayk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAqKlRoaXMgbWV0aG9kIGlzIGFzeW5jaHJvbm91cy4qKlxuICAgICAqXG4gICAgICogV2F0Y2hlcyBhIG1hcHBpbmcga2V5OyBhZGRzIGl0IHRvIHRoZSBkZWNvZGVyJ3MgbGlzdCBvZiB3YXRjaGVkIG1hcHBpbmdcbiAgICAgKiBrZXlzLiAgVGhpcyBhZmZlY3RzIHRoZSByZXN1bHRzIG9mIGJvdGggW1t2YXJpYWJsZXN8dmFyaWFibGVzKCldXSBhbmRcbiAgICAgKiBbW3ZhcmlhYmxlfHZhcmlhYmxlKCldXS4gIFdoZW4gYSBtYXBwaW5nIGlzIGRlY29kZWQsIG9ubHkgdGhlIHZhbHVlcyBhdFxuICAgICAqIGl0cyB3YXRjaGVkIGtleXMgd2lsbCBiZSBpbmNsdWRlZCBpbiBpdHMgdmFsdWUuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgaXQgaXMgcG9zc2libGVcbiAgICAgKiB0byB3YXRjaCBtYXBwaW5ncyB0aGF0IGFyZSBpbnNpZGUgc3RydWN0cywgYXJyYXlzLCBvdGhlciBtYXBwaW5ncywgZXRjO1xuICAgICAqIHNlZSBiZWxvdyBmb3IgbW9yZSBvbiBob3cgdG8gZG8gdGhpcy5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB3YXRjaGluZyBtYXBwaW5nIGtleXMgaXNcbiAgICAgKiBvbmx5IHBvc3NpYmxlIGluIGZ1bGwgbW9kZTsgaWYgdGhlIGRlY29kZXIgd2Fzbid0IGFibGUgdG8gc3RhcnQgdXAgaW4gZnVsbFxuICAgICAqIG1vZGUsIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uLlxuICAgICAqXG4gICAgICogKipXYXJuaW5nKio6IEF0IHRoZSBtb21lbnQsIHRoaXMgZnVuY3Rpb24gZG9lcyB2ZXJ5IGxpdHRsZSB0byBjaGVjayBpdHNcbiAgICAgKiBpbnB1dC4gIEJhZCBpbnB1dCBtYXkgaGF2ZSB1bnByZWRpY3RhYmxlIHJlc3VsdHMuICBUaGlzIHdpbGwgYmUgcmVtZWRpZWRcbiAgICAgKiBpbiB0aGUgZnV0dXJlIChieSBoYXZpbmcgaXQgdGhyb3cgZXhjZXB0aW9ucyBvbiBiYWQgaW5wdXQpLCBidXQgcmlnaHQgbm93XG4gICAgICogZXNzZW50aWFsbHkgbm8gY2hlY2tpbmcgaXMgaW1wbGVtZW50ZWQuICBBbHNvLCB0aGVyZSBtYXkgYmUgc2xpZ2h0IGNoYW5nZXNcbiAgICAgKiB0byB0aGUgZm9ybWF0IG9mIGluZGljZXMgaW4gdGhlIGZ1dHVyZS5cbiAgICAgKlxuICAgICAqIChBIGJhZCB2YXJpYWJsZSBuYW1lIHdpbGwgY2F1c2UgYW4gZXhjZXB0aW9uIHRob3VnaDsgdGhhdCBpbnB1dCBpcyBjaGVja2VkLilcbiAgICAgKiBAcGFyYW0gdmFyaWFibGUgVGhlIHZhcmlhYmxlIHRoYXQgdGhlIG1hcHBpbmcgbGl2ZXMgdW5kZXI7IHRoaXMgd29ya3MgbGlrZVxuICAgICAqICAgdGhlIG5hbWVPcklkIGFyZ3VtZW50IHRvIFtbdmFyaWFibGV8dmFyaWFibGUoKV1dLiAgSWYgdGhlIG1hcHBpbmcgaXMgYVxuICAgICAqICAgdG9wLWxldmVsIHN0YXRlIHZhcmlhYmxlLCBwdXQgdGhlIG1hcHBpbmcgaXRzZWxmIGhlcmUuICBPdGhlcndpc2UsIHB1dCB0aGVcbiAgICAgKiAgIHRvcC1sZXZlbCBzdGF0ZSB2YXJpYWJsZSBpdCBsaXZlcyB1bmRlci5cbiAgICAgKiBAcGFyYW0gaW5kaWNlcyBGdXJ0aGVyIGFyZ3VtZW50cyB0byB3YXRjaE1hcHBpbmdLZXksIGlmIGdpdmVuLCB3aWxsIGJlXG4gICAgICogICBpbnRlcnByZXRlZCBhcyBpbmRpY2VzIGludG8gb3IgbWVtYmVycyBvZiB0aGUgdmFyaWFibGUgaWRlbnRpZmllZCBieSB0aGVcbiAgICAgKiAgIHZhcmlhYmxlIGFyZ3VtZW50OyBzZWUgdGhlIGV4YW1wbGUuICBBcnJheSBpbmRpY2VzIGFuZCBtYXBwaW5nXG4gICAgICogICBrZXlzIGFyZSBzcGVjaWZpZWQgYnkgdmFsdWU7IHN0cnVjdCBtZW1iZXJzIGFyZSBzcGVjaWZpZWQgYnkgbmFtZS5cbiAgICAgKlxuICAgICAqICAgTnVtZXJpYyB2YWx1ZXMgY2FuIGJlIGdpdmVuIGFzIG51bWJlciwgQk4sIG9yXG4gICAgICogICBudW1lcmljIHN0cmluZy4gIEJ5dGVzdHJpbmcgdmFsdWVzIGFyZSBnaXZlbiBhcyBoZXggc3RyaW5ncy4gIEJvb2xlYW5cbiAgICAgKiAgIHZhbHVlcyBhcmUgZ2l2ZW4gYXMgYm9vbGVhbnMsIG9yIGFzIHRoZSBzdHJpbmdzIFwidHJ1ZVwiIG9yIFwiZmFsc2VcIi5cbiAgICAgKiAgIEFkZHJlc3MgdmFsdWVzIGFyZSBnaXZlbiBhcyBoZXggc3RyaW5nczsgdGhleSBhcmUgY3VycmVudGx5IG5vdCByZXF1aXJlZFxuICAgICAqICAgdG8gYmUgaW4gY2hlY2tzdW0gY2FzZSwgYnV0IHRoaXMgd2lsbCBsaWtlbHkgY2hhbmdlIGluIHRoZSBmdXR1cmUsIHNvXG4gICAgICogICBkb24ndCByZWx5IG9uIHRoYXQuICBDb250cmFjdCB2YWx1ZXMgd29yayBsaWtlIGFkZHJlc3MgdmFsdWVzLlxuICAgICAqICAgRW51bSB2YWx1ZXMgY2FuIGJlIGdpdmVuIGVpdGhlciBhcyBhIG51bWVyaWMgdmFsdWUgb3IgYnkgbmFtZTtcbiAgICAgKiAgIGluIHRoZSBsYXR0ZXIgY2FzZSB5b3UgY2FuIHVzZSBlaXRoZXIgYSBxdWFsaWZpZWQgbmFtZSBvciBqdXN0IHRoZVxuICAgICAqICAgbmFtZSBvZiB0aGUgb3B0aW9uIChpLmUuLCB5b3UgY2FuIGp1c3Qgd3JpdGUgYFwiT3B0aW9uXCJgIHJhdGhlciB0aGFuXG4gICAgICogICBgXCJFbnVtLk9wdGlvblwiYCBvciBgXCJDb250cmFjdC5FbnVtLk9wdGlvblwiYCwgYnV0IHRob3NlIHdpbGwgd29yayB0b28pLlxuICAgICAqXG4gICAgICogICBOb3RlIHRoYXQgaWYgdGhlIHBhdGggdG8gYSBnaXZlbiBtYXBwaW5nIGtleVxuICAgICAqICAgaW5jbHVkZXMgbWFwcGluZyBrZXlzIGFib3ZlIGl0LCBhbnkgYW5jZXN0b3JzIHdpbGwgYWxzbyBiZSB3YXRjaGVkXG4gICAgICogICBhdXRvbWF0aWNhbGx5LlxuICAgICAqIEBleGFtcGxlIEZpcnN0LCBhIHNpbXBsZSBleGFtcGxlLiAgU2F5IHdlIGhhdmUgYSBtYXBwaW5nIGBtYCBvZiB0eXBlXG4gICAgICogICBgbWFwcGluZyh1aW50ID0+IHVpbnQpYC4gIFlvdSBjb3VsZCBjYWxsIGB3YXRjaE1hcHBpbmdLZXkoXCJtXCIsIDApYCB0b1xuICAgICAqICAgd2F0Y2ggYG1bMF1gLlxuICAgICAqIEBleGFtcGxlIE5vdyBmb3IgYSBzbGlnaHRseSBtb3JlIGNvbXBsaWNhdGVkIGV4YW1wbGUuICBTYXkgYG1gIGlzIG9mIHR5cGVcbiAgICAgKiAgIGBtYXBwaW5nKHVpbnQgPT4gbWFwcGluZyh1aW50ID0+IHVpbnQpKWAsIHRoZW4gdG8gd2F0Y2ggYG1bM11bNV1gLCB5b3VcbiAgICAgKiAgIGNhbiBjYWxsIGB3YXRjaE1hcHBpbmdLZXkoXCJtXCIsIDMsIDUpYC4gIFRoaXMgd2lsbCBhbHNvIGF1dG9tYXRpY2FsbHlcbiAgICAgKiAgIHdhdGNoIGBtWzNdYDsgb3RoZXJ3aXNlLCB3YXRjaGluZyBgbVszXVs1XWAgd291bGRuJ3QgZG8gbXVjaCBvZlxuICAgICAqICAgYW55dGhpbmcuXG4gICAgICogQGV4YW1wbGUgTm93IGZvciBhIHdlbGwgbW9yZSBjb21wbGljYXRlZCBleGFtcGxlLiAgU2F5IHdlIGhhdmUgYSBzdHJ1Y3RcbiAgICAgKiAgIHR5cGUgYE1hcFN0cnVjdGAgd2l0aCBhIG1lbWJlciBjYWxsZWQgYG1hcGAgd2hpY2ggaXMgYSBgbWFwcGluZyhzdHJpbmcgPT4gc3RyaW5nKWAsXG4gICAgICogICBhbmQgc2F5IHdlIGhhdmUgYSB2YXJpYWJsZSBgYXJyYCBvZiB0eXBlIGBNYXBTdHJ1Y3RbXWAsIHRoZW4gb25lIGNvdWxkXG4gICAgICogICB3YXRjaCBgYXJyWzNdLm1hcFtcImhlbGxvXCJdYCBieSBjYWxsaW5nIGB3YXRjaE1hcHBpbmdLZXkoXCJhcnJcIiwgMywgXCJtYXBcIiwgXCJoZWxsb1wiKWAuXG4gICAgICovXG4gICAgd2F0Y2hNYXBwaW5nS2V5KHZhcmlhYmxlLCAuLi5pbmRpY2VzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrQWxsb2NhdGlvblN1Y2Nlc3MoKTtcbiAgICAgICAgICAgIGxldCB7IHNsb3QgfSA9IHlpZWxkIHRoaXMuY29uc3RydWN0U2xvdCh2YXJpYWJsZSwgLi4uaW5kaWNlcyk7XG4gICAgICAgICAgICAvL2FkZCBtYXBwaW5nIGtleSBhbmQgYWxsIGFuY2VzdG9yc1xuICAgICAgICAgICAgZGVidWcoXCJzbG90OiAlT1wiLCBzbG90KTtcbiAgICAgICAgICAgIHdoaWxlIChzbG90ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLm1hcHBpbmdLZXlzLmV2ZXJ5KGV4aXN0aW5nU2xvdCA9PiAhY29kZWNfMS5TdG9yYWdlLlV0aWxzLmVxdWFsU2xvdHMoZXhpc3RpbmdTbG90LCBzbG90KVxuICAgICAgICAgICAgICAgIC8vd2UgcHV0IHRoZSBuZXduZXNzIHJlcXVpcmVtZW50IGluIHRoZSB3aGlsZSBjb25kaXRpb24gcmF0aGVyIHRoYW4gYVxuICAgICAgICAgICAgICAgIC8vc2VwYXJhdGUgaWYgYmVjYXVzZSBpZiB3ZSBoaXQgb25lIGFuY2VzdG9yIHRoYXQncyBub3QgbmV3LCB0aGUgZnV0aGVyXG4gICAgICAgICAgICAgICAgLy9vbmVzIHdvbid0IGJlIGVpdGhlclxuICAgICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xvdC5rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvL29ubHkgYWRkIG1hcHBpbmcga2V5c1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcHBpbmdLZXlzID0gWy4uLnRoaXMubWFwcGluZ0tleXMsIHNsb3RdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzbG90ID0gc2xvdC5wYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogKipUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMuKipcbiAgICAgKlxuICAgICAqIE9wcG9zaXRlIG9mIFtbd2F0Y2hNYXBwaW5nS2V5XV07IHVud2F0Y2hlcyB0aGUgc3BlY2lmaWVkIG1hcHBpbmcga2V5LiAgU2VlXG4gICAgICogd2F0Y2hNYXBwaW5nS2V5IGZvciBtb3JlIG9uIGhvdyB3YXRjaGluZyBtYXBwaW5nIGtleXMgd29ya3MsIGFuZCBvbiBob3dcbiAgICAgKiB0aGUgcGFyYW1ldGVycyB3b3JrLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHVud2F0Y2hpbmcgYSBtYXBwaW5nIGtleSB3aWxsIGFsc28gdW53YXRjaCBhbGwgaXRzIGRlc2NlbmRhbnRzLlxuICAgICAqIEUuZy4sIGlmIGBtYCBpcyBvZiB0eXBlIGBtYXBwaW5nKHVpbnQgPT4gbWFwcGluZyh1aW50ID0+IHVpbnQpKWAsIHRoZW5cbiAgICAgKiB1bndhdGNoaW5nIGBtWzBdYCB3aWxsIGFsc28gdW53YXRjaCBgbVswXVswXWAsIGBtWzBdWzFdYCwgZXRjLCBpZiB0aGVzZVxuICAgICAqIGFyZSBjdXJyZW50bHkgd2F0Y2hlZFxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHNhbWUgY2F2ZWF0cyBhcyB3YXRjaE1hcHBpbmdLZXkuXG4gICAgICovXG4gICAgdW53YXRjaE1hcHBpbmdLZXkodmFyaWFibGUsIC4uLmluZGljZXMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tBbGxvY2F0aW9uU3VjY2VzcygpO1xuICAgICAgICAgICAgbGV0IHsgc2xvdCB9ID0geWllbGQgdGhpcy5jb25zdHJ1Y3RTbG90KHZhcmlhYmxlLCAuLi5pbmRpY2VzKTtcbiAgICAgICAgICAgIGlmIChzbG90ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vbm90IHN0cmljdGx5IG5lY2Vzc2FyeSwgYnV0IG1heSBhcyB3ZWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3JlbW92ZSBtYXBwaW5nIGtleSBhbmQgYWxsIGRlc2NlbmRhbnRzXG4gICAgICAgICAgICB0aGlzLm1hcHBpbmdLZXlzID0gdGhpcy5tYXBwaW5nS2V5cy5maWx0ZXIoZXhpc3RpbmdTbG90ID0+IHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZXhpc3RpbmdTbG90ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGVjXzEuU3RvcmFnZS5VdGlscy5lcXVhbFNsb3RzKGV4aXN0aW5nU2xvdCwgc2xvdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy9pZiBpdCBtYXRjaGVzLCByZW1vdmUgaXRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1Nsb3QgPSBleGlzdGluZ1Nsb3QucGF0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vaWYgd2UgZGlkbid0IG1hdGNoLCBrZWVwIHRoZSBrZXlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy9OT1RFOiBpZiB5b3UgZGVjaWRlIHRvIGFkZCBhIHdheSB0byByZW1vdmUgYSBtYXBwaW5nIGtleSAqd2l0aG91dCogcmVtb3ZpbmdcbiAgICAvL2FsbCBkZXNjZW5kYW50cywgeW91J2xsIG5lZWQgdG8gYWx0ZXIgd2F0Y2hNYXBwaW5nS2V5IHRvIHVzZSBhbiBpZiByYXRoZXJcbiAgICAvL3RoYW4gYSB3aGlsZVxuICAgIC8qKlxuICAgICAqICoqVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzLioqXG4gICAgICpcbiAgICAgKiBTZWUgW1tQcm9qZWN0RGVjb2Rlci5kZWNvZGVUcmFuc2FjdGlvbl1dLlxuICAgICAqL1xuICAgIGRlY29kZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm9qZWN0RGVjb2Rlci5kZWNvZGVUcmFuc2FjdGlvbldpdGhBZGRpdGlvbmFsQ29udGV4dHModHJhbnNhY3Rpb24sIHRoaXMuYWRkaXRpb25hbENvbnRleHRzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzLioqXG4gICAgICpcbiAgICAgKiBTZWUgW1tQcm9qZWN0RGVjb2Rlci5kZWNvZGVMb2ddXS5cbiAgICAgKi9cbiAgICBkZWNvZGVMb2cobG9nLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnByb2plY3REZWNvZGVyLmRlY29kZUxvZ1dpdGhBZGRpdGlvbmFsT3B0aW9ucyhsb2csIG9wdGlvbnMsIHRoaXMuYWRkaXRpb25hbENvbnRleHRzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzLioqXG4gICAgICpcbiAgICAgKiBTZWUgW1tDb250cmFjdERlY29kZXIuZGVjb2RlUmV0dXJuVmFsdWVdXS5cbiAgICAgKlxuICAgICAqIElmIHRoZSBjb250cmFjdCBhcnRpZmFjdCBpcyBtaXNzaW5nIGl0cyBieXRlY29kZSwgdXNpbmcgdGhpcyBtZXRob2QsXG4gICAgICogcmF0aGVyIHRoYW4gdGhlIG9uZSBpbiBbW0NvbnRyYWN0RGVjb2Rlcl1dLCBjYW4gc29tZXRpbWVzIHByb3ZpZGVcbiAgICAgKiBhZGRpdGlvbmFsIGRlY29kaW5nIGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIGRlY29kZVJldHVyblZhbHVlKGFiaSwgZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5jb250cmFjdERlY29kZXIuZGVjb2RlUmV0dXJuVmFsdWVXaXRoQWRkaXRpb25hbENvbnRleHRzKGFiaSwgZGF0YSwgb3B0aW9ucywgdGhpcy5hZGRpdGlvbmFsQ29udGV4dHMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VlIFtbUHJvamVjdERlY29kZXIuYWJpZnlDYWxsZGF0YURlY29kaW5nXV0uXG4gICAgICovXG4gICAgYWJpZnlDYWxsZGF0YURlY29kaW5nKGRlY29kaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2plY3REZWNvZGVyLmFiaWZ5Q2FsbGRhdGFEZWNvZGluZyhkZWNvZGluZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlZSBbW1Byb2plY3REZWNvZGVyLmFiaWZ5TG9nRGVjb2RpbmddXS5cbiAgICAgKi9cbiAgICBhYmlmeUxvZ0RlY29kaW5nKGRlY29kaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2plY3REZWNvZGVyLmFiaWZ5TG9nRGVjb2RpbmcoZGVjb2RpbmcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWUgW1tQcm9qZWN0RGVjb2Rlci5hYmlmeVJldHVybmRhdGFEZWNvZGluZ11dLlxuICAgICAqL1xuICAgIGFiaWZ5UmV0dXJuZGF0YURlY29kaW5nKGRlY29kaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2plY3REZWNvZGVyLmFiaWZ5UmV0dXJuZGF0YURlY29kaW5nKGRlY29kaW5nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogKipUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMuKipcbiAgICAgKlxuICAgICAqIFRoaXMgbW9zdGx5IGJlaGF2ZXMgYXMgW1tQcm9qZWN0RGVjb2Rlci5ldmVudHNdXS5cbiAgICAgKiBIb3dldmVyLCB1bmxpa2Ugb3RoZXIgdmFyaWFudHMgb2YgdGhpcyBmdW5jdGlvbiwgdGhpcyBvbmUsIGJ5IGRlZmF1bHQsIHJlc3RyaWN0cyB0byBldmVudHMgb3JpZ2luYXRpbmcgZnJvbSB0aGlzIGluc3RhbmNlJ3MgYWRkcmVzcy5cbiAgICAgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byByZXN0cmljdCBsaWtlIHRoYXQsIHlvdSBjYW4gZXhwbGljaXRseSB1c2UgYGFkZHJlc3M6IHVuZGVmaW5lZGAgaW4gdGhlIG9wdGlvbnMgdG8gZGlzYWJsZSB0aGlzLlxuICAgICAqIChZb3UgY2FuIGFsc28gb2YgY291cnNlIHNldCBhIGRpZmZlcmVudCBhZGRyZXNzIHRvIHJlc3RyaWN0IHRvIHRoYXQuKVxuICAgICAqIEBwYXJhbSBvcHRpb25zIFVzZWQgdG8gZGV0ZXJtaW5lIHdoYXQgZXZlbnRzIHRvIGZldGNoOyBzZWUgdGhlIGRvY3VtZW50YXRpb24gb24gdGhlIFtbRXZlbnRPcHRpb25zXV0gdHlwZSBmb3IgbW9yZS5cbiAgICAgKi9cbiAgICBldmVudHMob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm9qZWN0RGVjb2Rlci5ldmVudHNXaXRoQWRkaXRpb25hbENvbnRleHRzKE9iamVjdC5hc3NpZ24oeyBhZGRyZXNzOiB0aGlzLmNvbnRyYWN0QWRkcmVzcyB9LCBvcHRpb25zKSwgdGhpcy5hZGRpdGlvbmFsQ29udGV4dHMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy9pbiBhZGRpdGlvbiB0byByZXR1cm5pbmcgdGhlIHNsb3Qgd2Ugd2FudCwgaXQgYWxzbyByZXR1cm5zIGEgVHlwZVxuICAgIC8vdXNlZCBpbiB0aGUgcmVjdXJzaXZlIGNhbGxcbiAgICAvL0hPVyBUTyBVU0U6XG4gICAgLy92YXJpYWJsZSBtYXkgYmUgYSB2YXJpYWJsZSBpZCAobnVtYmVyIG9yIG51bWVyaWMgc3RyaW5nKSBvciBuYW1lIChzdHJpbmcpIG9yIHF1YWxpZmllZCBuYW1lIChhbHNvIHN0cmluZylcbiAgICAvL3N0cnVjdCBtZW1iZXJzIGFyZSBnaXZlbiBieSBuYW1lIChzdHJpbmcpXG4gICAgLy9hcnJheSBpbmRpY2VzIGFuZCBudW1lcmljIG1hcHBpbmcga2V5cyBtYXkgYmUgQk4sIG51bWJlciwgb3IgbnVtZXJpYyBzdHJpbmdcbiAgICAvL3N0cmluZyBtYXBwaW5nIGtleXMgc2hvdWxkIGJlIGdpdmVuIGFzIHN0cmluZ3MuIGR1aC5cbiAgICAvL2J5dGVzIG1hcHBpbmcga2V5cyBzaG91bGQgYmUgZ2l2ZW4gYXMgaGV4IHN0cmluZ3MgYmVnaW5uaW5nIHdpdGggXCIweFwiXG4gICAgLy9hZGRyZXNzIG1hcHBpbmcga2V5cyBhcmUgbGlrZSBieXRlczsgY2hlY2tzdW0gY2FzZSBpcyBub3QgcmVxdWlyZWRcbiAgICAvL2Jvb2xlYW4gbWFwcGluZyBrZXlzIG1heSBiZSBnaXZlbiBlaXRoZXIgYXMgYm9vbGVhbnMsIG9yIGFzIHN0cmluZyBcInRydWVcIiBvciBcImZhbHNlXCJcbiAgICBjb25zdHJ1Y3RTbG90KHZhcmlhYmxlLCAuLi5pbmRpY2VzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvL2Jhc2UgY2FzZTogd2UgbmVlZCB0byBsb2NhdGUgdGhlIHZhcmlhYmxlIGFuZCBpdHMgZGVmaW5pdGlvblxuICAgICAgICAgICAgaWYgKGluZGljZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFsbG9jYXRpb24gPSB0aGlzLmZpbmRWYXJpYWJsZUJ5TmFtZU9ySWQodmFyaWFibGUpO1xuICAgICAgICAgICAgICAgIGlmICghYWxsb2NhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVmFyaWFibGVOb3RGb3VuZEVycm9yKHZhcmlhYmxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGRhdGFUeXBlID0gY29kZWNfMS5Bc3QuSW1wb3J0LmRlZmluaXRpb25Ub1R5cGUoYWxsb2NhdGlvbi5kZWZpbml0aW9uLCB0aGlzLmNvbXBpbGF0aW9uLmlkLCB0aGlzLmNvbnRyYWN0LmNvbXBpbGVyLCBcInN0b3JhZ2VcIik7XG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ZXIgPSBhbGxvY2F0aW9uLnBvaW50ZXI7XG4gICAgICAgICAgICAgICAgaWYgKHBvaW50ZXIubG9jYXRpb24gIT09IFwic3RvcmFnZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaS5lLiwgaWYgaXQncyBhIGNvbnN0YW50XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHNsb3Q6IHVuZGVmaW5lZCwgdHlwZTogdW5kZWZpbmVkIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHNsb3Q6IHBvaW50ZXIucmFuZ2UuZnJvbS5zbG90LCB0eXBlOiBkYXRhVHlwZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9tYWluIGNhc2VcbiAgICAgICAgICAgIGxldCBwYXJlbnRJbmRpY2VzID0gaW5kaWNlcy5zbGljZSgwLCAtMSk7IC8vcmVtb3ZlIGxhc3QgaW5kZXhcbiAgICAgICAgICAgIGxldCB7IHNsb3Q6IHBhcmVudFNsb3QsIHR5cGU6IHBhcmVudFR5cGUgfSA9IHlpZWxkIHRoaXMuY29uc3RydWN0U2xvdCh2YXJpYWJsZSwgLi4ucGFyZW50SW5kaWNlcyk7XG4gICAgICAgICAgICBpZiAocGFyZW50U2xvdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2xvdDogdW5kZWZpbmVkLCB0eXBlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByYXdJbmRleCA9IGluZGljZXNbaW5kaWNlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGxldCBpbmRleDtcbiAgICAgICAgICAgIGxldCBrZXk7XG4gICAgICAgICAgICBsZXQgc2xvdDtcbiAgICAgICAgICAgIGxldCBkYXRhVHlwZTtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyZW50VHlwZS50eXBlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd0luZGV4IGluc3RhbmNlb2YgYm5fanNfMS5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHJhd0luZGV4LmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IG5ldyBibl9qc18xLmRlZmF1bHQocmF3SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlID0gcGFyZW50VHlwZS5iYXNlVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpemUgPSBjb2RlY18xLlN0b3JhZ2UuQWxsb2NhdGUuc3RvcmFnZVNpemUoZGF0YVR5cGUsIHRoaXMudXNlckRlZmluZWRUeXBlcywgdGhpcy5hbGxvY2F0aW9ucy5zdG9yYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb2RlY18xLlN0b3JhZ2UuVXRpbHMuaXNXb3Jkc0xlbmd0aChzaXplKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgc2xvdDogdW5kZWZpbmVkLCB0eXBlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzbG90ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogcGFyZW50U2xvdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogaW5kZXgubXVsbihzaXplLndvcmRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc2hQYXRoOiBwYXJlbnRUeXBlLmtpbmQgPT09IFwiZHluYW1pY1wiXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtYXBwaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgIGxldCBrZXlUeXBlID0gcGFyZW50VHlwZS5rZXlUeXBlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5VHlwZS50eXBlQ2xhc3MgPT09IFwiZW51bVwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlUeXBlLnR5cGVDbGFzcyA9PT0gXCJ1c2VyRGVmaW5lZFZhbHVlVHlwZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlUeXBlID0gKGNvZGVjXzEuRm9ybWF0LlR5cGVzLmZ1bGxUeXBlKGtleVR5cGUsIHRoaXMudXNlckRlZmluZWRUeXBlcykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IFV0aWxzLndyYXBFbGVtZW50YXJ5VmFsdWUocmF3SW5kZXgsIGtleVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZSA9IHBhcmVudFR5cGUudmFsdWVUeXBlO1xuICAgICAgICAgICAgICAgICAgICBzbG90ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogcGFyZW50U2xvdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogbmV3IGJuX2pzXzEuZGVmYXVsdCgwKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RydWN0XCI6XG4gICAgICAgICAgICAgICAgICAgIC8vTk9URTogZHVlIHRvIHRoZSByZWxpYW5jZSBvbiBzdG9yYWdlIGFsbG9jYXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAvL3dlIGRvbid0IG5lZWQgdG8gdXNlIGZ1bGxUeXBlIG9yIHdoYXQgaGF2ZSB5b3VcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFsbG9jYXRpb24gPSB0aGlzLmFsbG9jYXRpb25zLnN0b3JhZ2VbcGFyZW50VHlwZS5pZF0ubWVtYmVycy5maW5kKCh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gcmF3SW5kZXgpOyAvL3RoZXJlIHNob3VsZCBiZSBleGFjdGx5IG9uZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5NZW1iZXJOb3RGb3VuZEVycm9yKHJhd0luZGV4LCBwYXJlbnRUeXBlLCB2YXJpYWJsZSwgaW5kaWNlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xvdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IHBhcmVudFNsb3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgdHlwZSBjb2VyY2lvbiBoZXJlIC0tIHdlIGtub3cgc3RydWN0cyBkb24ndCBjb250YWluIGNvbnN0YW50cyBidXQgdGhlIGNvbXBpbGVyIGRvZXNuJ3RcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogYWxsb2NhdGlvbi5wb2ludGVyLnJhbmdlLmZyb20uc2xvdC5vZmZzZXQuY2xvbmUoKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZSA9IGFsbG9jYXRpb24udHlwZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgc2xvdDogdW5kZWZpbmVkLCB0eXBlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHNsb3QsIHR5cGU6IGRhdGFUeXBlIH07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29udHJhY3RJbnN0YW5jZURlY29kZXIgPSBDb250cmFjdEluc3RhbmNlRGVjb2Rlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29kZXJzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RleHRhcmVhQXV0b3NpemUuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGV4dGFyZWFBdXRvc2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGV4dGFyZWFBdXRvc2l6ZVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3ZnSWNvbi5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdmdJY29uXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNldFJlZjtcblxuLy8gVE9ETyB2NTogY29uc2lkZXIgdG8gbWFrZSBpdCBwcml2YXRlXG5mdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX01lbnVMaXN0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX01lbnVMaXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9NZW51TGlzdFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUG9wb3Zlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Qb3BvdmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Qb3BvdmVyXCIpKTsiLCJ2YXIgY2xvbmUgPSAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2xvbmVzIChjb3BpZXMpIGFuIE9iamVjdCB1c2luZyBkZWVwIGNvcHlpbmcuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBzdXBwb3J0cyBjaXJjdWxhciByZWZlcmVuY2VzIGJ5IGRlZmF1bHQsIGJ1dCBpZiB5b3UgYXJlIGNlcnRhaW5cbiAqIHRoZXJlIGFyZSBubyBjaXJjdWxhciByZWZlcmVuY2VzIGluIHlvdXIgb2JqZWN0LCB5b3UgY2FuIHNhdmUgc29tZSBDUFUgdGltZVxuICogYnkgY2FsbGluZyBjbG9uZShvYmosIGZhbHNlKS5cbiAqXG4gKiBDYXV0aW9uOiBpZiBgY2lyY3VsYXJgIGlzIGZhbHNlIGFuZCBgcGFyZW50YCBjb250YWlucyBjaXJjdWxhciByZWZlcmVuY2VzLFxuICogeW91ciBwcm9ncmFtIG1heSBlbnRlciBhbiBpbmZpbml0ZSBsb29wIGFuZCBjcmFzaC5cbiAqXG4gKiBAcGFyYW0gYHBhcmVudGAgLSB0aGUgb2JqZWN0IHRvIGJlIGNsb25lZFxuICogQHBhcmFtIGBjaXJjdWxhcmAgLSBzZXQgdG8gdHJ1ZSBpZiB0aGUgb2JqZWN0IHRvIGJlIGNsb25lZCBtYXkgY29udGFpblxuICogICAgY2lyY3VsYXIgcmVmZXJlbmNlcy4gKG9wdGlvbmFsIC0gdHJ1ZSBieSBkZWZhdWx0KVxuICogQHBhcmFtIGBkZXB0aGAgLSBzZXQgdG8gYSBudW1iZXIgaWYgdGhlIG9iamVjdCBpcyBvbmx5IHRvIGJlIGNsb25lZCB0b1xuICogICAgYSBwYXJ0aWN1bGFyIGRlcHRoLiAob3B0aW9uYWwgLSBkZWZhdWx0cyB0byBJbmZpbml0eSlcbiAqIEBwYXJhbSBgcHJvdG90eXBlYCAtIHNldHMgdGhlIHByb3RvdHlwZSB0byBiZSB1c2VkIHdoZW4gY2xvbmluZyBhbiBvYmplY3QuXG4gKiAgICAob3B0aW9uYWwgLSBkZWZhdWx0cyB0byBwYXJlbnQgcHJvdG90eXBlKS5cbiovXG5mdW5jdGlvbiBjbG9uZShwYXJlbnQsIGNpcmN1bGFyLCBkZXB0aCwgcHJvdG90eXBlKSB7XG4gIHZhciBmaWx0ZXI7XG4gIGlmICh0eXBlb2YgY2lyY3VsYXIgPT09ICdvYmplY3QnKSB7XG4gICAgZGVwdGggPSBjaXJjdWxhci5kZXB0aDtcbiAgICBwcm90b3R5cGUgPSBjaXJjdWxhci5wcm90b3R5cGU7XG4gICAgZmlsdGVyID0gY2lyY3VsYXIuZmlsdGVyO1xuICAgIGNpcmN1bGFyID0gY2lyY3VsYXIuY2lyY3VsYXJcbiAgfVxuICAvLyBtYWludGFpbiB0d28gYXJyYXlzIGZvciBjaXJjdWxhciByZWZlcmVuY2VzLCB3aGVyZSBjb3JyZXNwb25kaW5nIHBhcmVudHNcbiAgLy8gYW5kIGNoaWxkcmVuIGhhdmUgdGhlIHNhbWUgaW5kZXhcbiAgdmFyIGFsbFBhcmVudHMgPSBbXTtcbiAgdmFyIGFsbENoaWxkcmVuID0gW107XG5cbiAgdmFyIHVzZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgIT0gJ3VuZGVmaW5lZCc7XG5cbiAgaWYgKHR5cGVvZiBjaXJjdWxhciA9PSAndW5kZWZpbmVkJylcbiAgICBjaXJjdWxhciA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBkZXB0aCA9PSAndW5kZWZpbmVkJylcbiAgICBkZXB0aCA9IEluZmluaXR5O1xuXG4gIC8vIHJlY3Vyc2UgdGhpcyBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNldCBhbGxQYXJlbnRzIGFuZCBhbGxDaGlsZHJlblxuICBmdW5jdGlvbiBfY2xvbmUocGFyZW50LCBkZXB0aCkge1xuICAgIC8vIGNsb25pbmcgbnVsbCBhbHdheXMgcmV0dXJucyBudWxsXG4gICAgaWYgKHBhcmVudCA9PT0gbnVsbClcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgaWYgKGRlcHRoID09IDApXG4gICAgICByZXR1cm4gcGFyZW50O1xuXG4gICAgdmFyIGNoaWxkO1xuICAgIHZhciBwcm90bztcbiAgICBpZiAodHlwZW9mIHBhcmVudCAhPSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9XG5cbiAgICBpZiAoY2xvbmUuX19pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gW107XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzUmVnRXhwKHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IFJlZ0V4cChwYXJlbnQuc291cmNlLCBfX2dldFJlZ0V4cEZsYWdzKHBhcmVudCkpO1xuICAgICAgaWYgKHBhcmVudC5sYXN0SW5kZXgpIGNoaWxkLmxhc3RJbmRleCA9IHBhcmVudC5sYXN0SW5kZXg7XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzRGF0ZShwYXJlbnQpKSB7XG4gICAgICBjaGlsZCA9IG5ldyBEYXRlKHBhcmVudC5nZXRUaW1lKCkpO1xuICAgIH0gZWxzZSBpZiAodXNlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihwYXJlbnQpKSB7XG4gICAgICBjaGlsZCA9IG5ldyBCdWZmZXIocGFyZW50Lmxlbmd0aCk7XG4gICAgICBwYXJlbnQuY29weShjaGlsZCk7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvdG90eXBlID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHBhcmVudCk7XG4gICAgICAgIGNoaWxkID0gT2JqZWN0LmNyZWF0ZShwcm90byk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2hpbGQgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICAgIHByb3RvID0gcHJvdG90eXBlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaXJjdWxhcikge1xuICAgICAgdmFyIGluZGV4ID0gYWxsUGFyZW50cy5pbmRleE9mKHBhcmVudCk7XG5cbiAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICByZXR1cm4gYWxsQ2hpbGRyZW5baW5kZXhdO1xuICAgICAgfVxuICAgICAgYWxsUGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICBhbGxDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpIGluIHBhcmVudCkge1xuICAgICAgdmFyIGF0dHJzO1xuICAgICAgaWYgKHByb3RvKSB7XG4gICAgICAgIGF0dHJzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90bywgaSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhdHRycyAmJiBhdHRycy5zZXQgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNoaWxkW2ldID0gX2Nsb25lKHBhcmVudFtpXSwgZGVwdGggLSAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cblxuICByZXR1cm4gX2Nsb25lKHBhcmVudCwgZGVwdGgpO1xufVxuXG4vKipcbiAqIFNpbXBsZSBmbGF0IGNsb25lIHVzaW5nIHByb3RvdHlwZSwgYWNjZXB0cyBvbmx5IG9iamVjdHMsIHVzZWZ1bGwgZm9yIHByb3BlcnR5XG4gKiBvdmVycmlkZSBvbiBGTEFUIGNvbmZpZ3VyYXRpb24gb2JqZWN0IChubyBuZXN0ZWQgcHJvcHMpLlxuICpcbiAqIFVTRSBXSVRIIENBVVRJT04hIFRoaXMgbWF5IG5vdCBiZWhhdmUgYXMgeW91IHdpc2ggaWYgeW91IGRvIG5vdCBrbm93IGhvdyB0aGlzXG4gKiB3b3Jrcy5cbiAqL1xuY2xvbmUuY2xvbmVQcm90b3R5cGUgPSBmdW5jdGlvbiBjbG9uZVByb3RvdHlwZShwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICB2YXIgYyA9IGZ1bmN0aW9uICgpIHt9O1xuICBjLnByb3RvdHlwZSA9IHBhcmVudDtcbiAgcmV0dXJuIG5ldyBjKCk7XG59O1xuXG4vLyBwcml2YXRlIHV0aWxpdHkgZnVuY3Rpb25zXG5cbmZ1bmN0aW9uIF9fb2JqVG9TdHIobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufTtcbmNsb25lLl9fb2JqVG9TdHIgPSBfX29ialRvU3RyO1xuXG5mdW5jdGlvbiBfX2lzRGF0ZShvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgX19vYmpUb1N0cihvKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufTtcbmNsb25lLl9faXNEYXRlID0gX19pc0RhdGU7XG5cbmZ1bmN0aW9uIF9faXNBcnJheShvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgX19vYmpUb1N0cihvKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5jbG9uZS5fX2lzQXJyYXkgPSBfX2lzQXJyYXk7XG5cbmZ1bmN0aW9uIF9faXNSZWdFeHAobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIF9fb2JqVG9TdHIobykgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTtcbmNsb25lLl9faXNSZWdFeHAgPSBfX2lzUmVnRXhwO1xuXG5mdW5jdGlvbiBfX2dldFJlZ0V4cEZsYWdzKHJlKSB7XG4gIHZhciBmbGFncyA9ICcnO1xuICBpZiAocmUuZ2xvYmFsKSBmbGFncyArPSAnZyc7XG4gIGlmIChyZS5pZ25vcmVDYXNlKSBmbGFncyArPSAnaSc7XG4gIGlmIChyZS5tdWx0aWxpbmUpIGZsYWdzICs9ICdtJztcbiAgcmV0dXJuIGZsYWdzO1xufTtcbmNsb25lLl9fZ2V0UmVnRXhwRmxhZ3MgPSBfX2dldFJlZ0V4cEZsYWdzO1xuXG5yZXR1cm4gY2xvbmU7XG59KSgpO1xuXG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjbG9uZTtcbn1cbiIsIi8qIE1JVCBsaWNlbnNlICovXG52YXIgY29sb3JOYW1lcyA9IHJlcXVpcmUoJ2NvbG9yLW5hbWUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICBnZXRSZ2JhOiBnZXRSZ2JhLFxuICAgZ2V0SHNsYTogZ2V0SHNsYSxcbiAgIGdldFJnYjogZ2V0UmdiLFxuICAgZ2V0SHNsOiBnZXRIc2wsXG4gICBnZXRId2I6IGdldEh3YixcbiAgIGdldEFscGhhOiBnZXRBbHBoYSxcblxuICAgaGV4U3RyaW5nOiBoZXhTdHJpbmcsXG4gICByZ2JTdHJpbmc6IHJnYlN0cmluZyxcbiAgIHJnYmFTdHJpbmc6IHJnYmFTdHJpbmcsXG4gICBwZXJjZW50U3RyaW5nOiBwZXJjZW50U3RyaW5nLFxuICAgcGVyY2VudGFTdHJpbmc6IHBlcmNlbnRhU3RyaW5nLFxuICAgaHNsU3RyaW5nOiBoc2xTdHJpbmcsXG4gICBoc2xhU3RyaW5nOiBoc2xhU3RyaW5nLFxuICAgaHdiU3RyaW5nOiBod2JTdHJpbmcsXG4gICBrZXl3b3JkOiBrZXl3b3JkXG59XG5cbmZ1bmN0aW9uIGdldFJnYmEoc3RyaW5nKSB7XG4gICBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuO1xuICAgfVxuICAgdmFyIGFiYnIgPSAgL14jKFthLWZBLUYwLTldezN9KSQvLFxuICAgICAgIGhleCA9ICAvXiMoW2EtZkEtRjAtOV17Nn0pJC8sXG4gICAgICAgcmdiYSA9IC9ecmdiYT9cXChcXHMqKFsrLV0/XFxkKylcXHMqLFxccyooWystXT9cXGQrKVxccyosXFxzKihbKy1dP1xcZCspXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKSQvLFxuICAgICAgIHBlciA9IC9ecmdiYT9cXChcXHMqKFsrLV0/W1xcZFxcLl0rKVxcJVxccyosXFxzKihbKy1dP1tcXGRcXC5dKylcXCVcXHMqLFxccyooWystXT9bXFxkXFwuXSspXFwlXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKSQvLFxuICAgICAgIGtleXdvcmQgPSAvKFxcRCspLztcblxuICAgdmFyIHJnYiA9IFswLCAwLCAwXSxcbiAgICAgICBhID0gMSxcbiAgICAgICBtYXRjaCA9IHN0cmluZy5tYXRjaChhYmJyKTtcbiAgIGlmIChtYXRjaCkge1xuICAgICAgbWF0Y2ggPSBtYXRjaFsxXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICByZ2JbaV0gPSBwYXJzZUludChtYXRjaFtpXSArIG1hdGNoW2ldLCAxNik7XG4gICAgICB9XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChoZXgpKSB7XG4gICAgICBtYXRjaCA9IG1hdGNoWzFdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHJnYltpXSA9IHBhcnNlSW50KG1hdGNoLnNsaWNlKGkgKiAyLCBpICogMiArIDIpLCAxNik7XG4gICAgICB9XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChyZ2JhKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHJnYltpXSA9IHBhcnNlSW50KG1hdGNoW2kgKyAxXSk7XG4gICAgICB9XG4gICAgICBhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChwZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJnYi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgcmdiW2ldID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KG1hdGNoW2kgKyAxXSkgKiAyLjU1KTtcbiAgICAgIH1cbiAgICAgIGEgPSBwYXJzZUZsb2F0KG1hdGNoWzRdKTtcbiAgIH1cbiAgIGVsc2UgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKGtleXdvcmQpKSB7XG4gICAgICBpZiAobWF0Y2hbMV0gPT0gXCJ0cmFuc3BhcmVudFwiKSB7XG4gICAgICAgICByZXR1cm4gWzAsIDAsIDAsIDBdO1xuICAgICAgfVxuICAgICAgcmdiID0gY29sb3JOYW1lc1ttYXRjaFsxXV07XG4gICAgICBpZiAoIXJnYikge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgfVxuXG4gICBmb3IgKHZhciBpID0gMDsgaSA8IHJnYi5sZW5ndGg7IGkrKykge1xuICAgICAgcmdiW2ldID0gc2NhbGUocmdiW2ldLCAwLCAyNTUpO1xuICAgfVxuICAgaWYgKCFhICYmIGEgIT0gMCkge1xuICAgICAgYSA9IDE7XG4gICB9XG4gICBlbHNlIHtcbiAgICAgIGEgPSBzY2FsZShhLCAwLCAxKTtcbiAgIH1cbiAgIHJnYlszXSA9IGE7XG4gICByZXR1cm4gcmdiO1xufVxuXG5mdW5jdGlvbiBnZXRIc2xhKHN0cmluZykge1xuICAgaWYgKCFzdHJpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgIH1cbiAgIHZhciBoc2wgPSAvXmhzbGE/XFwoXFxzKihbKy1dP1xcZCspKD86ZGVnKT9cXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyosXFxzKihbKy1dP1tcXGRcXC5dKyklXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKS87XG4gICB2YXIgbWF0Y2ggPSBzdHJpbmcubWF0Y2goaHNsKTtcbiAgIGlmIChtYXRjaCkge1xuICAgICAgdmFyIGFscGhhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICAgICB2YXIgaCA9IHNjYWxlKHBhcnNlSW50KG1hdGNoWzFdKSwgMCwgMzYwKSxcbiAgICAgICAgICBzID0gc2NhbGUocGFyc2VGbG9hdChtYXRjaFsyXSksIDAsIDEwMCksXG4gICAgICAgICAgbCA9IHNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbM10pLCAwLCAxMDApLFxuICAgICAgICAgIGEgPSBzY2FsZShpc05hTihhbHBoYSkgPyAxIDogYWxwaGEsIDAsIDEpO1xuICAgICAgcmV0dXJuIFtoLCBzLCBsLCBhXTtcbiAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0SHdiKHN0cmluZykge1xuICAgaWYgKCFzdHJpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgIH1cbiAgIHZhciBod2IgPSAvXmh3YlxcKFxccyooWystXT9cXGQrKSg/OmRlZyk/XFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkvO1xuICAgdmFyIG1hdGNoID0gc3RyaW5nLm1hdGNoKGh3Yik7XG4gICBpZiAobWF0Y2gpIHtcbiAgICB2YXIgYWxwaGEgPSBwYXJzZUZsb2F0KG1hdGNoWzRdKTtcbiAgICAgIHZhciBoID0gc2NhbGUocGFyc2VJbnQobWF0Y2hbMV0pLCAwLCAzNjApLFxuICAgICAgICAgIHcgPSBzY2FsZShwYXJzZUZsb2F0KG1hdGNoWzJdKSwgMCwgMTAwKSxcbiAgICAgICAgICBiID0gc2NhbGUocGFyc2VGbG9hdChtYXRjaFszXSksIDAsIDEwMCksXG4gICAgICAgICAgYSA9IHNjYWxlKGlzTmFOKGFscGhhKSA/IDEgOiBhbHBoYSwgMCwgMSk7XG4gICAgICByZXR1cm4gW2gsIHcsIGIsIGFdO1xuICAgfVxufVxuXG5mdW5jdGlvbiBnZXRSZ2Ioc3RyaW5nKSB7XG4gICB2YXIgcmdiYSA9IGdldFJnYmEoc3RyaW5nKTtcbiAgIHJldHVybiByZ2JhICYmIHJnYmEuc2xpY2UoMCwgMyk7XG59XG5cbmZ1bmN0aW9uIGdldEhzbChzdHJpbmcpIHtcbiAgdmFyIGhzbGEgPSBnZXRIc2xhKHN0cmluZyk7XG4gIHJldHVybiBoc2xhICYmIGhzbGEuc2xpY2UoMCwgMyk7XG59XG5cbmZ1bmN0aW9uIGdldEFscGhhKHN0cmluZykge1xuICAgdmFyIHZhbHMgPSBnZXRSZ2JhKHN0cmluZyk7XG4gICBpZiAodmFscykge1xuICAgICAgcmV0dXJuIHZhbHNbM107XG4gICB9XG4gICBlbHNlIGlmICh2YWxzID0gZ2V0SHNsYShzdHJpbmcpKSB7XG4gICAgICByZXR1cm4gdmFsc1szXTtcbiAgIH1cbiAgIGVsc2UgaWYgKHZhbHMgPSBnZXRId2Ioc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIHZhbHNbM107XG4gICB9XG59XG5cbi8vIGdlbmVyYXRvcnNcbmZ1bmN0aW9uIGhleFN0cmluZyhyZ2IpIHtcbiAgIHJldHVybiBcIiNcIiArIGhleERvdWJsZShyZ2JbMF0pICsgaGV4RG91YmxlKHJnYlsxXSlcbiAgICAgICAgICAgICAgKyBoZXhEb3VibGUocmdiWzJdKTtcbn1cblxuZnVuY3Rpb24gcmdiU3RyaW5nKHJnYmEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPCAxIHx8IChyZ2JhWzNdICYmIHJnYmFbM10gPCAxKSkge1xuICAgICAgcmV0dXJuIHJnYmFTdHJpbmcocmdiYSwgYWxwaGEpO1xuICAgfVxuICAgcmV0dXJuIFwicmdiKFwiICsgcmdiYVswXSArIFwiLCBcIiArIHJnYmFbMV0gKyBcIiwgXCIgKyByZ2JhWzJdICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIHJnYmFTdHJpbmcocmdiYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBhbHBoYSA9IChyZ2JhWzNdICE9PSB1bmRlZmluZWQgPyByZ2JhWzNdIDogMSk7XG4gICB9XG4gICByZXR1cm4gXCJyZ2JhKFwiICsgcmdiYVswXSArIFwiLCBcIiArIHJnYmFbMV0gKyBcIiwgXCIgKyByZ2JhWzJdXG4gICAgICAgICAgICsgXCIsIFwiICsgYWxwaGEgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gcGVyY2VudFN0cmluZyhyZ2JhLCBhbHBoYSkge1xuICAgaWYgKGFscGhhIDwgMSB8fCAocmdiYVszXSAmJiByZ2JhWzNdIDwgMSkpIHtcbiAgICAgIHJldHVybiBwZXJjZW50YVN0cmluZyhyZ2JhLCBhbHBoYSk7XG4gICB9XG4gICB2YXIgciA9IE1hdGgucm91bmQocmdiYVswXS8yNTUgKiAxMDApLFxuICAgICAgIGcgPSBNYXRoLnJvdW5kKHJnYmFbMV0vMjU1ICogMTAwKSxcbiAgICAgICBiID0gTWF0aC5yb3VuZChyZ2JhWzJdLzI1NSAqIDEwMCk7XG5cbiAgIHJldHVybiBcInJnYihcIiArIHIgKyBcIiUsIFwiICsgZyArIFwiJSwgXCIgKyBiICsgXCIlKVwiO1xufVxuXG5mdW5jdGlvbiBwZXJjZW50YVN0cmluZyhyZ2JhLCBhbHBoYSkge1xuICAgdmFyIHIgPSBNYXRoLnJvdW5kKHJnYmFbMF0vMjU1ICogMTAwKSxcbiAgICAgICBnID0gTWF0aC5yb3VuZChyZ2JhWzFdLzI1NSAqIDEwMCksXG4gICAgICAgYiA9IE1hdGgucm91bmQocmdiYVsyXS8yNTUgKiAxMDApO1xuICAgcmV0dXJuIFwicmdiYShcIiArIHIgKyBcIiUsIFwiICsgZyArIFwiJSwgXCIgKyBiICsgXCIlLCBcIiArIChhbHBoYSB8fCByZ2JhWzNdIHx8IDEpICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIGhzbFN0cmluZyhoc2xhLCBhbHBoYSkge1xuICAgaWYgKGFscGhhIDwgMSB8fCAoaHNsYVszXSAmJiBoc2xhWzNdIDwgMSkpIHtcbiAgICAgIHJldHVybiBoc2xhU3RyaW5nKGhzbGEsIGFscGhhKTtcbiAgIH1cbiAgIHJldHVybiBcImhzbChcIiArIGhzbGFbMF0gKyBcIiwgXCIgKyBoc2xhWzFdICsgXCIlLCBcIiArIGhzbGFbMl0gKyBcIiUpXCI7XG59XG5cbmZ1bmN0aW9uIGhzbGFTdHJpbmcoaHNsYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBhbHBoYSA9IChoc2xhWzNdICE9PSB1bmRlZmluZWQgPyBoc2xhWzNdIDogMSk7XG4gICB9XG4gICByZXR1cm4gXCJoc2xhKFwiICsgaHNsYVswXSArIFwiLCBcIiArIGhzbGFbMV0gKyBcIiUsIFwiICsgaHNsYVsyXSArIFwiJSwgXCJcbiAgICAgICAgICAgKyBhbHBoYSArIFwiKVwiO1xufVxuXG4vLyBod2IgaXMgYSBiaXQgZGlmZmVyZW50IHRoYW4gcmdiKGEpICYgaHNsKGEpIHNpbmNlIHRoZXJlIGlzIG5vIGFscGhhIHNwZWNpZmljIHN5bnRheFxuLy8gKGh3YiBoYXZlIGFscGhhIG9wdGlvbmFsICYgMSBpcyBkZWZhdWx0IHZhbHVlKVxuZnVuY3Rpb24gaHdiU3RyaW5nKGh3YiwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBhbHBoYSA9IChod2JbM10gIT09IHVuZGVmaW5lZCA/IGh3YlszXSA6IDEpO1xuICAgfVxuICAgcmV0dXJuIFwiaHdiKFwiICsgaHdiWzBdICsgXCIsIFwiICsgaHdiWzFdICsgXCIlLCBcIiArIGh3YlsyXSArIFwiJVwiXG4gICAgICAgICAgICsgKGFscGhhICE9PSB1bmRlZmluZWQgJiYgYWxwaGEgIT09IDEgPyBcIiwgXCIgKyBhbHBoYSA6IFwiXCIpICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIGtleXdvcmQocmdiKSB7XG4gIHJldHVybiByZXZlcnNlTmFtZXNbcmdiLnNsaWNlKDAsIDMpXTtcbn1cblxuLy8gaGVscGVyc1xuZnVuY3Rpb24gc2NhbGUobnVtLCBtaW4sIG1heCkge1xuICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG1pbiwgbnVtKSwgbWF4KTtcbn1cblxuZnVuY3Rpb24gaGV4RG91YmxlKG51bSkge1xuICB2YXIgc3RyID0gbnVtLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICByZXR1cm4gKHN0ci5sZW5ndGggPCAyKSA/IFwiMFwiICsgc3RyIDogc3RyO1xufVxuXG5cbi8vY3JlYXRlIGEgbGlzdCBvZiByZXZlcnNlIGNvbG9yIG5hbWVzXG52YXIgcmV2ZXJzZU5hbWVzID0ge307XG5mb3IgKHZhciBuYW1lIGluIGNvbG9yTmFtZXMpIHtcbiAgIHJldmVyc2VOYW1lc1tjb2xvck5hbWVzW25hbWVdXSA9IG5hbWU7XG59XG4iLCJ2YXIgY29udmVyc2lvbnMgPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG52YXIgcm91dGUgPSByZXF1aXJlKCcuL3JvdXRlJyk7XG5cbnZhciBjb252ZXJ0ID0ge307XG5cbnZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cbmZ1bmN0aW9uIHdyYXBSYXcoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmbihhcmdzKTtcblx0fTtcblxuXHQvLyBwcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbmZ1bmN0aW9uIHdyYXBSb3VuZGVkKGZuKSB7XG5cdHZhciB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoYXJncykge1xuXHRcdGlmIChhcmdzID09PSB1bmRlZmluZWQgfHwgYXJncyA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZ3M7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHR9XG5cblx0XHR2YXIgcmVzdWx0ID0gZm4oYXJncyk7XG5cblx0XHQvLyB3ZSdyZSBhc3N1bWluZyB0aGUgcmVzdWx0IGlzIGFuIGFycmF5IGhlcmUuXG5cdFx0Ly8gc2VlIG5vdGljZSBpbiBjb252ZXJzaW9ucy5qczsgZG9uJ3QgdXNlIGJveCB0eXBlc1xuXHRcdC8vIGluIGNvbnZlcnNpb24gZnVuY3Rpb25zLlxuXHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Zm9yICh2YXIgbGVuID0gcmVzdWx0Lmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRyZXN1bHRbaV0gPSBNYXRoLnJvdW5kKHJlc3VsdFtpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBwcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbm1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0Y29udmVydFtmcm9tTW9kZWxdID0ge307XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2NoYW5uZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmNoYW5uZWxzfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdsYWJlbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0ubGFiZWxzfSk7XG5cblx0dmFyIHJvdXRlcyA9IHJvdXRlKGZyb21Nb2RlbCk7XG5cdHZhciByb3V0ZU1vZGVscyA9IE9iamVjdC5rZXlzKHJvdXRlcyk7XG5cblx0cm91dGVNb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAodG9Nb2RlbCkge1xuXHRcdHZhciBmbiA9IHJvdXRlc1t0b01vZGVsXTtcblxuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXSA9IHdyYXBSb3VuZGVkKGZuKTtcblx0XHRjb252ZXJ0W2Zyb21Nb2RlbF1bdG9Nb2RlbF0ucmF3ID0gd3JhcFJhdyhmbik7XG5cdH0pO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY29udmVydDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0dyb3cuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfR3JvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR3Jvd1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGlzdC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9MaXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXN0XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Nb2RhbC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vZGFsTWFuYWdlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTW9kYWxNYW5hZ2VyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX01vZGFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RhbFwiKSk7XG5cbnZhciBfTW9kYWxNYW5hZ2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RhbE1hbmFnZXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1BhcGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1BhcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYXBlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tbW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jb21tb24uZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3JlZC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBpbmtcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3BpbmsuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwdXJwbGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3B1cnBsZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZXBQdXJwbGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2RlZXBQdXJwbGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbmRpZ29cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2luZGlnby5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJsdWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2JsdWUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsaWdodEJsdWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2xpZ2h0Qmx1ZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImN5YW5cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2N5YW4uZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0ZWFsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF90ZWFsLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ3JlZW5cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2dyZWVuLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibGlnaHRHcmVlblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfbGlnaHRHcmVlbi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxpbWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2xpbWUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ5ZWxsb3dcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3llbGxvdy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFtYmVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9hbWJlci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm9yYW5nZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfb3JhbmdlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVlcE9yYW5nZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZGVlcE9yYW5nZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJyb3duXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9icm93bi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdyZXlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2dyZXkuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJibHVlR3JleVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfYmx1ZUdyZXkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfY29tbW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21tb25cIikpO1xuXG52YXIgX3JlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVkXCIpKTtcblxudmFyIF9waW5rID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9waW5rXCIpKTtcblxudmFyIF9wdXJwbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3B1cnBsZVwiKSk7XG5cbnZhciBfZGVlcFB1cnBsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZGVlcFB1cnBsZVwiKSk7XG5cbnZhciBfaW5kaWdvID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pbmRpZ29cIikpO1xuXG52YXIgX2JsdWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2JsdWVcIikpO1xuXG52YXIgX2xpZ2h0Qmx1ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGlnaHRCbHVlXCIpKTtcblxudmFyIF9jeWFuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jeWFuXCIpKTtcblxudmFyIF90ZWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90ZWFsXCIpKTtcblxudmFyIF9ncmVlbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ3JlZW5cIikpO1xuXG52YXIgX2xpZ2h0R3JlZW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpZ2h0R3JlZW5cIikpO1xuXG52YXIgX2xpbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpbWVcIikpO1xuXG52YXIgX3llbGxvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4veWVsbG93XCIpKTtcblxudmFyIF9hbWJlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYW1iZXJcIikpO1xuXG52YXIgX29yYW5nZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb3JhbmdlXCIpKTtcblxudmFyIF9kZWVwT3JhbmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9kZWVwT3JhbmdlXCIpKTtcblxudmFyIF9icm93biA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vYnJvd25cIikpO1xuXG52YXIgX2dyZXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dyZXlcIikpO1xuXG52YXIgX2JsdWVHcmV5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ibHVlR3JleVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTWVudS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9NZW51ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9NZW51XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9OYXRpdmVTZWxlY3QuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTmF0aXZlU2VsZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9OYXRpdmVTZWxlY3RcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNhcGl0YWxpemVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NhcGl0YWxpemUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVDaGFpbmVkRnVuY3Rpb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZVN2Z0ljb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWJvdW5jZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfZGVib3VuY2UuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZXByZWNhdGVkUHJvcFR5cGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2RlcHJlY2F0ZWRQcm9wVHlwZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTXVpRWxlbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaXNNdWlFbGVtZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib3duZXJEb2N1bWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfb3duZXJEb2N1bWVudC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm93bmVyV2luZG93XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9vd25lcldpbmRvdy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlcXVpcmVQcm9wRmFjdG9yeVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfcmVxdWlyZVByb3BGYWN0b3J5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2V0UmVmXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9zZXRSZWYuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1bnN1cHBvcnRlZFByb3BcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3Vuc3VwcG9ydGVkUHJvcC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZUNvbnRyb2xsZWRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3VzZUNvbnRyb2xsZWQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VFdmVudENhbGxiYWNrXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91c2VFdmVudENhbGxiYWNrLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlRm9ya1JlZlwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdXNlRm9ya1JlZi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVuc3RhYmxlX3VzZUlkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91bnN0YWJsZV91c2VJZC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZUlzRm9jdXNWaXNpYmxlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91c2VJc0ZvY3VzVmlzaWJsZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9jYXBpdGFsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jYXBpdGFsaXplXCIpKTtcblxudmFyIF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUNoYWluZWRGdW5jdGlvblwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVib3VuY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2RlYm91bmNlXCIpKTtcblxudmFyIF9kZXByZWNhdGVkUHJvcFR5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2RlcHJlY2F0ZWRQcm9wVHlwZVwiKSk7XG5cbnZhciBfaXNNdWlFbGVtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc011aUVsZW1lbnRcIikpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX293bmVyV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vd25lcldpbmRvd1wiKSk7XG5cbnZhciBfcmVxdWlyZVByb3BGYWN0b3J5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yZXF1aXJlUHJvcEZhY3RvcnlcIikpO1xuXG52YXIgX3NldFJlZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2V0UmVmXCIpKTtcblxudmFyIF91bnN1cHBvcnRlZFByb3AgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkUHJvcFwiKSk7XG5cbnZhciBfdXNlQ29udHJvbGxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXNlQ29udHJvbGxlZFwiKSk7XG5cbnZhciBfdXNlRXZlbnRDYWxsYmFjayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXNlRXZlbnRDYWxsYmFja1wiKSk7XG5cbnZhciBfdXNlRm9ya1JlZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXNlRm9ya1JlZlwiKSk7XG5cbnZhciBfdW5zdGFibGVfdXNlSWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Vuc3RhYmxlX3VzZUlkXCIpKTtcblxudmFyIF91c2VJc0ZvY3VzVmlzaWJsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXNlSXNGb2N1c1Zpc2libGVcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0FjY29yZGlvbkFjdGlvbnMuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQWNjb3JkaW9uQWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQWNjb3JkaW9uQWN0aW9uc1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQWNjb3JkaW9uRGV0YWlscy5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9BY2NvcmRpb25EZXRhaWxzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9BY2NvcmRpb25EZXRhaWxzXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9BcHBCYXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQXBwQmFyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9BcHBCYXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0JhZGdlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0JhZGdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9CYWRnZVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQmFja2Ryb3AuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQmFja2Ryb3AgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0JhY2tkcm9wXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Cb3R0b21OYXZpZ2F0aW9uQWN0aW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0JvdHRvbU5hdmlnYXRpb25BY3Rpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0JvdHRvbU5hdmlnYXRpb25BY3Rpb25cIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0JvdHRvbU5hdmlnYXRpb24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQm90dG9tTmF2aWdhdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQm90dG9tTmF2aWdhdGlvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Cb3guZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHlsZUZ1bmN0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Cb3guc3R5bGVGdW5jdGlvbjtcbiAgfVxufSk7XG5cbnZhciBfQm94ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vQm94XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9CdXR0b24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9CdXR0b25cIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NhcmQuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2FyZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2FyZFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQnV0dG9uR3JvdXAuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQnV0dG9uR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0J1dHRvbkdyb3VwXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DYXJkQWN0aW9uQXJlYS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9DYXJkQWN0aW9uQXJlYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2FyZEFjdGlvbkFyZWFcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NhcmRDb250ZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0NhcmRDb250ZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYXJkQ29udGVudFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2FyZEhlYWRlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9DYXJkSGVhZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYXJkSGVhZGVyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DYXJkTWVkaWEuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2FyZE1lZGlhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYXJkTWVkaWFcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NhcmRBY3Rpb25zLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0NhcmRBY3Rpb25zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYXJkQWN0aW9uc1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2lyY3VsYXJQcm9ncmVzcy5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9DaXJjdWxhclByb2dyZXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DaXJjdWxhclByb2dyZXNzXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DbGlja0F3YXlMaXN0ZW5lci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9DbGlja0F3YXlMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2xpY2tBd2F5TGlzdGVuZXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NvbnRhaW5lci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Db250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnRhaW5lclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ29sbGFwc2UuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ29sbGFwc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NvbGxhcHNlXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Dc3NCYXNlbGluZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Dc3NCYXNlbGluZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ3NzQmFzZWxpbmVcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RpYWxvZy5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9EaWFsb2cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RpYWxvZ1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGlhbG9nQWN0aW9ucy5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9EaWFsb2dBY3Rpb25zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EaWFsb2dBY3Rpb25zXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9EaWFsb2dDb250ZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0RpYWxvZ0NvbnRlbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RpYWxvZ0NvbnRlbnRcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RpYWxvZ0NvbnRlbnRUZXh0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0RpYWxvZ0NvbnRlbnRUZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EaWFsb2dDb250ZW50VGV4dFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGl2aWRlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9EaXZpZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EaXZpZGVyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9EaWFsb2dUaXRsZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9EaWFsb2dUaXRsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGlhbG9nVGl0bGVcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RyYXdlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9EcmF3ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RyYXdlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRXhwYW5zaW9uUGFuZWxBY3Rpb25zLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0V4cGFuc2lvblBhbmVsQWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRXhwYW5zaW9uUGFuZWxBY3Rpb25zXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9FeHBhbnNpb25QYW5lbERldGFpbHMuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfRXhwYW5zaW9uUGFuZWxEZXRhaWxzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9FeHBhbnNpb25QYW5lbERldGFpbHNcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0ZhYi5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9GYWIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ZhYlwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRXhwYW5zaW9uUGFuZWxTdW1tYXJ5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0V4cGFuc2lvblBhbmVsU3VtbWFyeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRXhwYW5zaW9uUGFuZWxTdW1tYXJ5XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Gb3JtQ29udHJvbExhYmVsLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Zvcm1Db250cm9sTGFiZWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Zvcm1Db250cm9sTGFiZWxcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0ZhZGUuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfRmFkZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRmFkZVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRm9ybUdyb3VwLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Zvcm1Hcm91cCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUdyb3VwXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9HcmlkLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0dyaWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dyaWRcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0dyaWRMaXN0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0dyaWRMaXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HcmlkTGlzdFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfR3JpZExpc3RUaWxlQmFyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0dyaWRMaXN0VGlsZUJhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR3JpZExpc3RUaWxlQmFyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9HcmlkTGlzdFRpbGUuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfR3JpZExpc3RUaWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HcmlkTGlzdFRpbGVcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0ljb24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSWNvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGluZWFyUHJvZ3Jlc3MuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTGluZWFyUHJvZ3Jlc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpbmVhclByb2dyZXNzXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaW5rLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0xpbmsgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpbmtcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0ljb25CdXR0b24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfSWNvbkJ1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSWNvbkJ1dHRvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGlzdEl0ZW0uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTGlzdEl0ZW0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpc3RJdGVtXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaXN0SXRlbUF2YXRhci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9MaXN0SXRlbUF2YXRhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTGlzdEl0ZW1BdmF0YXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0xpc3RJdGVtSWNvbi5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9MaXN0SXRlbUljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpc3RJdGVtSWNvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9NZW51SXRlbS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9NZW51SXRlbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTWVudUl0ZW1cIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0xpc3RJdGVtVGV4dC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9MaXN0SXRlbVRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpc3RJdGVtVGV4dFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGlzdFN1YmhlYWRlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9MaXN0U3ViaGVhZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXN0U3ViaGVhZGVyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Ob1Nzci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Ob1NzciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTm9Tc3JcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX01vYmlsZVN0ZXBwZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTW9iaWxlU3RlcHBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9iaWxlU3RlcHBlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUG9wcGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1BvcHBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUG9wcGVyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Qb3J0YWwuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfUG9ydGFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Qb3J0YWxcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1Jvb3RSZWYuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfUm9vdFJlZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUm9vdFJlZlwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU25hY2tiYXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU25hY2tiYXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1NuYWNrYmFyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TbGlkZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TbGlkZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2xpZGVcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1NuYWNrYmFyQ29udGVudC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TbmFja2JhckNvbnRlbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1NuYWNrYmFyQ29udGVudFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3RlcC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TdGVwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdGVwXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TdGVwQ29udGVudC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TdGVwQ29udGVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3RlcENvbnRlbnRcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N0ZXBCdXR0b24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU3RlcEJ1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3RlcEJ1dHRvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3RlcENvbm5lY3Rvci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9TdGVwQ29ubmVjdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdGVwQ29ubmVjdG9yXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TdGVwTGFiZWwuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU3RlcExhYmVsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdGVwTGFiZWxcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N0ZXBwZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU3RlcHBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3RlcHBlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3dpdGNoLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1N3aXRjaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3dpdGNoXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGFiID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlQm9keS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9UYWJsZUJvZHkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYmxlQm9keVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFibGVDb250YWluZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGFibGVDb250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYmxlQ29udGFpbmVyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWJsZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9UYWJsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFibGVcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlRm9vdGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RhYmxlRm9vdGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJsZUZvb3RlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFibGVIZWFkLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RhYmxlSGVhZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFibGVIZWFkXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWJsZVJvdy5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9UYWJsZVJvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFibGVSb3dcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1Vuc3RhYmxlX1RyYXBGb2N1cy5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9VbnN0YWJsZV9UcmFwRm9jdXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Vuc3RhYmxlX1RyYXBGb2N1c1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVG9vbGJhci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Ub29sYmFyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ub29sYmFyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF91c2VNZWRpYVF1ZXJ5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX3VzZU1lZGlhUXVlcnkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3VzZU1lZGlhUXVlcnlcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3dpdGhNb2JpbGVEaWFsb2cuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfd2l0aE1vYmlsZURpYWxvZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vd2l0aE1vYmlsZURpYWxvZ1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdXNlU2Nyb2xsVHJpZ2dlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF91c2VTY3JvbGxUcmlnZ2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91c2VTY3JvbGxUcmlnZ2VyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Ub29sdGlwLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1Rvb2x0aXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Rvb2x0aXBcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIF9leHBvcnROYW1lcyA9IHt9O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfd2l0aFdpZHRoLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX3dpdGhXaWR0aCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3dpdGhXaWR0aFwiKSk7XG5cbk9iamVjdC5rZXlzKF93aXRoV2lkdGgpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF93aXRoV2lkdGhba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfWm9vbS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9ab29tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ab29tXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9BY2NvcmRpb25TdW1tYXJ5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0FjY29yZGlvblN1bW1hcnkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0FjY29yZGlvblN1bW1hcnlcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0V4cGFuc2lvblBhbmVsLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0V4cGFuc2lvblBhbmVsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9FeHBhbnNpb25QYW5lbFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSGlkZGVuLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0hpZGRlbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSGlkZGVuXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9SYWRpb0dyb3VwLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlUmFkaW9Hcm91cFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdXNlUmFkaW9Hcm91cC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9SYWRpb0dyb3VwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SYWRpb0dyb3VwXCIpKTtcblxudmFyIF91c2VSYWRpb0dyb3VwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91c2VSYWRpb0dyb3VwXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TbGlkZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU2xpZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TbGlkZXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlQ2VsbC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9UYWJsZUNlbGwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYmxlQ2VsbFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3dpcGVhYmxlRHJhd2VyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1N3aXBlYWJsZURyYXdlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3dpcGVhYmxlRHJhd2VyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWJsZVBhZ2luYXRpb24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGFibGVQYWdpbmF0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJsZVBhZ2luYXRpb25cIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYnMuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGFicyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFic1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQWNjb3JkaW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0FjY29yZGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQWNjb3JkaW9uXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9CdXR0b25CYXNlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0J1dHRvbkJhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0J1dHRvbkJhc2VcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0F2YXRhci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9BdmF0YXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0F2YXRhclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2hlY2tib3guZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2hlY2tib3ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NoZWNrYm94XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DaGlwLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0NoaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NoaXBcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N0ZXBJY29uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1N0ZXBJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdGVwSWNvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFibGVTb3J0TGFiZWwuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGFibGVTb3J0TGFiZWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYmxlU29ydExhYmVsXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWJTY3JvbGxCdXR0b24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGFiU2Nyb2xsQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJTY3JvbGxCdXR0b25cIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0JyZWFkY3J1bWJzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0JyZWFkY3J1bWJzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9CcmVhZGNydW1ic1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUmFkaW8uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfUmFkaW8gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1JhZGlvXCIpKTsiLCIvLyBDb21wb25lbnQgZGVzaWduIHZhcmlhbnRzXG5leHBvcnQgY29uc3QgREVGQVVMVF9WQVJJQU5UID0gJ0RFRkFVTFRfVkFSSUFOVCc7XG5leHBvcnQgY29uc3QgQ0FSRFNfVkFSSUFOVCA9ICdDQVJEU19WQVJJQU5UJztcbmV4cG9ydCBjb25zdCBGTEFUX1ZBUklBTlQgPSAnRkxBVF9WQVJJQU5UJztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3RyYW5zYWN0aW9uLWJyZWFrZG93bi5jb250YWluZXInO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vdHJhbnNhY3Rpb24tYWN0aXZpdHktbG9nLmNvbnRhaW5lcic7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGludmFyaWFudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJpbnZhcmlhbnRcIikpO1xudmFyIGlzQXJyYXlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2lzQXJyYXlcIikpO1xudmFyIGlzT2JqZWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC9pc09iamVjdFwiKSk7XG52YXIgbWF0Y2hlc1R5cGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvbWF0Y2hlc1R5cGVcIikpO1xuZXhwb3J0cy5CRUdJTl9EUkFHID0gJ2RuZC1jb3JlL0JFR0lOX0RSQUcnO1xuZXhwb3J0cy5QVUJMSVNIX0RSQUdfU09VUkNFID0gJ2RuZC1jb3JlL1BVQkxJU0hfRFJBR19TT1VSQ0UnO1xuZXhwb3J0cy5IT1ZFUiA9ICdkbmQtY29yZS9IT1ZFUic7XG5leHBvcnRzLkRST1AgPSAnZG5kLWNvcmUvRFJPUCc7XG5leHBvcnRzLkVORF9EUkFHID0gJ2RuZC1jb3JlL0VORF9EUkFHJztcbmZ1bmN0aW9uIGNyZWF0ZURyYWdEcm9wQWN0aW9ucyhtYW5hZ2VyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmVnaW5EcmFnOiBmdW5jdGlvbiAoc291cmNlSWRzLCBfYSkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZUlkcyA9PT0gdm9pZCAwKSB7IHNvdXJjZUlkcyA9IFtdOyB9XG4gICAgICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge1xuICAgICAgICAgICAgICAgIHB1Ymxpc2hTb3VyY2U6IHRydWUsXG4gICAgICAgICAgICB9IDogX2EsIHB1Ymxpc2hTb3VyY2UgPSBfYi5wdWJsaXNoU291cmNlLCBjbGllbnRPZmZzZXQgPSBfYi5jbGllbnRPZmZzZXQsIGdldFNvdXJjZUNsaWVudE9mZnNldCA9IF9iLmdldFNvdXJjZUNsaWVudE9mZnNldDtcbiAgICAgICAgICAgIHZhciBtb25pdG9yID0gbWFuYWdlci5nZXRNb25pdG9yKCk7XG4gICAgICAgICAgICB2YXIgcmVnaXN0cnkgPSBtYW5hZ2VyLmdldFJlZ2lzdHJ5KCk7XG4gICAgICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KCFtb25pdG9yLmlzRHJhZ2dpbmcoKSwgJ0Nhbm5vdCBjYWxsIGJlZ2luRHJhZyB3aGlsZSBkcmFnZ2luZy4nKTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgc291cmNlSWRzXzEgPSBzb3VyY2VJZHM7IF9pIDwgc291cmNlSWRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBzb3VyY2VJZHNfMVtfaV07XG4gICAgICAgICAgICAgICAgaW52YXJpYW50XzEuZGVmYXVsdChyZWdpc3RyeS5nZXRTb3VyY2UocyksICdFeHBlY3RlZCBzb3VyY2VJZHMgdG8gYmUgcmVnaXN0ZXJlZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzb3VyY2VJZCA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gc291cmNlSWRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vbml0b3IuY2FuRHJhZ1NvdXJjZShzb3VyY2VJZHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlkID0gc291cmNlSWRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc291cmNlSWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc291cmNlQ2xpZW50T2Zmc2V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChjbGllbnRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KHR5cGVvZiBnZXRTb3VyY2VDbGllbnRPZmZzZXQgPT09ICdmdW5jdGlvbicsICdXaGVuIGNsaWVudE9mZnNldCBpcyBwcm92aWRlZCwgZ2V0U291cmNlQ2xpZW50T2Zmc2V0IG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICAgICAgICAgICAgICBzb3VyY2VDbGllbnRPZmZzZXQgPSBnZXRTb3VyY2VDbGllbnRPZmZzZXQoc291cmNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHJlZ2lzdHJ5LmdldFNvdXJjZShzb3VyY2VJZCk7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNvdXJjZS5iZWdpbkRyYWcobW9uaXRvciwgc291cmNlSWQpO1xuICAgICAgICAgICAgaW52YXJpYW50XzEuZGVmYXVsdChpc09iamVjdF8xLmRlZmF1bHQoaXRlbSksICdJdGVtIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICAgICAgcmVnaXN0cnkucGluU291cmNlKHNvdXJjZUlkKTtcbiAgICAgICAgICAgIHZhciBpdGVtVHlwZSA9IHJlZ2lzdHJ5LmdldFNvdXJjZVR5cGUoc291cmNlSWQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBleHBvcnRzLkJFR0lOX0RSQUcsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICBpdGVtVHlwZTogaXRlbVR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlkOiBzb3VyY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50T2Zmc2V0OiBjbGllbnRPZmZzZXQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlQ2xpZW50T2Zmc2V0OiBzb3VyY2VDbGllbnRPZmZzZXQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgaXNTb3VyY2VQdWJsaWM6ICEhcHVibGlzaFNvdXJjZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgcHVibGlzaERyYWdTb3VyY2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBtb25pdG9yID0gbWFuYWdlci5nZXRNb25pdG9yKCk7XG4gICAgICAgICAgICBpZiAoIW1vbml0b3IuaXNEcmFnZ2luZygpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogZXhwb3J0cy5QVUJMSVNIX0RSQUdfU09VUkNFIH07XG4gICAgICAgIH0sXG4gICAgICAgIGhvdmVyOiBmdW5jdGlvbiAodGFyZ2V0SWRzQXJnLCBfYSkge1xuICAgICAgICAgICAgdmFyIGNsaWVudE9mZnNldCA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkuY2xpZW50T2Zmc2V0O1xuICAgICAgICAgICAgaW52YXJpYW50XzEuZGVmYXVsdChpc0FycmF5XzEuZGVmYXVsdCh0YXJnZXRJZHNBcmcpLCAnRXhwZWN0ZWQgdGFyZ2V0SWRzIHRvIGJlIGFuIGFycmF5LicpO1xuICAgICAgICAgICAgdmFyIHRhcmdldElkcyA9IHRhcmdldElkc0FyZy5zbGljZSgwKTtcbiAgICAgICAgICAgIHZhciBtb25pdG9yID0gbWFuYWdlci5nZXRNb25pdG9yKCk7XG4gICAgICAgICAgICB2YXIgcmVnaXN0cnkgPSBtYW5hZ2VyLmdldFJlZ2lzdHJ5KCk7XG4gICAgICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KG1vbml0b3IuaXNEcmFnZ2luZygpLCAnQ2Fubm90IGNhbGwgaG92ZXIgd2hpbGUgbm90IGRyYWdnaW5nLicpO1xuICAgICAgICAgICAgaW52YXJpYW50XzEuZGVmYXVsdCghbW9uaXRvci5kaWREcm9wKCksICdDYW5ub3QgY2FsbCBob3ZlciBhZnRlciBkcm9wLicpO1xuICAgICAgICAgICAgLy8gRmlyc3QgY2hlY2sgaW52YXJpYW50cy5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0SWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldElkID0gdGFyZ2V0SWRzW2ldO1xuICAgICAgICAgICAgICAgIGludmFyaWFudF8xLmRlZmF1bHQodGFyZ2V0SWRzLmxhc3RJbmRleE9mKHRhcmdldElkKSA9PT0gaSwgJ0V4cGVjdGVkIHRhcmdldElkcyB0byBiZSB1bmlxdWUgaW4gdGhlIHBhc3NlZCBhcnJheS4nKTtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVnaXN0cnkuZ2V0VGFyZ2V0KHRhcmdldElkKTtcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KHRhcmdldCwgJ0V4cGVjdGVkIHRhcmdldElkcyB0byBiZSByZWdpc3RlcmVkLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRyYWdnZWRJdGVtVHlwZSA9IG1vbml0b3IuZ2V0SXRlbVR5cGUoKTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aG9zZSB0YXJnZXRJZHMgdGhhdCBkb24ndCBtYXRjaCB0aGUgdGFyZ2V0VHlwZS4gIFRoaXNcbiAgICAgICAgICAgIC8vIGZpeGVzIHNoYWxsb3cgaXNPdmVyIHdoaWNoIHdvdWxkIG9ubHkgYmUgbm9uLXNoYWxsb3cgYmVjYXVzZSBvZlxuICAgICAgICAgICAgLy8gbm9uLW1hdGNoaW5nIHRhcmdldHMuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gdGFyZ2V0SWRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldElkID0gdGFyZ2V0SWRzW2ldO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUeXBlID0gcmVnaXN0cnkuZ2V0VGFyZ2V0VHlwZSh0YXJnZXRJZCk7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVzVHlwZV8xLmRlZmF1bHQodGFyZ2V0VHlwZSwgZHJhZ2dlZEl0ZW1UeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpbmFsbHkgY2FsbCBob3ZlciBvbiBhbGwgbWF0Y2hpbmcgdGFyZ2V0cy5cbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgdGFyZ2V0SWRzXzEgPSB0YXJnZXRJZHM7IF9pIDwgdGFyZ2V0SWRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldElkID0gdGFyZ2V0SWRzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWdpc3RyeS5nZXRUYXJnZXQodGFyZ2V0SWQpO1xuICAgICAgICAgICAgICAgIHRhcmdldC5ob3Zlcihtb25pdG9yLCB0YXJnZXRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IGV4cG9ydHMuSE9WRVIsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZHM6IHRhcmdldElkcyxcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50T2Zmc2V0OiBjbGllbnRPZmZzZXQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZHJvcDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICB2YXIgbW9uaXRvciA9IG1hbmFnZXIuZ2V0TW9uaXRvcigpO1xuICAgICAgICAgICAgdmFyIHJlZ2lzdHJ5ID0gbWFuYWdlci5nZXRSZWdpc3RyeSgpO1xuICAgICAgICAgICAgaW52YXJpYW50XzEuZGVmYXVsdChtb25pdG9yLmlzRHJhZ2dpbmcoKSwgJ0Nhbm5vdCBjYWxsIGRyb3Agd2hpbGUgbm90IGRyYWdnaW5nLicpO1xuICAgICAgICAgICAgaW52YXJpYW50XzEuZGVmYXVsdCghbW9uaXRvci5kaWREcm9wKCksICdDYW5ub3QgY2FsbCBkcm9wIHR3aWNlIGR1cmluZyBvbmUgZHJhZyBvcGVyYXRpb24uJyk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SWRzID0gbW9uaXRvclxuICAgICAgICAgICAgICAgIC5nZXRUYXJnZXRJZHMoKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIobW9uaXRvci5jYW5Ecm9wT25UYXJnZXQsIG1vbml0b3IpO1xuICAgICAgICAgICAgdGFyZ2V0SWRzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIC8vIE11bHRpcGxlIGFjdGlvbnMgYXJlIGRpc3BhdGNoZWQgaGVyZSwgd2hpY2ggaXMgd2h5IHRoaXMgZG9lc24ndCByZXR1cm4gYW4gYWN0aW9uXG4gICAgICAgICAgICB0YXJnZXRJZHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0SWQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZ2lzdHJ5LmdldFRhcmdldCh0YXJnZXRJZCk7XG4gICAgICAgICAgICAgICAgdmFyIGRyb3BSZXN1bHQgPSB0YXJnZXQuZHJvcChtb25pdG9yLCB0YXJnZXRJZCk7XG4gICAgICAgICAgICAgICAgaW52YXJpYW50XzEuZGVmYXVsdCh0eXBlb2YgZHJvcFJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcgfHwgaXNPYmplY3RfMS5kZWZhdWx0KGRyb3BSZXN1bHQpLCAnRHJvcCByZXN1bHQgbXVzdCBlaXRoZXIgYmUgYW4gb2JqZWN0IG9yIHVuZGVmaW5lZC4nKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRyb3BSZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyb3BSZXN1bHQgPSBpbmRleCA9PT0gMCA/IHt9IDogbW9uaXRvci5nZXREcm9wUmVzdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGV4cG9ydHMuRFJPUCxcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcFJlc3VsdDogX19hc3NpZ24oe30sIG9wdGlvbnMsIGRyb3BSZXN1bHQpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbWFuYWdlci5kaXNwYXRjaChhY3Rpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVuZERyYWc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBtb25pdG9yID0gbWFuYWdlci5nZXRNb25pdG9yKCk7XG4gICAgICAgICAgICB2YXIgcmVnaXN0cnkgPSBtYW5hZ2VyLmdldFJlZ2lzdHJ5KCk7XG4gICAgICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KG1vbml0b3IuaXNEcmFnZ2luZygpLCAnQ2Fubm90IGNhbGwgZW5kRHJhZyB3aGlsZSBub3QgZHJhZ2dpbmcuJyk7XG4gICAgICAgICAgICB2YXIgc291cmNlSWQgPSBtb25pdG9yLmdldFNvdXJjZUlkKCk7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gcmVnaXN0cnkuZ2V0U291cmNlKHNvdXJjZUlkLCB0cnVlKTtcbiAgICAgICAgICAgIHNvdXJjZS5lbmREcmFnKG1vbml0b3IsIHNvdXJjZUlkKTtcbiAgICAgICAgICAgIHJlZ2lzdHJ5LnVucGluU291cmNlKCk7XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiBleHBvcnRzLkVORF9EUkFHIH07XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZURyYWdEcm9wQWN0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyYWdEcm9wLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGludmFyaWFudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJpbnZhcmlhbnRcIikpO1xudmFyIGFzYXAgPSByZXF1aXJlKCdhc2FwJyk7XG52YXIgcmVnaXN0cnlfMSA9IHJlcXVpcmUoXCIuL2FjdGlvbnMvcmVnaXN0cnlcIik7XG52YXIgZ2V0TmV4dFVuaXF1ZUlkXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvZ2V0TmV4dFVuaXF1ZUlkXCIpKTtcbnZhciBpbnRlcmZhY2VzXzEgPSByZXF1aXJlKFwiLi9pbnRlcmZhY2VzXCIpO1xudmFyIGNvbnRyYWN0c18xID0gcmVxdWlyZShcIi4vY29udHJhY3RzXCIpO1xuZnVuY3Rpb24gZ2V0TmV4dEhhbmRsZXJJZChyb2xlKSB7XG4gICAgdmFyIGlkID0gZ2V0TmV4dFVuaXF1ZUlkXzEuZGVmYXVsdCgpLnRvU3RyaW5nKCk7XG4gICAgc3dpdGNoIChyb2xlKSB7XG4gICAgICAgIGNhc2UgaW50ZXJmYWNlc18xLkhhbmRsZXJSb2xlLlNPVVJDRTpcbiAgICAgICAgICAgIHJldHVybiBcIlNcIiArIGlkO1xuICAgICAgICBjYXNlIGludGVyZmFjZXNfMS5IYW5kbGVyUm9sZS5UQVJHRVQ6XG4gICAgICAgICAgICByZXR1cm4gXCJUXCIgKyBpZDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gSGFuZGxlciBSb2xlOiBcIiArIHJvbGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhcnNlUm9sZUZyb21IYW5kbGVySWQoaGFuZGxlcklkKSB7XG4gICAgc3dpdGNoIChoYW5kbGVySWRbMF0pIHtcbiAgICAgICAgY2FzZSAnUyc6XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlc18xLkhhbmRsZXJSb2xlLlNPVVJDRTtcbiAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlc18xLkhhbmRsZXJSb2xlLlRBUkdFVDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGludmFyaWFudF8xLmRlZmF1bHQoZmFsc2UsIFwiQ2Fubm90IHBhcnNlIGhhbmRsZXIgSUQ6IFwiICsgaGFuZGxlcklkKTtcbiAgICB9XG59XG52YXIgSGFuZGxlclJlZ2lzdHJ5SW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIYW5kbGVyUmVnaXN0cnlJbXBsKHN0b3JlKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICAgICAgdGhpcy50eXBlcyA9IHt9O1xuICAgICAgICB0aGlzLmRyYWdTb3VyY2VzID0ge307XG4gICAgICAgIHRoaXMuZHJvcFRhcmdldHMgPSB7fTtcbiAgICAgICAgdGhpcy5waW5uZWRTb3VyY2VJZCA9IG51bGw7XG4gICAgICAgIHRoaXMucGlubmVkU291cmNlID0gbnVsbDtcbiAgICB9XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUuYWRkU291cmNlID0gZnVuY3Rpb24gKHR5cGUsIHNvdXJjZSkge1xuICAgICAgICBjb250cmFjdHNfMS52YWxpZGF0ZVR5cGUodHlwZSk7XG4gICAgICAgIGNvbnRyYWN0c18xLnZhbGlkYXRlU291cmNlQ29udHJhY3Qoc291cmNlKTtcbiAgICAgICAgdmFyIHNvdXJjZUlkID0gdGhpcy5hZGRIYW5kbGVyKGludGVyZmFjZXNfMS5IYW5kbGVyUm9sZS5TT1VSQ0UsIHR5cGUsIHNvdXJjZSk7XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2gocmVnaXN0cnlfMS5hZGRTb3VyY2Uoc291cmNlSWQpKTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZUlkO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUuYWRkVGFyZ2V0ID0gZnVuY3Rpb24gKHR5cGUsIHRhcmdldCkge1xuICAgICAgICBjb250cmFjdHNfMS52YWxpZGF0ZVR5cGUodHlwZSwgdHJ1ZSk7XG4gICAgICAgIGNvbnRyYWN0c18xLnZhbGlkYXRlVGFyZ2V0Q29udHJhY3QodGFyZ2V0KTtcbiAgICAgICAgdmFyIHRhcmdldElkID0gdGhpcy5hZGRIYW5kbGVyKGludGVyZmFjZXNfMS5IYW5kbGVyUm9sZS5UQVJHRVQsIHR5cGUsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2gocmVnaXN0cnlfMS5hZGRUYXJnZXQodGFyZ2V0SWQpKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldElkO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUuY29udGFpbnNIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChPYmplY3Qua2V5cyh0aGlzLmRyYWdTb3VyY2VzKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIF90aGlzLmRyYWdTb3VyY2VzW2tleV0gPT09IGhhbmRsZXI7IH0pIHx8XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmRyb3BUYXJnZXRzKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIF90aGlzLmRyb3BUYXJnZXRzW2tleV0gPT09IGhhbmRsZXI7IH0pKTtcbiAgICB9O1xuICAgIEhhbmRsZXJSZWdpc3RyeUltcGwucHJvdG90eXBlLmdldFNvdXJjZSA9IGZ1bmN0aW9uIChzb3VyY2VJZCwgaW5jbHVkZVBpbm5lZCkge1xuICAgICAgICBpZiAoaW5jbHVkZVBpbm5lZCA9PT0gdm9pZCAwKSB7IGluY2x1ZGVQaW5uZWQgPSBmYWxzZTsgfVxuICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KHRoaXMuaXNTb3VyY2VJZChzb3VyY2VJZCksICdFeHBlY3RlZCBhIHZhbGlkIHNvdXJjZSBJRC4nKTtcbiAgICAgICAgdmFyIGlzUGlubmVkID0gaW5jbHVkZVBpbm5lZCAmJiBzb3VyY2VJZCA9PT0gdGhpcy5waW5uZWRTb3VyY2VJZDtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGlzUGlubmVkID8gdGhpcy5waW5uZWRTb3VyY2UgOiB0aGlzLmRyYWdTb3VyY2VzW3NvdXJjZUlkXTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9O1xuICAgIEhhbmRsZXJSZWdpc3RyeUltcGwucHJvdG90eXBlLmdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xuICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KHRoaXMuaXNUYXJnZXRJZCh0YXJnZXRJZCksICdFeHBlY3RlZCBhIHZhbGlkIHRhcmdldCBJRC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJvcFRhcmdldHNbdGFyZ2V0SWRdO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUuZ2V0U291cmNlVHlwZSA9IGZ1bmN0aW9uIChzb3VyY2VJZCkge1xuICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KHRoaXMuaXNTb3VyY2VJZChzb3VyY2VJZCksICdFeHBlY3RlZCBhIHZhbGlkIHNvdXJjZSBJRC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZXNbc291cmNlSWRdO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUuZ2V0VGFyZ2V0VHlwZSA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xuICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KHRoaXMuaXNUYXJnZXRJZCh0YXJnZXRJZCksICdFeHBlY3RlZCBhIHZhbGlkIHRhcmdldCBJRC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZXNbdGFyZ2V0SWRdO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUuaXNTb3VyY2VJZCA9IGZ1bmN0aW9uIChoYW5kbGVySWQpIHtcbiAgICAgICAgdmFyIHJvbGUgPSBwYXJzZVJvbGVGcm9tSGFuZGxlcklkKGhhbmRsZXJJZCk7XG4gICAgICAgIHJldHVybiByb2xlID09PSBpbnRlcmZhY2VzXzEuSGFuZGxlclJvbGUuU09VUkNFO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUuaXNUYXJnZXRJZCA9IGZ1bmN0aW9uIChoYW5kbGVySWQpIHtcbiAgICAgICAgdmFyIHJvbGUgPSBwYXJzZVJvbGVGcm9tSGFuZGxlcklkKGhhbmRsZXJJZCk7XG4gICAgICAgIHJldHVybiByb2xlID09PSBpbnRlcmZhY2VzXzEuSGFuZGxlclJvbGUuVEFSR0VUO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUucmVtb3ZlU291cmNlID0gZnVuY3Rpb24gKHNvdXJjZUlkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGludmFyaWFudF8xLmRlZmF1bHQodGhpcy5nZXRTb3VyY2Uoc291cmNlSWQpLCAnRXhwZWN0ZWQgYW4gZXhpc3Rpbmcgc291cmNlLicpO1xuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKHJlZ2lzdHJ5XzEucmVtb3ZlU291cmNlKHNvdXJjZUlkKSk7XG4gICAgICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzLmRyYWdTb3VyY2VzW3NvdXJjZUlkXTtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy50eXBlc1tzb3VyY2VJZF07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUucmVtb3ZlVGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldElkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGludmFyaWFudF8xLmRlZmF1bHQodGhpcy5nZXRUYXJnZXQodGFyZ2V0SWQpLCAnRXhwZWN0ZWQgYW4gZXhpc3RpbmcgdGFyZ2V0LicpO1xuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKHJlZ2lzdHJ5XzEucmVtb3ZlVGFyZ2V0KHRhcmdldElkKSk7XG4gICAgICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzLmRyb3BUYXJnZXRzW3RhcmdldElkXTtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy50eXBlc1t0YXJnZXRJZF07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUucGluU291cmNlID0gZnVuY3Rpb24gKHNvdXJjZUlkKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZShzb3VyY2VJZCk7XG4gICAgICAgIGludmFyaWFudF8xLmRlZmF1bHQoc291cmNlLCAnRXhwZWN0ZWQgYW4gZXhpc3Rpbmcgc291cmNlLicpO1xuICAgICAgICB0aGlzLnBpbm5lZFNvdXJjZUlkID0gc291cmNlSWQ7XG4gICAgICAgIHRoaXMucGlubmVkU291cmNlID0gc291cmNlO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUudW5waW5Tb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGludmFyaWFudF8xLmRlZmF1bHQodGhpcy5waW5uZWRTb3VyY2UsICdObyBzb3VyY2UgaXMgcGlubmVkIGF0IHRoZSB0aW1lLicpO1xuICAgICAgICB0aGlzLnBpbm5lZFNvdXJjZUlkID0gbnVsbDtcbiAgICAgICAgdGhpcy5waW5uZWRTb3VyY2UgPSBudWxsO1xuICAgIH07XG4gICAgSGFuZGxlclJlZ2lzdHJ5SW1wbC5wcm90b3R5cGUuYWRkSGFuZGxlciA9IGZ1bmN0aW9uIChyb2xlLCB0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgIHZhciBpZCA9IGdldE5leHRIYW5kbGVySWQocm9sZSk7XG4gICAgICAgIHRoaXMudHlwZXNbaWRdID0gdHlwZTtcbiAgICAgICAgaWYgKHJvbGUgPT09IGludGVyZmFjZXNfMS5IYW5kbGVyUm9sZS5TT1VSQ0UpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhZ1NvdXJjZXNbaWRdID0gaGFuZGxlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyb2xlID09PSBpbnRlcmZhY2VzXzEuSGFuZGxlclJvbGUuVEFSR0VUKSB7XG4gICAgICAgICAgICB0aGlzLmRyb3BUYXJnZXRzW2lkXSA9IGhhbmRsZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH07XG4gICAgcmV0dXJuIEhhbmRsZXJSZWdpc3RyeUltcGw7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gSGFuZGxlclJlZ2lzdHJ5SW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhhbmRsZXJSZWdpc3RyeUltcGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaW52YXJpYW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImludmFyaWFudFwiKSk7XG52YXIgaXNBcnJheV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvaXNBcnJheVwiKSk7XG52YXIgbWF0Y2hlc1R5cGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9tYXRjaGVzVHlwZVwiKSk7XG52YXIgY29vcmRzXzEgPSByZXF1aXJlKFwiLi91dGlscy9jb29yZHNcIik7XG52YXIgZGlydGluZXNzXzEgPSByZXF1aXJlKFwiLi91dGlscy9kaXJ0aW5lc3NcIik7XG52YXIgRHJhZ0Ryb3BNb25pdG9ySW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEcmFnRHJvcE1vbml0b3JJbXBsKHN0b3JlLCByZWdpc3RyeSkge1xuICAgICAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgICAgIHRoaXMucmVnaXN0cnkgPSByZWdpc3RyeTtcbiAgICB9XG4gICAgRHJhZ0Ryb3BNb25pdG9ySW1wbC5wcm90b3R5cGUuc3Vic2NyaWJlVG9TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7IGhhbmRsZXJJZHM6IHVuZGVmaW5lZCB9OyB9XG4gICAgICAgIHZhciBoYW5kbGVySWRzID0gb3B0aW9ucy5oYW5kbGVySWRzO1xuICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJywgJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICAgICAgaW52YXJpYW50XzEuZGVmYXVsdCh0eXBlb2YgaGFuZGxlcklkcyA9PT0gJ3VuZGVmaW5lZCcgfHwgaXNBcnJheV8xLmRlZmF1bHQoaGFuZGxlcklkcyksICdoYW5kbGVySWRzLCB3aGVuIHNwZWNpZmllZCwgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdzLicpO1xuICAgICAgICB2YXIgcHJldlN0YXRlSWQgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkuc3RhdGVJZDtcbiAgICAgICAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IF90aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICB2YXIgY3VycmVudFN0YXRlSWQgPSBzdGF0ZS5zdGF0ZUlkO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgY2FuU2tpcExpc3RlbmVyID0gY3VycmVudFN0YXRlSWQgPT09IHByZXZTdGF0ZUlkIHx8XG4gICAgICAgICAgICAgICAgICAgIChjdXJyZW50U3RhdGVJZCA9PT0gcHJldlN0YXRlSWQgKyAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhZGlydGluZXNzXzEuYXJlRGlydHkoc3RhdGUuZGlydHlIYW5kbGVySWRzLCBoYW5kbGVySWRzKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFjYW5Ta2lwTGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBwcmV2U3RhdGVJZCA9IGN1cnJlbnRTdGF0ZUlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5zdWJzY3JpYmUoaGFuZGxlQ2hhbmdlKTtcbiAgICB9O1xuICAgIERyYWdEcm9wTW9uaXRvckltcGwucHJvdG90eXBlLnN1YnNjcmliZVRvT2Zmc2V0Q2hhbmdlID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGludmFyaWFudF8xLmRlZmF1bHQodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nLCAnbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgICAgICB2YXIgcHJldmlvdXNTdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kcmFnT2Zmc2V0O1xuICAgICAgICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG5leHRTdGF0ZSA9IF90aGlzLnN0b3JlLmdldFN0YXRlKCkuZHJhZ09mZnNldDtcbiAgICAgICAgICAgIGlmIChuZXh0U3RhdGUgPT09IHByZXZpb3VzU3RhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2aW91c1N0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUuc3Vic2NyaWJlKGhhbmRsZUNoYW5nZSk7XG4gICAgfTtcbiAgICBEcmFnRHJvcE1vbml0b3JJbXBsLnByb3RvdHlwZS5jYW5EcmFnU291cmNlID0gZnVuY3Rpb24gKHNvdXJjZUlkKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnJlZ2lzdHJ5LmdldFNvdXJjZShzb3VyY2VJZCk7XG4gICAgICAgIGludmFyaWFudF8xLmRlZmF1bHQoc291cmNlLCAnRXhwZWN0ZWQgdG8gZmluZCBhIHZhbGlkIHNvdXJjZS4nKTtcbiAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZygpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZS5jYW5EcmFnKHRoaXMsIHNvdXJjZUlkKTtcbiAgICB9O1xuICAgIERyYWdEcm9wTW9uaXRvckltcGwucHJvdG90eXBlLmNhbkRyb3BPblRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXRJZCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5yZWdpc3RyeS5nZXRUYXJnZXQodGFyZ2V0SWQpO1xuICAgICAgICBpbnZhcmlhbnRfMS5kZWZhdWx0KHRhcmdldCwgJ0V4cGVjdGVkIHRvIGZpbmQgYSB2YWxpZCB0YXJnZXQuJyk7XG4gICAgICAgIGlmICghdGhpcy5pc0RyYWdnaW5nKCkgfHwgdGhpcy5kaWREcm9wKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFyZ2V0VHlwZSA9IHRoaXMucmVnaXN0cnkuZ2V0VGFyZ2V0VHlwZSh0YXJnZXRJZCk7XG4gICAgICAgIHZhciBkcmFnZ2VkSXRlbVR5cGUgPSB0aGlzLmdldEl0ZW1UeXBlKCk7XG4gICAgICAgIHJldHVybiAobWF0Y2hlc1R5cGVfMS5kZWZhdWx0KHRhcmdldFR5cGUsIGRyYWdnZWRJdGVtVHlwZSkgJiYgdGFyZ2V0LmNhbkRyb3AodGhpcywgdGFyZ2V0SWQpKTtcbiAgICB9O1xuICAgIERyYWdEcm9wTW9uaXRvckltcGwucHJvdG90eXBlLmlzRHJhZ2dpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuZ2V0SXRlbVR5cGUoKSk7XG4gICAgfTtcbiAgICBEcmFnRHJvcE1vbml0b3JJbXBsLnByb3RvdHlwZS5pc0RyYWdnaW5nU291cmNlID0gZnVuY3Rpb24gKHNvdXJjZUlkKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnJlZ2lzdHJ5LmdldFNvdXJjZShzb3VyY2VJZCwgdHJ1ZSk7XG4gICAgICAgIGludmFyaWFudF8xLmRlZmF1bHQoc291cmNlLCAnRXhwZWN0ZWQgdG8gZmluZCBhIHZhbGlkIHNvdXJjZS4nKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzRHJhZ2dpbmcoKSB8fCAhdGhpcy5pc1NvdXJjZVB1YmxpYygpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNvdXJjZVR5cGUgPSB0aGlzLnJlZ2lzdHJ5LmdldFNvdXJjZVR5cGUoc291cmNlSWQpO1xuICAgICAgICB2YXIgZHJhZ2dlZEl0ZW1UeXBlID0gdGhpcy5nZXRJdGVtVHlwZSgpO1xuICAgICAgICBpZiAoc291cmNlVHlwZSAhPT0gZHJhZ2dlZEl0ZW1UeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZS5pc0RyYWdnaW5nKHRoaXMsIHNvdXJjZUlkKTtcbiAgICB9O1xuICAgIERyYWdEcm9wTW9uaXRvckltcGwucHJvdG90eXBlLmlzT3ZlclRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXRJZCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7IHNoYWxsb3c6IGZhbHNlIH07IH1cbiAgICAgICAgdmFyIHNoYWxsb3cgPSBvcHRpb25zLnNoYWxsb3c7XG4gICAgICAgIGlmICghdGhpcy5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFyZ2V0VHlwZSA9IHRoaXMucmVnaXN0cnkuZ2V0VGFyZ2V0VHlwZSh0YXJnZXRJZCk7XG4gICAgICAgIHZhciBkcmFnZ2VkSXRlbVR5cGUgPSB0aGlzLmdldEl0ZW1UeXBlKCk7XG4gICAgICAgIGlmIChkcmFnZ2VkSXRlbVR5cGUgJiYgIW1hdGNoZXNUeXBlXzEuZGVmYXVsdCh0YXJnZXRUeXBlLCBkcmFnZ2VkSXRlbVR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRhcmdldElkcyA9IHRoaXMuZ2V0VGFyZ2V0SWRzKCk7XG4gICAgICAgIGlmICghdGFyZ2V0SWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IHRhcmdldElkcy5pbmRleE9mKHRhcmdldElkKTtcbiAgICAgICAgaWYgKHNoYWxsb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gdGFyZ2V0SWRzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPiAtMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRHJhZ0Ryb3BNb25pdG9ySW1wbC5wcm90b3R5cGUuZ2V0SXRlbVR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZHJhZ09wZXJhdGlvbi5pdGVtVHlwZTtcbiAgICB9O1xuICAgIERyYWdEcm9wTW9uaXRvckltcGwucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZHJhZ09wZXJhdGlvbi5pdGVtO1xuICAgIH07XG4gICAgRHJhZ0Ryb3BNb25pdG9ySW1wbC5wcm90b3R5cGUuZ2V0U291cmNlSWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZHJhZ09wZXJhdGlvbi5zb3VyY2VJZDtcbiAgICB9O1xuICAgIERyYWdEcm9wTW9uaXRvckltcGwucHJvdG90eXBlLmdldFRhcmdldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kcmFnT3BlcmF0aW9uLnRhcmdldElkcztcbiAgICB9O1xuICAgIERyYWdEcm9wTW9uaXRvckltcGwucHJvdG90eXBlLmdldERyb3BSZXN1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZHJhZ09wZXJhdGlvbi5kcm9wUmVzdWx0O1xuICAgIH07XG4gICAgRHJhZ0Ryb3BNb25pdG9ySW1wbC5wcm90b3R5cGUuZGlkRHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kcmFnT3BlcmF0aW9uLmRpZERyb3A7XG4gICAgfTtcbiAgICBEcmFnRHJvcE1vbml0b3JJbXBsLnByb3RvdHlwZS5pc1NvdXJjZVB1YmxpYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kcmFnT3BlcmF0aW9uLmlzU291cmNlUHVibGljO1xuICAgIH07XG4gICAgRHJhZ0Ryb3BNb25pdG9ySW1wbC5wcm90b3R5cGUuZ2V0SW5pdGlhbENsaWVudE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kcmFnT2Zmc2V0LmluaXRpYWxDbGllbnRPZmZzZXQ7XG4gICAgfTtcbiAgICBEcmFnRHJvcE1vbml0b3JJbXBsLnByb3RvdHlwZS5nZXRJbml0aWFsU291cmNlQ2xpZW50T2Zmc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRyYWdPZmZzZXQuaW5pdGlhbFNvdXJjZUNsaWVudE9mZnNldDtcbiAgICB9O1xuICAgIERyYWdEcm9wTW9uaXRvckltcGwucHJvdG90eXBlLmdldENsaWVudE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kcmFnT2Zmc2V0LmNsaWVudE9mZnNldDtcbiAgICB9O1xuICAgIERyYWdEcm9wTW9uaXRvckltcGwucHJvdG90eXBlLmdldFNvdXJjZUNsaWVudE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNvb3Jkc18xLmdldFNvdXJjZUNsaWVudE9mZnNldCh0aGlzLnN0b3JlLmdldFN0YXRlKCkuZHJhZ09mZnNldCk7XG4gICAgfTtcbiAgICBEcmFnRHJvcE1vbml0b3JJbXBsLnByb3RvdHlwZS5nZXREaWZmZXJlbmNlRnJvbUluaXRpYWxPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjb29yZHNfMS5nZXREaWZmZXJlbmNlRnJvbUluaXRpYWxPZmZzZXQodGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRyYWdPZmZzZXQpO1xuICAgIH07XG4gICAgcmV0dXJuIERyYWdEcm9wTW9uaXRvckltcGw7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gRHJhZ0Ryb3BNb25pdG9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURyYWdEcm9wTW9uaXRvckltcGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgfVxuICAgIHJldHVybiB0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBnZXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2dldFwiKSk7XG52YXIgZHJhZ09mZnNldF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2RyYWdPZmZzZXRcIikpO1xudmFyIGRyYWdPcGVyYXRpb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9kcmFnT3BlcmF0aW9uXCIpKTtcbnZhciByZWZDb3VudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3JlZkNvdW50XCIpKTtcbnZhciBkaXJ0eUhhbmRsZXJJZHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9kaXJ0eUhhbmRsZXJJZHNcIikpO1xudmFyIHN0YXRlSWRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdGF0ZUlkXCIpKTtcbmZ1bmN0aW9uIHJlZHVjZShzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSB7fTsgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGRpcnR5SGFuZGxlcklkczogZGlydHlIYW5kbGVySWRzXzEuZGVmYXVsdChzdGF0ZS5kaXJ0eUhhbmRsZXJJZHMsIHtcbiAgICAgICAgICAgIHR5cGU6IGFjdGlvbi50eXBlLFxuICAgICAgICAgICAgcGF5bG9hZDogX19hc3NpZ24oe30sIGFjdGlvbi5wYXlsb2FkLCB7IHByZXZUYXJnZXRJZHM6IGdldF8xLmRlZmF1bHQoc3RhdGUsICdkcmFnT3BlcmF0aW9uLnRhcmdldElkcycsIFtdKSB9KSxcbiAgICAgICAgfSksXG4gICAgICAgIGRyYWdPZmZzZXQ6IGRyYWdPZmZzZXRfMS5kZWZhdWx0KHN0YXRlLmRyYWdPZmZzZXQsIGFjdGlvbiksXG4gICAgICAgIHJlZkNvdW50OiByZWZDb3VudF8xLmRlZmF1bHQoc3RhdGUucmVmQ291bnQsIGFjdGlvbiksXG4gICAgICAgIGRyYWdPcGVyYXRpb246IGRyYWdPcGVyYXRpb25fMS5kZWZhdWx0KHN0YXRlLmRyYWdPcGVyYXRpb24sIGFjdGlvbiksXG4gICAgICAgIHN0YXRlSWQ6IHN0YXRlSWRfMS5kZWZhdWx0KHN0YXRlLnN0YXRlSWQpLFxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSByZWR1Y2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgeyBORVRXT1JLX1RZUEVfUlBDIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9uZXR3b3JrJztcbmltcG9ydCB7IFNJWkVTIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgQ29sb3JJbmRpY2F0b3IgZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy91aS9jb2xvci1pbmRpY2F0b3InO1xuaW1wb3J0IExvY2tJY29uIGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdWkvbG9jay1pY29uJztcbmltcG9ydCB7IE5FVFdPUktTX0ZPUk1fUk9VVEUgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9yb3V0ZXMnO1xuaW1wb3J0IHsgc2V0U2VsZWN0ZWRTZXR0aW5nc1JwY1VybCB9IGZyb20gJy4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHsgZ2V0RW52aXJvbm1lbnRUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXBwL3NjcmlwdHMvbGliL3V0aWwnO1xuaW1wb3J0IHsgRU5WSVJPTk1FTlRfVFlQRV9GVUxMU0NSRUVOIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9hcHAnO1xuaW1wb3J0IHsgZ2V0UHJvdmlkZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9zZWxlY3RvcnMnO1xuXG5jb25zdCBOZXR3b3Jrc0xpc3RJdGVtID0gKHsgbmV0d29yaywgbmV0d29ya0lzU2VsZWN0ZWQsIHNlbGVjdGVkUnBjVXJsIH0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgZW52aXJvbm1lbnRUeXBlID0gZ2V0RW52aXJvbm1lbnRUeXBlKCk7XG4gIGNvbnN0IGlzRnVsbFNjcmVlbiA9IGVudmlyb25tZW50VHlwZSA9PT0gRU5WSVJPTk1FTlRfVFlQRV9GVUxMU0NSRUVOO1xuICBjb25zdCBwcm92aWRlciA9IHVzZVNlbGVjdG9yKGdldFByb3ZpZGVyKTtcbiAgY29uc3Qge1xuICAgIGxhYmVsLFxuICAgIGxhYmVsS2V5LFxuICAgIHJwY1VybCxcbiAgICBwcm92aWRlclR5cGU6IGN1cnJlbnRQcm92aWRlclR5cGUsXG4gIH0gPSBuZXR3b3JrO1xuXG4gIGNvbnN0IGxpc3RJdGVtTmV0d29ya0lzU2VsZWN0ZWQgPSBzZWxlY3RlZFJwY1VybCAmJiBzZWxlY3RlZFJwY1VybCA9PT0gcnBjVXJsO1xuICBjb25zdCBsaXN0SXRlbVVybElzUHJvdmlkZXJVcmwgPSBycGNVcmwgPT09IHByb3ZpZGVyLnJwY1VybDtcbiAgY29uc3QgbGlzdEl0ZW1UeXBlSXNQcm92aWRlck5vblJwY1R5cGUgPVxuICAgIHByb3ZpZGVyLnR5cGUgIT09IE5FVFdPUktfVFlQRV9SUEMgJiYgY3VycmVudFByb3ZpZGVyVHlwZSA9PT0gcHJvdmlkZXIudHlwZTtcbiAgY29uc3QgbGlzdEl0ZW1OZXR3b3JrSXNDdXJyZW50UHJvdmlkZXIgPVxuICAgICFuZXR3b3JrSXNTZWxlY3RlZCAmJlxuICAgIChsaXN0SXRlbVVybElzUHJvdmlkZXJVcmwgfHwgbGlzdEl0ZW1UeXBlSXNQcm92aWRlck5vblJwY1R5cGUpO1xuICBjb25zdCBkaXNwbGF5TmV0d29ya0xpc3RJdGVtQXNTZWxlY3RlZCA9XG4gICAgbGlzdEl0ZW1OZXR3b3JrSXNTZWxlY3RlZCB8fCBsaXN0SXRlbU5ldHdvcmtJc0N1cnJlbnRQcm92aWRlcjtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGtleT17YHNldHRpbmdzLW5ldHdvcmstbGlzdC1pdGVtOiR7cnBjVXJsfWB9XG4gICAgICBjbGFzc05hbWU9XCJuZXR3b3Jrcy10YWJfX25ldHdvcmtzLWxpc3QtaXRlbVwiXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHNldFNlbGVjdGVkU2V0dGluZ3NScGNVcmwocnBjVXJsKSk7XG4gICAgICAgIGlmICghaXNGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgaGlzdG9yeS5wdXNoKE5FVFdPUktTX0ZPUk1fUk9VVEUpO1xuICAgICAgICB9XG4gICAgICB9fVxuICAgID5cbiAgICAgIDxDb2xvckluZGljYXRvclxuICAgICAgICBjb2xvcj17bGFiZWxLZXl9XG4gICAgICAgIHR5cGU9e0NvbG9ySW5kaWNhdG9yLlRZUEVTLkZJTExFRH1cbiAgICAgICAgc2l6ZT17U0laRVMuTEd9XG4gICAgICAvPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ25ldHdvcmtzLXRhYl9fbmV0d29ya3MtbGlzdC1uYW1lJywge1xuICAgICAgICAgICduZXR3b3Jrcy10YWJfX25ldHdvcmtzLWxpc3QtbmFtZS0tc2VsZWN0ZWQnOiBkaXNwbGF5TmV0d29ya0xpc3RJdGVtQXNTZWxlY3RlZCxcbiAgICAgICAgICAnbmV0d29ya3MtdGFiX19uZXR3b3Jrcy1saXN0LW5hbWUtLWRpc2FibGVkJzpcbiAgICAgICAgICAgIGN1cnJlbnRQcm92aWRlclR5cGUgIT09IE5FVFdPUktfVFlQRV9SUEMgJiZcbiAgICAgICAgICAgICFkaXNwbGF5TmV0d29ya0xpc3RJdGVtQXNTZWxlY3RlZCxcbiAgICAgICAgfSl9XG4gICAgICA+XG4gICAgICAgIHtsYWJlbCB8fCB0KGxhYmVsS2V5KX1cbiAgICAgICAge2N1cnJlbnRQcm92aWRlclR5cGUgIT09IE5FVFdPUktfVFlQRV9SUEMgJiYgKFxuICAgICAgICAgIDxMb2NrSWNvbiB3aWR0aD1cIjE0cHhcIiBoZWlnaHQ9XCIxN3B4XCIgZmlsbD1cIiNjZGNkY2RcIiAvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldHdvcmtzLXRhYl9fbmV0d29ya3MtbGlzdC1hcnJvd1wiIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5OZXR3b3Jrc0xpc3RJdGVtLnByb3BUeXBlcyA9IHtcbiAgbmV0d29yazogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBuZXR3b3JrSXNTZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbGVjdGVkUnBjVXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTmV0d29ya3NMaXN0SXRlbTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3VpL2JveCc7XG5pbXBvcnQgSTE4blZhbHVlIGZyb20gJy4uLy4uLy4uL3VpL2kxOG4tdmFsdWUnO1xuaW1wb3J0IExvYWRpbmdIZWFydEJlYXQgZnJvbSAnLi4vLi4vLi4vdWkvbG9hZGluZy1oZWFydGJlYXQnO1xuXG5jb25zdCBBZHZhbmNlZEdhc0ZlZUlucHV0U3VidGV4dCA9ICh7IGxhdGVzdCwgaGlzdG9yaWNhbCwgZmVlVHJlbmQgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxCb3ggY2xhc3NOYW1lPVwiYWR2YW5jZWQtZ2FzLWZlZS1pbnB1dC1zdWJ0ZXh0XCI+XG4gICAgICA8Qm94IGRpc3BsYXk9XCJmbGV4XCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhZHZhbmNlZC1nYXMtZmVlLWlucHV0LXN1YnRleHRfX2xhYmVsXCI+XG4gICAgICAgICAgPEkxOG5WYWx1ZSBtZXNzYWdlS2V5PVwiY3VycmVudFRpdGxlXCIgLz5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhZHZhbmNlZC1nYXMtZmVlLWlucHV0LXN1YnRleHRfX3ZhbHVlXCI+XG4gICAgICAgICAgPExvYWRpbmdIZWFydEJlYXQgLz5cbiAgICAgICAgICB7bGF0ZXN0fVxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxpbWcgc3JjPXtgLi9pbWFnZXMvJHtmZWVUcmVuZH0tYXJyb3cuc3ZnYH0gYWx0PVwiZmVlVHJlbmQtYXJyb3dcIiAvPlxuICAgICAgPC9Cb3g+XG4gICAgICA8Qm94PlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhZHZhbmNlZC1nYXMtZmVlLWlucHV0LXN1YnRleHRfX2xhYmVsXCI+XG4gICAgICAgICAgPEkxOG5WYWx1ZSBtZXNzYWdlS2V5PVwidHdlbHZlSHJUaXRsZVwiIC8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYWR2YW5jZWQtZ2FzLWZlZS1pbnB1dC1zdWJ0ZXh0X192YWx1ZVwiPlxuICAgICAgICAgIDxMb2FkaW5nSGVhcnRCZWF0IC8+XG4gICAgICAgICAge2hpc3RvcmljYWx9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvQm94PlxuICAgIDwvQm94PlxuICApO1xufTtcblxuQWR2YW5jZWRHYXNGZWVJbnB1dFN1YnRleHQucHJvcFR5cGVzID0ge1xuICBsYXRlc3Q6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhpc3RvcmljYWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZlZVRyZW5kOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBZHZhbmNlZEdhc0ZlZUlucHV0U3VidGV4dDtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3NlbmQtcm93LWVycm9yLW1lc3NhZ2UuY29udGFpbmVyJztcbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBUb2tlbklucHV0IGZyb20gJy4uLy4uL3VpL3Rva2VuLWlucHV0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlclByZWZlcmVuY2VkVG9rZW5JbnB1dCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHRva2VuOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYWRkcmVzczogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgZGVjaW1hbHM6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICBzeW1ib2w6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICB1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5OiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5LCAuLi5yZXN0UHJvcHMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRva2VuSW5wdXRcbiAgICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgICAgc2hvd0ZpYXQ9eyF1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5fVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQ3VycmVuY3lJbnB1dCBmcm9tICcuLi8uLi91aS9jdXJyZW5jeS1pbnB1dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5SW5wdXQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5OiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5LCAuLi5yZXN0UHJvcHMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEN1cnJlbmN5SW5wdXRcbiAgICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgICAgdXNlRmlhdD17IXVzZU5hdGl2ZUN1cnJlbmN5QXNQcmltYXJ5Q3VycmVuY3l9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaGFzQ2hpbGROb2RlcyA9IGhhc0NoaWxkTm9kZXM7XG52YXIgREVGQVVMVF9ST09UX1BBVEggPSBleHBvcnRzLkRFRkFVTFRfUk9PVF9QQVRIID0gJyQnO1xuXG52YXIgV0lMRENBUkQgPSAnKic7XG5cbmZ1bmN0aW9uIGhhc0NoaWxkTm9kZXMoZGF0YSwgZGF0YUl0ZXJhdG9yKSB7XG4gIHJldHVybiAhZGF0YUl0ZXJhdG9yKGRhdGEpLm5leHQoKS5kb25lO1xufVxuXG52YXIgd2lsZGNhcmRQYXRoc0Zyb21MZXZlbCA9IGV4cG9ydHMud2lsZGNhcmRQYXRoc0Zyb21MZXZlbCA9IGZ1bmN0aW9uIHdpbGRjYXJkUGF0aHNGcm9tTGV2ZWwobGV2ZWwpIHtcbiAgLy8gaSBpcyBkZXB0aFxuICByZXR1cm4gQXJyYXkuZnJvbSh7IGxlbmd0aDogbGV2ZWwgfSwgZnVuY3Rpb24gKF8sIGkpIHtcbiAgICByZXR1cm4gW0RFRkFVTFRfUk9PVF9QQVRIXS5jb25jYXQoQXJyYXkuZnJvbSh7IGxlbmd0aDogaSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJyonO1xuICAgIH0pKS5qb2luKCcuJyk7XG4gIH0pO1xufTtcblxudmFyIGdldEV4cGFuZGVkUGF0aHMgPSBleHBvcnRzLmdldEV4cGFuZGVkUGF0aHMgPSBmdW5jdGlvbiBnZXRFeHBhbmRlZFBhdGhzKGRhdGEsIGRhdGFJdGVyYXRvciwgZXhwYW5kUGF0aHMsIGV4cGFuZExldmVsKSB7XG4gIHZhciBpbml0aWFsU3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHt9O1xuXG4gIHZhciB3aWxkY2FyZFBhdGhzID0gW10uY29uY2F0KHdpbGRjYXJkUGF0aHNGcm9tTGV2ZWwoZXhwYW5kTGV2ZWwpKS5jb25jYXQoZXhwYW5kUGF0aHMpLmZpbHRlcihmdW5jdGlvbiAocGF0aCkge1xuICAgIHJldHVybiB0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZyc7XG4gIH0pOyAvLyBjb3VsZCBiZSB1bmRlZmluZWRcblxuICB2YXIgZXhwYW5kZWRQYXRocyA9IFtdO1xuICB3aWxkY2FyZFBhdGhzLmZvckVhY2goZnVuY3Rpb24gKHdpbGRjYXJkUGF0aCkge1xuICAgIHZhciBrZXlQYXRocyA9IHdpbGRjYXJkUGF0aC5zcGxpdCgnLicpO1xuICAgIHZhciBwb3B1bGF0ZVBhdGhzID0gZnVuY3Rpb24gcG9wdWxhdGVQYXRocyhjdXJEYXRhLCBjdXJQYXRoLCBkZXB0aCkge1xuICAgICAgaWYgKGRlcHRoID09PSBrZXlQYXRocy5sZW5ndGgpIHtcbiAgICAgICAgZXhwYW5kZWRQYXRocy5wdXNoKGN1clBhdGgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIga2V5ID0ga2V5UGF0aHNbZGVwdGhdO1xuICAgICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgIGlmIChoYXNDaGlsZE5vZGVzKGN1ckRhdGEsIGRhdGFJdGVyYXRvcikgJiYgKGtleSA9PT0gREVGQVVMVF9ST09UX1BBVEggfHwga2V5ID09PSBXSUxEQ0FSRCkpIHtcbiAgICAgICAgICBwb3B1bGF0ZVBhdGhzKGN1ckRhdGEsIERFRkFVTFRfUk9PVF9QQVRILCBkZXB0aCArIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoa2V5ID09PSBXSUxEQ0FSRCkge1xuICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gZGF0YUl0ZXJhdG9yKGN1ckRhdGEpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lLFxuICAgICAgICAgICAgICAgICAgX2RhdGEgPSBfcmVmMi5kYXRhO1xuXG4gICAgICAgICAgICAgIGlmIChoYXNDaGlsZE5vZGVzKF9kYXRhLCBkYXRhSXRlcmF0b3IpKSB7XG4gICAgICAgICAgICAgICAgcG9wdWxhdGVQYXRocyhfZGF0YSwgY3VyUGF0aCArICcuJyArIG5hbWUsIGRlcHRoICsgMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gY3VyRGF0YVtrZXldO1xuICAgICAgICAgIGlmIChoYXNDaGlsZE5vZGVzKHZhbHVlLCBkYXRhSXRlcmF0b3IpKSB7XG4gICAgICAgICAgICBwb3B1bGF0ZVBhdGhzKHZhbHVlLCBjdXJQYXRoICsgJy4nICsga2V5LCBkZXB0aCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBwb3B1bGF0ZVBhdGhzKGRhdGEsICcnLCAwKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGV4cGFuZGVkUGF0aHMucmVkdWNlKGZ1bmN0aW9uIChvYmosIHBhdGgpIHtcbiAgICBvYmpbcGF0aF0gPSB0cnVlO1xuICAgIHJldHVybiBvYmo7XG4gIH0sIGluaXRpYWxTdGF0ZSk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NyZWF0ZVN0eWxlcyA9IHJlcXVpcmUoJy4uL3N0eWxlcy9jcmVhdGVTdHlsZXMnKTtcblxudmFyIF9jcmVhdGVTdHlsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlU3R5bGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEFycm93ID0gZnVuY3Rpb24gQXJyb3coX3JlZikge1xuICB2YXIgZXhwYW5kZWQgPSBfcmVmLmV4cGFuZGVkLFxuICAgICAgc3R5bGVzID0gX3JlZi5zdHlsZXM7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnc3BhbicsXG4gICAgeyBzdHlsZTogKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgc3R5bGVzLmJhc2UsIGV4cGFuZGVkID8gc3R5bGVzLmV4cGFuZGVkIDogc3R5bGVzLmNvbGxhcHNlZCkgfSxcbiAgICAnXFx1MjVCNidcbiAgKTtcbn07XG5cbnZhciBUcmVlTm9kZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFRyZWVOb2RlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmVlTm9kZSgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUcmVlTm9kZSk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFRyZWVOb2RlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVHJlZU5vZGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFRyZWVOb2RlLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGV4cGFuZGVkID0gX3Byb3BzLmV4cGFuZGVkLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfcHJvcHMub25DbGljayxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBub2RlUmVuZGVyZXIgPSBfcHJvcHMubm9kZVJlbmRlcmVyLFxuICAgICAgICAgIHRpdGxlID0gX3Byb3BzLnRpdGxlLFxuICAgICAgICAgIHNob3VsZFNob3dBcnJvdyA9IF9wcm9wcy5zaG91bGRTaG93QXJyb3csXG4gICAgICAgICAgc2hvdWxkU2hvd1BsYWNlaG9sZGVyID0gX3Byb3BzLnNob3VsZFNob3dQbGFjZWhvbGRlcjtcbiAgICAgIHZhciB0aGVtZSA9IHRoaXMuY29udGV4dC50aGVtZTtcblxuICAgICAgdmFyIHN0eWxlcyA9ICgwLCBfY3JlYXRlU3R5bGVzMi5kZWZhdWx0KSgnVHJlZU5vZGUnLCB0aGVtZSk7XG5cbiAgICAgIHZhciByZW5kZXJlZE5vZGUgPSAoMCwgX3JlYWN0LmNyZWF0ZUVsZW1lbnQpKG5vZGVSZW5kZXJlciwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgY2hpbGROb2RlcyA9IGV4cGFuZGVkID8gY2hpbGRyZW4gOiB1bmRlZmluZWQ7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2xpJyxcbiAgICAgICAgeyAnYXJpYS1leHBhbmRlZCc6IGV4cGFuZGVkLCByb2xlOiAndHJlZWl0ZW0nLCBzdHlsZTogc3R5bGVzLnRyZWVOb2RlQmFzZSwgdGl0bGU6IHRpdGxlIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy50cmVlTm9kZVByZXZpZXdDb250YWluZXIsIG9uQ2xpY2s6IG9uQ2xpY2sgfSxcbiAgICAgICAgICBzaG91bGRTaG93QXJyb3cgfHwgX3JlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA+IDAgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChBcnJvdywgeyBleHBhbmRlZDogZXhwYW5kZWQsIHN0eWxlczogc3R5bGVzLnRyZWVOb2RlQXJyb3cgfSkgOiBzaG91bGRTaG93UGxhY2Vob2xkZXIgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMudHJlZU5vZGVQbGFjZWhvbGRlciB9LFxuICAgICAgICAgICAgJ1xceEEwJ1xuICAgICAgICAgICksXG4gICAgICAgICAgcmVuZGVyZWROb2RlXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdvbCcsXG4gICAgICAgICAgeyByb2xlOiAnZ3JvdXAnLCBzdHlsZTogc3R5bGVzLnRyZWVOb2RlQ2hpbGROb2Rlc0NvbnRhaW5lciB9LFxuICAgICAgICAgIGNoaWxkTm9kZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRyZWVOb2RlO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuVHJlZU5vZGUucHJvcFR5cGVzID0ge1xuICBuYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZGF0YTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG5cbiAgZXhwYW5kZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgc2hvdWxkU2hvd0Fycm93OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNob3VsZFNob3dQbGFjZWhvbGRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuXG4gIG5vZGVSZW5kZXJlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufTtcblxuVHJlZU5vZGUuZGVmYXVsdFByb3BzID0ge1xuICBuYW1lOiB1bmRlZmluZWQsXG4gIGRhdGE6IHVuZGVmaW5lZCxcbiAgZXhwYW5kZWQ6IHRydWUsXG5cbiAgbm9kZVJlbmRlcmVyOiBmdW5jdGlvbiBub2RlUmVuZGVyZXIoX3JlZjIpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgbnVsbCxcbiAgICAgIG5hbWVcbiAgICApO1xuICB9LFxuXG4gIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7fSxcblxuICBzaG91bGRTaG93QXJyb3c6IGZhbHNlLFxuICBzaG91bGRTaG93UGxhY2Vob2xkZXI6IHRydWVcbn07XG5cblRyZWVOb2RlLmNvbnRleHRUeXBlcyA9IHtcbiAgdGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUcmVlTm9kZTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfdW5zZWxlY3RhYmxlID0gcmVxdWlyZSgnLi91bnNlbGVjdGFibGUnKTtcblxudmFyIF91bnNlbGVjdGFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdW5zZWxlY3RhYmxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgRE9NTm9kZVByZXZpZXc6IHtcbiAgICAgIGh0bWxPcGVuVGFnOiB7XG4gICAgICAgIGJhc2U6IHtcbiAgICAgICAgICBjb2xvcjogdGhlbWUuSFRNTF9UQUdfQ09MT1JcbiAgICAgICAgfSxcbiAgICAgICAgdGFnTmFtZToge1xuICAgICAgICAgIGNvbG9yOiB0aGVtZS5IVE1MX1RBR05BTUVfQ09MT1IsXG4gICAgICAgICAgdGV4dFRyYW5zZm9ybTogdGhlbWUuSFRNTF9UQUdOQU1FX1RFWFRfVFJBTlNGT1JNXG4gICAgICAgIH0sXG4gICAgICAgIGh0bWxBdHRyaWJ1dGVOYW1lOiB7XG4gICAgICAgICAgY29sb3I6IHRoZW1lLkhUTUxfQVRUUklCVVRFX05BTUVfQ09MT1JcbiAgICAgICAgfSxcbiAgICAgICAgaHRtbEF0dHJpYnV0ZVZhbHVlOiB7XG4gICAgICAgICAgY29sb3I6IHRoZW1lLkhUTUxfQVRUUklCVVRFX1ZBTFVFX0NPTE9SXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBodG1sQ2xvc2VUYWc6IHtcbiAgICAgICAgYmFzZToge1xuICAgICAgICAgIGNvbG9yOiB0aGVtZS5IVE1MX1RBR19DT0xPUlxuICAgICAgICB9LFxuICAgICAgICBvZmZzZXRMZWZ0OiB7XG4gICAgICAgICAgLyogaGFjazogb2Zmc2V0IHBsYWNlaG9sZGVyICovXG4gICAgICAgICAgbWFyZ2luTGVmdDogLXRoZW1lLlRSRUVOT0RFX1BBRERJTkdfTEVGVFxuICAgICAgICB9LFxuICAgICAgICB0YWdOYW1lOiB7XG4gICAgICAgICAgY29sb3I6IHRoZW1lLkhUTUxfVEFHTkFNRV9DT0xPUixcbiAgICAgICAgICB0ZXh0VHJhbnNmb3JtOiB0aGVtZS5IVE1MX1RBR05BTUVfVEVYVF9UUkFOU0ZPUk1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGh0bWxDb21tZW50OiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5IVE1MX0NPTU1FTlRfQ09MT1JcbiAgICAgIH0sXG4gICAgICBodG1sRG9jdHlwZToge1xuICAgICAgICBjb2xvcjogdGhlbWUuSFRNTF9ET0NUWVBFX0NPTE9SXG4gICAgICB9XG4gICAgfSxcblxuICAgIE9iamVjdE5hbWU6IHtcbiAgICAgIGJhc2U6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLk9CSkVDVF9OQU1FX0NPTE9SXG4gICAgICB9LFxuICAgICAgZGltbWVkOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuNlxuICAgICAgfVxuICAgIH0sXG5cbiAgICBPYmplY3RWYWx1ZToge1xuICAgICAgb2JqZWN0VmFsdWVOdWxsOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5PQkpFQ1RfVkFMVUVfTlVMTF9DT0xPUlxuICAgICAgfSxcbiAgICAgIG9iamVjdFZhbHVlVW5kZWZpbmVkOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5PQkpFQ1RfVkFMVUVfVU5ERUZJTkVEX0NPTE9SXG4gICAgICB9LFxuICAgICAgb2JqZWN0VmFsdWVSZWdFeHA6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLk9CSkVDVF9WQUxVRV9SRUdFWFBfQ09MT1JcbiAgICAgIH0sXG4gICAgICBvYmplY3RWYWx1ZVN0cmluZzoge1xuICAgICAgICBjb2xvcjogdGhlbWUuT0JKRUNUX1ZBTFVFX1NUUklOR19DT0xPUlxuICAgICAgfSxcbiAgICAgIG9iamVjdFZhbHVlU3ltYm9sOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5PQkpFQ1RfVkFMVUVfU1lNQk9MX0NPTE9SXG4gICAgICB9LFxuICAgICAgb2JqZWN0VmFsdWVOdW1iZXI6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLk9CSkVDVF9WQUxVRV9OVU1CRVJfQ09MT1JcbiAgICAgIH0sXG4gICAgICBvYmplY3RWYWx1ZUJvb2xlYW46IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLk9CSkVDVF9WQUxVRV9CT09MRUFOX0NPTE9SXG4gICAgICB9LFxuICAgICAgb2JqZWN0VmFsdWVGdW5jdGlvbktleXdvcmQ6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLk9CSkVDVF9WQUxVRV9GVU5DVElPTl9LRVlXT1JEX0NPTE9SLFxuICAgICAgICBmb250U3R5bGU6ICdpdGFsaWMnXG4gICAgICB9LFxuICAgICAgb2JqZWN0VmFsdWVGdW5jdGlvbk5hbWU6IHtcbiAgICAgICAgZm9udFN0eWxlOiAnaXRhbGljJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBUcmVlTm9kZToge1xuICAgICAgdHJlZU5vZGVCYXNlOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5CQVNFX0NPTE9SLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLkJBU0VfQkFDS0dST1VORF9DT0xPUixcblxuICAgICAgICBsaW5lSGVpZ2h0OiB0aGVtZS5UUkVFTk9ERV9MSU5FX0hFSUdIVCxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG5cbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuXG4gICAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLlRSRUVOT0RFX0ZPTlRfRkFNSUxZLFxuICAgICAgICBmb250U2l6ZTogdGhlbWUuVFJFRU5PREVfRk9OVF9TSVpFXG4gICAgICB9LFxuICAgICAgdHJlZU5vZGVQcmV2aWV3Q29udGFpbmVyOiB7fSxcbiAgICAgIHRyZWVOb2RlUGxhY2Vob2xkZXI6ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgICB3aGl0ZVNwYWNlOiAncHJlJyxcblxuICAgICAgICBmb250U2l6ZTogdGhlbWUuQVJST1dfRk9OVF9TSVpFLFxuICAgICAgICBtYXJnaW5SaWdodDogdGhlbWUuQVJST1dfTUFSR0lOX1JJR0hUXG4gICAgICB9LCBfdW5zZWxlY3RhYmxlMi5kZWZhdWx0KSxcbiAgICAgIHRyZWVOb2RlQXJyb3c6IHtcbiAgICAgICAgYmFzZTogKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAgY29sb3I6IHRoZW1lLkFSUk9XX0NPTE9SLFxuICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgIC8vIGxpbmVIZWlnaHQ6ICcxNHB4JyxcbiAgICAgICAgICBmb250U2l6ZTogdGhlbWUuQVJST1dfRk9OVF9TSVpFLFxuICAgICAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5BUlJPV19NQVJHSU5fUklHSFRcbiAgICAgICAgfSwgX3Vuc2VsZWN0YWJsZTIuZGVmYXVsdCksXG4gICAgICAgIGV4cGFuZGVkOiB7XG4gICAgICAgICAgV2Via2l0VHJhbnNmb3JtOiAncm90YXRlWig5MGRlZyknLFxuICAgICAgICAgIE1velRyYW5zZm9ybTogJ3JvdGF0ZVooOTBkZWcpJyxcbiAgICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGVaKDkwZGVnKSdcbiAgICAgICAgfSxcbiAgICAgICAgY29sbGFwc2VkOiB7XG4gICAgICAgICAgV2Via2l0VHJhbnNmb3JtOiAncm90YXRlWigwZGVnKScsXG4gICAgICAgICAgTW96VHJhbnNmb3JtOiAncm90YXRlWigwZGVnKScsXG4gICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlWigwZGVnKSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyZWVOb2RlQ2hpbGROb2Rlc0NvbnRhaW5lcjoge1xuICAgICAgICBtYXJnaW46IDAsIC8vIHJlc2V0IHVzZXItYWdlbnQgc3R5bGVcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLlRSRUVOT0RFX1BBRERJTkdfTEVGVFxuICAgICAgfVxuICAgIH0sXG5cbiAgICBUYWJsZUluc3BlY3Rvcjoge1xuICAgICAgYmFzZToge1xuICAgICAgICBjb2xvcjogdGhlbWUuQkFTRV9DT0xPUixcblxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICcgKyB0aGVtZS5UQUJMRV9CT1JERVJfQ09MT1IsXG4gICAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLkJBU0VfRk9OVF9GQU1JTFksXG4gICAgICAgIGZvbnRTaXplOiB0aGVtZS5CQVNFX0ZPTlRfU0laRSxcbiAgICAgICAgbGluZUhlaWdodDogJzEyMCUnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgVGFibGVJbnNwZWN0b3JIZWFkZXJDb250YWluZXI6IHtcbiAgICAgIGJhc2U6IHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBoZWlnaHQ6ICcxN3B4JyxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIG92ZXJmbG93WDogJ2hpZGRlbidcbiAgICAgIH0sXG4gICAgICB0YWJsZToge1xuICAgICAgICB0YWJsZUxheW91dDogJ2ZpeGVkJyxcbiAgICAgICAgYm9yZGVyU3BhY2luZzogMCxcbiAgICAgICAgYm9yZGVyQ29sbGFwc2U6ICdzZXBhcmF0ZScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBtYXJnaW46IDBcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgVGFibGVJbnNwZWN0b3JEYXRhQ29udGFpbmVyOiB7XG4gICAgICB0cjoge1xuICAgICAgICBkaXNwbGF5OiAndGFibGUtcm93J1xuICAgICAgfSxcbiAgICAgIHRkOiB7XG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBib3JkZXI6ICdub25lJywgLy8gcHJldmVudCBvdmVycmlkZXNcbiAgICAgICAgaGVpZ2h0OiAnMTZweCcsIC8vIC8qIDAuNSAqIHRhYmxlLmJhY2tncm91bmQtc2l6ZSBoZWlnaHQgKi9cbiAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgIHBhZGRpbmc6ICcxcHggNHB4JyxcbiAgICAgICAgV2Via2l0VXNlclNlbGVjdDogJ3RleHQnLFxuXG4gICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgbGluZUhlaWdodDogJzE0cHgnXG4gICAgICB9LFxuICAgICAgZGl2OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnc3RhdGljJyxcbiAgICAgICAgdG9wOiAnMTdweCcsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgb3ZlcmZsb3dZOiAnb3ZlcmxheScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknLFxuXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nXG4gICAgICB9LFxuICAgICAgdGFibGU6IHtcbiAgICAgICAgcG9zaXRvbjogJ3N0YXRpYycsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgYm9yZGVyVG9wOiAnMCBub25lIHRyYW5zcGFyZW50JyxcbiAgICAgICAgbWFyZ2luOiAwLCAvLyBwcmV2ZW50IHVzZXIgYWdlbnQgc3R5bGVzaGVldCBvdmVycmlkZXNcblxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IHRoZW1lLlRBQkxFX0RBVEFfQkFDS0dST1VORF9JTUFHRSxcbiAgICAgICAgYmFja2dyb3VuZFNpemU6IHRoZW1lLlRBQkxFX0RBVEFfQkFDS0dST1VORF9TSVpFLFxuICAgICAgICB0YWJsZUxheW91dDogJ2ZpeGVkJyxcblxuICAgICAgICAvLyB0YWJsZVxuICAgICAgICBib3JkZXJTcGFjaW5nOiAwLFxuICAgICAgICBib3JkZXJDb2xsYXBzZTogJ3NlcGFyYXRlJyxcbiAgICAgICAgLy8gaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG5cbiAgICAgICAgZm9udFNpemU6IHRoZW1lLkJBU0VfRk9OVF9TSVpFLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMTIwJSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgVGFibGVJbnNwZWN0b3JUSDoge1xuICAgICAgYmFzZToge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJywgLy8gYW5jaG9yIGZvciBzb3J0IGljb24gY29udGFpbmVyXG4gICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5UQUJMRV9USF9CQUNLR1JPVU5EX0NPTE9SLFxuICAgICAgICBib3JkZXJCb3R0b206ICcxcHggc29saWQgJyArIHRoZW1lLlRBQkxFX0JPUkRFUl9DT0xPUixcbiAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgICBwYWRkaW5nOiAnMCA0cHgnLFxuXG4gICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgbGluZUhlaWdodDogJzE0cHgnLFxuXG4gICAgICAgICc6aG92ZXInOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5UQUJMRV9USF9IT1ZFUl9DT0xPUlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGl2OiB7XG4gICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcblxuICAgICAgICAvLyBwcmV2ZW50IHVzZXIgYWdlbnQgc3R5bGVzaGVldCBvdmVycmlkZXNcbiAgICAgICAgZm9udFNpemU6IHRoZW1lLkJBU0VfRk9OVF9TSVpFLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMTIwJSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgVGFibGVJbnNwZWN0b3JMZWZ0Qm9yZGVyOiB7XG4gICAgICBub25lOiB7XG4gICAgICAgIGJvcmRlckxlZnQ6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIHNvbGlkOiB7XG4gICAgICAgIGJvcmRlckxlZnQ6ICcxcHggc29saWQgJyArIHRoZW1lLlRBQkxFX0JPUkRFUl9DT0xPUlxuICAgICAgfVxuICAgIH0sXG5cbiAgICBUYWJsZUluc3BlY3RvclNvcnRJY29uOiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBtYXJnaW5SaWdodDogMywgLy8gNCxcbiAgICAgIHdpZHRoOiA4LFxuICAgICAgaGVpZ2h0OiA3LFxuXG4gICAgICBtYXJnaW5Ub3A6IC03LFxuICAgICAgY29sb3I6IHRoZW1lLlRBQkxFX1NPUlRfSUNPTl9DT0xPUixcbiAgICAgIGZvbnRTaXplOiAxMlxuICAgIH0sIF91bnNlbGVjdGFibGUyLmRlZmF1bHQpXG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2dldC1pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9pcy1pdGVyYWJsZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY3JlYXRlU3R5bGVzID0gcmVxdWlyZSgnLi4vc3R5bGVzL2NyZWF0ZVN0eWxlcycpO1xuXG52YXIgX2NyZWF0ZVN0eWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVTdHlsZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU29ydEljb25Db250YWluZXIgPSBmdW5jdGlvbiBTb3J0SWNvbkNvbnRhaW5lcihwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAge1xuICAgICAgc3R5bGU6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogMSxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIGJvdHRvbTogMSxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvcHMuY2hpbGRyZW5cbiAgKTtcbn07XG5cbnZhciBTb3J0SWNvbiA9IGZ1bmN0aW9uIFNvcnRJY29uKF9yZWYsIF9yZWYyKSB7XG4gIHZhciBzb3J0QXNjZW5kaW5nID0gX3JlZi5zb3J0QXNjZW5kaW5nO1xuICB2YXIgdGhlbWUgPSBfcmVmMi50aGVtZTtcblxuICB2YXIgZ2x5cGggPSBzb3J0QXNjZW5kaW5nID8gJ+KWsicgOiAn4pa8JztcbiAgdmFyIHN0eWxlcyA9ICgwLCBfY3JlYXRlU3R5bGVzMi5kZWZhdWx0KSgnVGFibGVJbnNwZWN0b3JTb3J0SWNvbicsIHRoZW1lKTtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcyB9LFxuICAgIGdseXBoXG4gICk7XG59O1xuXG5Tb3J0SWNvbi5jb250ZXh0VHlwZXMgPSB7XG4gIHRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XSkuaXNSZXF1aXJlZFxufTtcblxudmFyIFRIID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoVEgsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRIKCkge1xuICAgIHZhciBfcmVmMztcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUSCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYzID0gVEguX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUSCkpLmNhbGwuYXBwbHkoX3JlZjMsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHsgaG92ZXJlZDogZmFsc2UgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFRILCBbe1xuICAgIGtleTogJ3RvZ2dsZUhvdmVyZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVIb3ZlcmVkKGhvdmVyZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBob3ZlcmVkIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIC8vIGVpdGhlciBub3Qgc29ydGVkLCBzb3J0IGFzY2VuZGluZyBvciBzb3J0IGRlc2NlbmRpbmdcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGJvcmRlclN0eWxlID0gX3Byb3BzLmJvcmRlclN0eWxlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfcHJvcHMub25DbGljayxcbiAgICAgICAgICBzb3J0QXNjZW5kaW5nID0gX3Byb3BzLnNvcnRBc2NlbmRpbmcsXG4gICAgICAgICAgc29ydGVkID0gX3Byb3BzLnNvcnRlZCxcbiAgICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWydib3JkZXJTdHlsZScsICdjaGlsZHJlbicsICdvbkNsaWNrJywgJ3NvcnRBc2NlbmRpbmcnLCAnc29ydGVkJ10pO1xuICAgICAgdmFyIHRoZW1lID0gdGhpcy5jb250ZXh0LnRoZW1lO1xuXG4gICAgICB2YXIgc3R5bGVzID0gKDAsIF9jcmVhdGVTdHlsZXMyLmRlZmF1bHQpKCdUYWJsZUluc3BlY3RvclRIJywgdGhlbWUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICd0aCcsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICAgICAgc3R5bGU6ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHN0eWxlcy5iYXNlLCBib3JkZXJTdHlsZSwgdGhpcy5zdGF0ZS5ob3ZlcmVkID8gc3R5bGVzLmJhc2VbJzpob3ZlciddIDoge30pLFxuICAgICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy50b2dnbGVIb3ZlcmVkLmJpbmQodGhpcywgdHJ1ZSksXG4gICAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLnRvZ2dsZUhvdmVyZWQuYmluZCh0aGlzLCBmYWxzZSksXG4gICAgICAgICAgb25DbGljazogb25DbGlja1xuICAgICAgICB9KSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRpdiB9LFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICksXG4gICAgICAgIHNvcnRlZCAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBTb3J0SWNvbkNvbnRhaW5lcixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNvcnRJY29uLCB7IHNvcnRBc2NlbmRpbmc6IHNvcnRBc2NlbmRpbmcgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRIO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuVEguY29udGV4dFR5cGVzID0ge1xuICB0aGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdF0pLmlzUmVxdWlyZWRcbn07XG5cblRILmRlZmF1bHRQcm9wcyA9IHtcbiAgc29ydEFzY2VuZGluZzogZmFsc2UsXG4gIHNvcnRlZDogZmFsc2UsXG4gIG9uQ2xpY2s6IHVuZGVmaW5lZFxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVEg7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZnJvbSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL2FycmF5L2Zyb21cIik7XG5cbnZhciBfZnJvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mcm9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyMltpXSA9IGFycltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKDAsIF9mcm9tMi5kZWZhdWx0KShhcnIpO1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmVkZXBsb3lzID0gdm9pZCAwO1xuZXhwb3J0cy5wcmVkZXBsb3lzID0ge1xuICAgIE9WTV9MMlRvTDFNZXNzYWdlUGFzc2VyOiAnMHg0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICBPVk1fRGVwbG95ZXJXaGl0ZWxpc3Q6ICcweDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDInLFxuICAgIEwyQ3Jvc3NEb21haW5NZXNzZW5nZXI6ICcweDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDcnLFxuICAgIE9WTV9HYXNQcmljZU9yYWNsZTogJzB4NDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwRicsXG4gICAgTDJTdGFuZGFyZEJyaWRnZTogJzB4NDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMCcsXG4gICAgT1ZNX1NlcXVlbmNlckZlZVZhdWx0OiAnMHg0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExJyxcbiAgICBMMlN0YW5kYXJkVG9rZW5GYWN0b3J5OiAnMHg0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEyJyxcbiAgICBPVk1fTDFCbG9ja051bWJlcjogJzB4NDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMycsXG4gICAgT1ZNX0VUSDogJzB4RGVhZERlQWRkZUFkZEVBZGRlYWRERWFEREVBZERlYUREZUFEMDAwMCcsXG4gICAgV0VUSDk6ICcweDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDYnLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWRlcGxveXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRDb250cmFjdEZyb21NYW5hZ2VyID0gZXhwb3J0cy5sb2FkQ29udHJhY3QgPSBleHBvcnRzLmdldENvbnRyYWN0RmFjdG9yeSA9IGV4cG9ydHMuZ2V0Q29udHJhY3RJbnRlcmZhY2UgPSBleHBvcnRzLmdldENvbnRyYWN0RGVmaW5pdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGV0aGVyc18xID0gcmVxdWlyZShcImV0aGVyc1wiKTtcbmNvbnN0IGdldENvbnRyYWN0RGVmaW5pdGlvbiA9IChuYW1lKSA9PiB7XG4gICAgY29uc3QgeyBnZXRDb250cmFjdEFydGlmYWN0IH0gPSByZXF1aXJlKCcuL2NvbnRyYWN0LWFydGlmYWN0cycpO1xuICAgIGNvbnN0IGFydGlmYWN0ID0gZ2V0Q29udHJhY3RBcnRpZmFjdChuYW1lKTtcbiAgICBpZiAoYXJ0aWZhY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBmaW5kIGFydGlmYWN0IGZvciBjb250cmFjdDogJHtuYW1lfWApO1xuICAgIH1cbiAgICByZXR1cm4gYXJ0aWZhY3Q7XG59O1xuZXhwb3J0cy5nZXRDb250cmFjdERlZmluaXRpb24gPSBnZXRDb250cmFjdERlZmluaXRpb247XG5jb25zdCBnZXRDb250cmFjdEludGVyZmFjZSA9IChuYW1lKSA9PiB7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IGV4cG9ydHMuZ2V0Q29udHJhY3REZWZpbml0aW9uKG5hbWUpO1xuICAgIHJldHVybiBuZXcgZXRoZXJzXzEuZXRoZXJzLnV0aWxzLkludGVyZmFjZShkZWZpbml0aW9uLmFiaSk7XG59O1xuZXhwb3J0cy5nZXRDb250cmFjdEludGVyZmFjZSA9IGdldENvbnRyYWN0SW50ZXJmYWNlO1xuY29uc3QgZ2V0Q29udHJhY3RGYWN0b3J5ID0gKG5hbWUsIHNpZ25lcikgPT4ge1xuICAgIGNvbnN0IGRlZmluaXRpb24gPSBleHBvcnRzLmdldENvbnRyYWN0RGVmaW5pdGlvbihuYW1lKTtcbiAgICBjb25zdCBjb250cmFjdEludGVyZmFjZSA9IGV4cG9ydHMuZ2V0Q29udHJhY3RJbnRlcmZhY2UobmFtZSk7XG4gICAgcmV0dXJuIG5ldyBldGhlcnNfMS5ldGhlcnMuQ29udHJhY3RGYWN0b3J5KGNvbnRyYWN0SW50ZXJmYWNlLCBkZWZpbml0aW9uLmJ5dGVjb2RlLCBzaWduZXIpO1xufTtcbmV4cG9ydHMuZ2V0Q29udHJhY3RGYWN0b3J5ID0gZ2V0Q29udHJhY3RGYWN0b3J5O1xuY29uc3QgbG9hZENvbnRyYWN0ID0gKG5hbWUsIGFkZHJlc3MsIHByb3ZpZGVyKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBldGhlcnNfMS5ldGhlcnMuQ29udHJhY3QoYWRkcmVzcywgZXhwb3J0cy5nZXRDb250cmFjdEludGVyZmFjZShuYW1lKSwgcHJvdmlkZXIpO1xufTtcbmV4cG9ydHMubG9hZENvbnRyYWN0ID0gbG9hZENvbnRyYWN0O1xuY29uc3QgbG9hZENvbnRyYWN0RnJvbU1hbmFnZXIgPSBhc3luYyAoYXJncykgPT4ge1xuICAgIGNvbnN0IHsgbmFtZSwgcHJveHksIExpYl9BZGRyZXNzTWFuYWdlciwgcHJvdmlkZXIgfSA9IGFyZ3M7XG4gICAgY29uc3QgYWRkcmVzcyA9IGF3YWl0IExpYl9BZGRyZXNzTWFuYWdlci5nZXRBZGRyZXNzKHByb3h5ID8gcHJveHkgOiBuYW1lKTtcbiAgICBpZiAoYWRkcmVzcyA9PT0gZXRoZXJzXzEuZXRoZXJzLmNvbnN0YW50cy5BZGRyZXNzWmVybykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExpYl9BZGRyZXNzTWFuYWdlciBkb2VzIG5vdCBoYXZlIGEgcmVjb3JkIGZvciBhIGNvbnRyYWN0IG5hbWVkOiAke25hbWV9YCk7XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzLmxvYWRDb250cmFjdChuYW1lLCBhZGRyZXNzLCBwcm92aWRlcik7XG59O1xuZXhwb3J0cy5sb2FkQ29udHJhY3RGcm9tTWFuYWdlciA9IGxvYWRDb250cmFjdEZyb21NYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJhY3QtZGVmcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29ubmVjdEwyQ29udHJhY3RzID0gZXhwb3J0cy5jb25uZWN0TDFDb250cmFjdHMgPSB2b2lkIDA7XG5jb25zdCBldGhlcnNfMSA9IHJlcXVpcmUoXCJldGhlcnNcIik7XG5jb25zdCBhYnN0cmFjdF9wcm92aWRlcl8xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXByb3ZpZGVyXCIpO1xuY29uc3QgY29udHJhY3RfYXJ0aWZhY3RzXzEgPSByZXF1aXJlKFwiLi9jb250cmFjdC1hcnRpZmFjdHNcIik7XG5jb25zdCBjb250cmFjdF9kZXBsb3llZF9hcnRpZmFjdHNfMSA9IHJlcXVpcmUoXCIuL2NvbnRyYWN0LWRlcGxveWVkLWFydGlmYWN0c1wiKTtcbmNvbnN0IHByZWRlcGxveXNfMSA9IHJlcXVpcmUoXCIuL3ByZWRlcGxveXNcIik7XG5jb25zdCBjaGVja1NpZ25lclR5cGUgPSAoc2lnbmVyT3JQcm92aWRlcikgPT4ge1xuICAgIGlmICghc2lnbmVyT3JQcm92aWRlcikge1xuICAgICAgICB0aHJvdyBFcnJvcignc2lnbmVyT3JQcm92aWRlciBhcmd1bWVudCBpcyB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgaWYgKCFhYnN0cmFjdF9wcm92aWRlcl8xLlByb3ZpZGVyLmlzUHJvdmlkZXIoc2lnbmVyT3JQcm92aWRlcikgJiZcbiAgICAgICAgIWV0aGVyc18xLlNpZ25lci5pc1NpZ25lcihzaWduZXJPclByb3ZpZGVyKSkge1xuICAgICAgICB0aHJvdyBFcnJvcignc2lnbmVyT3JQcm92aWRlciBhcmd1bWVudCBpcyB0aGUgd3JvbmcgdHlwZScpO1xuICAgIH1cbn07XG5jb25zdCBjb25uZWN0TDFDb250cmFjdHMgPSBhc3luYyAoc2lnbmVyT3JQcm92aWRlciwgbmV0d29yaykgPT4ge1xuICAgIGNoZWNrU2lnbmVyVHlwZShzaWduZXJPclByb3ZpZGVyKTtcbiAgICBpZiAoIVsnbWFpbm5ldCcsICdrb3ZhbicsICdnb2VybGknXS5pbmNsdWRlcyhuZXR3b3JrKSkge1xuICAgICAgICB0aHJvdyBFcnJvcignTXVzdCBzcGVjaWZ5IG5ldHdvcms6IG1haW5uZXQsIGtvdmFuLCBvciBnb2VybGkuJyk7XG4gICAgfVxuICAgIGNvbnN0IGdldEV0aGVyc0NvbnRyYWN0ID0gKG5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgYXJ0aWZhY3QgPSBjb250cmFjdF9kZXBsb3llZF9hcnRpZmFjdHNfMS5nZXREZXBsb3llZENvbnRyYWN0QXJ0aWZhY3QobmFtZSwgbmV0d29yayk7XG4gICAgICAgIHJldHVybiBuZXcgZXRoZXJzXzEuQ29udHJhY3QoYXJ0aWZhY3QuYWRkcmVzcywgYXJ0aWZhY3QuYWJpLCBzaWduZXJPclByb3ZpZGVyKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZHJlc3NNYW5hZ2VyOiBnZXRFdGhlcnNDb250cmFjdCgnTGliX0FkZHJlc3NNYW5hZ2VyJyksXG4gICAgICAgIGNhbm9uaWNhbFRyYW5zYWN0aW9uQ2hhaW46IGdldEV0aGVyc0NvbnRyYWN0KCdDYW5vbmljYWxUcmFuc2FjdGlvbkNoYWluJyksXG4gICAgICAgIHN0YXRlQ29tbWl0bWVudENoYWluOiBnZXRFdGhlcnNDb250cmFjdCgnU3RhdGVDb21taXRtZW50Q2hhaW4nKSxcbiAgICAgICAgeERvbWFpbk1lc3NlbmdlclByb3h5OiBnZXRFdGhlcnNDb250cmFjdCgnUHJveHlfX0wxQ3Jvc3NEb21haW5NZXNzZW5nZXInKSxcbiAgICAgICAgYm9uZE1hbmFnZXI6IGdldEV0aGVyc0NvbnRyYWN0KCdtb2NrQm9uZE1hbmFnZXInKSxcbiAgICB9O1xufTtcbmV4cG9ydHMuY29ubmVjdEwxQ29udHJhY3RzID0gY29ubmVjdEwxQ29udHJhY3RzO1xuY29uc3QgY29ubmVjdEwyQ29udHJhY3RzID0gYXN5bmMgKHNpZ25lck9yUHJvdmlkZXIpID0+IHtcbiAgICBjaGVja1NpZ25lclR5cGUoc2lnbmVyT3JQcm92aWRlcik7XG4gICAgY29uc3QgZ2V0RXRoZXJzQ29udHJhY3QgPSAobmFtZSwgaWZhY2UpID0+IHtcbiAgICAgICAgY29uc3QgYXJ0aWZhY3QgPSBjb250cmFjdF9hcnRpZmFjdHNfMS5nZXRDb250cmFjdEFydGlmYWN0KGlmYWNlIHx8IG5hbWUpO1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gcHJlZGVwbG95c18xLnByZWRlcGxveXNbbmFtZV07XG4gICAgICAgIHJldHVybiBuZXcgZXRoZXJzXzEuQ29udHJhY3QoYWRkcmVzcywgYXJ0aWZhY3QuYWJpLCBzaWduZXJPclByb3ZpZGVyKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGV0aDogZ2V0RXRoZXJzQ29udHJhY3QoJ09WTV9FVEgnKSxcbiAgICAgICAgeERvbWFpbk1lc3NlbmdlcjogZ2V0RXRoZXJzQ29udHJhY3QoJ0wyQ3Jvc3NEb21haW5NZXNzZW5nZXInKSxcbiAgICAgICAgbWVzc2FnZVBhc3NlcjogZ2V0RXRoZXJzQ29udHJhY3QoJ09WTV9MMlRvTDFNZXNzYWdlUGFzc2VyJyksXG4gICAgICAgIGRlcGxveWVyV2hpdGVMaXN0OiBnZXRFdGhlcnNDb250cmFjdCgnT1ZNX0RlcGxveWVyV2hpdGVsaXN0JyksXG4gICAgfTtcbn07XG5leHBvcnRzLmNvbm5lY3RMMkNvbnRyYWN0cyA9IGNvbm5lY3RMMkNvbnRyYWN0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3QtY29udHJhY3RzLmpzLm1hcCIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBjb3B5VG9DbGlwYm9hcmQgZnJvbSAnY29weS10by1jbGlwYm9hcmQnO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi4vdG9vbHRpcCc7XG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJy4uL2lkZW50aWNvbic7XG5pbXBvcnQgeyBzaG9ydGVuQWRkcmVzcyB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5pbXBvcnQgQWNjb3VudE1pc21hdGNoV2FybmluZyBmcm9tICcuLi9hY2NvdW50LW1pc21hdGNoLXdhcm5pbmcvYWNjb3VudC1taXNtYXRjaC13YXJuaW5nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IHRvQ2hlY2tzdW1IZXhBZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvaGV4c3RyaW5nLXV0aWxzJztcbmltcG9ydCBOaWNrbmFtZVBvcG92ZXJzIGZyb20gJy4uLy4uL2FwcC9tb2RhbHMvbmlja25hbWUtcG9wb3ZlcnMnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9WQVJJQU5ULFxuICBDQVJEU19WQVJJQU5ULFxuICBGTEFUX1ZBUklBTlQsXG59IGZyb20gJy4vc2VuZGVyLXRvLXJlY2lwaWVudC5jb25zdGFudHMnO1xuXG5jb25zdCB2YXJpYW50SGFzaCA9IHtcbiAgW0RFRkFVTFRfVkFSSUFOVF06ICdzZW5kZXItdG8tcmVjaXBpZW50LS1kZWZhdWx0JyxcbiAgW0NBUkRTX1ZBUklBTlRdOiAnc2VuZGVyLXRvLXJlY2lwaWVudC0tY2FyZHMnLFxuICBbRkxBVF9WQVJJQU5UXTogJ3NlbmRlci10by1yZWNpcGllbnQtLWZsYXQnLFxufTtcblxuZnVuY3Rpb24gU2VuZGVyQWRkcmVzcyh7XG4gIGFkZHJlc3NPbmx5LFxuICBjaGVja3N1bW1lZFNlbmRlckFkZHJlc3MsXG4gIHNlbmRlck5hbWUsXG4gIG9uU2VuZGVyQ2xpY2ssXG4gIHNlbmRlckFkZHJlc3MsXG4gIHdhcm5Vc2VyT25BY2NvdW50TWlzbWF0Y2gsXG59KSB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCBbYWRkcmVzc0NvcGllZCwgc2V0QWRkcmVzc0NvcGllZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGxldCB0b29sdGlwSHRtbCA9IDxwPnt0KCdjb3BpZWRFeGNsYW1hdGlvbicpfTwvcD47XG4gIGlmICghYWRkcmVzc0NvcGllZCkge1xuICAgIHRvb2x0aXBIdG1sID0gYWRkcmVzc09ubHkgPyAoXG4gICAgICA8cD57dCgnY29weUFkZHJlc3MnKX08L3A+XG4gICAgKSA6IChcbiAgICAgIDxwPlxuICAgICAgICB7c2hvcnRlbkFkZHJlc3MoY2hlY2tzdW1tZWRTZW5kZXJBZGRyZXNzKX1cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIHt0KCdjb3B5QWRkcmVzcycpfVxuICAgICAgPC9wPlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoXG4gICAgICAgICdzZW5kZXItdG8tcmVjaXBpZW50X19wYXJ0eSBzZW5kZXItdG8tcmVjaXBpZW50X19wYXJ0eS0tc2VuZGVyJyxcbiAgICAgICl9XG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIHNldEFkZHJlc3NDb3BpZWQodHJ1ZSk7XG4gICAgICAgIGNvcHlUb0NsaXBib2FyZChjaGVja3N1bW1lZFNlbmRlckFkZHJlc3MpO1xuICAgICAgICBpZiAob25TZW5kZXJDbGljaykge1xuICAgICAgICAgIG9uU2VuZGVyQ2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmRlci10by1yZWNpcGllbnRfX3NlbmRlci1pY29uXCI+XG4gICAgICAgIDxJZGVudGljb25cbiAgICAgICAgICBhZGRyZXNzPXt0b0NoZWNrc3VtSGV4QWRkcmVzcyhzZW5kZXJBZGRyZXNzKX1cbiAgICAgICAgICBkaWFtZXRlcj17MjR9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxUb29sdGlwXG4gICAgICAgIHBvc2l0aW9uPVwiYm90dG9tXCJcbiAgICAgICAgaHRtbD17dG9vbHRpcEh0bWx9XG4gICAgICAgIHdyYXBwZXJDbGFzc05hbWU9XCJzZW5kZXItdG8tcmVjaXBpZW50X190b29sdGlwLXdyYXBwZXJcIlxuICAgICAgICBjb250YWluZXJDbGFzc05hbWU9XCJzZW5kZXItdG8tcmVjaXBpZW50X190b29sdGlwLWNvbnRhaW5lclwiXG4gICAgICAgIG9uSGlkZGVuPXsoKSA9PiBzZXRBZGRyZXNzQ29waWVkKGZhbHNlKX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZW5kZXItdG8tcmVjaXBpZW50X19uYW1lXCI+XG4gICAgICAgICAge2FkZHJlc3NPbmx5ID8gKFxuICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgIHtgJHtzZW5kZXJOYW1lIHx8IHNob3J0ZW5BZGRyZXNzKGNoZWNrc3VtbWVkU2VuZGVyQWRkcmVzcyl9YH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgc2VuZGVyTmFtZVxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9Ub29sdGlwPlxuICAgICAge3dhcm5Vc2VyT25BY2NvdW50TWlzbWF0Y2ggJiYgKFxuICAgICAgICA8QWNjb3VudE1pc21hdGNoV2FybmluZyBhZGRyZXNzPXtzZW5kZXJBZGRyZXNzfSAvPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuU2VuZGVyQWRkcmVzcy5wcm9wVHlwZXMgPSB7XG4gIHNlbmRlck5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNoZWNrc3VtbWVkU2VuZGVyQWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWRkcmVzc09ubHk6IFByb3BUeXBlcy5ib29sLFxuICBzZW5kZXJBZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvblNlbmRlckNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgd2FyblVzZXJPbkFjY291bnRNaXNtYXRjaDogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gUmVjaXBpZW50V2l0aEFkZHJlc3Moe1xuICBjaGVja3N1bW1lZFJlY2lwaWVudEFkZHJlc3MsXG4gIG9uUmVjaXBpZW50Q2xpY2ssXG4gIGFkZHJlc3NPbmx5LFxuICByZWNpcGllbnROaWNrbmFtZSxcbiAgcmVjaXBpZW50RW5zLFxuICByZWNpcGllbnROYW1lLFxufSkge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgY29uc3QgW3Nob3dOaWNrbmFtZVBvcG92ZXJzLCBzZXRTaG93Tmlja25hbWVQb3BvdmVyc10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJzZW5kZXItdG8tcmVjaXBpZW50X19wYXJ0eSBzZW5kZXItdG8tcmVjaXBpZW50X19wYXJ0eS0tcmVjaXBpZW50IHNlbmRlci10by1yZWNpcGllbnRfX3BhcnR5LS1yZWNpcGllbnQtd2l0aC1hZGRyZXNzXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIHNldFNob3dOaWNrbmFtZVBvcG92ZXJzKHRydWUpO1xuICAgICAgICAgIGlmIChvblJlY2lwaWVudENsaWNrKSB7XG4gICAgICAgICAgICBvblJlY2lwaWVudENsaWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmRlci10by1yZWNpcGllbnRfX3NlbmRlci1pY29uXCI+XG4gICAgICAgICAgPElkZW50aWNvbiBhZGRyZXNzPXtjaGVja3N1bW1lZFJlY2lwaWVudEFkZHJlc3N9IGRpYW1ldGVyPXsyNH0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZGVyLXRvLXJlY2lwaWVudF9fbmFtZVwiPlxuICAgICAgICAgIHthZGRyZXNzT25seVxuICAgICAgICAgICAgPyByZWNpcGllbnROaWNrbmFtZSB8fFxuICAgICAgICAgICAgICByZWNpcGllbnRFbnMgfHxcbiAgICAgICAgICAgICAgc2hvcnRlbkFkZHJlc3MoY2hlY2tzdW1tZWRSZWNpcGllbnRBZGRyZXNzKVxuICAgICAgICAgICAgOiByZWNpcGllbnROaWNrbmFtZSB8fFxuICAgICAgICAgICAgICByZWNpcGllbnRFbnMgfHxcbiAgICAgICAgICAgICAgcmVjaXBpZW50TmFtZSB8fFxuICAgICAgICAgICAgICB0KCduZXdDb250cmFjdCcpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAge3Nob3dOaWNrbmFtZVBvcG92ZXJzID8gKFxuICAgICAgICA8Tmlja25hbWVQb3BvdmVyc1xuICAgICAgICAgIG9uQ2xvc2U9eygpID0+IHNldFNob3dOaWNrbmFtZVBvcG92ZXJzKGZhbHNlKX1cbiAgICAgICAgICBhZGRyZXNzPXtjaGVja3N1bW1lZFJlY2lwaWVudEFkZHJlc3N9XG4gICAgICAgIC8+XG4gICAgICApIDogbnVsbH1cbiAgICA8Lz5cbiAgKTtcbn1cblxuUmVjaXBpZW50V2l0aEFkZHJlc3MucHJvcFR5cGVzID0ge1xuICBjaGVja3N1bW1lZFJlY2lwaWVudEFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlY2lwaWVudE5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlY2lwaWVudEVuczogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVjaXBpZW50Tmlja25hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFkZHJlc3NPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgb25SZWNpcGllbnRDbGljazogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5mdW5jdGlvbiBBcnJvdyh7IHZhcmlhbnQgfSkge1xuICByZXR1cm4gdmFyaWFudCA9PT0gREVGQVVMVF9WQVJJQU5UID8gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZGVyLXRvLXJlY2lwaWVudF9fYXJyb3ctY29udGFpbmVyXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmRlci10by1yZWNpcGllbnRfX2Fycm93LWNpcmNsZVwiPlxuICAgICAgICA8aW1nIGhlaWdodD1cIjE1XCIgd2lkdGg9XCIxNVwiIHNyYz1cIi4vaW1hZ2VzL2Fycm93LXJpZ2h0LnN2Z1wiIGFsdD1cIlwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKSA6IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmRlci10by1yZWNpcGllbnRfX2Fycm93LWNvbnRhaW5lclwiPlxuICAgICAgPGltZyBoZWlnaHQ9XCIyMFwiIHNyYz1cIi4vaW1hZ2VzL2NhcmV0LXJpZ2h0LnN2Z1wiIGFsdD1cIlwiIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbkFycm93LnByb3BUeXBlcyA9IHtcbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFtERUZBVUxUX1ZBUklBTlQsIENBUkRTX1ZBUklBTlQsIEZMQVRfVkFSSUFOVF0pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2VuZGVyVG9SZWNpcGllbnQoe1xuICBzZW5kZXJBZGRyZXNzLFxuICBhZGRyZXNzT25seSxcbiAgc2VuZGVyTmFtZSxcbiAgcmVjaXBpZW50Tmlja25hbWUsXG4gIHJlY2lwaWVudE5hbWUsXG4gIHJlY2lwaWVudEVucyxcbiAgb25SZWNpcGllbnRDbGljayxcbiAgb25TZW5kZXJDbGljayxcbiAgcmVjaXBpZW50QWRkcmVzcyxcbiAgdmFyaWFudCxcbiAgd2FyblVzZXJPbkFjY291bnRNaXNtYXRjaCxcbn0pIHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IGNoZWNrc3VtbWVkU2VuZGVyQWRkcmVzcyA9IHRvQ2hlY2tzdW1IZXhBZGRyZXNzKHNlbmRlckFkZHJlc3MpO1xuICBjb25zdCBjaGVja3N1bW1lZFJlY2lwaWVudEFkZHJlc3MgPSB0b0NoZWNrc3VtSGV4QWRkcmVzcyhyZWNpcGllbnRBZGRyZXNzKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdzZW5kZXItdG8tcmVjaXBpZW50JywgdmFyaWFudEhhc2hbdmFyaWFudF0pfT5cbiAgICAgIDxTZW5kZXJBZGRyZXNzXG4gICAgICAgIGNoZWNrc3VtbWVkU2VuZGVyQWRkcmVzcz17Y2hlY2tzdW1tZWRTZW5kZXJBZGRyZXNzfVxuICAgICAgICBhZGRyZXNzT25seT17YWRkcmVzc09ubHl9XG4gICAgICAgIHNlbmRlck5hbWU9e3NlbmRlck5hbWV9XG4gICAgICAgIG9uU2VuZGVyQ2xpY2s9e29uU2VuZGVyQ2xpY2t9XG4gICAgICAgIHNlbmRlckFkZHJlc3M9e3NlbmRlckFkZHJlc3N9XG4gICAgICAgIHdhcm5Vc2VyT25BY2NvdW50TWlzbWF0Y2g9e3dhcm5Vc2VyT25BY2NvdW50TWlzbWF0Y2h9XG4gICAgICAvPlxuICAgICAgPEFycm93IHZhcmlhbnQ9e3ZhcmlhbnR9IC8+XG4gICAgICB7cmVjaXBpZW50QWRkcmVzcyA/IChcbiAgICAgICAgPFJlY2lwaWVudFdpdGhBZGRyZXNzXG4gICAgICAgICAgY2hlY2tzdW1tZWRSZWNpcGllbnRBZGRyZXNzPXtjaGVja3N1bW1lZFJlY2lwaWVudEFkZHJlc3N9XG4gICAgICAgICAgb25SZWNpcGllbnRDbGljaz17b25SZWNpcGllbnRDbGlja31cbiAgICAgICAgICBhZGRyZXNzT25seT17YWRkcmVzc09ubHl9XG4gICAgICAgICAgcmVjaXBpZW50Tmlja25hbWU9e3JlY2lwaWVudE5pY2tuYW1lfVxuICAgICAgICAgIHJlY2lwaWVudEVucz17cmVjaXBpZW50RW5zfVxuICAgICAgICAgIHJlY2lwaWVudE5hbWU9e3JlY2lwaWVudE5hbWV9XG4gICAgICAgIC8+XG4gICAgICApIDogKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmRlci10by1yZWNpcGllbnRfX3BhcnR5IHNlbmRlci10by1yZWNpcGllbnRfX3BhcnR5LS1yZWNpcGllbnRcIj5cbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1maWxlLXRleHQtb1wiIC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZW5kZXItdG8tcmVjaXBpZW50X19uYW1lXCI+e3QoJ25ld0NvbnRyYWN0Jyl9PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuU2VuZGVyVG9SZWNpcGllbnQuZGVmYXVsdFByb3BzID0ge1xuICB2YXJpYW50OiBERUZBVUxUX1ZBUklBTlQsXG4gIHdhcm5Vc2VyT25BY2NvdW50TWlzbWF0Y2g6IHRydWUsXG59O1xuXG5TZW5kZXJUb1JlY2lwaWVudC5wcm9wVHlwZXMgPSB7XG4gIHNlbmRlck5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNlbmRlckFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlY2lwaWVudE5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlY2lwaWVudEVuczogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVjaXBpZW50QWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVjaXBpZW50Tmlja25hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbREVGQVVMVF9WQVJJQU5ULCBDQVJEU19WQVJJQU5ULCBGTEFUX1ZBUklBTlRdKSxcbiAgYWRkcmVzc09ubHk6IFByb3BUeXBlcy5ib29sLFxuICBvblJlY2lwaWVudENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZW5kZXJDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHdhcm5Vc2VyT25BY2NvdW50TWlzbWF0Y2g6IFByb3BUeXBlcy5ib29sLFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Vbmtub3duVXNlckRlZmluZWRUeXBlRXJyb3IgPSB2b2lkIDA7XG4vKipcbiAqIFRoaXMgZXJyb3IgaW5kaWNhdGVzIHRoYXQgdGhlIGRlY29kZXIgd2FzIHVuYWJsZSB0byBsb2NhdGUgYSB1c2VyLWRlZmluZWRcbiAqIHR5cGUgKHN0cnVjdCwgZW51bSwgb3IgY29udHJhY3QgdHlwZSkgdmlhIGl0cyBJRC4gIFVuZm9ydHVuYXRlbHksIHdlIGNhbid0XG4gKiBhbHdheXMgYXZvaWQgdGhpcyBhdCB0aGUgbW9tZW50OyB3ZSdyZSBob3BpbmcgdG8gbWFrZSB0aGlzIG1vcmUgcm9idXN0IGluXG4gKiB0aGUgZnV0dXJlIHdpdGggVHJ1ZmZsZSBEQi4gIEluIHRoZSBtZWFudGltZSwgaXQgaXMgYXQgbGVhc3Qgd29ydGggbm90aW5nIHRoYXRcbiAqIHlvdSBzaG91bGQgbm90IGVuY291bnRlciB0aGlzIGVycm9yIGlmIHlvdXIgZW50aXJlIHByb2plY3Qgd2FzIHdyaXR0ZW4gaW5cbiAqIFNvbGlkaXR5IGFuZCBhbGwgY29tcGlsZWQgYXQgb25jZS4gIFNvcnJ5LlxuICpcbiAqIEBDYXRlZ29yeSBFcnJvcnNcbiAqL1xuY2xhc3MgVW5rbm93blVzZXJEZWZpbmVkVHlwZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGlkLCB0eXBlU3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgQ2Fubm90IGxvY2F0ZSBkZWZpbml0aW9uIGZvciAke3R5cGVTdHJpbmd9IChJRCAke2lkfSlgO1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJVbmtub3duVXNlckRlZmluZWRUeXBlRXJyb3JcIjtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnR5cGVTdHJpbmcgPSB0eXBlU3RyaW5nO1xuICAgIH1cbn1cbmV4cG9ydHMuVW5rbm93blVzZXJEZWZpbmVkVHlwZUVycm9yID0gVW5rbm93blVzZXJEZWZpbmVkVHlwZUVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiLypcclxuICogIGJpZy5qcyB2NS4yLjJcclxuICogIEEgc21hbGwsIGZhc3QsIGVhc3ktdG8tdXNlIGxpYnJhcnkgZm9yIGFyYml0cmFyeS1wcmVjaXNpb24gZGVjaW1hbCBhcml0aG1ldGljLlxyXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE4IE1pY2hhZWwgTWNsYXVnaGxpbiA8TThjaDg4bEBnbWFpbC5jb20+XHJcbiAqICBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9iaWcuanMvTElDRU5DRVxyXG4gKi9cclxuOyhmdW5jdGlvbiAoR0xPQkFMKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIHZhciBCaWcsXHJcblxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVESVRBQkxFIERFRkFVTFRTICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuXHJcbiAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZXMgYmVsb3cgbXVzdCBiZSBpbnRlZ2VycyB3aXRoaW4gdGhlIHN0YXRlZCByYW5nZXMuXHJcblxyXG4gICAgLypcclxuICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyAoRFApIG9mIHRoZSByZXN1bHRzIG9mIG9wZXJhdGlvbnMgaW52b2x2aW5nIGRpdmlzaW9uOlxyXG4gICAgICogZGl2IGFuZCBzcXJ0LCBhbmQgcG93IHdpdGggbmVnYXRpdmUgZXhwb25lbnRzLlxyXG4gICAgICovXHJcbiAgICBEUCA9IDIwLCAgICAgICAgICAvLyAwIHRvIE1BWF9EUFxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBUaGUgcm91bmRpbmcgbW9kZSAoUk0pIHVzZWQgd2hlbiByb3VuZGluZyB0byB0aGUgYWJvdmUgZGVjaW1hbCBwbGFjZXMuXHJcbiAgICAgKlxyXG4gICAgICogIDAgIFRvd2FyZHMgemVybyAoaS5lLiB0cnVuY2F0ZSwgbm8gcm91bmRpbmcpLiAgICAgICAoUk9VTkRfRE9XTilcclxuICAgICAqICAxICBUbyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHJvdW5kIHVwLiAgKFJPVU5EX0hBTEZfVVApXHJcbiAgICAgKiAgMiAgVG8gbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0byBldmVuLiAgIChST1VORF9IQUxGX0VWRU4pXHJcbiAgICAgKiAgMyAgQXdheSBmcm9tIHplcm8uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChST1VORF9VUClcclxuICAgICAqL1xyXG4gICAgUk0gPSAxLCAgICAgICAgICAgICAvLyAwLCAxLCAyIG9yIDNcclxuXHJcbiAgICAvLyBUaGUgbWF4aW11bSB2YWx1ZSBvZiBEUCBhbmQgQmlnLkRQLlxyXG4gICAgTUFYX0RQID0gMUU2LCAgICAgICAvLyAwIHRvIDEwMDAwMDBcclxuXHJcbiAgICAvLyBUaGUgbWF4aW11bSBtYWduaXR1ZGUgb2YgdGhlIGV4cG9uZW50IGFyZ3VtZW50IHRvIHRoZSBwb3cgbWV0aG9kLlxyXG4gICAgTUFYX1BPV0VSID0gMUU2LCAgICAvLyAxIHRvIDEwMDAwMDBcclxuXHJcbiAgICAvKlxyXG4gICAgICogVGhlIG5lZ2F0aXZlIGV4cG9uZW50IChORSkgYXQgYW5kIGJlbmVhdGggd2hpY2ggdG9TdHJpbmcgcmV0dXJucyBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAqIChKYXZhU2NyaXB0IG51bWJlcnM6IC03KVxyXG4gICAgICogLTEwMDAwMDAgaXMgdGhlIG1pbmltdW0gcmVjb21tZW5kZWQgZXhwb25lbnQgdmFsdWUgb2YgYSBCaWcuXHJcbiAgICAgKi9cclxuICAgIE5FID0gLTcsICAgICAgICAgICAgLy8gMCB0byAtMTAwMDAwMFxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBUaGUgcG9zaXRpdmUgZXhwb25lbnQgKFBFKSBhdCBhbmQgYWJvdmUgd2hpY2ggdG9TdHJpbmcgcmV0dXJucyBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAqIChKYXZhU2NyaXB0IG51bWJlcnM6IDIxKVxyXG4gICAgICogMTAwMDAwMCBpcyB0aGUgbWF4aW11bSByZWNvbW1lbmRlZCBleHBvbmVudCB2YWx1ZSBvZiBhIEJpZy5cclxuICAgICAqIChUaGlzIGxpbWl0IGlzIG5vdCBlbmZvcmNlZCBvciBjaGVja2VkLilcclxuICAgICAqL1xyXG4gICAgUEUgPSAyMSwgICAgICAgICAgICAvLyAwIHRvIDEwMDAwMDBcclxuXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuICAgIC8vIEVycm9yIG1lc3NhZ2VzLlxyXG4gICAgTkFNRSA9ICdbYmlnLmpzXSAnLFxyXG4gICAgSU5WQUxJRCA9IE5BTUUgKyAnSW52YWxpZCAnLFxyXG4gICAgSU5WQUxJRF9EUCA9IElOVkFMSUQgKyAnZGVjaW1hbCBwbGFjZXMnLFxyXG4gICAgSU5WQUxJRF9STSA9IElOVkFMSUQgKyAncm91bmRpbmcgbW9kZScsXHJcbiAgICBESVZfQllfWkVSTyA9IE5BTUUgKyAnRGl2aXNpb24gYnkgemVybycsXHJcblxyXG4gICAgLy8gVGhlIHNoYXJlZCBwcm90b3R5cGUgb2JqZWN0LlxyXG4gICAgUCA9IHt9LFxyXG4gICAgVU5ERUZJTkVEID0gdm9pZCAwLFxyXG4gICAgTlVNRVJJQyA9IC9eLT8oXFxkKyhcXC5cXGQqKT98XFwuXFxkKykoZVsrLV0/XFxkKyk/JC9pO1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBDcmVhdGUgYW5kIHJldHVybiBhIEJpZyBjb25zdHJ1Y3Rvci5cclxuICAgKlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIF9CaWdfKCkge1xyXG5cclxuICAgIC8qXHJcbiAgICAgKiBUaGUgQmlnIGNvbnN0cnVjdG9yIGFuZCBleHBvcnRlZCBmdW5jdGlvbi5cclxuICAgICAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgbmV3IGluc3RhbmNlIG9mIGEgQmlnIG51bWJlciBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWd9IEEgbnVtZXJpYyB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQmlnKG4pIHtcclxuICAgICAgdmFyIHggPSB0aGlzO1xyXG5cclxuICAgICAgLy8gRW5hYmxlIGNvbnN0cnVjdG9yIHVzYWdlIHdpdGhvdXQgbmV3LlxyXG4gICAgICBpZiAoISh4IGluc3RhbmNlb2YgQmlnKSkgcmV0dXJuIG4gPT09IFVOREVGSU5FRCA/IF9CaWdfKCkgOiBuZXcgQmlnKG4pO1xyXG5cclxuICAgICAgLy8gRHVwbGljYXRlLlxyXG4gICAgICBpZiAobiBpbnN0YW5jZW9mIEJpZykge1xyXG4gICAgICAgIHgucyA9IG4ucztcclxuICAgICAgICB4LmUgPSBuLmU7XHJcbiAgICAgICAgeC5jID0gbi5jLnNsaWNlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGFyc2UoeCwgbik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qXHJcbiAgICAgICAqIFJldGFpbiBhIHJlZmVyZW5jZSB0byB0aGlzIEJpZyBjb25zdHJ1Y3RvciwgYW5kIHNoYWRvdyBCaWcucHJvdG90eXBlLmNvbnN0cnVjdG9yIHdoaWNoXHJcbiAgICAgICAqIHBvaW50cyB0byBPYmplY3QuXHJcbiAgICAgICAqL1xyXG4gICAgICB4LmNvbnN0cnVjdG9yID0gQmlnO1xyXG4gICAgfVxyXG5cclxuICAgIEJpZy5wcm90b3R5cGUgPSBQO1xyXG4gICAgQmlnLkRQID0gRFA7XHJcbiAgICBCaWcuUk0gPSBSTTtcclxuICAgIEJpZy5ORSA9IE5FO1xyXG4gICAgQmlnLlBFID0gUEU7XHJcbiAgICBCaWcudmVyc2lvbiA9ICc1LjIuMic7XHJcblxyXG4gICAgcmV0dXJuIEJpZztcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFBhcnNlIHRoZSBudW1iZXIgb3Igc3RyaW5nIHZhbHVlIHBhc3NlZCB0byBhIEJpZyBjb25zdHJ1Y3Rvci5cclxuICAgKlxyXG4gICAqIHgge0JpZ30gQSBCaWcgbnVtYmVyIGluc3RhbmNlLlxyXG4gICAqIG4ge251bWJlcnxzdHJpbmd9IEEgbnVtZXJpYyB2YWx1ZS5cclxuICAgKi9cclxuICBmdW5jdGlvbiBwYXJzZSh4LCBuKSB7XHJcbiAgICB2YXIgZSwgaSwgbmw7XHJcblxyXG4gICAgLy8gTWludXMgemVybz9cclxuICAgIGlmIChuID09PSAwICYmIDEgLyBuIDwgMCkgbiA9ICctMCc7XHJcbiAgICBlbHNlIGlmICghTlVNRVJJQy50ZXN0KG4gKz0gJycpKSB0aHJvdyBFcnJvcihJTlZBTElEICsgJ251bWJlcicpO1xyXG5cclxuICAgIC8vIERldGVybWluZSBzaWduLlxyXG4gICAgeC5zID0gbi5jaGFyQXQoMCkgPT0gJy0nID8gKG4gPSBuLnNsaWNlKDEpLCAtMSkgOiAxO1xyXG5cclxuICAgIC8vIERlY2ltYWwgcG9pbnQ/XHJcbiAgICBpZiAoKGUgPSBuLmluZGV4T2YoJy4nKSkgPiAtMSkgbiA9IG4ucmVwbGFjZSgnLicsICcnKTtcclxuXHJcbiAgICAvLyBFeHBvbmVudGlhbCBmb3JtP1xyXG4gICAgaWYgKChpID0gbi5zZWFyY2goL2UvaSkpID4gMCkge1xyXG5cclxuICAgICAgLy8gRGV0ZXJtaW5lIGV4cG9uZW50LlxyXG4gICAgICBpZiAoZSA8IDApIGUgPSBpO1xyXG4gICAgICBlICs9ICtuLnNsaWNlKGkgKyAxKTtcclxuICAgICAgbiA9IG4uc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgfSBlbHNlIGlmIChlIDwgMCkge1xyXG5cclxuICAgICAgLy8gSW50ZWdlci5cclxuICAgICAgZSA9IG4ubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIG5sID0gbi5sZW5ndGg7XHJcblxyXG4gICAgLy8gRGV0ZXJtaW5lIGxlYWRpbmcgemVyb3MuXHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmwgJiYgbi5jaGFyQXQoaSkgPT0gJzAnOykgKytpO1xyXG5cclxuICAgIGlmIChpID09IG5sKSB7XHJcblxyXG4gICAgICAvLyBaZXJvLlxyXG4gICAgICB4LmMgPSBbeC5lID0gMF07XHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgLy8gRGV0ZXJtaW5lIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICBmb3IgKDsgbmwgPiAwICYmIG4uY2hhckF0KC0tbmwpID09ICcwJzspO1xyXG4gICAgICB4LmUgPSBlIC0gaSAtIDE7XHJcbiAgICAgIHguYyA9IFtdO1xyXG5cclxuICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gYXJyYXkgb2YgZGlnaXRzIHdpdGhvdXQgbGVhZGluZy90cmFpbGluZyB6ZXJvcy5cclxuICAgICAgZm9yIChlID0gMDsgaSA8PSBubDspIHguY1tlKytdID0gK24uY2hhckF0KGkrKyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHg7XHJcbiAgfVxyXG5cclxuXHJcbiAgLypcclxuICAgKiBSb3VuZCBCaWcgeCB0byBhIG1heGltdW0gb2YgZHAgZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBybS5cclxuICAgKiBDYWxsZWQgYnkgc3RyaW5naWZ5LCBQLmRpdiwgUC5yb3VuZCBhbmQgUC5zcXJ0LlxyXG4gICAqXHJcbiAgICogeCB7QmlnfSBUaGUgQmlnIHRvIHJvdW5kLlxyXG4gICAqIGRwIHtudW1iZXJ9IEludGVnZXIsIDAgdG8gTUFYX0RQIGluY2x1c2l2ZS5cclxuICAgKiBybSB7bnVtYmVyfSAwLCAxLCAyIG9yIDMgKERPV04sIEhBTEZfVVAsIEhBTEZfRVZFTiwgVVApXHJcbiAgICogW21vcmVdIHtib29sZWFufSBXaGV0aGVyIHRoZSByZXN1bHQgb2YgZGl2aXNpb24gd2FzIHRydW5jYXRlZC5cclxuICAgKi9cclxuICBmdW5jdGlvbiByb3VuZCh4LCBkcCwgcm0sIG1vcmUpIHtcclxuICAgIHZhciB4YyA9IHguYyxcclxuICAgICAgaSA9IHguZSArIGRwICsgMTtcclxuXHJcbiAgICBpZiAoaSA8IHhjLmxlbmd0aCkge1xyXG4gICAgICBpZiAocm0gPT09IDEpIHtcclxuXHJcbiAgICAgICAgLy8geGNbaV0gaXMgdGhlIGRpZ2l0IGFmdGVyIHRoZSBkaWdpdCB0aGF0IG1heSBiZSByb3VuZGVkIHVwLlxyXG4gICAgICAgIG1vcmUgPSB4Y1tpXSA+PSA1O1xyXG4gICAgICB9IGVsc2UgaWYgKHJtID09PSAyKSB7XHJcbiAgICAgICAgbW9yZSA9IHhjW2ldID4gNSB8fCB4Y1tpXSA9PSA1ICYmXHJcbiAgICAgICAgICAobW9yZSB8fCBpIDwgMCB8fCB4Y1tpICsgMV0gIT09IFVOREVGSU5FRCB8fCB4Y1tpIC0gMV0gJiAxKTtcclxuICAgICAgfSBlbHNlIGlmIChybSA9PT0gMykge1xyXG4gICAgICAgIG1vcmUgPSBtb3JlIHx8ICEheGNbMF07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbW9yZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChybSAhPT0gMCkgdGhyb3cgRXJyb3IoSU5WQUxJRF9STSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpIDwgMSkge1xyXG4gICAgICAgIHhjLmxlbmd0aCA9IDE7XHJcblxyXG4gICAgICAgIGlmIChtb3JlKSB7XHJcblxyXG4gICAgICAgICAgLy8gMSwgMC4xLCAwLjAxLCAwLjAwMSwgMC4wMDAxIGV0Yy5cclxuICAgICAgICAgIHguZSA9IC1kcDtcclxuICAgICAgICAgIHhjWzBdID0gMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgIC8vIFplcm8uXHJcbiAgICAgICAgICB4Y1swXSA9IHguZSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvLyBSZW1vdmUgYW55IGRpZ2l0cyBhZnRlciB0aGUgcmVxdWlyZWQgZGVjaW1hbCBwbGFjZXMuXHJcbiAgICAgICAgeGMubGVuZ3RoID0gaS0tO1xyXG5cclxuICAgICAgICAvLyBSb3VuZCB1cD9cclxuICAgICAgICBpZiAobW9yZSkge1xyXG5cclxuICAgICAgICAgIC8vIFJvdW5kaW5nIHVwIG1heSBtZWFuIHRoZSBwcmV2aW91cyBkaWdpdCBoYXMgdG8gYmUgcm91bmRlZCB1cC5cclxuICAgICAgICAgIGZvciAoOyArK3hjW2ldID4gOTspIHtcclxuICAgICAgICAgICAgeGNbaV0gPSAwO1xyXG4gICAgICAgICAgICBpZiAoIWktLSkge1xyXG4gICAgICAgICAgICAgICsreC5lO1xyXG4gICAgICAgICAgICAgIHhjLnVuc2hpZnQoMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgICAgICBmb3IgKGkgPSB4Yy5sZW5ndGg7ICF4Y1stLWldOykgeGMucG9wKCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAocm0gPCAwIHx8IHJtID4gMyB8fCBybSAhPT0gfn5ybSkge1xyXG4gICAgICB0aHJvdyBFcnJvcihJTlZBTElEX1JNKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geDtcclxuICB9XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIEJpZyB4IGluIG5vcm1hbCBvciBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgKiBIYW5kbGVzIFAudG9FeHBvbmVudGlhbCwgUC50b0ZpeGVkLCBQLnRvSlNPTiwgUC50b1ByZWNpc2lvbiwgUC50b1N0cmluZyBhbmQgUC52YWx1ZU9mLlxyXG4gICAqXHJcbiAgICogeCB7QmlnfVxyXG4gICAqIGlkPyB7bnVtYmVyfSBDYWxsZXIgaWQuXHJcbiAgICogICAgICAgICAxIHRvRXhwb25lbnRpYWxcclxuICAgKiAgICAgICAgIDIgdG9GaXhlZFxyXG4gICAqICAgICAgICAgMyB0b1ByZWNpc2lvblxyXG4gICAqICAgICAgICAgNCB2YWx1ZU9mXHJcbiAgICogbj8ge251bWJlcnx1bmRlZmluZWR9IENhbGxlcidzIGFyZ3VtZW50LlxyXG4gICAqIGs/IHtudW1iZXJ8dW5kZWZpbmVkfVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHN0cmluZ2lmeSh4LCBpZCwgbiwgaykge1xyXG4gICAgdmFyIGUsIHMsXHJcbiAgICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgIHogPSAheC5jWzBdO1xyXG5cclxuICAgIGlmIChuICE9PSBVTkRFRklORUQpIHtcclxuICAgICAgaWYgKG4gIT09IH5+biB8fCBuIDwgKGlkID09IDMpIHx8IG4gPiBNQVhfRFApIHtcclxuICAgICAgICB0aHJvdyBFcnJvcihpZCA9PSAzID8gSU5WQUxJRCArICdwcmVjaXNpb24nIDogSU5WQUxJRF9EUCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHggPSBuZXcgQmlnKHgpO1xyXG5cclxuICAgICAgLy8gVGhlIGluZGV4IG9mIHRoZSBkaWdpdCB0aGF0IG1heSBiZSByb3VuZGVkIHVwLlxyXG4gICAgICBuID0gayAtIHguZTtcclxuXHJcbiAgICAgIC8vIFJvdW5kP1xyXG4gICAgICBpZiAoeC5jLmxlbmd0aCA+ICsraykgcm91bmQoeCwgbiwgQmlnLlJNKTtcclxuXHJcbiAgICAgIC8vIHRvRml4ZWQ6IHJlY2FsY3VsYXRlIGsgYXMgeC5lIG1heSBoYXZlIGNoYW5nZWQgaWYgdmFsdWUgcm91bmRlZCB1cC5cclxuICAgICAgaWYgKGlkID09IDIpIGsgPSB4LmUgKyBuICsgMTtcclxuXHJcbiAgICAgIC8vIEFwcGVuZCB6ZXJvcz9cclxuICAgICAgZm9yICg7IHguYy5sZW5ndGggPCBrOykgeC5jLnB1c2goMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZSA9IHguZTtcclxuICAgIHMgPSB4LmMuam9pbignJyk7XHJcbiAgICBuID0gcy5sZW5ndGg7XHJcblxyXG4gICAgLy8gRXhwb25lbnRpYWwgbm90YXRpb24/XHJcbiAgICBpZiAoaWQgIT0gMiAmJiAoaWQgPT0gMSB8fCBpZCA9PSAzICYmIGsgPD0gZSB8fCBlIDw9IEJpZy5ORSB8fCBlID49IEJpZy5QRSkpIHtcclxuICAgICAgcyA9IHMuY2hhckF0KDApICsgKG4gPiAxID8gJy4nICsgcy5zbGljZSgxKSA6ICcnKSArIChlIDwgMCA/ICdlJyA6ICdlKycpICsgZTtcclxuXHJcbiAgICAvLyBOb3JtYWwgbm90YXRpb24uXHJcbiAgICB9IGVsc2UgaWYgKGUgPCAwKSB7XHJcbiAgICAgIGZvciAoOyArK2U7KSBzID0gJzAnICsgcztcclxuICAgICAgcyA9ICcwLicgKyBzO1xyXG4gICAgfSBlbHNlIGlmIChlID4gMCkge1xyXG4gICAgICBpZiAoKytlID4gbikgZm9yIChlIC09IG47IGUtLTspIHMgKz0gJzAnO1xyXG4gICAgICBlbHNlIGlmIChlIDwgbikgcyA9IHMuc2xpY2UoMCwgZSkgKyAnLicgKyBzLnNsaWNlKGUpO1xyXG4gICAgfSBlbHNlIGlmIChuID4gMSkge1xyXG4gICAgICBzID0gcy5jaGFyQXQoMCkgKyAnLicgKyBzLnNsaWNlKDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB4LnMgPCAwICYmICgheiB8fCBpZCA9PSA0KSA/ICctJyArIHMgOiBzO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIFByb3RvdHlwZS9pbnN0YW5jZSBtZXRob2RzXHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIGFic29sdXRlIHZhbHVlIG9mIHRoaXMgQmlnLlxyXG4gICAqL1xyXG4gIFAuYWJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHggPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKTtcclxuICAgIHgucyA9IDE7XHJcbiAgICByZXR1cm4geDtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gMSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBvZiBCaWcgeSxcclxuICAgKiAgICAgICAtMSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaXMgbGVzcyB0aGFuIHRoZSB2YWx1ZSBvZiBCaWcgeSwgb3JcclxuICAgKiAgICAgICAgMCBpZiB0aGV5IGhhdmUgdGhlIHNhbWUgdmFsdWUuXHJcbiAgKi9cclxuICBQLmNtcCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICB2YXIgaXNuZWcsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICB4YyA9IHguYyxcclxuICAgICAgeWMgPSAoeSA9IG5ldyB4LmNvbnN0cnVjdG9yKHkpKS5jLFxyXG4gICAgICBpID0geC5zLFxyXG4gICAgICBqID0geS5zLFxyXG4gICAgICBrID0geC5lLFxyXG4gICAgICBsID0geS5lO1xyXG5cclxuICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgaWYgKCF4Y1swXSB8fCAheWNbMF0pIHJldHVybiAheGNbMF0gPyAheWNbMF0gPyAwIDogLWogOiBpO1xyXG5cclxuICAgIC8vIFNpZ25zIGRpZmZlcj9cclxuICAgIGlmIChpICE9IGopIHJldHVybiBpO1xyXG5cclxuICAgIGlzbmVnID0gaSA8IDA7XHJcblxyXG4gICAgLy8gQ29tcGFyZSBleHBvbmVudHMuXHJcbiAgICBpZiAoayAhPSBsKSByZXR1cm4gayA+IGwgXiBpc25lZyA/IDEgOiAtMTtcclxuXHJcbiAgICBqID0gKGsgPSB4Yy5sZW5ndGgpIDwgKGwgPSB5Yy5sZW5ndGgpID8gayA6IGw7XHJcblxyXG4gICAgLy8gQ29tcGFyZSBkaWdpdCBieSBkaWdpdC5cclxuICAgIGZvciAoaSA9IC0xOyArK2kgPCBqOykge1xyXG4gICAgICBpZiAoeGNbaV0gIT0geWNbaV0pIHJldHVybiB4Y1tpXSA+IHljW2ldIF4gaXNuZWcgPyAxIDogLTE7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ29tcGFyZSBsZW5ndGhzLlxyXG4gICAgcmV0dXJuIGsgPT0gbCA/IDAgOiBrID4gbCBeIGlzbmVnID8gMSA6IC0xO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGRpdmlkZWQgYnkgdGhlIHZhbHVlIG9mIEJpZyB5LCByb3VuZGVkLFxyXG4gICAqIGlmIG5lY2Vzc2FyeSwgdG8gYSBtYXhpbXVtIG9mIEJpZy5EUCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIEJpZy5STS5cclxuICAgKi9cclxuICBQLmRpdiA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICB2YXIgeCA9IHRoaXMsXHJcbiAgICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgIGEgPSB4LmMsICAgICAgICAgICAgICAgICAgLy8gZGl2aWRlbmRcclxuICAgICAgYiA9ICh5ID0gbmV3IEJpZyh5KSkuYywgICAvLyBkaXZpc29yXHJcbiAgICAgIGsgPSB4LnMgPT0geS5zID8gMSA6IC0xLFxyXG4gICAgICBkcCA9IEJpZy5EUDtcclxuXHJcbiAgICBpZiAoZHAgIT09IH5+ZHAgfHwgZHAgPCAwIHx8IGRwID4gTUFYX0RQKSB0aHJvdyBFcnJvcihJTlZBTElEX0RQKTtcclxuXHJcbiAgICAvLyBEaXZpc29yIGlzIHplcm8/XHJcbiAgICBpZiAoIWJbMF0pIHRocm93IEVycm9yKERJVl9CWV9aRVJPKTtcclxuXHJcbiAgICAvLyBEaXZpZGVuZCBpcyAwPyBSZXR1cm4gKy0wLlxyXG4gICAgaWYgKCFhWzBdKSByZXR1cm4gbmV3IEJpZyhrICogMCk7XHJcblxyXG4gICAgdmFyIGJsLCBidCwgbiwgY21wLCByaSxcclxuICAgICAgYnogPSBiLnNsaWNlKCksXHJcbiAgICAgIGFpID0gYmwgPSBiLmxlbmd0aCxcclxuICAgICAgYWwgPSBhLmxlbmd0aCxcclxuICAgICAgciA9IGEuc2xpY2UoMCwgYmwpLCAgIC8vIHJlbWFpbmRlclxyXG4gICAgICBybCA9IHIubGVuZ3RoLFxyXG4gICAgICBxID0geSwgICAgICAgICAgICAgICAgLy8gcXVvdGllbnRcclxuICAgICAgcWMgPSBxLmMgPSBbXSxcclxuICAgICAgcWkgPSAwLFxyXG4gICAgICBkID0gZHAgKyAocS5lID0geC5lIC0geS5lKSArIDE7ICAgIC8vIG51bWJlciBvZiBkaWdpdHMgb2YgdGhlIHJlc3VsdFxyXG5cclxuICAgIHEucyA9IGs7XHJcbiAgICBrID0gZCA8IDAgPyAwIDogZDtcclxuXHJcbiAgICAvLyBDcmVhdGUgdmVyc2lvbiBvZiBkaXZpc29yIHdpdGggbGVhZGluZyB6ZXJvLlxyXG4gICAgYnoudW5zaGlmdCgwKTtcclxuXHJcbiAgICAvLyBBZGQgemVyb3MgdG8gbWFrZSByZW1haW5kZXIgYXMgbG9uZyBhcyBkaXZpc29yLlxyXG4gICAgZm9yICg7IHJsKysgPCBibDspIHIucHVzaCgwKTtcclxuXHJcbiAgICBkbyB7XHJcblxyXG4gICAgICAvLyBuIGlzIGhvdyBtYW55IHRpbWVzIHRoZSBkaXZpc29yIGdvZXMgaW50byBjdXJyZW50IHJlbWFpbmRlci5cclxuICAgICAgZm9yIChuID0gMDsgbiA8IDEwOyBuKyspIHtcclxuXHJcbiAgICAgICAgLy8gQ29tcGFyZSBkaXZpc29yIGFuZCByZW1haW5kZXIuXHJcbiAgICAgICAgaWYgKGJsICE9IChybCA9IHIubGVuZ3RoKSkge1xyXG4gICAgICAgICAgY21wID0gYmwgPiBybCA/IDEgOiAtMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZm9yIChyaSA9IC0xLCBjbXAgPSAwOyArK3JpIDwgYmw7KSB7XHJcbiAgICAgICAgICAgIGlmIChiW3JpXSAhPSByW3JpXSkge1xyXG4gICAgICAgICAgICAgIGNtcCA9IGJbcmldID4gcltyaV0gPyAxIDogLTE7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIGRpdmlzb3IgPCByZW1haW5kZXIsIHN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXHJcbiAgICAgICAgaWYgKGNtcCA8IDApIHtcclxuXHJcbiAgICAgICAgICAvLyBSZW1haW5kZXIgY2FuJ3QgYmUgbW9yZSB0aGFuIDEgZGlnaXQgbG9uZ2VyIHRoYW4gZGl2aXNvci5cclxuICAgICAgICAgIC8vIEVxdWFsaXNlIGxlbmd0aHMgdXNpbmcgZGl2aXNvciB3aXRoIGV4dHJhIGxlYWRpbmcgemVybz9cclxuICAgICAgICAgIGZvciAoYnQgPSBybCA9PSBibCA/IGIgOiBiejsgcmw7KSB7XHJcbiAgICAgICAgICAgIGlmIChyWy0tcmxdIDwgYnRbcmxdKSB7XHJcbiAgICAgICAgICAgICAgcmkgPSBybDtcclxuICAgICAgICAgICAgICBmb3IgKDsgcmkgJiYgIXJbLS1yaV07KSByW3JpXSA9IDk7XHJcbiAgICAgICAgICAgICAgLS1yW3JpXTtcclxuICAgICAgICAgICAgICByW3JsXSArPSAxMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByW3JsXSAtPSBidFtybF07XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZm9yICg7ICFyWzBdOykgci5zaGlmdCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEFkZCB0aGUgZGlnaXQgbiB0byB0aGUgcmVzdWx0IGFycmF5LlxyXG4gICAgICBxY1txaSsrXSA9IGNtcCA/IG4gOiArK247XHJcblxyXG4gICAgICAvLyBVcGRhdGUgdGhlIHJlbWFpbmRlci5cclxuICAgICAgaWYgKHJbMF0gJiYgY21wKSByW3JsXSA9IGFbYWldIHx8IDA7XHJcbiAgICAgIGVsc2UgciA9IFthW2FpXV07XHJcblxyXG4gICAgfSB3aGlsZSAoKGFpKysgPCBhbCB8fCByWzBdICE9PSBVTkRFRklORUQpICYmIGstLSk7XHJcblxyXG4gICAgLy8gTGVhZGluZyB6ZXJvPyBEbyBub3QgcmVtb3ZlIGlmIHJlc3VsdCBpcyBzaW1wbHkgemVybyAocWkgPT0gMSkuXHJcbiAgICBpZiAoIXFjWzBdICYmIHFpICE9IDEpIHtcclxuXHJcbiAgICAgIC8vIFRoZXJlIGNhbid0IGJlIG1vcmUgdGhhbiBvbmUgemVyby5cclxuICAgICAgcWMuc2hpZnQoKTtcclxuICAgICAgcS5lLS07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUm91bmQ/XHJcbiAgICBpZiAocWkgPiBkKSByb3VuZChxLCBkcCwgQmlnLlJNLCByWzBdICE9PSBVTkRFRklORUQpO1xyXG5cclxuICAgIHJldHVybiBxO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBlcXVhbCB0byB0aGUgdmFsdWUgb2YgQmlnIHksIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICovXHJcbiAgUC5lcSA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICByZXR1cm4gIXRoaXMuY21wKHkpO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBncmVhdGVyIHRoYW4gdGhlIHZhbHVlIG9mIEJpZyB5LCBvdGhlcndpc2UgcmV0dXJuXHJcbiAgICogZmFsc2UuXHJcbiAgICovXHJcbiAgUC5ndCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5jbXAoeSkgPiAwO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHZhbHVlIG9mIEJpZyB5LCBvdGhlcndpc2VcclxuICAgKiByZXR1cm4gZmFsc2UuXHJcbiAgICovXHJcbiAgUC5ndGUgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgcmV0dXJuIHRoaXMuY21wKHkpID4gLTE7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGxlc3MgdGhhbiB0aGUgdmFsdWUgb2YgQmlnIHksIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXHJcbiAgICovXHJcbiAgUC5sdCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5jbXAoeSkgPCAwO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHZhbHVlIG9mIEJpZyB5LCBvdGhlcndpc2VcclxuICAgKiByZXR1cm4gZmFsc2UuXHJcbiAgICovXHJcbiAgUC5sdGUgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgcmV0dXJuIHRoaXMuY21wKHkpIDwgMTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBtaW51cyB0aGUgdmFsdWUgb2YgQmlnIHkuXHJcbiAgICovXHJcbiAgUC5taW51cyA9IFAuc3ViID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHZhciBpLCBqLCB0LCB4bHR5LFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgQmlnID0geC5jb25zdHJ1Y3RvcixcclxuICAgICAgYSA9IHgucyxcclxuICAgICAgYiA9ICh5ID0gbmV3IEJpZyh5KSkucztcclxuXHJcbiAgICAvLyBTaWducyBkaWZmZXI/XHJcbiAgICBpZiAoYSAhPSBiKSB7XHJcbiAgICAgIHkucyA9IC1iO1xyXG4gICAgICByZXR1cm4geC5wbHVzKHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciB4YyA9IHguYy5zbGljZSgpLFxyXG4gICAgICB4ZSA9IHguZSxcclxuICAgICAgeWMgPSB5LmMsXHJcbiAgICAgIHllID0geS5lO1xyXG5cclxuICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgaWYgKCF4Y1swXSB8fCAheWNbMF0pIHtcclxuXHJcbiAgICAgIC8vIHkgaXMgbm9uLXplcm8/IHggaXMgbm9uLXplcm8/IE9yIGJvdGggYXJlIHplcm8uXHJcbiAgICAgIHJldHVybiB5Y1swXSA/ICh5LnMgPSAtYiwgeSkgOiBuZXcgQmlnKHhjWzBdID8geCA6IDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERldGVybWluZSB3aGljaCBpcyB0aGUgYmlnZ2VyIG51bWJlci4gUHJlcGVuZCB6ZXJvcyB0byBlcXVhbGlzZSBleHBvbmVudHMuXHJcbiAgICBpZiAoYSA9IHhlIC0geWUpIHtcclxuXHJcbiAgICAgIGlmICh4bHR5ID0gYSA8IDApIHtcclxuICAgICAgICBhID0gLWE7XHJcbiAgICAgICAgdCA9IHhjO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHllID0geGU7XHJcbiAgICAgICAgdCA9IHljO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgZm9yIChiID0gYTsgYi0tOykgdC5wdXNoKDApO1xyXG4gICAgICB0LnJldmVyc2UoKTtcclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAvLyBFeHBvbmVudHMgZXF1YWwuIENoZWNrIGRpZ2l0IGJ5IGRpZ2l0LlxyXG4gICAgICBqID0gKCh4bHR5ID0geGMubGVuZ3RoIDwgeWMubGVuZ3RoKSA/IHhjIDogeWMpLmxlbmd0aDtcclxuXHJcbiAgICAgIGZvciAoYSA9IGIgPSAwOyBiIDwgajsgYisrKSB7XHJcbiAgICAgICAgaWYgKHhjW2JdICE9IHljW2JdKSB7XHJcbiAgICAgICAgICB4bHR5ID0geGNbYl0gPCB5Y1tiXTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHggPCB5PyBQb2ludCB4YyB0byB0aGUgYXJyYXkgb2YgdGhlIGJpZ2dlciBudW1iZXIuXHJcbiAgICBpZiAoeGx0eSkge1xyXG4gICAgICB0ID0geGM7XHJcbiAgICAgIHhjID0geWM7XHJcbiAgICAgIHljID0gdDtcclxuICAgICAgeS5zID0gLXkucztcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogQXBwZW5kIHplcm9zIHRvIHhjIGlmIHNob3J0ZXIuIE5vIG5lZWQgdG8gYWRkIHplcm9zIHRvIHljIGlmIHNob3J0ZXIgYXMgc3VidHJhY3Rpb24gb25seVxyXG4gICAgICogbmVlZHMgdG8gc3RhcnQgYXQgeWMubGVuZ3RoLlxyXG4gICAgICovXHJcbiAgICBpZiAoKGIgPSAoaiA9IHljLmxlbmd0aCkgLSAoaSA9IHhjLmxlbmd0aCkpID4gMCkgZm9yICg7IGItLTspIHhjW2krK10gPSAwO1xyXG5cclxuICAgIC8vIFN1YnRyYWN0IHljIGZyb20geGMuXHJcbiAgICBmb3IgKGIgPSBpOyBqID4gYTspIHtcclxuICAgICAgaWYgKHhjWy0tal0gPCB5Y1tqXSkge1xyXG4gICAgICAgIGZvciAoaSA9IGo7IGkgJiYgIXhjWy0taV07KSB4Y1tpXSA9IDk7XHJcbiAgICAgICAgLS14Y1tpXTtcclxuICAgICAgICB4Y1tqXSArPSAxMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgeGNbal0gLT0geWNbal07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgZm9yICg7IHhjWy0tYl0gPT09IDA7KSB4Yy5wb3AoKTtcclxuXHJcbiAgICAvLyBSZW1vdmUgbGVhZGluZyB6ZXJvcyBhbmQgYWRqdXN0IGV4cG9uZW50IGFjY29yZGluZ2x5LlxyXG4gICAgZm9yICg7IHhjWzBdID09PSAwOykge1xyXG4gICAgICB4Yy5zaGlmdCgpO1xyXG4gICAgICAtLXllO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgheGNbMF0pIHtcclxuXHJcbiAgICAgIC8vIG4gLSBuID0gKzBcclxuICAgICAgeS5zID0gMTtcclxuXHJcbiAgICAgIC8vIFJlc3VsdCBtdXN0IGJlIHplcm8uXHJcbiAgICAgIHhjID0gW3llID0gMF07XHJcbiAgICB9XHJcblxyXG4gICAgeS5jID0geGM7XHJcbiAgICB5LmUgPSB5ZTtcclxuXHJcbiAgICByZXR1cm4geTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBtb2R1bG8gdGhlIHZhbHVlIG9mIEJpZyB5LlxyXG4gICAqL1xyXG4gIFAubW9kID0gZnVuY3Rpb24gKHkpIHtcclxuICAgIHZhciB5Z3R4LFxyXG4gICAgICB4ID0gdGhpcyxcclxuICAgICAgQmlnID0geC5jb25zdHJ1Y3RvcixcclxuICAgICAgYSA9IHgucyxcclxuICAgICAgYiA9ICh5ID0gbmV3IEJpZyh5KSkucztcclxuXHJcbiAgICBpZiAoIXkuY1swXSkgdGhyb3cgRXJyb3IoRElWX0JZX1pFUk8pO1xyXG5cclxuICAgIHgucyA9IHkucyA9IDE7XHJcbiAgICB5Z3R4ID0geS5jbXAoeCkgPT0gMTtcclxuICAgIHgucyA9IGE7XHJcbiAgICB5LnMgPSBiO1xyXG5cclxuICAgIGlmICh5Z3R4KSByZXR1cm4gbmV3IEJpZyh4KTtcclxuXHJcbiAgICBhID0gQmlnLkRQO1xyXG4gICAgYiA9IEJpZy5STTtcclxuICAgIEJpZy5EUCA9IEJpZy5STSA9IDA7XHJcbiAgICB4ID0geC5kaXYoeSk7XHJcbiAgICBCaWcuRFAgPSBhO1xyXG4gICAgQmlnLlJNID0gYjtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5taW51cyh4LnRpbWVzKHkpKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBwbHVzIHRoZSB2YWx1ZSBvZiBCaWcgeS5cclxuICAgKi9cclxuICBQLnBsdXMgPSBQLmFkZCA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICB2YXIgdCxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgIGEgPSB4LnMsXHJcbiAgICAgIGIgPSAoeSA9IG5ldyBCaWcoeSkpLnM7XHJcblxyXG4gICAgLy8gU2lnbnMgZGlmZmVyP1xyXG4gICAgaWYgKGEgIT0gYikge1xyXG4gICAgICB5LnMgPSAtYjtcclxuICAgICAgcmV0dXJuIHgubWludXMoeSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHhlID0geC5lLFxyXG4gICAgICB4YyA9IHguYyxcclxuICAgICAgeWUgPSB5LmUsXHJcbiAgICAgIHljID0geS5jO1xyXG5cclxuICAgIC8vIEVpdGhlciB6ZXJvPyB5IGlzIG5vbi16ZXJvPyB4IGlzIG5vbi16ZXJvPyBPciBib3RoIGFyZSB6ZXJvLlxyXG4gICAgaWYgKCF4Y1swXSB8fCAheWNbMF0pIHJldHVybiB5Y1swXSA/IHkgOiBuZXcgQmlnKHhjWzBdID8geCA6IGEgKiAwKTtcclxuXHJcbiAgICB4YyA9IHhjLnNsaWNlKCk7XHJcblxyXG4gICAgLy8gUHJlcGVuZCB6ZXJvcyB0byBlcXVhbGlzZSBleHBvbmVudHMuXHJcbiAgICAvLyBOb3RlOiByZXZlcnNlIGZhc3RlciB0aGFuIHVuc2hpZnRzLlxyXG4gICAgaWYgKGEgPSB4ZSAtIHllKSB7XHJcbiAgICAgIGlmIChhID4gMCkge1xyXG4gICAgICAgIHllID0geGU7XHJcbiAgICAgICAgdCA9IHljO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGEgPSAtYTtcclxuICAgICAgICB0ID0geGM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHQucmV2ZXJzZSgpO1xyXG4gICAgICBmb3IgKDsgYS0tOykgdC5wdXNoKDApO1xyXG4gICAgICB0LnJldmVyc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQb2ludCB4YyB0byB0aGUgbG9uZ2VyIGFycmF5LlxyXG4gICAgaWYgKHhjLmxlbmd0aCAtIHljLmxlbmd0aCA8IDApIHtcclxuICAgICAgdCA9IHljO1xyXG4gICAgICB5YyA9IHhjO1xyXG4gICAgICB4YyA9IHQ7XHJcbiAgICB9XHJcblxyXG4gICAgYSA9IHljLmxlbmd0aDtcclxuXHJcbiAgICAvLyBPbmx5IHN0YXJ0IGFkZGluZyBhdCB5Yy5sZW5ndGggLSAxIGFzIHRoZSBmdXJ0aGVyIGRpZ2l0cyBvZiB4YyBjYW4gYmUgbGVmdCBhcyB0aGV5IGFyZS5cclxuICAgIGZvciAoYiA9IDA7IGE7IHhjW2FdICU9IDEwKSBiID0gKHhjWy0tYV0gPSB4Y1thXSArIHljW2FdICsgYikgLyAxMCB8IDA7XHJcblxyXG4gICAgLy8gTm8gbmVlZCB0byBjaGVjayBmb3IgemVybywgYXMgK3ggKyAreSAhPSAwICYmIC14ICsgLXkgIT0gMFxyXG5cclxuICAgIGlmIChiKSB7XHJcbiAgICAgIHhjLnVuc2hpZnQoYik7XHJcbiAgICAgICsreWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgZm9yIChhID0geGMubGVuZ3RoOyB4Y1stLWFdID09PSAwOykgeGMucG9wKCk7XHJcblxyXG4gICAgeS5jID0geGM7XHJcbiAgICB5LmUgPSB5ZTtcclxuXHJcbiAgICByZXR1cm4geTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIHJhaXNlZCB0byB0aGUgcG93ZXIgbi5cclxuICAgKiBJZiBuIGlzIG5lZ2F0aXZlLCByb3VuZCB0byBhIG1heGltdW0gb2YgQmlnLkRQIGRlY2ltYWwgcGxhY2VzIHVzaW5nIHJvdW5kaW5nXHJcbiAgICogbW9kZSBCaWcuUk0uXHJcbiAgICpcclxuICAgKiBuIHtudW1iZXJ9IEludGVnZXIsIC1NQVhfUE9XRVIgdG8gTUFYX1BPV0VSIGluY2x1c2l2ZS5cclxuICAgKi9cclxuICBQLnBvdyA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgICB2YXIgeCA9IHRoaXMsXHJcbiAgICAgIG9uZSA9IG5ldyB4LmNvbnN0cnVjdG9yKDEpLFxyXG4gICAgICB5ID0gb25lLFxyXG4gICAgICBpc25lZyA9IG4gPCAwO1xyXG5cclxuICAgIGlmIChuICE9PSB+fm4gfHwgbiA8IC1NQVhfUE9XRVIgfHwgbiA+IE1BWF9QT1dFUikgdGhyb3cgRXJyb3IoSU5WQUxJRCArICdleHBvbmVudCcpO1xyXG4gICAgaWYgKGlzbmVnKSBuID0gLW47XHJcblxyXG4gICAgZm9yICg7Oykge1xyXG4gICAgICBpZiAobiAmIDEpIHkgPSB5LnRpbWVzKHgpO1xyXG4gICAgICBuID4+PSAxO1xyXG4gICAgICBpZiAoIW4pIGJyZWFrO1xyXG4gICAgICB4ID0geC50aW1lcyh4KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaXNuZWcgPyBvbmUuZGl2KHkpIDogeTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyByb3VuZGVkIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm1cclxuICAgKiB0byBhIG1heGltdW0gb2YgZHAgZGVjaW1hbCBwbGFjZXMsIG9yLCBpZiBkcCBpcyBuZWdhdGl2ZSwgdG8gYW4gaW50ZWdlciB3aGljaCBpcyBhXHJcbiAgICogbXVsdGlwbGUgb2YgMTAqKi1kcC5cclxuICAgKiBJZiBkcCBpcyBub3Qgc3BlY2lmaWVkLCByb3VuZCB0byAwIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAqIElmIHJtIGlzIG5vdCBzcGVjaWZpZWQsIHVzZSBCaWcuUk0uXHJcbiAgICpcclxuICAgKiBkcD8ge251bWJlcn0gSW50ZWdlciwgLU1BWF9EUCB0byBNQVhfRFAgaW5jbHVzaXZlLlxyXG4gICAqIHJtPyAwLCAxLCAyIG9yIDMgKFJPVU5EX0RPV04sIFJPVU5EX0hBTEZfVVAsIFJPVU5EX0hBTEZfRVZFTiwgUk9VTkRfVVApXHJcbiAgICovXHJcbiAgUC5yb3VuZCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgIHZhciBCaWcgPSB0aGlzLmNvbnN0cnVjdG9yO1xyXG4gICAgaWYgKGRwID09PSBVTkRFRklORUQpIGRwID0gMDtcclxuICAgIGVsc2UgaWYgKGRwICE9PSB+fmRwIHx8IGRwIDwgLU1BWF9EUCB8fCBkcCA+IE1BWF9EUCkgdGhyb3cgRXJyb3IoSU5WQUxJRF9EUCk7XHJcbiAgICByZXR1cm4gcm91bmQobmV3IEJpZyh0aGlzKSwgZHAsIHJtID09PSBVTkRFRklORUQgPyBCaWcuUk0gOiBybSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhlIHZhbHVlIG9mIHRoaXMgQmlnLCByb3VuZGVkLCBpZlxyXG4gICAqIG5lY2Vzc2FyeSwgdG8gYSBtYXhpbXVtIG9mIEJpZy5EUCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIEJpZy5STS5cclxuICAgKi9cclxuICBQLnNxcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgciwgYywgdCxcclxuICAgICAgeCA9IHRoaXMsXHJcbiAgICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgIHMgPSB4LnMsXHJcbiAgICAgIGUgPSB4LmUsXHJcbiAgICAgIGhhbGYgPSBuZXcgQmlnKDAuNSk7XHJcblxyXG4gICAgLy8gWmVybz9cclxuICAgIGlmICgheC5jWzBdKSByZXR1cm4gbmV3IEJpZyh4KTtcclxuXHJcbiAgICAvLyBOZWdhdGl2ZT9cclxuICAgIGlmIChzIDwgMCkgdGhyb3cgRXJyb3IoTkFNRSArICdObyBzcXVhcmUgcm9vdCcpO1xyXG5cclxuICAgIC8vIEVzdGltYXRlLlxyXG4gICAgcyA9IE1hdGguc3FydCh4ICsgJycpO1xyXG5cclxuICAgIC8vIE1hdGguc3FydCB1bmRlcmZsb3cvb3ZlcmZsb3c/XHJcbiAgICAvLyBSZS1lc3RpbWF0ZTogcGFzcyB4IGNvZWZmaWNpZW50IHRvIE1hdGguc3FydCBhcyBpbnRlZ2VyLCB0aGVuIGFkanVzdCB0aGUgcmVzdWx0IGV4cG9uZW50LlxyXG4gICAgaWYgKHMgPT09IDAgfHwgcyA9PT0gMSAvIDApIHtcclxuICAgICAgYyA9IHguYy5qb2luKCcnKTtcclxuICAgICAgaWYgKCEoYy5sZW5ndGggKyBlICYgMSkpIGMgKz0gJzAnO1xyXG4gICAgICBzID0gTWF0aC5zcXJ0KGMpO1xyXG4gICAgICBlID0gKChlICsgMSkgLyAyIHwgMCkgLSAoZSA8IDAgfHwgZSAmIDEpO1xyXG4gICAgICByID0gbmV3IEJpZygocyA9PSAxIC8gMCA/ICcxZScgOiAocyA9IHMudG9FeHBvbmVudGlhbCgpKS5zbGljZSgwLCBzLmluZGV4T2YoJ2UnKSArIDEpKSArIGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgciA9IG5ldyBCaWcocyk7XHJcbiAgICB9XHJcblxyXG4gICAgZSA9IHIuZSArIChCaWcuRFAgKz0gNCk7XHJcblxyXG4gICAgLy8gTmV3dG9uLVJhcGhzb24gaXRlcmF0aW9uLlxyXG4gICAgZG8ge1xyXG4gICAgICB0ID0gcjtcclxuICAgICAgciA9IGhhbGYudGltZXModC5wbHVzKHguZGl2KHQpKSk7XHJcbiAgICB9IHdoaWxlICh0LmMuc2xpY2UoMCwgZSkuam9pbignJykgIT09IHIuYy5zbGljZSgwLCBlKS5qb2luKCcnKSk7XHJcblxyXG4gICAgcmV0dXJuIHJvdW5kKHIsIEJpZy5EUCAtPSA0LCBCaWcuUk0pO1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIHRpbWVzIHRoZSB2YWx1ZSBvZiBCaWcgeS5cclxuICAgKi9cclxuICBQLnRpbWVzID0gUC5tdWwgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgdmFyIGMsXHJcbiAgICAgIHggPSB0aGlzLFxyXG4gICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICB4YyA9IHguYyxcclxuICAgICAgeWMgPSAoeSA9IG5ldyBCaWcoeSkpLmMsXHJcbiAgICAgIGEgPSB4Yy5sZW5ndGgsXHJcbiAgICAgIGIgPSB5Yy5sZW5ndGgsXHJcbiAgICAgIGkgPSB4LmUsXHJcbiAgICAgIGogPSB5LmU7XHJcblxyXG4gICAgLy8gRGV0ZXJtaW5lIHNpZ24gb2YgcmVzdWx0LlxyXG4gICAgeS5zID0geC5zID09IHkucyA/IDEgOiAtMTtcclxuXHJcbiAgICAvLyBSZXR1cm4gc2lnbmVkIDAgaWYgZWl0aGVyIDAuXHJcbiAgICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkgcmV0dXJuIG5ldyBCaWcoeS5zICogMCk7XHJcblxyXG4gICAgLy8gSW5pdGlhbGlzZSBleHBvbmVudCBvZiByZXN1bHQgYXMgeC5lICsgeS5lLlxyXG4gICAgeS5lID0gaSArIGo7XHJcblxyXG4gICAgLy8gSWYgYXJyYXkgeGMgaGFzIGZld2VyIGRpZ2l0cyB0aGFuIHljLCBzd2FwIHhjIGFuZCB5YywgYW5kIGxlbmd0aHMuXHJcbiAgICBpZiAoYSA8IGIpIHtcclxuICAgICAgYyA9IHhjO1xyXG4gICAgICB4YyA9IHljO1xyXG4gICAgICB5YyA9IGM7XHJcbiAgICAgIGogPSBhO1xyXG4gICAgICBhID0gYjtcclxuICAgICAgYiA9IGo7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW5pdGlhbGlzZSBjb2VmZmljaWVudCBhcnJheSBvZiByZXN1bHQgd2l0aCB6ZXJvcy5cclxuICAgIGZvciAoYyA9IG5ldyBBcnJheShqID0gYSArIGIpOyBqLS07KSBjW2pdID0gMDtcclxuXHJcbiAgICAvLyBNdWx0aXBseS5cclxuXHJcbiAgICAvLyBpIGlzIGluaXRpYWxseSB4Yy5sZW5ndGguXHJcbiAgICBmb3IgKGkgPSBiOyBpLS07KSB7XHJcbiAgICAgIGIgPSAwO1xyXG5cclxuICAgICAgLy8gYSBpcyB5Yy5sZW5ndGguXHJcbiAgICAgIGZvciAoaiA9IGEgKyBpOyBqID4gaTspIHtcclxuXHJcbiAgICAgICAgLy8gQ3VycmVudCBzdW0gb2YgcHJvZHVjdHMgYXQgdGhpcyBkaWdpdCBwb3NpdGlvbiwgcGx1cyBjYXJyeS5cclxuICAgICAgICBiID0gY1tqXSArIHljW2ldICogeGNbaiAtIGkgLSAxXSArIGI7XHJcbiAgICAgICAgY1tqLS1dID0gYiAlIDEwO1xyXG5cclxuICAgICAgICAvLyBjYXJyeVxyXG4gICAgICAgIGIgPSBiIC8gMTAgfCAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjW2pdID0gKGNbal0gKyBiKSAlIDEwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEluY3JlbWVudCByZXN1bHQgZXhwb25lbnQgaWYgdGhlcmUgaXMgYSBmaW5hbCBjYXJyeSwgb3RoZXJ3aXNlIHJlbW92ZSBsZWFkaW5nIHplcm8uXHJcbiAgICBpZiAoYikgKyt5LmU7XHJcbiAgICBlbHNlIGMuc2hpZnQoKTtcclxuXHJcbiAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXHJcbiAgICBmb3IgKGkgPSBjLmxlbmd0aDsgIWNbLS1pXTspIGMucG9wKCk7XHJcbiAgICB5LmMgPSBjO1xyXG5cclxuICAgIHJldHVybiB5O1xyXG4gIH07XHJcblxyXG5cclxuICAvKlxyXG4gICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGluIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGRwIGZpeGVkIGRlY2ltYWxcclxuICAgKiBwbGFjZXMgYW5kIHJvdW5kZWQgdXNpbmcgQmlnLlJNLlxyXG4gICAqXHJcbiAgICogZHA/IHtudW1iZXJ9IEludGVnZXIsIDAgdG8gTUFYX0RQIGluY2x1c2l2ZS5cclxuICAgKi9cclxuICBQLnRvRXhwb25lbnRpYWwgPSBmdW5jdGlvbiAoZHApIHtcclxuICAgIHJldHVybiBzdHJpbmdpZnkodGhpcywgMSwgZHAsIGRwKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpbiBub3JtYWwgbm90YXRpb24gdG8gZHAgZml4ZWQgZGVjaW1hbFxyXG4gICAqIHBsYWNlcyBhbmQgcm91bmRlZCB1c2luZyBCaWcuUk0uXHJcbiAgICpcclxuICAgKiBkcD8ge251bWJlcn0gSW50ZWdlciwgMCB0byBNQVhfRFAgaW5jbHVzaXZlLlxyXG4gICAqXHJcbiAgICogKC0wKS50b0ZpeGVkKDApIGlzICcwJywgYnV0ICgtMC4xKS50b0ZpeGVkKDApIGlzICctMCcuXHJcbiAgICogKC0wKS50b0ZpeGVkKDEpIGlzICcwLjAnLCBidXQgKC0wLjAxKS50b0ZpeGVkKDEpIGlzICctMC4wJy5cclxuICAgKi9cclxuICBQLnRvRml4ZWQgPSBmdW5jdGlvbiAoZHApIHtcclxuICAgIHJldHVybiBzdHJpbmdpZnkodGhpcywgMiwgZHAsIHRoaXMuZSArIGRwKTtcclxuICB9O1xyXG5cclxuXHJcbiAgLypcclxuICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyByb3VuZGVkIHRvIHNkIHNpZ25pZmljYW50IGRpZ2l0cyB1c2luZ1xyXG4gICAqIEJpZy5STS4gVXNlIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHNkIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBuZWNlc3NhcnkgdG8gcmVwcmVzZW50XHJcbiAgICogdGhlIGludGVnZXIgcGFydCBvZiB0aGUgdmFsdWUgaW4gbm9ybWFsIG5vdGF0aW9uLlxyXG4gICAqXHJcbiAgICogc2Qge251bWJlcn0gSW50ZWdlciwgMSB0byBNQVhfRFAgaW5jbHVzaXZlLlxyXG4gICAqL1xyXG4gIFAudG9QcmVjaXNpb24gPSBmdW5jdGlvbiAoc2QpIHtcclxuICAgIHJldHVybiBzdHJpbmdpZnkodGhpcywgMywgc2QsIHNkIC0gMSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcuXHJcbiAgICogUmV0dXJuIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoaXMgQmlnIGhhcyBhIHBvc2l0aXZlIGV4cG9uZW50IGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhblxyXG4gICAqIEJpZy5QRSwgb3IgYSBuZWdhdGl2ZSBleHBvbmVudCBlcXVhbCB0byBvciBsZXNzIHRoYW4gQmlnLk5FLlxyXG4gICAqIE9taXQgdGhlIHNpZ24gZm9yIG5lZ2F0aXZlIHplcm8uXHJcbiAgICovXHJcbiAgUC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBzdHJpbmdpZnkodGhpcyk7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qXHJcbiAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcuXHJcbiAgICogUmV0dXJuIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoaXMgQmlnIGhhcyBhIHBvc2l0aXZlIGV4cG9uZW50IGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhblxyXG4gICAqIEJpZy5QRSwgb3IgYSBuZWdhdGl2ZSBleHBvbmVudCBlcXVhbCB0byBvciBsZXNzIHRoYW4gQmlnLk5FLlxyXG4gICAqIEluY2x1ZGUgdGhlIHNpZ24gZm9yIG5lZ2F0aXZlIHplcm8uXHJcbiAgICovXHJcbiAgUC52YWx1ZU9mID0gUC50b0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gc3RyaW5naWZ5KHRoaXMsIDQpO1xyXG4gIH07XHJcblxyXG5cclxuICAvLyBFeHBvcnRcclxuXHJcblxyXG4gIEJpZyA9IF9CaWdfKCk7XHJcblxyXG4gIEJpZ1snZGVmYXVsdCddID0gQmlnLkJpZyA9IEJpZztcclxuXHJcbiAgLy9BTUQuXHJcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJpZzsgfSk7XHJcblxyXG4gIC8vIE5vZGUgYW5kIG90aGVyIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cy5cclxuICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJpZztcclxuXHJcbiAgLy9Ccm93c2VyLlxyXG4gIH0gZWxzZSB7XHJcbiAgICBHTE9CQUwuQmlnID0gQmlnO1xyXG4gIH1cclxufSkodGhpcyk7XHJcbiJdLCJwcmVFeGlzdGluZ0NvbW1lbnQiOiIvLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIuanMubWFwIn0=
